
;XIncludeFile "../transform().pbi"
XIncludeFile "../-widgets.pbi"
; XIncludeFile "../examples/empty5.pb"

;
; This code is automatically generated by the FormDesigner.
; Manual modification is possible to adjust existing commands, but anything else will be dropped when the code is compiled.
; Event procedures needs to be put in another source file.
;

;- 
CompilerIf #PB_Compiler_IsMainFile
  EnableExplicit
  
  Uselib( WIDGET )
  UsePNGImageDecoder( )
  
  #_drag_private_type = 1
  
  ;- ENUMs
  ; properties items
  Enumeration 
    #_pi_group_0 
    #_pi_id
    #_pi_class
    #_pi_text
    
    #_pi_group_1 
    #_pi_x
    #_pi_y
    #_pi_width
    #_pi_height
    
    #_pi_group_2 
    #_pi_disable
    #_pi_hide
  EndEnumeration
  
  ; events items
  Enumeration 
    #_ei_leftclick
    #_ei_change
    #_ei_enter
    #_ei_leave
  EndEnumeration
  
  ; toolbar buttons
  Enumeration 
    #_tb_group_left = 3
    #_tb_group_right
    #_tb_group_top
    #_tb_group_bottom
    #_tb_group_width
    #_tb_group_height
    
    #_tb_align_left
    #_tb_align_right
    #_tb_align_top
    #_tb_align_bottom
    #_tb_align_center
    
    #_tb_widget_paste
    #_tb_widget_delete
    #_tb_widget_copy
    #_tb_widget_cut
  EndEnumeration
  
  ;- GLOBALs
  Global window_ide, 
         canvas_ide
  
  Global Splitter_ide, 
         Splitter_design, 
         splitter_debug, 
         Splitter_inspector, 
         splitter_help
  
  Global toolbar_design, 
         listview_debug, 
         id_help_text
  
  Global id_design_panel, 
         id_design_form,
         id_design_code
  
  Global id_inspector_panel,
         id_inspector_tree, 
         id_elements_tree,
         id_properties_tree, 
         id_events_tree
  
  Global group_select,
         group_drag
  
  UsePNGImageDecoder( )
  
  Global img = LoadImage( #PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Paste.png" ) 
  
  ;-
  ;- PUBLICs
  ;-
  Procedure Points( Steps = 5, line=0, Color = 0 )
    Static ID
    Protected hDC, x,y
    
    If Not ID
      ;Steps - 1
      
      ExamineDesktops( )
      Protected width = DesktopWidth( 0 )   
      Protected height = DesktopHeight( 0 )
      ID = CreateImage( #PB_Any, width, height, 32, #PB_Image_Transparent )
      
      If Color = 0 : Color = $ff808080 : EndIf
      
      If StartDrawing( ImageOutput( ID ) )
        DrawingMode( #PB_2DDrawing_AllChannels )
        ;Box( 0, 0, width, height, BoxColor )
        
        For x = 0 To width - 1
          
          For y = 0 To height - 1
            
            If line
              Line( x, 0, 1,height, Color )
              Line( 0, y, width,1, Color )
            Else
              Line( x, y, 1,1, Color )
            EndIf
            
            y + Steps
          Next
          
          
          x + Steps
        Next
        
        StopDrawing( )
      EndIf
    EndIf
    
    ProcedureReturn ID
  EndProcedure
  
  
  ;-
  Macro properties_update_id( _gadget_, _value_ )
    SetItemText( _gadget_, #_pi_id,      GetItemText( _gadget_, #_pi_id )      +Chr( 10 )+Str( _value_ ) )
  EndMacro
  
  Macro properties_update_text( _gadget_, _value_ )
    SetItemText( _gadget_, #_pi_text,    GetItemText( _gadget_, #_pi_text )    +Chr( 10 )+GetText( _value_ ) )
  EndMacro
  
  Macro properties_update_class( _gadget_, _value_ )
    SetItemText( _gadget_, #_pi_class,   GetItemText( _gadget_, #_pi_class )   +Chr( 10 )+GetClass( _value_ )+"_"+GetCount( _value_ ) )
  EndMacro
  
  Macro properties_update_hide( _gadget_, _value_ )
    SetItemText( _gadget_, #_pi_hide,    GetItemText( _gadget_, #_pi_hide )    +Chr( 10 )+Str( Hide( _value_ ) ) )
  EndMacro
  
  Macro properties_update_disable( _gadget_, _value_ )
    SetItemText( _gadget_, #_pi_disable, GetItemText( _gadget_, #_pi_disable ) +Chr( 10 )+Str( Disable( _value_ ) ) )
  EndMacro
  
  Macro properties_update_coordinate( _gadget_, _value_ )
    SetItemText( _gadget_, #_pi_x,       GetItemText( _gadget_, #_pi_x )       +Chr( 10 )+Str( x( _value_, #__c_container ) ) )
    SetItemText( _gadget_, #_pi_y,       GetItemText( _gadget_, #_pi_y )       +Chr( 10 )+Str( Y( _value_, #__c_container ) ) )
    SetItemText( _gadget_, #_pi_width,   GetItemText( _gadget_, #_pi_width )   +Chr( 10 )+Str( Width( _value_ ) ) )
    SetItemText( _gadget_, #_pi_height,  GetItemText( _gadget_, #_pi_height )  +Chr( 10 )+Str( Height( _value_ ) ) )
  EndMacro
  
  Macro properties_update( _gadget_, _value_ )
    properties_update_id( _gadget_, _value_ )
    properties_update_class( _gadget_, _value_ )
    
    properties_update_text( _gadget_, _value_ )
    properties_update_coordinate( _gadget_, _value_ )
    
    properties_update_disable( _gadget_, _value_ )
    properties_update_hide( _gadget_, _value_ )
  EndMacro
  
  
  ;-
  Procedure.s FlagFromFlag( Type, flag.i ) ; 
    Protected flags.S
    
    Select type
      Case #PB_GadgetType_Text
        If flag & #__text_center
          flags + "#PB_Text_Center | "
        EndIf
        If flag & #__text_right
          flags + "#PB_Button_Right | "
        EndIf
        If flag & #__text_border
          flags + "#PB_Text_Border | "
        EndIf
        
      Case #PB_GadgetType_Button
        If flag & #__button_left
          flags + "#PB_Button_Left | "
        EndIf
        If flag & #__button_right
          flags + "#PB_Button_Right | "
        EndIf
        If flag & #__button_multiline
          flags + "#PB_Button_MultiLine | "
        EndIf
        If flag & #__button_toggle
          flags + "#PB_Button_Toggle | "
        EndIf
        If flag & #__button_default
          flags + "#PB_Button_Default | "
        EndIf
        
      Case #PB_GadgetType_Container
        If flag & #__flag_borderless
          flags + "#PB_Container_BorderLess | "
        EndIf
        ;         If flag & #__flag_flat
        ;           flags + "#PB_Container_Border | "
        ;         EndIf
        
    EndSelect
    
    ProcedureReturn Trim( flags, "|" )
  EndProcedure
  
  Procedure$ add_line( *new._s_widget, Handle$ ) ; Ok
    Protected ID$, Result$, param1$, param2$, param3$, Text$, flag$
    
    flag$ = FlagFromFlag( *new\type, *new\flag )
    
    Select Asc( Handle$ )
      Case '#'        : ID$ = Handle$           : Handle$ = ""
      Case '0' To '9' : ID$ = Chr( Asc( Handle$ ) ) : Handle$ = ""
      Default         : ID$ = "#PB_Any"         : Handle$ + " = "
    EndSelect
    
    Text$ = Chr( 34 )+*new\text\string+Chr( 34 )
    
    If *new\class = "Window"
      Result$ = Handle$ +"Window( "+ *new\x +", "+ *new\y +", "+ *new\width +", "+ *new\height
    Else
      ; type_$ = "Gadget( "+ID$+", "
      Result$ = Handle$ + *new\class +"( "+ *new\x +", "+ *new\y +", "+ *new\width +", "+ *new\height
    EndIf
    
    Select *new\class
      Case "Window" : Result$ +", "+ Text$                                                                          
        If param1$ : Result$ +", "+ param1$ : EndIf 
        
      Case "ScrollArea"    : Result$ +", "+ param1$ +", "+ param2$    
        If param3$ : Result$ +", "+ param3$ : EndIf 
        
      Case "Calendar"      
        If param1$ : Result$ +", "+ param1$ : EndIf 
        If param1$ : Result$ +", "+ param1$ : EndIf 
        
      Case "Button"        : Result$ +", "+ Text$                                                                               
      Case "String"        : Result$ +", "+ Text$                                                                               
      Case "Text"          : Result$ +", "+ Text$                                                                                 
      Case "CheckBox"      : Result$ +", "+ Text$                                                                             
      Case "Option"        : Result$ +", "+ Text$
      Case "Frame"         : Result$ +", "+ Text$                                                                                
      Case "Web"           : Result$ +", "+ Text$
      Case "Date"          : Result$ +", "+ Text$              
      Case "ExplorerList"  : Result$ +", "+ Text$                                                                         
      Case "ExplorerTree"  : Result$ +", "+ Text$                                                                         
      Case "ExplorerCombo" : Result$ +", "+ Text$                                                                        
        
      Case "HyperLink"     : Result$ +", "+ Text$ +", "+ param1$                                                       
      Case "ListIcon"      : Result$ +", "+ Text$ +", "+ param1$                                                        
        
      Case "Image"         : Result$ +", "+ param1$   
      Case "Scintilla"     : Result$ +", "+ param1$
      Case "Shortcut"      : Result$ +", "+ param1$
      Case "ButtonImage"   : Result$ +", "+ param1$                                                                                             
        
      Case "TrackBar"      : Result$ +", "+ param1$ +", "+ param2$                                                                         
      Case "Spin"          : Result$ +", "+ param1$ +", "+ param2$                                                                             
      Case "Splitter"      : Result$ +", "+ param1$ +", "+ param2$                                                                         
      Case "MDI"           : Result$ +", "+ param1$ +", "+ param2$                                                                              
      Case "ProgressBar"   : Result$ +", "+ param1$ +", "+ param2$                                                                      
      Case "ScrollBar"     : Result$ +", "+ param1$ +", "+ param2$ +", "+ param3$                                                 
    EndSelect
    
    If flag$ : Result$ +", "+ flag$ : EndIf 
    
    Result$+" )" 
    
    ProcedureReturn Result$
  EndProcedure
  
  Procedure add_code( *new._s_widget, Class.s, Position.i, SubLevel.i )
    Protected code.s 
    
    ;   code = Space( ( *new\level-2 )*4 ) +
    ;          Class +" = "+ 
    ;          *new\class +"( " + 
    ;          *new\x +", "+
    ;          *new\y +", "+ 
    ;          *new\width +", "+ 
    ;          *new\height +", "+ 
    ;          *new\text\string +", "+ 
    ;          FlagFromFlag( *new\type, *new\flag )+
    ;          " )"
    
    code = Space( ( *new\level-2 )*4 ) + add_line( *new._s_widget, Class.s )
    
    ;   ForEach widget( )
    ;     If Child( widget( ), id_design_form )
    ;       Debug widget( )\class
    ;     EndIf
    ;   Next
    
    If IsGadget( listview_debug )
      AddGadgetItem( listview_debug, Position, code )
    Else
      AddItem( listview_debug, Position, code )
    EndIf
  EndProcedure
  
  
  ;-
  Declare widget_events( )
  
  Procedure.i widget_images( *id, Directory$ )
    Protected ZipFile$ = Directory$ + "SilkTheme.zip"
    
    If FileSize( ZipFile$ ) < 1
      CompilerIf #PB_Compiler_OS = #PB_OS_Windows
        ZipFile$ = #PB_Compiler_Home+"themes\SilkTheme.zip"
      CompilerElse
        ZipFile$ = #PB_Compiler_Home+"themes/SilkTheme.zip"
      CompilerEndIf
      If FileSize( ZipFile$ ) < 1
        MessageRequester( "Designer Error", "Themes\SilkTheme.zip Not found in the current directory" +#CRLF$+ "Or in PB_Compiler_Home\themes directory" +#CRLF$+#CRLF$+ "Exit now", #PB_MessageRequester_Error | #PB_MessageRequester_Ok )
        End
      EndIf
    EndIf
    ;   Directory$ = GetCurrentDirectory( )+"images/" ; "";
    ;   Protected ZipFile$ = Directory$ + "images.zip"
    
    
    If FileSize( ZipFile$ ) > 0
      ; UsePNGImageDecoder( )
      
      CompilerIf #PB_Compiler_Version > 522
        UseZipPacker( )
      CompilerEndIf
      
      Protected PackEntryName.s, ImageSize, *memory, Image, ZipFile
      ZipFile = OpenPack( #PB_Any, ZipFile$, #PB_PackerPlugin_Zip )
      
      If ZipFile  
        If ExaminePack( ZipFile )
          While NextPackEntry( ZipFile )
            
            PackEntryName.S = PackEntryName( ZipFile )
            ImageSize = PackEntrySize( ZipFile )
            If ImageSize
              *memory = AllocateMemory( ImageSize )
              UncompressPackMemory( ZipFile, *memory, ImageSize )
              PackEntryName.S = ReplaceString( PackEntryName.S,".png","" )
              
              If PackEntryName.S="application_form" 
                PackEntryName.S="vd_windowgadget"
              EndIf
              
              If PackEntryName.S="page_white_edit" 
                PackEntryName.S="vd_scintillagadget"
              EndIf
              
              Select PackEntryType( ZipFile )
                Case #PB_Packer_File
                  If FindString( Left( PackEntryName.S, 3 ), "vd_" )
                    PackEntryName.S = ReplaceString( PackEntryName.S,"vd_","" )
                    PackEntryName.S = ReplaceString( PackEntryName.S,"gadget","" )
                    PackEntryName.S = ReplaceString( PackEntryName.S,"bar","" )
                    PackEntryName = LCase( PackEntryName.S )
                    
                    If FindString( PackEntryName, "cursor" )
                      PackEntryName.S = UCase( Left( PackEntryName.S, 1 ) ) + 
                                        Right( PackEntryName.S, Len( PackEntryName.S )-1 )
                      
                      Image = CatchImage( #PB_Any, *memory, ImageSize )
                      AddItem( *id, 0, PackEntryName.S, Image )
                      SetItemData( *id, 0, Image )
                      Image = #Null
                      
                    ElseIf FindString( PackEntryName, "window" )
                      Image = #PB_Any
                    ElseIf FindString( PackEntryName, "image" )
                      Image = #PB_Any
                    ElseIf FindString( PackEntryName, "button" )
                      Image = #PB_Any
                    ElseIf FindString( PackEntryName, "string" )
                      Image = #PB_Any
                    ElseIf FindString( PackEntryName, "text" )
                      Image = #PB_Any
                    ElseIf FindString( PackEntryName, "progress" )
                      Image = #PB_Any
                    ElseIf FindString( PackEntryName, "container" )
                      Image = #PB_Any
                    ElseIf FindString( PackEntryName, "scrollarea" )
                      Image = #PB_Any
                    ElseIf FindString( PackEntryName, "splitter" )
                      Image = #PB_Any
                    ElseIf FindString( PackEntryName, "panel" )
                      Image = #PB_Any
                    Else
                      ; Image = #PB_Any
                    EndIf
                    
                    If Image
                      PackEntryName.S = UCase( Left( PackEntryName.S, 1 ) ) + 
                                        Right( PackEntryName.S, Len( PackEntryName.S )-1 )
                      
                      Image = CatchImage( #PB_Any, *memory, ImageSize )
                      AddItem( *id, -1, PackEntryName.S, Image )
                      SetItemData( *id, CountItems( *id )-1, Image )
                      Image = #Null
                    EndIf
                  EndIf    
              EndSelect
              
              FreeMemory( *memory )
            EndIf
          Wend  
        EndIf
        
        ; select cursor
        SetState( *id, 0 )
        ClosePack( ZipFile )
      EndIf
    EndIf
  EndProcedure
  
  Procedure widget_add( *parent._s_widget, class.s, x.l,y.l, width.l=0, height.l=0 )
    Protected *new._s_widget, *param1, *param2, *param3
    Protected flag.i
    
    If *parent 
      class.s = LCase( Trim( class ) )
      OpenList( *parent, GetState( *parent ) ) 
      
      If class = "scrollarea"
        *param1 = width
        *param2 = height
        *param3 = 5
      EndIf
      
      If transform( ) And transform( )\grid\size
        x = ( x/transform( )\grid\size ) * transform( )\grid\size
        y = ( y/transform( )\grid\size ) * transform( )\grid\size
        width = ( width/transform( )\grid\size ) * transform( )\grid\size + 1
        height = ( height/transform( )\grid\size ) * transform( )\grid\size + 1
        
        ;Debug ( transform( )\pos + #__window_frame_size )
        
        If class = "window"
          width + ( #__window_frame_size * 2 )%transform( )\grid\size
          height + ( #__window_frame_size * 2 + #__window_caption_height )%transform( )\grid\size
        EndIf
      EndIf
      
      If Not width Or width = 1
        width = 100
      EndIf
      If Not height Or height = 1
        height = 30
      EndIf
      
      
      ; create elements
      Select class
        Case "window"    
          If GetType( *parent ) = #PB_GadgetType_MDI
            *new = AddItem( *parent, #PB_Any, "", - 1, flag )
            Resize( *new, #PB_Ignore, #PB_Ignore, width,height )
          Else
            flag | #__window_systemmenu | #__window_maximizegadget | #__window_minimizegadget
            a_init(*parent)
            ;;a_set(*parent)
            *new = Window( x,y,width,height, "", flag, *parent )
          EndIf
          
          SetColor( *new, #__color_back, $FFECECEC )
          Bind( *new, @widget_events( ) )
          
        Case "container"   : *new = Container( x,y,width,height, flag )                             : CloseList( )
          SetColor( *new, #__color_back, $FFF1F1F1 )
        Case "panel"       : *new = Panel( x,y,width,height, flag ) : AddItem( *new, -1, class+"_0" ) : CloseList( )
        Case "scrollarea"  : *new = ScrollArea( x,y,width,height, *param1, *param2, *param3, flag ) : CloseList( )
        Case "splitter"    : *new = Splitter( x,y,width,height, *param1, *param2, flag )
          
        Case "image"       : *new = Image( x,y,width,height, img, flag )
        Case "buttonimage" : *new = ButtonImage( x,y,width,height, img, flag )
          
        Case "progress"      : *new = Progress( x,y,width,height, 0,100, flag ) 
          
        Case "button"      : *new = Button( x,y,width,height, "", flag ) 
        Case "string"      : *new = String( x,y,width,height, "", flag )
        Case "text"        : *new = Text( x,y,width,height, "", flag )
      EndSelect
      
      If *new
        If *new\container ;> 0
          If *new\container = #__type_window
            SetImage( *new, CatchImage( #PB_Any,?group_bottom ) )
            If transform( ) And transform( )\grid\size > 1 
              ;  SetBackgroundImage( *new, Points( transform( )\grid\size-1, 0, $FFFF0000 ) )
              SetBackgroundImage( *new, Points( transform( )\grid\size-1, transform( )\grid\type, $FF000000 ) ) ; $BDC5C6C6 ) )
            EndIf
          EndIf
          
          ;  SetBackgroundImage( *new, Points( transform( )\grid\size-1, #__grid_type, $FF000000 ) ) ; $BDC5C6C6 ) )
          EnableDrop( *new, #PB_Drop_Private, #PB_Drag_Copy, #_drag_private_type )
        EndIf
        
        Class.s = GetClass( *new )+"_"+GetCount( *new )
        SetText( *new, class )
        
        Protected countitems = CountItems( id_inspector_tree )
        Protected i, sublevel, position = GetData( *parent ) 
        
        ; get childrens position and sublevel
        For i = 0 To countitems - 1
          If *parent = GetItemData( id_inspector_tree, i )
            sublevel = GetItemAttribute( id_inspector_tree, i, #PB_Tree_SubLevel ) + 1
            position = ( i+1 )
          EndIf
          
          If sublevel <= GetItemAttribute( id_inspector_tree, i, #PB_Tree_SubLevel )
            position = ( i+1 )
          EndIf
        Next 
        
        ; set new widget data
        SetData( *new, position )
        
        ; update new widget data item
        If countitems > position
          For i = position To countitems - 1
            SetData( GetItemData( id_inspector_tree, i ), i + 1 )
          Next 
        EndIf
        
        ; img = GetItemData( id_elements_tree, transform( )\type )
        countitems = CountItems( id_elements_tree )
        
        Protected img =- 1
        For i = 0 To countitems - 1
          If LCase(StringField( Class, 1, "_" )) = LCase(GetItemText( id_elements_tree, i ))
            img = GetItemData( id_elements_tree, i )
            Break
          EndIf
        Next  
        
        ; add to inspector
        AddItem( id_inspector_tree, position, class.s, img, sublevel )
        SetItemData( id_inspector_tree, position, *new )
        ; SetItemState( id_inspector_tree, position, #PB_tree_selected )
        SetState( id_inspector_tree, position )
        
        If IsGadget( id_design_code )
          AddGadgetItem( id_design_code, position, Class.s, 0, SubLevel )
          SetGadgetItemData( id_design_code, position, *new )
          ; SetGadgetItemState( id_design_code, position, #PB_tree_selected )
          SetGadgetState( id_design_code, position ) ; Bug
        EndIf
        
        ; Debug  " pos "+position + "   ( debug >> "+ #PB_Compiler_Procedure +" ( "+#PB_Compiler_Line +" ) )"
        add_code( *new, class, position, sublevel )
        
      EndIf
      
      CloseList( ) 
    EndIf
    
    ProcedureReturn *new
  EndProcedure
  
  Procedure widget_events( )
    Protected e_type = WidgetEventType( )
    Protected EventWidget = EventWidget( )
    
    If IsContainer( EventWidget )
      Select e_type 
        Case #PB_EventType_DragStart
          DragPrivate( #_drag_private_type )
          
        Case #PB_EventType_Drop
          widget_add( EventWidget, GetText( id_elements_tree ), EventDropX( ), EventDropY( ), EventDropWidth( ), EventDropHeight( ) )
          
          ; no create new 
          SetState( id_elements_tree, 0 )
          ; Debug "drop - " + " xy=("+ EventDropX( ) +","+ EventDropY( ) +")" +" wh=("+ EventDropWidth( ) +","+ EventDropHeight( ) +")"
          ;; Debug "drop widget"
          
        Case #PB_EventType_LeftButtonUp
          
          If transform( ) And transform( )\widget And transform( )\widget\_a_transform <> 1
            SetState( id_inspector_tree, -1 )
            If IsGadget( id_design_code )
              SetGadgetState( id_design_code, -1 )
            EndIf
            
            ForEach transform( )\group( )
              SetItemState( id_inspector_tree, GetData( transform( )\group( )\widget ), #PB_Tree_Selected )
              If IsGadget( id_design_code )
                SetGadgetItemState( id_design_code, GetData( transform( )\group( )\widget ), #PB_Tree_Selected )
              EndIf
            Next
          EndIf
          
          
        Case #PB_EventType_LeftButtonDown
          If transform( )\type > 0 Or group_select
            ;transform( )\grab = 1
            If group_select 
              group_drag = EventWidget
            EndIf
          EndIf
          
          ;           If transform( )\widget\transform <> 1
          ;             ForEach transform( )\group( )
          ;               SetItemState( id_inspector_tree, GetData( transform( )\group( )\widget ), 0 )
          ;             Next
          ;           EndIf
          
          
        Case #PB_EventType_MouseEnter
          If transform( )
            Debug "enter widget " + transform( )\type
            If transform( )\type > 0
              SetCursor( EventWidget, #PB_Cursor_Cross )
            EndIf
          EndIf
          
        Case #PB_EventType_MouseLeave
          If transform( ) And transform( )\type > 0 
            If Not Mouse( )\buttons
              SetCursor( EventWidget, #PB_Cursor_Default )
            EndIf
          EndIf
          
          
      EndSelect
    EndIf
    
    Select e_type 
      Case #PB_EventType_MouseMove
      Case #PB_EventType_LeftButtonUp
        
        
      Case #PB_EventType_StatusChange
        ;If GetState( id_inspector_tree ) <> GetData( EventWidget )
        SetState( id_inspector_tree, GetData( EventWidget ) )
        ;EndIf
        If IsGadget( id_design_code )
          SetGadgetState( id_design_code, GetData( EventWidget ) )
        EndIf
        properties_update( id_properties_tree, EventWidget )
        
      Case #PB_EventType_Resize
        properties_update_coordinate( id_properties_tree, EventWidget )
        
    EndSelect
    
  EndProcedure
  
  ;-
  Macro widget_copy( )
    ClearList( *copy( ) )
    
    If transform( )\widget\_a_transform = 1
      AddElement( *copy( ) ) 
      *copy.allocate( GROUP, ( ) )
      *copy( )\widget = transform( )\widget
    Else
      ;       ForEach transform( )\group( )
      ;         AddElement( *copy( ) ) 
      ;         *copy.allocate( GROUP, ( ) )
      ;         *copy( )\widget = transform( )\group( )\widget
      ;       Next
      
      CopyList( transform( )\group( ), *copy( ) )
      
    EndIf
    
    transform( )\id[0]\x = transform( )\grid\size
    transform( )\id[0]\y = transform( )\grid\size
  EndMacro
  
  Macro widget_delete( )
    If transform( )\widget\_a_transform = 1
      RemoveItem( id_inspector_tree, GetData( transform( )\widget ) )
      
      Free( transform( )\widget )
      
      If a_Set( GetItemData( id_inspector_tree, GetState( id_inspector_tree ) ) )
        a_reset( )
      EndIf
    Else
      ForEach transform( )\group( )
        RemoveItem( id_inspector_tree, GetData( transform( )\group( )\widget ) )
        Free( transform( )\group( )\widget )
        DeleteElement( transform( )\group( ) )
      Next
      
      ClearList( transform( )\group( ) )
    EndIf
    
    ; a_set( transform )
  EndMacro
  
  Macro widget_paste( )
    If ListSize( *copy( ) )
      ForEach *copy( )
        widget_add( *copy( )\widget\parent, 
                    *copy( )\widget\class, 
                    *copy( )\widget\x[#__c_container] + ( transform( )\id[0]\x ),; -*copy( )\widget\parent\x[#__c_inner] ),
                    *copy( )\widget\y[#__c_container] + ( transform( )\id[0]\y ),; -*copy( )\widget\parent\y[#__c_inner] ), 
                    *copy( )\widget\width[#__c_frame],
                    *copy( )\widget\height[#__c_frame] )
      Next
      
      transform( )\id[0]\x + transform( )\grid\size
      transform( )\id[0]\y + transform( )\grid\size
      
      ClearList( transform( )\group( ) )
      CopyList( *copy( ), transform( )\group( ) )
    EndIf
    
    ForEach transform( )\group( )
      Debug " ggg "+transform( )\group( )\widget
    Next
    
    ;a_update( transform( )\widget )
  EndMacro
  
  
  
  ;-
  Macro ToolBarButton( _button_, _image_, _mode_=0, _text_="" )
    ; #PB_ToolBar_Normal: the button will act as standard button ( Default )
    ; #PB_ToolBar_Toggle: the button will act as toggle button
    
    ;ButtonImage( 2 + ( ( Bool( MacroExpandedCount>1 ) * 32 ) * ( MacroExpandedCount-1 ) ), 2,30,30,_image_ )
    ButtonImage( 2+( ( widget( )\x+widget( )\width ) * Bool( MacroExpandedCount - 1 ) ), 2,30,30,_image_, _mode_ )
    ;widget( )\color = widget( )\parent\color
    ;widget( )\text\padding\x = 0
    widget( )\class = "ToolBar"
    widget( )\data = _button_
    ;SetData( widget( ), _button_ )
    Bind( widget( ), @ide_events( ) )
  EndMacro
  
  Macro Separator( )
    Text( 2+widget( )\x+widget( )\width, 2,1,30,"" )
    Button( widget( )\x+widget( )\width, 2+4,1,24,"" )
    SetData( widget( ), - MacroExpandedCount )
    Text( widget( )\x+widget( )\width, 2,1,30,"" )
  EndMacro
  
  
  ;-
  Procedure ide_events( )
    Protected *this._s_widget
    Protected e_type = WidgetEvent( )\type
    Protected e_item = WidgetEvent( )\item
    Protected EventWidget = EventWidget( )
    
    Select e_type
      Case #PB_EventType_DragStart
        Debug "drag - "
        ;         DD_EventDragWidth( ) 
        ;         DD_EventDragHeight( )
        
        transform( )\type = 0
        DragPrivate( #_drag_private_type )
        
      Case #PB_EventType_StatusChange
        If EventWidget = listview_debug
          
          ; Debug Left( EventWidget( )\text\string, EventWidget( )\text\caret\pos ); GetState( listview_debug )
        Else
          If e_item = -1
            ;SetText( id_help_text, GetItemText( EventWidget, GetState( EventWidget ) ) )
          Else
            SetText( id_help_text, GetItemText( EventWidget, e_item ) )
          EndIf
        EndIf
        
      Case #PB_EventType_Change
        Protected q, startpos, stoppos
        
        If EventWidget = listview_debug
          Protected x = #PB_Ignore, y = #PB_Ignore
          Protected width = #PB_Ignore, height = #PB_Ignore
          
          Protected findstring.s = Left( EventWidget( )\text\string, EventWidget( )\text\caret\pos )
          Protected countstring = CountString( findstring, "," )
          
          Select countstring
            Case 0, 1, 2, 3, 4
              For q = EventWidget( )\text\edit[1]\len To EventWidget( )\text\edit[1]\pos Step - 1
                If Mid( EventWidget( )\text\string, q, 1 ) = "(" Or 
                   Mid( EventWidget( )\text\string, q, 1 ) = ~"\"" Or
                   Mid( EventWidget( )\text\string, q, 1 ) = ","
                  startpos = q + 1
                  Break
                EndIf
              Next q
              
              For q = EventWidget( )\text\edit[3]\pos To ( EventWidget( )\text\edit[3]\pos + EventWidget( )\text\edit[3]\len )
                If Mid( EventWidget( )\text\string, q, 1 ) = "," Or
                   Mid( EventWidget( )\text\string, q, 1 ) = ~"\"" Or
                   Mid( EventWidget( )\text\string, q, 1 ) = ")"
                  stoppos = q
                  Break
                EndIf
              Next q
              
              If stoppos And stoppos - startpos
                findstring = Mid( EventWidget( )\text\string, startpos, stoppos - startpos )
                
                If countstring = 4
                  SetText( transform( )\widget, findstring )
                Else
                  If countstring = 0
                    x = Val( findstring )
                  ElseIf countstring = 1
                    y = Val( findstring )
                  ElseIf countstring = 2
                    width = Val( findstring )
                  ElseIf countstring = 3
                    height = Val( findstring )
                  EndIf
                  
                  Resize( transform( )\widget, x, y, width, height)
                EndIf
                
              EndIf
          EndSelect
          
          ; Debug Left( EventWidget( )\text\string, EventWidget( )\text\caret\pos ); GetState( listview_debug )
        EndIf
        
        If EventWidget = id_elements_tree
          transform( )\type = GetState( EventWidget )
        EndIf
        
        If EventWidget = id_inspector_tree
          *this = GetItemData( EventWidget, GetState( EventWidget ) )
          
          If a_set( *this )
            a_reset( )
          EndIf
          
          ;;SetActive( *this )
        EndIf
        
        
      Case #PB_EventType_MouseEnter
        ; Debug "id_elements - enter"
        ;       If transform( )\type > 0 
        ;         SetCursor( EventWidget( ), #PB_Cursor_Default )
        ;       EndIf
        
      Case #PB_EventType_MouseLeave
        ; Debug "id_elements - leave"
        ;       If transform( )\type > 0 
        ;         SetCursor( EventWidget( ), ImageID( GetItemData( id_elements_tree, transform( )\type ) ) )
        ;       EndIf
        
      Case #PB_EventType_LeftClick
        If EventWidget = id_elements_tree
          Debug "click"
          ; SetCursor( EventWidget( ), ImageID( GetItemData( id_elements_tree, transform( )\type ) ) )
        EndIf
        
        If getclass( EventWidget ) = "ToolBar"
          Protected transform, move_x, move_y, toolbarbutton = GetData( EventWidget )
          Static NewList *copy._s_group( )
          
          
          Select toolbarbutton
            Case 1
              If Getstate( EventWidget )  
                ; group
                group_select = EventWidget
                ; SetAtributte( EventWidget, #PB_Button_PressedImage )
              Else
                ; un group
                group_select = 0
              EndIf
              
              ForEach transform( )\group( )
                Debug transform( )\group( )\widget\x
                
              Next
              
              
            Case #_tb_widget_copy
              widget_copy( )
              
            Case #_tb_widget_cut
              widget_copy( )
              widget_delete( )
              
            Case #_tb_widget_paste
              widget_paste( )
              
            Case #_tb_widget_delete
              widget_delete( )
              
            Case #_tb_group_left,
                 #_tb_group_right, 
                 #_tb_group_top, 
                 #_tb_group_bottom, 
                 #_tb_group_width, 
                 #_tb_group_height
              
              move_x = transform( )\id[0]\x - transform( )\widget\x[#__c_inner]
              move_y = transform( )\id[0]\y - transform( )\widget\y[#__c_inner]
              
              ForEach transform( )\group( )
                Select toolbarbutton
                  Case #_tb_group_left ; left
                                       ;transform( )\id[0]\x = 0
                    transform( )\id[0]\width = 0
                    Resize( transform( )\group( )\widget, move_x, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                    
                  Case #_tb_group_right ; right
                    transform( )\id[0]\x = 0
                    transform( )\id[0]\width = 0
                    Resize( transform( )\group( )\widget, move_x + transform( )\group( )\width, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                    
                  Case #_tb_group_top ; top
                                      ;transform( )\id[0]\y = 0
                    transform( )\id[0]\height = 0
                    Resize( transform( )\group( )\widget, #PB_Ignore, move_y, #PB_Ignore, #PB_Ignore )
                    
                  Case #_tb_group_bottom ; bottom
                    transform( )\id[0]\y = 0
                    transform( )\id[0]\height = 0
                    Resize( transform( )\group( )\widget, #PB_Ignore, move_y + transform( )\group( )\height, #PB_Ignore, #PB_Ignore )
                    
                  Case #_tb_group_width ; stretch horizontal
                    Resize( transform( )\group( )\widget, #PB_Ignore, #PB_Ignore, transform( )\id[0]\width, #PB_Ignore )
                    
                  Case #_tb_group_height ; stretch vertical
                    Resize( transform( )\group( )\widget, #PB_Ignore, #PB_Ignore, #PB_Ignore, transform( )\id[0]\height )
                    
                EndSelect
              Next
              
              a_update( transform( )\widget )
              
              ;Redraw( Root() )
          EndSelect
        EndIf
        
    EndSelect
  EndProcedure
  
  Procedure ide_open( x=100,y=100,width=800,height=600 )
    ;     OpenWindow( #PB_Any, 0,0,332,232, "" )
    ;     id_design_code = TreeGadget( -1,1,1,330,230 ) 
    
    Define flag = #PB_Window_SystemMenu | #PB_Window_SizeGadget | #PB_Window_MaximizeGadget | #PB_Window_MinimizeGadget
    Define root = widget::Open( OpenWindow( #PB_Any, x,y,width,height, "ide", flag ) )
    window_ide = widget::GetWindow( root )
    canvas_ide = widget::GetGadget( root )
    
    
    toolbar_design = Container( 0,0,0,0 ) 
    ;ToolBar( toolbar, window, flags )
    
    group_select = ToolBarButton( 1, - 1, #__button_Toggle )
    SetAttribute( widget( ), #PB_Button_Image, CatchImage( #PB_Any,?group_un ) )
    SetAttribute( widget( ), #PB_Button_PressedImage, CatchImage( #PB_Any,?group ) )
    
    ;ToolBarButton( 2, CatchImage( #PB_Any,?group_un ) )
    Separator( )
    ToolBarButton( #_tb_group_left, CatchImage( #PB_Any,?group_left ) )
    ToolBarButton( #_tb_group_right, CatchImage( #PB_Any,?group_right ) )
    Separator( )
    ToolBarButton( #_tb_group_top, CatchImage( #PB_Any,?group_top ) )
    ToolBarButton( #_tb_group_bottom, CatchImage( #PB_Any,?group_bottom ) )
    Separator( )
    ToolBarButton( #_tb_group_width, CatchImage( #PB_Any,?group_width ) )
    ToolBarButton( #_tb_group_height, CatchImage( #PB_Any,?group_height ) )
    
    Separator( )
    ToolBarButton( #_tb_widget_copy, CatchImage( #PB_Any,?widget_copy ) )
    ToolBarButton( #_tb_widget_paste, CatchImage( #PB_Any,?widget_paste ) )
    ToolBarButton( #_tb_widget_cut, CatchImage( #PB_Any,?widget_cut ) )
    ToolBarButton( #_tb_widget_delete, CatchImage( #PB_Any,?widget_delete ) )
    Separator( )
    ToolBarButton( #_tb_align_left, CatchImage( #PB_Any,?group_left ) )
    ToolBarButton( #_tb_align_top, CatchImage( #PB_Any,?group_top ) )
    ToolBarButton( #_tb_align_center, CatchImage( #PB_Any,?group_width ) )
    ToolBarButton( #_tb_align_bottom, CatchImage( #PB_Any,?group_bottom ) )
    ToolBarButton( #_tb_align_right, CatchImage( #PB_Any,?group_right ) )
    CloseList( )
    
    ; gadgets
    id_inspector_tree = Tree( 0,0,0,0, #__flag_gridlines )
    EnableDrop( id_inspector_tree, #PB_Drop_Text, #PB_Drag_Link )
    
    listview_debug = Editor( 0,0,0,0 ) ; ListView( 0,0,0,0 ) 
                                       ;     ;
                                       ;     id_design_panel = Panel( 0,0,0,0 ) ; , #__bar_vertical ) : OpenList( id_design_panel )
                                       ;     AddItem( id_design_panel, -1, "Form" )
                                       ;     id_design_form = MDI( 0,0,0,0, #__flag_autosize ) 
                                       ;     
                                       ;     AddItem( id_design_panel, -1, "Code" )
                                       ;     id_design_code = Editor( 0,0,0,0 ) 
                                       ;     CloseList( )
    
    
    ;id_design_form = Container( 0,0,0,0, #__mdi_editable ) : CloseList( )
    id_design_form = MDI( 0,0,0,0, #__mdi_editable ) 
    ;id_design_form = MDI(10,10, width( widget( ), #__c_inner )-20, height( widget( ), #__c_inner )-20);, #__flag_autosize)
    id_design_panel = id_design_form
    ;id_design_code = listview_debug
    
    id_inspector_panel = Panel( 0,0,0,0 )
    
    ; id_inspector_panel 1 item
    AddItem( id_inspector_panel, -1, "elements", 0, 0 ) 
    id_elements_tree = Tree( 0,0,0,0, #__flag_autosize | #__flag_NoButtons | #__flag_NoLines | #__flag_gridlines | #__flag_borderless )
    
    ; id_inspector_panel 2 item
    AddItem( id_inspector_panel, -1, "properties", 0, 0 )  
    id_properties_tree = Tree_properties( 0,0,0,0, #__flag_autosize | #__flag_gridlines | #__flag_borderless )
    If id_properties_tree
      AddItem( id_properties_tree, #_pi_group_0,  "Common" )
      AddItem( id_properties_tree, #_pi_id,       "ID"      , #PB_GadgetType_String, 1 )
      AddItem( id_properties_tree, #_pi_class,    "Class"   , #PB_GadgetType_String, 1 )
      AddItem( id_properties_tree, #_pi_text,     "Text"    , #PB_GadgetType_String, 1 )
      
      AddItem( id_properties_tree, #_pi_group_1,  "Layout" )
      AddItem( id_properties_tree, #_pi_x,        "x"       , #PB_GadgetType_Spin, 1 )
      AddItem( id_properties_tree, #_pi_y,        "Y"       , #PB_GadgetType_Spin, 1 )
      AddItem( id_properties_tree, #_pi_width,    "Width"   , #PB_GadgetType_Spin, 1 )
      AddItem( id_properties_tree, #_pi_height,   "Height"  , #PB_GadgetType_Spin, 1 )
      
      AddItem( id_properties_tree, #_pi_group_2,  "State" )
      AddItem( id_properties_tree, #_pi_disable,  "Disable" , #PB_GadgetType_ComboBox, 1 )
      AddItem( id_properties_tree, #_pi_hide,     "Hide"    , #PB_GadgetType_ComboBox, 1 )
    EndIf
    
    ; id_inspector_panel 3 item
    AddItem( id_inspector_panel, -1, "events", 0, 0 )  
    id_events_tree = Tree_properties( 0,0,0,0, #__flag_autosize | #__flag_borderless ) 
    AddItem( id_events_tree, #_ei_leftclick,  "LeftClick" )
    AddItem( id_events_tree, #_ei_change,  "Change" )
    AddItem( id_events_tree, #_ei_enter,  "Enter" )
    AddItem( id_events_tree, #_ei_leave,  "Leave" )
    
    ; id_inspector_panel closes
    CloseList( )
    
    id_help_text  = Text( 0,0,0,0, "help for the inspector", #__text_border )
    
    
    Splitter_design = widget::Splitter( 0,0,0,0, toolbar_design,id_design_panel, #PB_Splitter_FirstFixed | #PB_Splitter_Separator )
    Splitter_inspector = widget::Splitter( 0,0,0,0, id_inspector_tree,id_inspector_panel, #PB_Splitter_FirstFixed )
    splitter_debug = widget::Splitter( 0,0,0,0, Splitter_design,listview_debug, #PB_Splitter_SecondFixed )
    splitter_help = widget::Splitter( 0,0,0,0, Splitter_inspector,id_help_text, #PB_Splitter_SecondFixed )
    Splitter_ide = widget::Splitter( 0,0,0,0, splitter_debug,splitter_help, #__flag_autosize | #PB_Splitter_Vertical | #PB_Splitter_SecondFixed )
    
    ; set splitters default minimum size
    widget::SetAttribute( Splitter_ide, #PB_Splitter_FirstMinimumSize, 500 )
    widget::SetAttribute( Splitter_ide, #PB_Splitter_SecondMinimumSize, 120 )
    widget::SetAttribute( splitter_help, #PB_Splitter_SecondMinimumSize, 30 )
    widget::SetAttribute( splitter_debug, #PB_Splitter_FirstMinimumSize, 300 )
    widget::SetAttribute( splitter_debug, #PB_Splitter_SecondMinimumSize, 100 )
    widget::SetAttribute( Splitter_inspector, #PB_Splitter_FirstMinimumSize, 100 )
    widget::SetAttribute( Splitter_design, #PB_Splitter_FirstMinimumSize, 20 )
    widget::SetAttribute( Splitter_design, #PB_Splitter_SecondMinimumSize, 200 )
    ; widget::SetAttribute( Splitter_design, #PB_Splitter_SecondMinimumSize, $ffffff )
    
    ; set splitters dafault positions
    widget::SetState( Splitter_ide, widget::width( Splitter_ide )-220 )
    widget::SetState( splitter_help, widget::height( splitter_help )-80 )
    widget::SetState( splitter_debug, widget::height( splitter_debug )-150 )
    widget::SetState( Splitter_inspector, 150 )
    widget::SetState( Splitter_design, 42 )
    
    
    Bind( id_inspector_tree, @ide_events( ) )
    
    Bind( listview_debug, @ide_events( ), #PB_EventType_Change )
    Bind( listview_debug, @ide_events( ), #PB_EventType_StatusChange )
    
    ;Bind( id_elements_tree, @ide_events( ) )
    Bind( id_elements_tree, @ide_events( ), #PB_EventType_LeftClick )
    Bind( id_elements_tree, @ide_events( ), #PB_EventType_Change )
    Bind( id_elements_tree, @ide_events( ), #PB_EventType_StatusChange )
    Bind( id_elements_tree, @ide_events( ), #PB_EventType_DragStart )
    
    Bind( id_elements_tree, @ide_events( ), #PB_EventType_MouseEnter )
    Bind( id_elements_tree, @ide_events( ), #PB_EventType_MouseLeave )
    ProcedureReturn window_ide
  EndProcedure
  
  ;-
  CompilerIf #PB_Compiler_IsMainFile 
    Define event
    ide_open( )
    
    widget_images( id_elements_tree, GetCurrentDirectory( )+"Themes/" )
    
    ; example 1
    ;   ;OpenList( id_design_form )
    Define *window = widget_add( id_design_form, "window", 10, 10, 350, 200 )
    ;     Define *container = widget_add( *window, "container", 130, 20, 220, 140 )
    ;     widget_add( *container, "button", 10, 20, 30, 30 )
    ;     widget_add( *window, "button", 10, 20, 100, 30 )
    ;     
    ;     Define item = 1
    ;     SetState( id_inspector_tree, item )
    ;     If IsGadget( id_design_code )
    ;       SetGadgetState( id_design_code, item )
    ;     EndIf
    ;     Define *container2 = widget_add( *container, "container", 60, 10, 220, 140 )
    ;     widget_add( *container2, "button", 10, 20, 30, 30 )
    ;     
    ;     SetState( id_inspector_tree, 0 )
    ;     widget_add( *window, "button", 10, 130, 100, 30 )
    ;     
    ;     ;   Define *window = widget_add( id_design_form, "window", 10, 10 )
    ;     ;   Define *container = widget_add( *window, "container", 80, 10 )
    ;     ;   widget_add( *container, "button", -10, 20 )
    ;     ;   widget_add( *window, "button", 10, 20 )
    ;     ;   ;CloseList( )
    ;     
    ;     ;     ; example 2
    ;     ;     ;   ;OpenList( id_design_form )
    ;     ;     SetState( group_select, 1 ) 
    ;     ;     
    ;     ;     Define *window = widget_add( id_design_form, "window", 30, 30, 400, 250 )
    ;     ;     widget_add( *window, "button", 15, 25, 50, 30 )
    ;     ;     widget_add( *window, "text", 25, 65, 50, 30 )
    ;     ;     widget_add( *window, "button", 35, 65+40, 50, 30 )
    ;     ;     widget_add( *window, "text", 45, 65+40*2, 50, 30 )
    ;     ;     
    ;     ;     ;Define *container = widget_add( *window, "container", 100, 25, 265, 170 )
    ;     ;     Define *container = widget_add( *window, "scrollarea", 100, 25, 265, 170 )
    ;     ;     widget_add( *container, "progress", 15, 25, 30, 30 )
    ;     ;     widget_add( *container, "text", 25, 65, 50, 30 )
    ;     ;     widget_add( *container, "button", 35, 65+40, 80, 30 )
    ;     ;     widget_add( *container, "text", 45, 65+40*2, 50, 30 )
    ;     ;     
    ;     ;     Define *container2 = widget_add( *window, "container", 100+140, 25+45, 165, 140 )
    ;     ;     widget_add( *container2, "buttonimage", 75, 25, 30, 30 )
    ;     ;     widget_add( *container2, "text", 45, 65+40*2, 50, 30 )
    ;     ;     widget_add( *container2, "string", 25, 65, 100, 30 )
    ;     ;     widget_add( *container2, "button", 100+15, 65+40, 80, 30 )
    ;     
    
    
    
    
    ; ; ; ;   Open( OpenWindow( #PB_Any, 150, 150, 200, 200, "PB ( window_1 )", #PB_Window_SizeGadget | #PB_Window_SystemMenu ) )
    ; ; ; ;   ButtonGadget( #PB_Any, 0,0,80,20,"button" )
    ; ; ; ;   ButtonGadget( #PB_Any, 200-80,200-20,80,20,"button" )
    ; ; ; ;   
    ; ; ; ;   
    ; ; ; ;   
    ; ; ; ;   Open( Window( 200, 200, 200, 200, "window_2", #__Window_SizeGadget | #__Window_SystemMenu ) )
    ; ; ; ;   Debug widget( )\height[#__c_inner2]
    ; ; ; ;   ContainerGadget( #PB_Any, widget( )\x[#__c_inner], widget( )\y[#__c_inner], widget( )\width[#__c_inner2],widget( )\height[#__c_inner2] )
    ; ; ; ;   ButtonGadget( #PB_Any, 0,0,80,20,"button" )
    ; ; ; ;   ButtonGadget( #PB_Any, 200-80,200-20,80,20,"button" )
    ; ; ; ;   CloseGadgetList( )
    
    
    Bind( Root(), #PB_Default )
    Repeat 
      event = WaitWindowEvent( ) 
      
      ;     Select EventWindow( )
      ;       Case window_ide 
      ;         ide_window_events( event )
      ;     EndSelect
      
    Until event = #PB_Event_CloseWindow
  CompilerEndIf
  
  
  DataSection   
    ; include images
    IncludePath #path + "/ide/include/images"
    
    widget_delete:    : IncludeBinary "delete1.png"
    widget_paste:     : IncludeBinary "paste.png"
    widget_copy:      : IncludeBinary "copy.png"
    widget_cut:       : IncludeBinary "cut.png"
    
    group:            : IncludeBinary "group/group.png"
    group_un:         : IncludeBinary "group/group_un.png"
    group_top:        : IncludeBinary "group/group_top.png"
    group_left:       : IncludeBinary "group/group_left.png"
    group_right:      : IncludeBinary "group/group_right.png"
    group_bottom:     : IncludeBinary "group/group_bottom.png"
    group_width:      : IncludeBinary "group/group_width.png"
    group_height:     : IncludeBinary "group/group_height.png"
  EndDataSection
  
CompilerEndIf
; IDE Options = PureBasic 5.73 LTS (MacOS X - x64)
; Folding = -------------------
; EnableXP