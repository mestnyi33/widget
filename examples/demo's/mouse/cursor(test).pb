; ;  ^^
; ; (oo)\__________
; ; (__)\          )\/\3
; ;      ||------w||
; ;      ||       ||
; ;        _
; ;       /(|
; ;      (  :
; ;     __\  \  _____
; ;   (____)  `|
; ;  (____)|   |
; ;   (____).__|
; ;    (___)__.|_____
; ;
; ; sudo adduser your_username vboxsf
; ; https://linuxrussia.com/sh-ubuntu.html
; ;
; ;https://github.com/mestnyi33/widget/commits/macos/?after=24cf91f4b5a08e4a496f764416578125334e97ab+1154
; ; 43025500559246
; ; Regex Trim(Arguments)
; ; https://regex101.com/r/zxBLgG/2
; ; ~"((?:(?:\".*?\")|(?:\\(.*?\\))|[^,])+)"
; ; ~"(?:\"(?:.*?)\"|(?:\\w*)\\s*\\((?:(?>[^( )]+|(?R))*)\\)|[\\^\\;\\/\\|\\!\\*\\w\\s\\.\\-\\+\\~\\#\\&\\$\\\\])+"
; ; #Button_0, ReadPreferenceLong("x", WindowWidth(#Window_0)/WindowWidth(#Window_0)+20), 20, WindowWidth(#Window_0)-(390-155), WindowHeight(#Window_0) - 180 * 2, GetWindowTitle(#Window_0) + Space( 1 ) +"("+ "Button" + "_" + Str(1)+")"
; 
; ; Regex Trim(Captions)
; ; https://regex101.com/r/3TwOgS/1
; ; ~"((?:\"(.*?)\"|\\((.*?)\\)|[^+\\s])+)"
; ; ~"(?:(\\w*)\\s*\\(((?>[^( )\"]+|(?R))+)\\))|\"(.*?)\"|[^+\\s]+"
; ; ~"(?:\"(.*?)\"|(\\w*)\\s*\\(((?>[^( )\"]+|(?R))+)\\))|([\\d]+)|(\b[\\w]+)|([\\#\\w]+)|([\\/])|([\\*])|([\\-])|([\\+])"
; ; ~"(?:(?:\"(.*?)\"|(\\w*)\\s*\\(((?>[^( )\"]+|(?R))*)\\))|([\\d]+)|(\b[\\w]+)|([\\#\\w]+)|([\\*\\w]+)|[\\.]([\\w]+)|([\\\\w]+)|([\\/])|([\\*])|([\\-])|([\\+]))"
; ; Str(ListIndex(List( )))+"Число между"+Chr(10)+"это 2!"+
; ; ListIndex(List( )) ; вот так не работает
; 
; ; ; https://regex101.com/r/RFubVd/14
; ; ; #Эта часть нужна для поиска переменных
; ; ; #Например, "Window" в выражении "Window=OpenWindow(#PB_Any...)"
; ; ; (?:(\b[^:\n\s]+)\s*=\s*)?
; ; ;
; ; ; #Эта часть для поиска процедур
; ; ; (?:\".*\"|(\w+)\s*\(((?>(?R)|[^)(])*)\))
; ; ;
; ; ; #После выполнения:
; ; ; # - В группе \1 будет находиться название переменной
; ; ; # - В группе \2 - название процедуры
; ; ; # - В группе \3 - перечень всех аргументов найденной процедуры
; ; ; ~"(?:(\\b[^:\\n\\s]+)\\s*=\\s*)?(?:\".*\"|(\\w+)\\s*\\(((?>(?R)|[^)(])*)\\))"
; #RegEx_Pattern_FindFunction = ~"(?P<Comments>;).*|(?:(?P<Handle>\\b[^:\\n\\s]+)\\s*=\\s*)?(?:\".*\"|(?P<Function>\\w+)\\s*\\((?P<Arguments>(?>(?R)|[^)(])*)\\))" ; "(;).*|\b(?:.*(=)\s*\w*\(.*\)|([A-Za-z0-9_.]*)\b[^:\n\(]*\s*\((?>[^)(]|(?R))*\))"
; 
; ; Найти
; ; https://regex101.com/r/u60Wqt/1
; ; https://regex101.com/r/rQCwws/3
; ; https://regex101.com/r/RFubVd/22
; ; https://regex101.com/r/D4Jxuh/24
; ; https://regex101.com/r/mBkJTA/29
; 
; #RegEx_Pattern_Find = "" +
;                       ; https://regex101.com/r/oIDfrI/2
; "(?P<Comments>;).* |" +
; ; #Эта часть нужна для поиска переменных
; ; #Например, "Window" в выражении "Window=OpenWindow(#PB_Any...)"
; "(?:(?P<Handle>[^:\n\s]+)\s*=\s*)?" +
; "(?P<FuncString>" +
; ~"\".*\" |" +
; ; #Эта часть для поиска функций
; "\b(?P<FuncName>\w+)\s*" +
; ; #Эта часть для поиска аргументов функции
; "(?:\((?P<FuncArguments>(?>(?R)|[^()])*)\))" +
; ") |" +
; ; #Эта часть для поиска процедур
; "(?P<StartPracedure>\bProcedure[.A-Za-z]* \s*" +
; ; #Эта часть для поиска имени процедуры
; "(?P<PracName>\w*) \s*" +
; ; #Эта часть для поиска аргументов процедуры
; "(?:\((?P<ProcArguments>(?>(?R)|[^()])*)\))) |" +
; ; #Эта часть для поиска конец процедуры
; "(?P<StopProcedure>\bEndProcedure\b)"
; ;
; ; #После выполнения:
; ; # - В группе (Comments) будет находиться комментария
; ; # - В группе (Handle) будет находиться название переменной
; ; # - В группе (FunctionName) - название Функции
; ; # - В группе (FuncArguments) - перечень всех аргументов найденной Функции
; ; # - В группе (ProcedureName) - название процедуры
; ; # - В группе (ProcArguments) - перечень всех аргументов найденной процедуры


; ver: 3.0.0.1 ;
CompilerSelect #PB_Compiler_OS
   CompilerCase #PB_OS_MacOS
      #path = ""
   CompilerCase #PB_OS_Linux
      #path = ""
   CompilerCase #PB_OS_Windows
      #path = "../../../"
CompilerEndSelect

IncludePath #path

CompilerIf #PB_Compiler_Version < 520
   #PB_Module = 10
   #PB_Compiler_IsMainFile = 88888
   Macro Defined( _name_, _type_ )
      1
   EndMacro
CompilerEndIf

CompilerIf Not Defined( constants, #PB_Module )
   XIncludeFile "include/constants.pbi"
CompilerEndIf

CompilerIf Not Defined( structures, #PB_Module )
   XIncludeFile "include/structures.pbi"
CompilerEndIf

CompilerIf Not Defined( func, #PB_Module )
   XIncludeFile "include/func.pbi"
CompilerEndIf

CompilerIf Not Defined( colors, #PB_Module )
   XIncludeFile "include/colors.pbi"
CompilerEndIf

; fix all pb bug's
CompilerIf Not Defined( fix, #PB_Module )
   XIncludeFile "include/fix.pbi"
CompilerEndIf


;-  >>>
CompilerIf Not Defined( widget, #PB_Module )
   DeclareModule widget
      Global test_align = 0
      Global test_canvas_events
      Global test_atpoint
      Global test_event_entered
      
      Global test_focus_set = 0
      Global test_focus_show = 0
      
      Global test_event_send = 0
      Global test_event_resize
      Global test_event_canvas
      
      Global test_redraw_items = 1
      Global test_draw_repaint = 0
      Global test_draw_contex = 0
      Global test_scrollbars_resize = 0
      Global test_scrollbars_reclip = 0
      Global test_scrollbars_draw   = 0
      Global test_startdrawing      = 0
      Global test_clip              = 0
      Global test_buttons_draw      = 0
      
      Global test_anchors
      Global test_docursor, test_changecursor,test_setcursor
      
      Global DrawingDC = 0
      
      EnableExplicit
      UseModule constants
      UseModule structures
      
      ;-\\ cursor
      #__cursor_Default         = Cursor::#__cursor_Default
      #__cursor_Cross           = Cursor::#__cursor_Cross
      #__cursor_IBeam           = Cursor::#__cursor_IBeam
      #__cursor_Hand            = Cursor::#__cursor_Hand
      #__cursor_Busy            = Cursor::#__cursor_Busy
      #__cursor_Denied          = Cursor::#__cursor_Denied
      #__cursor_Arrows          = Cursor::#__cursor_Arrows
      
      #__cursor_UpDown          = Cursor::#__cursor_UpDown
      #__cursor_LeftRight       = Cursor::#__cursor_LeftRight
      #__cursor_Diagonal1       = Cursor::#__cursor_Diagonal1
      #__cursor_Diagonal2       = Cursor::#__cursor_Diagonal2
      
      #__cursor_Invisible       = Cursor::#__cursor_Invisible
      
      #__cursor_SplitUp         = Cursor::#__cursor_SplitUp
      #__cursor_SplitDown       = Cursor::#__cursor_SplitDown         
      #__cursor_SplitLeft       = Cursor::#__cursor_SplitLeft
      #__cursor_SplitRight      = Cursor::#__cursor_SplitRight       
      #__cursor_SplitUpDown     = Cursor::#__cursor_SplitUpDown  
      #__cursor_SplitLeftRight  = Cursor::#__cursor_SplitLeftRight
      
      #__cursor_LeftUp          = Cursor::#__cursor_LeftUp
      #__cursor_RightUp         = Cursor::#__cursor_RightUp
      #__cursor_LeftDown        = Cursor::#__cursor_LeftDown
      #__cursor_RightDown       = Cursor::#__cursor_RightDown
      
      #__cursor_Drag            = Cursor::#__cursor_Drag
      #__cursor_Drop            = Cursor::#__cursor_Drop
      
      #__cursor_Grab            = Cursor::#__cursor_Grab      
      #__cursor_Grabbing        = Cursor::#__cursor_Grabbing
      #__cursor_VIBeam          = Cursor::#__cursor_VIBeam
      ;#__cursor_Arrow          = Cursor::#__cursor_Arrow
      
      #__cursor_Up              = Cursor::#__cursor_Up
      #__cursor_Down            = Cursor::#__cursor_Down      
      #__cursor_Left            = Cursor::#__cursor_Left
      #__cursor_Right           = Cursor::#__cursor_Right       
      #__cursor_LeftUpRightDown = Cursor::#__cursor_LeftUpRightDown
      #__cursor_LeftDownRightUp = Cursor::#__cursor_LeftDownRightUp
      
      CompilerIf #PB_Compiler_Version =< 546
         Global DPISCALEDX.a = (GetDeviceCaps_(GetDC_(0),#LOGPIXELSX) / 96)
         Global DPISCALEDY.a = (GetDeviceCaps_(GetDC_(0),#LOGPIXELSY) / 96)
         
         Macro DesktopResolutionX( )
            DPISCALEDX;(GetDeviceCaps_(GetDC_(0),#LOGPIXELSX) / 96)
         EndMacro
         Macro DesktopResolutionY( )
            DPISCALEDY;(GetDeviceCaps_(GetDC_(0),#LOGPIXELSY) / 96)
         EndMacro
         Macro DesktopScaledX( _x_ )
            ((_x_) * DesktopResolutionX( )) ; DesktopScaledX(_x_) ; 
         EndMacro
         Macro DesktopScaledY( _y_ )
            ((_y_) * DesktopResolutionY( )) ; DesktopScaledY(_y_) ; 
         EndMacro
         Macro DesktopUnscaledX( _x_ )
            ((_x_) / DesktopResolutionX( )) ; DesktopUnscaledX(_x_) ; 
         EndMacro
         Macro DesktopUnscaledY( _y_ )
            ((_y_) / DesktopResolutionY( )) ; DesktopUnscaledY(_y_) ; 
         EndMacro
         ;     CompilerEndIf
         ;     
         ;     CompilerIf #PB_Compiler_Version =< 546
         Macro ResizeGadget(_event_gadget_,_x_,_y_,_width_,_height_)
            PB(ResizeGadget)(_event_gadget_,_x_,_y_,_width_,_height_)
            ;
            If PB(GadgetType)(_event_gadget_) = #PB_GadgetType_Canvas
               ; PushMapPosition( roots( ) )
               If widget::ChangeCurrentCanvas( GadgetID( _event_gadget_ ) )
                  widget::Resize( widget::root( ), 0, 0, _width_, _height_)
               EndIf
               ; PopMapPosition( roots( ) )
            EndIf
         EndMacro
      CompilerEndIf
      
      CompilerIf Defined( fix, #PB_Module )
         UseModule fix
      CompilerElse
         Macro PB(Function)
            Function
         EndMacro
         
         Macro PB_(Function)
            Function
         EndMacro
      CompilerEndIf
      
      UseModule Events
      
      ;-  -----------------
      ;-   GLOBALS
      ;-  -----------------
      Global _macro_call_count_
      Global __gui._s_STRUCT
      ;Global NewMap *roots._s_root( )
      ;Global NewList *events._s_EVENTDATA( )
      
      ;-  ----------------
      ;-   DECLARE_macros
      ;-  ----------------
      Macro Debugger( _text_ = "" )
         CompilerIf #PB_Compiler_Debugger  ; Only enable assert in debug mode
            Debug " " + _macro_call_count_ + _text_ + "   ( debug >> " + #PB_Compiler_Procedure + " ( " + #PB_Compiler_Line + " ))"
            _macro_call_count_ + 1
         CompilerEndIf
      EndMacro
      
      ;- demo text
      Macro debug_position( _root_, _text_ = "" )
         Debug " " + _text_ + " - "
         ForEach _root_\children( )
            If _root_\children( ) <> _root_\children( )\root
               If _root_\children( )\BeforeWidget( ) And _root_\children( )\AfterWidget( )
                  Debug " - " + Str(ListIndex( _root_\children( ))) + " " + _root_\children( )\placingindex + " ( " + _root_\children( )\BeforeWidget( )\class + " " + _root_\children( )\class + " " + _root_\children( )\AfterWidget( )\class + " )"
               ElseIf _root_\children( )\AfterWidget( )
                  Debug " - " + Str(ListIndex( _root_\children( ))) + " " + _root_\children( )\placingindex + " ( -- " + _root_\children( )\class + " " + _root_\children( )\AfterWidget( )\class + " )"
               ElseIf _root_\children( )\BeforeWidget( )
                  Debug " - " + Str(ListIndex( _root_\children( ))) + " " + _root_\children( )\placingindex + " ( " + _root_\children( )\BeforeWidget( )\class + " " + _root_\children( )\class + " -- )"
               Else
                  Debug " - " + Str(ListIndex( _root_\children( ))) + " " + _root_\children( )\placingindex + " ( -- " + _root_\children( )\class + " -- ) "
               EndIf
               
               ;           If _root_\children( )\BeforeWidget( ) And _root_\children( )\AfterWidget( )
               ;             Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\placingindex +" "+ _root_\children( )\BeforeWidget( )\class +"-"+ _root_\children( )\BeforeWidget( )\placingindex +" "+ _root_\children( )\class +"-"+ _root_\children( )\placingindex +" "+ _root_\children( )\AfterWidget( )\class +"-"+ _root_\children( )\AfterWidget( )\placingindex
               ;           ElseIf _root_\children( )\AfterWidget( )
               ;             Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\placingindex +" none "+ _root_\children( )\class +"-"+ _root_\children( )\placingindex +" "+ _root_\children( )\AfterWidget( )\class +"-"+ _root_\children( )\AfterWidget( )\placingindex
               ;           ElseIf _root_\children( )\BeforeWidget( )
               ;             Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\placingindex +" "+ _root_\children( )\BeforeWidget( )\class +"-"+ _root_\children( )\BeforeWidget( )\placingindex +" "+ _root_\children( )\class +"-"+ _root_\children( )\placingindex +" none"
               ;           Else
               ;             Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\placingindex +" none "+ _root_\children( )\class +"-"+ _root_\children( )\placingindex + " none "
               ;           EndIf
               ;
               ;           ;         If _root_\children( )\BeforeWidget( ) And _root_\children( )\AfterWidget( )
               ;           ;           Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\placingindex +" "+ _root_\children( )\BeforeWidget( )\class +" "+ _root_\children( )\class +" "+ _root_\children( )\AfterWidget( )\class
               ;           ;         ElseIf _root_\children( )\AfterWidget( )
               ;           ;           Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\placingindex +" none "+ _root_\children( )\class +" "+ _root_\children( )\AfterWidget( )\class
               ;           ;         ElseIf _root_\children( )\BeforeWidget( )
               ;           ;           Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\placingindex +" "+ _root_\children( )\BeforeWidget( )\class +" "+ _root_\children( )\class +" none"
               ;           ;         Else
               ;           ;           Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\placingindex +" none "+ _root_\children( )\class + " none "
               ;           ;         EndIf
            EndIf
         Next
         Debug ""
      EndMacro
      
      ;-
      ; ;       Macro DPIResolutionX( ): DPIScaleResolutionX: EndMacro
      ; ;       Macro DPIResolutionY( ): DPIScaleResolutionY: EndMacro
      ;       Macro DPIScaledX( _x_ ): ( _x_ * DPIResolutionX( )): EndMacro
      ;       Macro DPIUnScaledX( _x_ ): ( _x_ / DPIResolutionX( )): EndMacro
      ;       Macro DPIScaledY( _y_ ): ( _y_ * DPIResolutionY( )): EndMacro
      ;       Macro DPIUnScaledY( _y_ ): ( _y_ / DPIResolutionY( )): EndMacro
      
      ;     Macro DPIScaledX( _x_ ): ( _x_ ): EndMacro
      ;     Macro DPIUnScaledX( _x_ ): ( _x_ ): EndMacro
      ;     Macro DPIScaledY( _y_ ): ( _y_ ): EndMacro
      ;     Macro DPIUnScaledY( _y_ ): ( _y_ ): EndMacro
      ;     Macro DPIScaled( _value_ ): ( _value_ ): EndMacro
      ;     Macro DPIUnScaled( _value_ ): ( _value_ ): EndMacro
      ;     Macro DPIResolution( ): Bool(1=0): EndMacro
      ;     Macro DPIResolutionX( ): Bool(1=0): EndMacro
      ;     Macro DPIResolutionY( ): Bool(1=0): EndMacro
      
      Macro DPIScaledX( _x_ ): DesktopScaledX( _x_ ): EndMacro
      Macro DPIUnScaledX( _x_ ): DesktopUnscaledX( _x_ ): EndMacro
      Macro DPIScaledY( _y_ ): DesktopScaledY( _y_ ): EndMacro
      Macro DPIUnScaledY( _y_ ): DesktopUnscaledY( _y_ ): EndMacro
      Macro DPIScaled( _value_ ): DesktopScaledX( _value_ ): EndMacro
      Macro DPIUnScaled( _value_ ): DesktopUnscaledX( _value_ ): EndMacro
      Macro DPIResolutionX( ): DesktopResolutionX( ): EndMacro
      Macro DPIResolutionY( ): DesktopResolutionY( ): EndMacro
      Macro DPIResolution( ): DesktopResolutionX( ): EndMacro
      
      ;     Macro BoxedGradient(_x_, _y_, _width_, _height_)
      ;       Debug 555
      ;       ; PB(BoxedGradient)(DesktopScaledX(_x_), DesktopScaledY(_y_), DesktopScaledX(_width_), DesktopScaledY(_height_))
      ;     EndMacro
      
      
      ;-  DRAG & DROP
      ;       Macro EventDropX( ): DDropX( ): EndMacro
      ;       Macro EventDropY( ): DDropY( ): EndMacro
      ;       Macro EventDropWidth( ): DDropWidth( ): EndMacro
      ;       Macro EventDropHeight( ): DDropHeight( ): EndMacro
      ;       
      ;       Macro EventDropType( ): DDropType( ): EndMacro
      ;       Macro EventDropAction( ): DDropAction( ): EndMacro
      ;       Macro EventDropPrivate( ): DDropPrivate( ): EndMacro
      ;       Macro EventDropFiles( ): DDropFiles( ): EndMacro
      ;       Macro EventDropText( ): DDropText( ): EndMacro
      ;       Macro EventDropImage( Image = - 1, Depth = 24 ): DDropImage( Image, Depth ): EndMacro
      
      ;       Macro DragText( Text, Actions = #PB_Drag_Copy ): DDragText( Text, Actions ): EndMacro
      ;       Macro DragImage( Image, Actions = #PB_Drag_Copy ): DDragImage( Image, Actions ): EndMacro
      ;       Macro DragFiles( Files, Actions = #PB_Drag_Copy ): DDragFiles( Files, Actions ): EndMacro
      ;       Macro DragPrivate( PrivateType, Actions = #PB_Drag_Copy ): DDragPrivate( PrivateType, Actions ): EndMacro
      
      ;       Macro EnableDDrop( Widget, Format, Actions, PrivateType = 0 ) : EnableDDrop( Widget, Format, Actions, PrivateType ) : EndMacro
      ;       Macro EnableGadgetDrop( Gadget, Format, Actions, PrivateType = 0 ) : EnableDDrop( Gadget, Format, Actions, PrivateType ) : EndMacro
      ;       Macro EnableWindowDrop( Window, Format, Actions, PrivateType = 0 ) : EnableDDrop( Window, Format, Actions, PrivateType ) : EndMacro
      
      ;-
      Macro allocate( _struct_name_, _struct_type_ = )
         _s_#_struct_name_#_struct_type_ = AllocateStructure( _s_#_struct_name_ )
      EndMacro
      
      ;===TEMP====
      Macro AlphaState( ) 
         color\_alpha ; << 24
      EndMacro
      
      Macro AlphaState24( ) 
         color\_alpha << 24
      EndMacro
      
      Macro ColorAlphaState( ) 
         color\_alpha
      EndMacro
      
      Macro ColorAlphaColor( ) 
         color\alpha
      EndMacro
      
      Macro AlphaColor( ) 
         color\alpha ; << 24
      EndMacro
      
      Macro AlphaColor24( ) 
         color\alpha << 24
      EndMacro
      
      Macro ScrollToActive( _state_ )
         _focus =- _state_
      EndMacro
      Macro is_drag_move( )
         a_index( ) = #__a_moved
      EndMacro
      
      ;-
      Macro SetBounds( _this_, _mode_ = #__bounds_Parentsize )
         If _mode_ = #__bounds_Parentsize 
            SetSizeBounds( _this_ )
            SetMoveBounds( _this_ )
         EndIf
         If _mode_ & #__bounds_Children 
            SetChildrenBounds( _this_, 1 )
         EndIf
         If _mode_ & #__bounds_size
            SetSizeBounds( _this_, -1,-1,-1,-1 )
         EndIf
         If _mode_ & #__bounds_move 
            SetMoveBounds( _this_, -1,-1,-1,-1 )
         EndIf
      EndMacro
      
      ;-\\ BAR
      Macro CreateMenuBar( _parent_, _flags_ = 0 )
         CreateBar( #__type_MenuBar, _parent_, #PB_ToolBar_Small|#PB_ToolBar_Text | _flags_ )
      EndMacro
      
      Macro   CreatePopupBar( _flags_ = 0 )
         CreateBar( #__type_PopupBar, root( ), _flags_ )
      EndMacro
      
      Macro ToolBar( _parent_, _flags_ = 0 )
         CreateBar( #__type_ToolBar, _parent_, _flags_ )
      EndMacro
      
      Macro BarBar( )
         BarSeparator( )
      EndMacro
      
      Macro BarToolTip( _address_, _barbutton_, _text_ )
      EndMacro
      
      Macro DisableBarButton( _address_, _barbutton_, _state_ )
         ; DisableItem( _address_, _button_, _state_ )
      EndMacro
      
      Macro DisableBarItem( _address_, _baritem_, _state_ )
      EndMacro
      
      Macro GetBarTitleText( _address_, _title_ )
      EndMacro
      
      Macro SetBarTitleText( _address_, _title_, _text_ )
      EndMacro
      
      Macro SetBarItemState( _address_, _baritem_, _state_ )
      EndMacro
      
      Macro GetBarItemState( _address_, _baritem_ )
      EndMacro
      
      Macro SetBarItemText( _address_, _baritem_, _text_ )
      EndMacro
      
      Macro GetBarItemText( _address_, _baritem_ )
      EndMacro
      
      Macro BindBarEvent( _address_, _baritem_, _callback_ )
         Bind( _address_, _callback_, -1, _baritem_ )
      EndMacro
      
      Macro UnbindBarEvent( _address_, _baritem_, _callback_ )
         Unbind( _address_, _callback_, -1, _baritem_ )
      EndMacro
      
      ;-
      ;       Macro  SetState(widget, State)
      ;          SetText(widget,
      ;                  Str(IPAddressField(State,0))+"."+
      ;                  Str(IPAddressField(State,1))+"."+
      ;                  Str(IPAddressField(State,2))+"."+
      ;                  Str(IPAddressField(State,3)))
      ;       EndMacro
      
      Macro IPAddress( X,Y,Width,Height, flag=0 )
         String( X,Y,Width,Height, "", #__flag_Textnumeric|flag )
         widget( )\class = "IPAddress"
      EndMacro
      
      
      
      
      ;- \\
      Macro __tabs: Tab\_s: EndMacro
      Macro __rows( ): columns( )\items( ) : EndMacro    ; row\items( )
      
      ;-
      Macro roots( ): widget::__gui\_roots( ): EndMacro
      Macro widgets( ): __gui\_widgets( ): EndMacro
      
      Macro root( ): widget::__gui\root: EndMacro
      Macro widget( ): widget::__gui\widget: EndMacro ; Returns current-root last added widget
      
      
      ;-\\
      ; Macro Firstroot( ): firstroot: EndMacro
      Macro Lastroot( ): lastroot: EndMacro
      Macro Afterroot( ): afterroot: EndMacro
      Macro Beforeroot( ): beforeroot: EndMacro
      
      ;-
      Macro mouse( ): widget::__gui\mouse: EndMacro
      Macro keyboard( ): widget::__gui\keyboard: EndMacro
      
      ;-
      Macro TabChange( ): change: EndMacro         ; tab\widget\change
      Macro TextChange( ): change: EndMacro        ; temp
      Macro ImageChange( ): change: EndMacro       ; temp
      Macro AreaChange( ): area\change: EndMacro   ; temp
      Macro PageChange( ): page\change: EndMacro   ; temp
      Macro ThumbChange( ): thumb\change: EndMacro ; temp
      Macro BarChange( ): bar\change: EndMacro     ; temp
      Macro ResizeChange( ): change: EndMacro      ; temp
      Macro WidgetChange( ): change: EndMacro      ; temp
      
      ;-
      Macro split_1( ) : bar\gadget[1] : EndMacro ; temp
      Macro split_2( ) : bar\gadget[2] : EndMacro ; temp
                                                  ;       Macro split_1( ) : bar\button[1]\gadget : EndMacro ; temp
                                                  ;       Macro split_2( ) : bar\button[2]\gadget : EndMacro ; temp
      
      ;-
      ;Macro Popup( ): widget::__gui\sticky\box: EndMacro
      Macro Opened( ): widget::__gui\opened: EndMacro ; object list opened container
      Macro PopupWindow( ): widget::__gui\sticky\window: EndMacro
      Macro Row__Menu( ): rowmenu: EndMacro
      ;-
      Macro __Popup( ): popupbox: EndMacro   ; *this\
      Macro __Menu( ): menubox: EndMacro
      Macro __String( ): stringbox: EndMacro
      Macro __Option( ): optionbox: EndMacro
      ;-
      Macro __Tab( ): tabbox: EndMacro
      Macro TabEntered( ): Tab\entered: EndMacro   ; Returns mouse entered tab
      Macro TabPressed( ): Tab\pressed: EndMacro   ; Returns mouse focused tab
      Macro TabFocused( ): Tab\focused: EndMacro   ; Returns mouse focused tab
                                                   ;
      Macro TabIndex( ): Tab\index: EndMacro
      Macro TabState( ): Tab\state: EndMacro      
      
      ;-
      Macro MarginLine( ): row\margin: EndMacro ; temp
                                                ;
      Macro LineEntered( ): row\entered: EndMacro ; Returns mouse entered widget
      Macro LinePressed( ): row\pressed: EndMacro ; Returns key focus item address
      Macro LineFocused( ): row\focused: EndMacro ; Returns key focus item address
                                                  ;
      Macro LineEnteredIndex( ): row\id[1]: EndMacro ; *this\ Returns mouse entered line index ; 31 count
      Macro LineFocusedIndex( ): row\id[2]: EndMacro ; *this\ Returns key focused line index   ; 11 count
      Macro LinePressedIndex( ): row\id[3]: EndMacro ; *this\ Returns mouse pressed line index ; 23 count
      Macro RowFocusedIndex( ): row\id[0]: EndMacro
      
      ;-
      Macro ComboButton( ): combobutton: EndMacro
      
      
      ;-
      Macro ColorState( ): color\state: EndMacro
      Macro ScrollState( ): Scroll\state: EndMacro
      
      Macro TabItemState( ): checked: EndMacro
      Macro ToggleBoxState( ): togglebox\TabItemState( ): EndMacro
      Macro ItemBoxState( ): CheckBox\TabItemState( ): EndMacro
      Macro ItemButtonState( ): buttonbox\TabItemState( ): EndMacro
      
      ;-
      Macro Row__Option( ): _option_group_parent: EndMacro
      Macro RowParent( ): _parent: EndMacro ; _s_ROWS( )
      Macro RowLeaved( ): row\leaved: EndMacro   ; Returns mouse entered item address
      Macro RowEntered( ): row\entered: EndMacro ; Returns mouse entered item address
      Macro RowPressed( ): row\pressed: EndMacro ; Returns mouse press item address
      Macro RowFocused( ): row\focused: EndMacro ; Returns key focus item address
      Macro RowToolTip( ): row\tt: EndMacro
      
      Macro RowFirst( ): row\first: EndMacro
      Macro RowLast( ): row\last: EndMacro
      Macro RowLastAdd( ): row\added: EndMacro
      
      Macro RowVisibleList( ): row\visible\_s( ): EndMacro
      Macro RowFirstVisible( ): row\visible\first: EndMacro
      Macro RowLastVisible( ): row\visible\last: EndMacro
      
      ;-
      Macro FirstWidget( ): firstwidget: EndMacro
      Macro LastWidget( ): lastwidget: EndMacro
      Macro AfterWidget( ): AfterWidget: EndMacro
      Macro BeforeWidget( ): beforewidget: EndMacro
      
      ;-
      Macro LeavedWidget( ): mouse( )\widget[0]: EndMacro ; Returns mouse entered widget
      Macro EnteredWidget( ): mouse( )\widget[1]: EndMacro; Returns mouse entered widget
      Macro PressedWidget( ): mouse( )\widget[2]: EndMacro; Returns mouse button pushed widget
      
      ;-
      Macro EnteredButton( ): mouse( )\button[1]: EndMacro
      Macro PressedButton( ): mouse( )\button[2]: EndMacro
      
      ;-
      ;-
      Macro ChangeCurrentCanvas( _canvasID_, _change_root_ = 1 )
         FindMapElement( widget::roots( ), Str( _canvasID_ ) )
         If _change_root_ = 1
            widget::root( ) = widget::roots( )
         EndIf
         ;Debug ""+ #PB_Compiler_Procedure + " ChangeCurrentCanvas "+widget::root( )\class
      EndMacro
      Macro OpenCanvas( _canvas_ = #PB_Any )
         Open( ID::Window(UseGadgetList(0)), 0,0,0,0, "", #PB_Canvas_Container, 0, _canvas_ )
      EndMacro
      Macro CloseCanvas( )
         CloseGadgetList( )
      EndMacro
      
      
      
      
      
      ;-
      Macro ActiveWindow( ): keyboard( )\window: EndMacro      ; Returns activeed window
      Macro ActiveGadget( ): ActiveWindow( )\gadget: EndMacro  ; Returns activeed gadget
      Macro ActiveBar( ): ActiveWindow( )\gadget\bar\gadget: EndMacro ; Returns activeed gadget
      Macro GetActive( ): keyboard( )\widget: EndMacro         ; Returns actived object
      
      
      ;-
      ;Macro EventIndex( ): EventWidget( )\index: EndMacro
      Macro EventWidget( ): widget::__gui\event\widget: EndMacro
      Macro WidgetEvent( ): widget::__gui\event\type: EndMacro
      Macro WidgetEventType( ): ToPBEventType( widget::__gui\event\type ): EndMacro
      Macro WidgetEventData( ): widget::__gui\event\data: EndMacro
      Macro WidgetEventItem( ): widget::__gui\event\item: EndMacro
      ;
      Macro WaitEvent( _callback_ = #Null, _eventmask_ = #PB_All )
         If _callback_
            widget::Bind( #PB_All, _callback_, _eventmask_ )
         EndIf
         widget::WaitClose( )
      EndMacro
      
      ;-
      Global *before_start_enumerate_widget._s_WIDGET
      Macro StartEnum( _parent_, _item_ = #PB_All, _mode_ = 0 )
         Bool( _parent_\haschildren And _parent_\FirstWidget( ) )
         *before_start_enumerate_widget = widget( )
         PushListPosition( widgets( ) )
         ;
         If _parent_\FirstWidget( )\address
            ChangeCurrentElement( widgets( ), _parent_\FirstWidget( )\address )
         Else
            ResetList( widgets( ) )
         EndIf
         widget( ) = widgets( )
         ;
         ;\\
         If _item_ > 0
            Repeat
               If widgets( ) = _parent_\AfterWidget( ) 
                  Break
               EndIf
               If widgets( )\root <> _parent_\root
                  Break    
               EndIf
               If  widgets( )\level < _parent_\level
                  Break
               EndIf
               If widgets( )\parent = _parent_  
                  If widgets( )\TabIndex( ) = _item_
                     Break
                  EndIf
               EndIf
            Until Not NextElement( widgets( ) ) 
         EndIf
         ;
         ;\\
         
         If widgets( )\parent = _parent_
            Repeat
               If _mode_ And widgets( )\parent <> _parent_
                  Continue
               EndIf
               If widgets( ) = _parent_\AfterWidget( ) 
                  Break
               EndIf
               If widgets( )\root <> _parent_\root
                  Break    
               EndIf
               If  widgets( )\level < _parent_\level
                  Break
               EndIf
               If _item_ >= 0  
                  If widgets( )\parent = _parent_  
                     If widgets( )\TabIndex( ) <> _item_
                        Break
                     EndIf
                  EndIf
               EndIf
               ;
               widget( ) = widgets( )
            EndMacro
            ;             ;
            ;             Macro AbortEnum( )
            ;                Break
            ;             EndMacro
            ;             ;
            Macro StopEnum( )
            Until Not NextElement( widgets( ) )
         EndIf
         PopListPosition( widgets( ) )
         widget( ) = *before_start_enumerate_widget
      EndMacro
      
      ;-
      Macro StartDraw( _root_ )
         Bool(widget::__gui\DrawingRoot <> _root_)
         ;
         widget::StopDraw( )
         If Not _root_\drawmode 
            _root_\drawmode | 1<<2
         EndIf
         If _root_\drawmode & 1<<1 = 1<<1
            widget::DrawingDC = StartVectorDrawing( CanvasVectorOutput( _root_\canvas\gadget ))
         EndIf
         If _root_\drawmode & 1<<2 = 1<<2
            widget::DrawingDC = StartDrawing( CanvasOutput( _root_\canvas\gadget ))
         EndIf
         widget::__gui\DrawingRoot = _root_
      EndMacro
      Macro StopDraw( )
         If widget::__gui\DrawingRoot 
            ;Debug "StopDrawingRoot "+widget::__gui\DrawingRoot\class
            If widget::__gui\DrawingRoot\drawmode & 1<<2 = 1<<2
               StopDrawing( )
            EndIf
            If widget::__gui\DrawingRoot\drawmode & 1<<1 = 1<<1
               StopVectorDrawing( )  
            EndIf
            widget::__gui\DrawingRoot = #Null
         EndIf
      EndMacro
      
      ;-
      Macro PostEventRepaint( _root_ )
         If _root_
            ; Debug #PB_Compiler_Procedure
            If widget::__gui\eventloop
               If Not widget::Send( _root_, constants::#__event_Repaint )
                  ; Debug "PostEventRepaint - ReDraw"
                  widget::ReDraw( _root_ )
               EndIf
            Else
               If _root_\canvas\postrepaint = 0
                  _root_\canvas\postrepaint = 1
                  If Not widget::Send( _root_, constants::#__event_Repaint )
                     PostEvent( #PB_Event_Repaint, _root_\canvas\window, #PB_All, #PB_All, _root_\canvas\gadgetID )
                  EndIf
               EndIf
            EndIf
         EndIf
      EndMacro
      Macro PostRepaint( _root_ )
         ;Debug #PB_Compiler_Procedure
         PostEventRepaint( _root_ )
      EndMacro
      
      ;-
      Macro MidF(_string_, _start_pos_, _length_ = -1)
         func::MidFast(_string_, _start_pos_, _length_)
      EndMacro
      
      Macro ICase( String ) ; sTRinG = StrINg
         func::InvertCase( String )
      EndMacro
      
      Macro ULCase( String ) ; sTRinG = String
         InsertString( UCase( Left( String, 1 )), LCase( Right( String, Len( String ) - 1 )), 2 )
      EndMacro
      
      
      ;-
      Macro TitleText( ): Text: EndMacro
      Macro GetTitle( window ): widget::GetText( window ): EndMacro
      Macro CloseButton( ): caption\button[#__wb_close]: EndMacro
      Macro MaximizeButton( ): caption\button[#__wb_maxi]: EndMacro
      Macro MinimizeButton( ): caption\button[#__wb_mini]: EndMacro
      Macro HelpButton( ): caption\button[#__wb_help]: EndMacro
      
      ;-
      Macro draw_x( ): X[#__c_draw]: EndMacro
      Macro draw_y( ): Y[#__c_draw]: EndMacro
      Macro draw_width( ): Width[#__c_draw]: EndMacro
      Macro draw_height( ): Height[#__c_draw]: EndMacro
      
      ;-
      Macro screen_x( ): X[#__c_screen]: EndMacro
      Macro screen_y( ): Y[#__c_screen]: EndMacro
      Macro screen_width( ): Width[#__c_screen]: EndMacro
      Macro screen_height( ): Height[#__c_screen]: EndMacro
      
      ;-
      Macro inner_x( ): X[#__c_inner]: EndMacro
      Macro inner_y( ): Y[#__c_inner]: EndMacro
      Macro inner_width( ): Width[#__c_inner]: EndMacro
      Macro inner_height( ): Height[#__c_inner]: EndMacro
      
      ;-
      Macro frame_x( ): X[#__c_frame]: EndMacro
      Macro frame_y( ): Y[#__c_frame]: EndMacro
      Macro frame_width( ): Width[#__c_frame]: EndMacro
      Macro frame_height( ): Height[#__c_frame]: EndMacro
      
      ;-
      Macro container_x( ): X[#__c_container]: EndMacro
      Macro container_y( ): Y[#__c_container]: EndMacro
      Macro container_width( ): Width[#__c_container]: EndMacro
      Macro container_height( ): Height[#__c_container]: EndMacro
      
      ;-
      Macro scroll_x( ): X[#__c_required]: EndMacro
      Macro scroll_y( ): Y[#__c_required]: EndMacro
      Macro scroll_width( ): Width[#__c_required]: EndMacro
      Macro scroll_height( ): Height[#__c_required]: EndMacro
      
      ;- TEMP
      Macro scroll_inner_width( ): Width[#__c_inner]: EndMacro
      Macro scroll_inner_height( ): Height[#__c_inner]: EndMacro
      
      ;-
      Macro _get_colors_( ) : colors::*this\blue : EndMacro
      
      ;-
      Macro is_item_( _this_, _item_ ) : Bool( _item_ >= 0 And _item_ < _this_\countitems ) : EndMacro
      Macro is_menu_( _this_ ) : Bool( _this_\type = constants::#__type_MenuBar Or _this_\type = constants::#__type_PopupBar ) : EndMacro
      Macro is_bar_( _this_ ) : Bool( is_menu_( _this_ ) Or _this_\type = constants::#__type_ToolBar ) : EndMacro
      Macro is_root_(_this_ ) : Bool( _this_ >= 65536 And _this_ = _this_\root ): EndMacro
      Macro is_widget_( _this_ ) : Bool( _this_ >= 65536 And _this_\address ) : EndMacro
      Macro is_gadget_( _this_ ) : Bool( Not is_root_( _this_ ) And _this_\type > 0 ) : EndMacro
      Macro is_window_( _this_ ) : Bool( _this_\type = constants::#__type_Window ) : EndMacro ; is_widget_( _this_ ) And 
      
      Macro is_lines_( _this_ )
         Bool( _this_\type = #__type_Editor Or
               _this_\type = #__type_String  Or
               _this_\type = #__type_Hyperlink Or
               _this_\type = #__type_IPAddress Or
               _this_\type = #__type_CheckBox Or
               _this_\type = #__type_Option Or
               _this_\type = #__type_Button Or
               _this_\type = #__type_Text Or
               _this_\type = #__type_ComboBox )
      EndMacro
      
      Macro is_items_( _this_ )
         Bool( _this_\type = #__type_Tree Or
               _this_\type = #__type_ListIcon Or
               _this_\type = #__type_ListView Or
               _this_\type = #__type_Properties )
      EndMacro
      
      Macro is_level_( _address_1, _address_2 )
         Bool( _address_1 <> _address_2 And _address_1\parent = _address_2\parent And _address_1\TabIndex( ) = _address_2\TabIndex( ) )
      EndMacro
      
      Macro is_scrollbars_( _this_ )
         Bool( _this_\parent And _this_\parent\scroll And ( _this_\parent\scroll\v = _this_ Or _this_\parent\scroll\h = _this_ ))
      EndMacro
      
      Macro is_integral_( _this_ ) ; It is an integral part
         Bool( _this_\child > 0 And Not is_window_(_this_) )
      EndMacro
      
      Macro is_inside_( _position_, _size_, _mouse_ ) ;
         Bool( _mouse_ > _position_ And _mouse_ <= ( _position_ + _size_ ) And ( _position_ + _size_ ) > 0 )
      EndMacro
      
;       Macro is_atbox_( _x_, _y_, _width_, _height_, _mouse_x_, _mouse_y_ )
;          Bool( is_inside_( _x_, _width_, _mouse_x_ ) And
;                is_inside_( _y_, _height_, _mouse_y_ ) )
;       EndMacro
;       
;       Macro is_atcircle_( _position_x_, _position_y_, _mouse_x_, _mouse_y_, _circle_radius_ )
;          Bool( Sqr( Pow((( _position_x_ + _circle_radius_ ) - _mouse_x_ ), 2 ) + Pow((( _position_y_ + _circle_radius_ ) - _mouse_y_ ), 2 )) <= _circle_radius_ )
;       EndMacro
      
      Macro is_atpoint_( _address_, _mouse_x_, _mouse_y_, _mode_ = )
         Bool( is_inside_( _address_\x#_mode_, _address_\width#_mode_, _mouse_x_ ) And
               is_inside_( _address_\y#_mode_, _address_\height#_mode_, _mouse_y_ ) )
      EndMacro
      
      
     
;       Macro is_interrect_( _address_1_x_, _address_1_y_, _address_1_width_, _address_1_height_,
;                            _address_2_x_, _address_2_y_, _address_2_width_, _address_2_height_ )
;          
;          Bool(( _address_1_x_ + _address_1_width_ ) > _address_2_x_ And _address_1_x_ < ( _address_2_x_ + _address_2_width_ ) And
;               ( _address_1_y_ + _address_1_height_ ) > _address_2_y_ And _address_1_y_ < ( _address_2_y_ + _address_2_height_ ))
;       EndMacro
      
      Macro is_intersect_( _address_1_, _address_2_, _address_1_mode_ = )
         Bool(( _address_1_\x#_address_1_mode_ + _address_1_\width#_address_1_mode_ ) > _address_2_\x And _address_1_\x#_address_1_mode_ < ( _address_2_\x + _address_2_\width ) And
              ( _address_1_\y#_address_1_mode_ + _address_1_\height#_address_1_mode_ ) > _address_2_\y And _address_1_\y#_address_1_mode_ < ( _address_2_\y + _address_2_\height ))
      EndMacro
      
      Macro is_no_select_item_( _list_, _item_ )
         Bool( _item_ < 0 Or _item_ >= ListSize( _list_ ) Or (ListIndex( _list_ ) <> _item_ And Not SelectElement( _list_, _item_ ) ))
      EndMacro
      
      ;-
;       Macro MouseInner( _this_, _mouse_x_, _mouse_y_ )
;          Bool( is_atpoint_( _this_, _mouse_x_, _mouse_y_, [#__c_draw] ) And
;                is_atpoint_( _this_, _mouse_x_, _mouse_y_, [#__c_inner] ) And
;                Not ( _this_\type = #__type_Splitter And is_atpoint_( _this_\bar\button, _mouse_x_, _mouse_y_ ) = 0 ) And
;                Not ( _this_\type = #__type_HyperLink And is_atpoint_( _this_, _mouse_x_ - _this_\frame_x( ), _mouse_y_ - _this_\frame_y( ), [#__c_Required] ) = 0 ))
;       EndMacro
      Macro MouseEnter( _this_, _mode_ = 2 ) : _this_\enter = _mode_ : EndMacro
      Macro MouseButtonPress( ): mouse( )\press: EndMacro ; Returns mouse x
      Macro MouseButtons( ): mouse( )\buttons: EndMacro    ; Returns mouse x
      Macro GetMouseX( ): DPIUnScaledX( mouse( )\x ): EndMacro ; Returns mouse x
      Macro GetMouseY( ): DPIUnScaledY( mouse( )\y ): EndMacro ; Returns mouse y
      
      ;-
      
;       ;-
;       Macro ImageIDWidth( _image_id_ )
;          func::GetImageWidth( _image_id_ )
;       EndMacro
;       
;       Macro ImageIDHeight( _image_id_ )
;          func::GetImageHeight( _image_id_ )
;       EndMacro
;       
;       Macro ResizeImageID( _image_id_, _width_, _height_ )
;          func::SetImageWidth( _image_id_, _width_ )
;          func::SetImageHeight( _image_id_, _height_ )
;       EndMacro
      
      
      ;-
      Macro a_anchors( )
         mouse( )\anchors
      EndMacro
      ;
      Macro a_index( )
         a_anchors( )\index
      EndMacro
      Macro a_main( )
         a_anchors( )\main
      EndMacro
      Macro a_entered( )
         a_anchors( )\entered
      EndMacro
      Macro a_focused( )
         a_anchors( )\focused
      EndMacro
      Macro a_group( )
         mouse( )\selector\group( )
      EndMacro
      Macro a_getsize( _this_ )
         DPIUnScaled(_this_\anchors\size)
      EndMacro
      Macro a_getpos( _this_ )
         DPIUnScaled(_this_\anchors\pos)
      EndMacro
      
      ;-
      Macro GetFontID( _address_ )
         _address_\text\fontID    
      EndMacro
      Macro SetFontID( _address_, _font_ID_ )
         _address_\text\fontID = _font_ID_ 
      EndMacro
      Macro CurrentFontID( )
         __gui\fontID    
      EndMacro
      Macro ChangeFontID( _address_, _font_ID_ )
         Bool( GetFontID( _address_ ) <> _font_ID_ )
         SetFontID( _address_, _font_ID_ )
      EndMacro
      
      ;-
      Macro draw_mode_alpha_( _mode_ )
         draw_mode_( _mode_ | #PB_2DDrawing_AlphaBlend )
      EndMacro
      
      Macro draw_mode_( _mode_ )
         DrawingMode( _mode_ )
      EndMacro
      
      Macro draw_font( _address_, _font_id_ = 0 )
         If _font_id_
            If Not GetFontID( _address_ )
               SetFontID( _address_, _font_id_ )
               _address_\text\TextChange( ) = #True
            EndIf
         EndIf
         ;
         If GetFontID( _address_ ) And
            CurrentFontID( ) <> GetFontID( _address_ )
            ; Debug " draw current font - " + #PB_Compiler_Procedure + " " +  Str(_address_) + " " + CurrentFontID( ) +" "+ GetFontID( _address_ )
            CurrentFontID( ) = GetFontID( _address_ )
            
            DrawingFont( CurrentFontID( ) )
            _address_\text\TextChange( ) = #True
         EndIf
         ;
         If _address_\text\TextChange( ) Or Not ( _address_\text\width And _address_\text\height ) 
            If _address_\text\string
               _address_\text\width = TextWidth( _address_\text\string )
            EndIf
            
            _address_\text\height = TextHeight( "A" )
            
            ; set rotate text value
            _address_\text\rotate = Bool( _address_\text\invert ) * 180 + Bool( _address_\text\vertical ) * 90
            
         EndIf
      EndMacro
      
      Macro draw_box_( _x_, _y_, _width_, _height_, _color_ = $ffffffff )
         Box( _x_, _y_, _width_, _height_, _color_ )
      EndMacro
      
      Macro draw_roundbox_( _x_, _y_, _width_, _height_, _round_x_, _round_y_, _color_ = $ffffffff )
         If _round_x_ Or _round_y_
            RoundBox( _x_, _y_, _width_, _height_, _round_x_, _round_y_, _color_ ) ; bug _round_y_ = 0
         Else
            draw_box_( _x_, _y_, _width_, _height_, _color_ )
         EndIf
      EndMacro
      
      ;-
      Macro draw_up_(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ;
         ;                                                                                                                                                      ;
         Line(_x_ + 7, _y_, 2, 1, _frame_color_)                                                                                                                  ; 0,0,0,0,0,0,0,0,0,0
         Plot(_x_ + 6, _y_ + 1, _frame_color_ ) : Line(_x_ + 7, _y_ + 1, 2, 1, _back_color_) : Plot(_x_ + 9, _y_ + 1, _frame_color_ )                             ; 0,0,0,0,1,1,0,0,0,0
         Plot(_x_ + 5, _y_ + 2, _frame_color_ ) : Line(_x_ + 6, _y_ + 2, 4, 1, _back_color_) : Plot(_x_ + 10, _y_ + 2, _frame_color_ )                            ; 0,0,0,1,1,1,1,0,0,0
         Plot(_x_ + 4, _y_ + 3, _frame_color_ ) : Line(_x_ + 5, _y_ + 3, 6, 1, _back_color_) : Plot(_x_ + 11, _y_ + 3, _frame_color_ )                            ; 0,0,1,1,1,1,1,1,0,0
         Line(_x_ + 3, _y_ + 4, _size_ / 3 - 1, 1, _frame_color_) : Line(_x_ + 7, _y_ + 4, 2, 1, _back_color_) : Line(_x_ + _size_ / 2 + 1, _y_ + 4, _size_ / 3 - 1 , 1, _frame_color_) ; 0,0,0,0,1,1,0,0,0,0
         Plot(_x_ + _size_ / 2 - 2, _y_ + 5, _frame_color_ ) : Line(_x_ + 7, _y_ + 5, 2, 1, _back_color_) : Plot(_x_ + _size_ / 2 + 1, _y_ + 5, _frame_color_ )                         ; 0,0,0,0,1,1,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ;
                                                                                                                                                                                        ;                                                                                                                                                      ;
      EndMacro
      Macro draw_down_(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ;
         ;                                                                                                                                                      ;
         Plot(_x_ + _size_ / 2 - 2, _y_ + 4, _frame_color_ ) : Line(_x_ + 7, _y_ + 4, 2, 1, _back_color_) : Plot(_x_ + _size_ / 2 + 1, _y_ + 4, _frame_color_ )                     ; 0,0,0,0,1,1,0,0,0,0
         Line(_x_ + 3, _y_ + 5, _size_ / 3 - 1, 1, _frame_color_) : Line(_x_ + 7, _y_ + 5, 2, 1, _back_color_) : Line(_x_ + _size_ / 2 + 1, _y_ + 5, _size_ / 3 - 1, 1, _frame_color_)  ; 0,0,0,0,1,1,0,0,0,0
         Plot(_x_ + 4, _y_ + 6, _frame_color_ ) : Line(_x_ + 5, _y_ + 6, 6, 1, _back_color_) : Plot(_x_ + 11, _y_ + 6, _frame_color_ )                                                  ; 0,0,1,1,1,1,1,1,0,0
         Plot(_x_ + 5, _y_ + 7, _frame_color_ ) : Line(_x_ + 6, _y_ + 7, 4, 1, _back_color_) : Plot(_x_ + 10, _y_ + 7, _frame_color_ )                                                  ; 0,0,0,1,1,1,1,0,0,0
         Plot(_x_ + 6, _y_ + 8, _frame_color_ ) : Line(_x_ + 7, _y_ + 8, 2, 1, _back_color_) : Plot(_x_ + 9, _y_ + 8, _frame_color_ )                                                   ; 0,0,0,0,1,1,0,0,0,0
         Line(_x_ + 7, _y_ + 9, 2, 1, _frame_color_)                                                                                                                                    ; 0,0,0,0,0,0,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ;
                                                                                                                                                                                        ;                                                                                                                                                      ;
      EndMacro
      Macro draw_left_(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         Line(_x_, _y_ + 7, 1, 2, _frame_color_)                                                                                                                  ; 0,0,1,0,0,0
         Plot(_x_ + 1, _y_ + 6, _frame_color_ ) : Line(_x_ + 1, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 1, _y_ + 9, _frame_color_ )                             ; 0,0,1,1,0,0
         Plot(_x_ + 2, _y_ + 5, _frame_color_ ) : Line(_x_ + 2, _y_ + 6, 1, 4, _back_color_) : Plot(_x_ + 2, _y_ + 10, _frame_color_ )                            ; 1,1,1,1,1,0
         Plot(_x_ + 3, _y_ + 4, _frame_color_ ) : Line(_x_ + 3, _y_ + 5, 1, 6, _back_color_) : Plot(_x_ + 3, _y_ + 11, _frame_color_ )                            ; 1,1,1,1,1,0
         Line(_x_ + 4, _y_ + 3, 1, _size_ / 3 - 1, _frame_color_) : Line(_x_ + 4, _y_ + 7, 1, 2, _back_color_) : Line(_x_ + 4, _y_ + _size_ / 2 + 1, 1, _size_ / 3 - 1, _frame_color_)  ; 0,0,1,1,0,0
         Plot(_x_ + 5, _y_ + _size_ / 2 - 2, _frame_color_ ) : Line(_x_ + 5, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 5, _y_ + _size_ / 2 + 1, _frame_color_ )                         ; 0,0,1,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
      EndMacro
      Macro draw_right_(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         Plot(_x_ + 4, _y_ + _size_ / 2 - 2, _frame_color_ ) : Line(_x_ + 4, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 4, _y_ + _size_ / 2 + 1, _frame_color_ )                     ; 0,0,0,1,0,0
         Line(_x_ + 5, _y_ + 3, 1, _size_ / 3 - 1, _frame_color_) : Line(_x_ + 5, _y_ + 7, 1, 2, _back_color_) : Line(_x_ + 5, _y_ + _size_ / 2 + 1, 1, _size_ / 3 - 1, _frame_color_)  ; 0,0,1,1,0,0
         Plot(_x_ + 6, _y_ + 4, _frame_color_ ) : Line(_x_ + 6, _y_ + 5, 1, 6, _back_color_) : Plot(_x_ + 6, _y_ + 11, _frame_color_ )                                                  ; 0,1,1,1,1,1
         Plot(_x_ + 7, _y_ + 5, _frame_color_ ) : Line(_x_ + 7, _y_ + 6, 1, 4, _back_color_) : Plot(_x_ + 7, _y_ + 10, _frame_color_ )                                                  ; 0,1,1,1,1,1
         Plot(_x_ + 8, _y_ + 6, _frame_color_ ) : Line(_x_ + 8, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 8, _y_ + 9, _frame_color_ )                                                   ; 0,0,1,1,0,0
         Line(_x_ + 9, _y_ + 7, 1, 2, _frame_color_)                                                                                                                                    ; 0,0,0,1,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
      EndMacro
      
      Macro draw_gradient_( _vertical_, _address_, _color_fore_, _color_back_, _mode_ = )
         BackColor( _color_fore_ & $FFFFFF | _address_\AlphaState24( ) )
         FrontColor( _color_back_ & $FFFFFF | _address_\AlphaState24( ) )
         
         If _vertical_  ; _address_\vertical
            LinearGradient( _address_\x#_mode_, _address_\y#_mode_, ( _address_\x#_mode_ + _address_\width#_mode_ ), _address_\y#_mode_ )
         Else
            LinearGradient( _address_\x#_mode_, _address_\y#_mode_, _address_\x#_mode_, ( _address_\y#_mode_ + _address_\height#_mode_ ))
         EndIf
         
         draw_roundbox_( _address_\x#_mode_, _address_\y#_mode_, _address_\width#_mode_, _address_\height#_mode_, _address_\round, _address_\round )
         
         BackColor( #PB_Default )
         FrontColor( #PB_Default ) ; bug
      EndMacro
      
      Macro draw_gradientbox_( _vertical_, _x_, _y_, _width_, _height_, _color_1_, _color_2_, _round_ = 0, _alpha_ = 255 )
         BackColor( _color_1_ & $FFFFFF | _alpha_ << 24 )
         FrontColor( _color_2_ & $FFFFFF | _alpha_ << 24 )
         
         If _vertical_
            LinearGradient( _x_, _y_, ( _x_ + _width_ ), _y_ )
         Else
            LinearGradient( _x_, _y_, _x_, ( _y_ + _height_ ))
         EndIf
         
         draw_roundbox_( _x_, _y_, _width_, _height_, _round_, _round_ )
         
         BackColor( #PB_Default ) : FrontColor( #PB_Default ) ; bug
      EndMacro
      
      Macro draw_button_( _type_, _x_, _y_, _width_, _height_, _checked_, _round_, _color_fore_ = $FFFFFFFF, _color_fore2_ = $FFE9BA81, _color_back_ = $80E2E2E2, _color_back2_ = $FFE89C3D, _color_frame_ = $80C8C8C8, _color_frame2_ = $FFDC9338, _alpha_ = 255, size=4 )
         draw_mode_alpha_( #PB_2DDrawing_Gradient )
         LinearGradient( _x_, _y_, _x_, ( _y_ + _height_ ))
         
         If _checked_
            BackColor( _color_fore2_ & $FFFFFF | _alpha_ << 24 )
            FrontColor( _color_back2_ & $FFFFFF | _alpha_ << 24 )
         Else
            BackColor( _color_fore_ & $FFFFFF | _alpha_ << 24 )
            FrontColor( _color_back_ & $FFFFFF | _alpha_ << 24 )
         EndIf
         
         draw_roundbox_( _x_, _y_, _width_, _height_, _round_, _round_ )
         
         If _type_ = 4
            FrontColor( $ff000000 & $FFFFFF | _alpha_ << 24 )
            BackColor( $ff000000 & $FFFFFF | _alpha_ << 24 )
            
            Line( _x_ + 1 + ( _width_ - 6 ) / 2, _y_ + ( _height_ - 6 ) / 2, 6, 6 )
            Line( _x_ + ( _width_ - 6 ) / 2, _y_ + ( _height_ - 6 ) / 2, 6, 6 )
            
            Line( _x_ - 1 + 6 + ( _width_ - 6 ) / 2, _y_ + ( _height_ - 6 ) / 2, - 6, 6 )
            Line( _x_ + 6 + ( _width_ - 6 ) / 2, _y_ + ( _height_ - 6 ) / 2, - 6, 6 )
         Else
            FrontColor( _color_fore_ & $FFFFFF | _alpha_ << 24 )
            BackColor( _color_fore_ & $FFFFFF | _alpha_ << 24 )
            
            If _checked_
               If _type_ = 1
                  If _width_ % 2
                     draw_roundbox_( _x_ + ( _width_ - DesktopScaledY(4) ) / 2, _y_ + ( _height_ - DesktopScaledY(4) ) / 2, DesktopScaledY(5), DesktopScaledY(5), 4, 4 )
                  Else
                     draw_roundbox_( _x_ + ( _width_ - DesktopScaledY(4) ) / 2, _y_ + ( _height_ - DesktopScaledY(4) ) / 2, DesktopScaledY(4), DesktopScaledY(4), 4, 4 )
                  EndIf
               Else
                  If _checked_ = - 1
                     If _width_ % 2
                        draw_box_( _x_ + ( _width_ - DesktopScaledY(4) ) / 2, _y_ + ( _height_ - DesktopScaledY(4) ) / 2, DesktopScaledY(5), DesktopScaledY(5) )
                     Else
                        draw_box_( _x_ + ( _width_ - DesktopScaledY(4) ) / 2, _y_ + ( _height_ - DesktopScaledY(4) ) / 2, DesktopScaledY(4), DesktopScaledY(4) )
                     EndIf
                  Else
                     _box_x_ = _width_ / 2 - 4
                     _box_y_ = _box_x_ + Bool( _width_ % 2 )
                     
                     LineXY(( _x_ + 1 + _box_x_ ), ( _y_ + 4 + _box_y_ ), ( _x_ + 2 + _box_x_ ), ( _y_ + 5 + _box_y_ )) ; Левая линия
                     LineXY(( _x_ + 1 + _box_x_ ), ( _y_ + 5 + _box_y_ ), ( _x_ + 2 + _box_x_ ), ( _y_ + 6 + _box_y_ )) ; Левая линия
                     
                     LineXY(( _x_ + 6 + _box_x_ ), ( _y_ + 0 + _box_y_ ), ( _x_ + 3 + _box_x_ ), ( _y_ + 6 + _box_y_ )) ; правая линия
                     LineXY(( _x_ + 7 + _box_x_ ), ( _y_ + 0 + _box_y_ ), ( _x_ + 4 + _box_x_ ), ( _y_ + 6 + _box_y_ )) ; правая линия
                  EndIf
               EndIf
            EndIf
            
         EndIf
         
         draw_mode_alpha_( #PB_2DDrawing_Outlined )
         
         If _checked_
            FrontColor( _color_frame2_ & $FFFFFF | _alpha_ << 24 )
         Else
            FrontColor( _color_frame_ & $FFFFFF | _alpha_ << 24 )
         EndIf
         
         draw_roundbox_( _x_, _y_, _width_, _height_, _round_, _round_, _color_frame_ & $FFFFFF | _alpha_ << 24 )
      EndMacro
      
      ;-
      Macro draw_plus( _address_, _plus_, _size_ = DPIScaled( #__draw_plus_size ))
         Line(_address_\x + (_address_\width - _size_) / 2, _address_\y + (_address_\height - 1) / 2, _size_, 1, _address_\color\front[_address_\ColorState( )])
         If _plus_
            Line(_address_\x + (_address_\width - 1) / 2, _address_\y + (_address_\height - _size_) / 2, 1, _size_, _address_\color\front[_address_\ColorState( )])
         EndIf
      EndMacro
      
      Macro draw_arrows( _address_, _direction_ )
         Draw_Arrow( _direction_,
                     _address_\x + ( _address_\width - _address_\arrow\size ) / 2,
                     _address_\y + ( _address_\height - _address_\arrow\size ) / 2, 
                     _address_\arrow\size, _address_\arrow\type, 0,
                     _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
      EndMacro
      
      Macro draw_box( _address_, _color_type_, _mode_ = )
         draw_roundbox_( _address_\x#_mode_, _address_\y#_mode_, _address_\width#_mode_, _address_\height#_mode_,
                         _address_\round, _address_\round, _address_\_color_type_[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
      EndMacro
      
      Macro draw_box_button( _address_, _color_type_ )
         ;draw_box( _address_, _color_type_)
         If Not _address_\hide
            draw_roundbox_( _address_\x, _address_\y, _address_\width, _address_\height, _address_\round, _address_\round, _address_\_color_type_[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            draw_roundbox_( _address_\x, _address_\y + 1, _address_\width, _address_\height - 2, _address_\round, _address_\round, _address_\_color_type_[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            draw_roundbox_( _address_\x + 1, _address_\y, _address_\width - 2, _address_\height, _address_\round, _address_\round, _address_\_color_type_[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
         EndIf
      EndMacro
      
      Macro draw_close_button( _address_, _size_ )
         ; close button
         If Not _address_\hide
            If _address_\ColorState( )
               Line( _address_\x + 1 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               
               Line( _address_\x - 1 + _size_ + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + _size_ + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            EndIf
            
            draw_box_button( _address_, color\frame )
         EndIf
      EndMacro
      
      Macro draw_maximize_button( _address_, _size_ )
         If Not _address_\hide
            If _address_\ColorState( )
               Line( _address_\x + 2 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + 1 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               
               Line( _address_\x + 1 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + 2 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            EndIf
            
            draw_box_button( _address_, color\frame )
         EndIf
      EndMacro
      
      Macro draw_minimize_button( _address_, _size_ )
         If Not _address_\hide
            If _address_\ColorState( )
               Line( _address_\x + 1 + ( _address_\width ) / 2 - _size_, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + 0 + ( _address_\width ) / 2 - _size_, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               
               Line( _address_\x - 1 + ( _address_\width ) / 2 + _size_, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x - 2 + ( _address_\width ) / 2 + _size_, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            EndIf
            
            draw_box_button( _address_, color\frame )
         EndIf
      EndMacro
      
      Macro draw_help_button( _address_, _size_ )
         If Not _address_\hide
            draw_roundbox_( _address_\x, _address_\y, _address_\width, _address_\height,
                            _address_\round, _address_\round, _address_\color\frame[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
         EndIf
      EndMacro
      
      Macro draw_option_button( _address_, _size_, _color_ )
         If _address_\round > 2
            If _address_\width % 2
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_ + 1, _size_ + 1, _size_ + 1, _size_ + 1, _color_ )
            Else
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _size_, _size_, _color_ )
            EndIf
         Else
            If _address_\width % 2
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_ + 1, _size_ + 1, 1, 1, _color_ )
            Else
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_ + 1, _size_ + 1, 1, 1, _color_ )
            EndIf
         EndIf
      EndMacro
      
      Macro draw_button_check( _address_, _size_, _color_ )
         LineXY(( _address_\x + 0 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 4 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 1 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 5 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; Левая линия
         LineXY(( _address_\x + 0 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 5 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 1 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 6 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; Левая линия
         
         LineXY(( _address_\x + 5 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 0 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 2 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 6 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; правая линия
         LineXY(( _address_\x + 6 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 0 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 3 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 6 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; правая линия
      EndMacro
      
      Macro draw_background_image_( _this_, _x_, _y_, _mode_ = )
         ; draw_mode_alpha_( #PB_2DDrawing_Transparent )
         DrawAlphaImage( _this_\image#_mode_\id, _x_ + _this_\image#_mode_\x + _this_\scroll_x( ), _y_ + _this_\image#_mode_\y + _this_\scroll_y( ), _this_\ColorAlphaState( ) )
      EndMacro
      
      ;     Macro Close( )
      ;       PB(CloseGadgetList)( )
      ;     EndMacro
      
      ;-  
      ;-\\   DECLARE_globals
      ;-  
      Declare.l DDropX( )
      Declare.l DDropY( )
      Declare.l DDropWidth( )
      Declare.l DDropHeight( )
      
      Declare.s DDropFiles( )
      Declare.s DDropText( )
      Declare.i DDropType( )
      Declare.i DDropAction( )
      Declare.i DDropPrivate( )
      Declare.i DDropImage( Image.i = -1, Depth.i = 24 )
      
      Declare.i DDragText( Text.S, Actions.b = #PB_Drag_Copy )
      Declare.i DDragImage( Image.i, Actions.b = #PB_Drag_Copy )
      Declare.i DDragPrivate( Type.i, Actions.b = #PB_Drag_Copy )
      Declare.i DDragFiles( Files.s, Actions.b = #PB_Drag_Copy )
      Declare.i EnableDDrop( *this, Format.l, Actions.b, PrivateType.i = 0 )
      
      Declare a_grid_image( Steps = 5, line = 0, Color = 0, startx = 0, starty = 0 )
      Declare a_init( *this, grid_size.a = 7, grid_type.b = 0 )
      Declare a_set( *this, mode.i = #PB_Default, size.l = #PB_Default, position.l = #PB_Default )
      Declare a_update( *parent )
      Declare a_free( *this )
      Declare a_object( X.l, Y.l, Width.l, Height.l, Text.s, Color.l, flag.q = #Null, framesize = 1 )
      
      Declare.b bar_tab_UpdateItems( *this._s_WIDGET, List *tabs._s_ITEMS( ) )
      Declare.l bar_setAttribute( *this, Attribute.l, *value )
      Declare.i bar_tab_SetState( *this, item.l )
      Declare   bar_mdi_resize( *this, X.l, Y.l, Width.l, Height.l )
      Declare   bar_mdi_update( *this, X.l, Y.l, Width.l, Height.l )
      Declare   bar_area_resize( *this, X.l, Y.l, Width.l, Height.l )
      Declare.b bar_Update( *this, mode.b = 1 )
      Declare.b bar_PageChange( *this, state.l, mode.b = 1 )
      
      Declare.l Update_TreeRows( *this._s_WIDGET, List *rows._s_ROWS( ), _change_ = 1 )
      
      
      
      Declare   GetAtPoint( *root._s_root, mouse_x, mouse_y, List *List._s_WIDGET( ), *address = #Null )
      Declare.i Sticky( *window = #PB_Default, state.b = #PB_Default )
      Declare.q ToPBFlag( Type, Flag.q )
      Declare.q FromPBFlag( Type, Flag.q )
      Declare.q Flag( *this, flag.q = #Null, state.b = #PB_Default )
      
      Declare.i ToPBEventType( event.i )
      Declare.i TypeFromClass( class.s )
      Declare.s ClassFromType( Type.w )
      Declare.s ClassFromEvent( event.i )
      Declare   SetBackgroundColor( *this, color.l )
      
      
      Declare.b Draw_Arrow( direction.a, X.l, Y.l, size.a, mode.b = 1, framesize.a = 0, Color = $ff000000 )
      Declare   Draw_Button( *this )
      Declare.b Draw( *this )
      Declare   ReDraw( *this )
      Declare   Drawing( *root = 0 )
      
      Declare.b HideItem( *this, item.l, state.b )
      Declare.b Hide( *this, State.b = #PB_Default, flags.q = 0 )
      Declare.b DisableItem( *this, item.l, state.b )
      Declare.b Disable( *this, State.b = #PB_Default )
      Declare.i Address( *this )
      Declare.l Type( *this )
      Declare.i ID( Index )
      Declare.l Index( *this )
      
      Declare.l X( *this, mode.l = #__c_frame )
      Declare.l Y( *this, mode.l = #__c_frame )
      Declare.l Width( *this, mode.l = #__c_frame )
      Declare.l Height( *this, mode.l = #__c_frame )
      
      Declare   IsChild( *this, *parent )
      Declare.b IsContainer( *this )
      Declare.b Resize( *this, ix.l, iy.l, iwidth.l, iheight.l, scale.b = 1 )
      Declare.i SetAlign( *this, mode.q, left.q = 0, top.q = 0, right.q = 0, bottom.q = 0 )
      Declare.i SetAttach( *this, *parent, mode.a )
      Declare   SetChildrenBounds( *this, state.b )
      Declare   SetMoveBounds( *this, MinimumX.l = #PB_Ignore, MinimumY.l = #PB_Ignore, MaximumX.l = #PB_Ignore, MaximumY.l = #PB_Ignore )
      Declare   SetSizeBounds( *this, MinimumWidth.l = #PB_Ignore, MinimumHeight.l = #PB_Ignore, MaximumWidth.l = #PB_Ignore, MaximumHeight.l = #PB_Ignore )
      
      
      Declare.l CountItems( *this )
      Declare.l ClearItems( *this )
      Declare   RemoveItem( *this, Item.l )
      Declare   AddItem( *this, Item.l, Text.s, Image.i = -1, flag.q = 0 )
      Declare   AddColumn( *this, Position.l, Text.s, Width.l, Image.i = - 1 )
      
      
      Declare.i GetRoot( *this )
      Declare.i GetCanvasGadget( *this = #Null )
      Declare.i GetCanvasWindow( *this = #Null )
      
      
      Declare.l Level( *this )
      Declare.i CountType( *this, mode.b = #False )
      Declare.i SetActive( *this )
      
      Declare.a GetFrame( *this, mode.b = 0 )
      Declare   SetFrame( *this, size.a, mode.b = 0 )
      
      Declare.s GetClass( *this )
      Declare   SetClass( *this, class.s )
      
      Declare.s GetText( *this )
      Declare   SetText( *this, Text.s )
      Declare.s GetItemText( *this, Item.l, Column.l = 0 )
      Declare.l SetItemText( *this, Item.l, Text.s, Column.l = 0 )
      
      
      Declare.i GetData( *this )
      Declare.i SetData( *this, *data )
      Declare.i GetItemData( *this, item.l )
      Declare.i SetItemData( *this, item.l, *data )
      
      Declare.i GetFont( *this )
      Declare.i SetFont( *this, FontID.i )
      Declare.i GetItemFont( *this, Item.l )
      Declare.i SetItemFont( *this, Item.l, Font.i )
      
      Declare.i GetState( *this )
      Declare.b SetState( *this, state.i )
      Declare.l GetItemState( *this, Item.l )
      Declare.b SetItemState( *this, Item.l, State.b )
      
      Declare.l GetColor( *this, ColorType.l )
      Declare.l SetColor( *this, ColorType.l, Color.l, Column.l = 0 )
      Declare.l GetItemColor( *this, Item.l, ColorType.l, Column.l = 0 )
      Declare.l SetItemColor( *this, Item.l, ColorType.l, Color.l, Column.l = 0 )
      
      Declare.i GetAttribute( *this, Attribute.l )
      Declare.i SetAttribute( *this, Attribute.l, *value )
      Declare.i GetItemAttribute( *this, Item.l, Attribute.l, Column.l = 0 )
      Declare.i SetItemAttribute( *this, Item.l, Attribute.l, *value, Column.l = 0 )
      
      Macro     CurrentCursor( ) : mouse( )\cursor : EndMacro
      Declare.i GetCursor( *this, Type.a = 0 )
      Declare   SetCursor( *this, *cursor, Type.a = 0 )
      Declare   ChangeCursor( *this, *cursor )
      Declare   ChangeCurrentCursor( *this, *cursor )
      
      Declare   SetImage( *this, *image )
      Declare   SetBackgroundImage( *this, *image )
      Declare.i GetItemImage( *this, Item.l )
      Declare.i SetItemImage( *this, Item.l, Image.i )
      
      Declare.i GetParent( *this )
      Declare   SetParent( *this, *parent, tabindex.l = #PB_Default )
      
      Declare   GetLast( *last, tabindex.l )
      Declare   GetPosition( *this, position.l )
      Declare   SetPosition( *this, position.l, *widget = #Null )
      Declare   GetPositionAfter( *this, tabindex.l )
      Declare   GetPositionLast( *this, tabindex.l = #PB_Default )
      
      ; menu
      ;Declare.b IsBar( *this._s_widget )
      Declare   CreateBar( Type.w, *parent, flag.q = #Null )
      Declare.i DisplayPopupBar( *this, *display, X.l = #PB_Ignore, Y.l = #PB_Ignore )
      Declare   BarPosition( *this, position.i, size.i = #PB_Default )
      Declare   BarTitle( title.s, Image = - 1 )
      Declare   BarItem( item, Text.s, Image = - 1 )
      Declare   BarButton( Button.i, Image.i, mode.i = 0, Text.s = #Null$ )
      Declare   BarSeparator( )
      Declare   OpenSubBar( Text.s, Image.i = - 1 )
      Declare   CloseSubBar( )
      
      ;
      Declare.i Create( *parent, class.s, Type.w, X.l, Y.l, Width.l, Height.l, Text.s = #Null$, flag.q = #Null, *param_1 = #Null, *param_2 = #Null, *param_3 = #Null, size.l = 0, round.l = 0, ScrollStep.f = 1.0 )
      
      ; button
      Declare.i Text( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
      Declare.i String( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
      Declare.i Button( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, Image.i = -1, round.l = 0 )
      Declare.i Option( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0 )
      Declare.i CheckBox( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0 )
      Declare.i HyperLink( X.l, Y.l, Width.l, Height.l, Text.s, Color.i, flag.q = 0 )
      Declare.i ComboBox( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      
      ; bar
      Declare.i Spin( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = 0, increment.f = 1.0 )
      Declare.i Tab( X.l, Y.l, Width.l, Height.l, flag.q = 0, round.l = 0 )
      Declare.i Scroll( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, PageLength.l, flag.q = 0, round.l = 0 )
      Declare.i Track( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = #__buttonround )
      Declare.i Progress( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = 0 )
      Declare.i Splitter( X.l, Y.l, Width.l, Height.l, First.i, Second.i, flag.q = 0 )
      
      ; list
      Declare.i Tree( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      Declare.i ListView( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      Declare.i Editor( X.l, Y.l, Width.l, Height.l, flag.q = 0, round.i = 0 )
      Declare.i ListIcon( X.l, Y.l, Width.l, Height.l, ColumnTitle.s, ColumnWidth.i, flag.q = 0 )
      
      Declare.i ExplorerList( X.l, Y.l, Width.l, Height.l, Directory.s, flag.q = 0 )
      Declare.i Properties( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      
      Declare.i Image( X.l, Y.l, Width.l, Height.l, Image.i, flag.q = 0 )
      Declare.i ButtonImage( X.l, Y.l, Width.l, Height.l, Image.i = -1, flag.q = 0, round.l = 0 )
      
      ; container
      Declare.i Panel( X.l, Y.l, Width.l, Height.l, flag.q = #__flag_BorderFlat )
      Declare.i Container( X.l, Y.l, Width.l, Height.l, flag.q = #__flag_BorderFlat )
      Declare.i Frame( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = #__flag_nogadgets )
      Declare.i ScrollArea( X.l, Y.l, Width.l, Height.l, ScrollAreaWidth.l, ScrollAreaHeight.l, ScrollStep.l = 1, flag.q = #__flag_BorderFlat )
      Declare.i MDI( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      
      ;
      Declare   Message( Title.s, Text.s, flag.q = #Null )
      Declare   PostQuit( *root = #Null )
      Declare   WaitQuit( *root = #Null )
      ;
      Declare.i Send( *this, eventtype.l, *button = #PB_All, *data = #Null )
      Declare.i Post( *this, eventtype.l, *button = #PB_All, *data = #Null )
      Declare.i Bind( *this, *callback, eventtype.l = #PB_All, item.l = #PB_All )
      Declare.i Unbind( *this, *callback, eventtype.l = #PB_All, item.l = #PB_All )
      ;
      Declare.i CloseList( )
      Declare.i OpenList( *this, item.l = 0 )
      ;
      
      Declare   Free( *this )
      Declare   Close( *window )
      Declare   Open( Window, X.l = 0, Y.l = 0, Width.l = #PB_Ignore, Height.l = #PB_Ignore, title$ = #Null$, flag.q = #Null, *parentID = #Null, Canvas = #PB_Any )
      Declare   WaitClose( *root = #Null, waittime.l = #PB_Default )
      Declare   EventHandler( Canvas.i = - 1, eventtype.i = - 1, eventdata = 0 )
      
      Declare.i Window( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, *parent = 0 )
      Declare.i Gadget( Type.w, Gadget.i, X.l, Y.l, Width.l, Height.l, Text.s = "", *param1 = #Null, *param2 = #Null, *param3 = #Null, flag.q = #Null )
   EndDeclareModule
   
   Module widget
      Global NewMap typeCount( )
      Global cursor_change_widget
      Global toogleline = DPIScaled(1);DPIScaled(3)
      
      ;-
      ;-\\ DECLARE PRIVATEs
      ;-
      Declare   Repost( )
      Declare   DoFocus( *this, eventtype.l, *button = #PB_All, *data = #Null )
      Declare   DoEvent_Lines( *this, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
      Declare   DoEvent_Rows( *this, List  *rows._s_ROWS( ), eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
      Declare   DoEvent_Button( *this, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
      Declare   DoEvents( *this, eventtype.l, *button = #PB_All, *data = #Null )
      
      Declare.b bar_draw_tab( *this )
      
      Declare.b bar_area_update( *this._s_WIDGET )
      Declare.l Update_TreeVisibleRows( *this._s_WIDGET, List *rows._s_ROWS( ), visible_height.l = 0 )
      Declare   Draw_TreeRows( *this._s_WIDGET, List *rows._s_ROWS( ) )
      Declare   edit_UpdateText( *this._s_WIDGET )
      
      Declare   SetForeground( *this._s_WIDGET )
      
      Declare   ReParent( *this._s_WIDGET, *parent._s_WIDGET )
      Declare   bar_AddItem( *this._s_WIDGET, Item.i, Text.s, Image.i = -1, sublevel.i = 0 )
      Declare.s bar_tab_GetItemText( *this._s_WIDGET, Item.l, Column.l = 0 )
      Declare   bar_tab_RemoveItem( *this._s_WIDGET, Item.l )
      Declare   bar_tab_ClearItems( *this._s_WIDGET )
      
      Declare   edit_SetState( *this._s_WIDGET, State.i )
      Declare   edit_SetItemState( *this._s_WIDGET, Item.l, State.i )
      Declare   edit_SetText( *this._s_WIDGET, Text.s )
      Declare   edit_AddItem( *this._s_WIDGET, position, *text.Character, string_len )
      Declare   edit_RemoveItem( *this._s_WIDGET, item )
      Declare   edit_ClearItems( *this._s_WIDGET )
      
      ;\\
      Macro Leaved( _address_ )
         Bool( _address_\_enter )
         If _address_\_enter
            _address_\_enter = 0
            
            If _address_\ColorState( ) = #__s_1
               _address_\ColorState( ) = #__s_0
            EndIf
         EndIf
      EndMacro
      Macro Entered( _address_ )
         Bool( Not _address_\_enter )
         If Not _address_\_enter
            _address_\_enter = 1
            
            If _address_\ColorState( ) = #__s_0
               _address_\ColorState( ) = #__s_1
            EndIf
         EndIf
      EndMacro
      
      Macro edit_caret_0( ): Text\caret\pos[0]: EndMacro
      Macro edit_caret_1( ): Text\caret\pos[1]: EndMacro
      Macro edit_caret_2( ): Text\caret\pos[2]: EndMacro
      
      ;-
      Macro row_x_( _this_, _address_ )
         ( _this_\inner_x( ) + _address_\x )  ; + _this_\scroll_x( )
      EndMacro
      
      Macro row_y_( _this_, _address_ )
         ( _this_\inner_y( ) + _address_\y )
      EndMacro
      
      Macro row_scroll_y_( _this_, _row_, _page_height_ = )
         bar_set_scroll_pos_( _this_\scroll\v, ( row_y_( _this_, _row_ ) _page_height_ ) - _this_\scroll\v\y, _row_\height )
      EndMacro
      
      Macro row_sel_element_( _this_, _address_, _index_ )
         _address_\_focus = 0
         _address_\ColorState( ) = 0
         
         _address_ = SelectElement( _this_\__lines( ), _index_ )
         
         If _address_
            _address_\ColorState( ) = 1
            _address_\_focus = 1
         EndIf
      EndMacro
      
      Macro select_prev_item_( _address_, _index_ )
         SelectElement( _address_, _index_ - 1 )
         
         If _address_\hide
            While PreviousElement( _address_ )
               If Not _address_\hide
                  Break
               EndIf
            Wend
         EndIf
      EndMacro
      
      Macro select_next_item_( _address_, _index_ )
         SelectElement( _address_, _index_ + 1 )
         
         If _address_\hide
            While NextElement( _address_ )
               If Not _address_\hide
                  Break
               EndIf
            Wend
         EndIf
      EndMacro
      
      
      
      ;-
      Macro set_state_list_( _address_, _state_ )
         If _state_ > 0
            If *this\mode\clickSelect
               If _address_\_enter = #False
                  _address_\_enter = #True
               EndIf
            Else
               If _address_\press = #False
                  _address_\press = #True
               EndIf
            EndIf
            
            If _address_\press = #True
               _address_\ColorState( ) = #__s_2
            ElseIf _address_\_enter
               _address_\ColorState( ) = #__s_1
            EndIf
            
         ElseIf _address_
            If Not *this\mode\clickSelect
               If _address_\press = #True
                  _address_\press = #False
               EndIf
            EndIf
            
            If _address_\_enter
               _address_\_enter = #False
            EndIf
            
            If _address_\press = #False
               _address_\ColorState( ) = #__s_0
            EndIf
         EndIf
      EndMacro
      
      ;-
      Macro make_scrollarea_x( _this_, _address_ )
         ; make horizontal scroll x
         If _address_\align\right
            _this_\scroll_x( ) = ( _this_\inner_width( ) - _this_\scroll_width( ) )
         ElseIf Not _address_\align\left ; horizontal center
            _this_\scroll_x( ) = ( _this_\inner_width( ) - _this_\scroll_width( )) / 2
         Else
            If _this_\scroll\h
               _this_\scroll_x( ) = - ( _this_\scroll\h\bar\page\pos - _this_\scroll\h\bar\min )
            Else
               _this_\scroll_x( ) = 0
            EndIf
         EndIf
      EndMacro
      
      Macro make_scrollarea_y( _this_, _address_ )
         ; make vertical scroll y
         If _address_\align\bottom
            _this_\scroll_y( ) = ( _this_\inner_height( ) - _this_\scroll_height( ) )
         ElseIf Not _address_\align\top ; vertical center
            _this_\scroll_y( ) = ( _this_\inner_height( ) - _this_\scroll_height( ) ) / 2
         Else
            If _this_\scroll\v
               _this_\scroll_y( ) = - ( _this_\scroll\v\bar\page\pos - _this_\scroll\v\bar\min )
            Else
               _this_\scroll_y( ) = 0
            EndIf
         EndIf
      EndMacro
      
      ;-
      Macro align_content( _address_, _flag_ )
         _address_\align\left  = constants::BinaryFlag( _flag_, #__flag_left )
         _address_\align\right = constants::BinaryFlag( _flag_, #__flag_right )
         
         _address_\align\top    = constants::BinaryFlag( _flag_, #__flag_top )
         _address_\align\bottom = constants::BinaryFlag( _flag_, #__flag_bottom )
         
         If constants::BinaryFlag( _flag_, #__flag_center, #False )
            If Not _address_\align\top And
               Not _address_\align\left And
               Not _address_\align\right And
               Not _address_\align\bottom 
               
               If Not _address_\align\right
                  _flag_ | #__flag_left
                  _address_\align\left = #True
               EndIf
               If Not _address_\align\bottom
                  _flag_ | #__flag_top
                  _address_\align\top = #True
               EndIf
            Else
               If _address_\align\left
                  If Not _address_\align\right Or
                     Not _address_\align\bottom
                     _address_\align\top = #True
                     _flag_ | #__flag_top
                  EndIf
               ElseIf _address_\align\top
                  If Not _address_\align\left Or
                     Not _address_\align\bottom
                     _address_\align\right = #True
                     _flag_ | #__flag_right
                  EndIf
               ElseIf _address_\align\right
                  If Not _address_\align\left Or
                     Not _address_\align\top
                     _address_\align\bottom = #True
                     _flag_ | #__flag_bottom
                  EndIf
               ElseIf _address_\align\bottom
                  If Not _address_\align\right Or
                     Not _address_\align\top
                     _address_\align\left = #True
                     _flag_ | #__flag_left
                  EndIf
               EndIf
            EndIf
         EndIf
         
         If test_align
            Debug " left "+ constants::BinaryFlag( _flag_, #__flag_Textleft) +" "+  _address_\align\left +
                  " top "+ constants::BinaryFlag( _flag_, #__flag_Texttop) +" "+  _address_\align\top + 
                  " right "+ constants::BinaryFlag( _flag_, #__flag_Textright) +" "+  _address_\align\right + 
                  " bottom "+ constants::BinaryFlag( _flag_, #__flag_Textbottom) +" "+  _address_\align\bottom +
                  " center "+ constants::BinaryFlag( _flag_, #__flag_Textcenter)
         EndIf   
      EndMacro
      
      Macro align_horizontal(_address_, _x_, _width_, _size_)
         If _address_\rotate = 0 Or 
            _address_\rotate = 90
            ;
            If _address_\align\right
               _address_\x = _x_ + ( _width_ - _size_ - _address_\padding\x )
            ElseIf Not _address_\align\left
               _address_\x = _x_ + ( _width_ - _size_ ) / 2
            Else
               _address_\x = _x_ + _address_\padding\x
            EndIf
         EndIf  
         
         ; invert
         If _address_\rotate = 180 Or
            _address_\rotate = 270
            ;
            If _address_\align\right
               _address_\x = _x_ + _address_\padding\x + _size_
            ElseIf Not _address_\align\left
               _address_\x = _x_ + ( _width_ + _size_ ) / 2
            Else
               _address_\x = _x_ + _width_ - _address_\padding\x
            EndIf
         EndIf
      EndMacro
      
      Macro align_vertical(_address_, _y_, _height_, _size_)
         If _address_\rotate = 90 Or 
            _address_\rotate = 180
            ;
            If _address_\align\right
               _address_\y = _y_ + _address_\padding\y + _size_
            ElseIf Not _address_\align\left
               _address_\y = _y_ + ( _height_ + _size_ ) / 2
            Else
               _address_\y = _y_ + _height_ - _address_\padding\y
            EndIf
         EndIf 
         
         ; invert 
         If _address_\rotate = 270 Or
            _address_\rotate = 0
            ;
            If _address_\align\right
               _address_\y = _y_ + ( _height_ - _size_ - _address_\padding\y )
            ElseIf Not _address_\align\left
               _address_\y = _y_ + ( _height_ - _size_ ) / 2
            Else
               _address_\y = _y_ + _address_\padding\y
            EndIf
         EndIf
      EndMacro
      
      Macro set_align_x_( _this_, _address_, _width_, _rotate_ )
         If _rotate_ = 0
            If _this_\align\right
               _address_\x = ( _width_ - _address_\width ) - _this_\padding\x
            ElseIf Not _this_\align\left
               _address_\x = ( _width_ - _address_\width ) / 2
            Else
               _address_\x = _this_\padding\x
            EndIf
         EndIf
         ; invert
         If _rotate_ = 180
            If _this_\align\right
               _address_\x = _width_ - _this_\padding\x
            ElseIf Not _this_\align\left
               _address_\x = ( _width_ + _address_\width ) / 2
            Else
               _address_\x = _address_\width + _this_\padding\x
            EndIf
         EndIf
      EndMacro
      
      Macro set_align_y_( _this_, _address_, _height_, _rotate_ )
         If _height_ < 0
            If _rotate_ = 90
               _address_\y = 0
            ElseIf _rotate_ = 180
               _address_\y = Bool( #PB_Compiler_OS = #PB_OS_MacOS ) * 2 + Bool( #PB_Compiler_OS = #PB_OS_Linux ) + _address_\height
            Else
               _address_\y = - Bool( #PB_Compiler_OS = #PB_OS_MacOS )
            EndIf
         EndIf
         
         If _height_ >= 0
            If _rotate_ = 90
               If _this_\align\bottom
                  _address_\y = _height_ - _this_\padding\y
               ElseIf Not _this_\align\top
                  _address_\y = ( _height_ + _address_\width ) / 2
               Else
                  _address_\y = _address_\width + _this_\padding\y
               EndIf
            EndIf
            
            If _rotate_ = 270
               If _this_\align\bottom
                  _address_\y = ( _height_ - _address_\width ) - _this_\padding\y
               ElseIf Not _this_\align\top
                  _address_\y = ( _height_ - _address_\width ) / 2
               Else
                  _address_\y = _this_\padding\y
               EndIf
            EndIf
         EndIf
      EndMacro
      
      ;-
      Macro set_text_flag_( _this_, _text_, _flag_, _x_ = 0, _y_ = 0 )
         ;     If Not _this_\text
         ;       _this_\text.allocate( TEXT )
         ;     EndIf
         
         If _this_\text
            _this_\text\TextChange( ) = 1
            _this_\text\x        = _x_
            _this_\text\y        = _y_
            
            _this_\text\editable = Bool( Not constants::BinaryFlag( _flag_, #__flag_Textreadonly ))
            _this_\text\lower    = constants::BinaryFlag( _flag_, #__flag_Textlowercase )
            _this_\text\upper    = constants::BinaryFlag( _flag_, #__flag_Textuppercase )
            _this_\text\pass     = constants::BinaryFlag( _flag_, #__flag_Textpassword )
            _this_\text\invert   = constants::BinaryFlag( _flag_, #__flag_Textinvert )
            _this_\text\vertical = constants::BinaryFlag( _flag_, #__flag_Textvertical )
            
            If constants::BinaryFlag( _flag_, #__flag_Textwordwrap )
               _this_\text\multiLine = - 1
            ElseIf constants::BinaryFlag( _flag_, #__flag_Textmultiline )
               _this_\text\multiLine = 1
            Else
               _this_\text\multiLine = 0
            EndIf
            
            ;\\
            If _this_\type = #__type_Editor Or
               _this_\type = #__type_String
               
               _this_\color\fore = 0
               
               If _this_\text\editable
                  _this_\text\caret\width = 1
                  _this_\color\back[0]    = $FFFFFFFF
               Else
                  _this_\color\back[0] = $FFF0F0F0
               EndIf
               
               ;\\
               If _this_\type = #__type_Editor
                  If Not _this_\text\multiLine
                     _this_\text\multiLine = 1
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If _this_\type = #__type_Option Or
               _this_\type = #__type_CheckBox Or
               _this_\type = #__type_HyperLink
               
               _this_\text\multiline = - CountString( _text_, #LF$ )
            EndIf
            
            If _this_\type = #__type_String
               If _this_\text\multiline
                  _this_\MarginLine( )\hide        = 0
                  _this_\MarginLine( )\color\front = $C8000000 ; \color\back[0]
                  _this_\MarginLine( )\color\back  = $C8F0F0F0 ; \color\back[0]
               Else
                  _this_\MarginLine( )\hide = 1
                  _this_\text\numeric       = Bool( _flag_ & #__flag_Textnumeric = #__flag_Textnumeric )
               EndIf
            EndIf
            
            If _text_
               SetText( _this_, _text_ )
            EndIf
         EndIf
         
      EndMacro
      
      Macro set_check_state_( _state_, _three_state_ )
         ; change checkbox state
         Select _state_
            Case #PB_Checkbox_Unchecked
               If _three_state_
                  _state_ = #PB_Checkbox_Inbetween
               Else
                  _state_ = #PB_Checkbox_Checked
               EndIf
            Case #PB_Checkbox_Checked : _state_ = #PB_Checkbox_Unchecked
            Case #PB_Checkbox_Inbetween : _state_ = #PB_Checkbox_Checked
         EndSelect
      EndMacro
      
      ;
      ;-
      CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
         ;     Macro OSX_NSColorToRGB( _color_ )
         ;       _color_
         ;     EndMacro
         ;     Macro BlendColor_(Color1, Color2, Scale=50)
         ;       Color1
         ;     EndMacro
         
         Procedure.i BlendColor_(Color1.i, Color2.i, Scale.i = 50)
            Define.i R1, G1, B1, R2, G2, B2
            Define.f Blend = Scale / 100
            
            R1 = Red(Color1): G1 = Green(Color1): B1 = Blue(Color1)
            R2 = Red(Color2): G2 = Green(Color2): B2 = Blue(Color2)
            
            ProcedureReturn RGB((R1*Blend) + (R2 * (1 - Blend)), (G1*Blend) + (G2 * (1 - Blend)), (B1*Blend) + (B2 * (1 - Blend)))
         EndProcedure
         
         Procedure OSX_NSColorToRGBA(NSColor)
            Protected.cgfloat red, green, blue, alpha
            Protected nscolorspace, rgba
            nscolorspace = CocoaMessage(0, nscolor, "colorUsingColorSpaceName:$", @"NSCalibratedRGBColorSpace")
            If nscolorspace
               CocoaMessage(@red, nscolorspace, "redComponent")
               CocoaMessage(@green, nscolorspace, "greenComponent")
               CocoaMessage(@blue, nscolorspace, "blueComponent")
               CocoaMessage(@alpha, nscolorspace, "alphaComponent")
               rgba = RGBA(red * 255.9, green * 255.9, blue * 255.9, alpha * 255.)
               ProcedureReturn rgba
            EndIf
         EndProcedure
         
         Procedure OSX_NSColorToRGB(NSColor)
            Protected.cgfloat red, green, blue
            Protected r, g, b, a
            Protected nscolorspace, rgb
            nscolorspace = CocoaMessage(0, nscolor, "colorUsingColorSpaceName:$", @"NSCalibratedRGBColorSpace")
            If nscolorspace
               CocoaMessage(@red, nscolorspace, "redComponent")
               CocoaMessage(@green, nscolorspace, "greenComponent")
               CocoaMessage(@blue, nscolorspace, "blueComponent")
               rgb = RGB(red * 255.0, green * 255.0, blue * 255.0)
               ProcedureReturn rgb
            EndIf
         EndProcedure
      CompilerEndIf
      
      ;     CompilerSelect #PB_Compiler_OS ;{ Color
      ;       CompilerCase #PB_OS_Windows
      ;         _get_colors_( )\Front         = GetSysColor_(#COLOR_WINDOWTEXT)
      ;         _get_colors_( )\Back          = GetSysColor_(#COLOR_WINDOW)
      ;         _get_colors_( )\focus         = GetSysColor_(#COLOR_HIGHLIGHT)
      ;         _get_colors_( )\Gadget        = GetSysColor_(#COLOR_mENU)
      ;         _get_colors_( )\Button        = GetSysColor_(#COLOR_3DLIGHT)
      ;         _get_colors_( )\Border        = GetSysColor_(#COLOR_WINDOWFRAME)
      ;         _get_colors_( )\WordColor     = GetSysColor_(#COLOR_HOTLIGHT)
      ;         _get_colors_( )\Highlight     = GetSysColor_(#COLOR_HIGHLIGHT)
      ;         _get_colors_( )\HighlightText = GetSysColor_(#COLOR_HIGHLIGHTTEXT)
      ;
      ;       CompilerCase #PB_OS_MacOS
      ;         _get_colors_( )\Front         = OSX_NSColorToRGBa(CocoaMessage(0, 0, "NSColor textColor"))
      ;         ;_get_colors_( )\Back          = BlendColor_(OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor textBackgroundColor")), $FFFFFF, 80)
      ;         ;_get_colors_( )\back[2]      = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor keyboardFocusIndicatorColor"))
      ;         ;_get_colors_( )\Back         = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor windowBackgroundColor"))
      ;         _get_colors_( )\Back         = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor controlBackgroundColor"))
      ;         _get_colors_( )\frame         = OSX_NSColorToRGBa(CocoaMessage(0, 0, "NSColor grayColor"))
      ;         ;_get_colors_( )\back[2]       = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor selectedTextBackgroundColor"))
      ;         ;_get_colors_( )\front[2]      = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor selectedTextColor"))
      ;       CompilerCase #PB_OS_Linux
      ;
      ;     CompilerEndSelect ;}
      
      Procedure CreateIcon( img.l, Type.l )
         Protected X, Y, Pixel, size = 8, Index.i
         
         Index = CreateImage( img, size, size )
         If img = - 1 : img = Index : EndIf
         
         If StartDrawing( ImageOutput( img ))
            draw_box_( 0, 0, size, size, $fff0f0f0 );GetSysColor_( #COLOR_bTNFACE ))
            
            If Type = 1
               Restore img_arrow_down
               For Y = 0 To size - 1
                  For X = 0 To size - 1
                     Read.b Pixel
                     
                     If Pixel
                        Plot( X, Y, $000000 )
                     EndIf
                  Next X
               Next Y
               
            ElseIf Type = 2
               Restore img_arrow_down
               For Y = size - 1 To 0 Step - 1
                  For X = 0 To size - 1
                     Read.b Pixel
                     
                     If Pixel
                        Plot( X, Y, $000000 )
                     EndIf
                  Next X
               Next Y
            EndIf
            StopDrawing( )
         EndIf
         
         DataSection
            
            img_arrow_down:
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            
            
            ;       img_arrow_>:
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,1,1,1,0,0,0,0
            ;       Data.b 0,0,1,1,1,0,0,0
            ;       Data.b 0,0,0,1,1,1,0,0
            ;       Data.b 0,0,1,1,1,0,0,0
            ;       Data.b 0,1,1,1,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            
            ;       img_arrow_v:
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,1,0,0,0,1,0,0
            ;       Data.b 0,1,1,0,1,1,0,0
            ;       Data.b 0,1,1,1,1,1,0,0
            ;       Data.b 0,0,1,1,1,0,0,0
            ;       Data.b 0,0,0,1,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            ;
            ;       img_close
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,1,1,0,0,1,1,0
            ;       Data.b 0,1,1,1,1,1,1,0
            ;       Data.b 0,0,1,1,1,1,0,0
            ;       Data.b 0,0,1,1,1,1,0,0
            ;       Data.b 0,1,1,1,1,1,1,0
            ;       Data.b 0,1,1,0,0,1,1,0
            ;       Data.b 0,0,0,0,0,0,0,0
            
         EndDataSection
      EndProcedure
      
      Procedure.i Match( *value, Grid.i, Max.i = $7FFFFFFF )
         If Grid
            *value = Round(( *value / Grid ), #PB_Round_Nearest ) * Grid
            
            If *value > Max
               *value = Max
            EndIf
         EndIf
         
         ProcedureReturn *value
         ;   Procedure.i Match( *value.i, Grid.i, Max.i = $7FFFFFFF )
         ;     ProcedureReturn (( Bool( *value>Max ) * Max ) + ( Bool( Grid And *value<Max ) * ( Round(( *value/Grid ), #PB_round_nearest ) * Grid ) ))
      EndProcedure
      
      Procedure Draw_Datted( X, Y, SourceColor.l, TargetColor.l )
         Static Len.b
         Protected Color,
                   Dot = mouse( )\selector\dotted,
                   Space.b = mouse( )\selector\dotspace,
                   line.b = mouse( )\selector\dotline
         
         ;             Dot = 1
         ;             Space = 4
         ;             line = 8
         
         If Len <= Bool(Dot) * (space + 1) + Space + line
            If Len <= Bool(Dot) * (space + 1) + Space
               If Len = Space
                  Color = SourceColor
               Else
                  Color = TargetColor
               EndIf
            Else
               Color = SourceColor
            EndIf
         Else
            If Space
               Color = TargetColor
            Else
               Color = SourceColor
            EndIf
            Len = 0
         EndIf
         
         Len + 1
         ProcedureReturn Color
      EndProcedure
      
      Procedure Draw_Plot( X, Y, SourceColor, TargetColor )
         Protected Color
         
         If (Y % 2 And Not X % 2) Or
            (X % 2 And Not Y % 2)
            
            Color = SourceColor
         Else
            Color = TargetColor
         EndIf
         
         ProcedureReturn Color
      EndProcedure
      
      Procedure GetMainParent( *this._s_WIDGET )
         Protected result
         Protected *parent._s_WIDGET
         
         If *this\parent
            *parent = *this\parent
            
            ;\\ get main parent
            While *parent
               If IsChild( *this, *parent )
                  If *parent\parent And
                     Not *parent\parent\parent
                     ; Debug "*parent "+*parent\class
                     result = *parent
                  EndIf
                  *parent = *parent\parent
               EndIf
            Wend
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      
      
      
      ;-
      ;-\\ DD
      ;-
      Procedure DDropDraw( *this._s_WIDGET )
         Protected j = 5, s = j/2
         
         If mouse( )\drop
            ;\\ if you drag to the widget-dropped
            If is_scrollbars_( *this )
               *this = *this\parent
            EndIf
            
            If *this\enter > 0
               ;\\ first - draw backgraund color
               draw_mode_alpha_( #PB_2DDrawing_Default )
               If *this\drop
                  If MouseEnter( *this )
                     If mouse( )\drag = #PB_Drag_Enter
                        draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $1000ff00 )
                        
                        If *this\row
                           draw_box_( *this\inner_x( )+5, mouse( )\y-s-1, *this\inner_width( )-10, j, $2000ff00 )
                        EndIf
                     Else
                        draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $10ff0000 )
                     EndIf
                  Else
                     ;;draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $10ff0000 )
                  EndIf
               Else
                  If *this\press And MouseEnter( *this )
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $10ff00ff )
                  Else
                     draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $100000ff )
                  EndIf
               EndIf
               
               ;\\ second - draw frame color
               draw_mode_( #PB_2DDrawing_Outlined )
               If *this\drop
                  If MouseEnter( *this )
                     If mouse( )\drag = #PB_Drag_Enter
                        draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ff00ff00 )
                        
                        If *this\row
                           draw_box_( *this\inner_x( )+5, mouse( )\y-s-1, *this\inner_width( )-10, j, $ff00ff00 )
                        EndIf
                     Else
                        draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ffff0000 )
                     EndIf
                  Else
                     ; draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $ffff0000 )
                  EndIf
               Else
                  If *this\press And MouseEnter( *this )
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ffff00ff )
                  Else
                     draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $ff0000ff )
                  EndIf
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.l DDropX( )
         ProcedureReturn mouse( )\drop\x
      EndProcedure
      
      Procedure.l DDropY( )
         ProcedureReturn mouse( )\drop\y
      EndProcedure
      
      Procedure.l DDropWidth( )
         ProcedureReturn mouse( )\drop\width
      EndProcedure
      
      Procedure.l DDropHeight( )
         ProcedureReturn mouse( )\drop\height
      EndProcedure
      
      Procedure.i DDropType( )
         ; после того, как произошло событие ( event-DROP )
         ; эта функция возвращает формат отброшенных данных.
         ;   или ОС-специфичный ID для произвольного формата 
         ;   (Доп. информацию см. в описании функции DragOSFormats().) 
         ; возвращает одно из следующих значений 
         ; #PB_Drop_Text   : Перетащен текст.  (для получения текста воспользуйтесь функцией EventDropText() )
         ; #PB_Drop_Image  : Перетащено изображение.  (для получения изображения воспользуйтесь функцией EventDropImage())
         ; #PB_Drop_Files  : Перетащены имена файлов. (для получения имён воспользуйтесь функцией EventDropFiles())
         ; #PB_Drop_Private: Завершена "внутренняя" операция. (чтобы узнать её тип, воспользуйтесь функцией EventDropPrivate())
         ProcedureReturn mouse( )\drop\format
      EndProcedure
      
      Procedure.i DDropAction( )
         ; эта функция возвращает действие, которое следует выполнить с данными.
         ; после того, как произошло событие ( event-DROP )
         ProcedureReturn mouse( )\drop\actions
      EndProcedure
      
      Procedure.i DDropPrivate( )
         ; эта функция возвращает 'PrivateType', который был сброшен.
         ; после того, как произошло событие ( event-DROP ) с форматом #PB_Drop_Private (формат можно получить с помощью DDropType( ))
         ProcedureReturn mouse( )\drop\private
      EndProcedure
      
      Procedure.s DDropFiles( )
         ; эта функция возвращает имена файлов, который был сброшен.
         ; после того, как произошло событие ( event-DROP ) с форматом #PB_Drop_Files (формат можно получить с помощью DDropType( ))
         ; ProcedureReturn mouse( )\drop\files\s
      EndProcedure
      
      Procedure.s DDropText( )
         ; эта функция возвращает текст, который был сброшен.
         ; после того, как произошло событие ( event-DROP ) с форматом #PB_Drop_Text (формат можно получить с помощью DDropType( ))
         ProcedureReturn mouse( )\drop\string
      EndProcedure
      
      Procedure.i DDropImage( Image.i = #PB_Any, Depth.i = 24 )
         ; эта функция возвращает изображения, который был сброшен.
         ; после того, как произошло событие ( event-DROP ) с форматом #PB_Drop_Image (формат можно получить с помощью DDropType( ))
         If mouse( )\drop\imageID
            If Image = #PB_Any
               Image = CreateImage( #PB_Any, DDropWidth( ), DDropHeight( ) )
            EndIf
            
            If IsImage( Image ) And
               StartDrawing( ImageOutput( Image ))
               If Depth = 32
                  DrawAlphaImage( mouse( )\drop\imageID, 0, 0 )
               Else
                  DrawImage( mouse( )\drop\imageID, 0, 0 )
               EndIf
               StopDrawing( )
               
               ProcedureReturn 1
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i EnableDDrop( *this._s_WIDGET, Format.l, Actions.b, PrivateType.i = 0 )
         ;                        ; windows ;    macos   ; linux ;
         ; Формат = Format
         ; #PB_Drop_Text          ; = 1     ; 1413830740 ; -1    ; Accept text on this widget
         ; #PB_Drop_Image         ; = 8     ; 1346978644 ; -2    ; Accept images on this widget
         ; #PB_Drop_Files         ; = 15    ; 1751544608 ; -3    ; Accept filenames on this widget
         ; #PB_Drop_Private       ; = 512   ; 1885499492 ; -4    ; Accept a "private" Drag & Drop on this gadgetProtected Result.i
         
         ; Действие & Actions
         ; #PB_Drag_None          ; = 0     ; 0          ; 0     ; The Data format will Not be accepted on the widget
         ; #PB_Drag_Copy          ; = 1     ; 1          ; 2     ; The Data can be copied
         ; #PB_Drag_Move          ; = 2     ; 16         ; 4     ; The Data can be moved
         ; #PB_Drag_Link          ; = 4     ; 2          ; 8     ; The Data can be linked
         
         ; SetDragCallback( )
         ; "Состояние" указывает текущее состояние операции перетаскивания и имеет одно из следующих значений:
         ; #PB_Drag_Enter         ; = 1     ; 1          ; 1     ; Мышь вошла внутр (объекта).
         ; #PB_Drag_Update        ; = 2     ; 2          ; 2     ; Мышь была перемещена внутри (объекта) или изменено предполагаемое действие.
         ; #PB_Drag_Leave         ; = 3     ; 3          ; 3     : Мышь покинула (объект) (Формат, Действие, x, y здесь равны 0)
         ; #PB_Drag_Finish        ; = 4     ; 4          ; 4     : Перетаскивание завершено.
         ;
         If IsGadget(*this)
            ProcedureReturn PB(EnableGadgetDrop)(*this, Format, Actions, PrivateType )
         EndIf
         
         If Not *this\drop
            ;Debug "Enable dropped - " + *this\class
            *this\drop.allocate( DROP )
         EndIf
         
         *this\drop\format  = Format
         *this\drop\actions = Actions
         *this\drop\private = PrivateType
      EndProcedure
      
      Procedure.i DDragText( Text.s, Actions.b = #PB_Drag_Copy )
         ;Debug "  drag text - " + Text
         
         If Not mouse( )\drop
            mouse( )\drop.allocate( DRAG )
         EndIf
         mouse( )\drop\format  = #PB_Drop_Text
         mouse( )\drop\actions = Actions
         mouse( )\drop\string  = Text
         
         ;
         ChangeCurrentCursor( PressedWidget( ), cursor::#__cursor_Drag )
         ProcedureReturn mouse( )\drop
      EndProcedure
      
      Procedure.i DDragImage( Image.i, Actions.b = #PB_Drag_Copy )
         ;Debug "  drag image - " + Image
         
         If Not mouse( )\drop
            mouse( )\drop.allocate( DRAG )
         EndIf
         mouse( )\drop\format  = #PB_Drop_Image
         mouse( )\drop\actions = Actions
         
         If IsImage( Image )
            mouse( )\drop\imageID = ImageID( Image )
            mouse( )\drop\width   = ImageWidth( Image )
            mouse( )\drop\height  = ImageHeight( Image )
         EndIf
         
         ;
         ChangeCurrentCursor( PressedWidget( ), cursor::#__cursor_Drag )
         ProcedureReturn mouse( )\drop
      EndProcedure
      
      Procedure.i DDragFiles( Files.s, Actions.b = #PB_Drag_Copy )
         ;         ;Debug "  drag files - " + Files
         ;
         ;         If Not mouse( )\drop
         ;           mouse( )\drop.allocate( DRAG )
         ;         EndIf
         ;         mouse( )\drop\format  = #PB_Drop_Files
         ;         mouse( )\drop\actions = Actions
         ;         mouse( )\drop\files  = Files
         
         ;
         ChangeCurrentCursor( PressedWidget( ), cursor::#__cursor_Drag )
         ProcedureReturn mouse( )\drop
      EndProcedure
      
      Procedure.i DDragPrivate( PrivateType.i, Actions.b = #PB_Drag_Copy )
         ; Debug "  drag PrivateType - " + PrivateType +" - Actions - "+ Actions
         
         If Not mouse( )\drop
            mouse( )\drop.allocate( DRAG )
         EndIf
         mouse( )\drop\format  = #PB_Drop_Private
         mouse( )\drop\actions = Actions
         mouse( )\drop\private = PrivateType
         CurrentCursor( ) = cursor::#__cursor_Drag
         
         ;
         ChangeCurrentCursor( PressedWidget( ), cursor::#__cursor_Drag )
         ProcedureReturn mouse( )\drop
      EndProcedure
      
      ;-
      ;-\\  ANCHORs
      ;-
      Macro a_draw( _this_ )
         ; Debug "a_draw "+_this_\class +" "+ _this_\anchors +" "+ _this_\anchors\mode
         If Not _this_\anchors\mode & #__a_nodraw = #__a_nodraw; 
            draw_mode_alpha_( #PB_2DDrawing_Outlined )
            
            ; draw a_object frame 
            If _this_\anchors
               If _this_\anchors\id[0] 
                  draw_box_( _this_\anchors\id[0]\x, _this_\anchors\id[0]\y, _this_\anchors\id[0]\width, _this_\anchors\id[0]\height , a_anchors( )\framecolor[Bool(a_index( )) * _this_\anchors\state] ) 
               EndIf
               
               ; draw lines
               If _this_ = a_focused( )
                  ;\\ left line
                  If a_anchors( )\line[#__a_line_left]
                     If Not ( _this_\anchors\id[#__a_moved] And a_anchors( )\line[#__a_line_left]\y = _this_\frame_y( ) And a_anchors( )\line[#__a_line_left]\height = _this_\frame_height( ))
                        draw_box_( a_anchors( )\line[#__a_line_left]\x, a_anchors( )\line[#__a_line_left]\y, a_anchors( )\line[#__a_line_left]\width, a_anchors( )\line[#__a_line_left]\height , a_anchors( )\framecolor[1] )
                     EndIf
                  EndIf
                  
                  ;\\ top line
                  If a_anchors( )\line[#__a_line_top]
                     If Not ( _this_\anchors\id[#__a_moved] And a_anchors( )\line[#__a_line_top]\y = _this_\frame_y( ) And a_anchors( )\line[#__a_line_top]\height = _this_\frame_height( ))
                        draw_box_( a_anchors( )\line[#__a_line_top]\x, a_anchors( )\line[#__a_line_top]\y, a_anchors( )\line[#__a_line_top]\width, a_anchors( )\line[#__a_line_top]\height , a_anchors( )\framecolor[2] )
                     EndIf
                  EndIf
                  
                  ;\\ right line
                  If a_anchors( )\line[#__a_line_right]
                     If Not ( _this_\anchors\id[#__a_moved] And a_anchors( )\line[#__a_line_right]\x = _this_\frame_x( ) And a_anchors( )\line[#__a_line_right]\width = _this_\frame_width( ))
                        draw_box_( a_anchors( )\line[#__a_line_right]\x, a_anchors( )\line[#__a_line_right]\y, a_anchors( )\line[#__a_line_right]\width, a_anchors( )\line[#__a_line_right]\height , a_anchors( )\framecolor[1] )
                     EndIf
                  EndIf
                  
                  ;\\ bottom line
                  If a_anchors( )\line[#__a_line_bottom]
                     If Not ( _this_\anchors\id[#__a_moved] And a_anchors( )\line[#__a_line_bottom]\x = _this_\frame_x( ) And a_anchors( )\line[#__a_line_bottom]\width = _this_\frame_width( ))
                        draw_box_( a_anchors( )\line[#__a_line_bottom]\x, a_anchors( )\line[#__a_line_bottom]\y, a_anchors( )\line[#__a_line_bottom]\width, a_anchors( )\line[#__a_line_bottom]\height , a_anchors( )\framecolor[2] )
                     EndIf
                  EndIf
               EndIf
               
               draw_mode_alpha_( #PB_2DDrawing_Default )
               
               ;\\ draw background anchors
               If _this_\anchors\id[#__a_left] :draw_box_( _this_\anchors\id[#__a_left]\x, _this_\anchors\id[#__a_left]\y, _this_\anchors\id[#__a_left]\width, _this_\anchors\id[#__a_left]\height ,a_anchors( )\backcolor[Bool(a_index( ) = #__a_left)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_top] :draw_box_( _this_\anchors\id[#__a_top]\x, _this_\anchors\id[#__a_top]\y, _this_\anchors\id[#__a_top]\width, _this_\anchors\id[#__a_top]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_top)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_right] :draw_box_( _this_\anchors\id[#__a_right]\x, _this_\anchors\id[#__a_right]\y, _this_\anchors\id[#__a_right]\width, _this_\anchors\id[#__a_right]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_right)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_bottom] :draw_box_( _this_\anchors\id[#__a_bottom]\x, _this_\anchors\id[#__a_bottom]\y, _this_\anchors\id[#__a_bottom]\width, _this_\anchors\id[#__a_bottom]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_bottom)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_left_top] :draw_box_( _this_\anchors\id[#__a_left_top]\x, _this_\anchors\id[#__a_left_top]\y, _this_\anchors\id[#__a_left_top]\width, _this_\anchors\id[#__a_left_top]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_left_top)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_right_top] :draw_box_( _this_\anchors\id[#__a_right_top]\x, _this_\anchors\id[#__a_right_top]\y, _this_\anchors\id[#__a_right_top]\width, _this_\anchors\id[#__a_right_top]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_right_top)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_right_bottom] :draw_box_( _this_\anchors\id[#__a_right_bottom]\x, _this_\anchors\id[#__a_right_bottom]\y, _this_\anchors\id[#__a_right_bottom]\width, _this_\anchors\id[#__a_right_bottom]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_right_bottom)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_left_bottom] :draw_box_( _this_\anchors\id[#__a_left_bottom]\x, _this_\anchors\id[#__a_left_bottom]\y, _this_\anchors\id[#__a_left_bottom]\width, _this_\anchors\id[#__a_left_bottom]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_left_bottom)*_this_\anchors\state] ) : EndIf
               
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               
               ;\\ draw frame anchors
               If _this_\anchors\id[#__a_left] :draw_box_( _this_\anchors\id[#__a_left]\x, _this_\anchors\id[#__a_left]\y, _this_\anchors\id[#__a_left]\width, _this_\anchors\id[#__a_left]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_left)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_top] :draw_box_( _this_\anchors\id[#__a_top]\x, _this_\anchors\id[#__a_top]\y, _this_\anchors\id[#__a_top]\width, _this_\anchors\id[#__a_top]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_top)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_right] :draw_box_( _this_\anchors\id[#__a_right]\x, _this_\anchors\id[#__a_right]\y, _this_\anchors\id[#__a_right]\width, _this_\anchors\id[#__a_right]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_right)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_bottom] :draw_box_( _this_\anchors\id[#__a_bottom]\x, _this_\anchors\id[#__a_bottom]\y, _this_\anchors\id[#__a_bottom]\width, _this_\anchors\id[#__a_bottom]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_bottom)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_left_top] :draw_box_( _this_\anchors\id[#__a_left_top]\x, _this_\anchors\id[#__a_left_top]\y, _this_\anchors\id[#__a_left_top]\width, _this_\anchors\id[#__a_left_top]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_left_top)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_right_top] :draw_box_( _this_\anchors\id[#__a_right_top]\x, _this_\anchors\id[#__a_right_top]\y, _this_\anchors\id[#__a_right_top]\width, _this_\anchors\id[#__a_right_top]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_right_top)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_right_bottom] :draw_box_( _this_\anchors\id[#__a_right_bottom]\x, _this_\anchors\id[#__a_right_bottom]\y, _this_\anchors\id[#__a_right_bottom]\width, _this_\anchors\id[#__a_right_bottom]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_right_bottom)*_this_\anchors\state] ) : EndIf
               If _this_\anchors\id[#__a_left_bottom] :draw_box_( _this_\anchors\id[#__a_left_bottom]\x, _this_\anchors\id[#__a_left_bottom]\y, _this_\anchors\id[#__a_left_bottom]\width, _this_\anchors\id[#__a_left_bottom]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_left_bottom)*_this_\anchors\state] ) : EndIf
               ;
               If _this_\anchors\id[#__a_moved] And ( _this_\anchors\id[#__a_moved]\width <> _this_\anchors\id[0]\width And _this_\anchors\id[#__a_moved]\height <> _this_\anchors\id[0]\height )
                  draw_box_( _this_\anchors\id[#__a_moved]\x, _this_\anchors\id[#__a_moved]\y, _this_\anchors\id[#__a_moved]\width, _this_\anchors\id[#__a_moved]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_moved)*_this_\anchors\state] )
               EndIf
            EndIf
         EndIf
      EndMacro
      
      Macro a_size( _address_, _size_, _mode_=0 )
         If _address_[#__a_left] ; left
            _address_[#__a_left]\width  = _size_
            _address_[#__a_left]\height = _size_
         EndIf
         If _address_[#__a_top] ; top
            _address_[#__a_top]\width  = _size_
            _address_[#__a_top]\height = _size_
         EndIf
         If _address_[#__a_right] ; right
            _address_[#__a_right]\width  = _size_
            _address_[#__a_right]\height = _size_
         EndIf
         If _address_[#__a_bottom] ; bottom
            _address_[#__a_bottom]\width  = _size_
            _address_[#__a_bottom]\height = _size_
         EndIf
         
         If _address_ <> mouse( )\selector
            If _mode_ & #__a_zoom = #__a_zoom
               If _address_[#__a_left_top] ; left&top
                  _address_[#__a_left_top]\width  = _size_ * 2
                  _address_[#__a_left_top]\height = _size_ * 2
               EndIf
               If _address_[#__a_right_top] ; right&top
                  _address_[#__a_right_top]\width  = _size_ * 2
                  _address_[#__a_right_top]\height = _size_ * 2
               EndIf
               If _address_[#__a_right_bottom] ; right&bottom
                  _address_[#__a_right_bottom]\width  = _size_ * 2
                  _address_[#__a_right_bottom]\height = _size_ * 2
               EndIf
               If _address_[#__a_left_bottom] ; left&bottom
                  _address_[#__a_left_bottom]\width  = _size_ * 2
                  _address_[#__a_left_bottom]\height = _size_ * 2
               EndIf
            Else
               If _address_[#__a_left_top] ; left&top
                  _address_[#__a_left_top]\width  = _size_
                  _address_[#__a_left_top]\height = _size_
               EndIf
               If _address_[#__a_right_top] ; right&top
                  _address_[#__a_right_top]\width  = _size_
                  _address_[#__a_right_top]\height = _size_
               EndIf
               If _address_[#__a_right_bottom] ; right&bottom
                  _address_[#__a_right_bottom]\width  = _size_
                  _address_[#__a_right_bottom]\height = _size_
               EndIf
               If _address_[#__a_left_bottom] ; left&bottom
                  _address_[#__a_left_bottom]\width  = _size_
                  _address_[#__a_left_bottom]\height = _size_
               EndIf
            EndIf
         EndIf
      EndMacro
      
      Macro a_move( _this_, _address_, _x_, _y_, _width_, _height_ )
         If _address_ And _this_ ; frame
            _address_\x      = _x_ + _this_\anchors\pos
            _address_\y      = _y_ + _this_\anchors\pos
            _address_\width  = _width_ - _this_\anchors\pos * 2
            _address_\height = _height_ - _this_\anchors\pos * 2
         EndIf
         
         If _address_ <> mouse( )\selector
            If _this_
               If _address_[#__a_moved]         ; moved
                                                ;                   If _this_\anchors\mode & #__a_zoom ; _this_\type = #__type_window
                                                ;                      _address_[#__a_moved]\x      = _x_ + _address_[#__a_left]\width
                                                ;                      _address_[#__a_moved]\y      = _y_ + _address_[#__a_top]\height
                                                ;                      _address_[#__a_moved]\width  = _width_ - ( _address_[#__a_left]\width + _address_[#__a_right]\width )
                                                ;                      _address_[#__a_moved]\height = ( _this_\fs + _this_\fs[2] + _this_\fs[4] ) - _address_[#__a_top]\height / 2
                                                ;                   Else
                  If _this_\container
                     _address_[#__a_moved]\x      = _x_
                     _address_[#__a_moved]\y      = _y_
                     _address_[#__a_moved]\width  = _this_\anchors\size * 2
                     _address_[#__a_moved]\height = _this_\anchors\size * 2
                  EndIf
                  ;                   EndIf
               EndIf
            EndIf
            
            If _this_ And _this_\anchors\mode & #__a_zoom = #__a_zoom
               If _address_[#__a_left] ; left
                  _address_[#__a_left]\x      = _x_
                  _address_[#__a_left]\y      = _y_ + _address_[#__a_left_top]\height
                  _address_[#__a_left]\height = _this_\height - ( _address_[#__a_left_top]\height + _address_[#__a_left_bottom]\height )
               EndIf
               If _address_[#__a_top] ; top
                  _address_[#__a_top]\x     = _x_ + _address_[#__a_left_top]\width
                  _address_[#__a_top]\y     = _y_
                  _address_[#__a_top]\width = _this_\width - ( _address_[#__a_left_top]\width + _address_[#__a_right_top]\width )
               EndIf
               If _address_[#__a_right] ; right
                  _address_[#__a_right]\x      = _x_ + _width_ - _address_[#__a_right]\width
                  _address_[#__a_right]\y      = _y_ + _address_[#__a_right_top]\height
                  _address_[#__a_right]\height = _this_\height - ( _address_[#__a_right_top]\height + _address_[#__a_right_bottom]\height )
               EndIf
               If _address_[#__a_bottom] ; bottom
                  _address_[#__a_bottom]\x     = _x_ + _address_[#__a_left_bottom]\width
                  _address_[#__a_bottom]\y     = _y_ + _height_ - _address_[#__a_bottom]\height
                  _address_[#__a_bottom]\width = _this_\width - ( _address_[#__a_left_bottom]\width + _address_[#__a_right_bottom]\width )
               EndIf
            Else
               If _address_[#__a_left] ; left
                  _address_[#__a_left]\x = _x_
                  _address_[#__a_left]\y = _y_ + ( _height_ - _address_[#__a_left]\height ) / 2
               EndIf
               If _address_[#__a_top] ; top
                  _address_[#__a_top]\x = _x_ + ( _width_ - _address_[#__a_top]\width ) / 2
                  _address_[#__a_top]\y = _y_
               EndIf
               If _address_[#__a_right] ; right
                  _address_[#__a_right]\x = _x_ + _width_ - _address_[#__a_right]\width
                  _address_[#__a_right]\y = _y_ + ( _height_ - _address_[#__a_right]\height ) / 2
               EndIf
               If _address_[#__a_bottom] ; bottom
                  _address_[#__a_bottom]\x = _x_ + ( _width_ - _address_[#__a_bottom]\width ) / 2
                  _address_[#__a_bottom]\y = _y_ + _height_ - _address_[#__a_bottom]\height
               EndIf
            EndIf
            
            If _address_[#__a_left_top] ; left&top
               _address_[#__a_left_top]\x = _x_
               _address_[#__a_left_top]\y = _y_
            EndIf
            If _address_[#__a_right_top] ; right&top
               _address_[#__a_right_top]\x = _x_ + _width_ - _address_[#__a_right_top]\width
               _address_[#__a_right_top]\y = _y_
            EndIf
            If _address_[#__a_left_bottom] ; left&bottom
               _address_[#__a_left_bottom]\x = _x_
               _address_[#__a_left_bottom]\y = _y_ + _height_ - _address_[#__a_left_bottom]\height
            EndIf
            If _address_[#__a_right_bottom] ; right&bottom
               _address_[#__a_right_bottom]\x = _x_ + _width_ - _address_[#__a_right_bottom]\width
               _address_[#__a_right_bottom]\y = _y_ + _height_ - _address_[#__a_right_bottom]\height
            EndIf
         EndIf
      EndMacro
      
      Macro a_line( _this_ )
         If a_anchors( ) And _this_\parent And 
            a_anchors( )\line[#__a_line_left] And
            a_anchors( )\line[#__a_line_right] And
            a_anchors( )\line[#__a_line_top] And
            a_anchors( )\line[#__a_line_bottom]
            
            ;\\ line default size&pos
            a_anchors( )\line[#__a_line_left]\width  = 1
            a_anchors( )\line[#__a_line_left]\height = 0 ; _this_\frame_height( )
            a_anchors( )\line[#__a_line_left]\x      = _this_\frame_x( )
            a_anchors( )\line[#__a_line_left]\y      = _this_\frame_y( )
            
            a_anchors( )\line[#__a_line_top]\height = 1
            a_anchors( )\line[#__a_line_top]\width  = 0 ; _this_\frame_width( )
            a_anchors( )\line[#__a_line_top]\x      = _this_\frame_x( )
            a_anchors( )\line[#__a_line_top]\y      = _this_\frame_y( )
            
            a_anchors( )\line[#__a_line_right]\width  = 1
            a_anchors( )\line[#__a_line_right]\height = 0 ; _this_\frame_height( )
            a_anchors( )\line[#__a_line_right]\x      = ( _this_\frame_x( ) + _this_\frame_width( ) ) - a_anchors( )\line[#__a_line_right]\width
            a_anchors( )\line[#__a_line_right]\y      = _this_\frame_y( )
            
            a_anchors( )\line[#__a_line_bottom]\height = 1
            a_anchors( )\line[#__a_line_bottom]\width  = 0 ; _this_\frame_width( )
            a_anchors( )\line[#__a_line_bottom]\x      = _this_\frame_x( )
            a_anchors( )\line[#__a_line_bottom]\y      = ( _this_\frame_y( ) + _this_\frame_height( ) ) - a_anchors( )\line[#__a_line_bottom]\height
            
            ;\\
            If StartEnum( _this_\parent )
               ;
               If widgets( )\anchors And Not widgets( )\hide And widgets( ) <> _this_ And widgets( )\level = _this_\level
                  ;\\ left-line
                  If _this_\frame_x( ) = widgets( )\frame_x( )
                     If a_anchors( )\line[#__a_line_left]\y > widgets( )\frame_y( )
                        a_anchors( )\line[#__a_line_left]\y = widgets( )\frame_y( )
                     EndIf
                     If _this_\frame_y( ) + _this_\frame_height( ) < widgets( )\frame_y( ) + widgets( )\frame_height( )
                        If a_anchors( )\line[#__a_line_left]\height < widgets( )\frame_y( ) + widgets( )\frame_height( ) 
                           a_anchors( )\line[#__a_line_left]\height = widgets( )\frame_y( ) + widgets( )\frame_height( )
                        EndIf
                     Else
                        If a_anchors( )\line[#__a_line_left]\height < _this_\frame_y( ) + _this_\frame_height( ) 
                           a_anchors( )\line[#__a_line_left]\height = _this_\frame_y( ) + _this_\frame_height( )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;\\ top-line
                  If _this_\frame_y( ) = widgets( )\frame_y( )
                     If a_anchors( )\line[#__a_line_top]\x > widgets( )\frame_x( )
                        a_anchors( )\line[#__a_line_top]\x = widgets( )\frame_x( )
                     EndIf
                     If _this_\frame_x( ) + _this_\frame_width( ) <= widgets( )\frame_x( ) + widgets( )\frame_width( ) 
                        If a_anchors( )\line[#__a_line_top]\width < widgets( )\frame_x( ) + widgets( )\frame_width( ) 
                           a_anchors( )\line[#__a_line_top]\width = widgets( )\frame_x( ) + widgets( )\frame_width( )
                        EndIf
                     Else
                        If a_anchors( )\line[#__a_line_top]\width < _this_\frame_x( ) + _this_\frame_width( ) 
                           a_anchors( )\line[#__a_line_top]\width = _this_\frame_x( ) + _this_\frame_width( )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;\\ right-line
                  If _this_\frame_x( ) + _this_\frame_width( ) = widgets( )\frame_x( ) + widgets( )\frame_width( )
                     If a_anchors( )\line[#__a_line_right]\y > widgets( )\frame_y( )
                        a_anchors( )\line[#__a_line_right]\y = widgets( )\frame_y( )
                     EndIf
                     If _this_\frame_y( ) + _this_\frame_height( ) < widgets( )\frame_y( ) + widgets( )\frame_height( )
                        If a_anchors( )\line[#__a_line_right]\height < widgets( )\frame_y( ) + widgets( )\frame_height( ) 
                           a_anchors( )\line[#__a_line_right]\height = widgets( )\frame_y( ) + widgets( )\frame_height( )
                        EndIf
                     Else
                        If a_anchors( )\line[#__a_line_right]\height < _this_\frame_y( ) + _this_\frame_height( ) 
                           a_anchors( )\line[#__a_line_right]\height = _this_\frame_y( ) + _this_\frame_height( )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;\\ bottom-line
                  If _this_\frame_y( ) + _this_\frame_height( ) = widgets( )\frame_y( ) + widgets( )\frame_height( )
                     If a_anchors( )\line[#__a_line_bottom]\x > widgets( )\frame_x( )
                        a_anchors( )\line[#__a_line_bottom]\x = widgets( )\frame_x( )
                     EndIf
                     If _this_\frame_x( ) + _this_\frame_width( ) < widgets( )\frame_x( ) + widgets( )\frame_width( )
                        If a_anchors( )\line[#__a_line_bottom]\width < widgets( )\frame_x( ) + widgets( )\frame_width( ) 
                           a_anchors( )\line[#__a_line_bottom]\width = widgets( )\frame_x( ) + widgets( )\frame_width( )
                        EndIf
                     Else
                        If a_anchors( )\line[#__a_line_bottom]\width < _this_\frame_x( ) + _this_\frame_width( ) 
                           a_anchors( )\line[#__a_line_bottom]\width = _this_\frame_x( ) + _this_\frame_width( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               ;
               StopEnum( )
               ;
               If a_anchors( )\line[#__a_line_left]\height > a_anchors( )\line[#__a_line_left]\y
                  a_anchors( )\line[#__a_line_left]\height - a_anchors( )\line[#__a_line_left]\y
               EndIf
               If a_anchors( )\line[#__a_line_top]\width > a_anchors( )\line[#__a_line_top]\x
                  a_anchors( )\line[#__a_line_top]\width - a_anchors( )\line[#__a_line_top]\x
               EndIf
               If a_anchors( )\line[#__a_line_right]\height > a_anchors( )\line[#__a_line_right]\y
                  a_anchors( )\line[#__a_line_right]\height - a_anchors( )\line[#__a_line_right]\y
               EndIf
               If a_anchors( )\line[#__a_line_bottom]\width > a_anchors( )\line[#__a_line_bottom]\x
                  a_anchors( )\line[#__a_line_bottom]\width - a_anchors( )\line[#__a_line_bottom]\x
               EndIf
            EndIf
         EndIf
         
      EndMacro
      
      Procedure a_grid_image( Steps = 5, line = 0, Color = 0, startx = 0, starty = 0 )
         If mouse()\steps < 2
            ProcedureReturn 0
         EndIf
         
            ;\\
         ;Steps = DPIScaled(Steps)
         Protected hDC, X, Y
         ExamineDesktops( )
         Protected Width = DesktopWidth( 0 )
         Protected Height = DesktopHeight( 0 )
         hDC = CreateImage( #PB_Any, Width, Height, 32, #PB_Image_Transparent )
         ;
         ;\\
         If StartDrawing( ImageOutput( hDC ))
            draw_mode_( #PB_2DDrawing_AllChannels )
            If Color = 0 : Color = $ff808080 : EndIf
            ;
            For X = startx To Width - 1
               For Y = starty To Height - 1
                  ;
                  If line
                     Line( X, 0, 1, Height, Color )
                     Line( 0, Y, Width, 1, Color )
                  Else
                     Box(X, Y, DPIScaled(1), DPIScaled(1), Color )
                  EndIf
                  ;
                  Y + Steps
               Next
               X + Steps
            Next
            ;
            StopDrawing( )
         EndIf
         
         ProcedureReturn hDC
      EndProcedure
      
      Procedure.i a_init( *this._s_WIDGET, grid_size.a = 7, grid_type.b = 0 )
         Protected i
         ;
         If Not *this\anchors
            *this\anchors.allocate( ANCHORS )
         EndIf
         ;
         a_main( ) = *this
         ;
         a_anchors( )\grid_type = grid_type
         If grid_size > 1
            mouse( )\steps = DPIScaled(grid_size)
         Else
            mouse( )\steps = 1
         EndIf
         ;
         If IsImage( a_anchors( )\grid_image )
            FreeImage( a_anchors( )\grid_image )
         EndIf
         ;
         a_anchors( )\grid_image = a_grid_image( mouse( )\steps - 1, a_anchors( )\grid_type, $FF000000, 0,0);*this\fs, *this\fs )
                                                                                                            ;
         a_anchors( )\framecolor[#__s_0] = $ff000000
         a_anchors( )\framecolor[#__s_1] = $ffFF0000
         a_anchors( )\framecolor[#__s_2] = $ff0000FF
         
         a_anchors( )\backcolor[#__s_0] = $ffFFFFFF
         a_anchors( )\backcolor[#__s_1] = $80FF0000
         a_anchors( )\backcolor[#__s_2] = $800000FF
         ;
         
      EndProcedure
      
      Procedure a_delta( *this._s_WIDGET )
         ;\\
         If a_index( ) And
            *this And
            *this\anchors\id[a_index( )]
            ;
            ;\\ set current transformer index state
            *this\anchors\state = #__s_2
            
            ;\\ set delta pos
            ;\\ not multi group transformer
            ;If Not *this\anchors\multi
            ;\\
            If *this\parent
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 2 )
                  mouse( )\delta\x + *this\parent\inner_x( )
               EndIf
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 1 )
                  mouse( )\delta\y + *this\parent\inner_y( )
               EndIf
               
               ;\\
               If Not is_integral_( *this )
                  Select a_index( )
                     Case #__a_left, #__a_left_top, #__a_left_bottom, #__a_moved ; left
                        mouse( )\delta\x + *this\parent\scroll_x( )
                  EndSelect
                  
                  Select a_index( )
                     Case #__a_top, #__a_left_top, #__a_right_top, #__a_moved ; top
                        mouse( )\delta\y + *this\parent\scroll_y( )
                  EndSelect
               EndIf
            EndIf
            
            ;\\
            mouse( )\delta\x - *this\anchors\id[a_index( )]\x
            mouse( )\delta\y - *this\anchors\id[a_index( )]\y
            
            ;\\ window flag - sizeGadgets
            If a_index( ) = #__a_moved
               mouse( )\delta\x + ( *this\anchors\id[a_index( )]\x - *this\x )
               mouse( )\delta\y + ( *this\anchors\id[a_index( )]\y - *this\y )
            EndIf
            
            ;\\
            Select a_index( )
               Case #__a_left_top, #__a_moved
                  mouse( )\delta\x - *this\anchors\pos
                  mouse( )\delta\y - *this\anchors\pos
               Case #__a_left
                  mouse( )\delta\x - *this\anchors\pos
               Case #__a_top
                  mouse( )\delta\y - *this\anchors\pos
               Case #__a_right, #__a_right_top
                  mouse( )\delta\x + *this\anchors\pos - *this\anchors\size
                  mouse( )\delta\y - *this\anchors\pos
               Case #__a_bottom, #__a_left_bottom
                  mouse( )\delta\y + *this\anchors\pos - *this\anchors\size
                  mouse( )\delta\x - *this\anchors\pos
               Case #__a_right_bottom
                  mouse( )\delta\x + *this\anchors\pos - *this\anchors\size
                  mouse( )\delta\y + *this\anchors\pos - *this\anchors\size
            EndSelect
            
            ;\\
            If *this\type = #__type_window
               Select a_index( )
                  Case #__a_right, #__a_right_top
                     mouse( )\delta\x + *this\fs * 2 + *this\fs[1] + *this\fs[3]
                     
                  Case #__a_bottom, #__a_left_bottom
                     mouse( )\delta\y + *this\fs * 2 + *this\fs[2] + *this\fs[4]
                     
                  Case #__a_right_bottom
                     mouse( )\delta\x + *this\fs * 2 + *this\fs[1] + *this\fs[3]
                     mouse( )\delta\y + *this\fs * 2 + *this\fs[2] + *this\fs[4]
                     
               EndSelect
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure a_enter( *this._s_WIDGET, *data )
         Protected i, result, a_index
         ;
         ; atpoint
         If is_atpoint_( *this, mouse( )\x, mouse( )\y, [#__c_draw] )
            For i = 1 To #__a_moved  
               If *this\anchors And 
                  *this\anchors\id[i] And
                  is_atpoint_( *this\anchors\id[i], mouse( )\x, mouse( )\y )
                  ;
                  a_index = i
                  Break
               EndIf
            Next
         EndIf
         ;
         i = 0
         ;
         If a_focused( ) And a_focused( )\anchors
            For i = 1 To #__a_moved  
               If a_focused( )\anchors\id[i] And
                  is_atpoint_( a_focused( )\anchors\id[i], mouse( )\x, mouse( )\y )
                  ;
                  *this   = a_focused( )
                  a_index = i
                  Break
               EndIf
            Next
         EndIf
         ;
         i = 0
         ;
         If a_entered( ) And 
            a_entered( )\anchors 
            ;
            ; reset last entered anchors index state
            If a_index( ) <> a_index
               If a_entered( )\anchors\state <> #__s_0
                  a_entered( )\anchors\state = #__s_0
                  ;
                  ; reset cursor
                  If a_entered( )\cursor[1] <> a_entered( )\cursor
                     ; leave from anchor 
                     a_entered( )\cursor[1] = a_entered( )\cursor
                  EndIf
                  ;
                  a_entered( )\root\repaint = #True
               EndIf
            EndIf
            ;
            If a_index( ) 
               If a_entered( )\anchors\id[a_index( )] 
                  If Not is_atpoint_( a_entered( )\anchors\id[a_index( )], mouse( )\x, mouse( )\y )
                     ;
                     If MouseEnter( a_entered( ), - 1 )
                        If ( is_atpoint_( a_entered( ), mouse( )\x, mouse( )\y, [#__c_frame] ) And
                             is_atpoint_( a_entered( ), mouse( )\x, mouse( )\y, [#__c_draw] ))
                           ;
                           If is_atpoint_( a_entered( ), mouse( )\x, mouse( )\y, [#__c_inner] )
                              MouseEnter( a_entered( ) )
                           Else
                              a_entered( )\enter = 1
                           EndIf
                           ;
                           DoEvents( a_entered( ), #__event_MouseEnter, #PB_All, 111111111111 )
                        Else
                           a_entered( )\enter = 0
                        EndIf   
                     EndIf
                     
                     a_index( ) = 0
                  EndIf
               EndIf
            EndIf
         EndIf
         ;
         If a_entered( ) <> *this
            If a_entered( )
               If MouseEnter( a_entered( ), - 1 )
                  a_entered( )\enter = 0
               EndIf
            EndIf
            a_entered( ) = *this
         EndIf
         ;
         ; set new entered anchors index state
         If a_index
            a_index( ) = a_index
            ; 
            If *this\enter = 0
               MouseEnter( *this, - 1 )
            ElseIf *this\enter > 0
               MouseEnter( *this, - 1 )
               DoEvents( *this, #__event_MouseLeave, #PB_All, -111111111111  )
            EndIf
            ;
            If *this\anchors\id[a_index]  
               If *this\anchors\state = #__s_0
                  *this\anchors\state = #__s_1
                  ChangeCurrentCursor( *this, a_anchors( )\cursor[a_index] )
                  *this\root\repaint = #True
                  *this\root\contex = 0
               EndIf
            EndIf
            ; 
            result = *this
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure a_free( *this._s_WIDGET )
         a_set( *this\parent )
         FreeStructure( *this\anchors )
         *this\anchors = #Null
      EndProcedure
      
      Procedure a_remove( *this._s_WIDGET )
         Protected a_index
         If *this\container <> 3
            *this\resize\send = #False
         EndIf
         For a_index = 0 To #__a_moved
            If *this\anchors And
               *this\anchors\id[a_index]
               FreeStructure( *this\anchors\id[a_index] )
               *this\anchors\id[a_index] = #Null
            EndIf
         Next a_index
      EndProcedure
      
      Procedure a_add( *this._s_WIDGET )
         Structure _s_CURSORDATA
            cursor.i[#__a_moved+1]
         EndStructure
         
         Protected a_index
         Protected *CURSORDATA._s_CURSORDATA = ?CURSORDATA
         
         If Not a_index( )
            If *this\container <> 3
               *this\resize\send = #True
            EndIf
            ; Debug "a_show_add "+*this\class
            For a_index = 0 To #__a_moved
               If *this\anchors\mode & #__a_height = 0 And
                  *this\anchors\mode & #__a_width = 0
                  If a_index = #__a_left Or
                     a_index = #__a_top Or
                     a_index = #__a_right Or
                     a_index = #__a_bottom
                     Continue
                  EndIf
               Else
                  If *this\anchors\mode & #__a_height = 0
                     If a_index = #__a_top Or
                        a_index = #__a_bottom
                        Continue
                     EndIf
                  EndIf
                  If *this\anchors\mode & #__a_width = 0
                     If a_index = #__a_left Or
                        a_index = #__a_right
                        Continue
                     EndIf
                  EndIf
               EndIf
               ;
               If *this\anchors\mode & #__a_corner = 0
                  If a_index = #__a_left_top Or
                     a_index = #__a_right_top Or
                     a_index = #__a_right_bottom Or
                     a_index = #__a_left_bottom
                     Continue
                  EndIf
               EndIf
               ;
               If *this\anchors\mode & #__a_position = 0
                  If a_index = #__a_moved
                     Continue
                  EndIf
               EndIf
               ;
               If Not *this\anchors\id[a_index]
                  *this\anchors\id.allocate( COORDINATE, [a_index] )
               EndIf
               ;
               a_anchors( )\cursor[a_index] = *CURSORDATA\cursor[a_index]
            Next a_index
         EndIf
         
         DataSection
            CURSORDATA:
            Data.i cursor::#__cursor_Default          ; 0
            Data.i cursor::#__cursor_Left             ; 1=#__a_left
            Data.i cursor::#__cursor_Up               ; 2=#__a_top
            Data.i cursor::#__cursor_Right            ; 3=#__a_right
            Data.i cursor::#__cursor_Down             ; 4=#__a_bottom
            Data.i cursor::#__cursor_LeftUp           ; 5=#__a_left_top
            Data.i cursor::#__cursor_RightUp          ; 6=#__a_right_top
            Data.i cursor::#__cursor_RightDown        ; 7=#__a_right_bottom
            Data.i cursor::#__cursor_LeftDown         ; 8=#__a_left_bottom
            Data.i cursor::#__cursor_Arrows           ; 9=#__a_moved
         EndDataSection
      EndProcedure
      
      Procedure a_show( *this._s_WIDGET )
         If a_focused( ) <> *this And 
            a_entered( ) <> *this
            ;
            If *this\anchors And *this\anchors\mode
               If test_anchors
                  Debug " a_show "+*this\class
               EndIf
               ;
               a_add( *this )
               ;
               a_size( *this\anchors\id,
                       *this\anchors\size, 
                       *this\anchors\mode )
               
               ;
               a_move( *this,
                       *this\anchors\id,
                       *this\screen_x( ),
                       *this\screen_y( ),
                       *this\screen_width( ),
                       *this\screen_height( ) )
               ;
               a_enter( *this, - 1 )
               ;
               ProcedureReturn *this
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i a_set( *this._s_WIDGET, mode.i = #PB_Default, size.l = #PB_Default, position.l = #PB_Default )
         Protected result
         
         If *this
            If *this\anchors
               If mode >= 0
                  *this\anchors\mode = mode
               EndIf
               ;
               If size >= 0
                  size = DPIScaled(size)
                  If *this\anchors\size <> size
                     *this\anchors\size = size
                     *this\bs - *this\anchors\pos
                     *this\anchors\pos = size / 2
                     *this\bs + *this\anchors\pos
                     a_size( *this\anchors\id, *this\anchors\size, *this\anchors\mode )
                     Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                  EndIf
               EndIf
               ;
               If position >= 0
                  position = DPIScaled(position)
                  If *this\anchors\pos <> position
                     *this\bs - *this\anchors\pos
                     *this\anchors\pos = position
                     *this\bs + *this\anchors\pos 
                     a_size( *this\anchors\id, *this\anchors\size, *this\anchors\mode )
                     Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                  EndIf
               EndIf
               ;
               ;\\
               If a_anchors( ) 
                  If a_focused( ) <> *this
                     If a_focused( )
                        a_remove( a_focused( ) )
                        a_focused( )\root\repaint = #True
                     EndIf
                     ; Debug "a_set focus " + *this\class 
                     ;
                     If a_anchors( )\grid_image
                        If a_focused( ) And a_focused( )\parent And a_focused( )\parent <> *this\parent 
                           SetBackgroundImage( a_focused( )\parent, 0 )
                        EndIf  
                        If *this\parent
                           If Not ( a_focused( ) And a_focused( )\parent = *this\parent )
                              SetBackgroundImage( *this\parent, a_anchors( )\grid_image )
                           EndIf
                        EndIf
                     EndIf
                     ;
                     ;
                     If a_show( *this )
                        *this\root\repaint = #True
                     EndIf
                     a_focused( ) = *this
                     a_line( *this )
                     ;
                     result = *this
                  EndIf
               EndIf
            EndIf
         EndIf
         ;
         ProcedureReturn result
      EndProcedure
      
      Procedure a_create( *this._s_WIDGET, mode )
         Protected a_index
         ;
         If Not *this\anchors
            *this\anchors.allocate( ANCHORS )
         EndIf 
         ;
         If *this\anchors
            *this\anchors\mode = mode 
            *this\anchors\size = DPIScaled(#__a_anchors_size)
            *this\anchors\pos = *this\anchors\size / 2
            ;
            a_add( *this )
         EndIf 
         ;
         ProcedureReturn *this\anchors
      EndProcedure
      
      Procedure a_update( *parent._s_WIDGET )
         If *parent\anchors ;= 1 ; Not ListSize( a_group( ))
            
            ; check transform group
            If StartEnum( *parent )
               If is_intersect_( widgets( ), mouse( )\selector, [#__c_frame] )
                  
                  ;             ;             widgets( )\anchors = 2
                  ;             ;             widgets( )\root\anchors =- 1
                  ;             ;             widgets( )\parent\anchors =- 1
                  ;             a_set_state( widgets( ), 2 )
                  ;             a_set_state( widgets( )\root, - 1 )
                  ;             a_set_state( widgets( )\parent, - 1 )
                  
               EndIf
               StopEnum( )
            EndIf
            
            
            ; reset
            mouse( )\selector\x      = 0
            mouse( )\selector\y      = 0
            mouse( )\selector\width  = 0
            mouse( )\selector\height = 0
            ;ClearList( a_group( ))
            
            ; init group pos
            ForEach widgets( )
               If widgets( )\anchors = 2
                  If mouse( )\selector\x = 0 Or
                     mouse( )\selector\x > widgets( )\frame_x( )
                     mouse( )\selector\x = widgets( )\frame_x( )
                  EndIf
                  If mouse( )\selector\y = 0 Or
                     mouse( )\selector\y > widgets( )\frame_y( )
                     mouse( )\selector\y = widgets( )\frame_y( )
                  EndIf
               EndIf
            Next
            
            ; init group size
            ForEach widgets( )
               If widgets( )\anchors = 2
                  If mouse( )\selector\x + mouse( )\selector\width < widgets( )\frame_x( ) + widgets( )\frame_width( )
                     mouse( )\selector\width = ( widgets( )\frame_x( ) - mouse( )\selector\x ) + widgets( )\frame_width( )
                  EndIf
                  If mouse( )\selector\y + mouse( )\selector\height < widgets( )\frame_y( ) + widgets( )\frame_height( )
                     mouse( )\selector\height = ( widgets( )\frame_y( ) - mouse( )\selector\y ) + widgets( )\frame_height( )
                  EndIf
               EndIf
            Next
            
            ; init group list ( & delta size )
            ForEach widgets( )
               If widgets( )\anchors = 2
                  If AddElement( a_group( ))
                     mouse( )\selector\group.allocate( A_GROUP, ( ))
                     ;a_group( )\widget.allocate( WIDGET )
                     
                     a_group( )\widget = widgets( )
                     a_group( )\x      = a_group( )\widget\frame_x( ) - mouse( )\selector\x
                     a_group( )\y      = a_group( )\widget\frame_y( ) - mouse( )\selector\y
                     
                     a_group( )\width  = mouse( )\selector\width - a_group( )\widget\frame_width( )
                     a_group( )\height = mouse( )\selector\height - a_group( )\widget\frame_height( )
                  EndIf
               EndIf
            Next
            
         Else
            ; update group pos
            ForEach a_group( )
               If mouse( )\selector\x = 0 Or
                  mouse( )\selector\x > a_group( )\widget\frame_x( )
                  mouse( )\selector\x = a_group( )\widget\frame_x( )
               EndIf
               If mouse( )\selector\y = 0 Or
                  mouse( )\selector\y > a_group( )\widget\frame_y( )
                  mouse( )\selector\y = a_group( )\widget\frame_y( )
               EndIf
            Next
            
            ; update group size
            ForEach a_group( )
               If mouse( )\selector\x + mouse( )\selector\width < a_group( )\widget\frame_x( ) + a_group( )\widget\frame_width( )
                  mouse( )\selector\width = ( a_group( )\widget\frame_x( ) - mouse( )\selector\x ) + a_group( )\widget\frame_width( )
               EndIf
               If mouse( )\selector\y + mouse( )\selector\height < a_group( )\widget\frame_y( ) + a_group( )\widget\frame_height( )
                  mouse( )\selector\height = ( a_group( )\widget\frame_y( ) - mouse( )\selector\y ) + a_group( )\widget\frame_height( )
               EndIf
            Next
            
            ; update delta size
            ForEach a_group( )
               a_group( )\x = a_group( )\widget\frame_x( ) - mouse( )\selector\x
               a_group( )\y = a_group( )\widget\frame_y( ) - mouse( )\selector\y
               
               a_group( )\width  = mouse( )\selector\width - a_group( )\widget\frame_width( )
               a_group( )\height = mouse( )\selector\height - a_group( )\widget\frame_height( )
            Next
         EndIf
         
         ;          ;
         ;          a_size( mouse( )\selector, 7);a_anchors( )\size )
         ;          a_move( a_entered( ),
         ;                  mouse( )\selector,
         ;                  mouse( )\selector\x - 3, ;a_anchors( )\pos,
         ;                  mouse( )\selector\y - 3, ;a_anchors( )\pos,
         ;                  mouse( )\selector\width + 6, ;a_anchors( )\pos * 2,
         ;                  mouse( )\selector\height + 6);a_anchors( )\pos * 2 )
      EndProcedure
      
      Procedure a_object( X.l, Y.l, Width.l, Height.l, Text.s, Color.l, flag.q = #Null, framesize = 1 )
         Protected *this._s_WIDGET
         If Not Alpha(Color)
            Color = Color & $FFFFFF | 255 << 24
         EndIf
         ;
         *this._s_WIDGET = Container(X, Y, Width, Height, #__flag_nogadgets)
         ;;*this\type = 0
         If Text
            SetText( *this, Text)
         EndIf
         ;
         SetFrame( *this, framesize)
         ;
         SetColor( *this, #__color_back, Color)
         ;
         If framesize
            SetColor( *this, #__color_frame, Color & $FFFFFF | 255 << 24)
         EndIf
         ;
         a_set( *this, #__a_full )
         ;
         ProcedureReturn *this
      EndProcedure
      
      Procedure a_events( *this._s_WIDGET, eventtype.l )
         Static *pressed._s_WIDGET
         Protected mouse_x.l = mouse( )\x
         Protected mouse_y.l = mouse( )\y
         
         Static move_x, move_y, resize_x, resize_y, *after
         Protected i
         Protected.l mx, my, mw, mh
         Protected.l Px, Py, IsGrid = DPIScaled(Bool( mouse( )\steps > 1 ))
         
         Protected Text.s
         
         ;
         If eventtype = #__event_Focus
            If mouse( )\selector
               ;\\ reset multi group
               If ListSize( a_group( ))
                  ForEach a_group( )
                     ;             a_set_state( a_group( )\widget, 1 )
                     ;             a_set_state( a_group( )\widget\root, 1 )
                     ;             a_set_state( a_group( )\widget\parent, 1 )
                  Next
                  
                  ;                   mouse( )\selector\x      = 0
                  ;                   mouse( )\selector\y      = 0
                  ;                   mouse( )\selector\width  = 0
                  ;                   mouse( )\selector\height = 0
                  ClearList( a_group( ))
               EndIf
            EndIf
         EndIf
         
         ;
         If eventtype = #__event_Down
            If MouseButtons( ) & #PB_Canvas_LeftButton
               If *this\container = 0
                  mouse( )\selector = 0
               EndIf
               
               ;\\ set current
               If a_entered( )
                  If *this\anchors
                     If *this\container
                        If *this\caption And 
                           *this\caption\interact
                           If Not a_index( ) 
                              a_index( )  = #__a_moved
                           EndIf
                        EndIf
                     Else
                        If Not a_index( ) 
                           a_index( )  = #__a_moved
                        EndIf
                     EndIf
                     
                     
                     a_delta( a_entered( ) )
                     *pressed = a_entered( )
                  EndIf
               EndIf
               ;
               If a_anchors( ) 
                  If *this = a_main( )
                     If a_focused( )
                        ; Debug "remove "+a_focused( )\class
                        a_remove( a_focused( ) )
                        a_focused( ) = #Null
                     EndIf
                  EndIf
               EndIf
               
            EndIf
         EndIf
         
         ;
         If eventtype = #__event_Up
            If MouseButtons( ) & #PB_Canvas_LeftButton
               If *pressed 
                  If *pressed\anchors\id[a_index( )]
                     If is_atpoint_( *pressed\anchors\id[a_index( )], mouse_x, mouse_y )
                        *pressed\anchors\state = #__s_1
                     Else
                        *pressed\anchors\state = #__s_0
                     EndIf
                     ;
                     *pressed\root\repaint = #True
                  EndIf
                  ;                   
                  ;                   ; init multi group selector
                  ;                   If Not mouse( )\selector\type
                  ;                      a_update( *pressed )
                  ;                   EndIf
                  ;                  
                  If mouse( )\drag
                     If a_anchors( )\grid_image
                        If *this\parent
                           If *this\parent\anchors
                              SetBackgroundImage( *this, 0 )
                              If *this\parent
                                 SetBackgroundImage( *this\parent, a_anchors( )\grid_image )
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  ;
                  *pressed = #Null
               EndIf
            EndIf
         EndIf
         
         ;
         If eventtype = #__event_DragStart
            If *this\anchors
               ;\\ change frame color
               If a_anchors( ) 
                  If mouse( )\selector
                     If mouse( )\selector\dotted 
                        mouse( )\selector\dotspace = DPIScaled(3)
                        mouse( )\selector\dotline  = DPIScaled(5)
                        
                        mouse( )\selector\backcolor  = $80DFE2E2
                        mouse( )\selector\framecolor = $BA161616
                     Else
                        mouse( )\selector\backcolor  = $9F646565
                        mouse( )\selector\framecolor = $BA161616
                     EndIf
                  EndIf
                  
                  ;\\
                  If *this\container > 0 And MouseEnter( *this )
                     If Not a_index( )
                        If a_anchors( )\grid_image
                           If *this\parent
                              SetBackgroundImage( *this\parent, 0 )
                           EndIf
                           SetBackgroundImage( *this, a_anchors( )\grid_image )
                        EndIf
                        
                        ;                      
                        ;                      If StartDraw( *this\root )
                        ;                         Drawing( )
                        ;                         
                        ;                         a_anchors( )\grab = GrabDrawingImage( #PB_Any, 0, 0, *this\root\width, *this\root\height )
                        ;                         
                        ;                         StopDraw( )
                        ;                      EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;
         If eventtype = #__event_MouseMove
            
            If a_index( ) And 
               *pressed And *pressed\press And 
               *pressed\anchors\id[a_index( )] And 
               *pressed\anchors\state = #__s_2
               ;
               mouse_x - mouse( )\delta\x
               mouse_y - mouse( )\delta\y
               If mouse( )\steps
                  mouse_x + ( *pressed\inner_x( ) % mouse( )\steps ) 
                  mouse_y + ( *pressed\inner_y( ) % mouse( )\steps ) 
               EndIf
               
               If *pressed\anchors ;= 1
                  mw = #PB_Ignore
                  mh = #PB_Ignore
                  
                  If a_index( ) <> #__a_moved
                     ;\\ horizontal
                     Select a_index( )
                        Case #__a_left, #__a_left_top, #__a_left_bottom ; left
                           mw = (( *pressed\container_x( ) - mouse_x ) + *pressed\container_width( )) - *pressed\parent\scroll_x( )
                           If mw <= 0
                              mouse_x = ( *pressed\container_x( ) + *pressed\container_width( )) - *pressed\parent\scroll_x( )
                              mw      = 0
                           EndIf
                           If *pressed\fs
                              If *pressed\type <> #__type_window
                                 mw + *pressed\fs * 2 + *pressed\fs[1] + *pressed\fs[3] ; ( *pressed\frame_width( ) - *pressed\inner_width( ) )
                              EndIf
                           EndIf
                           
                        Case #__a_right, #__a_right_top, #__a_right_bottom ; right
                           mw = ( mouse_x - *pressed\container_x( ) ) + IsGrid
                     EndSelect
                     
                     ;\\ vertical
                     Select a_index( )
                        Case #__a_top, #__a_left_top, #__a_right_top ; top
                           mh = (( *pressed\container_y( ) - mouse_y ) + *pressed\container_height( )) - *pressed\parent\scroll_y( )
                           If mh <= 0
                              mouse_y = ( *pressed\container_y( ) + *pressed\container_height( )) - *pressed\parent\scroll_y( )
                              mh      = 0
                           EndIf
                           If *pressed\fs
                              If *pressed\type <> #__type_window
                                 mh + *pressed\fs * 2 + *pressed\fs[2] + *pressed\fs[4] ; ( *pressed\frame_height( ) - *pressed\inner_height( ) )
                              EndIf
                           EndIf
                           
                        Case #__a_bottom, #__a_left_bottom, #__a_right_bottom ; bottom
                           mh = ( mouse_y - *pressed\container_y( ) ) + IsGrid
                     EndSelect
                     
                     ;\\
                     If a_index( ) <> #__a_left_top
                        If a_index( ) <> #__a_left And a_index( ) <> #__a_left_bottom
                           mouse_x = #PB_Ignore
                        EndIf
                        If a_index( ) <> #__a_top And a_index( ) <> #__a_right_top
                           mouse_y = #PB_Ignore
                        EndIf
                     EndIf
                  EndIf
                  
                  ;Debug " " + mw + " " + mh
                  Resize( *pressed, mouse_x, mouse_y, mw, mh, 0 )
                  
               Else
                  ;                   If a_main( )
                  ;                      mouse_x + a_main( )\container_x( )
                  ;                      mouse_y + a_main( )\container_y( )
                  ;                   EndIf
                  
                  ; horizontal
                  Select a_index( )
                     Case #__a_left, #__a_left_top, #__a_left_bottom, #__a_moved ; left
                        If a_index( ) <> #__a_moved
                           mouse( )\selector\width = ( mouse( )\selector\x - mouse_x ) + mouse( )\selector\width
                        EndIf
                        mouse( )\selector\x = mouse_x
                        
                     Case #__a_right, #__a_right_top, #__a_right_bottom ; right
                        mouse( )\selector\width = ( mouse_x - mouse( )\selector\x ) + IsGrid
                  EndSelect
                  
                  ; vertical
                  Select a_index( )
                     Case #__a_top, #__a_left_top, #__a_right_top, #__a_moved ; top
                        If a_index( ) <> #__a_moved
                           mouse( )\selector\height = ( mouse( )\selector\y - mouse_y ) + mouse( )\selector\height
                        EndIf
                        mouse( )\selector\y = mouse_y
                        
                     Case #__a_bottom, #__a_left_bottom, #__a_right_bottom ; bottom
                        mouse( )\selector\height = ( mouse_y - mouse( )\selector\y ) + IsGrid
                  EndSelect
                  
                  ;
                  ;\\\ multi resize
                  ;
                  ;                            
                  ;                            ;                   mouse( )\selector\x = _x_
                  ;                            ;                   mouse( )\selector\y = _y_
                  ;                            ;
                  ;                            ;                   mouse( )\selector\width = _width_
                  ;                            ;                   mouse( )\selector\height = _height_
                  ;                            
                  ;                            a_move( a_entered( ),
                  ;                                    mouse( )\selector,
                  ;                                    mouse( )\selector\x - 0, ;a_anchors( )\pos,
                  ;                                    mouse( )\selector\y - 0, ;a_anchors( )\pos,
                  ;                                    mouse( )\selector\width + 0, ;a_anchors( )\pos * 2,
                  ;                                    mouse( )\selector\height + 0);a_anchors( )\pos * 2)
                  
                  Select a_index( )
                     Case #__a_left, #__a_left_top, #__a_left_bottom, #__a_moved ; left
                        ForEach a_group( )
                           Resize( a_group( )\widget,
                                   ( mouse( )\selector\x - *pressed\inner_x( ) ) + a_group( )\x,
                                   #PB_Ignore, mouse( )\selector\width - a_group( )\width, #PB_Ignore )
                        Next
                        
                     Case #__a_right, #__a_right_top, #__a_right_bottom ; right
                        ForEach a_group( )
                           Resize( a_group( )\widget, #PB_Ignore, #PB_Ignore, mouse( )\selector\width - a_group( )\width, #PB_Ignore )
                        Next
                  EndSelect
                  
                  Select a_index( )
                     Case #__a_top, #__a_left_top, #__a_right_top, #__a_moved ; top
                        ForEach a_group( )
                           Resize( a_group( )\widget, #PB_Ignore,
                                   ( mouse( )\selector\y - *pressed\inner_y( ) ) + a_group( )\y,
                                   #PB_Ignore, mouse( )\selector\height - a_group( )\height )
                        Next
                        
                     Case #__a_bottom, #__a_left_bottom, #__a_right_bottom ; bottom
                        ForEach a_group( )
                           Resize( a_group( )\widget, #PB_Ignore, #PB_Ignore, #PB_Ignore, mouse( )\selector\height - a_group( )\height )
                        Next
                  EndSelect
                  
               EndIf
               
               
               
            EndIf
            
         EndIf
         
         ; -\\ widget::a_key_events
         If eventtype = #__event_KeyDown
            If *this = a_focused( )
               ; Debug "event_KeyDown "+*this\class
               If *this\anchors ;= 1
                  mx = *this\container_x( )
                  my = *this\container_y( )
                  mw = *this\frame_width( )
                  mh = *this\frame_height( )
               Else
                  mx = mouse( )\selector\x
                  my = mouse( )\selector\y
                  mw = mouse( )\selector\width
                  mh = mouse( )\selector\height
               EndIf
               
               Select keyboard( )\Key[1]
                  Case (#PB_Canvas_Alt | #PB_Canvas_Control), #PB_Canvas_Shift
                     Select keyboard( )\Key
                        Case #PB_Shortcut_Left : mw - mouse( )\steps : a_index( ) = #__a_right
                        Case #PB_Shortcut_Right : mw + mouse( )\steps : a_index( ) = #__a_right
                           
                        Case #PB_Shortcut_Up : mh - mouse( )\steps : a_index( ) = #__a_bottom
                        Case #PB_Shortcut_Down : mh + mouse( )\steps : a_index( ) = #__a_bottom
                     EndSelect
                     
                     Resize( *this, mx, my, mw, mh, 0 )
                     
                  Case (#PB_Canvas_Shift | #PB_Canvas_Control), #PB_Canvas_Alt ;, #PB_Canvas_Control, #PB_Canvas_Command, #PB_Canvas_Control | #PB_Canvas_Command
                     Select keyboard( )\Key
                        Case #PB_Shortcut_Left : mx - mouse( )\steps : a_index( ) = #__a_moved
                        Case #PB_Shortcut_Right : mx + mouse( )\steps : a_index( ) = #__a_moved
                           
                        Case #PB_Shortcut_Up : my - mouse( )\steps : a_index( ) = #__a_moved
                        Case #PB_Shortcut_Down : my + mouse( )\steps : a_index( ) = #__a_moved
                     EndSelect
                     
                     Resize( *this, mx, my, mw, mh, 0 )
                     
                  Default
                     ;\\ tab focus
                     Select keyboard( )\Key
                        Case #PB_Shortcut_Tab
                           
                        Case #PB_Shortcut_Left
                           If *this\parent
                              If *this\parent\parent And
                                 *this\parent\parent\anchors
                                 SetActive( *this\parent )
                              Else
                                 If *this\parent\FirstWidget( )
                                    SetActive( *this\parent\FirstWidget( ) )
                                 Else
                                    If a_main( )\FirstWidget( )
                                       SetActive( a_main( )\FirstWidget( ) )
                                    EndIf
                                 EndIf
                              EndIf
                           EndIf
                           
                        Case #PB_Shortcut_Up
                           If *this\BeforeWidget( )
                              ;                               If GetActive( )\row And GetActive( )\RowFocusedIndex( ) > 0
                              ;                                 ; Debug "-"+GetActive( )\class +" "+ GetActive( )\RowFocusedIndex( )
                              ;                                  GetActive( )\RowFocusedIndex( ) - 1 
                              ;                               EndIf
                              SetActive( *this\BeforeWidget( ) )
                           EndIf
                           
                        Case #PB_Shortcut_Down
                           If *this\AfterWidget( )
                              ;                               If GetActive( )\row And GetActive( )\RowFocusedIndex( ) < GetActive( )\countitems
                              ;                                 ; Debug "+"+GetActive( )\class +" "+ GetActive( )\RowFocusedIndex( )
                              ;                                  GetActive( )\RowFocusedIndex( ) + 1 
                              ;                               EndIf
                              SetActive( *this\AfterWidget( ) )
                           EndIf
                           
                        Case #PB_Shortcut_Right
                           If *this\FirstWidget( )
                              SetActive( *this\FirstWidget( ) )
                           EndIf
                           
                     EndSelect
                     
               EndSelect
            EndIf
         EndIf
         
         If *this\anchors
            If eventtype = #__event_MouseEnter
               *this\root\repaint = #True
            EndIf
            
            If eventtype = #__event_MouseLeave
               *this\root\repaint = #True
            EndIf
         EndIf
         
         ProcedureReturn *this\root\repaint
      EndProcedure
      
      
      ;-
      Macro HideState( _this_, _parent_ )
         _this_\hide = Bool( _this_\hide[1] Or ( _parent_ And ( _parent_\hide Or ( _parent_\__Tab( ) And _this_\TabIndex( ) <> _parent_\__Tab( )\TabState( ) ))))

         If _this_\__Tab( )
            If _this_\hide
               _this_\__Tab( )\hide = - 1
            Else
               _this_\__Tab( )\hide = _this_\__Tab( )\hide[1]
            EndIf
         EndIf
         If _this_\__String( )
            If _this_\hide
               _this_\__String( )\hide = - 1
            Else
               _this_\__String( )\hide = _this_\__String( )\hide[1]
            EndIf
         EndIf
         If _this_\scroll
            If _this_\scroll\v
               If _this_\hide Or _this_\scroll\v\bar\max <= _this_\scroll\v\bar\page\len
                  _this_\scroll\v\hide = - 1
               Else
                  _this_\scroll\v\hide = _this_\scroll\v\hide[1]
               EndIf
            EndIf
            If _this_\scroll\h
               If _this_\hide Or _this_\scroll\h\bar\max <= _this_\scroll\h\bar\page\len
                  _this_\scroll\h\hide = - 1
               Else
                 _this_\scroll\h\hide = _this_\scroll\h\hide[1]
               EndIf
            EndIf
         EndIf
         
         ; Чтобы обновить границы отоброжения (clip-coordinate)
         _this_\resize\clip = #True
      EndMacro
      
      Macro DisableState( _this_, _parent_ )
         _this_\disable = Bool( _this_\disable[1] Or ( _parent_ And _parent_\disable ))
         
         If _this_\__Tab( )
            If _this_\disable
               _this_\__Tab( )\disable = - 1
            Else
               _this_\__Tab( )\disable = _this_\__Tab( )\disable[1]
            EndIf
         EndIf
         If _this_\__String( )
            If _this_\disable
               _this_\__String( )\disable = - 1
            Else
               _this_\__String( )\disable = _this_\__String( )\disable[1]
            EndIf
         EndIf
         If _this_\scroll
            If _this_\scroll\v
               If _this_\disable
                  _this_\scroll\v\disable = - 1
               Else
                  _this_\scroll\v\disable = _this_\scroll\v\disable[1]
               EndIf
            EndIf
            If _this_\scroll\h
               If _this_\disable
                  _this_\scroll\h\disable = - 1
               Else
                  _this_\scroll\h\disable = _this_\scroll\h\disable[1]
               EndIf
            EndIf
         EndIf
      EndMacro
       
      ;-
      Procedure.b HideItem( *this._s_widget, item.l, state.b )
         If *this\type = #__type_panel
            If *this\tab
               SelectElement( *this\__Tab( )\__tabs( ), item )
               *this\__Tab( )\__tabs( )\hide = state
               ;*this\state\repaint = #True
            EndIf
         EndIf
      EndProcedure
      
      Procedure.b Hide( *this._s_WIDGET, state.b = #PB_Default, flags.q = 0 )
         If State = #PB_Default : ProcedureReturn *this\hide : EndIf
         
         If *this\hide[1] <> state
            *this\hide[1] = state
            ;
            HideState( *this, *this\parent )
            ;
            If *this\haschildren
               ; hide all children's except those whose parent-item is selected
               If StartEnum( *this )
                   HideState( widgets( ), widgets( )\parent )
                  StopEnum( )
               EndIf
            EndIf
            ProcedureReturn 1
         EndIf
      EndProcedure
      
      Procedure.b DisableItem( *this._s_widget, item.l, state.b )
         If *this\type = #__type_panel
            If *this\tab
               SelectElement( *this\__Tab( )\__tabs( ), item )
               *this\__Tab( )\__tabs( )\disable = state
               ;*this\state\repaint = #True
            EndIf
         EndIf
      EndProcedure
      
      Procedure.b Disable( *this._s_WIDGET, State.b = #PB_Default )
         If State = #PB_Default : ProcedureReturn *this\disable : EndIf
         
         If *this\disable[1] <> State
            *this\disable[1] = State
            ;
            ; reset color state
            If *this\press
               If *this\ColorState( ) 
                  *this\ColorState( ) = #__s_0
               EndIf
            EndIf
            ;
            DisableState( *this, *this\parent )
            ;
            If *this\haschildren
               ; disable all children's except those whose parent-item is selected
               If StartEnum( *this )
                  DisableState( widgets( ), widgets( )\parent )
                  StopEnum( )
               EndIf
            EndIf
            ProcedureReturn 1
         EndIf
      EndProcedure
      
      Procedure.i Address( *this._s_WIDGET )
         ProcedureReturn *this\address
      EndProcedure
      
      Procedure.l Type( *this._s_WIDGET ) ; Returns created widget type
         ProcedureReturn *this\type
      EndProcedure
      
      Procedure.l Index( *this._s_WIDGET )
         ProcedureReturn *this\placingindex
      EndProcedure
      
      Procedure.l Level( *this._s_WIDGET )
         ProcedureReturn *this\level
      EndProcedure
      
      Procedure.i ID( Index )
         Protected.i result
         If Index >= 0
            PushListPosition( widgets( ) )
            ForEach widgets( )
               If Index( widgets( ) ) = Index
                  result = widgets( )
                  Break
               EndIf
            Next
            PopListPosition( widgets( ) )
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.l X( *this._s_WIDGET, mode.l = #__c_frame )
         ProcedureReturn DPIUnScaledX( *this\x[mode] ) 
      EndProcedure
      
      Procedure.l Y( *this._s_WIDGET, mode.l = #__c_frame )
         ProcedureReturn DPIUnScaledY( *this\y[mode] )
      EndProcedure
      
      Procedure.l Width( *this._s_WIDGET, mode.l = #__c_frame )
         ProcedureReturn DPIUnScaledX( *this\width[mode] ) 
      EndProcedure
      
      Procedure.l Height( *this._s_WIDGET, mode.l = #__c_frame )
         ProcedureReturn DPIUnScaledY( *this\height[mode] ) 
      EndProcedure
      
      Procedure   IsChild( *this._s_WIDGET, *parent._s_WIDGET )
         Protected result
         ;
         If *this And 
            *this <> *parent And 
            *parent\haschildren
            ;
            Repeat
               *this = *this\parent
               If *this
                  If *parent = *this
                     result = *this
                     Break
                  EndIf
               Else
                  Break
               EndIf
            Until is_root_( *this )
         EndIf
         ;
         ProcedureReturn result
      EndProcedure
      
      Procedure.b IsContainer( *this._s_WIDGET )
         ProcedureReturn *this\container
      EndProcedure
      
      Procedure.i Sticky( *window._s_WIDGET = #PB_Default, state.b = #PB_Default )
         Protected result = PopupWindow( )
         
         If state <> #PB_Default
            If is_window_( *window )
               If state
                  PopupWindow( ) = *window
               Else
                  PopupWindow( ) = #Null
               EndIf
               
               SetForeground( *window )
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure ToolTip( *this._s_WIDGET, Text.s, item = - 1 )
         *this\tt\text\string = Text
      EndProcedure
      
      
      ;-
      Macro clip_output_( _address_, _mode_ = [#__c_draw] )
         CompilerIf Not ( #PB_Compiler_OS = #PB_OS_MacOS And Not Defined( Draw, #PB_Module ))
            ClipOutput( _address_\x#_mode_, _address_\y#_mode_, _address_\width#_mode_, _address_\height#_mode_ )
         CompilerEndIf
      EndMacro
      
      Procedure ClipPut( *this._s_WIDGET, X, Y, Width, Height )
         Protected clip_x, clip_y, clip_w, clip_h
         
         ; clip inner coordinate
         If *this\draw_x( ) < X
            clip_x = X
         Else
            clip_x = *this\draw_x( )
         EndIf
         
         If *this\draw_y( ) < Y
            clip_y = Y
         Else
            clip_y = *this\draw_y( )
         EndIf
         
         If *this\draw_width( ) > Width
            clip_w = Width
         Else
            clip_w = *this\draw_width( )
         EndIf
         
         If *this\draw_height( ) > Height
            clip_h = Height
         Else
            clip_h = *this\draw_height( )
         EndIf
         
         PB(ClipOutput)( clip_x, clip_y, clip_w, clip_h )
      EndProcedure
      
      Procedure Reclip( *this._s_WIDGET )
         Macro clip_width_( _address_, _parent_, _x_width_, _parent_ix_iwidth_, _mode_ = )
            If _parent_ And
               (_parent_\x#_mode_ + _parent_\width#_mode_) > 0 And
               (_parent_\x#_mode_ + _parent_\width#_mode_) < (_x_width_) And
               (_parent_ix_iwidth_) > (_parent_\x#_mode_ + _parent_\width#_mode_)
               
               _address_\width#_mode_ = (_parent_\x#_mode_ + _parent_\width#_mode_) - _address_\x#_mode_
            ElseIf _parent_ And (_parent_ix_iwidth_) > 0 And (_parent_ix_iwidth_) < (_x_width_)
               
               _address_\width#_mode_ = (_parent_ix_iwidth_) - _address_\x#_mode_
            Else
               _address_\width#_mode_ = (_x_width_) - _address_\x#_mode_
            EndIf
            
            If _address_\width#_mode_ < 0
               _address_\width#_mode_ = 0
            EndIf
         EndMacro
         
         Macro clip_height_( _address_, _parent_, _y_height_, _parent_iy_iheight_, _mode_ = )
            If _parent_ And
               (_parent_\y#_mode_ + _parent_\height#_mode_) > 0 And
               (_parent_\y#_mode_ + _parent_\height#_mode_) < (_y_height_) And
               (_parent_iy_iheight_) > (_parent_\y#_mode_ + _parent_\height#_mode_)
               
               _address_\height#_mode_ = (_parent_\y#_mode_ + _parent_\height#_mode_) - _address_\y#_mode_
            ElseIf _parent_ And (_parent_iy_iheight_) > 0 And (_parent_iy_iheight_) < (_y_height_)
               
               _address_\height#_mode_ = (_parent_iy_iheight_) - _address_\y#_mode_
            Else
               _address_\height#_mode_ = (_y_height_) - _address_\y#_mode_
            EndIf
            
            If _address_\height#_mode_ < 0
               _address_\height#_mode_ = 0
            EndIf
         EndMacro
         
         ; then move and size parent set clip coordinate
         Protected _p_x2_
         Protected _p_y2_
         Protected *parent._s_WIDGET
         
         If *this\bounds\attach
            *parent = *this\bounds\attach\parent
         Else
            *parent = *this\parent
         EndIf
         
         If test_scrollbars_reclip
            If *parent
               Debug "   reClip - " + *this\class + " * " + *parent\inner_width( ) + " " + *parent\inner_height( )
            EndIf
         EndIf
         
         If is_root_( *this )
            If *this\draw_width( ) <> *this\width
               *this\draw_width( )     = *this\width
               *this\width[#__c_draw2] = *this\width
            EndIf
            If *this\draw_height( ) <> *this\height
               *this\draw_height( )     = *this\height
               *this\height[#__c_draw2] = *this\height
            EndIf
         Else
            If *parent
               _p_x2_ = *parent\inner_x( ) + *parent\inner_width( )
               _p_y2_ = *parent\inner_y( ) + *parent\inner_height( )
               
               ; for the splitter children's
               If *parent\type = #__type_Splitter
                  If *parent\split_1( ) = *this
                     _p_x2_ = *parent\bar\button[1]\x + *parent\bar\button[1]\width
                     _p_y2_ = *parent\bar\button[1]\y + *parent\bar\button[1]\height
                  EndIf
                  If *parent\split_2( ) = *this
                     _p_x2_ = *parent\bar\button[2]\x + *parent\bar\button[2]\width
                     _p_y2_ = *parent\bar\button[2]\y + *parent\bar\button[2]\height
                  EndIf
               EndIf
               
               If *this\child And Not *this\bounds\attach
                  If is_bar_( *this ) Or
                     *this\type = #__type_TabBar Or
                     *this\type = #__type_Scroll
                     ;
                     _p_x2_ = *parent\inner_x( ) + *parent\container_width( )
                     _p_y2_ = *parent\inner_y( ) + *parent\container_height( )
                  EndIf
                  
                  ; for the scrollarea children's except scrollbars
               Else
                  If *parent\scroll_width( ) And
                     _p_x2_ > *parent\inner_x( ) + *parent\scroll_x( ) + *parent\scroll_width( )
                     _p_x2_ = *parent\inner_x( ) + *parent\scroll_x( ) + *parent\scroll_width( )
                  EndIf
                  If *parent\scroll_height( ) And
                     _p_y2_ > *parent\inner_y( ) + *parent\scroll_y( ) + *parent\scroll_height( )
                     _p_y2_ = *parent\inner_y( ) + *parent\scroll_y( ) + *parent\scroll_height( )
                  EndIf
               EndIf
            EndIf
            
            ; then move and size parent set clip coordinate
            ;\\ x&y - clip screen coordinate
            If *parent And
               *parent\inner_x( ) > *this\screen_x( ) And
               *parent\inner_x( ) > *parent\draw_x( )
               *this\draw_x( ) = *parent\inner_x( )
            ElseIf *parent And *parent\draw_x( ) > *this\screen_x( )
               *this\draw_x( ) = *parent\draw_x( )
            Else
               *this\draw_x( ) = *this\screen_x( )
            EndIf
            If *parent And
               *parent\inner_y( ) > *this\screen_y( ) And
               *parent\inner_y( ) > *parent\draw_y( )
               *this\draw_y( ) = *parent\inner_y( )
            ElseIf *parent And *parent\draw_y( ) > *this\screen_y( )
               *this\draw_y( ) = *parent\draw_y( )
            Else
               *this\draw_y( ) = *this\screen_y( )
            EndIf
            If *this\draw_x( ) < 0 : *this\draw_x( ) = 0 : EndIf
            If *this\draw_y( ) < 0 : *this\draw_y( ) = 0 : EndIf
            
            ;\\ width&height - clip coordinate
            clip_width_( *this, *parent, *this\screen_x( ) + *this\screen_width( ), _p_x2_, [#__c_draw] )
            clip_height_( *this, *parent, *this\screen_y( ) + *this\screen_height( ), _p_y2_, [#__c_draw] )
            
            
            ;\\ x&y - clip inner coordinate
            If *this\draw_x( ) < *this\inner_x( )
               *this\x[#__c_draw2] = *this\inner_x( )
            Else
               *this\x[#__c_draw2] = *this\draw_x( )
            EndIf
            If *this\draw_y( ) < *this\inner_y( )
               *this\y[#__c_draw2] = *this\inner_y( )
            Else
               *this\y[#__c_draw2] = *this\draw_y( )
            EndIf
            
            ;\\ width&height - clip inner coordinate
            If *parent
               ;           If *this\scroll_width( ) And *this\scroll_width( ) < *this\inner_width( )
               ;             clip_width_( *this, *parent, *this\inner_x( ) + *this\scroll_width( ), _p_x2_, [#__c_draw2] )
               ;           Else
               clip_width_( *this, *parent, *this\inner_x( ) + *this\inner_width( ), _p_x2_, [#__c_draw2] )
               ;           EndIf
               ;           If *this\scroll_height( ) And *this\scroll_height( ) < *this\inner_height( )
               ;             clip_height_( *this, *parent, *this\inner_y( ) + *this\scroll_height( ), _p_y2_, [#__c_draw2] )
               ;           Else
               clip_height_( *this, *parent, *this\inner_y( ) + *this\inner_height( ), _p_y2_, [#__c_draw2] )
               ;           EndIf
            EndIf
         EndIf
         
         ;
         ; clip child bar
         If *this\__Tab( )
            *this\__Tab( )\draw_x( )      = *this\draw_x( )
            *this\__Tab( )\draw_y( )      = *this\draw_y( )
            *this\__Tab( )\draw_width( )  = *this\draw_width( )  ; 39;*this\width[#__c_draw2] ; 
            *this\__Tab( )\draw_height( ) = *this\draw_height( )
         EndIf
         If *this\__Menu( )
            *this\__Menu( )\draw_x( )      = *this\draw_x( )
            *this\__Menu( )\draw_y( )      = *this\draw_y( )
            *this\__Menu( )\draw_width( )  = *this\draw_width( )  ; 39;*this\width[#__c_draw2] ; 
            *this\__Menu( )\draw_height( ) = *this\draw_height( )
         EndIf
         If *this\__String( )
            *this\__String( )\draw_x( )      = *this\draw_x( )
            *this\__String( )\draw_y( )      = *this\draw_y( )
            *this\__String( )\draw_width( )  = *this\draw_width( )
            *this\__String( )\draw_height( ) = *this\draw_height( )
         EndIf
         If *this\scroll
            If *this\scroll\v
               *this\scroll\v\draw_x( )      = *this\draw_x( )
               *this\scroll\v\draw_y( )      = *this\draw_y( )
               *this\scroll\v\draw_width( )  = *this\draw_width( )
               *this\scroll\v\draw_height( ) = *this\draw_height( )
            EndIf
            If *this\scroll\h
               *this\scroll\h\draw_x( )      = *this\draw_x( )
               *this\scroll\h\draw_y( )      = *this\draw_y( )
               *this\scroll\h\draw_width( )  = *this\draw_width( )
               *this\scroll\h\draw_height( ) = *this\draw_height( )
            EndIf
         EndIf
         
         ProcedureReturn Bool( *this\draw_width( ) > 0 And *this\draw_height( ) > 0 )
      EndProcedure
      
      Procedure.b Resize( *this._s_WIDGET, X.l, Y.l, Width.l, Height.l, scale.b = 1 )
         Protected.b result
         Protected.l ix, iy, iwidth, iheight, Change_x, Change_y, Change_width, Change_height
         If test_event_resize
            Debug "resize - "+*this\class +" ("+ X +" "+ Y +" "+ Width +" "+ Height +")"
         EndIf
         
         ;\\
         *this\redraw = #True
         If *this\parent 
            *this\parent\redraw = #True
         EndIf
         *this\resize\clip = #True
         
         ;\\
         If *this\resize\change <> #True
            *this\resize\change = #True
         EndIf
         
         ;\\
         If *this\anchors
            If *this\bs < *this\fs + *this\anchors\pos
               *this\bs = *this\fs + *this\anchors\pos
            EndIf
         Else
            If *this\bs < *this\fs
               *this\bs = *this\fs
            EndIf
         EndIf
         ;
         If *this\autosize And *this\parent And *this\parent\type = #__type_Splitter
            *this\autosize = 0
         EndIf
                       
         ;\\
         If *this\autosize 
            If *this\parent And 
               *this\parent <> *this 
               
               X      = (*this\parent\inner_x( ))
               Y      = (*this\parent\inner_y( ))
               Width  = (*this\parent\inner_width( ))
               Height = (*this\parent\inner_height( ))
            EndIf
         Else
            ;
            ;CompilerIf #PB_Compiler_DPIAware
            If scale = 1
               If ( *this\parent And *this\parent\type = #__type_Splitter )
                  Debug "resize no scale "+*this\class
               EndIf
            EndIf
            If scale = 1 
               If Not is_integral_( *this )
                  If Not( *this\parent And *this\parent\type = #__type_Splitter ) 
                     If X <> #PB_Ignore
                        X = DPIScaledX( X )
                     EndIf
                     If Width <> #PB_Ignore
                        Width = DPIScaledX( Width )
                     EndIf
                     If Y <> #PB_Ignore
                        Y = DPIScaledY( Y )
                     EndIf
                     If Height <> #PB_Ignore
                        Height = DPIScaledY( Height )
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;CompilerEndIf
            
            ;\\ move & size steps
            If *this\anchors And *this\anchors\mode And mouse( )\steps > 1
               If X <> #PB_Ignore
                  X + ( X % mouse( )\steps )
                  X = ( X / mouse( )\steps ) * mouse( )\steps
               EndIf
               If Y <> #PB_Ignore
                  Y + ( Y % mouse( )\steps )
                  Y = ( Y / mouse( )\steps ) * mouse( )\steps
               EndIf
               If Width <> #PB_Ignore
                  Width + ( Width % mouse( )\steps )
                  Width = (( Width / mouse( )\steps ) * mouse( )\steps ) + DPIScaled(1)
               EndIf
               If Height <> #PB_Ignore
                  Height + ( Height % mouse( )\steps )
                  Height = (( Height / mouse( )\steps ) * mouse( )\steps ) + DPIScaled(1)
               EndIf
            EndIf
            
            ;\\ move boundaries
            If *this\bounds\move
               If X <> #PB_Ignore
                  If *this\bounds\move\min\x <> #PB_Ignore And
                     X < *this\bounds\move\min\x
                     If Width <> #PB_Ignore
                        Width - ( *this\bounds\move\min\x - X )
                     EndIf
                     X = *this\bounds\move\min\x
                  EndIf
                  If *this\bounds\move\max\x <> #PB_Ignore
                     If Width <> #PB_Ignore
                        If X > *this\bounds\move\max\x - Width
                           X = *this\bounds\move\max\x - Width
                        EndIf
                     Else
                        If X > *this\bounds\move\max\x - *this\frame_width( )
                           X = *this\bounds\move\max\x - *this\frame_width( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               If Y <> #PB_Ignore
                  If *this\bounds\move\min\y <> #PB_Ignore And
                     Y < *this\bounds\move\min\y
                     If Height <> #PB_Ignore
                        Height - ( *this\bounds\move\min\y - Y )
                     EndIf
                     Y = *this\bounds\move\min\y
                  EndIf
                  If *this\bounds\move\max\y <> #PB_Ignore
                     If Height <> #PB_Ignore
                        If Y > *this\bounds\move\max\y - Height
                           Y = *this\bounds\move\max\y - Height
                        EndIf
                     Else
                        If Y > *this\bounds\move\max\y - *this\frame_height( )
                           Y = *this\bounds\move\max\y - *this\frame_height( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ size boundaries
            If *this\bounds\size
               If *this\type = #__type_window
                  Protected h_frame = *this\fs * 2 + *this\fs[1] + *this\fs[3]
                  Protected v_frame = *this\fs * 2 + *this\fs[2] + *this\fs[4]
               EndIf
               
               If Width <> #PB_Ignore
                  If #PB_Ignore <> *this\bounds\size\min\width And
                     Width < *this\bounds\size\min\width - h_frame
                     If X <> #PB_Ignore
                        X + ( Width - *this\bounds\size\min\width ) + h_frame
                     EndIf
                     Width = *this\bounds\size\min\width - h_frame
                  EndIf
                  If #PB_Ignore <> *this\bounds\size\max\width And
                     Width > *this\bounds\size\max\width - h_frame
                     If X <> #PB_Ignore
                        X + ( Width - *this\bounds\size\max\width ) + h_frame
                     EndIf
                     Width = *this\bounds\size\max\width - h_frame
                  EndIf
                  
                  ;\\
                  If *this\bounds\move
                     If X <> #PB_Ignore
                        If Width > *this\bounds\size\max\width - ( X - *this\bounds\move\min\x ) - h_frame
                           Width = *this\bounds\size\max\width - ( X - *this\bounds\move\min\x ) - h_frame
                        EndIf
                     Else
                        If Width > *this\bounds\size\max\width - ( *this\container_x( ) - *this\bounds\move\min\x ) - h_frame
                           Width = *this\bounds\size\max\width - ( *this\container_x( ) - *this\bounds\move\min\x ) - h_frame
                        EndIf
                     EndIf
                  EndIf
               EndIf
               If Height <> #PB_Ignore
                  If #PB_Ignore <> *this\bounds\size\min\height And
                     Height < *this\bounds\size\min\height - v_frame
                     If Y <> #PB_Ignore
                        Y + ( Height - *this\bounds\size\min\height ) + v_frame
                     EndIf
                     Height = *this\bounds\size\min\height - v_frame
                  EndIf
                  If #PB_Ignore <> *this\bounds\size\max\height And
                     Height > *this\bounds\size\max\height - v_frame
                     If Y <> #PB_Ignore
                        Y + ( Height - *this\bounds\size\max\height ) + v_frame
                     EndIf
                     Height = *this\bounds\size\max\height - v_frame
                  EndIf
                  
                  ;\\
                  If *this\bounds\move
                     If Y <> #PB_Ignore
                        If Height > *this\bounds\size\max\height - ( Y - *this\bounds\move\min\y ) - v_frame
                           Height = *this\bounds\size\max\height - ( Y - *this\bounds\move\min\y ) - v_frame
                        EndIf
                     Else
                        If Height > *this\bounds\size\max\height - ( *this\container_y( ) - *this\bounds\move\min\y ) - v_frame
                           Height = *this\bounds\size\max\height - ( *this\container_y( ) - *this\bounds\move\min\y ) - v_frame
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If X = #PB_Ignore
               X = *this\container_x( )
            ElseIf *this\parent And *this\parent\container
               If Not *this\child
                  X + *this\parent\scroll_x( )
               EndIf
               *this\container_x( ) = X
            EndIf
            If Y = #PB_Ignore
               Y = *this\container_y( )
            ElseIf *this\parent And *this\parent\container
               If Not *this\child
                  Y + *this\parent\scroll_y( )
               EndIf
               *this\container_y( ) = Y
            EndIf
            
            ;\\
            If *this\parent And *this <> *this\parent And Not is_root_( *this )
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 2 )
                  X + *this\parent\inner_x( )
               EndIf
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 1 )
                  Y + *this\parent\inner_y( )
               EndIf
            EndIf
            
            ;\\
            If Width = #PB_Ignore
               If is_window_( *this )
                  Width = *this\container_width( )
               Else
                  Width = *this\frame_width( )
               EndIf
            EndIf
            If Height = #PB_Ignore
               If is_window_( *this )
                  Height = *this\container_height( )
               Else
                  Height = *this\frame_height( )
               EndIf
            EndIf
            
            ;\\
            If Width < 0
               Width = 0
            EndIf
            If Height < 0
               Height = 0
            EndIf
            
            ;\\ потому что окну задаются внутренные размеры
            If is_window_( *this )
               Width + ( *this\fs * 2 + *this\fs[1] + *this\fs[3] )
               Height + ( *this\fs * 2 + *this\fs[2] + *this\fs[4] )
            EndIf
         EndIf
         
         ;\\ inner x&y position
         ix      = X + ( *this\fs + *this\fs[1] )
         iy      = Y + ( *this\fs + *this\fs[2] )
         iwidth  = Width - ( *this\fs * 2 + *this\fs[1] + *this\fs[3] )
         iheight = Height - ( *this\fs * 2 + *this\fs[2] + *this\fs[4] )
         
         ;\\
         If Not Change_x And *this\screen_x( ) <> X - ( *this\bs - *this\fs ) : Change_x = ( X - ( *this\bs - *this\fs )) - *this\screen_x( ) : EndIf
         If Not Change_y And *this\screen_y( ) <> Y - ( *this\bs - *this\fs ) : Change_y = ( Y - ( *this\bs - *this\fs )) - *this\screen_y( ) : EndIf
         If Not Change_width And *this\screen_width( ) <> Width + ( *this\bs * 2 - *this\fs * 2 ) : Change_width = ( Width + ( *this\bs * 2 - *this\fs * 2 )) - *this\screen_width( ) : EndIf
         If Not Change_height And *this\screen_height( ) <> Height + ( *this\bs * 2 - *this\fs * 2 ) : Change_height = ( Height + ( *this\bs * 2 - *this\fs * 2 )) - *this\screen_height( ) : EndIf
         
         If Not Change_x And *this\frame_x( ) <> X : Change_x = X - *this\frame_x( ) : EndIf
         If Not Change_y And *this\frame_y( ) <> Y : Change_y = Y - *this\frame_y( ) : EndIf
         If Not Change_width And *this\frame_width( ) <> Width : Change_width = Width - *this\frame_width( ) : EndIf
         If Not Change_height And *this\frame_height( ) <> Height : Change_height = Height - *this\frame_height( ) : EndIf
         
         If Not Change_x And *this\inner_x( ) <> ix : Change_x = ix - *this\inner_x( ) : EndIf
         If Not Change_y And *this\inner_y( ) <> iy : Change_y = iy - *this\inner_y( ) : EndIf
         If Not Change_width And *this\container_width( ) <> iwidth : Change_width = iwidth - *this\container_width( ) : EndIf
         If Not Change_height And *this\container_height( ) <> iheight : Change_height = iheight - *this\container_height( ) : EndIf
         ;          If Not Change_width And *this\inner_width( ) <> iwidth : Change_width = iwidth - *this\inner_width( ) : EndIf
         ;          If Not Change_height And *this\inner_height( ) <> iheight : Change_height = iheight - *this\inner_height( ) : EndIf
         
         ;\\
         If Change_x
            *this\resize\x = Change_x
            *this\frame_x( )  = X
            *this\inner_x( )  = ix
            *this\screen_x( ) = X - ( *this\bs - *this\fs )
            If *this\window
               *this\x[#__c_window] = X - *this\window\inner_x( )
            EndIf
         EndIf
         If Change_y
            *this\resize\y = Change_y
            *this\frame_y( )  = Y
            *this\inner_y( )  = iy
            *this\screen_y( ) = Y - ( *this\bs - *this\fs )
            If *this\window
               *this\y[#__c_window] = Y - *this\window\inner_y( )
            EndIf
         EndIf
         If Change_width
            If *this\bounds\move And Not Change_x
               If *this\bounds\move\max\x = ( *this\bounds\move\min\x + *this\frame_width( ) )
                  *this\bounds\move\max\x = *this\bounds\move\min\x + Width
               EndIf
            EndIf
            *this\resize\width = Change_width
            *this\frame_width( )     = Width
            *this\container_width( ) = iwidth
            *this\screen_width( )    = Width + ( *this\bs * 2 - *this\fs * 2 )
            If *this\container_width( ) < 0
               *this\container_width( ) = 0
            EndIf
            *this\inner_width( ) = *this\container_width( )
         EndIf
         If Change_height
            If *this\bounds\move And Not Change_y
               If *this\bounds\move\max\y = ( *this\bounds\move\min\y + *this\frame_height( ) )
                  *this\bounds\move\max\y = *this\bounds\move\min\y + Height
               EndIf
            EndIf
            *this\resize\height = Change_height
            *this\frame_height( )     = Height
            *this\container_height( ) = iheight
            *this\screen_height( )    = Height + ( *this\bs * 2 - *this\fs * 2 )
            If *this\container_height( ) < 0
               *this\container_height( ) = 0
            EndIf
            *this\inner_height( ) = *this\container_height( )
         EndIf
         
         ;\\
         If *this\anchors 
            a_move( *this,
                    *this\anchors\id,
                    *this\screen_x( ),
                    *this\screen_y( ),
                    *this\screen_width( ),
                    *this\screen_height( ) )
            
            a_line( *this )
         EndIf
         
         ;\\ if the widgets is composite
         If *this\__String( )
            Resize( *this\__String( ), 0, 0, *this\inner_width( ), *this\inner_height( ) )
         EndIf
         
         ;\\ resize vertical&horizontal scrollbars
         If *this\scroll And
            *this\scroll\v And
            *this\scroll\h
            
            ;\\ if the integral scroll bars
            If *this\type <> #__type_MDI
               bar_area_resize( *this, 0, 0, *this\container_width( ), *this\container_height( ) )
            EndIf
            
            ;\\
            If *this\type = #__type_MDI
               ;\\
               ;If Change_x Or Change_y
               Resize( *this\scroll\v, *this\container_width( ) - *this\scroll\v\width, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               Resize( *this\scroll\h, #PB_Ignore, *this\container_height( ) - *this\scroll\h\height, #PB_Ignore, #PB_Ignore )
               ;EndIf
               
               If Change_width Or Change_height
                  ;If *this\haschildren
                  bar_mdi_update( *this, 0, 0, 0, 0 )
                  bar_mdi_resize( *this, 0, 0, *this\container_width( ), *this\container_height( ) )
                  ;EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If *this\parent And
            *this\parent\scroll And
            *this\parent\scroll\v And
            *this\parent\scroll\h
            ;
            ;\\ parent mdi
            If *this\parent\type = #__type_MDI
               If *this\child < 0
                  If *this\parent\scroll\v <> *this And
                     *this\parent\scroll\h <> *this And
                     *this\parent\scroll\v\bar\PageChange( ) = 0 And
                     *this\parent\scroll\h\bar\PageChange( ) = 0
                     
                     bar_mdi_update( *this\parent, *this\container_x( ), *this\container_y( ), *this\frame_width( ), *this\frame_height( ) )
                     bar_mdi_resize( *this\parent, 0, 0, *this\parent\container_width( ), *this\parent\container_height( ) )
                  EndIf
               EndIf
               ;
            Else
               If is_integral_( *this )
                  If *this\parent\container_width( ) = *this\parent\inner_width( ) And
                     *this\parent\container_height( ) = *this\parent\inner_height( )
                     ; Debug ""+*this\parent\scroll\v\bar\max +" "+ *this\parent\scroll\v\bar\page\len +" "+ *this\parent\scroll\h\bar\max +" "+ *this\parent\scroll\h\bar\page\len
                     
                     If *this\parent\scroll\v\bar\max > *this\parent\scroll\v\bar\page\len Or
                        *this\parent\scroll\h\bar\max > *this\parent\scroll\h\bar\page\len
                        
                        bar_area_resize( *this\parent, 0, 0, *this\parent\container_width( ), *this\parent\container_height( ) )
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ; if the integral menu bar
         If *this\__Menu( )
            *this\inner_x( ) = X
            *this\inner_y( ) = Y
            
            ;\\
            If *this\__Menu( )\autosize
               Resize( *this\__Menu( ), 0, 0, *this\inner_width( ), *this\inner_height( ) )
            Else
               If *this\__Menu( )\bar\vertical
                  If *this\fs[1]
                     Resize( *this\__Menu( ), *this\fs, *this\fs, *this\fs[1], *this\inner_height( ) )
                  EndIf
                  If *this\fs[3]
                     Resize( *this\__Menu( ), *this\frame_width( ) - *this\fs[3], *this\fs, *this\fs[3], *this\inner_height( ) )
                  EndIf
               Else
                  If *this\fs[2]
                     Resize( *this\__Menu( ), *this\fs, *this\fs + *this\TitleBarHeight, *this\inner_width( ), *this\MenuBarHeight )
                  EndIf
                  If *this\fs[4]
                     Resize( *this\__Menu( ), *this\fs, *this\frame_height( ) - *this\fs[4], *this\inner_width( ), *this\fs[4] )
                  EndIf
               EndIf
            EndIf
            
            *this\inner_x( ) + *this\fs + *this\fs[1]
            *this\inner_y( ) + *this\fs + *this\fs[2]
         EndIf
         
         ;\\ if the integral tab bar
         If *this\__Tab( )
            ;If *this\fs[1] Or *this\fs[3]
               *this\inner_x( ) = X
            ;EndIf
            ;If *this\fs[2] Or *this\fs[4]
               *this\inner_y( ) = Y
            ;EndIf
            
            ;\\
            If *this\__Tab( )\autosize
               Resize( *this\__Tab( ), 0, 0, *this\inner_width( ), *this\inner_height( ) )
            Else
               If *this\__Tab( )\bar\vertical
                  If *this\fs[1]
                     Resize( *this\__Tab( ), *this\fs, *this\fs, *this\fs[1], *this\inner_height( ) )
                  EndIf
                  If *this\fs[3]
                     Resize( *this\__Tab( ), *this\frame_width( ) - *this\fs[3], *this\fs, *this\fs[3], *this\inner_height( ) )
                  EndIf
               Else
                  If *this\fs[2]
                     Resize( *this\__Tab( ), *this\fs, *this\fs + *this\TitleBarHeight + *this\MenuBarHeight, *this\inner_width( ), *this\ToolBarHeight ) ;, *this\fs[2] - *this\TitleBarHeight - *this\MenuBarHeight ) ; 
                  EndIf
                  If *this\fs[4]
                     Resize( *this\__Tab( ), *this\fs, *this\frame_height( ) - *this\fs[4], *this\inner_width( ), *this\fs[4] )
                  EndIf
               EndIf
            EndIf
            
            ;If *this\fs[1] Or *this\fs[3]
               *this\inner_x( ) + *this\fs + *this\fs[1]
            ;EndIf
            ;If *this\fs[2] Or *this\fs[4]
               *this\inner_y( ) + *this\fs + *this\fs[2]
            ;EndIf
         EndIf
         
         ;\\
         If *this\type = #__type_ComboBox
            If *this\__String( )
               *this\ComboButton( )\width = *this\fs[3]
               *this\ComboButton( )\x     = ( *this\x + *this\width ) - *this\fs[3]
            Else
               *this\ComboButton( )\width = *this\inner_width( )
               *this\ComboButton( )\x     = *this\inner_x( )
            EndIf
            
            *this\ComboButton( )\y      = *this\inner_y( )
            *this\ComboButton( )\height = *this\inner_height( )
         EndIf
         
         ;\\
         If *this\bar    
            If *this\type = #__type_Splitter   
               bar_Update( *this, 2 )
            Else
               If *this\bar\max
                  bar_Update( *this, 1 )
               EndIf
            EndIf
         EndIf
         
         ;\\
         If *this\type = #__type_Window
            ; чтобы закруглять только у окна с титлебаром
            If *this\fs[2]
               If *this\round
                  *this\caption\round = *this\round
                  *this\round         = 0
               EndIf
            EndIf
            
            ; caption title bar
            If Not *this\caption\hide
               *this\caption\x      = *this\frame_x( ) + *this\fs
               *this\caption\y      = *this\frame_y( ) + *this\fs
               *this\caption\width  = *this\frame_width( ) - *this\fs * 2
               
               *this\caption\height = *this\TitleBarHeight + *this\fs - 1
               If *this\caption\height > *this\frame_height( ) - *this\fs 
                  *this\caption\height = *this\frame_height( ) - *this\fs 
               EndIf
               
               ; caption close button
               If Not *this\CloseButton( )\hide
                  *this\CloseButton( )\x = ( *this\caption\x + *this\caption\width ) - ( *this\CloseButton( )\width + *this\caption\_padding )
                  *this\CloseButton( )\y = *this\frame_y( ) + ( *this\caption\height - *this\CloseButton( )\height ) / 2
               EndIf
               
               ; caption maximize button
               If Not *this\MaximizeButton( )\hide
                  If *this\CloseButton( )\hide
                     *this\MaximizeButton( )\x = ( *this\caption\x + *this\caption\width ) - ( *this\MaximizeButton( )\width + *this\caption\_padding )
                  Else
                     *this\MaximizeButton( )\x = *this\CloseButton( )\x - ( *this\MaximizeButton( )\width + *this\caption\_padding )
                  EndIf
                  *this\MaximizeButton( )\y = *this\frame_y( ) + ( *this\caption\height - *this\MaximizeButton( )\height ) / 2
               EndIf
               
               ; caption minimize button
               If Not *this\MinimizeButton( )\hide
                  If *this\MaximizeButton( )\hide
                     *this\MinimizeButton( )\x = *this\CloseButton( )\x - ( *this\MinimizeButton( )\width + *this\caption\_padding )
                  Else
                     *this\MinimizeButton( )\x = *this\MaximizeButton( )\x - ( *this\MinimizeButton( )\width + *this\caption\_padding )
                  EndIf
                  *this\MinimizeButton( )\y = *this\frame_y( ) + ( *this\caption\height - *this\MinimizeButton( )\height ) / 2
               EndIf
               
               ; caption help button
               If Not *this\HelpButton( )\hide
                  If Not *this\MinimizeButton( )\hide
                     *this\HelpButton( )\x = *this\MinimizeButton( )\x - ( *this\HelpButton( )\width + *this\caption\_padding )
                  ElseIf Not *this\MaximizeButton( )\hide
                     *this\HelpButton( )\x = *this\MaximizeButton( )\x - ( *this\HelpButton( )\width + *this\caption\_padding )
                  Else
                     *this\HelpButton( )\x = *this\CloseButton( )\x - ( *this\HelpButton( )\width + *this\caption\_padding )
                  EndIf
                  *this\HelpButton( )\y = *this\CloseButton( )\y
               EndIf
               
               ; title bar width
               If Not *this\HelpButton( )\hide
                  *this\caption\width = *this\HelpButton( )\x - *this\caption\x - *this\caption\_padding
               ElseIf Not *this\MinimizeButton( )\hide
                  *this\caption\width = *this\MinimizeButton( )\x - *this\caption\x - *this\caption\_padding
               ElseIf Not *this\MaximizeButton( )\hide
                  *this\caption\width = *this\MaximizeButton( )\x - *this\caption\x - *this\caption\_padding
               ElseIf Not *this\CloseButton( )\hide
                  *this\caption\width = *this\CloseButton( )\x - *this\caption\x - *this\caption\_padding
               EndIf
            EndIf
         EndIf
         
         ;\\
         If ( Change_x Or Change_y Or Change_width Or Change_height )
            If ( Change_width Or Change_height )
               If *this\type = #__type_Image Or
                  *this\type = #__type_ButtonImage
                  *this\image\ImageChange( ) = 1
               EndIf
            EndIf
            
            ;\\
            *this\root\repaint = #True
            
            ;\\
            If *this\type = #__type_ScrollArea
               If IsGadget(*this\scroll\gadget[1])
                  ResizeGadget(*this\scroll\gadget[1], DPIUnScaledX(*this\inner_x( )), DPIUnScaledY(*this\inner_y( )), DPIUnScaledX(*this\inner_width( )), DPIUnScaledY(*this\inner_height( )))
                  CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                     UpdateWindow_(GadgetID(*this\scroll\gadget[1]))
                  CompilerEndIf
               EndIf
            EndIf
            
            ;
            ;\\ Post Event
            If *this\resize\send
               Send( *this, #__event_resize )
            EndIf
         EndIf
         
         
         ;-\\ children's resize
         ;\\ then move and size parent
         ;\\ resize all children's
         If Not *this\resize\nochildren  
            If *this\type <> #__type_Splitter
               If *this\haschildren 
                  ;Debug *this\class
                  Protected pw, ph
                  
                  If StartEnum( *this )
                     If widget( )\parent <> *this
                        widget( )\resize\clip = #True
                        Continue
                     EndIf
                     ;
                     If Not is_scrollbars_( widget( ))
                        If widget( )\align
                           ;\\
                           If widget( )\parent\align
                              pw = ( widget( )\parent\inner_width( ) - widget( )\parent\align\width )
                              ph = ( widget( )\parent\inner_height( ) - widget( )\parent\align\height )
                           EndIf
                           
                           ;\\
                           ;\\ horizontal
                           ;\\
                           If widget( )\align\left > 0
                              X = widget( )\align\x
                              If widget( )\align\right < 0
                                 If widget( )\align\left = 0
                                    X + pw / 2
                                 EndIf
                                 Width = (( widget( )\align\x + widget( )\align\width ) + pw / 2 ) - X
                              EndIf
                           EndIf
                           If Not widget( )\align\right
                              Width = widget( )\align\width
                              
                              If Not widget( )\align\left
                                 X = widget( )\align\x
                                 If widget( )\align\left = 0
                                    X + pw / 2
                                 EndIf
                                 Width = (( widget( )\align\x + widget( )\align\width ) + pw / 2 ) - X
                              EndIf
                           EndIf
                           If widget( )\align\right > 0
                              X = widget( )\align\x
                              If widget( )\align\left < 0
                                 ;\\ ( left = proportional & right = 1 )
                                 X     = widget( )\align\x + pw / 2
                                 Width = (( widget( )\align\x + widget( )\align\width ) + pw ) - X
                              Else
                                 If widget( )\align\left = 0
                                    X + pw
                                 EndIf
                                 Width = (( widget( )\align\x + widget( )\align\width ) + pw ) - X
                              EndIf
                           EndIf
                           ;\\ horizontal proportional
                           If ( widget( )\align\left < 0 And widget( )\align\right <= 0 ) Or
                              ( widget( )\align\right < 0 And widget( )\align\left <= 0 )
                              Protected ScaleX.f = widget( )\parent\inner_width( ) / widget( )\parent\align\width
                              Width = ScaleX * widget( )\align\width
                              ;\\ center proportional
                              If widget( )\align\left < 0 And widget( )\align\right < 0
                                 X = ( widget( )\parent\inner_width( ) - Width ) / 2
                              ElseIf widget( )\align\left < 0 And widget( )\align\right = 0
                                 ;\\ right proportional
                                 X = widget( )\parent\inner_width( ) - ( widget( )\parent\align\width - widget( )\align\x - widget( )\align\width ) - Width
                              ElseIf ( widget( )\align\right < 0 And widget( )\align\left = 0 )
                                 ;\\ left proportional
                                 X = widget( )\align\x
                              EndIf
                           EndIf
                           
                           ;\\
                           ;\\ vertical
                           ;\\
                           If widget( )\align\top > 0
                              Y = widget( )\align\y
                              If widget( )\align\bottom < 0
                                 If widget( )\align\top = 0
                                    Y + ph / 2
                                 EndIf
                                 Height = (( widget( )\align\y + widget( )\align\height ) + ph / 2 ) - Y
                              EndIf
                           EndIf
                           If Not widget( )\align\bottom
                              Height = widget( )\align\height
                              
                              If Not widget( )\align\top
                                 Y = widget( )\align\y
                                 If widget( )\align\top = 0
                                    Y + ph / 2
                                 EndIf
                                 Height = (( widget( )\align\y + widget( )\align\height ) + ph / 2 ) - Y
                              EndIf
                           EndIf
                           If widget( )\align\bottom > 0
                              Y = widget( )\align\y
                              If widget( )\align\top < 0
                                 ;\\ ( top = proportional & bottom = 1 )
                                 Y      = widget( )\align\y + ph / 2
                                 Height = (( widget( )\align\y + widget( )\align\height ) + ph ) - Y
                              Else
                                 If widget( )\align\top = 0
                                    Y + ph
                                 EndIf
                                 Height = (( widget( )\align\y + widget( )\align\height ) + ph ) - Y
                              EndIf
                           EndIf
                           ;\\ vertical proportional
                           If ( widget( )\align\top < 0 And widget( )\align\bottom <= 0 ) Or
                              ( widget( )\align\bottom < 0 And widget( )\align\top <= 0 )
                              Protected ScaleY.f = widget( )\parent\inner_height( ) / widget( )\parent\align\height
                              Height = ScaleY * widget( )\align\height
                              ;\\ center proportional
                              If widget( )\align\top < 0 And widget( )\align\bottom < 0
                                 Y = ( widget( )\parent\inner_height( ) - Height ) / 2
                              ElseIf widget( )\align\top < 0 And widget( )\align\bottom = 0
                                 ;\\ bottom proportional
                                 Y = widget( )\parent\inner_height( ) - ( widget( )\parent\align\height - widget( )\align\y - widget( )\align\height ) - Height
                              ElseIf ( widget( )\align\bottom < 0 And widget( )\align\top = 0 )
                                 ;\\ top proportional
                                 Y = widget( )\align\y
                              EndIf
                           EndIf
                           
                           Resize( widget( ), DPIUnScaled(X), DPIUnScaled(Y), DPIUnScaled(Width), DPIUnScaled(Height) )
                        Else
                           Resize( widget( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                        EndIf
                     EndIf
                     ;
                     StopEnum( )
                  EndIf
                  
               EndIf
            EndIf
         EndIf
         
         ;
         ;;;PostRepaint( *this\root )
         ProcedureReturn *this\root\repaint
      EndProcedure
      
      ;-
      Procedure.i GetCanvasGadget( *this._s_WIDGET = #Null ) ; Returns canvas gadget
         Protected.i result
         If is_widget_( *this )
            result = *this\root\canvas\gadget
         Else
            If root( )
               result = root( )\canvas\gadget
            EndIf
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetCanvasWindow( *this._s_WIDGET = #Null ) ; Returns window
         Protected.i result
         If is_widget_( *this )
            If is_root_( *this )
               result = *this\root\canvas\window
            Else
               result = *this\window
            EndIf
         Else
            If root( )
               result = root( )\canvas\window
            EndIf
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetRoot( *this._s_WIDGET ) ; Returns root widget
         ProcedureReturn *this\root
      EndProcedure
      
      ;-
      Procedure.a GetFrame( *this._s_WIDGET, mode.b = 0 )
         ProcedureReturn *this\fs[mode]
      EndProcedure
      
      Procedure SetFrame( *this._s_WIDGET, size.a, mode.b = 0 )
         Protected result
         size = DPIScaled( size )
         If *this\fs <> size
            result   = *this\fs
            *this\bs = size
            *this\fs = size
            
            If *this\anchors
               a_size( *this\anchors\id, *this\anchors\size, *this\anchors\mode )
            EndIf
            
            If mode = - 1 ; auto pos
               Resize( *this, *this\container_x( ) - size, *this\container_y( ) - size, *this\frame_width( ) + size * 2, *this\frame_height( ) + size * 2 )
            ElseIf mode = - 2 ; auto pos
                              ;Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               Resize( *this, *this\container_x( ) - (size - result), *this\container_y( ) - (size - result), #PB_Ignore, #PB_Ignore )
            Else
               Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Procedure.s GetClass( *this._s_WIDGET )
         ProcedureReturn *this\class
      EndProcedure
      
      Procedure SetClass( *this._s_WIDGET, class.s )
         If *this\class <> class
            *this\class = class
            If *this\__Tab( )
               *this\__Tab( )\class = ClassFromType( *this\__Tab( )\type ) +"-"+ *this\class
            EndIf
            ProcedureReturn *this
         EndIf
      EndProcedure
      
      ;-
      Procedure.i GetCursor( *this._s_WIDGET, Type.a = 0 )
         ProcedureReturn *this\cursor[Type]
      EndProcedure
      
      Procedure.i SetCursor( *this._s_WIDGET, *cursor, Type.a = 0 )
         If *this\cursor[Type] <> *cursor
            If test_setcursor
               Debug "setCURSOR( " + *cursor +" )"
            EndIf
            
            *this\cursor[Type] = *cursor
            If Type <> 1
               *this\cursor[1] = *cursor
            EndIf
            ProcedureReturn 1
         EndIf
      EndProcedure
      
      Procedure.i ChangeCursor( *this._s_WIDGET, *cursor )
         If ChangeCurrentCursor( *this, *cursor )
            *this\cursor[1] = *cursor
         EndIf
      EndProcedure
      
      Procedure.i ChangeCurrentCursor( *this._s_WIDGET, *cursor )
         Protected result.i
           
         If CurrentCursor( ) <> *cursor
            If *cursor 
               cursor_change_widget = *this
            Else
               If cursor_change_widget
                  *this = cursor_change_widget
                  cursor_change_widget = 0
               EndIf
            EndIf
            
            If test_changecursor
               Debug ""+*this\class + "  ChangeCurrentCursor( "+ *cursor +" ) " +" reset "+ CurrentCursor( )
            EndIf
            
            result = Send( *this, #__event_cursor, #PB_All, CurrentCursor( ) )
            
            If *cursor
               If result > 0
                  *cursor = result
               EndIf
            EndIf
            CurrentCursor( ) = *cursor
            
            Cursor::Set( *this\root\canvas\gadget, *cursor ) 
         EndIf
         
         ProcedureReturn *cursor
      EndProcedure
      
      Procedure   UpdateCurrentCursor( *this._s_WIDGET )
         If MouseButtonPress( )
            If mouse( )\drop
               If *this\drop And MouseEnter( *this ) And 
                  *this\drop\format = mouse( )\drop\format And
                  *this\drop\actions & mouse( )\drop\actions And
                  ( *this\drop\private = mouse( )\drop\private Or
                    *this\drop\private & mouse( )\drop\private )
                  ;
                  If mouse( )\drag <> #PB_Drag_Enter
                     mouse( )\drag = #PB_Drag_Enter
                     ; Debug "#PB_Drag_Enter"
                     
                     If CurrentCursor( ) = cursor::#__cursor_Drag
                        ChangeCurrentCursor( PressedWidget( ), cursor::#__cursor_Drop )
                     EndIf
                  EndIf
               Else
                  If Not *this\press
                     If mouse( )\drag = #PB_Drag_Enter
                        mouse( )\drag = #PB_Drag_Leave
                        ; Debug "#PB_Drag_Leave"
                        
                        If CurrentCursor( ) = cursor::#__cursor_Drop
                           ChangeCurrentCursor( PressedWidget( ), cursor::#__cursor_Drag )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         Else
            If Not a_index( )
               If *this\cursor[1]
                  If *this\disable
                     If CurrentCursor( )
                        ChangeCurrentCursor( *this, 0 )
                     EndIf
                  Else
                     If MouseEnter( *this )
                        If cursor_change_widget <> *this
                           cursor_change_widget = *this
                        EndIf
                        
                        If CurrentCursor( ) <> *this\cursor[1]
                           ChangeCurrentCursor( *this, *this\cursor[1] )
                        EndIf
                     ElseIf *this\fs <> 1
                        ;Debug ""+*this\bs +" "+ *this\fs
                        
                        If CurrentCursor( )
                           ChangeCurrentCursor( *this, 0 )
                        EndIf
                     EndIf
                  EndIf
               Else
                  If CurrentCursor( )
                     ChangeCurrentCursor( *this, 0 )
                  EndIf
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Macro add_color( _result_, _address_, _color_type_, _color_, _alpha_, _column_ = )
         If Not _address_\alpha And _alpha_
            _address_\alpha.allocate( COLOR )
         EndIf
         
         Select _color_type_
            Case #__color_line
               If _address_\line#_column_ <> _color_
                  _address_\line#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\line#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
            Case #__color_back
               If _address_\back#_column_ <> _color_
                  _address_\back#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\back#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
            Case #__color_fore
               If _address_\fore#_column_ <> _color_
                  _address_\fore#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\fore#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
            Case #__color_front
               If _address_\front#_column_ <> _color_
                  _address_\front#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\front#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
            Case #__color_frame
               If _address_\frame#_column_ <> _color_
                  _address_\frame#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\frame#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
         EndSelect
         
      EndMacro
      
      Procedure.l GetColor( *this._s_WIDGET, ColorType.l )
         Protected Color.l
         
         With *This
            Select ColorType
               Case #__color_line : Color = *this\color\line
               Case #__color_back : Color = *this\color\back
               Case #__color_front : Color = *this\color\front
               Case #__color_frame : Color = *this\color\frame
            EndSelect
         EndWith
         
         ProcedureReturn Color
      EndProcedure
      
      Procedure.l SetColor( *this._s_WIDGET, ColorType.l, Color.l, Column.l = 0 )
         *this\ColorAlphaColor( ).allocate( COLOR )
         Protected result.l, alpha.a = Alpha( Color )
         
         If Not alpha
            Color = Color & $FFFFFF | 255 << 24
         EndIf
         
         add_color( result, *this\color, ColorType, Color, alpha, [Column] )
         
         If *this\scroll
            If ColorType = #__color_back
               If *this\scroll\v
                  *this\scroll\v\color\back[Column] = color
               EndIf
               If *this\scroll\h
                  *this\scroll\h\color\back[Column] = color
               EndIf
            EndIf
         EndIf
         
         If result
            PostRepaint( *this\root )
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l GetItemColor( *this._s_WIDGET, Item.l, ColorType.l, Column.l = 0 )
         Protected result, *color._s_color
         
         Select *this\type
            Case #__type_Editor, #__type_Tree, #__type_ListIcon
               
               If is_item_( *this, item ) And
                  SelectElement( *this\__rows( ), Item )
                  *color = *this\__rows( )\color
               EndIf
            Default
               *color = *this\bar\button[Item]\color
         EndSelect
         
         Select ColorType
            Case #__color_line : result = *color\line[Column]
            Case #__color_back : result = *color\back[Column]
            Case #__color_front : result = *color\front[Column]
            Case #__color_frame : result = *color\frame[Column]
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l SetItemColor( *this._s_WIDGET, Item.l, ColorType.l, Color.l, Column.l = 0 )
         Protected result, alpha.a = Alpha( Color )
         
         ;
         If *this\row And ListSize( *this\__rows( ) ) ;*this\type = #__type_Tree Or *this\type = #__type_Editor
            If Item = #PB_All
               PushListPosition( *this\__rows( ))
               ForEach *this\__rows( )
                  add_color( result, *this\__rows( )\color, ColorType, Color, alpha, [Column] )
               Next
               PopListPosition( *this\__rows( ))
               
            Else
               If is_item_( *this, item ) And SelectElement( *this\__rows( ), Item )
                  add_color( result, *this\__rows( )\color, ColorType, Color, alpha, [Column] )
               EndIf
            EndIf
         EndIf
         
         If *this\type = #__type_Panel
            *this = *this\__tab( )
            If Item = #PB_All
               PushListPosition( *this\__tabs( ))
               ForEach *this\__tabs( )
                  add_color( result, *this\__tabs( )\color, ColorType, Color, alpha, [Column] )
               Next
               PopListPosition( *this\__tabs( ))
               
            Else
               If is_item_( *this, item ) And SelectElement( *this\__tabs( ), Item )
                  add_color( result, *this\__tabs( )\color, ColorType, Color, alpha, [Column] )
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure SetBackgroundColor( *this._s_WIDGET, color.l )
         ProcedureReturn SetColor( *this, #__color_back, color )
      EndProcedure
      
      ;-
      Macro add_image( _this_, _address_, _image_ )
         ;
         If IsImage( _image_ )
            _address_\change = 1
            _address_\img    = _image_
            _address_\id     = ImageID( _image_ )
            
            ;         CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
            ;           If _address_\size
            ;             resize_image( _address_\id,
            ;                          _address_\size,
            ;                          _address_\size )
            ;
            ;             _address_\width = _address_\size
            ;             _address_\height = _address_\size
            ;           Else
            ;             _address_\width = get_image_width( _address_\id )
            ;             _address_\height = get_image_height( _address_\id )
            ;           EndIf
            ;         CompilerElse
            If _address_\size
               ResizeImage( _image_,
                            _address_\size,
                            _address_\size )
               
               _address_\width  = _address_\size
               _address_\height = _address_\size
            Else
               _address_\width  = ImageWidth( _image_ )
               _address_\height = ImageHeight( _image_ )
            EndIf
            ;         CompilerEndIf
            
            _address_\depth = ImageDepth( _image_, #PB_Image_OriginalDepth )
            
            If _this_\row
               _this_\MarginLine( )\width = _address_\padding\x +
                                            _address_\width + 2
            EndIf
         Else
            _address_\change = - 1
            _address_\img    = - 1
            _address_\id     = 0
            _address_\width  = 0
            _address_\height = 0
         EndIf
      EndMacro
      
      Procedure SetImage( *this._s_WIDGET, *image );, mode.a = 0 )
         add_image( *this, *this\Image, *image )
      EndProcedure
      
      Procedure.i GetItemImage( *this._s_WIDGET, Item.l )
         Protected result
         
         If *this\type = #__type_Editor Or
            *this\type = #__type_Properties Or
            *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #PB_Default
            EndIf
            
            result = *this\__rows( )\image\img
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemImage( *this._s_WIDGET, Item.l, Image.i )
         Protected result
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_item_( *this, item ) And
               SelectElement( *this\__rows( ), item )
               If *this\__rows( )\image\img <> Image
                  add_image( *this, *this\__rows( )\Image, Image )
                  *this\WidgetChange( ) = 1
               EndIf
            EndIf
         EndIf
         
         PostRepaint( *this\root )
         ProcedureReturn result
      EndProcedure
      
      Procedure SetBackgroundImage( *this._s_WIDGET, *image )
         add_image( *this, *this\Image[#__image_background], *image )
      EndProcedure
      
      ;-
      Procedure.i GetState( *this._s_WIDGET )
         ; This is a universal function which works For almost all gadgets: 
         ; 
         ; - ButtonImage( )  : returns 1 If a #__flag_ButtonToggle button is toggled, Else 0. 
         ; - Button( )       : returns 1 If a #__flag_ButtonToggle button is toggled, Else 0. 
         ; - Option( )       : returns 1 If activated, 0 otherwise. 
         ; - CheckBox( )     : returns one of the following values:
         ;                           #PB_Checkbox_Checked  : The check mark is set.
         ;                           #PB_Checkbox_Unchecked: The check mark is Not set.
         ;                           #PB_Checkbox_Inbetween: The "in between" state is set. (Only For #PB_CheckBox_ThreeState checkboxes)
         ;
         ; - Calendar( )     : returns the currently selected date. 
         ; - Date( )         : returns the currently selected date/time. If #PB_Date_CheckBox was used, And the checkbox is unchecked, 0 is returned. 
         ;
         ; - Shortcut( )     : returns the currently selected keyboard shortcut. 
         ; - Image( )        : returns the ImageID of the currently displayed image. 
         ; - IPAddress( )    : returns the current IP address. 
         ;
         ; - MDI( )          : returns the currently focused child window, -1 If none has the focus. 
         ; - Panel( )        : returns the current panel index, -1 If no panel. 
         ;
         ; - Spin( )         : returns the current value of the SpinGadget. 
         ; - Splitter( )     : returns the current splitter position, in pixels. 
         ; - ProgressBar( )  : returns the current value of the ProgressBar. 
         ; - ScrollBar( )    : returns the current slider position. 
         ; - TrackBar( )     : returns the current position of the TrackBar (value inside the minimum - maximum range). 
         ;
         ; - ListIcon( )     : returns the first selected item index, -1 If none is selected. 
         ; - ComboBox( )     : returns the currently selected item index, -1 If none is selected. 
         ; - ListView( )     : returns the currently selected item index, -1 If none is selected. 
         ; - Tree( )         : returns the currently selected item index, -1 If none is selected.
         ; - ExplorerList( ) : returns the index of the first selected item in the Gadget, -1 If none is selected. 
         ; - ExplorerTree( ) : returns the type of the currently selected item (#PB_Explorer_File Or #PB_Explorer_Directory). 
         
         ;\\ custom object
         If *this\type = 0
            ; ProcedureReturn *this\state
         EndIf
         
         ;\\ ComboBox
         If *this\__Popup( )
            *this = *this\__Popup( )
         EndIf
         
         If *this\class = "IPAddress"
            ProcedureReturn *this\LineFocusedIndex( )
         EndIf
         
         ;\\
         If *this\type = #__type_Window
            If *this\resize\flag & #__resize_minimize
               ProcedureReturn #__window_Minimize
            EndIf
            If *this\resize\flag & #__resize_maximize
               ProcedureReturn #__window_Maximize
            EndIf
            ProcedureReturn #__window_Normal
         EndIf
         
         ;\\
         If *this\type = #__type_Editor
            ProcedureReturn *this\LineFocusedIndex( )
         EndIf
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            ProcedureReturn *this\RowFocusedIndex( )
         EndIf
         
         If *this\type = #__type_Panel
            If *this\__Tab( )
               ProcedureReturn *this\__Tab( )\TabState( )
            EndIf
         EndIf
         
         If *this\type = #__type_CheckBox Or
            *this\type = #__type_Option Or
            *this\type = #__type_Button Or
            *this\type = #__type_ButtonImage
            
            If *this\togglebox
               ProcedureReturn *this\ToggleBoxState( )
            EndIf
         EndIf
         
         If is_bar_( *this ) Or *this\type = #__type_TabBar
            ;
            ProcedureReturn *this\TabState( )
         Else
            If *this\bar
               If *this\type = #__type_Splitter
                  ProcedureReturn DPIUnScaled( *this\bar\thumb\pos )
               EndIf
               ProcedureReturn *this\bar\page\pos
            EndIf
         EndIf
      EndProcedure
      
      Procedure.b SetState( *this._s_WIDGET, state.i )
         ; This is a universal function which works For almost all gadgets: 
         ; 
         ; - ButtonImage( ) : change the current state of a #__flag_ButtonToggle gadget (1 = toggled, 0 = normal). 
         ; - Button( )      : change the current state of a #__flag_ButtonToggle gadget (1 = toggled, 0 = normal). 
         ; - Option( )      : 1 To activate it, 0 otherwise. 
         ; - CheckBox( )    : Change the state of the checkbox. The following values are possible:
         ;                     #PB_Checkbox_Checked  : Set the check mark.
         ;                     #PB_Checkbox_Unchecked: Remove the check mark.
         ;                     #PB_Checkbox_Inbetween: Set the "in between" state. (Only For #PB_CheckBox_ThreeState checkboxes)
         ;
         ; - Calendar( )    : set the currently selected date. 
         ; - Date( )        : set the currently displayed date/time. If #PB_Date_CheckBox was used, set 'State' To 0 To uncheck the checkbox. 
         ;
         ; - Shortcut( )    : Change the current shortcut. 
         ; - Image( )       : change the current image of the gadget. 
         ; - IPAddress( )   : change the current IP address. 
         ;
         ; - Panel( )       : change the current panel. 
         ; - MDI( )         : Change the currently focused childwindow (by giving the related #Window number), Or use one of the following values:
         ;                     #PB_MDI_Cascade         : Cascade the child windows
         ;                     #PB_MDI_TileVertically  : Tile the childwindows vertically
         ;                     #PB_MDI_TileHorizontally: Tile the childwindows horizontally
         ;                     #PB_MDI_Next            : Give focus To the Next childwindow
         ;                     #PB_MDI_Previous        : Give focus To the previous childwindow
         ;                     #PB_MDI_Arrange         : Arrange the iconic (minimized) windows
         ;
         ; - Spin( )        : change the current value. 
         ; - Splitter( )    : change the current splitter position, in pixels. 
         ; - TrackBar( )    : change the current cursor position. 
         ; - ProgressBar( ) : change progress bar value. A value of #PB_Progressbar_Unknown can be used To indicate that the progress is unknown. 
         ; - ScrollBar( )   : change the current slider position. 
         ;
         ; - ListIcon( )    : change the currently selected item. If -1 is specified, all items will be deselected. 
         ; - ComboBox( )    : change the currently selected item. 
         ; - ListView( )    : change the currently selected item. . If -1 is specified, it will remove the selection. 
         ; - Tree( )        : change the currently selected item, -1 selects no item. 
         ; - Web( )         : perform some action on the gadget. See WebGadget For further descriptions.
         
         Protected result
         
         ;\\ custom object
         If *this\type = 0
            ; *this\state = state
            ProcedureReturn #True
         EndIf
         
         If *this\child
            *this\parent\redraw = 1
         Else
            *this\redraw = 1
         EndIf
         
         
         ;\\ Ok
         If *this\togglebox
            If *this\ToggleBoxState( ) <> state
               *this\ToggleBoxState( ) = state
               
               If *this\type = #__type_Button Or
                  *this\type = #__type_ButtonImage
                  
                  If state
                     *this\ColorState( ) = #__s_2
                  Else
                     If *this\enter
                        *this\ColorState( ) = #__s_1
                     Else
                        *this\ColorState( ) = #__s_0
                     EndIf
                  EndIf
               EndIf
               
               ;
               If *this\type = #__type_Option Or
                  *this\type = #__type_CheckBox
                  
                  If *this\__Option( ) And
                     *this\__Option( )\__Option( ) <> *this
                     If *this\__Option( )\__Option( )
                        *this\__Option( )\__Option( )\ToggleBoxState( ) = #False
                     EndIf
                     *this\__Option( )\__Option( ) = *this
                  EndIf
               EndIf
               
               ; toggle box change
               If Not Send( *this, #__event_Change )
                  PostEventRepaint( *this\root )
               EndIf
               
               ProcedureReturn #True
            EndIf
         EndIf
         
         ;\\
         If *this\type = #__type_ComboBox
            If *this\__Popup( )
               If is_no_select_item_( *this\__Popup( )\__rows( ), State )
                  ProcedureReturn #False
               EndIf
               
               If *this\__Popup( )\RowFocused( ) <> *this\__Popup( )\__rows( )
                  
                  If *this\__Popup( )\RowFocused( )
                     If *this\__Popup( )\RowFocused( )\_focus = 1
                        *this\__Popup( )\RowFocused( )\_focus = 0
                     EndIf
                     
                     *this\__Popup( )\RowFocused( )\ColorState( ) = #__s_0
                  EndIf
                  
                  *this\__Popup( )\RowFocused( )             = *this\__Popup( )\__rows( )
                  *this\__Popup( )\RowFocused( )\_focus = 1
                  *this\__Popup( )\RowFocused( )\ColorState( ) = #__s_2
                  Debug "SETSTATE - combo " + GetState( *this\__Popup( ) )
                  ;*this\text\string = *this\__Popup( )\RowFocused( )\text\string
                  
                  SetText( *this, *this\__Popup( )\RowFocused( )\text\string )
                  ;SetText( *this, GetItemText( *this\__Popup( ), GetState( *this\__Popup( ) ) ) )
               EndIf
            EndIf
         EndIf
         
         ;\\ - widget::IPaddress_SetState( )
         If *this\class = "IPAddress" ; type = #__type_IPAddress
            If *this\LineFocusedIndex( ) <> State
               *this\LineFocusedIndex( ) = State
               SetText( *this, Str( IPAddressField( State, 0 )) + "." +
                               Str( IPAddressField( State, 1 )) + "." +
                               Str( IPAddressField( State, 2 )) + "." +
                               Str( IPAddressField( State, 3 ) ))
            EndIf
         EndIf
         
         ;\\ - widget::Window_SetState( )
         If *this\type = #__type_Window
            ; restore state
            If state = #__window_Normal
               If Not Send( *this, #__event_restore )
                  *this\resize\flag | #__resize_restore
                  If *this\resize\flag & #__resize_minimize
                     *this\resize\flag & ~ #__resize_minimize
                     ;                   *this\CloseButton( )\hide    = 0
                     ;                   *this\MinimizeButton( )\hide = 0
                  EndIf
                  If *this\resize\flag & #__resize_maximize
                     *this\resize\flag & ~ #__resize_maximize
                     ;                   *this\MaximizeButton( )\hide = 0
                  EndIf
                  
                  Resize( *this,
                          *this\x[#__c_restore],
                          *this\y[#__c_restore],
                          *this\width[#__c_restore],
                          *this\height[#__c_restore] )
                  
                  ;                If is_root_( *this )
                  ;                   PostEvent( #PB_Event_RestoreWindow, *this\root\canvas\window, *this )
                  ;                EndIf
                  
                  result = #True
               EndIf
            EndIf
            
            ; maximize state
            If state = #__window_Maximize
               If Not Send( *this, #__event_maximize )
                  *this\resize\flag | #__resize_maximize
                  If *this\resize\flag & #__resize_minimize
                     *this\resize\flag & ~ #__resize_minimize
                  Else
                     *this\x[#__c_restore]      = *this\container_x( )
                     *this\y[#__c_restore]      = *this\container_y( )
                     *this\width[#__c_restore]  = *this\container_width( )
                     *this\height[#__c_restore] = *this\container_height( )
                  EndIf
                  
                  ;                If *this\MinimizeButton( )\hide = 0
                  ;                   *this\MaximizeButton( )\hide = 1
                  ;                EndIf
                  
                  Resize( *this, *this\bs - *this\fs, *this\bs - *this\fs,
                          *this\parent\container_width( ) - *this\bs * 2,
                          *this\parent\container_height( ) - *this\bs * 2 - *this\fs[2] )
                  
                  ;                If is_root_( *this )
                  ;                   PostEvent( #PB_Event_MaximizeWindow, *this\root\canvas\window, *this )
                  ;                EndIf
                  
                  result = #True
               EndIf
            EndIf
            
            ; minimize state
            If state = #__window_Minimize
               If Not Send( *this, #__event_Minimize )
                  *this\resize\flag | #__resize_minimize
                  If *this\resize\flag & #__resize_maximize
                     *this\resize\flag & ~ #__resize_maximize
                  Else
                     *this\x[#__c_restore]      = *this\container_x( )
                     *this\y[#__c_restore]      = *this\container_y( )
                     *this\width[#__c_restore]  = *this\container_width( )
                     *this\height[#__c_restore] = *this\container_height( )
                  EndIf
                  
                  ;                *this\CloseButton( )\hide = 1
                  ;                If *this\MaximizeButton( )\hide = 0
                  ;                   *this\MinimizeButton( )\hide = 1
                  ;                EndIf
                  
                  Resize( *this,
                          *this\x[#__c_restore],
                          *this\parent\container_height( ) - *this\bs * 2 - *this\fs[2] + (*this\bs - *this\fs),
                          *this\width[#__c_restore],
                          *this\bs * 2 - *this\fs[2] )
                  
                  ;                If is_root_( *this )
                  ;                   PostEvent( #PB_Event_MinimizeWindow, *this\root\canvas\window, *this )
                  ;                EndIf
                  
                  result = #True
               EndIf
            EndIf
         EndIf
         
         ;\\ - widget::Editor_SetState( )
         If *this\type = #__type_Editor
            edit_SetState( *this, state )
         EndIf
         
         ;\\ - widget::tree_setState
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If *this\countitems
               ;\\ min\max state
               If State < 0
                  State = - 1
               EndIf
               If State > *this\countitems - 1
                  State = *this\countitems - 1
               EndIf
               
               
               ;\\
               If *this\RowFocusedIndex( ) <> state
                  ; Debug "SetState "+*this\class +" "+ *this\RowFocusedIndex( ) +" "+ state
                  *this\RowFocusedIndex( ) = state
                  
                  ;\\ scroll to visible
                  *this\ScrollState( ) = - 1
                  *this\WidgetChange( ) = 1
                  
                  If state = - 1
                     ;\\ reset all selected items
                     If *this\RowFocused( )
                        *this\RowFocused( )\_focus = 0
                        *this\RowFocused( )\ColorState( ) = #__s_0
                        *this\RowFocused( )             = #Null
                     EndIf
                  Else
                     If is_no_select_item_( *this\__rows( ), State )
                        ProcedureReturn #False
                     EndIf
                     
                     ;\\ example file "D&D-items"
                     If *this\drop
                        If *this\RowPressed( )
                           *this\__rows( )\position = State
                           
                           Debug " SETSTATE ---------- *this\RowPressed( )\children's " + *this\RowPressed( )\childrens
                           
                           ;\\
                           PushListPosition( *this\__rows( ))
                           If *this\__rows( )\position > *this\RowPressed( )\position
                              ;\\ drag up and drop down
                              While PreviousElement( *this\__rows( ))
                                 If *this\__rows( )\position > *this\RowPressed( )\position
                                    *this\__rows( )\position - 1 - *this\RowPressed( )\childrens
                                 EndIf
                              Wend
                           ElseIf *this\__rows( )\position < *this\RowPressed( )\position
                              ;\\ drag down and drop up
                              While NextElement( *this\__rows( ))
                                 If *this\__rows( )\position < *this\RowPressed( )\position
                                    *this\__rows( )\position + 1 + *this\RowPressed( )\childrens
                                 EndIf
                              Wend
                           EndIf
                           PopListPosition( *this\__rows( ))
                           
                           ;\\
                           PushListPosition( *this\__rows( ))
                           While NextElement( *this\__rows( ))
                              If *this\__rows( )\sublevel = *this\RowPressed( )\sublevel
                                 Break
                              ElseIf *this\__rows( )\sublevel > *this\RowPressed( )\sublevel : State + 1
                                 *this\__rows( )\position = State
                              EndIf
                           Wend
                           PopListPosition( *this\__rows( ))
                        EndIf
                     EndIf
                     
                     ;\\
                     If *this\RowFocused( ) <> *this\__rows( )
                        If *this\RowFocused( )
                           *this\RowFocused( )\_focus = 0
                           *this\RowFocused( )\ColorState( ) = #__s_0
                        EndIf
                        
                        *this\RowFocused( ) = *this\__rows( )
                        
                        ; click select mode
                        If *this\mode\clickSelect
                           If *this\RowFocused( )\_focus = 1
                              *this\RowFocused( )\_focus = 0
                              *this\RowFocused( )\ColorState( ) = #__s_0
                           Else
                              *this\RowFocused( )\_focus = 1
                              *this\RowFocused( )\ColorState( ) = #__s_3
                           EndIf
                           
                           ; list items change
                           DoEvents( *this, #__event_Change, *this\RowFocused( )\position, *this\RowFocused( ) )
                        Else
                           *this\RowFocused( )\_focus = 1
                           *this\RowFocused( )\ColorState( ) = #__s_2 + Bool( *this\focus = #False )
                        EndIf
                        
                        PostRepaint( *this\root )
                        ProcedureReturn #True
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If is_bar_( *this )
            result = bar_PageChange( *this, state )
         EndIf
         
         ;\\
         Select *this\type
            Case #__type_Panel
               result = bar_tab_SetState( *this\__Tab( ), state )
               
            Case #__type_TabBar
               result = bar_tab_SetState( *this, state )
               
            Case #__type_Spin ,
                 #__type_Track,
                 #__type_Scroll,
                 #__type_Progress,
                 #__type_Splitter
               
               If *this\type = #__type_splitter
                  If *this\bar\vertical
                     state = DPIScaledX( state )
                  Else
                     state = DPIScaledY( state )
                  EndIf
               EndIf
               
               result = bar_PageChange( *this, state, 2 ) ; and post change event
               
         EndSelect
         
         If result
            PostRepaint( *this\root )
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.l GetItemState( *this._s_WIDGET, Item.l )
         Protected result
         
         ;
         If *this\type = #__type_Editor
            If item = - 1
               ProcedureReturn *this\edit_caret_2( )
            Else
               ProcedureReturn *this\edit_caret_1( )
            EndIf
            
         ElseIf *this\type = #__type_Tree Or *this\type = #__type_ListIcon
            
            If is_item_( *this, item ) And SelectElement( *this\__rows( ), Item )
               If *this\__rows( )\ColorState( )
                  result | #PB_Tree_Selected
               EndIf
               
               If *this\__rows( )\ItemBoxState( )
                  If *this\mode\threestate And
                     *this\__rows( )\ItemBoxState( ) = #PB_Checkbox_Inbetween
                     result | #PB_Tree_Inbetween
                  Else
                     result | #PB_Tree_Checked
                  EndIf
               EndIf
               
               If *this\__rows( )\childrens And
                  *this\__rows( )\ItemButtonState( ) = 0
                  result | #PB_Tree_Expanded
               Else
                  result | #PB_Tree_Collapsed
               EndIf
            EndIf
            
         Else
            ProcedureReturn *this\bar\page\pos
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.b SetItemState( *this._s_WIDGET, Item.l, State.b )
         Protected result
         
         If is_bar_( *this ) Or *this\type = #__type_TabBar
            ;
            If is_no_select_item_( *this\__tabs( ), Item )
               ProcedureReturn #False
            EndIf
            
            If State & #PB_Tree_Selected = #PB_Tree_Selected
               If bar_tab_SetState( *this, Item )
                  result = #True
               EndIf
            EndIf
         EndIf
         
         If *this\type = #__type_Editor
            result = edit_SetItemState( *this, Item, state )
            
         ElseIf *this\type = #__type_Tree Or
                *this\type = #__type_ListIcon
            
            If *this\countitems
               If is_no_select_item_( *this\__rows( ), Item )
                  ProcedureReturn #False
               EndIf
               
               Protected *this_current_row._s_ROWS = *this\__rows( )
               
               If State & #PB_Tree_Selected = #PB_Tree_Selected
                  If *this\RowFocused( ) <> *this\__rows( )
                     *this\RowFocused( )             = *this\__rows( )
                     *this\RowFocused( )\ScrollToActive( - 1 )
                     *this\RowFocused( )\ColorState( ) = #__s_2 + Bool( *this\focus = #False )
                  EndIf
               EndIf
               
               If State & #PB_Tree_Inbetween = #PB_Tree_Inbetween
                  *this\__rows( )\ItemBoxState( ) = #PB_Checkbox_Inbetween
               ElseIf State & #PB_Tree_Checked = #PB_Tree_Checked
                  *this\__rows( )\ItemBoxState( ) = #PB_Checkbox_Checked
               Else
                  *this\__rows( )\ItemBoxState( ) = #PB_Checkbox_Unchecked
               EndIf
               
               If *this\__rows( )\childrens
                  If State & #PB_Tree_Expanded = #PB_Tree_Expanded Or
                     State & #PB_Tree_Collapsed = #PB_Tree_Collapsed
                     
                     *this\WidgetChange( )              = #True
                     *this\__rows( )\ItemButtonState( ) = Bool( State & #PB_Tree_Collapsed )
                     
                     PushListPosition( *this\__rows( ))
                     While NextElement( *this\__rows( ))
                        If *this\__rows( )\RowParent( )
                           *this\__rows( )\hide = Bool( *this\__rows( )\RowParent( )\ItemButtonState( ) | *this\__rows( )\RowParent( )\hide )
                        EndIf
                        
                        If *this\__rows( )\sublevel = *this_current_row\sublevel
                           Break
                        EndIf
                     Wend
                     PopListPosition( *this\__rows( ))
                  EndIf
               EndIf
               
               result = *this_current_row\ItemButtonState( )
            EndIf
            
         EndIf
         
         ;PostRepaint( *this\root )
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.i GetAttribute( *this._s_WIDGET, Attribute.l )
         Protected result.i
         
         If *this\type = #__type_Panel
           Select Attribute
               Case #PB_Panel_ItemWidth : result = DPIUnScaledX(*this\inner_width( ))                           
               Case #PB_Panel_ItemHeight : result = DPIUnScaledY(*this\inner_height( ))                        
               Case #PB_Panel_TabHeight : result = *this\fs[1]+*this\fs[2]+*this\fs[3]+*this\fs[4] 
            EndSelect
         EndIf
         
         ; is_scrollbars_( *this )
         If *this\type = #__type_ScrollArea Or
            *this\type = #__type_MDI
            ;
            Select Attribute
               Case #PB_ScrollArea_X : result = DPIUnScaledX(*this\scroll\h\bar\page\pos)
               Case #PB_ScrollArea_Y : result = DPIUnScaledY(*this\scroll\v\bar\page\pos)
               Case #PB_ScrollArea_InnerWidth : result = DPIUnScaledX(*this\scroll\h\bar\max)
               Case #PB_ScrollArea_InnerHeight : result = DPIUnScaledY(*this\scroll\v\bar\max)
               Case #PB_ScrollArea_ScrollStep : result = *this\scroll\increment
            EndSelect
         EndIf
         
         If *this\type = #__type_Splitter
            Select Attribute
               Case #PB_Splitter_FirstGadget : result = *this\split_1( )
               Case #PB_Splitter_SecondGadget : result = *this\split_2( )
               Case #PB_Splitter_FirstMinimumSize : result = *this\bar\min[1]
               Case #PB_Splitter_SecondMinimumSize : result = *this\bar\min[2]
            EndSelect
         EndIf
         
         ;
         If is_bar_( *this ) Or 
            *this\type = #__type_TabBar Or
            *this\type = #__type_Scroll Or
            *this\type = #__type_Progress Or ; *this\type = #__type_Splitter Or
            *this\type = #__type_Track Or
            *this\type = #__type_Spin
            
            Select Attribute
               Case #__bar_minimum : result = *this\bar\min          
               Case #__bar_maximum : result = *this\bar\max          
               Case #__bar_pagelength : result = *this\bar\page\len  
                  
               Case #__bar_scrollstep : result = *this\scroll\increment 
               Case #__bar_buttonsize : result = *this\bar\button[1]\size
                  
               Case #__bar_direction : result = *this\bar\direction
               Case #__bar_invert : result = *this\bar\invert
            EndSelect
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetAttribute( *this._s_WIDGET, Attribute.l, *value )
         Protected result.i
         Protected value = *value
         
         If is_bar_( *this ) Or
            *this\type = #__type_TabBar Or
            *this\type = #__type_Scroll Or
            *this\type = #__type_Progress Or
            *this\type = #__type_Track Or
            *this\type = #__type_Splitter Or
            *this\type = #__type_Spin
            ;
            result = bar_SetAttribute( *this, Attribute, *value )
         EndIf
         
         If *this\type = #__type_Button Or
            *this\type = #__type_ButtonImage
            
            Select Attribute
               Case #PB_Button_Image
                  add_image( *this, *this\image, *value )
                  add_image( *this, *this\image[#__image_released], *value )
                  
               Case #PB_Button_PressedImage
                  add_image( *this, *this\image[#__image_pressed], *value )
                  
            EndSelect
         EndIf
         
         ;  is_scrollbars_( *this )
         If *this\type = #__type_ScrollArea Or
            *this\type = #__type_MDI
            
            Select Attribute
               Case #PB_ScrollArea_X
                  If bar_PageChange( *this\scroll\h, DPIScaledX(*value), 2 ) ; and post event
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_Y
                  If bar_PageChange( *this\scroll\v, DPIScaledY(*value), 2 ) ; and post event
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_InnerWidth
                  If bar_SetAttribute( *this\scroll\h, #__bar_maximum, DPIScaledX(*value) )
                     If IsGadget(*this\scroll\gadget[2])
                        ResizeGadget(*this\scroll\gadget[2], #PB_Ignore, #PB_Ignore, *value, #PB_Ignore)
                        CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                           UpdateWindow_(GadgetID(*this\scroll\gadget[2]))
                        CompilerEndIf
                     EndIf
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_InnerHeight
                  If bar_SetAttribute( *this\scroll\v, #__bar_maximum, DPIScaledY(*value))
                     If IsGadget(*this\scroll\gadget[2])
                        ResizeGadget(*this\scroll\gadget[2], #PB_Ignore, #PB_Ignore, #PB_Ignore, *value)
                        CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                           UpdateWindow_(GadgetID(*this\scroll\gadget[2]))
                        CompilerEndIf
                     EndIf
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_ScrollStep
                  If *this\scroll
                     If *this\scroll\v
                        *this\scroll\v\scroll\increment = value
                     EndIf
                     If *this\scroll\h
                        *this\scroll\h\scroll\increment = value
                     EndIf
                  EndIf
                  
            EndSelect
         EndIf
         
         If *this\type = #PB_GadgetType_Image
            Select Attribute
               Case #__DisplayMode
                  Select Value
                     Case 0 ; Default
                            ;                 *this\image\Align\Vertical = 0
                            ;                 *this\image\Align\Horizontal = 0
                        
                     Case 1 ; Center
                            ;                 *this\image\Align\Vertical = 1
                            ;                 *this\image\Align\Horizontal = 1
                        
                     Case 3 ; Mosaic
                     Case 2 ; Stretch
                        
                     Case 5 ; Proportionally
                  EndSelect
            EndSelect
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetItemAttribute( *this._s_WIDGET, Item.l, Attribute.l, Column.l = 0 )
         Protected result
         
         If *this\type = #__type_Tree Or *this\type = #__type_ListIcon
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #False
            EndIf
            
            If *this\type = #__type_Tree
               If Attribute = #PB_Tree_SubLevel
                  result = *this\__rows( )\sublevel
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemAttribute( *this._s_WIDGET, Item.l, Attribute.l, *value, Column.l = 0 )
         Protected result
         
         If *this\type = #__type_Window
            
         ElseIf *this\type = #__type_Tree Or *this\type = #__type_ListIcon
            
            Select Attribute
               Case #__flag_optionboxes
                  *this\mode\optionboxes = *value
                  
               Case #PB_Tree_SubLevel
                  If is_no_select_item_( *this\__rows( ), Item )
                     ProcedureReturn #False
                  EndIf
                  
                  *this\__rows( )\sublevel = *value
                  
            EndSelect
            
         ElseIf *this\type = #__type_Editor
            
         ElseIf *this\type = #__type_Panel
            
         Else
         EndIf
         
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.s GetText( *this._s_WIDGET );, column.l = 0 )
         If *this\type = #__type_Tree
            If *this\RowFocused( )
               ProcedureReturn *this\RowFocused( )\text\string
            EndIf
         EndIf
         
         If *this\type = #__type_Window
            ProcedureReturn *this\TitleText( )\string
         EndIf
         
         If *this\text\pass
            ProcedureReturn *this\text\edit\string
         Else
            ProcedureReturn *this\text\string
         EndIf
      EndProcedure
      
      Procedure.i SetText( *this._s_WIDGET, Text.s )
         Protected result.i, Len.i, String.s, i.i
         
         *this\redraw = 1
         
         If *this\type = #__type_Window
            *this\TitleText( )\string = Text
         EndIf
         
         If *this\type = #__type_Tree
            If *this\RowFocused( )
               *this\RowFocused( )\text\string = Text
            EndIf
         EndIf
         
         If *this\type = #__type_ComboBox
            If *this\__String( )
               ProcedureReturn edit_SetText( *this\__String( ), Text )
            Else
               ; ProcedureReturn edit_SetText( *this, Text )
               If *This\text\string.s <> Text.s
                  *This\text\string.s = Text.s
                  *This\text\TextChange( ) = #True
                  result              = #True
                  PostRepaint( *this\root )
               EndIf
            EndIf
         EndIf
         
         If *this\type = #__type_Editor Or
            *this\type = #__type_String Or
            *this\type = #__type_text Or
            *this\type = #__type_hyperlink Or
            *this\type = #__type_Button
            
            ProcedureReturn edit_SetText( *this, Text )
            
            
         Else
            ;         If *this\text\multiline = 0
            ;           Text = RemoveString( Text, #LF$ )
            ;         EndIf
            
            Text = ReplaceString( Text, #LFCR$, #LF$ )
            Text = ReplaceString( Text, #CRLF$, #LF$ )
            Text = ReplaceString( Text, #CR$, #LF$ )
            ;Text + #LF$
            
            If *This\text\string.s <> Text.s
               *This\text\string.s = Text.s
               *This\text\TextChange( ) = #True
               result              = #True
               PostRepaint( *This\root )
            EndIf
         EndIf
         
         *this\WidgetChange( ) = 1
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.s GetItemText( *this._s_WIDGET, Item.l, Column.l = 0 )
         Protected result.s
         
         If *this\type = #__type_Panel
            ProcedureReturn bar_tab_GetItemText( *this\__Tab( ), Item, Column )
         EndIf
         
         If is_bar_( *this ) Or *this\type = #__type_TabBar
            ProcedureReturn bar_tab_GetItemText( *this, Item, Column )
         EndIf
         
         If *this\countitems ; row count
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn ""
            EndIf
            
            If *this\type = #__type_Properties And Column
               result = *this\__rows( )\text\edit\string
            Else
               result = *this\__rows( )\text\string
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l SetItemText( *this._s_WIDGET, Item.l, Text.s, Column.l = 0 )
         Protected result
         
         If is_bar_( *this ) Or *this\type = #__type_TabBar
            If is_no_select_item_( *this\__tabs( ), item )
               ProcedureReturn #False
            EndIf
            
            *this\TabChange( )          = #True
            *this\__tabs( )\text\string = Text.s
            result                      = #True
         EndIf
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_Properties
            
            ;Item = *this\row\i( Hex( Item ))
            
            If is_no_select_item_( *this\__rows( ), item )
               ProcedureReturn #False
            EndIf
            
            Protected row_count = CountString( Text.s, #LF$ )
            
            If Not row_count
               *this\__rows( )\text\string = Text.s
            Else
               *this\__rows( )\text\string      = StringField( Text.s, 1, #LF$ )
               *this\__rows( )\text\edit\string = StringField( Text.s, 2, #LF$ )
            EndIf
            
            *this\__rows( )\text\TextChange( ) = 1
            *this\WidgetChange( )         = 1
            result                        = #True
            
         ElseIf *this\type = #__type_Panel
            result = SetItemText( *this\__Tab( ), Item, Text, Column )
            
         ElseIf is_bar_( *this ) Or *this\type = #__type_TabBar
            If is_item_( *this, Item ) And
               SelectElement( *this\__tabs( ), Item ) And
               *this\__tabs( )\text\string <> Text
               *this\__tabs( )\text\string   = Text
               *this\__tabs( )\text\TextChange( ) = 1
               *this\WidgetChange( )         = 1
               result                        = #True
            EndIf
            
         EndIf
         
         PostRepaint( *this\root )
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.i GetFont( *this._s_WIDGET )
         ProcedureReturn GetFontID( *this )
      EndProcedure
      
      Procedure.i SetFont( *this._s_WIDGET, FontID.i )
         Protected result
         
         If IsFont( FontID )
            FontID = FontID( FontID )
            
            If GetFontID( *this ) <> FontID
               SetFontID( *this, FontID )
               result = #True
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetItemFont( *this._s_WIDGET, Item.l )
         Protected result
         
         If *this\type = #__type_Editor Or
            *this\type = #__type_Properties Or
            *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #False
            EndIf
            
            result = GetFontID( *this\__rows( ) )
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemFont( *this._s_WIDGET, Item.l, Font.i )
         Protected result
         Protected *TabBox._s_WIDGET
         Protected FontID.i = FontID( Font )
         
         If *this\type = #__type_Panel
            *TabBox = *this\__Tab( )
            
         ElseIf *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            If is_no_select_item_( *TabBox\__tabs( ), Item )
               ProcedureReturn #False
            EndIf
            ;
            If ChangeFontID( *TabBox\__tabs( ), FontID )
               result = #True
            EndIf
         Else
            If *this\row
               If is_no_select_item_( *this\__rows( ), Item )
                  ProcedureReturn #False
               EndIf
               ;
               If ChangeFontID( *this\__rows( ), FontID )
                  result = #True
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.i GetData( *this._s_WIDGET )
         ProcedureReturn *this\data
      EndProcedure
      
      Procedure SetData( *this._s_WIDGET, *data )
         *this\data = *data
      EndProcedure
      
      Procedure.i GetItemData( *this._s_WIDGET, item.l )
         Protected result.i
         
         If *this\countitems
            If is_no_select_item_( *this\__rows( ), item )
               ProcedureReturn #False
            EndIf
            
            result = *this\__rows( )\data
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemData( *This._s_WIDGET, item.l, *data )
         If *this\countitems
            If is_no_select_item_( *this\__rows( ), item )
               ProcedureReturn #False
            EndIf
            
            *this\__rows( )\data = *Data
         EndIf
      EndProcedure
      
      ;-
      Procedure GetLast( *this._s_WIDGET, tabindex.l )
         Protected result, *after._s_WIDGET, *parent._s_WIDGET
         
         If *this\LastWidget( )
            If *this\haschildren
               If tabindex = - 1
                  
                  Protected *root._s_root
                  If *this\root
                     *root = *this\root
                  Else
                     *root = *this
                  EndIf
                  
                  ;\\
                  LastElement( widgets( ) )
                  result = widgets( )\LastWidget( )
                  
                  ; get after widget
                  If *this\AfterWidget( )
                     *after = *this\AfterWidget( )
                  Else
                     *parent = *this
                     Repeat
                        *parent = *parent\parent
                        If Not *parent
                           ProcedureReturn 0
                        EndIf
                        If *parent\AfterWidget( )
                           *after = *parent\AfterWidget( )
                           Break
                        EndIf
                     Until is_root_( *parent )
                  EndIf
                  
                  If *after
                     PushListPosition( widgets( ) )
                     ChangeCurrentElement( widgets( ), *after\address )
                     While PreviousElement( widgets( ) )
                        If widgets( )\TabIndex( ) = tabindex ;Or widgets( ) = *this
                           Break
                        EndIf
                     Wend
                     result = widgets( )\LastWidget( )
                     PopListPosition( widgets( ) )
                  EndIf
               Else
                  ;Debug ""+tabindex +" "+ *this\LastWidget( )\BeforeWidget( ) +" "+ *this\LastWidget( )\AfterWidget( )
                  If tabindex = 0
                     If is_root_(*this)
                        result = *this\LastWidget( )
                     Else
                        result = *this 
                     EndIf
                  Else
                     result = *this\LastWidget( )
                  EndIf
                  If tabindex >= 0 And 
                     StartEnum( *this, tabindex )
                     ;
                     If widget( )\TabIndex( ) = tabindex
                        result = widget( ) 
                     EndIf
                     ;
                     StopEnum( )
                  EndIf
                  
                  ;             If *this\LastWidget( )\TabIndex( ) = tabindex
                  ;                result = *this\LastWidget( )
                  ;             Else
                  ;                If tabindex = 0
                  ;                   result = *this;\parent\FirstWidget( )
                  ;                Else
                  ;                   Debug tabindex;*this\LastWidget( )\text\string
                  ; result = *this\LastWidget( )
                  ;                EndIf
                  ;             EndIf
                  *this = result
                  If *this\LastWidget( )
                     result = *this\LastWidget( )
                  EndIf
                  
               EndIf
            Else
               result = *this\LastWidget( )
            EndIf
            
            ProcedureReturn result
         EndIf
      EndProcedure
      
      Procedure GetPositionFirst( *this._s_WIDGET, tabindex.l )
         Protected *result._s_WIDGET
         
         If *this\haschildren
            PushListPosition( widgets( ) )
            ChangeCurrentElement( widgets( ), *this\address )
            While NextElement( widgets( ) )
               If widgets( ) = *this\LastWidget( ) Or widgets( )\TabIndex( ) = tabindex
                  *result = widgets( )
                  Break
               EndIf
            Wend
            PopListPosition( widgets( ) )
         Else
            *result = *this
         EndIf
         
         ; Debug "   "+*result\class
         
         ProcedureReturn *result
      EndProcedure
      
      Procedure GetPositionLast( *this._s_WIDGET, tabindex.l = #PB_Default )
         Protected *last._s_WIDGET = *this;\LastWidget( )
         If StartEnum( *this )
            *last = widgets( )
            StopEnum( )
         EndIf
         ProcedureReturn *last
      EndProcedure
      
      Procedure GetPositionAfter( *this._s_WIDGET, tabindex.l )
         Protected *after._s_WIDGET = *this\LastWidget( ) 
         Protected *last._s_WIDGET = *this\LastWidget( ) 
         ;
         If *this\haschildren
            If *this\__Tab( ) 
               If tabindex >= *last\TabIndex( )
                  *after = *last
               Else
                  *after = *this
                  ;
                  If *last 
                     PushListPosition( widgets( ) )
                     ChangeCurrentElement( widgets( ), *last\address )
                     While PreviousElement( widgets( ) )
                        If widgets( )\parent = *this 
                           If widgets( )\TabIndex( ) = TabIndex
                              *after = widgets( )
                              Break
                           EndIf
                        EndIf
                     Wend
                     PopListPosition( widgets( ) )
                  EndIf
               EndIf
            EndIf
         EndIf
         ;
         If is_root_( *after )
            *after = *after\LastWidget( )
         EndIf
         ProcedureReturn *after
      EndProcedure
      
      Procedure.i GetPosition( *this._s_WIDGET, position.l )
         Protected result
         
         Select position
            Case #PB_List_First
               result = *this\parent\FirstWidget( ) ; GetPositionFirst( *this\parent, *this\TabIndex( ) )
            Case #PB_List_Before
               result = *this\BeforeWidget( )
            Case #PB_List_After
               result = *this\AfterWidget( )
            Case #PB_List_Last
               result = *this\parent\LastWidget( ) ; GetLast( *this\parent, *this\TabIndex( ) )
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure SetPosition( *this._s_WIDGET, position.l, *widget._s_WIDGET = #Null ) ; Ok
         If *widget = #Null
            Select Position
               Case #PB_List_First : *widget = *this\parent\FirstWidget( )
               Case #PB_List_Before : *widget = *this\BeforeWidget( )
               Case #PB_List_After : *widget = *this\AfterWidget( )
               Case #PB_List_Last : *widget = *this\parent\LastWidget( )
            EndSelect
         EndIf
         
         If Not *widget
            ProcedureReturn #False
         EndIf
         
         If is_level_( *this, *widget )
         ; If *this <> *widget And *this\TabIndex( ) = *widget\TabIndex( )
            
            If Position = #PB_List_First Or
               Position = #PB_List_Before
               
               PushListPosition( widgets( ))
               ChangeCurrentElement( widgets( ), *this\address )
               MoveElement( widgets( ), #PB_List_Before, *widget\address )
               
               If *this\haschildren
                  While PreviousElement( widgets( ))
                     If IsChild( widgets( ), *this )
                        MoveElement( widgets( ), #PB_List_After, *widget\address )
                     EndIf
                  Wend
                  
                  While NextElement( widgets( ))
                     If IsChild( widgets( ), *this )
                        MoveElement( widgets( ), #PB_List_Before, *widget\address )
                     EndIf
                  Wend
               EndIf
               PopListPosition( widgets( ))
            EndIf
            
            If Position = #PB_List_Last Or
               Position = #PB_List_After
               
               Protected *last._s_WIDGET = GetLast( *widget, *widget\TabIndex( ))
               
               PushListPosition( widgets( ))
               ChangeCurrentElement( widgets( ), *this\address )
               MoveElement( widgets( ), #PB_List_After, *last\address )
               
               If *this\haschildren
                  While NextElement( widgets( ))
                     If IsChild( widgets( ), *this )
                        MoveElement( widgets( ), #PB_List_Before, *last\address )
                     EndIf
                  Wend
                  
                  While PreviousElement( widgets( ))
                     If IsChild( widgets( ), *this )
                        MoveElement( widgets( ), #PB_List_After, *this\address )
                     EndIf
                  Wend
               EndIf
               PopListPosition( widgets( ))
            EndIf
            
            ;
            If *this\BeforeWidget( )
               *this\BeforeWidget( )\AfterWidget( ) = *this\AfterWidget( )
            EndIf
            If *this\AfterWidget( )
               *this\AfterWidget( )\BeforeWidget( ) = *this\BeforeWidget( )
            EndIf
            If *this\parent\FirstWidget( ) = *this
               *this\parent\FirstWidget( ) = *this\AfterWidget( )
            EndIf
            If *this\parent\LastWidget( ) = *this
               *this\parent\LastWidget( ) = *this\BeforeWidget( )
            EndIf
            
            ;
            If Position = #PB_List_First Or
               Position = #PB_List_Before
               
               *this\AfterWidget( )    = *widget
               *this\BeforeWidget( )   = *widget\BeforeWidget( )
               *widget\BeforeWidget( ) = *this
               
               If *this\BeforeWidget( )
                  *this\BeforeWidget( )\AfterWidget( ) = *this
               Else
                  If *this\parent\FirstWidget( )
                     *this\parent\FirstWidget( )\BeforeWidget( ) = *this
                  EndIf
                  *this\parent\FirstWidget( ) = *this
               EndIf
            EndIf
            
            If Position = #PB_List_Last Or
               Position = #PB_List_After
               
               *this\BeforeWidget( )  = *widget
               *this\AfterWidget( )   = *widget\AfterWidget( )
               *widget\AfterWidget( ) = *this
               
               If *this\AfterWidget( )
                  *this\AfterWidget( )\BeforeWidget( ) = *this
               Else
                  If *this\parent\LastWidget( )
                     *this\parent\LastWidget( )\AfterWidget( ) = *this
                  EndIf
                  *this\parent\LastWidget( ) = *this
               EndIf
            EndIf
            
            ProcedureReturn #True
         EndIf
         
      EndProcedure
      
      ;-
      Procedure.i GetParent( *this._s_WIDGET )
         ProcedureReturn *this\parent
      EndProcedure
      
      Procedure SetParent( *this._s_WIDGET, *parent._s_WIDGET, tabindex.l = #PB_Default )
         Protected parent, ReParent.b, X, Y
         Protected *after._s_WIDGET, *last._s_WIDGET, *lastParent._s_WIDGET
         Protected NewList *D._s_WIDGET( ), NewList *C._s_WIDGET( )
         
         ;\\
         If *this = *parent
            ProcedureReturn 0
         EndIf
         
         If *parent
            If *parent\container = 0 And *parent\child
               Debug "SetParent("
               *parent = *parent\parent
            EndIf
            ;
            If *this\parent = *parent And
               *this\TabIndex( ) = tabindex
               ProcedureReturn #False
            EndIf
            ;
            If tabindex < 0
               If *parent\__tab( )
                  tabindex = *parent\__Tab( )\TabIndex( )
               Else
                  tabindex = 0
               EndIf
            EndIf
            ;
            ;\\ get the last widget to add it after it
            If *parent\LastWidget( )
               *after = GetPositionAfter( *parent, tabindex )
               ;
               If *after\parent = *parent
                  *last = GetPositionLast( *after, tabindex )
                  
                  ;                   *last = *after 
                  ;                   If StartEnum( *after )
                  ;                      *last = widgets( )
                  ;                      StopEnum( )
                  ;                   EndIf
                  ;
                  If *this = *after Or IsChild( *last, *this )
                     *last = GetPositionLast( *this\BeforeWidget( ), tabindex )
                     
                     ;                      *last = *this\BeforeWidget( )
                     ;                      If StartEnum( *this\BeforeWidget( ) )
                     ;                        *last = widgets( )
                     ;                        StopEnum( )
                     ;                      EndIf
                     
                  EndIf
               Else
                  *last = *after
               EndIf
               
               ;                If tabindex = 2
               ;                    Debug ""+*this\text\string +" last-"+ *last\class +" after-"+ *after\class
               ;                EndIf
            EndIf
            ;
            If *parent\type = #__type_Splitter
               If tabindex > 0
                  If tabindex % 2
                     *parent\FirstWidget( ) = *this
                     *parent\split_1( )    = *this
                     bar_Update( *parent, #True )
                     If IsGadget( *parent\split_1( ) )
                        ProcedureReturn 0
                     EndIf
                  Else
                     *parent\LastWidget( ) = *this
                     *parent\split_2( )    = *this
                     bar_Update( *parent, #True )
                     If IsGadget( *parent\split_2( ) )
                        ProcedureReturn 0
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            *this\TabIndex( ) = tabindex
            ;
            HideState( *this, *parent )
            DisableState( *this, *parent )
            ;
            ;\\
            If *this And
               *this\parent
               ;
               If *this\address
                  *lastParent = *this\parent
                  *lastParent\haschildren - 1
                  
                  ChangeCurrentElement( widgets( ), *this\address )
                  AddElement( *D( ) ) : *D( ) = widgets( )
                  
                  If *this\haschildren
                     PushListPosition( widgets( ) )
                     While NextElement( widgets( ) )
                        If Not IsChild( widgets( ), *this )
                           Break
                        EndIf
                        
                        AddElement( *D( ) )
                        *D( ) = widgets( )
                        
                        ; ChangeParent
                        If *parent\window
                           *D( )\window = *parent\window
                        Else
                           *D( )\window = *parent
                        EndIf
                        If *parent\root
                           *D( )\root = *parent\root
                        Else
                           *D( )\root = *parent
                        EndIf
                        ;; Debug " children's - "+ *D( )\data +" - "+ *this\data
                        
                        ;\\ integrall children's
                        If *D( )\scroll
                           If *D( )\scroll\v
                              *D( )\scroll\v\root   = *D( )\root
                              *D( )\scroll\v\window = *D( )\window
                           EndIf
                           If *D( )\scroll\h
                              *D( )\scroll\h\root   = *D( )\root
                              *D( )\scroll\h\window = *D( )\window
                           EndIf
                        EndIf
                        
                        HideState( *D( ), *D( )\parent )
                        ;Debug *D( )\hide[1]
                        
                     Wend
                     PopListPosition( widgets( ) )
                  EndIf
                  
                  ;\\ move with a parent and his children's
                  If *last
                     PushListPosition( widgets( ) )
                     LastElement( *D( ) )
                     Repeat
                        ChangeCurrentElement( widgets( ), *D( )\address )
                        MoveElement( widgets( ), #PB_List_After, *last\address )
                     Until PreviousElement( *D( ) ) = #False
                     PopListPosition( widgets( ) )
                  EndIf
                  ;
                  ReParent = #True
               EndIf
               ;
            Else
               ;
               If *last
                  ChangeCurrentElement( widgets( ) , *last\address )
               Else
                  LastElement( widgets( ) )
               EndIf
               ;
               AddElement( widgets( ) )
               widgets( )  = *this
               *this\placingindex     = ListIndex( widgets( ) )
               *this\address = @widgets( )
            EndIf
            ;
            ;\\
            ;
            If *this\parent 
               If *this\parent\FirstWidget( ) = *this
                  *this\parent\FirstWidget( ) = *this\AfterWidget( )
               EndIf
               ;
               If *this\parent\LastWidget( ) = *this
                  *this\parent\LastWidget( ) = *this\BeforeWidget( )
               EndIf
            Else
               *this\LastWidget( ) = *this 
            EndIf
            ;
            If *parent\__Tab( )
               If *this\TabIndex( ) = *parent\__Tab( )\countitems - 1
                  *parent\LastWidget( ) = *this
               EndIf
            Else
               *parent\LastWidget( ) = *this
            EndIf
            ;
            If *this\BeforeWidget( )
               *this\BeforeWidget( )\AfterWidget( ) = *this\AfterWidget( )
            EndIf
            ;
            If *this\AfterWidget( )
               *this\AfterWidget( )\BeforeWidget( ) = *this\BeforeWidget( )
            EndIf
            ;
            If *after
               If *after\parent = *parent
                  If *after\AfterWidget( )
                     *after\AfterWidget( )\BeforeWidget( ) = *this
                  EndIf
                  *this\AfterWidget( ) = *after\AfterWidget( )
                  ;
                  *this\BeforeWidget( ) = *after
                  *after\AfterWidget( ) = *this
               Else
                  *this\AfterWidget( ) = *parent\FirstWidget( )
                  If *parent\FirstWidget( )
                     *this\AfterWidget( )\BeforeWidget( ) = *this
                  EndIf
                  ;
                  *this\BeforeWidget( ) = #Null
                  *parent\FirstWidget( ) = *this
               EndIf
            EndIf
            ;
            If *parent\FirstWidget( ) = #Null
               *parent\FirstWidget( ) = *this
            EndIf
            ;
            ;\\
            ReParent( *this, *parent )
            ;
            ;\\ add type count
            If *this\parent <> *this\window
               typeCount( Str( *this\window + *this\type ) ) + 1
            EndIf
            typeCount( Str( *this\parent + *this\type ) ) + 1
            ;
            ;\\ a_new( )
            If a_anchors( ) And a_main( ) And IsChild( *this, a_main( ))
               If *this\parent\type = #__type_splitter
                  ; Debug ""+*this\class +" "+ *this\parent\class
                  a_free( *this )
               Else
                  If Not *this\autosize
                     If Not *this\anchors
                        If *this\parent\anchors 
                           a_create( *this, #__a_full )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            ;\\
            If ReParent
               ;
               If is_drag_move( )
                  *this\resize\clip = #True
                  
                  X = *this\frame_x( ) - *parent\inner_x( )
                  Y = *this\frame_y( ) - *parent\inner_y( )
                  
                  If *this\anchors > 0
                     X + ( X % mouse( )\steps )
                     X = ( X / mouse( )\steps ) * mouse( )\steps
                     
                     Y + ( Y % mouse( )\steps )
                     Y = ( Y / mouse( )\steps ) * mouse( )\steps
                  EndIf
                  
                  *this\container_x( ) = X
                  *this\container_y( ) = Y
               Else
                  ;\\ resize
                  X = *this\container_x( )
                  Y = *this\container_y( )
                  
                  ;\\ for the scrollarea container childrens
                  ;\\ if new parent - scrollarea container
                  If *parent\scroll And
                     *parent\scroll\v And *parent\scroll\h
                     X - *parent\scroll\h\bar\page\pos
                     Y - *parent\scroll\v\bar\page\pos
                  EndIf
                  
                  ;\\ if last parent - scrollarea container
                  If *LastParent\scroll And
                     *LastParent\scroll\v And *LastParent\scroll\h
                     X + *LastParent\scroll\h\bar\page\pos
                     Y + *LastParent\scroll\v\bar\page\pos
                  EndIf
                  
                  Resize( *this, X - *parent\scroll_x( ), Y - *parent\scroll_y( ), #PB_Ignore, #PB_Ignore, 0 )
               EndIf
               
               ;\\
               PostRepaint( *parent\root )
               If *parent\root <> *lastParent\root
                  PostRepaint( *lastParent\root )
               EndIf
            EndIf
         EndIf
         
         widget( ) = *this
         ProcedureReturn *this
      EndProcedure
      
      Procedure ReParent( *this._s_WIDGET, *parent._s_WIDGET )
         ;\\
         ;If Not is_integral_( *this )
         If *parent\container 
            *parent\haschildren + 1
         EndIf
         ;EndIf
         
         ;\\
         If *parent\root
            If Not is_integral_( *this )
               If Not is_root_( *parent )
                  *parent\root\haschildren + 1
               EndIf
            EndIf
            *this\root = *parent\root
         Else
            *this\root = *parent
         EndIf
         
         ;\\
         If is_window_( *parent )
            *this\window = *parent
         Else
            *this\window = *parent\window
         EndIf
         
         ;\\
         *this\level  = *parent\level + 1
         *this\parent = *parent
         
         ;\\ is integrall scroll bars
         If *this\scroll
            If *this\scroll\v
               *this\scroll\v\root   = *this\root
               *this\scroll\v\window = *this\window
            EndIf
            If *this\scroll\h
               *this\scroll\h\root   = *this\root
               *this\scroll\h\window = *this\window
            EndIf
         EndIf
         
         ;\\ is integrall tab bar
         If *this\__Tab( )
            *this\__Tab( )\root   = *this\root
            *this\__Tab( )\window = *this\window
         EndIf
         If *this\__Menu( )
            *this\__Menu( )\root   = *this\root
            *this\__Menu( )\window = *this\window
         EndIf
         
         ;\\ is integrall string bar
         If *this\__String( )
            *this\__String( )\root   = *this\root
            *this\__String( )\window = *this\window
         EndIf
         
         ;\\
         If *parent\bounds\children
            SetSizeBounds( *this )
            SetMoveBounds( *this )
         EndIf
      EndProcedure
      
      ;-
      Procedure DoFocus( *this._s_WIDGET, eventtype.l, *button = #PB_All, *data = #Null )
         ProcedureReturn DoEvents( *this, eventtype, *button, *data )
      EndProcedure
      
      Procedure SetForeground( *this._s_WIDGET )
         While is_window_( *this )
            ; SetPosition( *this, #PB_List_Last )
            *this = *this\window
         Wend
         
         If PopupWindow( )
            ; SetPosition( PopupWindow( ), #PB_List_Last )
         EndIf
      EndProcedure
      
      Procedure.i SetActive( *this._s_WIDGET )
         Protected result.i, *active._s_WIDGET
         Protected._s_WIDGET *deactive, *deactiveWindow, *deactiveGadget
         
         If GetActive( )
            *deactive = GetActive( )
            *deactiveWindow = ActiveWindow( )
            If *deactiveWindow
               *deactiveGadget = ActiveGadget( )
            EndIf
            
            ; deactivate canvas
            If Not *this
               If *deactiveWindow 
                  If is_integral_( *deactive )
                     *deactive = *deactive\parent
                  EndIf
                  ;\\ set deactive all parents
                  If *deactiveWindow\root\focus = 2
                     *deactiveWindow\root\focus = 3
                     If test_focus_set
                        Debug "Deactive canvas&root( ) "+*deactiveWindow\root\class
                     EndIf
                     ;
                     DoFocus( *deactiveWindow\root, #__event_LostFocus )
                  EndIf
                  If *deactive\address
                     If Not is_root_( *deactive )
                        PushListPosition( widgets( ) )
                        ChangeCurrentElement( widgets( ), *deactive\address )
                        While PreviousElement( widgets( ) )
                           If widgets( )
                              widget( ) = widgets( )
                              
                              If widgets( ) And is_window_( widgets( ) )
                                 If IsChild( *deactive, widgets( ) )
                                    If widgets( )\focus = 2
                                       widgets( )\focus = 3
                                       If test_focus_set
                                         Debug "Deactive canvas&widget( ) "+widgets( )\class
                                       EndIf
                                       ;
                                       DoFocus( widgets( ), #__event_LostFocus )
                                    EndIf
                                 EndIf
                              EndIf
                           EndIf
                        Wend
                        PopListPosition( widgets( ) )
                     EndIf
                  EndIf
                  
                  If *deactiveWindow\focus = 2
                     *deactiveWindow\focus = 3
                     If test_focus_set
                     Debug "Deactive canvas&widgetwindow "+*deactiveWindow\class
                  EndIf
                  ;
                     DoFocus( *deactiveWindow, #__event_LostFocus )
                  EndIf
                  
                  If *deactiveGadget And
                     *deactiveGadget\focus = 2
                     *deactiveGadget\focus = 3
                     If test_focus_set
                     Debug "Deactive canvas&widgetgadget "+*deactiveGadget\class
                  EndIf
                  ;
                     DoFocus( *deactiveGadget, #__event_LostFocus )
                  EndIf
               EndIf
               ProcedureReturn 0
            EndIf
            
            ; activate canvas
            If GetActive( ) = *this
               ;\\
               If is_integral_( *this )
                  *active = *this\parent
               Else
                  *active = *this
               EndIf
            
               ;\\ set active all parents
               If ActiveWindow( )\root\focus = 3
                  ActiveWindow( )\root\focus = 2
                  If test_focus_set
                     Debug "Active widgetroot "+ActiveWindow( )\root\class
                  EndIf
                  ;
                  DoFocus( ActiveWindow( )\root, #__event_Focus )
               EndIf
               If *active\address
                  If Not is_root_( *active )
                     PushListPosition( widgets( ) )
                     ChangeCurrentElement( widgets( ), *active\address )
                     While PreviousElement( widgets( ) )
                        If widgets( )
                           widget( ) = widgets( )
                           
                           If is_window_( widgets( ) )
                              If IsChild( *active, widgets( ) )
                                 If widgets( )\focus = 3
                                    widgets( )\focus = 2
                                    If test_focus_set
                     Debug "Active widget( ) "+widget( )\class
                  EndIf
                  ;
                                    DoFocus( widgets( ), #__event_Focus )
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                     Wend
                     PopListPosition( widgets( ) )
                  EndIf
               EndIf
               
               If ActiveWindow( ) And ActiveWindow( )\root = *this\root
                  If ActiveWindow( )\focus = 3
                     ActiveWindow( )\focus = 2
                     If test_focus_set
                     Debug "Active canvas&widgetwindow "+ActiveWindow( )\class
                  EndIf
                  ;
                     DoFocus( ActiveWindow( ), #__event_Focus )
                  EndIf
                  
                  If ActiveGadget( ) And
                     ActiveGadget( )\focus = 3
                     ActiveGadget( )\focus = 2
                     If test_focus_set
                     Debug "Active canvas&widgetgadget "+ActiveGadget( )\class
                  EndIf
                  ;
                     DoFocus( ActiveGadget( ), #__event_Focus )
                  EndIf
               Else
                  If *this\focus = 3
                     *this\focus = 2
                     If test_focus_set
                     Debug "Active canvas&widget "+*this\class
                  EndIf
                  ;
                     DoFocus( *this, #__event_Focus )
                  EndIf 
               EndIf
               ProcedureReturn 0
            EndIf
         EndIf
         
         If *this
            If *this\focus =- 1 Or 
               *this\root\focus =- 1
               ProcedureReturn 0
            EndIf
            
            ;\\
            If is_integral_( *this )
               *active = *this\parent
            Else
               *active = *this
            EndIf
            ;
            If Not *active\anchors
               If *active\parent And 
                  *active\parent\type = #__type_Splitter
                  ;
                  Protected *parent._s_WIDGET = *active\parent
                  While *parent And Not *parent\anchors
                     *parent = *parent\parent
                  Wend
                  ;
                  If *parent And *parent\anchors
                     *active = *parent
                  EndIf
               EndIf
            EndIf
            ;\\
            If *active\anchors
               If a_focused( ) = *active
                  ProcedureReturn 0
               Else
                  a_set( *active, *active\anchors\mode, a_getsize(*active), a_getpos(*active) )
               EndIf
            EndIf
            
            ;\\
            If Not *active\disable
               If GetActive( ) <> *this
                  *deactive = GetActive( )
                  *deactiveWindow = ActiveWindow( )
                  If *deactiveWindow
                     *deactiveGadget = ActiveGadget( )
                  EndIf
                  
                  GetActive( ) = *this
                  *this\root\active = *this
                  
                  If is_Window_( *active )
                     ActiveWindow( ) = *active
                  Else
                     ActiveWindow( ) = *active\window
                     If ActiveWindow( ) 
                        If is_gadget_( *active )
                           ActiveGadget( ) = *active
                        EndIf
                     EndIf
                  EndIf
                  
                  
                  If *deactive
                     If is_integral_( *deactive )
                        *deactive = *deactive\parent
                     EndIf
                     ;
                     If *deactiveWindow And *deactiveWindow <> *active  
                        ;\\ set deactive all parents
                        If *deactive And
                           *deactive\address And
                           Not is_root_( *deactive )
                           
                           If Not IsChild( *this, *deactive )
                              PushListPosition( widgets( ) )
                              ChangeCurrentElement( widgets( ), *deactive\address )
                              While PreviousElement( widgets( ))
                                 If widgets( )
                                    widget( ) = widgets( )
                                    
                                    If widget( ) = *this\window
                                       Break
                                    EndIf
                                    If widget( ) = *this
                                       Break
                                    EndIf
                                    If IsChild( *deactive, widget( ))
                                       ;If Not IsChild( *this, widget( ) )
                                       If widget( )\focus = 2
                                          widget( )\focus = 3
                                          
                                          If test_focus_set
                     Debug "Deactive widget( ) "+widget( )\class
                                          EndIf
                                          DoFocus( widget( ), #__event_LostFocus )
                                       EndIf
                                       ;EndIf
                                    EndIf
                                 EndIf
                              Wend
                              PopListPosition( widgets( ) )
                           EndIf
                        EndIf
                        
                        ;\\
                        If Not IsChild( *active, *deactiveWindow )
                           If *deactiveWindow\focus <> 3 
                              *deactiveWindow\focus = 3
                              If test_focus_set
                     Debug "Deactive widgetwindow "+*deactiveWindow\class
                  EndIf
                  ;
                              DoFocus( *deactiveWindow, #__event_LostFocus )
                           EndIf
                        EndIf
                        
                        If *deactiveGadget And *deactiveGadget <> *active
                           If *deactiveGadget\focus <> 3
                              *deactiveGadget\focus = 3
                             If test_focus_set
                      Debug "Deactive widgetgadget "+*deactiveGadget\class
                   EndIf
                   ;
                              DoFocus( *deactiveGadget, #__event_LostFocus )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
                  If ActiveWindow( ) 
                     ;\\ set active all parents
                     If ActiveWindow( )\root\focus = 3
                        ActiveWindow( )\root\focus = 2
                        If test_focus_set
                     Debug "Active widgetroot "+ActiveWindow( )\root\class
                  EndIf
                  ;
                        DoFocus( ActiveWindow( )\root, #__event_Focus )
                     EndIf
                     If *active\address
                        If Not is_root_( *active )
                           PushListPosition( widgets( ) )
                           ChangeCurrentElement( widgets( ), *active\address )
                           While PreviousElement( widgets( ) )
                              If widgets( )
                                 widget( ) = widgets( )
                                 
                                 If is_window_( widgets( ) )
                                    If IsChild( *active, widgets( ) )
                                       If widgets( )\focus = 3
                                          widgets( )\focus = 2
                                          If test_focus_set
                     Debug "Active widget( ) "+widget( )\class
                  EndIf
                  ;
                                          DoFocus( widgets( ), #__event_Focus )
                                       EndIf
                                    EndIf
                                 EndIf
                              EndIf
                           Wend
                           PopListPosition( widgets( ) )
                        EndIf
                     EndIf
                     
                     
                     If ActiveWindow( )\focus <> 2
                        ActiveWindow( )\focus = 2
                        If test_focus_set
                     Debug "Active widgetwindow "+ActiveWindow( )\class
                  EndIf
                  ;
                        DoFocus( ActiveWindow( ), #__event_Focus )
                     EndIf
                     
                     If ActiveGadget( ) And
                        ActiveGadget( )\focus <> 2
                        ActiveGadget( )\focus = 2
                        If test_focus_set
                     Debug "Active widgetgadget "+ActiveGadget( )\class
                  EndIf
                  ;
                        DoFocus( ActiveGadget( ), #__event_Focus )
                     EndIf
                  EndIf
               EndIf 
            EndIf 
         EndIf
         
         ProcedureReturn #True
      EndProcedure
      
      ;-
      Procedure.i SetAttach( *this._s_WIDGET, *parent._s_WIDGET, mode.a )
         If *parent
            *this\bounds\attach.allocate(BOUNDAttach)
            
            If *this\bounds\attach
               *this\bounds\attach\mode = mode
               
               ; get attach-element first-parent
               *this\bounds\attach\parent = *parent
               While *this\bounds\attach\parent\bounds\attach
                  *this\bounds\attach\parent = *this\bounds\attach\parent\parent
               Wend
               ;
               If *this\bounds\attach\parent\parent
                  *this\bounds\attach\parent = *this\bounds\attach\parent\parent
               Else
                  *this\bounds\attach\parent = *parent
               EndIf
               
               ; AddWidget( *this, *parent )
               SetParent( *this, *parent, #PB_Default )
               
               ProcedureReturn *this\bounds\attach
            EndIf
         EndIf
      EndProcedure
      
      Procedure SetAlign( *this._s_WIDGET, mode.q, left.q = 0, top.q = 0, right.q = 0, bottom.q = 0 )
         Protected flag.q
         ;\\
         If Not (( mode & #__align_full = #__align_full ) Or ( mode & #__align_auto = #__align_auto ))
            If mode = 0 And left = 0 And top = 0 And right = 0 And bottom = 0
               left = #__align_auto
               top  = #__align_auto
               mode | #__align_auto
            EndIf
            If mode & #__align_right
               If mode & #__align_center = 0 And mode & #__align_bottom = 0
                  top = 1
                  mode | #__align_auto
               EndIf
               right = #__align_auto
            EndIf
            If mode & #__align_bottom
               If mode & #__align_center = 0 And mode & #__align_right = 0
                  left = 1
                  mode | #__align_auto
               EndIf
               bottom = #__align_auto
            EndIf
            If mode & #__align_left
               If mode & #__align_center = 0
                  top = 1
                  mode | #__align_auto
               EndIf
               left = #__align_auto
            EndIf
            If mode & #__align_top
               If mode & #__align_center = 0
                  left = 1
                  mode | #__align_auto
               EndIf
               top = #__align_auto
            EndIf
            If right = #__align_auto And bottom = #__align_auto
               right  = 1
               bottom = 1
               If mode & #__align_auto = 0
                  ; mode = 0 ;????
               EndIf
            EndIf
         EndIf
         
         ;\\
         If mode & #__align_auto = #__align_auto
            If left = 0 And top = 0 And right = 0 And bottom = 0
               If mode & #__align_left 
                  left = #__align_auto
               EndIf
               If mode & #__align_top 
                  top = #__align_auto
               EndIf
               If mode & #__align_right 
                  right = #__align_auto
               EndIf
               If mode & #__align_bottom 
                  bottom = #__align_auto
               EndIf
               If left = 0 And top = 0 And right = 0 And bottom = 0
                  left   = #__align_auto
                  top    = #__align_auto
                  right  = #__align_auto
                  bottom = #__align_auto
               EndIf
            Else
               If left > 0 : left = 1 : EndIf
               If top > 0 : top = 1 : EndIf
               If right > 0 : right = 1 : EndIf
               If bottom > 0 : bottom = 1 : EndIf
               
               If left > 0 And top = 0 And right = 0 And bottom = 0 : left = #__align_auto : EndIf
               If top > 0 And left = 0 And right = 0 And bottom = 0 : top = #__align_auto : EndIf
               If right > 0 And top = 0 And left = 0 And bottom = 0 : right = #__align_auto : EndIf
               If bottom > 0 And top = 0 And right = 0 And left = 0 : bottom = #__align_auto : EndIf
            EndIf
         EndIf
         
         ;\\
         If mode & #__align_full = #__align_full
            If left = 0 And top = 0 And right = 0 And bottom = 0
               ;                If mode & #__align_left : left = #__align_full
               ;                ElseIf mode & #__align_top : top = #__align_full
               ;                ElseIf mode & #__align_right : right = #__align_full
               ;                ElseIf mode & #__align_bottom : bottom = #__align_full
               ;                Else
               ;                   left   = #__align_full
               ;                   top    = #__align_full
               ;                   right  = #__align_full
               ;                   bottom = #__align_full
               ;                EndIf
               
               If mode & #__align_left 
                  left = #__align_full
               EndIf
               If mode & #__align_top 
                  top = #__align_full
               EndIf
               If mode & #__align_right 
                  right = #__align_full
               EndIf
               If mode & #__align_bottom 
                  bottom = #__align_full
               EndIf
               If left = 0 And top = 0 And right = 0 And bottom = 0
                  left   = #__align_full
                  top    = #__align_full
                  right  = #__align_full
                  bottom = #__align_full
               EndIf
               
            Else
               ;                If left > 0 : left = #__align_full : EndIf
               ;                If top > 0 : top = #__align_full : EndIf
               ;                If right > 0 : right = #__align_full : EndIf
               ;                If bottom > 0 : bottom = #__align_full : EndIf
               If left > 0 : left = #True : EndIf
               If top > 0 : top = #True : EndIf
               If right > 0 : right = #True : EndIf
               If bottom > 0 : bottom = #True : EndIf
               
               If left > 0 And top = 0 And right = 0 And bottom = 0 : left = #__align_full : EndIf
               If top > 0 And left = 0 And right = 0 And bottom = 0 : top = #__align_full : EndIf
               If right > 0 And top = 0 And left = 0 And bottom = 0 : right = #__align_full : EndIf
               If bottom > 0 And top = 0 And right = 0 And left = 0 : bottom = #__align_full : EndIf
            EndIf
         EndIf
         
         ;\\
         If left = #__align_full
            left   = #__align_auto
            top    = 1
            bottom = 1
            flag | #__align_full
         EndIf
         If right = #__align_full
            right  = #__align_auto
            top    = 1
            bottom = 1
            flag | #__align_full
         EndIf
         If top = #__align_full
            top   = #__align_auto
            left  = 1
            right = 1
            flag | #__align_full
         EndIf
         If bottom = #__align_full
            bottom = #__align_auto
            left   = 1
            right  = 1
            flag | #__align_full
         EndIf
         If mode And left > 0 And top > 0 And right > 0 And bottom > 0
            flag | #__align_full
         EndIf
         
         ;\\
         If mode & #__align_proportional
            If left = 0 And right = 0
               left  = #__align_proportional
               right = #__align_proportional
            EndIf
            If top = 0 And bottom = 0
               top    = #__align_proportional
               bottom = #__align_proportional
            EndIf
            ;
            If left And left <> #__align_proportional
               If right = 0
                  left = 0
               EndIf
               right = #__align_proportional
            EndIf
            If top And top <> #__align_proportional
               If bottom = 0
                  top = 0
               EndIf
               bottom = #__align_proportional
            EndIf
            If right And right <> #__align_proportional
               If left = 0
                  right = 0
               EndIf
               left = #__align_proportional
            EndIf
            If bottom And bottom <> #__align_proportional
               If top = 0
                  bottom = 0
               EndIf
               top = #__align_proportional
            EndIf
            ;
            If mode & #__align_right
               left = #__align_proportional
            EndIf
            If mode & #__align_left
               right = #__align_proportional
            EndIf
            If mode & #__align_top
               bottom = #__align_proportional
            EndIf
            If mode & #__align_bottom
               top = #__align_proportional
            EndIf
            ;
            mode = 0
         EndIf
         
         ;\\
         If *this\parent
            If Not *this\parent\align
               *this\parent\align.allocate( ALIGN )
            EndIf
            If Not *this\align
               *this\align.allocate( ALIGN )
            EndIf
            
            ;\\
            If *this\align
               ;\\ horizontal
               If left Or ( Not right And constants::BinaryFlag( Flag, #__align_full ))
                  If left = #__align_proportional ;Or ( left And mode & #__align_proportional = #__align_proportional )
                     *this\align\left = - 1
                  Else
                     *this\align\left = 1
                  EndIf
               Else
                  *this\align\left = 0
               EndIf
               If right Or ( Not left And constants::BinaryFlag( Flag, #__align_full ))
                  If right = #__align_proportional ;Or ( right And mode & #__align_proportional = #__align_proportional )
                     *this\align\right = - 1
                  Else
                     *this\align\right = 1
                  EndIf
               Else
                  *this\align\right = 0
               EndIf
               
               ;\\ vertical
               If top Or ( Not bottom And constants::BinaryFlag( Flag, #__align_full ))
                  If top = #__align_proportional ;Or ( top And mode & #__align_proportional = #__align_proportional )
                     *this\align\top = - 1
                  Else
                     *this\align\top = 1
                  EndIf
               Else
                  *this\align\top = 0
               EndIf
               If bottom Or ( Not top And constants::BinaryFlag( Flag, #__align_full ))
                  If bottom = #__align_proportional ;Or ( bottom And mode & #__align_proportional = #__align_proportional )
                     *this\align\bottom = - 1
                  Else
                     *this\align\bottom = 1
                  EndIf
               Else
                  *this\align\bottom = 0
               EndIf
               
               ;\\ ?-надо тестировать
               If Not *this\parent\align\width
                  *this\parent\align\x     = *this\parent\container_x( )
                  *this\parent\align\width = *this\parent\frame_width( )
                  If *this\parent\type = #__type_window
                     *this\parent\align\x + *this\parent\fs
                     *this\parent\align\width - *this\parent\fs * 2 - ( *this\parent\fs[1] + *this\parent\fs[3] )
                  EndIf
               EndIf
               If Not *this\parent\align\height
                  *this\parent\align\y      = *this\parent\container_y( )
                  *this\parent\align\height = *this\parent\frame_height( )
                  If *this\parent\type = #__type_window
                     *this\parent\align\y + *this\parent\fs
                     *this\parent\align\height - *this\parent\fs * 2 - ( *this\parent\fs[2] + *this\parent\fs[4] )
                  EndIf
               EndIf
               
               ;\\
               ; Debug ""+mode +" - "+ left+" "+top+" "+right+" "+bottom
               If mode = 0
                  *this\align\x = *this\container_x( )
                  *this\align\y = *this\container_y( )
                  ;\\
                  If *this\type = #__type_window
                     *this\align\width  = *this\inner_width( )
                     *this\align\height = *this\inner_height( )
                  Else
                     *this\align\width  = *this\frame_width( )
                     *this\align\height = *this\frame_height( )
                  EndIf
                  
               Else
                  ;\\ full horizontal
                  If *this\align\right And *this\align\left
                     *this\align\x     = 0
                     *this\align\width = *this\parent\align\width
                     If *this\type = #__type_window
                        *this\align\width - *this\fs * 2
                     EndIf
                  Else
                     *this\align\width = *this\frame_width( )
                     If Not *this\align\right And *this\align\left
                        ; left
                        *this\align\x = 0
                     ElseIf Not *this\align\right And Not *this\align\left
                        ; center
                        *this\align\x = ( *this\parent\align\width - *this\frame_width( ) ) / 2
                     ElseIf *this\align\right And Not *this\align\left
                        ; right
                        *this\align\x = *this\parent\align\width - *this\frame_width( )
                        If *this\type = #__type_window
                           *this\align\x - *this\fs * 2
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ full vertical
                  If *this\align\bottom And *this\align\top
                     *this\align\y      = 0
                     *this\align\height = *this\parent\align\height
                     If *this\type = #__type_window
                        *this\align\height - *this\fs * 2
                     EndIf
                  Else
                     *this\align\height = *this\frame_height( )
                     If Not *this\align\bottom And *this\align\top
                        ; top
                        *this\align\y = 0
                     ElseIf Not *this\align\bottom And Not *this\align\top
                        ; center
                        *this\align\y = ( *this\parent\align\height - *this\frame_height( ) ) / 2
                     ElseIf *this\align\bottom And Not *this\align\top
                        ; bottom
                        *this\align\y = *this\parent\align\height - *this\frame_height( )
                        If *this\type = #__type_window
                           *this\align\y - *this\fs * 2
                        EndIf
                     EndIf
                  EndIf
                  
                  ;
                  ;\\ auto stick change
                  If *this\parent\align
                     If left = #__align_auto And *this\parent\align\autodock\x
                        left = - *this\parent\align\autodock\x
                     EndIf
                     If right = #__align_auto And *this\parent\align\autodock\width
                        right = - *this\parent\align\autodock\width
                     EndIf
                     If top = #__align_auto And *this\parent\align\autodock\y
                        top = - *this\parent\align\autodock\y
                     EndIf
                     If bottom = #__align_auto And *this\parent\align\autodock\height
                        bottom = - *this\parent\align\autodock\height
                     EndIf
                     ;
                     If left < 0 Or right < 0
                        If left And right
                           *this\align\x - left
                           *this\align\width - *this\align\x + right
                        Else
                           *this\align\x - left + right
                        EndIf
                     EndIf
                     If top < 0 Or bottom < 0
                        If top And bottom
                           *this\align\y - top
                           *this\align\height - *this\align\y + bottom
                        Else
                           *this\align\y - top + bottom
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ auto stick position
                  If Not *this\align\right And *this\align\left
                     *this\parent\align\autodock\x = *this\align\x + *this\align\width
                     If *this\type = #__type_window
                        *this\parent\align\autodock\x + *this\fs * 2
                     EndIf
                  EndIf
                  If Not *this\align\bottom And *this\align\top
                     *this\parent\align\autodock\y = *this\align\y + *this\align\height
                     If *this\type = #__type_window
                        *this\parent\align\autodock\y + *this\fs * 2
                     EndIf
                  EndIf
                  If Not *this\align\left And *this\align\right
                     *this\parent\align\autodock\width = *this\parent\inner_width( ) - *this\align\x
                  EndIf
                  If Not *this\align\top And *this\align\bottom
                     *this\parent\align\autodock\height = *this\parent\inner_height( ) - *this\align\y
                  EndIf
                  
                  ;\\ auto stick update
                  If constants::BinaryFlag( Flag, #__align_full )
                     If ( *this\parent\align\autodock\x Or
                          *this\parent\align\autodock\y Or
                          *this\parent\align\autodock\width Or
                          *this\parent\align\autodock\height )
                        
                        ; loop enumerate widgets
                        If StartEnum( *this\parent )
                           If widget( )\align
                              If widget( )\align\top And widget( )\align\bottom
                                 widget( )\align\y      = widget( )\parent\align\autodock\y
                                 widget( )\align\height = widget( )\parent\inner_height( ) - ( widget( )\parent\align\autodock\y + widget( )\parent\align\autodock\height )
                                 
                                 If widget( )\align\left And widget( )\align\right
                                    widget( )\align\x     = widget( )\parent\align\autodock\x
                                    widget( )\align\width = widget( )\parent\inner_width( ) - ( widget( )\parent\align\autodock\x + widget( )\parent\align\autodock\width )
                                    
                                    If widget( )\type = #__type_window
                                       widget( )\align\width - widget( )\fs * 2
                                    EndIf
                                 EndIf
                                 
                                 If widget( )\type = #__type_window
                                    widget( )\align\height - widget( )\fs * 2
                                 EndIf
                              EndIf
                           EndIf
                           StopEnum( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               ; update parent children's coordinate
               *this\parent\align\update = 1
               ; Resize( *this\parent, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               PostRepaint( *this\root )
            EndIf
         EndIf
      EndProcedure
      
      Procedure SetMoveBounds( *this._s_WIDGET, MinimumX.l = #PB_Ignore, MinimumY.l = #PB_Ignore, MaximumX.l = #PB_Ignore, MaximumY.l = #PB_Ignore )
         ; If the value is set to #PB_Ignore, the current value is not changed.
         ; If the value is set to #PB_Default, the value is reset to the system default (as it was before this command was invoked).
         Protected.l X = #PB_Ignore, Y = #PB_Ignore, Width = #PB_Ignore, Height = #PB_Ignore
         
         *this\bounds\move.allocate(BOUNDMOVE)
                  
         If MinimumX = #PB_Ignore
            If Not *this\bounds\move\min\x
               *this\bounds\move\min\x = *this\parent\scroll_x( ) 
            EndIf
         Else
            If MinimumX = #PB_Default
               *this\bounds\move\min\x = *this\container_x( ) 
            Else
               *this\bounds\move\min\x = DPIScaledX(MinimumX)
            EndIf
         EndIf
         If MinimumY = #PB_Ignore
            If Not *this\bounds\move\min\y
               *this\bounds\move\min\y = *this\parent\scroll_y( ) 
            EndIf
         Else
            If MinimumY = #PB_Default
               *this\bounds\move\min\y = *this\container_y( ) 
            Else
               *this\bounds\move\min\y = DPIScaledY(MinimumY)
            EndIf
         EndIf
         If MaximumX = #PB_Ignore
            If Not *this\bounds\move\max\x
               If *this\parent\scroll_width( ) 
                  *this\bounds\move\max\x = *this\parent\scroll_width( ) 
               Else
                  *this\bounds\move\max\x = *this\parent\inner_width( )
               EndIf
            EndIf
         Else
            If MaximumX = #PB_Default
               *this\bounds\move\max\x = *this\container_x( ) + *this\frame_width( ) 
            Else
               *this\bounds\move\max\x = DPIScaledX(MaximumX)
            EndIf
         EndIf
         If MaximumY = #PB_Ignore
            If Not *this\bounds\move\max\y
               If *this\parent\scroll_height( )
                  *this\bounds\move\max\y = *this\parent\scroll_height( ) 
               Else
                  *this\bounds\move\max\y = *this\parent\inner_height( )
               EndIf
            EndIf
         Else
            If MaximumY = #PB_Default
               *this\bounds\move\max\y = *this\container_y( ) + *this\frame_height( )
            Else
               *this\bounds\move\max\y = DPIScaledY(MaximumY) 
            EndIf
         EndIf
         
         ;\\
         If *this\bounds\move\min\x <> #PB_Ignore And
            *this\bounds\move\min\x > *this\frame_x( )
            X = DPIUnScaledX(*this\bounds\move\min\x)
         EndIf
         If *this\bounds\move\max\x <> #PB_Ignore And
            *this\frame_width( ) > *this\bounds\move\max\x - *this\bounds\move\min\x
            Width = DPIUnScaledX( *this\bounds\move\max\x - *this\bounds\move\min\x )
         EndIf
         If *this\bounds\move\min\y <> #PB_Ignore And
            *this\bounds\move\min\y > *this\frame_y( )
            Y = DPIUnScaledY(*this\bounds\move\min\y)
         EndIf 
         If *this\bounds\move\max\y <> #PB_Ignore And
            *this\frame_height( ) > *this\bounds\move\max\y - *this\bounds\move\min\y
            Height = DPIUnScaledY( *this\bounds\move\max\y - *this\bounds\move\min\y)
         EndIf
         
         ProcedureReturn Resize( *this, X, Y, Width, Height )
      EndProcedure
      
      Procedure SetSizeBounds( *this._s_WIDGET, MinimumWidth.l = #PB_Ignore, MinimumHeight.l = #PB_Ignore, MaximumWidth.l = #PB_Ignore, MaximumHeight.l = #PB_Ignore )
         ; If the value is set to #PB_Ignore, the current value is not changed.
         ; If the value is set to #PB_Default, the value is reset to the system default (as it was before this command was invoked).
         Protected.l X = #PB_Ignore, Y = #PB_Ignore, Width = #PB_Ignore, Height = #PB_Ignore
         
         *this\bounds\size.allocate(BOUNDSIZE)
         
         If MinimumWidth = #PB_Ignore
            If Not *this\bounds\size\min\width
               *this\bounds\size\min\width = *this\fs * 2 + *this\fs[1] + *this\fs[3]
            EndIf
         Else
            If MinimumWidth = #PB_Default
               *this\bounds\size\min\width = *this\frame_width( )
            Else
               *this\bounds\size\min\width = DPIScaledX(MinimumWidth)
            EndIf
         EndIf
         If MinimumHeight = #PB_Ignore
            If Not *this\bounds\size\min\height
               *this\bounds\size\min\height = *this\fs * 2 + *this\fs[2] + *this\fs[4]
            EndIf
         Else
            If MinimumHeight = #PB_Default
               *this\bounds\size\min\height = *this\frame_height( )
            Else
               *this\bounds\size\min\height = DPIScaledY(MinimumHeight)
            EndIf
         EndIf
         
         If MaximumWidth = #PB_Ignore
            If Not *this\bounds\size\max\width
               If *this\parent\scroll\h
                  *this\bounds\size\max\width = *this\parent\scroll\h\bar\max
               Else
                  *this\bounds\size\max\width = *this\parent\inner_width( )
               EndIf
            EndIf
         Else
            If MaximumWidth = #PB_Default
               *this\bounds\size\max\width = *this\frame_width( )
            Else
               *this\bounds\size\max\width = DPIScaledX(MaximumWidth)
            EndIf
         EndIf
         If MaximumHeight = #PB_Ignore
            If Not *this\bounds\size\max\height
               If *this\parent\scroll\v
                  *this\bounds\size\max\height = *this\parent\scroll\v\bar\max
               Else
                  *this\bounds\size\max\height = *this\parent\inner_height( )
               EndIf
            EndIf
         Else
            If MaximumHeight = #PB_Default
               *this\bounds\size\max\height = *this\frame_height( )
            Else
               *this\bounds\size\max\height = DPIScaledY(MaximumHeight)
            EndIf
         EndIf
         
         If *this\frame_width( ) < *this\bounds\size\min\width
            Width = DPIUnScaledX( *this\bounds\size\min\width )
         EndIf
         If *this\frame_width( ) > *this\bounds\size\max\width
            Width = DPIUnScaledX( *this\bounds\size\max\width )
         EndIf
         If *this\frame_height( ) < *this\bounds\size\min\height
            Height = DPIUnScaledY( *this\bounds\size\min\height )
         EndIf
         If *this\frame_height( ) > *this\bounds\size\max\height
            Height = DPIUnScaledY( *this\bounds\size\max\height )
         EndIf
         
         ProcedureReturn Resize( *this, X, Y, Width, Height )
      EndProcedure
      
      Procedure SetChildrenBounds( *this._s_WIDGET, state.b )
         *this\bounds\children = state
      EndProcedure
      
      
      ;-
      Procedure.i AddColumn( *this._s_WIDGET, position.l, Text.s, Width.l, Image.i = -1 )
         Protected *columns.allocate( COLUMN )
         
         ;\\
         If *columns
            ;\\ Генерируем идентификатор
            If position < 0 Or
               position > ListSize( *this\columns( )) - 1
               ;
               LastElement( *this\columns( ))
               AddElement( *this\columns( ))
               If position < 0
                  position = ListIndex( *this\columns( )) 
               EndIf
            Else
               SelectElement( *this\columns( ), position )
               ;
               InsertElement( *this\columns( ))
            EndIf
            ;
            *this\columns( ) = *columns
            
            ;\\
            *columns\y     = 0
            *columns\width = DPIScaled( Width )
            *columns\text\TextChange( ) = 1
            *columns\text\string.s = Text.s
            *columns\x = (*this\text\padding\x + *this\scroll_width( ))
            *this\scroll_width( ) + *columns\width
            
            ;\\
            ;*this\fs[2] = 24
            If *this\type = #__type_listicon
               *columns\height = DPIScaled( 24 )
            EndIf
            
            ProcedureReturn *columns
         EndIf
      EndProcedure
      
      Procedure.i AddItem_Tree( *this._s_WIDGET, List *rows._S_ROWS( ), position.l, Text.s, Image.i = -1, sublevel.i = 0 )
         Protected last
         Protected *row.allocate(ROWS)
         Protected._s_ROWS *parent_row
         
         If *this
            If *row
               ;{ Генерируем идентификатор
               If position < 0 Or position > ListSize( *this\__rows( )) - 1
                  ResetList( *this\__rows( )) 
                  LastElement( *this\__rows( ))
                  AddElement( *this\__rows( ))
                  
                  If position < 0
                     position = ListIndex( *this\__rows( ))
                  EndIf
               Else
                  SelectElement( *this\__rows( ), position )
                  
                  ; for the tree( )
                  If sublevel > *this\__rows( )\sublevel
                     PushListPosition( *this\__rows( ))
                     If PreviousElement( *this\__rows( ))
                        *this\RowLastAdd( ) = *this\__rows( )
                     Else
                        last     = *this\RowLastAdd( )
                        sublevel = *this\__rows( )\sublevel
                     EndIf
                     PopListPosition( *this\__rows( ))
                  Else
                     last     = *this\RowLastAdd( )
                     sublevel = *this\__rows( )\sublevel
                  EndIf
                  
                  InsertElement( *this\__rows( ))
               EndIf
               ;}
               
               *this\__rows( ) = *row
               
               *row\columnindex = ListIndex( *this\columns( ))
               *row\position = position 
               
               If sublevel > position
                  sublevel = position
               EndIf
               
               If *this\RowLastAdd( )
                  If sublevel > *this\RowLastAdd( )\sublevel
                     sublevel    = *this\RowLastAdd( )\sublevel + 1
                     *parent_row = *this\RowLastAdd( )
                     
                  ElseIf *this\RowLastAdd( )\RowParent( )
                     If sublevel > *this\RowLastAdd( )\RowParent( )\sublevel
                        *parent_row = *this\RowLastAdd( )\RowParent( )
                        
                     ElseIf sublevel < *this\RowLastAdd( )\sublevel
                        If *this\RowLastAdd( )\RowParent( )\RowParent( )
                           *parent_row = *this\RowLastAdd( )\RowParent( )\RowParent( )
                           
                           While *parent_row
                              If sublevel >= *parent_row\sublevel
                                 If sublevel = *parent_row\sublevel
                                    *parent_row = *parent_row\RowParent( )
                                 EndIf
                                 Break
                              Else
                                 *parent_row = *parent_row\RowParent( )
                              EndIf
                           Wend
                        EndIf
                        
                        ; for the editor( )
                        If *this\RowLastAdd( )\RowParent( )
                           If *this\RowLastAdd( )\RowParent( )\sublevel = sublevel
                              ;                     *row\before = *this\RowLastAdd( )\RowParent( )
                              ;                     *this\RowLastAdd( )\RowParent( )\after = *row
                              
                              If *this\type = #__type_Editor
                                 *parent_row         = *this\RowLastAdd( )\RowParent( )
                                 *parent_row\_last    = *row
                                 *this\RowLastAdd( ) = *parent_row
                                 last                = *parent_row
                              EndIf
                              
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               If *parent_row
                  *parent_row\childrens + 1
                  *row\RowParent( ) = *parent_row
               EndIf
               
               If sublevel
                  *row\sublevel = sublevel
               EndIf
               
               If Not last
                  If sublevel = 0
                     *this\RowLast( ) = *row
                  EndIf
                  ;
                  *this\RowLastAdd( ) = *row
                  ;
                  ; for the tree( )
                  If *row\RowParent( ) And
                     *row\RowParent( )\sublevel < sublevel
                     *row\RowParent( )\_last = *row
                  EndIf
               EndIf
               
               
               If position = 0
                  If sublevel = 0
                     *this\RowFirst( ) = *row
                  EndIf
               EndIf
               
               If *this\mode\collapsed And 
                  *row\RowParent( ) And *row\sublevel > *row\RowParent( )\sublevel
                  *row\RowParent( )\ItemButtonState( ) = 1
                  *row\hide                      = 1
               EndIf
               
               ; properties
               If *this\flag & #__tree_property
                  If *parent_row And Not *parent_row\sublevel And Not GetFontID( *parent_row )
                     *parent_row\color\back     = $FFF9F9F9
                     *parent_row\color\back[1]  = *parent_row\color\back
                     *parent_row\color\back[2]  = *parent_row\color\back
                     *parent_row\color\frame    = *parent_row\color\back
                     *parent_row\color\frame[1] = *parent_row\color\back
                     *parent_row\color\frame[2] = *parent_row\color\back
                     *parent_row\color\front[1] = *parent_row\color\front
                     *parent_row\color\front[2] = *parent_row\color\front
                     SetFontID( *parent_row, FontID( LoadFont( #PB_Any, "Helvetica", 14, #PB_Font_Bold | #PB_Font_Italic )))
                  EndIf
               EndIf
               
               ; add lines
               *row\color         = *this\color ; _get_colors_( )
               *row\ColorState( ) = 0
               *row\color\back    = 0
               *row\color\frame   = 0
               
               *row\color\fore[0] = 0
               *row\color\fore[1] = 0
               *row\color\fore[2] = 0
               *row\color\fore[3] = 0
               
               ;
               ;                If *this\RowLast( )
               ;                   If *this\RowLast( )\_type = #__type_Option
               ;                      *row\Row__Option( ) = *this\RowLast( )\Row__Option( )
               ;                   Else
               ;                      *row\Row__Option( ) = *this\RowLast( )
               ;                   EndIf
               ;                Else
               *row\Row__Option( ) = *row\RowParent( )
               ;                EndIf
               
               
               ;If Text
               *row\text\TextChange( ) = 1
               *row\text\string   = Text ; StringField( Text.s, ListIndex( *this\columns( )) + 1, #LF$);Chr(9) )
                                         ;*row\text\edit\string = StringField( Text.s, 2, #LF$ )
                                         ;EndIf
               
               ;\\
               If *row\columnindex = 0
                  *this\countitems + 1
                  *this\WidgetChange( ) = 1
                  add_image( *this, *row\Image, Image )
                  
                  If *this\RowFocused( )
                     *this\RowFocused( )\_focus = 0
                     *this\RowFocused( )\ColorState( ) = #__s_0
                     
                     *this\RowFocused( )             = *row
                     *this\RowFocused( )\_focus = 1
                     *this\RowFocused( )\ColorState( ) = #__s_2 + Bool( *this\focus = #False )
                  EndIf
                  
                  If *this\ScrollState( ) = #True
                     *this\ScrollState( ) = - 1
                  EndIf
                  
                  If test_redraw_items
                     PostRepaint( *this\root )
                  EndIf
               EndIf
            EndIf
         EndIf
         ;EndWith
         
         ProcedureReturn *row
      EndProcedure
      
      Procedure AddItem( *this._s_WIDGET, Item.l, Text.s, Image.i = - 1, flag.q = 0 )
         Protected result
         ;          
         ;CompilerIf #PB_Compiler_DPIAware
         If IsImage( Image )
            ;Debug ""+ImageWidth(Image)+""+DPIResolutionX( )
            If ImageWidth(Image) =< 16 And ImageHeight(Image) =< 16
               ResizeImage(Image, DPIScaled(ImageWidth(Image)), DPIScaled(ImageHeight(Image)), #PB_Image_Raw )
            EndIf
         EndIf
         ;CompilerEndIf
         
         If *this\type = #__type_MDI
            *this\countitems + 1 ;?
            
            flag | #__window_SystemMenu | #__window_MaximizeGadget | #__window_MinimizeGadget
            If Not constants::BinaryFlag( Flag, #__window_BorderLess ) 
               flag | #__window_SizeGadget
            EndIf
            result = Window( #PB_Ignore, #PB_Ignore, 280, 180, Text, flag | #__window_Child, *this )
            
            If IsImage( Image )
               If constants::BinaryFlag( Flag, #__window_BorderLess ) 
                  SetBackgroundImage( result, Image )
               Else
                  SetImage( result, Image )
               EndIf
            EndIf
            
            ProcedureReturn result
         EndIf
         
         If *this\type = #__type_ListIcon
            Protected String.s, count
            count = CountString(Text, #LF$)
            ForEach *This\Columns( )
               String = StringField( Text, ListIndex( *this\columns( )) + 1, #LF$)
               If String Or count = ListIndex( *this\columns( ))
                  AddItem_Tree( *this, *this\__rows( ), Item, String, Image, flag )
               EndIf
            Next
         EndIf
         
         If *this\type = #__type_Editor
            ProcedureReturn edit_AddItem( *this, item, @text, Len(Text) )
         EndIf
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_Properties
            ProcedureReturn AddItem_Tree( *this, *this\__rows( ), Item, Text, Image, flag )
         EndIf
         
         If *this\type = #__type_ListView
            ProcedureReturn AddItem_Tree( *this, *this\__rows( ), Item, Text, Image, flag )
         EndIf
         
         If *this\type = #__type_combobox
            If *this\__Popup( )
               ProcedureReturn AddItem_Tree( *this\__Popup( ), *this\__Popup( )\__rows( ), Item, Text, Image, flag )
            Else
               ProcedureReturn AddItem_Tree( *this, *this\__rows( ), Item, Text, Image, flag )
            EndIf
         EndIf
         
         If is_bar_( *this ) Or *this\type = #__type_TabBar
            ProcedureReturn bar_AddItem( *this, Item, Text, Image, flag )
         EndIf
         
         If *this\type = #__type_Panel
            ProcedureReturn bar_AddItem( *this\__Tab( ), Item, Text, Image, flag )
         EndIf
      EndProcedure
      
      ;-
      Procedure RemoveItem( *this._s_WIDGET, Item.l )
         Protected result
         
         If *this\type = #__type_Editor
            edit_RemoveItem( *this, Item )
            
            result = #True
         EndIf
         
         ; - widget::tree_remove_item( )
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #False
            EndIf
            
            ;\\
            Protected sublevel = *this\__rows( )\sublevel
            Protected *parent_row._s_ROWS = *this\__rows( )\RowParent( )
            
            ; if is last parent item then change to the prev element of his level
            If *parent_row And *parent_row\_last = *this\__rows( )
               PushListPosition( *this\__rows( ))
               While PreviousElement( *this\__rows( ))
                  If *parent_row = *this\__rows( )\RowParent( )
                     *parent_row\_last = *this\__rows( )
                     Break
                  EndIf
               Wend
               PopListPosition( *this\__rows( ))
               
               ; if the remove last parent children's
               If *parent_row\_last = *this\__rows( )
                  *parent_row\childrens = #False
                  *parent_row\_last      = #Null
               Else
                  *parent_row\childrens = #True
               EndIf
            EndIf
            
            ; before deleting a parent, we delete its children's
            If *this\__rows( )\childrens
               PushListPosition( *this\__rows( ))
               While NextElement( *this\__rows( ))
                  If *this\__rows( )\sublevel > sublevel
                     DeleteElement( *this\__rows( ))
                     *this\countitems - 1
                  Else
                     Break
                  EndIf
               Wend
               PopListPosition( *this\__rows( ))
            EndIf
            
            ; if the item to be removed is selected,
            ; then we set the next item of its level as selected
            If *this\RowFocused( ) = *this\__rows( )
               If *this\RowFocused( )\press
                  *this\RowFocused( )\press = 0
               EndIf
               *this\RowFocused( )\_focus = 0 ;???
               
               ; if he is a parent then we find the next item of his level
               PushListPosition( *this\__rows( ))
               While NextElement( *this\__rows( ))
                  If *this\__rows( )\sublevel = *this\RowFocused( )\sublevel
                     Break
                  EndIf
               Wend
               
               ; if we remove the last selected then
               If *this\RowFocused( ) = *this\__rows( )
                  *this\RowFocused( ) = PreviousElement( *this\__rows( ))
               Else
                  *this\RowFocused( ) = *this\__rows( )
               EndIf
               
               PopListPosition( *this\__rows( ))
               
               If *this\RowFocused( )
                  If *this\RowFocused( )\RowParent( ) And
                     *this\RowFocused( )\RowParent( )\ItemButtonState( )
                     *this\RowFocused( ) = *this\RowFocused( )\RowParent( )
                  EndIf
                  
                  *this\RowFocused( )\press       = #True
                  *this\RowFocused( )\_focus = 1
                  *this\RowFocused( )\ColorState( ) = #__s_2 + Bool( *this\focus = #False )
               EndIf
            EndIf
            
            *this\WidgetChange( ) = 1
            *this\countitems - 1
            DeleteElement( *this\__rows( ))
            PostRepaint( *this\root )
            result = #True
         EndIf
         
         If *this\type = #__type_Panel
            result = bar_tab_removeItem( *this\__Tab( ), Item )
            
         ElseIf is_bar_( *this ) Or *this\type = #__type_TabBar
            result = bar_tab_removeItem( *this, Item )
            
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l ClearItems( *this._s_WIDGET )
         Protected result
         
         ; - widget::editor_clear_items( )
         If *this\type = #__type_Editor
            edit_ClearItems( *this )
            ProcedureReturn #True
         EndIf
         
         ; - widget::tree_clear_items( )
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If *this\countitems <> 0
               ;; Post( *this, #__event_Change, #PB_All ) ;
               
               *this\WidgetChange( ) = 1
               *this\countitems     = 0
               
               If *this\RowFocused( )
                  *this\RowFocused( )\ColorState( ) = 0
                  ClearStructure(*this\RowFocused( ), _s_ROWS)
                  *this\RowFocused( ) = 0
               EndIf
               
               ClearList( *this\__rows( ))
               PostRepaint( *this\root )
            EndIf
         EndIf
         
         ; - Panel_ClearItems( )
         If *this\type = #__type_Panel
            result = bar_tab_clearItems( *this\__Tab( ) )
            
         ElseIf is_bar_( *this ) Or *this\type = #__type_TabBar
            result = bar_tab_clearItems( *this )
            
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l CountItems( *this._s_WIDGET )
         If *this\__Tab( )
            ProcedureReturn *this\__Tab( )\countitems
         Else
            ProcedureReturn *this\countitems
         EndIf
      EndProcedure
      
      Procedure   CountType( *this._s_WIDGET, mode.b = #False )
         If mode
            ProcedureReturn typeCount( Str( *this\parent + *this\type ) ) - 1
         Else
            ProcedureReturn typeCount( Str( *this\window + *this\type ) ) - 1
         EndIf
      EndProcedure
      
      
      ;-
      ;-  BARs
      ;-
      ; Farbaddition
      Procedure.i TabBarGadget_ColorPlus(Color.i, Plus.i) ; Code OK
         
         If Color & $FF + Plus & $FF < $FF
            Color + Plus & $FF
         Else
            Color | $FF
         EndIf
         If Color & $FF00 + Plus & $FF00 < $FF00
            Color + Plus & $FF00
         Else
            Color | $FF00
         EndIf
         If Color & $FF0000 + Plus & $FF0000 < $FF0000
            Color + Plus & $FF0000
         Else
            Color | $FF0000
         EndIf
         
         ProcedureReturn Color
         
      EndProcedure
      
      ; Farbsubtraktion
      Procedure.i TabBarGadget_ColorMinus(Color.i, Minus.i) ; Code OK
         
         If Color & $FF - Minus & $FF > 0
            Color - Minus & $FF
         Else
            Color & $FFFFFF00
         EndIf
         If Color & $FF00 - Minus & $FF00 > 0
            Color - Minus & $FF00
         Else
            Color & $FFFF00FF
         EndIf
         If Color & $FF0000 - Minus & $FF0000 > 0
            Color - Minus & $FF0000
         Else
            Color & $FF00FFFF
         EndIf
         
         ProcedureReturn Color
         
      EndProcedure
      
      
      Macro bar_in_start_( _bar_ )
         Bool( _bar_\area\pos >= _bar_\thumb\pos )
      EndMacro
      
      Macro bar_in_stop_( _bar_ )
         Bool( _bar_\thumb\pos >= _bar_\area\end ) 
      EndMacro
      
      ;       Macro bar_page_in_stop_( _bar_ )
      ;          Bool( _bar_\page\pos >= _bar_\page\end - _bar_\min[2] ) ;
      ;       EndMacro
      
      ;       Macro bar_page_in_start_( _bar_ )
      ;          Bool( _bar_\page\pos <= _bar_\min + _bar_\min[1] ) ;
      ;       EndMacro
      
      Macro bar_page_pos_( _bar_, _thumb_pos_ )
         ( _bar_\min + Round((( _thumb_pos_ ) - _bar_\area\pos ) / _bar_\percent, #PB_Round_Nearest ))
      EndMacro
      
      Macro bar_thumb_pos_( _bar_, _scroll_pos_ )
         Round((( _scroll_pos_ ) - _bar_\min - _bar_\min[1] ) * _bar_\percent, #PB_Round_Nearest )
      EndMacro
      
      Macro bar_set_scroll_pos_( _this_, _pos_, _len_ )
         Bool( Bool(((( _pos_ ) + _this_\bar\min ) - _this_\bar\page\pos ) < 0 And bar_PageChange( _this_, (( _pos_ ) + _this_\bar\min ) )) Or
               Bool(((( _pos_ ) + _this_\bar\min ) - _this_\bar\page\pos ) > ( _this_\bar\page\len - ( _len_ )) And bar_PageChange( _this_, (( _pos_ ) + _this_\bar\min ) - ( _this_\bar\page\len - ( _len_ ) ))) )
      EndMacro
      
      Macro bar_invert_page_pos_( _bar_, _scroll_pos_ )
         ( Bool( Not _bar_\invert ) * ( _scroll_pos_ ) +
           Bool( _bar_\invert ) * ( _bar_\page\end - ( _scroll_pos_ - _bar_\min )) )
      EndMacro
      
      ;-
      Procedure bar_AddItem( *this._s_WIDGET, Item.i, Text.s, Image.i = -1, sublevel.i = 0 )
         Protected result
         
         If is_bar_( *this )
            LastElement( *this\__tabs( ))
            AddElement( *this\__tabs( ))
            
            *this\__tabs.allocate( ITEMS, ( ))
            *this\__tabs( )\itemindex = Item
            
         ElseIf *this\type = #__type_TabBar
            If Item < 0 Or
               Item > *this\countitems - 1
               LastElement( *this\__tabs( ))
               AddElement( *this\__tabs( ))
               item = ListIndex( *this\__tabs( ))
            Else
               If SelectElement( *this\__tabs( ), Item )
                  If *this\TabState( ) >= Item
                     *this\TabState( ) + 1
                  EndIf
                  
                  InsertElement( *this\__tabs( ))
                  
                  ; перемещаем индекс детей на один вперед
                  ; (начиная с выбранного индекса)
                  If is_integral_( *this )
                     If StartEnum( *this\parent )
                        If widget( )\parent = *this\parent 
                           If widget( )\TabIndex( ) >= Item
                              widget( )\TabIndex( ) + 1
                           EndIf
                        EndIf
                        StopEnum( )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            *this\__tabs.allocate( ITEMS, ( ))
         EndIf
         
         ;\\ TabBar last opened item
         *this\TabChange( )      = #True
         *this\countitems + 1
         
         ;\\
         *this\__tabs( )\color       = _get_colors_( )
         *this\__tabs( )\height      = *this\height - 1
         *this\__tabs( )\text\string = Text.s
         
         ;\\ set default selected tab
         If item = 0 
            If Not *this\TabFocused( )
               *this\TabState( )         = 0
               ;
               If *this\type = #__type_TabBar
                  *this\TabFocused( )       = *this\__tabs( )
                  *this\TabFocused( )\ScrollToActive( - 1 ) ; scroll to active tab
               EndIf
            EndIf
         EndIf
         
         add_image( *this, *this\__tabs( )\Image, Image )
         PostRepaint( *this\root )
         ;         
         If is_integral_( *this )
            If *this\parent = Opened( )
               If *this\type = #__type_TabBar
                  *this\TabIndex( ) = Item
               EndIf
            Else
               OpenList( *this\parent, Item )
            EndIf
         EndIf
         
         ProcedureReturn *this\__tabs( )
      EndProcedure
      
      Procedure.i bar_tab_SetState( *this._s_WIDGET, item.l )
         Protected result.b
         
         ; prevent selection of a non-existent tab
         If item < 0
            item = - 1
         EndIf
         If item > *this\countitems - 1
            item = *this\countitems - 1
         EndIf
         
         If *this\TabState( ) <> item
            *this\TabState( ) = item
            
            *this\TabChange( ) = #True
            
            If *this\TabFocused( )
               *this\TabFocused( )\_focus = 0
               *this\TabFocused( )       = #Null
            EndIf
            
            If item >= 0
               ;PushListPosition( *this\__tabs( ) )
               SelectElement( *this\__tabs( ), item )
               
               *this\TabFocused( )       = *this\__tabs( )
               *this\TabFocused( )\ScrollToActive( - 1 ) ; scroll to active tab
               
               ;PopListPosition( *this\__tabs( ) )
            EndIf
            
            If is_integral_( *this )
               If *this\parent\haschildren
                  If StartEnum( *this\parent )
                     ; hide all children's except those whose parent-item is selected
                     HideState( widgets( ), widgets( )\parent )
                     DisableState( widgets( ), widgets( )\parent )
                     StopEnum( )
                  EndIf
               EndIf
               *this = *this\parent
            EndIf
            ;
            ;\\ tab items focus change
            DoEvents( *this, #__event_Change, item, *this\TabFocused( ) )
            result = #True
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i bar_tab_RemoveItem( *this._s_WIDGET, Item.l )
         If SelectElement( *this\__tabs( ), item )
            *this\TabChange( ) = #True
            
            DeleteElement( *this\__tabs( ), 1 )
            
            ; If Not *this\anchors
            ;         If *this\parent\__Tab( ) = *this
            ;           DoEvents( *this\parent, Item, #__event_CloseItem )
            ;         Else
            ;           DoEvents( *this, Item, #__event_CloseItem )
            ;         EndIf
            ; Endif
            
            *this\countitems - 1
         EndIf
      EndProcedure
      
      Procedure bar_tab_ClearItems( *this._s_WIDGET ) ; Ok
         If *this\countitems <> 0
            
            *this\TabChange( ) = #True
            ClearList( *this\__tabs( ))
            
            ; If Not *this\anchors
            ;         If *this\parent\__Tab( ) = *this
            ;           DoEvents( *this\parent, #PB_All, #__event_CloseItem )
            ;         Else
            ;           DoEvents( *this, #PB_All, #__event_CloseItem )
            ;         EndIf
            ; EndIf
            
            *this\countitems = 0
         EndIf
      EndProcedure
      
      Procedure.s bar_tab_GetItemText( *this._s_WIDGET, Item.l, Column.l = 0 )
         Protected result.s
         
         If is_item_( *this, Item ) And
            SelectElement( *this\__tabs( ), Item )
            result = *this\__tabs( )\text\string
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.b bar_tab_UpdateItems( *this._s_WIDGET, List *tabs._s_ITEMS( ) )
         With *this
            Protected Index
            Protected pos
            Protected separator_step 
            
            
            Protected._s_BAR *bar = *this\bar
            Protected._s_BUTTONS *BB1, *BB2, *SB
            *SB  = *bar\button
            *BB1 = *bar\button[1]
            *BB2 = *bar\button[2]
            
            If is_bar_( *this )
               separator_step = 0
               pos = DPIScaled(1) 
            EndIf
            If *this\parent And *this\parent\type = #__type_Panel
               pos = toogleline
            EndIf
            
            Protected layout = pos * 2
            Protected text_pos = DPIScaled(6)
            Protected image_pos = 3
            
            
            ;pos = ( pos )
            
            If Not *this\hide 
               ; - widget::bar_tab_update_( )
               If *this\TabChange( ) Or *this\resize\ResizeChange( )
                  
                  *bar\max = 0
                  *this\image\x = ( *this\height - (16) - pos - (1) ) / 2
                  ; Debug " --- widget::Tab_Update( ) - " + *this\width +" "+ *this\height
                  
                  ; *this\text\width = *this\width
                  *this\scroll_width( ) = 0
                  *this\scroll_height( ) = 0
                  
                  If *bar\vertical
                     If is_menu_( *this )
                        ForEach *tabs( )
                           ; if not visible then skip
                           If *tabs( )\hide
                              Continue
                           EndIf
                           ;
                           draw_font( *tabs( ) )
                           
                           ; init items position
                           If *bar\vertical
                              If *this\scroll_width( ) < 20+*tabs( )\text\width 
                                 *this\scroll_width( ) = 20+*tabs( )\text\width
                                 
                                 If constants::BinaryFlag( *this\flag, #PB_ToolBar_InlineText )
                                    *this\scroll_width( ) + *tabs( )\image\width 
                                 EndIf
                              EndIf
                              If *tabs( )\childrens 
                                 *this\scroll_width( ) + 60
                              EndIf
                           EndIf
                        Next
                     Else
                        *this\scroll_width( ) = *this\width 
                     EndIf
                  Else
                     *this\scroll_height( ) = *this\height
                  EndIf
                  
                  ;Debug  "scroll width="+*this\width;*this\scroll_width( )
                  ForEach *tabs( )
                     If *tabs( )\hide
                        Continue
                     EndIf
                     
                     ;\\
                     draw_font( *tabs( ), GetFontID( *this ) )
                     
                     Index = ListIndex( *tabs( ) )
                     
                     ; init items position
                     If *bar\vertical
                        *tabs( )\y = *bar\max + pos
                        
                        If *this\type = #__type_TabBar
                           If *this\TabState( ) = Index
                              *tabs( )\x        = - Bool( *this\parent\fs[3] )
                              *tabs( )\width    = *this\width
                           Else
                              *tabs( )\x       = Bool( *this\parent\fs[3] ) + Bool( *this\parent\fs[1] ) * toogleline
                              *tabs( )\width  = *this\width - toogleline - DPIScaled(1) - 1
                           EndIf
                           
                        Else
                           *tabs( )\x             = pos
                           If *tabs( )\itemindex  = #PB_Ignore
                              *tabs( )\x          + 3
                           EndIf
                           
                           *tabs( )\width  = *this\scroll_width( ) - *tabs( )\x * 2
                        EndIf
                        
                        If *tabs( )\itemindex  = #PB_Ignore
                           *tabs( )\y      + separator_step
                           *tabs( )\height = 1
                           *bar\max         + separator_step * 2
                        Else
                           ;
                           Debug "why "+*tabs( )\height +" ?"
                           *tabs( )\height = 0
                           ;
                           If *tabs( )\image\height
                              *tabs( )\height = *tabs( )\image\height
                           EndIf
                           If *tabs( )\text\height
                              If constants::BinaryFlag( *this\flag, #PB_ToolBar_InlineText )
                                 If Not *tabs( )\image\height 
                                    *tabs( )\height = *tabs( )\text\height
                                 EndIf
                              Else
                                 *tabs( )\height + *tabs( )\text\height
                              EndIf
                           EndIf
                           
                           ;
                           *tabs( )\height + (6)
                           ;
                           If constants::BinaryFlag( *this\flag, #PB_ToolBar_InlineText )
                              ;
                              ;                               *tabs( )\image\x = *tabs( )\x + ( *tabs( )\width - *tabs( )\image\width - *tabs( )\text\width ) / 2 
                              ;                               *tabs( )\text\x  = *tabs( )\image\x + *tabs( )\image\width + 5
                              Protected align_x = (5)
                              *tabs( )\image\x = *tabs( )\x + align_x
                              *tabs( )\text\x  = *tabs( )\image\x + *tabs( )\image\width + align_x + (5)
                              
                              ;
                              *tabs( )\image\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\image\height )/2
                              *tabs( )\text\y  = *tabs( )\y + ( *tabs( )\height - *tabs( )\text\height )/2
                              ;                          
                           Else
                              If *tabs( )\text\width
                                 *tabs( )\image\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\image\height - *tabs( )\text\height ) / 2
                              Else
                                 *tabs( )\image\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\image\height ) / 2
                              EndIf
                              ;
                              *tabs( )\text\y  = *tabs( )\image\y + *tabs( )\image\height
                              ;
                              *tabs( )\image\x = *tabs( )\x + ( *tabs( )\width - *tabs( )\image\width )/2
                              *tabs( )\text\x  = *tabs( )\x + ( *tabs( )\width - *tabs( )\text\width )/2
                           EndIf
                        EndIf
                        
                        ;
                        If *this\type = #__type_TabBar
                           *bar\max + *tabs( )\height + DPIScaled(Bool( Index <> *this\countitems - 1 )) + Bool( Index = *this\countitems - 1 ) * layout
                        Else
                           *bar\max + *tabs( )\height + pos + Bool( Index = *this\countitems - 1 )
                        EndIf
                     Else
                        *tabs( )\x = *bar\max + pos
                        ;
                        If *this\type = #__type_TabBar
                           If *this\TabState( ) = Index
                              *tabs( )\y       = - (Bool( *this\parent\fs[4] ))
                              *tabs( )\height  = *this\height
                           Else
                              *tabs( )\y       = Bool( *this\parent\fs[4] ) + Bool( *this\parent\fs[2] ) * toogleline
                              *tabs( )\height  = *this\height - toogleline - DPIScaled(1) - 1
                           EndIf
                           
                        Else
                           *tabs( )\y       = pos
                           If *tabs( )\itemindex  = #PB_Ignore
                              *tabs( )\y      + 3
                           EndIf
                           
                           *tabs( )\height  = *this\scroll_height( ) - *tabs( )\y * 2
                        EndIf
                        ;
                        If *tabs( )\itemindex  = #PB_Ignore
                           *tabs( )\x      + separator_step
                           *tabs( )\width  = 1
                           *bar\max + *tabs( )\width + pos + (separator_step * 2)
                        Else
                           ;
                           *this\text\y = ( *tabs( )\height - *tabs( )\text\height ) / 2
                           ;
                           *tabs( )\image\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\image\height ) / 2
                           *tabs( )\text\y  = *tabs( )\y + *this\text\y
                           
                           ;
                           *tabs( )\image\x = *tabs( )\x + Bool( *tabs( )\image\width ) * image_pos
                           *tabs( )\text\x  = text_pos + *tabs( )\image\x + *tabs( )\image\width
                           
                           ;
                           *tabs( )\width = (Bool( *tabs( )\text\width ) * ( text_pos * 2 ) + *tabs( )\text\width +
                                            Bool( *tabs( )\image\width ) * ( image_pos * 2 ) + *tabs( )\image\width) - Bool( *tabs( )\image\width And *tabs( )\text\width ) * ( text_pos )
                          
                           ;
                           If *this\type = #__type_TabBar
                              *bar\max + *tabs( )\width + DPIScaled(Bool( Index <> *this\countitems - 1 )) + Bool( Index = *this\countitems - 1 ) * layout
                              ;*bar\max + *tabs( )\width + pos + Bool( index = *this\countitems - 1 )
                           Else
                              If Not constants::BinaryFlag( *this\flag, #PB_ToolBar_InlineText )
                                 If *tabs( )\text\width
                                    If *tabs( )\width > *tabs( )\image\width 
                                       *tabs( )\width - *tabs( )\image\width 
                                    EndIf
                                    ;
                                    *tabs( )\image\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\image\height - *tabs( )\text\height ) / 2
                                    *tabs( )\text\y  = *tabs( )\image\y + *tabs( )\image\height
                                    ;
                                    *tabs( )\image\x = *tabs( )\x + ( *tabs( )\width - *tabs( )\image\width )/2
                                    *tabs( )\text\x  = *tabs( )\x + ( *tabs( )\width - *tabs( )\text\width )/2
                                 EndIf
                              EndIf
                              
                              *bar\max + *tabs( )\width + pos + Bool( Index = *this\countitems - 1 )
                           EndIf
                        EndIf
                     EndIf
                  Next
                  ;
                  If *bar\vertical
                     *this\scroll_height( ) = *bar\max
                  Else
                     *this\scroll_width( ) = *bar\max
                  EndIf
                  ;
                  bar_Update( *this, #True )
                  ;
                  *this\TabChange( ) = #False
               EndIf
               
               ;
               ; drawin
               ;
               If *bar\vertical
                  *BB2\x = *this\frame_x( ) + ( *this\frame_width( ) + pos - *BB2\size ) / 2
                  *BB1\x = *this\frame_x( ) + ( *this\frame_width( ) + pos - *BB1\size ) / 2
               Else
                  *BB2\y = *this\frame_y( ) + ( *this\frame_height( ) + pos - *BB2\size ) / 2
                  *BB1\y = *this\frame_y( ) + ( *this\frame_height( ) + pos - *BB1\size ) / 2
               EndIf
               
            EndIf
            
         EndWith
      EndProcedure
      
      ;-
      Macro draw_navigator_buttons( _this_ )
         ; background buttons draw
         If Not _this_\bar\button[1]\hide
            If _this_\bar\button[1]\color\fore <> - 1
               draw_mode_alpha_( #PB_2DDrawing_Gradient )
               draw_gradient_(_this_\bar\vertical, _this_\bar\button[1], _this_\bar\button[1]\color\fore[_this_\bar\button[1]\ColorState( )], _this_\bar\button[1]\color\back[_this_\bar\button[1]\ColorState( )] )
            Else
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_box(_this_\bar\button[1], color\back)
               ; draw_roundbox_( _this_\bar\button[1]\x, _this_\bar\button[1]\y, _this_\bar\button[1]\width, _this_\bar\button[1]\height, _this_\bar\button[1]\round, _this_\bar\button[1]\round, _this_\bar\button[1]\color\frame[_this_\bar\button[1]\ColorState( )] & $FFFFFF | _this_\bar\button[1]\AlphaState24( ) )
            EndIf
         EndIf
         If Not _this_\bar\button[2]\hide
            If _this_\bar\button[2]\color\fore <> - 1
               draw_mode_alpha_( #PB_2DDrawing_Gradient )
               draw_gradient_(_this_\bar\vertical, _this_\bar\button[2], _this_\bar\button[2]\color\fore[_this_\bar\button[2]\ColorState( )], _this_\bar\button[2]\color\back[_this_\bar\button[2]\ColorState( )] )
            Else
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_box(_this_\bar\button[2], color\back)
              ; draw_roundbox_( _this_\bar\button[2]\x, _this_\bar\button[2]\y, _this_\bar\button[2]\width, _this_\bar\button[2]\height, _this_\bar\button[2]\round, _this_\bar\button[2]\round, _this_\bar\button[2]\color\frame[_this_\bar\button[2]\ColorState( )] & $FFFFFF | _this_\bar\button[2]\AlphaState24( ) )
            EndIf
         EndIf
         
         draw_mode_alpha_( #PB_2DDrawing_Outlined )
         
         ;
         If _this_\type = #__type_Scroll
            If _this_\bar\vertical
               If (_this_\bar\page\len + Bool(_this_\round ) * (_this_\width / 4 )) = _this_\frame_height( )
                  Line(_this_\frame_x( ), _this_\frame_y( ), 1, _this_\bar\page\len + 1, _this_\color\front & $FFFFFF | _this_\AlphaState24( ) ) ; $FF000000 ) ;
               Else
                  Line(_this_\frame_x( ), _this_\frame_y( ) + _this_\bar\button[1]\round, 1, _this_\height - _this_\bar\button[1]\round - _this_\bar\button[2]\round, _this_\color\front & $FFFFFF | _this_\AlphaState24( ) ) ; $FF000000 ) ;
               EndIf
            Else
               If (_this_\bar\page\len + Bool(_this_\round ) * (_this_\height / 4 )) = _this_\frame_width( )
                  Line(_this_\frame_x( ), _this_\frame_y( ), _this_\bar\page\len + 1, 1, _this_\color\front & $FFFFFF | _this_\AlphaState24( ) ) ; $FF0000ff ) ;
               Else
                  Line(_this_\frame_x( ) + _this_\bar\button[1]\round, _this_\frame_y( ), _this_\frame_width( ) - _this_\bar\button[1]\round - _this_\bar\button[2]\round, 1, _this_\color\front & $FFFFFF | _this_\AlphaState24( ) ) ; $FF000000 ) ;
               EndIf
            EndIf
         EndIf
         
         ; frame buttons draw
         If Not _this_\bar\button[1]\hide
            If _this_\bar\button[1]\arrow\size
               If _this_\flag & #__spin_Plus 
                  draw_plus( _this_\bar\button[1], Bool( _this_\bar\invert ) )
               Else
                  draw_arrows( _this_\bar\button[1], Bool(_this_\bar\vertical ) + (Bool(_this_\type <> #__type_Scroll)*2))
               EndIf
            EndIf
            draw_box(_this_\bar\button[1], color\frame)
            ; draw_roundbox_( _this_\bar\button[1]\x, _this_\bar\button[1]\y, _this_\bar\button[1]\width, _this_\bar\button[1]\height, _this_\bar\button[1]\round, _this_\bar\button[1]\round, _this_\bar\button[1]\color\frame[_this_\bar\button[1]\ColorState( )] & $FFFFFF | _this_\bar\button[1]\AlphaState24( ) )
         EndIf
         If Not _this_\bar\button[2]\hide
            If _this_\bar\button[2]\arrow\size
               If _this_\flag & #__spin_Plus 
                  draw_plus( _this_\bar\button[2], Bool( Not _this_\bar\invert ) )
               Else
                  draw_arrows( _this_\bar\button[2], Bool(_this_\bar\vertical ) + (Bool(_this_\type = #__type_Scroll)*2) )
               EndIf
            EndIf
            draw_box(_this_\bar\button[2], color\frame)
            ; draw_roundbox_( _this_\bar\button[2]\x, _this_\bar\button[2]\y, _this_\bar\button[2]\width, _this_\bar\button[2]\height, _this_\bar\button[2]\round, _this_\bar\button[2]\round, _this_\bar\button[2]\color\frame[_this_\bar\button[2]\ColorState( )] & $FFFFFF | _this_\bar\button[2]\AlphaState24( ) )
         EndIf
      EndMacro     
      
      Macro bar_draw_item_( _vertical_, _address_, _x_, _y_, _round_, _mode_, _flag_ = 1 )
         ; Draw back
         If _flag_ = 1
            draw_mode_alpha_( #PB_2DDrawing_Gradient )
            draw_gradientbox_( 0, _x_ + _address_\x, _y_ + _address_\y, _address_\width, _address_\height, _address_\color\fore#_mode_, _address_\color\back#_mode_, _round_, _address_\AlphaState( ) )
         EndIf
         ;
         ; Draw items image
         If _address_\image\id
            draw_mode_alpha_( #PB_2DDrawing_Transparent )
            DrawAlphaImage( _address_\image\id, _x_ + _address_\image\x, _y_ + _address_\image\y, _address_\ColorAlphaState( ) )
         EndIf
         ;
         ; Draw items text
         If _address_\text\string
            draw_mode_alpha_( #PB_2DDrawing_Transparent )
            DrawText( _x_ + _address_\text\x, _y_ + _address_\text\y, _address_\text\string, _address_\color\front#_mode_ & $FFFFFF | _address_\AlphaState24( ) )
         EndIf
         
         If _vertical_ > 0
            If _address_\childrens
               DrawText( _x_ + _address_\text\x + _address_\text\width + 20, _y_ + _address_\text\y, ">", _address_\color\front#_mode_ & $FFFFFF | _address_\AlphaState24( ) )
            EndIf
         EndIf
         ;          
         ; Draw frame
         If _flag_ = 1
            draw_mode_alpha_( #PB_2DDrawing_Outlined )
            draw_roundbox_( _x_ + _address_\x, _y_ + _address_\y, _address_\width, _address_\height, _round_, _round_, _address_\color\frame#_mode_ & $FFFFFF | _address_\AlphaState24( ) )
         EndIf
      EndMacro
      
      Procedure bar_draw_tabitems( *this._s_WIDGET, vertical, X,Y, round, List *tabs._s_ITEMS( ) )
         Protected._s_BAR *bar = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         ; draw all visible items
         ForEach *tabs( )
            If *tabs( )\hide 
               *tabs( )\visible = 0
               Continue
            EndIf
            ;
            draw_font( *tabs( ) )
            
            ; real visible items
            If vertical
               *tabs( )\visible = Bool( (( Y + *tabs( )\y + *tabs( )\height ) > *this\inner_y( ) And
                                         ( Y + *tabs( )\y ) < ( *this\inner_y( ) + *this\inner_height( ) ) ))
            Else
               *tabs( )\visible = Bool( (( X + *tabs( )\x + *tabs( )\width ) > *this\inner_x( ) And
                                         ( X + *tabs( )\x ) < ( *this\inner_x( ) + *this\inner_width( ) ) ))
            EndIf
            ;
            ; Draw separator
            ;no &~ entered &~ focused
            If *tabs( )\visible 
               If *tabs( )\itemindex = #PB_Ignore
                  draw_roundbox_( X + *tabs( )\x, Y + *tabs( )\y, *tabs( )\width, *tabs( )\height, 0, 0, *tabs( )\color\frame[0] & $FFFFFF | *tabs( )\AlphaState24( ) )
               Else
                  If is_menu_( *this )
                     If constants::BinaryFlag( *this\flag, #PB_ToolBar_InlineText )
                        If *tabs( )\image\id
                           If *this\bar\vertical
                              draw_mode_alpha_( #PB_2DDrawing_Default )
                              draw_roundbox_(X + *tabs( )\x,
                                             Y + *tabs( )\y - Bool( ListIndex( *tabs( ) ))*3, 
                                             *tabs( )\image\width + 10,
                                             *tabs( )\height + Bool( ListIndex( *tabs( ) ))*3 + Bool( ListIndex( *tabs( ) ) <> *this\countitems - 1 )*3, 
                                             *this\round, *this\round, $FFF0F0F0 )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
                  If *tabs( )\TabItemState( )
                     bar_draw_item_( *this\bar\vertical, *tabs( ), X, Y, round, [2] )
                  Else
                     If *tabs( ) <> *this\TabFocused( ) And 
                        *tabs( ) <> *this\TabEntered( )
                        ;                     ;
                        ;Debug ""+*BB1\hide +" "+ Str( *BB1\x ) +" "+ Str( x + *tabs( )\x ) +" - "+ *SB\width
                        ;Debug ""+*BB2\hide +" "+ Str( *BB2\x ) +" "+ Str( x + *tabs( )\x )
                        ;                         
                        ;                         If (( *BB2\x + *BB2\width < x + *tabs( )\x ) Or ( *BB2\hide And *BB2\x + *BB2\width > x + *tabs( )\x )) Or
                        ;                            (( *BB1\x > x + *tabs( )\x + *tabs( )\width ) Or ( *BB1\hide And *BB1\x < x + *tabs( )\x + *tabs( )\width )) 
                        bar_draw_item_( *this\bar\vertical, *tabs( ), X, Y, round, [0], Bool( Not( is_bar_( *this ) And Not constants::BinaryFlag( *this\flag, #PB_Toolbar_Buttons ))) )
                        ;                         EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         Next
         ;
         ; draw mouse-enter visible item
         If *this\TabEntered( ) <> *this\TabFocused( )
            If *this\TabEntered( ) And
               *this\TabEntered( )\TabItemState( ) = 0 And
               *this\TabEntered( )\visible 
               ;
               If *this\TabEntered( )\itemindex <> #PB_Ignore
                  draw_font( *this\TabEntered( ) )
                  bar_draw_item_( *this\bar\vertical, *this\TabEntered( ), X, Y, round, [*this\TabEntered( )\ColorState( )] )
               EndIf
            EndIf
         EndIf
         
         ;
         ; draw key-focus visible item
         If *this\TabFocused( ) And
            *this\TabFocused( )\visible
            Protected._s_ITEMS *activeTAB = *this\TabFocused( )
            ;   
            If *this\TabFocused( )\itemindex <> #PB_Ignore
               draw_font( *this\TabFocused( ) )
               ;
               If *this\child 
                  If *this\parent
                     If Not *this\TabFocused( )\press
                        draw_mode_alpha_( #PB_2DDrawing_Default )
                        draw_roundbox_( X + *this\TabFocused( )\x,
                                        Y + *this\TabFocused( )\y,
                                        *this\TabFocused( )\width,
                                        *this\TabFocused( )\height,
                                        *this\round, *this\round,
                                        *this\parent\color\back )
                     EndIf
                  EndIf
                  
                  bar_draw_item_( *this\bar\vertical, *this\TabFocused( ), X, Y, round, [0], 0 )
                  
               Else
                  ;
                  bar_draw_item_( *this\bar\vertical, *this\TabFocused( ), X, Y, round, [2] )
               EndIf
            EndIf
         EndIf
         
         ; draw focus-item frame
         If *this\child
            If *this\parent
               Protected color = *this\parent\color\frame
               If *this\parent\focus >= 0 
                  color = *this\parent\color\frame[*this\parent\focus]
               EndIf
               
               If *bar\vertical
                  If *activeTAB And 
                     *activeTAB\visible
                     ; frame on the selected item
                     If *this\parent\fs[1]
                        Box(X + *activeTAB\x, Y + *activeTAB\y, toogleline, *activeTAB\height, color)
                     ElseIf *this\parent\fs[3]
                        Box(X + *activeTAB\x + *activeTAB\width-toogleline, Y + *activeTAB\y, toogleline, *activeTAB\height, color)
                     EndIf
                     Line( X + *activeTAB\x, Y + *activeTAB\y, *activeTAB\width - *activeTAB\x - Bool(*this\parent\fs[3]), 1, color )
                     Line( X + *activeTAB\x, Y + *activeTAB\y + *activeTAB\height - 1, *activeTAB\width - *activeTAB\x - Bool(*this\parent\fs[3]), 1, color )
                     ;
                     If is_menu_( *this )
                        Line( X + *activeTAB\x + *activeTAB\width - 1, Y + *activeTAB\y, 1, *activeTAB\height, color )
                     EndIf
                  EndIf
                  ;
                  If *this\type = #__type_TabBar
                     color = *this\parent\color\frame
                     ;
                     If *this\parent\fs[1]
                        If *activeTAB
                           ; horizontal tab bottom line
                           Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ), 1, ( Y + *activeTAB\y ) - *this\frame_y( ), color ) 
                           Line( *this\frame_x( ) + *this\frame_width( ) - 1, Y + *activeTAB\y + *activeTAB\height, 1, *this\frame_y( ) + *this\frame_height( ) - ( Y + *activeTAB\y + *activeTAB\height ), color )
                        Else
                           Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ), 1, *this\frame_height( ), color )
                        EndIf
                     Else
                        Line( *this\parent\frame_x( ), *this\parent\frame_y( ), 1, *this\parent\frame_height( ), color )
                     EndIf
                     
                     ;
                     Line( *this\parent\inner_x( ) - 1, *this\parent\frame_y( ), *this\parent\inner_width( ) + 2, 1, color )
                     Line( *this\parent\inner_x( ) - 1, *this\parent\frame_y( ) + *this\parent\frame_height( ) - 1, *this\parent\inner_width( ) + 2, 1, color )
                     
                     If *this\parent\fs[3]
                        If *activeTAB 
                           ; horizontal tab bottom line
                           Line( *this\frame_x( ) - 1, *this\frame_y( ), 1, ( Y + *activeTAB\y ) - *this\frame_y( ), color ) 
                           Line( *this\frame_x( ) - 1, Y + *activeTAB\y + *activeTAB\height, 1, *this\frame_y( ) + *this\frame_height( ) - ( Y + *activeTAB\y + *activeTAB\height ), color )
                        Else
                           Line( *this\frame_x( ) - 1, *this\frame_y( ), 1, *this\frame_height( ), color )
                        EndIf
                     Else
                        Line( *this\parent\frame_x( ) + *this\parent\frame_width( ) - 1, *this\parent\frame_y( ), 1, *this\parent\frame_height( ), color )
                     EndIf
                  EndIf
                  
               Else
                  If *activeTAB And 
                     *activeTAB\visible
                     ; frame on the selected item
                     If *this\parent\fs[2]
                        Box(X + *activeTAB\x, Y + *activeTAB\y, *activeTAB\width, toogleline, color)
                     ElseIf *this\parent\fs[4]
                        Box(X + *activeTAB\x, Y + *activeTAB\y + *activeTAB\height-toogleline, *activeTAB\width, toogleline, color)
                     EndIf
                     Line( X + *activeTAB\x, Y + *activeTAB\y, 1, *activeTAB\height - *activeTAB\y - Bool(*this\parent\fs[4]), color )
                     Line( X + *activeTAB\x + *activeTAB\width - 1, Y + *activeTAB\y, 1, *activeTAB\height - *activeTAB\y - Bool(*this\parent\fs[4]), color )
                     ;
                     If is_menu_( *this )
                        Line( X + *activeTAB\x, Y + *activeTAB\y + *activeTAB\height - 1, *activeTAB\width, 1, color )
                     EndIf
                  EndIf
                  ;
                  If *this\type = #__type_TabBar
                     color = *this\parent\color\frame
                     ;
                    ; Line( *this\parent\frame_x( ), *this\parent\frame_y( ), *this\parent\frame_width( ), 1, color )
                     If *this\parent\fs[2]
                        If *activeTAB 
                           ; horizontal tab bottom line
                           Line( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - 1, ( X + *activeTAB\x ) - *this\frame_x( ), 1, color ) 
                           Line( X + *activeTAB\x + *activeTAB\width, *this\frame_y( ) + *this\frame_height( ) - 1, *this\frame_x( ) + *this\frame_width( ) - ( X + *activeTAB\x + *activeTAB\width ), 1, color )
                        Else
                           Line( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - 1, *this\frame_width( ), 1, color )
                        EndIf
                     Else
                        Line( *this\parent\inner_x( ), *this\parent\inner_y( ), *this\parent\inner_width( ), 1, color )
                     EndIf
                     
                     ;
                     Line( *this\parent\inner_x( ) - 1, *this\parent\inner_y( ) - 1, 1, *this\parent\inner_height( ) + 2, color )
                    ; Line( *this\parent\frame_x( ), *this\parent\frame_y( ) - 1, 1, *this\parent\frame_height( ) + 2, color )
                     
                     Line( *this\parent\inner_x( ) + *this\parent\inner_width( ), *this\parent\inner_y( ) - 1, 1, *this\parent\inner_height( ) + 2, color )
                    ; Line( *this\parent\frame_x( ) + *this\parent\frame_width( ) - 1, *this\parent\frame_y( ) - 1, 1, *this\parent\frame_height( ) + 2, color )
                     
                     ;
                     If *this\parent\fs[4]
                        If *activeTAB 
                           ; horizontal tab bottom line
                           Line( *this\frame_x( ), *this\frame_y( ) - 1, ( X + *activeTAB\x ) - *this\frame_x( ), 1, color ) 
                           Line( X + *activeTAB\x + *activeTAB\width, *this\frame_y( ) - 1, *this\frame_x( ) + *this\frame_width( ) - ( X + *activeTAB\x + *activeTAB\width ), 1, color )
                        Else
                           Line( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), 1, color )
                        EndIf
                     Else
                        Line( *this\parent\inner_x( ), *this\parent\inner_y( ) + *this\parent\inner_height( ), *this\parent\inner_width( ), 1, color )
                     EndIf
                    ; Line( *this\parent\frame_x( ), *this\parent\frame_y( ) + *this\parent\frame_height( ) - 1, *this\parent\frame_width( ), 1, color )
                  EndIf
                  
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.b bar_draw_tab( *this._s_WIDGET )
         Protected Color, X, Y
         Protected forecolor
         Protected backcolor
         
         With *this
            Protected._s_ITEMS *activeTAB = *this\TabFocused( )
            Protected._s_BAR *bar = *this\bar
            Protected._s_BUTTONS *BB1, *BB2, *SB
            If Not *bar
               ProcedureReturn 0
            EndIf
            
            *SB  = *bar\button
            *BB1 = *bar\button[1]
            *BB2 = *bar\button[2]
            
            ;\\
            If Not *this\hide And *this\AlphaState( )
               If is_integral_( *this )
                  ; draw_font( *this , CurrentFontID( ) );, GetFontID( *this\parent ) )
                  If ChangeFontID( *this, CurrentFontID( ))
                  EndIf
               EndIf
               
               If *this\color\back <> - 1
                  ; Draw scroll bar background
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back & $FFFFFF | *this\AlphaState24( ) )
               EndIf
               ; ;                ;
               ; ;                If constants::BinaryFlag( *this\flag, #PB_Toolbar_InlineText )
               ; ;                            *this\image\width = 32 - 4
               ; ;                   draw_mode_alpha_( #PB_2DDrawing_Default )
               ; ;                   If *this\bar\vertical
               ; ;                      draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\image\width, *this\height, *SB\round, *SB\round, *this\color\frame & $FFFFFF | *this\AlphaState24( ) )
               ; ;                   Else
               ; ;                      draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\width, *this\image\height, *SB\round, *SB\round, *this\color\frame & $FFFFFF | *this\AlphaState24( ) )
               ; ;                   EndIf
               ; ;                EndIf
               ;
               ;\\
               bar_tab_UpdateItems( *this, *this\__tabs( ) )
               ;
               X = *SB\x
               Y = *SB\y 
               
               If *this\child
                  If *this\parent
                     If *this\parent\fs[4]
                        ; y + 1
                     EndIf
                  EndIf
               EndIf
               
               bar_draw_tabitems( *this, *this\bar\vertical, X,Y, *SB\round, *this\__tabs( ) )
               
               ;
               ;\\
               Protected State_3, Color_frame
               color = $FF909090
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               
               ; draw lines
               If *this\type = #__type_TabBar
                  
                  ; Navigation
                  Protected pf
                  If is_integral_( *this )
                     pf = *this\parent\bs
                     If *this\parent\parent
                        If is_root_( *this\parent\parent )
                           backcolor = $FFf0f0f0
                        Else
                           backcolor = *this\parent\parent\color\back[\parent\ColorState( )]
                        EndIf
                     Else
                        backcolor = *this\parent\color\back[\parent\ColorState( )]
                     EndIf
                     If Not backcolor
                        backcolor = *BB2\color\back[\ColorState( )]
                     EndIf
                  Else
                     backcolor = *this\parent\color\back[\parent\ColorState( )]
                  EndIf
                  
                  Protected fabe_pos, round = 0, button_size = 20, Size = 60+pf, fabe_out = Size - button_size
                  ;;backcolor = RGBA(64, 128, 192, 64)
                  ;backcolor = backcolor & $FFFFFF | 160 << 24 ;$ff00ff00
                  
                  draw_mode_alpha_( #PB_2DDrawing_Gradient )
                  ResetGradientColors( )
                  GradientColor( 0.0, backcolor & $FFFFFF )
                  GradientColor( 0.5, backcolor & $FFFFFF | 160 << 24 )
                  GradientColor( 1.0, backcolor & $FFFFFF | 255 << 24 )
                  
                  ;
                  If *bar\vertical
                     ; to top
                     If Not *BB2\hide
                        fabe_pos = *this\frame_y( ) + ( size ) - pf
                        LinearGradient( *this\frame_x( ) - pf, fabe_pos, *this\frame_x( ) - pf, fabe_pos - fabe_out )
                        draw_roundbox_( *this\frame_x( ) - pf, fabe_pos, *this\frame_width( ) + pf - 1, - Size, round, round )
                     EndIf
                     
                     ; to bottom
                     If Not *BB1\hide
                        fabe_pos = *this\frame_y( ) + *this\frame_height( ) - ( size ) + pf
                        LinearGradient( *this\frame_x( ) - pf, fabe_pos, *this\frame_x( ) - pf, fabe_pos + fabe_out )
                        draw_roundbox_( *this\frame_x( ) - pf, fabe_pos, *this\frame_width( ) + pf - 1 , Size, round, round )
                     EndIf
                  Else
                     ; to left
                     If Not *BB2\hide
                        fabe_pos = *this\frame_x( ) + ( size ) - pf
                        LinearGradient( fabe_pos, *this\frame_y( ) - pf, fabe_pos - fabe_out, *this\frame_y( ) - pf )
                        draw_roundbox_( fabe_pos, *this\frame_y( ) - pf, - Size, *this\frame_height( ) + pf - 1, round, round )
                     EndIf
                     
                     ; to right
                     If Not *BB1\hide
                        fabe_pos = *this\frame_x( ) + *this\frame_width( ) - ( size ) + pf
                        LinearGradient( fabe_pos, *this\frame_y( ) - pf, fabe_pos + fabe_out, *this\frame_y( ) - pf )
                        draw_roundbox_( fabe_pos, *this\frame_y( ) - pf, Size, *this\frame_height( ) + pf - 1 , round, round )
                     EndIf
                  EndIf
                  
                  ResetGradientColors( )
               EndIf
               
               ;\\
               draw_navigator_buttons( *this )
               
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure.b bar_draw_scroll( *this._s_WIDGET )
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         With *this
            If test_scrollbars_resize
               ; Debug "  Draw scrolbar " + *this\class +" "+ *this\x +" "+ *this\y +" "+ *this\width +" "+ *this\height
            EndIf
            
            ;         DrawImage( ImageID( UpImage ), *BB1\x, *BB1\y )
            ;         DrawImage( ImageID( DownImage ), *BB2\x, *BB2\y )
            ;         ProcedureReturn
            
            If *this\AlphaState( )
               ; Draw scroll bar background
               If *this\color\back <> - 1
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  If *this\child
                     If *bar\vertical
                        draw_box_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\parent\container_height( ), *this\color\back )
                     Else
                        draw_box_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ) - *this\round / 2, *this\inner_height( ), *this\color\back )
                     EndIf
                  Else
                     draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back )
                  EndIf
               EndIf
               
               ;
;                ; background buttons draw
;                If Not *BB1\hide
;                   If *BB1\color\fore <> - 1
;                      draw_mode_alpha_( #PB_2DDrawing_Gradient )
;                      draw_gradient_(*bar\vertical, *BB1, *BB1\color\fore[*BB1\ColorState( )], *BB1\color\back[*BB1\ColorState( )] )
;                   Else
;                      draw_mode_alpha_( #PB_2DDrawing_Default )
;                      draw_box(*BB1, color\back)
;                   EndIf
;                EndIf
;                If Not *BB2\hide
;                   If *BB2\color\fore <> - 1
;                      draw_mode_alpha_( #PB_2DDrawing_Gradient )
;                      draw_gradient_(*bar\vertical, *BB2, *BB2\color\fore[*BB2\ColorState( )], *BB2\color\back[*BB2\ColorState( )] )
;                   Else
;                      draw_mode_alpha_( #PB_2DDrawing_Default )
;                      draw_box(*BB2, color\back)
;                   EndIf
;                EndIf
;                
;                draw_mode_alpha_( #PB_2DDrawing_Outlined )
;                
;                ;
;                If *this\type = #__type_Scroll
;                   If *bar\vertical
;                      If (*bar\page\len + Bool(*this\round ) * (*this\width / 4 )) = *this\frame_height( )
;                         Line(*this\frame_x( ), *this\frame_y( ), 1, *bar\page\len + 1, *this\color\front & $FFFFFF | *this\AlphaState24( ) ) ; $FF000000 ) ;
;                      Else
;                         Line(*this\frame_x( ), *this\frame_y( ) + *BB1\round, 1, *this\height - *BB1\round - *BB2\round, *this\color\front & $FFFFFF | *this\AlphaState24( ) ) ; $FF000000 ) ;
;                      EndIf
;                   Else
;                      If (*bar\page\len + Bool(*this\round ) * (*this\height / 4 )) = *this\frame_width( )
;                         Line(*this\frame_x( ), *this\frame_y( ), *bar\page\len + 1, 1, *this\color\front & $FFFFFF | *this\AlphaState24( ) ) ; $FF0000ff ) ;
;                      Else
;                         Line(*this\frame_x( ) + *BB1\round, *this\frame_y( ), *this\frame_width( ) - *BB1\round - *BB2\round, 1, *this\color\front & $FFFFFF | *this\AlphaState24( ) ) ; $FF000000 ) ;
;                      EndIf
;                   EndIf
;                EndIf
;                
;                ; frame buttons draw
;                If Not *BB1\hide
;                   If *BB1\arrow\size
;                      draw_arrows( *BB1, Bool(*bar\vertical ))
;                   EndIf
;                   draw_box(*BB1, color\frame)
;                EndIf
;                If Not *BB2\hide
;                   If *BB2\arrow\size
;                      draw_arrows( *BB2, Bool(*bar\vertical ) + 2 )
;                   EndIf
;                   draw_box(*BB2, color\frame)
;                EndIf
;                
               draw_navigator_buttons( *this )
               
               If *bar\thumb\len And *this\type <> #__type_Progress
                  ; Draw thumb
                  draw_mode_alpha_( #PB_2DDrawing_Gradient )
                  draw_gradient_(*bar\vertical, *SB, *SB\color\fore[*SB\ColorState( )], *SB\color\back[*SB\ColorState( )])
                  
                  If *SB\arrow\type ;*this\type = #__type_Scroll
                     If *SB\arrow\size
                        draw_mode_alpha_( #PB_2DDrawing_Default )
                        draw_arrows( *SB, *SB\arrow\direction )
                     EndIf
                  Else
                     ; Draw thumb lines
                     draw_mode_alpha_( #PB_2DDrawing_Default )
                     ;               FrontColor( *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                     ;               If *bar\vertical
                     ;                 Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 - DPIScaled(3), *SB\arrow\size, DPIScaled(1))
                     ;                 Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2, *SB\arrow\size, DPIScaled(1))
                     ;                 Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 + DPIScaled(3), *SB\arrow\size, DPIScaled(1))
                     ;               Else
                     ;                 Box(*SB\x + *SB\width / 2 - DPIScaled(3), *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size)
                     ;                 Box(*SB\x + *SB\width / 2, *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size)
                     ;                 Box(*SB\x + *SB\width / 2 + DPIScaled(3), *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size)
                     ;               EndIf
                     If *bar\vertical
                        Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 - DPIScaled(3), *SB\arrow\size, DPIScaled(1), *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                        Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2, *SB\arrow\size, DPIScaled(1), *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                        Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 + DPIScaled(3), *SB\arrow\size, DPIScaled(1), *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                     Else
                        Box(*SB\x + *SB\width / 2 - DPIScaled(3), *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size, *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                        Box(*SB\x + *SB\width / 2, *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size, *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                        Box(*SB\x + *SB\width / 2 + DPIScaled(3), *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size, *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                     EndIf
                     
                  EndIf
                  
                  ; Draw thumb frame
                  draw_mode_alpha_( #PB_2DDrawing_Outlined )
                  draw_box(*SB, color\frame)
               EndIf
               
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure.b bar_draw_progress( *this._s_WIDGET )
         Macro DrawHLines( _start_x_, _start_y_, _stop_x_, _stop_y_ )
            For y1 = _start_y_ To _stop_y_
               For x1 = _start_x_ To _stop_x_
                  If Point( *this\frame_x( ) + x1, *this\frame_y( ) + y1 ) & $FFFFFF = _frame_color_ & $FFFFFF
                     Line( *this\frame_x( ) + x1, *this\frame_y( ) + y1, *this\frame_width( ) - x1 * 2, 1 )
                     Break
                  EndIf
               Next x1
            Next y1
         EndMacro
         
         Macro DrawVLines( _start_x_, _start_y_, _stop_x_, _stop_y_ )
            For x1 = _start_x_ To _stop_x_
               For y1 = _start_y_ To _stop_y_
                  If Point( *this\frame_x( ) + x1, *this\frame_y( ) + y1 ) & $FFFFFF = _frame_color_ & $FFFFFF
                     Line( *this\frame_x( ) + x1, *this\frame_y( ) + y1, 1, *this\frame_height( ) - y1 * 2 )
                     Break
                  EndIf
               Next y1
            Next x1
         EndMacro
         
         With *this
            Protected *bar._s_BAR = *this\bar
            
            
            Protected x1, y1, _position_, _frame_size_ = 1, _gradient_ = 1
            Protected _vertical_ = *bar\vertical
            Protected _reverse_ = *bar\invert
            Protected _round_ = *this\round
            Protected alpha = 230
            Protected _frame_color_ = $FF000000 ; *this\color\frame
            Protected _fore_color1_
            Protected _back_color1_
            Protected _fore_color2_
            Protected _back_color2_
            
            Protected state1 = Bool(Not *bar\invert) * #__s_2
            Protected state2 = Bool(*bar\invert) * #__s_2
            
            alpha         = 230
            _fore_color1_ = *this\color\fore[state1] & $FFFFFF | alpha << 24 ; $f0E9BA81 ;
            _back_color1_ = *this\color\back[state1] & $FFFFFF | alpha << 24 ; $f0E89C3D ;
            
            alpha - 15
            _fore_color2_ = *this\color\fore[state2] & $FFFFFF | alpha << 24 ; $e0F8F8F8 ;
            _back_color2_ = *this\color\back[state2] & $FFFFFF | alpha << 24 ; $e0E2E2E2 ;
            
            If _vertical_
               
               ;           if _reverse_
               ;             _position_ = *bar\thumb\pos
               ;           Else
               _position_ = *this\frame_height( ) - *bar\thumb\pos
               ;           EndIf
            Else
               ;           if _reverse_
               ;             _position_ = *this\frame_width( ) - *bar\thumb\pos
               ;           Else
               _position_ = *bar\thumb\pos
               ;           EndIf
               
            EndIf
            
            If _position_ < 0
               _position_ = 0
            EndIf
            
            ; Debug "_position_ "+_position_ +" "+ *bar\page\pos
            
            ; https://www.purebasic.fr/english/viewtopic.php?f=13&t=75757&p=557936#p557936 ; thank you x1nfratec
            ; FrontColor(_frame_color_) ; не работает
            draw_mode_alpha_(#PB_2DDrawing_Outlined)
            draw_roundbox_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _frame_size_, *this\frame_width( ) - _frame_size_ * 2, *this\frame_height( ) - _frame_size_ * 2, _round_, _round_, _frame_color_)
            ;   draw_roundbox_(*this\frame_x( ) + _frame_size_+1, *this\frame_y( ) + _frame_size_+1, *this\frame_width( ) - _frame_size_*2-2, *this\frame_height( ) - _frame_size_*2-2, _round_,_round_)
            ;   ; ;   draw_roundbox_(*this\frame_x( ) + _frame_size_+2, *this\frame_y( ) + _frame_size_+2, *this\frame_width( ) - _frame_size_*2-4, *this\frame_height( ) - _frame_size_*2-4, _round_,_round_)
            ;   ;
            ;   ;   For x1 = 0 To 1
            ;   ;     draw_roundbox_(*this\frame_x( ) + (_frame_size_+i), *this\frame_y( ) + (_frame_size_+i), *this\frame_width( ) - (_frame_size_+i)*2, *this\frame_height( ) - (_frame_size_+i)*2, _round_,_round_)
            ;   ;   Next
            
            If _gradient_
               draw_mode_alpha_( #PB_2DDrawing_Gradient )
               If _vertical_
                  LinearGradient(*this\frame_x( ), *this\frame_y( ), (*this\frame_x( ) + *this\frame_width( )), *this\frame_y( ))
               Else
                  LinearGradient(*this\frame_x( ), *this\frame_y( ), *this\frame_x( ), (*this\frame_y( ) + *this\frame_height( )))
               EndIf
            Else
               draw_mode_alpha_( #PB_2DDrawing_Default )
            EndIf
            
            
            BackColor(_fore_color1_)
            FrontColor(_back_color1_)
            
            If Not _round_
               If _vertical_
                  draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _position_, *this\frame_width( ) - _frame_size_ * 2, (*this\frame_height( ) - _frame_size_ - _position_))
               Else
                  draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _frame_size_, _position_ - _frame_size_, *this\frame_height( ) - _frame_size_ * 2)
               EndIf
            Else
               
               If _vertical_
                  If (*this\frame_height( ) - _round_ - _position_) > _round_
                     If *this\frame_height( ) > _round_ * 2
                        ; рисуем прямоуголную часть
                        If _round_ > _position_
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _position_ + (_round_ - _position_), *this\frame_width( ) - _frame_size_ * 2, (*this\frame_height( ) - _round_ - _position_) - (_round_ - _position_))
                        Else
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _position_, *this\frame_width( ) - _frame_size_ * 2, (*this\frame_height( ) - _round_ - _position_))
                        EndIf
                     EndIf
                     
                     ;\\
                     DrawHLines( _frame_size_ , (*this\frame_height( ) - _round_), (*this\frame_width( ) - _frame_size_), (*this\frame_height( ) - _frame_size_))
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > _position_
                        DrawHLines( _frame_size_ , _frame_size_ + _position_, (*this\frame_width( ) - _frame_size_), _round_)
                     EndIf
                     
                  Else
                     DrawHLines( _frame_size_ , _position_ - _frame_size_, (*this\frame_width( ) - _frame_size_), (*this\frame_height( ) - _frame_size_))
                  EndIf
               Else
                  If _position_ > _round_
                     ; рисуем прямоуголную часть
                     If *this\frame_width( ) > _round_ * 2
                        If (*this\frame_width( ) - _position_) > _round_
                           draw_box_(*this\frame_x( ) + _round_, *this\frame_y( ) + _frame_size_, (_position_ - _round_) , *this\frame_height( ) - _frame_size_ * 2)
                        Else
                           draw_box_(*this\frame_x( ) + _round_, *this\frame_y( ) + _frame_size_, (_position_ - _round_) + (*this\frame_width( ) - _round_ - _position_), *this\frame_height( ) - _frame_size_ * 2)
                        EndIf
                     EndIf
                     
                     ;\\
                     DrawVLines( _frame_size_ , _frame_size_, _round_, (*this\frame_height( ) - _frame_size_ * 2))
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > (*this\frame_width( ) - _position_)
                        DrawVLines( (*this\frame_width( ) - _frame_size_ - _round_), _frame_size_ , (_position_ - _frame_size_), (*this\frame_height( ) - _frame_size_ * 2))
                     EndIf
                     
                  Else
                     DrawVLines( _frame_size_ , _frame_size_, (_position_ + _frame_size_ - 1), (*this\frame_height( ) - _frame_size_ * 2))
                  EndIf
               EndIf
               
            EndIf
            
            BackColor(_fore_color2_)
            FrontColor(_back_color2_)
            
            If Not _round_
               If _vertical_
                  draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _frame_size_, *this\frame_width( ) - _frame_size_ * 2, _position_ - _frame_size_)
               Else
                  draw_box_(*this\frame_x( ) + _position_, *this\frame_y( ) + _frame_size_, (*this\frame_width( ) - _frame_size_ - _position_), *this\frame_height( ) - _frame_size_ * 2)
               EndIf
            Else
               If _vertical_
                  If _position_ > _round_
                     If *this\frame_height( ) > _round_ * 2
                        ; рисуем прямоуголную часть
                        If _round_ > (*this\frame_height( ) - _position_)
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _round_, *this\frame_width( ) - _frame_size_ * 2, (_position_ - _round_) + (*this\frame_height( ) - _round_ - _position_))
                        Else
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _round_, *this\frame_width( ) - _frame_size_ * 2, (_position_ - _round_))
                        EndIf
                     EndIf
                     
                     ;\\
                     DrawHLines( _frame_size_ , _frame_size_, (*this\frame_width( ) - _frame_size_ * 2), _round_)
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > (*this\frame_height( ) - _position_)
                        DrawHLines( _frame_size_ , (*this\frame_height( ) - _frame_size_ - _round_), (*this\frame_width( ) - _frame_size_ * 2), _position_ - _frame_size_)
                     EndIf
                     
                  Else
                     DrawHLines( _frame_size_ , _frame_size_, (*this\frame_width( ) - _frame_size_ * 2), (_position_ + _frame_size_ - 1))
                  EndIf
               Else
                  If (*this\frame_width( ) - _round_ - _position_) > _round_
                     If *this\frame_width( ) > _round_ * 2
                        ; рисуем прямоуголную часть
                        If _round_ > _position_
                           draw_box_(*this\frame_x( ) + _position_ + (_round_ - _position_), *this\frame_y( ) + _frame_size_, (*this\frame_width( ) - _round_ - _position_) - (_round_ - _position_), *this\frame_height( ) - _frame_size_ * 2)
                        Else
                           draw_box_(*this\frame_x( ) + _position_, *this\frame_y( ) + _frame_size_, (*this\frame_width( ) - _round_ - _position_), *this\frame_height( ) - _frame_size_ * 2)
                        EndIf
                     EndIf
                     
                     ;\\
                     DrawVLines( (*this\frame_width( ) - _round_), _frame_size_, (*this\frame_width( ) - _frame_size_), (*this\frame_height( ) - _frame_size_ * 2))
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > _position_
                        DrawVLines( ( _frame_size_ + _position_), _frame_size_ , (_round_), (*this\frame_height( ) - _frame_size_ * 2))
                     EndIf
                     
                  Else
                     DrawVLines( (_position_ - _frame_size_), _frame_size_, (*this\frame_width( ) - _frame_size_), (*this\frame_height( ) - _frame_size_ * 2))
                  EndIf
               EndIf
            EndIf
            
            ; Draw string
            If *this\text And *this\text\string 
               If *this\text\TextChange( ) Or 
                  *this\resize\ResizeChange( )
                  
                  If Not *this\text\vertical
                     align_horizontal(*this\text, *this\inner_x( ), *this\inner_width( ), *this\text\width)
                     align_vertical(*this\text, *this\inner_y( ), *this\inner_height( ), *this\text\height)
                  Else
                     align_horizontal(*this\text, *this\inner_x( ), *this\inner_width( ), *this\text\height)
                     align_vertical(*this\text, *this\inner_y( ), *this\inner_height( ), *this\text\width)
                  EndIf
               EndIf
               
               ;
               If *this\height > *this\text\height
                  draw_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawRotatedText( *this\text\x, *this\text\y, *this\text\string, *this\text\rotate, $ff000000)
               EndIf
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure.i bar_draw_spin( *this._s_WIDGET )
         Protected state = *this\ColorState( )
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
;          draw_navigator_buttons( *this )
;          ProcedureReturn  
         
         
         draw_mode_( #PB_2DDrawing_Default )
         ;          ; draw split-string back
         ;          ;          draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\color\back )
         ;          draw_box_( *this\frame_x( ) + *this\fs[1], *this\frame_y( ) + *this\fs[2], *this\frame_width( ) - *this\fs[1] - *this\fs[3], *this\frame_height( ) - *this\fs[2] - *this\fs[4], *this\color\back[0] )
         ;
         ;          ; draw split-bar back
         ;          If *this\fs[1] ; left
         ;             draw_box_( *this\frame_x( ), *this\frame_y( ), *this\fs[1] + 1, *this\frame_height( ), *this\color\back[0] )
         ;          EndIf
         ;          If *this\fs[2] ; top
         ;             draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + 1, *this\color\back[0] )
         ;          EndIf
         ;          If *this\fs[3] ; right
         ;             draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs[3] - 1, *this\frame_y( ), *this\fs[3] + 1, *this\frame_height( ), *this\color\back[0] )
         ;          EndIf
         ;          If *this\fs[4] ; bottom
         ;             draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs[4] - 1, *this\frame_width( ), *this\fs[4] + 1, *this\color\back[0] )
         ;          EndIf
         
         ;\\ draw spin-buttons back
         draw_mode_alpha_( #PB_2DDrawing_Gradient )
         draw_gradient_(*bar\vertical, *BB1, *BB1\color\fore[*BB1\ColorState( )], *BB1\color\back[*BB1\ColorState( )] )
         draw_gradient_(*bar\vertical, *BB2, *BB2\color\fore[*BB2\ColorState( )], *BB2\color\back[*BB2\ColorState( )] )
         
         ;\\
         draw_mode_( #PB_2DDrawing_Outlined )
         If *this\flag & #__spin_Plus 
            ; -/+
            draw_plus( *BB1, Bool( *bar\invert ) )
            draw_plus( *BB2, Bool( Not *bar\invert ) )
         Else
            ; arrows on the buttons
            If *BB2\arrow\size
               draw_arrows( *BB2, Bool(*bar\vertical ) )
            EndIf
            If *BB1\arrow\size
               draw_arrows( *BB1, Bool(*bar\vertical ) + 2)
            EndIf
         EndIf
         
         ;\\ draw spin-bar frame
         If *this\fs[1]
            draw_box_( *this\frame_x( ), *this\frame_y( ), *this\fs[1] + 1, *this\frame_height( ), *this\color\frame[state] )
         EndIf
         If *this\fs[2]
            draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + 1, *this\color\frame[state] )
         EndIf
         If *this\fs[3]
            draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs[3] - 1, *this\frame_y( ), *this\fs[3] + 1, *this\frame_height( ), *this\color\frame[state] )
         EndIf
         If *this\fs[4]
            draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs[4] - 1, *this\frame_width( ), *this\fs[4] + 1, *this\color\frame[state] )
         EndIf
         
         ;\\ draw spin-buttons frame
         If EnteredButton( ) <> *BB1
            draw_box_( *BB1\x, *BB1\y, *BB1\width, *BB1\height, *BB1\color\frame[*BB1\ColorState( )] )
         EndIf
         If EnteredButton( ) <> *BB2
            draw_box_( *BB2\x, *BB2\y, *BB2\width, *BB2\height, *BB2\color\frame[*BB2\ColorState( )] )
         EndIf
         If EnteredButton( )
            draw_box_( EnteredButton( )\x, EnteredButton( )\y, EnteredButton( )\width, EnteredButton( )\height, EnteredButton( )\color\frame[EnteredButton( )\ColorState( )] )
         EndIf
         
         ;\\ draw split-string frame
         draw_box_( *this\frame_x( ) + *this\fs[1], *this\frame_y( ) + *this\fs[2], *this\frame_width( ) - *this\fs[1] - *this\fs[3], *this\frame_height( ) - *this\fs[2] - *this\fs[4], *this\color\frame[state] )
      EndProcedure
      
      Procedure.b bar_draw_track( *this._s_WIDGET )
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         bar_draw_scroll( *this )
         ;bar_draw_progress( *this )
         
         With *this
            If *this\type = #__type_Track
               Protected i, X, Y, size = DPIScaled(7)
               draw_mode_( #PB_2DDrawing_XOr )
               
               If *bar\vertical
                  X = *this\x + Bool( *bar\invert ) * ( *this\width - size )
                  Y = *this\y + *bar\area\pos + *SB\size/2
                  
                  Line( X, Y, size, 1, *SB\color\frame )
                  Line( X, Y + *bar\area\len - *bar\thumb\len, size, 1, *SB\color\frame )
                  
                  If constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks )
                     For i = *bar\min To *bar\max
                        If i <> *bar\min And 
                           i <> *bar\max
                           Line( X + DPIScaled(2), Y + bar_thumb_pos_( *bar, i ), DPIScaled(3), 1, *SB\color\frame )
                        EndIf
                     Next
                  EndIf
               Else
                  X = *this\x + *bar\area\pos + *SB\size/2
                  Y = *this\y + Bool( Not *bar\invert ) * ( *this\height - size )
                  
                  Line( X, Y, 1, size, *SB\color\frame )
                  Line( X + *bar\area\len - *bar\thumb\len, Y, 1, size, *SB\color\frame )
                  
                  If constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks )
                     For i = *bar\min To *bar\max
                        If i <> *bar\min And
                           i <> *bar\max
                           Line( X + bar_thumb_pos_( *bar, i ), Y + DPIScaled(2), 1, DPIScaled(3), *SB\color\frame )
                        EndIf
                     Next
                  EndIf
               EndIf
            EndIf
         EndWith
         
      EndProcedure
      
      Procedure.b bar_draw_splitter( *this._s_WIDGET )
         Protected circle_x, circle_y
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *SB1, *SB2, *SB
         
         *SB  = *bar\button
         *SB1 = *bar\button[1]
         *SB2 = *bar\button[2]
         
         draw_mode_alpha_( #PB_2DDrawing_Default )
         
         ; draw the splitter background
         draw_box_( *SB\x, *SB\y, *SB\width, *SB\height, *this\color\back[*SB\ColorState( )] & $ffffff | 210 << 24 )
         
         ; draw the first\second background
         If Not *SB1\hide : draw_box_( *SB1\x, *SB1\y, *SB1\width, *SB1\height, *this\color\frame[*SB1\ColorState( )] ) : EndIf
         If Not *SB2\hide : draw_box_( *SB2\x, *SB2\y, *SB2\width, *SB2\height, *this\color\frame[*SB2\ColorState( )] ) : EndIf
         
         draw_mode_( #PB_2DDrawing_Outlined )
         
         ; draw the frame
         If Not *SB1\hide : draw_box_( *SB1\x, *SB1\y, *SB1\width, *SB1\height, *this\color\frame[*SB1\ColorState( )] ) : EndIf
         If Not *SB2\hide : draw_box_( *SB2\x, *SB2\y, *SB2\width, *SB2\height, *this\color\frame[*SB2\ColorState( )] ) : EndIf
         
         ;
         If *bar\thumb\len
            If *bar\vertical
               circle_y = ( *SB\y + *SB\height / 2 )
               circle_x = *this\frame_x( ) + ( *this\frame_width( ) - *SB\round ) / 2 + Bool( *this\width % 2 )
            Else
               circle_x = ( *SB\x + *SB\width / 2 ) ; - *this\x
               circle_y = *this\frame_y( ) + ( *this\frame_height( ) - *SB\round ) / 2 + Bool( *this\height % 2 )
            EndIf
            
            If *bar\vertical ; horisontal line
               If *SB\width > 35
                  Circle( circle_x - ( *SB\round * 2 + 2 ) * 2 - 2, circle_y, *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x + ( *SB\round * 2 + 2 ) * 2 + 2, circle_y, *SB\round, *SB\color\frame[#__s_2] )
               EndIf
               If *SB\width > 20
                  Circle( circle_x - ( *SB\round * 2 + 2 ), circle_y, *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x + ( *SB\round * 2 + 2 ), circle_y, *SB\round, *SB\color\frame[#__s_2] )
               EndIf
            Else
               If *SB\height > 35
                  Circle( circle_x, circle_y - ( *SB\round * 2 + 2 ) * 2 - 2, *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x, circle_y + ( *SB\round * 2 + 2 ) * 2 + 2, *SB\round, *SB\color\frame[#__s_2] )
               EndIf
               If *SB\height > 20
                  Circle( circle_x, circle_y - ( *SB\round * 2 + 2 ), *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x, circle_y + ( *SB\round * 2 + 2 ), *SB\round, *SB\color\frame[#__s_2] )
               EndIf
            EndIf
            
            Circle( circle_x, circle_y, *SB\round, *SB\color\frame[#__s_2] )
         EndIf
      EndProcedure
      
      
      ;-
      Macro bar_area_create( _parent_, _scroll_step_, _area_width_, _area_height_, _width_, _height_, _scrollbar_size_, _mode_ = #True )
         If Not _parent_\scroll\bars
            _parent_\scroll\bars = 1
            _parent_\scroll\v    = Create( _parent_, "[" + _parent_\class + "" + _parent_\placingindex + "]", #__type_Scroll, 0, 0, DPIScaled( _scrollbar_size_), _height_, #Null$, #__flag_child | #__bar_vertical, 0, _area_height_, _height_, ( _scrollbar_size_), #__buttonround, _scroll_step_ )
            _parent_\scroll\h    = Create( _parent_, "[" + _parent_\class + "" + _parent_\placingindex + "]", #__type_Scroll, 0, 0, _width_, DPIScaled( _scrollbar_size_), #Null$, #__flag_child, 0, _area_width_, _width_, Bool( _mode_ ) * ( _scrollbar_size_), #__buttonround, _scroll_step_ )
         EndIf
      EndMacro
      
      Macro bar_area_draw( _this_ )
         If _this_\scroll And ( _this_\scroll\v Or _this_\scroll\h )
            ;clip_output_( _this_, [#__c_draw] )
            
            If _this_\scroll\v And Not _this_\scroll\v\hide And _this_\scroll\v\width And
               ( _this_\scroll\v\draw_width( ) > 0 And _this_\scroll\v\draw_height( ) > 0 )
               bar_draw_scroll( _this_\scroll\v )
            EndIf
            If _this_\scroll\h And Not _this_\scroll\h\hide And _this_\scroll\h\height And
               ( _this_\scroll\h\draw_width( ) > 0 And _this_\scroll\h\draw_height( ) > 0 )
               bar_draw_scroll( _this_\scroll\h )
            EndIf
            
            ;\\
            If Not _this_\haschildren
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               
               ; ;                ; Box( _this_\scroll_x( ), _this_\scroll_y( ), _this_\scroll_width( ), _this_\scroll_height( ), RGB( 255,0,0 ) )
               ; ;                Box( _this_\scroll\h\bar\page\pos, _this_\scroll\v\bar\page\pos, _this_\scroll\h\bar\max, _this_\scroll\v\bar\max, RGB( 255,0,0 ) )
               
               ;\\ Scroll area coordinate
               draw_box_( _this_\inner_x( ) + _this_\scroll_x( ) + _this_\text\padding\x, _this_\inner_y( ) + _this_\scroll_y( ) + _this_\text\padding\y, _this_\scroll_width( ) - _this_\text\padding\x * 2, _this_\scroll_height( ) - _this_\text\padding\y * 2, $FFFF0000 )
               draw_box_( _this_\inner_x( ) + _this_\scroll_x( ), _this_\inner_y( ) + _this_\scroll_y( ), _this_\scroll_width( ), _this_\scroll_height( ), $FF0000FF )
               
               If _this_\scroll\v And _this_\scroll\h
                  draw_box_( _this_\scroll\h\frame_x( ) + _this_\scroll_x( ), _this_\scroll\v\frame_y( ) + _this_\scroll_y( ), _this_\scroll_width( ), _this_\scroll_height( ), $FF0000FF )
                  
                  ; Debug "" +  _this_\scroll_x( )  + " " +  _this_\scroll_y( )  + " " +  _this_\scroll_width( )  + " " +  _this_\scroll_height( )
                  ;draw_box_( _this_\scroll\h\frame_x( ) - _this_\scroll\h\bar\page\pos, _this_\scroll\v\frame_y( ) - _this_\scroll\v\bar\page\pos, _this_\scroll\h\bar\max, _this_\scroll\v\bar\max, $FF0000FF )
                  
                  ;\\ page coordinate
                  draw_box_( _this_\scroll\h\frame_x( ), _this_\scroll\v\frame_y( ), _this_\scroll\h\bar\page\len, _this_\scroll\v\bar\page\len, $FF00FF00 )
               EndIf
            EndIf
         EndIf
      EndMacro
      
      Procedure bar_area_resize( *this._s_WIDGET, X.l, Y.l, Width.l, Height.l )
         Protected v1, h1, x1 = #PB_Ignore, y1 = #PB_Ignore, iwidth, iheight, w, h
         ;Protected v1, h1, x1 = *this\container_x( ), y1 = *this\container_y( ), width1 = *this\container_width( ), height1 = *this\container_height( ), iwidth, iheight, w, h
         
         With *this\scroll
            If Not ( *this\scroll And ( \v Or \h ))
               ProcedureReturn 0
            EndIf
            
            If ( *this\width = 0 And *this\height = 0)
               \v\hide = #True
               \h\hide = #True
               ProcedureReturn 0
            EndIf
            
            If X = #PB_Ignore
               X = \h\container_x( )
            EndIf
            If Y = #PB_Ignore
               Y = \v\container_y( )
            EndIf
            If Width = #PB_Ignore
               Width = \v\frame_x( ) - \h\frame_x( ) + \v\frame_width( )
            EndIf
            If Height = #PB_Ignore
               Height = \h\frame_y( ) - \v\frame_y( ) + \h\frame_height( )
            EndIf
            
            w = Bool( *this\scroll_width( ) > Width )
            h = Bool( *this\scroll_height( ) > Height )
            
            \v\bar\page\len = Height - ( Bool( w Or \h\bar\max > \h\bar\page\len ) * \h\height )
            \h\bar\page\len = Width - ( Bool( h Or \v\bar\max > \v\bar\page\len ) * \v\width )
            
            iheight = Height - ( Bool( Not \h\hide[1] And (w Or \h\bar\max > \h\bar\page\len) ) * \h\height )
            If \v\bar\page\len = iheight
               If \v\bar\thumb\len = \v\bar\thumb\end
                  bar_Update( \v, #True )
               EndIf
               bar_Update( \h, #True )
            Else
               \v\bar\AreaChange( ) = \v\bar\page\len - iheight
               \v\bar\page\len      = iheight
               
               If Not \v\bar\max
                  If \v\bar\min > iheight
                     \v\bar\max = \v\bar\min + 1
                  Else
                     \v\bar\max = iheight
                  EndIf
               EndIf
            EndIf
            
            iwidth = Width - ( Bool( Not \v\hide[1] And (h Or \v\bar\max > \v\bar\page\len) ) * \v\width )
            If \h\bar\page\len = iwidth
               bar_Update( \v, #True )
               If \h\bar\thumb\len = \h\bar\thumb\end
                  bar_Update( \h, #True )
               EndIf
            Else
               \h\bar\AreaChange( ) = \h\bar\page\len - iwidth
               \h\bar\page\len      = iwidth
               
               If Not \h\bar\max
                  If \h\bar\min > iwidth
                     \h\bar\max = \h\bar\min + 1
                  Else
                     \h\bar\max = iwidth
                  EndIf
               EndIf
            EndIf
            
            Width + X
            Height + Y
            
            If \v\frame_x( ) <> Width - \v\width
               v1 = 1
               x1 = Width - \v\width
            EndIf
            
            If \h\frame_y( ) <> Height - \h\height
               h1 = 1
               y1 = Height - \h\height
            EndIf
            
            If \v\bar\max > \v\bar\page\len
               v1     = 1
               Height = ( \v\bar\page\len + Bool( Not \h\hide[1] And \h\bar\max > \h\bar\page\len And \v\round And \h\round ) * ( \h\height / 4 ) )
               If \v\hide <> #False
                  \v\hide = #False
                  If \h\hide
                     Width = \h\bar\page\len
                  EndIf
               EndIf
            Else
               If \v\hide <> #True
                  \v\hide = #True
                  ;// reset page pos then hide scrollbar
                  If \v\bar\page\pos > \v\bar\min
                     bar_PageChange( \v, \v\bar\min, #False )
                  EndIf
               EndIf
            EndIf
            
            If \h\bar\max > \h\bar\page\len
               h1    = 1
               Width = ( \h\bar\page\len + Bool( Not \v\hide[1] And \v\bar\max > \v\bar\page\len And \v\round And \h\round ) * ( \v\width / 4 ))
               If \h\hide <> #False
                  \h\hide = #False
                  If \v\hide
                     Height = \v\bar\page\len
                  EndIf
               EndIf
            Else
               If \h\hide <> #True
                  \h\hide = #True
                  ;// reset page pos then hide scrollbar
                  If \h\bar\page\pos > \h\bar\min
                     bar_PageChange( \h, \h\bar\min, #False )
                  EndIf
               EndIf
            EndIf
            
            If test_scrollbars_resize
               Debug "  --- area_resize " + *this\class + " " + *this\inner_width( ) + " " + *this\inner_height( ) + " " + \v\bar\page\len + " " + \h\bar\page\len
               Debug "  {"
            EndIf
            
            If v1 And (\v\frame_x( ) <> *this\inner_x( ) + x1 Or \v\frame_y( ) <> *this\inner_y( ) + Y Or \v\frame_height( ) <> Height)
               Resize( \v, x1 , Y, #PB_Ignore, Height )
            EndIf
            If h1 And (\h\frame_x( ) <> *this\inner_x( ) + X Or \h\frame_y( ) <> *this\inner_y( ) + y1 Or \h\frame_width( ) <> Width)
               Resize( \h, X, y1, Width, #PB_Ignore )
            EndIf
            
            If \v\bar\thumb\len = \v\bar\thumb\end
               \v\hide = 1
            Else
               \v\hide = \v\hide[1]
            EndIf
            
            If \h\bar\thumb\len = \h\bar\thumb\end
               \h\hide = 1
            Else
               \h\hide = \h\hide[1]
            EndIf
            
            If test_scrollbars_resize
               Debug "  }"
            EndIf
            
            ;\\ update scrollbars parent inner coordinate
            If *this\scroll_inner_width( ) <> \h\bar\page\len
               *this\scroll_inner_width( ) = \h\bar\page\len
            EndIf
            If *this\scroll_inner_height( ) <> \v\bar\page\len
               *this\scroll_inner_height( ) = \v\bar\page\len
            EndIf
            
            ;\\
            If \v\bar\AreaChange( ) Or
               \h\bar\AreaChange( )
               
               ;*this\WidgetChange( ) = 1
               ;Debug ""+\v\class +" "+ \h\class +" "+ \v\hide[1] +" "+ \h\hide[1] +" "+ *this\scroll_inner_width( ) +" "+ *this\scroll_inner_height( )
               
               ProcedureReturn #True
            EndIf
         EndWith
      EndProcedure
      
      Procedure.b bar_area_update( *this._s_WIDGET )
         Protected result.b
         
         ;\\ change vertical scrollbar max
         If *this\scroll\v And *this\scroll\v\bar\max <> *this\scroll_height( ) And
            bar_SetAttribute( *this\scroll\v, #PB_ScrollBar_Maximum, *this\scroll_height( ) )
            result = 1
         EndIf
         
         ;\\ change horizontal scrollbar max
         If *this\scroll\h And *this\scroll\h\bar\max <> *this\scroll_width( ) And
            bar_SetAttribute( *this\scroll\h, #PB_ScrollBar_Maximum, *this\scroll_width( ) )
            result = 1
         EndIf
         
         If result
            bar_area_resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;     ;-
      ;     Macro bar_mdi_change( _this_, _objects_ )
      ;       ;\\ 
      ;       _this_\scroll_x( ) = _objects_\x 
      ;       _this_\scroll_y( ) = _objects_\Y
      ;       _this_\scroll_width( ) = _objects_\width
      ;       _this_\scroll_height( ) = _objects_\height
      ;       ;
      ;       PushListPosition( _objects_ )
      ;       ForEach _objects_
      ;         If _this_\scroll_x( ) > _objects_\x 
      ;           _this_\scroll_x( ) = _objects_\x 
      ;         EndIf
      ;         If _this_\scroll_y( ) > _objects_\y 
      ;           _this_\scroll_y( ) = _objects_\y 
      ;         EndIf
      ;       Next
      ;       ;
      ;       ForEach _objects_
      ;         If _this_\scroll_width( ) < _objects_\x + _objects_\width - _this_\scroll_x( ) 
      ;           _this_\scroll_width( ) = _objects_\x + _objects_\width - _this_\scroll_x( ) 
      ;         EndIf
      ;         If _this_\scroll_height( ) < _objects_\Y + _objects_\height - _this_\scroll_y( ) 
      ;           _this_\scroll_height( ) = _objects_\Y + _objects_\height - _this_\scroll_y( ) 
      ;         EndIf
      ;       Next
      ;       PopListPosition( _objects_ )
      ;       
      ;       widget::bar_mdi_resize( _this_,
      ;                               _this_\scroll\h\x, 
      ;                               _this_\scroll\v\y, 
      ;                               ( _this_\scroll\v\x + _this_\scroll\v\width ) - _this_\scroll\h\x,
      ;                               ( _this_\scroll\h\y + _this_\scroll\h\height ) - _this_\scroll\v\y )
      ;     EndMacro
      ;     
      Procedure bar_mdi_update( *this._s_WIDGET, X.l, Y.l, Width.l, Height.l ) ; Ok
         *this\scroll_x( )      = X
         *this\scroll_y( )      = Y
         *this\scroll_width( )  = Width
         *this\scroll_height( ) = Height
         
         ;\\
         If StartEnum( *this )
            If *this = widget( )\parent
               If *this\scroll_x( ) > widget( )\container_x( )
                  *this\scroll_x( ) = widget( )\container_x( )
               EndIf
               If *this\scroll_y( ) > widget( )\container_y( )
                  *this\scroll_y( ) = widget( )\container_y( )
               EndIf
            EndIf
            StopEnum( )
         EndIf
         
         ;\\
         If StartEnum( *this )
            If *this = widget( )\parent
               If *this\scroll_width( ) < widget( )\container_x( ) + widget( )\frame_width( ) - *this\scroll_x( )
                  *this\scroll_width( ) = widget( )\container_x( ) + widget( )\frame_width( ) - *this\scroll_x( )
               EndIf
               If *this\scroll_height( ) < widget( )\container_y( ) + widget( )\frame_height( ) - *this\scroll_y( )
                  *this\scroll_height( ) = widget( )\container_y( ) + widget( )\frame_height( ) - *this\scroll_y( )
               EndIf
            EndIf
            StopEnum( )
         EndIf
      EndProcedure
      
      Procedure bar_mdi_resize( *this._s_WIDGET, X.l, Y.l, Width.l, Height.l )
         Static v_max, h_max
         Protected sx, sy, round, result
         Protected scroll_x, scroll_y, scroll_width, scroll_height
         
         With *this\scroll
            If Not ( *this\scroll And ( \v Or \h ))
               ProcedureReturn 0
            EndIf
            
            ;\\
            scroll_x      = *this\scroll_x( )
            scroll_y      = *this\scroll_y( )
            scroll_width  = *this\scroll_width( )
            scroll_height = *this\scroll_height( )
            
            ;\\ top set state
            If scroll_y < Y
               \h\bar\page\len = Width - \v\width
            Else
               If \h\bar\page\len <> Width - Bool( scroll_height > Height ) * \v\width
                  \h\bar\page\len = Width - Bool( scroll_height > Height ) * \v\width
               EndIf
               
               sy = ( scroll_y - Y )
               scroll_height + sy
               scroll_y = Y
            EndIf
            
            ;\\ left set state
            If scroll_x < X
               \v\bar\page\len = Height - \h\height
            Else
               If \v\bar\page\len <> Height - Bool( scroll_width > Width ) * \h\height
                  \v\bar\page\len = Height - Bool( scroll_width > Width ) * \h\height
               EndIf
               
               sx = ( scroll_x - X )
               scroll_width + sx
               scroll_x = X
            EndIf
            
            ;\\
            If scroll_width > \h\bar\page\len - ( scroll_x - X )
               If scroll_width - sx <= Width And scroll_height = \v\bar\page\len - ( scroll_y - Y )
                  ;Debug "w - " + Str( scroll_height - sx )
                  
                  ; if on the h - scroll
                  If \v\bar\max > Height - \h\height
                     \v\bar\page\len = Height - \h\height
                     \h\bar\page\len = Width - \v\width
                     scroll_height   = \v\bar\max
                     
                     If scroll_y <= Y
                        \v\bar\page\pos = - ( scroll_y - Y )
                     EndIf
                     ;  Debug "w - " + \v\bar\max  + " " +  \v\height  + " " +  \v\bar\page\len
                  Else
                     scroll_height = \v\bar\page\len - ( scroll_x - X ) - \h\height
                  EndIf
               EndIf
               
               \v\bar\page\len = Height - \h\height
               If scroll_x <= X
                  \h\bar\page\pos = - ( scroll_x - X )
                  h_max           = 0
               EndIf
            Else
               \h\bar\max   = scroll_width
               scroll_width = \h\bar\page\len - ( scroll_x - X )
            EndIf
            
            ;\\
            If scroll_height > \v\bar\page\len - ( scroll_y - Y )
               If scroll_height - sy <= Height And scroll_width = \h\bar\page\len - ( scroll_x - X )
                  ;Debug " h - " + Str( scroll_height - sy )
                  
                  ; if on the v - scroll
                  If \h\bar\max > Width - \v\width
                     \h\bar\page\len = Width - \v\width
                     \v\bar\page\len = Height - \h\height
                     scroll_width    = \h\bar\max
                     
                     If scroll_x <= X
                        \h\bar\page\pos = - ( scroll_x - X )
                     EndIf
                     ;  Debug "h - " + \h\bar\max  + " " +  \h\width  + " " +  \h\bar\page\len
                  Else
                     scroll_width = \h\bar\page\len - ( scroll_x - X ) - \v\width
                  EndIf
               EndIf
               
               \h\bar\page\len = Width - \v\width
               If scroll_y <= Y
                  \v\bar\page\pos = - ( scroll_y - Y )
                  v_max           = 0
               EndIf
            Else
               \v\bar\max    = scroll_height
               scroll_height = \v\bar\page\len - ( scroll_y - Y )
            EndIf
            
            ;\\
            If \h\round And
               \v\round And
               \h\bar\page\len < Width And
               \v\bar\page\len < Height
               round = ( \h\height / 4 )
            EndIf
            
            ;Debug ""+*this\scroll_width( ) +" "+ scroll_width
            
            ;\\
            If scroll_height >= \v\bar\page\len
               If \v\bar\Max <> scroll_height
                  \v\bar\Max = scroll_height
                  If scroll_y <= Y
                     \v\bar\page\pos = - ( scroll_y - Y )
                  EndIf
               EndIf
               
               If \v\height <> \v\bar\page\len + round
                  Resize( \v, #PB_Ignore, #PB_Ignore, #PB_Ignore, \v\bar\page\len + round )
                  *this\scroll\v\hide = Bool( *this\scroll\v\bar\max <= *this\scroll\v\bar\page\len )
                  result              = 1
               EndIf
            EndIf
            
            ;\\
            If scroll_width >= \h\bar\page\len
               If \h\bar\Max <> scroll_width
                  \h\bar\Max = scroll_width
                  If scroll_x <= X
                     \h\bar\page\pos = - ( scroll_x - X )
                  EndIf
               EndIf
               
               If \h\width <> \h\bar\page\len + round
                  Resize( \h, #PB_Ignore, #PB_Ignore, \h\bar\page\len + round, #PB_Ignore )
                  *this\scroll\h\hide = Bool( *this\scroll\h\bar\max <= *this\scroll\h\bar\page\len )
                  result              = 1
               EndIf
            EndIf
            
            ;\\
            If test_scrollbars_resize
               Debug "  --- mdi_resize " + *this\class + " " + *this\inner_width( ) + " " + *this\inner_height( )
            EndIf
            
            ;\\
            If v_max <> \v\bar\Max
               v_max = \v\bar\Max
               bar_Update( \v, #True )
               result = 1
            EndIf
            
            ;\\
            If h_max <> \h\bar\Max
               h_max = \h\bar\Max
               bar_Update( \h, #True )
               result = 1
            EndIf
            
            ; Debug ""+\h\bar\thumb\len +" "+ \h\bar\page\len +" "+ \h\bar\area\len +" "+ \h\bar\thumb\end +" "+ \h\bar\page\end +" "+ \h\bar\area\end
            
            ;\\
            *this\scroll_x( )      = scroll_x
            *this\scroll_y( )      = scroll_y
            *this\scroll_width( )  = scroll_width
            *this\scroll_height( ) = scroll_height
            
            ;\\ update scrollbars parent inner coordinate
            If *this\scroll_inner_width( ) <> \h\bar\page\len
               *this\scroll_inner_width( ) = \h\bar\page\len
            EndIf
            If *this\scroll_inner_height( ) <> \v\bar\page\len
               *this\scroll_inner_height( ) = \v\bar\page\len
            EndIf
            
            ProcedureReturn result
         EndWith
      EndProcedure
      
      ;-
      Procedure.b bar_Update( *this._s_WIDGET, mode.b = 1 )
         Protected fixed.l, ScrollPos.f, ThumbPos.i, Width, Height
         
         ;\\
         If Not *this\bar
            ProcedureReturn 0
         EndIf
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         ;Debug ""+ mode +" "+ *this\bar\PageChange( )
         ;mode = 2
         
         ;          ; NEW
         ;          If Not *bar\max 
         ;             If *this\type = #__type_Splitter
         ;                Debug ">>>>>>>>>"+Str(*bar)+">>>>>>>>"
         ;                Debug " ["+ *this\class +"] "+
         ;                      *bar\percent +" >< "+
         ;                      *bar\min +" "+
         ;                      *bar\max +" >< "+
         ;                      *bar\page\pos +" "+
         ;                      *bar\page\len +" "+
         ;                      *bar\page\end +" "+
         ;                      *bar\page\change +" >< "+
         ;                      *bar\area\pos +" "+
         ;                      *bar\area\len +" "+
         ;                      *bar\area\end +" "+
         ;                      *bar\area\change +" >< "+
         ;                      *bar\thumb\pos +" "+
         ;                      *bar\thumb\len +" "+
         ;                      *bar\thumb\end +" "+
         ;                      *bar\thumb\change +""
         ;                Debug "<<<<<<<<<<<<<<<<<"
         ;                
         ;                If *bar\page\pos = *bar\page\end 
         ;                   ;  ProcedureReturn 0
         ;                EndIf
         ;                
         ;             Else
         ;                ProcedureReturn 0
         ;             EndIf
         ;          EndIf
         
         ;Debug "*bar\page\pos "+*bar\page\pos
         
         Width  = *this\frame_width( )
         Height = *this\frame_height( )
         
         ;\\
         If mode
            ;\\ get area size
            If *bar\vertical
               *bar\AreaChange( ) = *bar\area\len - Height
               *bar\area\len = Height
            Else
               *bar\AreaChange( ) = *bar\area\len - Width
               *bar\area\len = Width
            EndIf
            
            If *this\type = #__type_Spin
               ; set real spin-buttons height
               If Not *this\flag & #__spin_Plus
                  *BB1\size = Height / 2 + Bool( Height % 2 )
                  *BB2\size = *BB1\size + Bool( Not Height % 2 )
               EndIf
               
               ;*bar\area\pos = ( *BB1\size + *bar\min[1] )
               *bar\thumb\end = *bar\area\len - ( *BB1\size + *BB2\size )
               
               *bar\page\end = *bar\max
               *bar\area\end = *bar\max - *bar\thumb\Len
               *bar\percent  = ( *bar\area\end - *bar\area\pos ) / ( *bar\page\end - *bar\min )
               
            Else
               ; scroll-bar default button size
               If *this\type = #__type_Scroll
                  If *bar\max
                     If *BB1\size = - 1 And *BB2\size = - 1
                        If *bar\vertical And Width > 7 And Width < 21
                           *BB1\size = Width - 1
                           *BB2\size = Width - 1
                           
                        ElseIf Not *bar\vertical And Height > 7 And Height < 21
                           *BB1\size = Height - 1
                           *BB2\size = Height - 1
                           
                        Else
                           *BB1\size = *SB\size
                           *BB2\size = *SB\size
                        EndIf
                     EndIf
                     
                     ;           If *SB\size
                     ;             If *bar\vertical
                     ;               If *this\width = 0
                     ;                 *this\width = *SB\size
                     ;               EndIf
                     ;             Else
                     ;               If *this\height = 0
                     ;                 *this\height = *SB\size
                     ;               EndIf
                     ;             EndIf
                     ;           EndIf
                  EndIf
               EndIf
               
               If *bar\area\len ; TODO - ?
                  *bar\area\pos  = ( *BB1\size + *bar\min[1] )
                  *bar\thumb\end = *bar\area\len - ( *BB1\size + *BB2\size )
                  ;
                  If is_bar_( *this ) Or *this\type = #__type_TabBar
                     If *bar\max
                        *bar\thumb\len = *bar\thumb\end - ( *bar\max - *bar\area\len )
                        *bar\page\end  = *bar\max - ( *bar\thumb\end - *bar\thumb\len )
                        ; *bar\page\end  = *bar\max - ( *bar\area\len - *bar\thumb\len )
                     EndIf
                     
                  Else
                     If *bar\page\len
                        
                        ; get thumb size
                        *bar\thumb\len = Round(( *bar\thumb\end / ( *bar\max - *bar\min )) * *bar\page\len, #PB_Round_Nearest )
                        If *bar\thumb\len > *bar\thumb\end
                           *bar\thumb\len = *bar\thumb\end
                        EndIf
                        
                        If *bar\thumb\len < *SB\size
                           If *bar\thumb\end > *SB\size + *bar\thumb\len
                              *bar\thumb\len = *SB\size
                           EndIf
                        EndIf
                        
                        ; for the scroll-bar
                        If *bar\max > *bar\page\len
                           *bar\page\end = *bar\max - *bar\page\len
                        Else
                           *bar\page\end = *bar\page\len - *bar\max
                        EndIf
                        
                        If *bar\thumb\len = *bar\thumb\end
                           *bar\page\end = *bar\min
                        EndIf
                        
                     Else
                        ; get page end
                        If *bar\max
                           *bar\thumb\len = *SB\size
                           If *bar\thumb\len > *bar\area\len
                              *bar\thumb\len = *bar\area\len
                           EndIf
                           *bar\page\end = *bar\max
                           
                        Else
                           ; get thumb size
                           *bar\thumb\len = *SB\size
                           If *bar\thumb\len > *bar\area\len
                              *bar\thumb\len = *bar\area\len
                           EndIf
                           
                           ; one set end
                           If Not *bar\page\end And *bar\area\len
                              *bar\page\end = *bar\area\len - *bar\thumb\len
                              
                              If Not *bar\page\pos
                                 *bar\page\pos = *bar\page\end / 2
                                 *bar\PageChange( ) = *bar\page\pos
                              EndIf
                           Else
                              If *bar\fixed = 1
                                 *bar\page\end = *bar\area\len - *bar\thumb\len
                              ElseIf *bar\PageChange( )
                                 *bar\page\end = *bar\area\len - *bar\thumb\len
                              EndIf
                           EndIf
                        EndIf
                        
                     EndIf
                  EndIf
                  
                  If *bar\page\end
                     *bar\percent = ( *bar\thumb\end - *bar\thumb\len ) / ( *bar\page\end - *bar\min )
                  Else
                     *bar\percent = ( *bar\thumb\end - *bar\thumb\len ) / *bar\min
                  EndIf
                  
                  *bar\area\end = *bar\area\len - *bar\thumb\len - ( *BB2\size + *bar\min[2] )
                  If *bar\area\end < *bar\area\pos
                     *bar\area\end = *bar\area\pos
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         ; Debug ""+*bar\PageChange( ) +" "+ *bar\percent +" "+ *bar\min +" "+ *bar\min[2] +" "+ *bar\page\pos +" "+ *bar\area\end +" "+ *bar\page\end
         
         ;\\
         ;\\ get thumb pos
         If Not ( *bar\fixed And Not *bar\PageChange( ) )
            If is_bar_( *this ) Or *this\type = #__type_TabBar
               
               ;                ;
               ;                If *bar\page\pos < *bar\min
               ;                   ; If *bar\max > *bar\page\len
               ;                   *bar\page\pos = *bar\min
               ;                   ; EndIf
               ;                EndIf
               
               ;\\ scroll to active tab
               If *this\TabChange( )
                  If *this\TabFocused( ) And *this\TabFocused( )\_enter = #False
                     If *this\TabFocused( )\ScrollToActive( - 1 )
                        *this\TabFocused( )\ScrollToActive( 1 )
                        ;Debug " tab max - " + *bar\max + " " + " " + *bar\page\pos + " " + *bar\page\end
                        ScrollPos = *bar\max - *this\TabFocused( )\x
                        ;ScrollPos - *bar\thumb\end                                    ; to left
                        ;ScrollPos - *this\TabFocused( )\width                         ; to right
                        ScrollPos - ( *bar\thumb\end + *this\TabFocused( )\width ) / 2 ; to center
                        
                        ScrollPos     = bar_page_pos_( *bar, ScrollPos )
                        ScrollPos     = bar_invert_page_pos_( *bar, ScrollPos )
                        *bar\page\pos = ScrollPos
                     EndIf
                  EndIf
               Else
                  ; Debug *bar\page\pos
                  ;                   If Not *bar\page\pos
                  ;                      ScrollPos = *bar\max
                  ;                      ScrollPos     = bar_page_pos_( *bar, ScrollPos )
                  ;                      ScrollPos     = bar_invert_page_pos_( *bar, ScrollPos )
                  ;                      *bar\page\pos = ScrollPos
                  ;                   EndIf
               EndIf
               
            Else
               ; fixed mac-OS splitterGadget
               If *bar\min > *bar\page\pos
                  If *bar\max > *bar\page\len
                     If *bar\page\end
                        *bar\page\pos = *bar\page\end + *bar\page\pos
                        Debug " bar error pos"
                     Else
                        Debug " bar error end - " + *bar\page\end
                     EndIf
                  EndIf
               EndIf
               
               ; for the scrollarea children's
               If *bar\page\end And *bar\page\pos > *bar\page\end
                  ; Debug " bar end change - " + *bar\page\pos +" "+ *bar\page\end
                  *bar\PageChange( )  = *bar\page\pos - *bar\page\end
                  *bar\page\pos       = *bar\page\end
                  *this\BarChange( ) = 0
               EndIf
            EndIf
            
            ;\\ 
            If Not *this\BarChange( )
               ThumbPos = bar_thumb_pos_( *bar, *bar\page\pos )
               ;
               If *bar\invert
                  ThumbPos = *bar\area\end - ThumbPos
               Else
                  ThumbPos = *bar\area\pos + ThumbPos
               EndIf
               ;
               If ThumbPos < *bar\area\pos : ThumbPos = *bar\area\pos : EndIf
               If ThumbPos > *bar\area\end : ThumbPos = *bar\area\end : EndIf
               ;
               If *bar\thumb\pos <> ThumbPos
                  *bar\ThumbChange( ) = *bar\thumb\pos - ThumbPos
                  *bar\thumb\pos = ThumbPos
               EndIf
               ;
               If *this\type = #__type_Splitter
                  If *bar\ThumbChange( )
                     If MouseButtonPress( )
                        If Not *bar\PageChange( ) 
                           *bar\PageChange( )  = 1
                        EndIf
                     EndIf
                  EndIf              
               EndIf               
            EndIf
            ;
         EndIf
         
         ;
         ;\\ splitter fixed size
         If *bar\fixed 
            If *bar\PageChange( ) 
               If *bar\fixed = 1
                  *bar\fixed[1] = *bar\thumb\pos
               EndIf
               If *bar\fixed = 2
                  *bar\fixed[2] = *bar\area\end - *bar\thumb\pos 
               EndIf
            Else
               If *bar\fixed = 1
                  If *bar\fixed[1] > *bar\area\end
                     If *bar\min[1] < *bar\area\end
                        ThumbPos = *bar\area\end
                     Else
                        If *bar\min[1] > ( *bar\area\end + *bar\min[2] )
                           ThumbPos = ( *bar\area\end + *bar\min[2] )
                        Else
                           If *bar\min[1] > *bar\area\len - *bar\thumb\len
                              ThumbPos = *bar\area\len - *bar\thumb\len
                           Else
                              ThumbPos = *bar\min[1]
                           EndIf
                        EndIf
                     EndIf
                  Else
                     ThumbPos = *bar\fixed[1]
                  EndIf
               EndIf
               ;
               If *bar\fixed = 2
                  If *bar\min[1] > *bar\area\end - *bar\fixed[2] 
                     If *bar\min[1] > *bar\area\end + *bar\min[2] 
                        ThumbPos = *bar\area\end + *bar\min[2]
                     Else
                        If *bar\min[1] > *bar\area\len - *bar\thumb\len
                           ThumbPos = *bar\area\len - *bar\thumb\len
                        Else
                           ThumbPos = *bar\min[1]
                        EndIf
                     EndIf
                  Else
                     ThumbPos = *bar\area\end - *bar\fixed[2] 
                  EndIf
               EndIf
               ;
               If *bar\thumb\pos <> ThumbPos
                  *bar\ThumbChange( ) = *bar\thumb\pos - ThumbPos
                  *bar\thumb\pos = ThumbPos
                  ; Debug ""+*this\class +" "+  *bar\fixed +" "+ ThumbPos
               EndIf
            EndIf
         EndIf
         
         ;
         ;\\ disable/enable
         ;\\ buttons(left&top)-tab(right&bottom)
         If bar_in_start_( *bar )
            If *BB1\disable = #False
               *BB1\disable = #True
               
               ;\\
               If *this\type = #__type_Spin Or
                  *this\type = #__type_Scroll 
                  ;
                  *BB1\ColorState( ) = #__s_3
               EndIf
               
               ;\\
               If is_bar_( *this ) Or *this\type = #__type_TabBar
                  ;
                  *BB1\hide = 1
                  *BB1\ColorState( ) = #__s_3
               EndIf
               
               ;\\
               If *this\press And 
                  *this\type = #__type_splitter
                  ChangeCursor( *this, *this\cursor[3] )
               EndIf
            EndIf
         Else
            If *BB1\disable = #True
               *BB1\disable = #False
               
               ;\\
               If *this\type = #__type_Spin Or
                  *this\type = #__type_Scroll 
                  ;
                  *BB1\ColorState( ) = #__s_0
               EndIf
               
               ;\\
               If is_bar_( *this ) Or *this\type = #__type_TabBar
                  ;
                  *BB1\hide = 0
                  *BB1\ColorState( ) = #__s_0
               EndIf
               
               ;\\
               If *this\press And 
                  *this\type = #__type_splitter
                  ChangeCursor( *this, *this\cursor )
               EndIf
            EndIf
         EndIf
         
         ;\\ buttons(right&bottom)-tab(left&top)
         If bar_in_stop_( *bar )
            If *BB2\disable = #False
               *BB2\disable = #True
               
               ;\\
               If *this\type = #__type_Spin Or
                  *this\type = #__type_Scroll 
                  ;
                  *BB2\ColorState( ) = #__s_3
               EndIf
               
               ;\\
               If is_bar_( *this ) Or *this\type = #__type_TabBar
                  ;
                  *BB2\hide = 1
                  *BB2\ColorState( ) = #__s_3
               EndIf
               
               ;\\
               If *this\press And 
                  *this\type = #__type_splitter
                  ChangeCursor( *this, *this\cursor[2] )
               EndIf
            EndIf
         Else
            If *BB2\disable = #True
               *BB2\disable = #False
               ;\\
               If *this\type = #__type_Spin Or
                  *this\type = #__type_Scroll
                  ;
                  *BB2\ColorState( ) = #__s_0
               EndIf
               
               ;\\
               If is_bar_( *this ) Or *this\type = #__type_TabBar
                  ;
                  *BB2\hide = 0
                  *BB2\ColorState( ) = #__s_0
               EndIf
               
               ;\\
               If *this\press And 
                  *this\type = #__type_splitter
                  ChangeCursor( *this, *this\cursor )
               EndIf
            EndIf
         EndIf
         
         
         ;
         ;\\ resize buttons coordinate
         ;\\
         If *this\type = #__type_Scroll
            ;\\ hide state
            If is_integral_( *this )
               If *bar\max <= *bar\page\len
                  *this\hide = 1
               Else
                  If Not *this\hide[1]
                     *this\hide = 0
                  EndIf
               EndIf
            EndIf
            
            ;\\ button-thumb
            If *bar\thumb\len
               If *BB1\ColorState( ) = #__s_3 And
                  *BB2\ColorState( ) = #__s_3
                  
                  If *SB\disable = #False
                     *SB\disable = #True
                     
                     *SB\ColorState( ) = #__s_3
                  EndIf
               Else
                  If *SB\disable = #True
                     *SB\disable = #False
                     
                     *SB\ColorState( ) = #__s_0
                  EndIf
               EndIf
               
               ;\\
               If *bar\vertical
                  *SB\x      = *this\frame_x( ) + DPIScaled(1) ; white line size
                  *SB\width  = *this\frame_width( ) - DPIScaled(1) ; white line size
                  *SB\y      = *this\inner_y( ) + *bar\thumb\pos
                  *SB\height = *bar\thumb\len
               Else
                  *SB\y      = *this\frame_y( ) + DPIScaled(1) ; white line size
                  *SB\height = *this\frame_height( ) - DPIScaled(1) ; white line size
                  *SB\x      = *this\inner_x( ) + *bar\thumb\pos
                  *SB\width  = *bar\thumb\len
               EndIf
            Else
               If *bar\vertical
                  *SB\height = 0
               Else
                  *SB\width  = 0
               EndIf
            EndIf
            
            If *BB1\size
               If *bar\vertical
                  ; Top button coordinate on vertical scroll bar
                  *BB1\x      = *SB\x
                  *BB1\width  = *SB\width
                  ;
                  If *bar\thumb\len
                     *BB1\y      = *this\frame_y( )
                     *BB1\height = *BB1\size
                  Else
                     *BB1\y      = *this\y
                     *BB1\height = *this\height / 2 - Bool( Not *this\frame_height( ) % 2 )
                  EndIf
               Else
                  ; Left button coordinate on horizontal scroll bar
                  *BB1\y      = *SB\y
                  *BB1\height = *SB\height
                  ;
                  If *bar\thumb\len
                     *BB1\x      = *this\frame_x( )
                     *BB1\width  = *BB1\size
                  Else
                     *BB1\x     = *this\frame_x( )
                     *BB1\width = *this\frame_width( ) / 2 - Bool( Not *this\frame_width( ) % 2 )
                  EndIf
               EndIf
            EndIf
            
            If *BB2\size
               If *bar\vertical
                  ; Botom button coordinate on vertical scroll bar
                  *BB2\x      = *SB\x
                  *BB2\width  = *SB\width
                  ;
                  If *bar\thumb\len
                     *BB2\height = *BB2\size
                     *BB2\y      = *this\frame_y( ) + *this\frame_height( ) - *BB2\height
                  Else
                     *BB2\height = *this\frame_height( ) / 2
                     *BB2\y      = *this\frame_y( ) + *BB2\height + Bool( *this\frame_height( ) % 2 )
                  EndIf
               Else
                  ; Right button coordinate on horizontal scroll bar
                  *BB2\y      = *SB\y
                  *BB2\height = *SB\height
                  ;
                  If *bar\thumb\len
                     *BB2\width  = *BB2\size
                     *BB2\x      = *this\frame_x( ) + *this\frame_width( ) - *BB2\width
                  Else
                     *BB2\width = *this\frame_width( ) / 2
                     *BB2\x     = *this\frame_x( ) + *BB2\width + Bool( *this\frame_width( ) % 2 )
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If *bar\PageChange( )
               If *this\parent And *this\parent\scroll
                  If *bar\vertical
                     If *this\parent\scroll\v = *this
                        *this\parent\WidgetChange( ) = - 1
                        *this\parent\scroll_y( )     = - *bar\page\pos
                        
                        ;\\ Area children's x&y auto move
                        If *this\parent\type = #__type_ScrollArea And IsGadget(*this\parent\scroll\gadget[2])
                           ResizeGadget(*this\parent\scroll\gadget[2], #PB_Ignore, DPIUnScaledY(*this\parent\scroll_y( )), #PB_Ignore, #PB_Ignore)
                           CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                              UpdateWindow_(GadgetID(*this\parent\scroll\gadget[2]))
                           CompilerEndIf
                        Else
                           If StartEnum( *this\parent )
                              If *this\parent = widget( )\parent 
                                 If *this\parent\scroll\v <> widget( ) And
                                    *this\parent\scroll\h <> widget( ) And Not widget( )\align
                                    ;
                                    If widget( )\child < 0
                                       Resize( widget( ), #PB_Ignore, ( widget( )\container_y( ) + *bar\PageChange( ) ), #PB_Ignore, #PB_Ignore, 0 )
                                    Else
                                       Resize( widget( ), #PB_Ignore, ( widget( )\container_y( ) + *bar\PageChange( ) ) - *this\parent\scroll_y( ), #PB_Ignore, #PB_Ignore, 0 )
                                    EndIf
                                 EndIf
                              EndIf
                              StopEnum( )
                           EndIf
                        EndIf
                     EndIf
                  Else
                     If *this\parent\scroll\h = *this
                        *this\parent\WidgetChange( ) = - 2
                        *this\parent\scroll_x( )     = - *bar\page\pos
                        ;
                        ;\\ Area children's x&y auto move
                        If *this\parent\type = #__type_ScrollArea And IsGadget(*this\parent\scroll\gadget[2])
                           ResizeGadget(*this\parent\scroll\gadget[2], DPIUnScaledX(*this\parent\scroll_x( )), #PB_Ignore, #PB_Ignore, #PB_Ignore)
                           CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                              UpdateWindow_(GadgetID(*this\parent\scroll\gadget[2]))
                           CompilerEndIf
                        Else
                           If StartEnum( *this\parent )
                              If *this\parent = widget( )\parent 
                                 If *this\parent\scroll\v <> widget( ) And
                                    *this\parent\scroll\h <> widget( ) And Not widget( )\align
                                    ;
                                    If widget( )\child < 0
                                       Resize( widget( ), ( widget( )\container_x( ) + *bar\PageChange( ) ), #PB_Ignore, #PB_Ignore, #PB_Ignore, 0 )
                                    Else
                                       Resize( widget( ), ( widget( )\container_x( ) + *bar\PageChange( ) ) - *this\parent\scroll_x( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, 0 )
                                    EndIf
                                 EndIf
                              EndIf    
                              StopEnum( )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ Ok
         If *this\type = #__type_Splitter
            ;
            If *bar\vertical
               *BB1\width  = *this\frame_width( )
               *BB1\height = *bar\thumb\pos
               
               *BB1\x = *this\frame_x( )
               *BB2\x = *this\frame_x( )
               
               ;             If Not (( #PB_Compiler_OS = #PB_OS_MacOS ) And isgadget( *this\split_1( ) ) And Not *this\parent )
               *BB1\y = *this\frame_y( )
               *BB2\y = ( *bar\thumb\pos + *bar\thumb\len ) + *this\frame_y( )
               ;             Else
               ;               *BB1\y      = *this\frame_height( ) - *BB1\height
               ;             EndIf
               
               *BB2\height = *this\frame_height( ) - ( *BB1\height + *bar\thumb\len )
               *BB2\width  = *this\frame_width( )
               
               ; seperatior pos&size
               If *bar\thumb\len
                  *SB\x      = *this\frame_x( )
                  *SB\width  = *this\frame_width( )
                  *SB\y      = *this\inner_y( ) + *bar\thumb\pos
                  *SB\height = *bar\thumb\len
               EndIf
               
            Else
               *BB1\width  = *bar\thumb\pos
               *BB1\height = *this\frame_height( )
               
               *BB1\y = *this\frame_y( )
               *BB2\y = *this\frame_y( )
               *BB1\x = *this\frame_x( )
               *BB2\x = ( *bar\thumb\pos + *bar\thumb\len ) + *this\frame_x( )
               
               *BB2\width  = *this\frame_width( ) - ( *BB1\width + *bar\thumb\len )
               *BB2\height = *this\frame_height( )
               
               ; seperatior pos&size
               If *bar\thumb\len
                  *SB\y      = *this\frame_y( )
                  *SB\height = *this\frame_height( )
                  *SB\x      = *this\inner_x( ) + *bar\thumb\pos
                  *SB\width  = *bar\thumb\len
               EndIf
            EndIf
            
            ; Splitter first-child auto resize
            ;If mode = 2;*bar\PageChange( ) Or *bar\ThumbChange( ) 
            If IsGadget( *this\split_1( ) )
               ;             If is_root_container_( *this )
               CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                  ; PB(ResizeGadget)( *this\split_1( ), DPIUnScaledX(*BB1\x), DPIUnScaledY(*BB1\y), DPIUnScaledX(*BB1\width), DPIUnScaledY(*BB1\height) )
                  SetWindowPos_( GadgetID(*this\split_1( )), #HWND_TOP, *BB1\x, *BB1\y, *BB1\width, *BB1\height, #SWP_NOACTIVATE )
                  UpdateWindow_( GadgetID(*this\root\canvas\gadget))
                  ;UpdateWindow_( GadgetID(*this\split_1( )))
               CompilerElse
                  PB(ResizeGadget)( *this\split_1( ), *BB1\x, *BB1\y, *BB1\width, *BB1\height )
               CompilerEndIf
               ;             Else
               ;               PB(ResizeGadget)( *this\split_1( ),
               ;                                 *BB1\x + GadgetX( *this\root\canvas\gadget ),
               ;                                 *BB1\y + GadgetY( *this\root\canvas\gadget ),
               ;                                 *BB1\width, *BB1\height )
               ;             EndIf
               
            Else
               If *this\split_1( ) > 0 And *this\split_1( ) <> *this
                  If *this\split_1( )\x <> *BB1\x Or
                     *this\split_1( )\y <> *BB1\y Or
                     *this\split_1( )\width <> *BB1\width Or
                     *this\split_1( )\height <> *BB1\height
                     ; Debug "splitter_1_resize " + *this\split_1( )
                     
                     If *this\split_1( )\type = #__type_window
                        Resize( *this\split_1( ),
                                *BB1\x - *this\frame_x( ),
                                *BB1\y - *this\frame_y( ),
                                *BB1\width - *this\split_1( )\fs * 2 - *this\split_1( )\fs[1] - *this\split_1( )\fs[3],
                                *BB1\height - *this\split_1( )\fs * 2 - *this\split_1( )\fs[2] - *this\split_1( )\fs[4], 0 )
                     Else
                        Resize( *this\split_1( ),
                                *BB1\x - *this\frame_x( ),
                                *BB1\y - *this\frame_y( ),
                                *BB1\width, *BB1\height, 0 )
                     EndIf
                     
                  EndIf
               EndIf
            EndIf
            
            ; Splitter second-child auto resize
            If IsGadget( *this\split_2( ) )
               ;             If is_root_container_( *this )
               CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                  ; PB(ResizeGadget)( *this\split_2( ), DPIUnScaledX(*BB2\x), DPIUnScaledY(*BB2\y), DPIUnScaledX(*BB2\width), DPIUnScaledY(*BB2\height) )
                  SetWindowPos_( GadgetID(*this\split_2( )), #HWND_TOP, *BB2\x, *BB2\y, *BB2\width, *BB2\height, #SWP_NOACTIVATE )
                  UpdateWindow_( GadgetID(*this\root\canvas\gadget))
                  ;UpdateWindow_( GadgetID(*this\split_2( )))
               CompilerElse
                  PB(ResizeGadget)( *this\split_2( ), *BB2\x, *BB2\y, *BB2\width, *BB2\height )
               CompilerEndIf
               ;             Else
               ;               PB(ResizeGadget)( *this\split_2( ),
               ;                                 *BB2\x + GadgetX( *this\root\canvas\gadget ),
               ;                                 *BB2\y + GadgetY( *this\root\canvas\gadget ),
               ;                                 *BB2\width, *BB2\height )
               ;             EndIf
               
            Else
               If *this\split_2( ) > 0 And *this\split_2( ) <> *this
                  If *this\split_2( )\x <> *BB2\x Or
                     *this\split_2( )\y <> *BB2\y Or
                     *this\split_2( )\width <> *BB2\width Or
                     *this\split_2( )\height <> *BB2\height
                     ; Debug "splitter_2_resize " + *this\split_2( )
                     
                     If *this\split_2( )\type = #__type_window
                        Resize( *this\split_2( ),
                                *BB2\x - *this\frame_x( ),
                                *BB2\y - *this\frame_y( ),
                                *BB2\width - *this\split_1( )\fs * 2 - *this\split_1( )\fs[1] - *this\split_1( )\fs[3],
                                *BB2\height - *this\split_1( )\fs * 2 - *this\split_1( )\fs[2] - *this\split_1( )\fs[4], 0 )
                     Else
                        Resize( *this\split_2( ),
                                *BB2\x - *this\frame_x( ),
                                *BB2\y - *this\frame_y( ),
                                *BB2\width, *BB2\height, 0 )
                     EndIf
                     
                  EndIf
               EndIf
            EndIf
            ;EndIf
         EndIf
         
         ;\\
         If *this\type = #__type_Track
            If bar_in_start_( *bar ) Or 
               bar_in_stop_( *bar ) Or 
               constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks )
               ;
               If *bar\vertical 
                  If *bar\invert
                     *SB\arrow\direction = 2 ; вправо
                  Else
                     *SB\arrow\direction = 0 ; влево
                  EndIf
               Else
                  If *bar\invert
                     *SB\arrow\direction = 1 ; верх
                  Else
                     *SB\arrow\direction = 3 ; вниз
                  EndIf
               EndIf
            Else
               If ( *bar\direction > 0 And *bar\invert ) Or 
                  ( *bar\direction < 0 And Not *bar\invert )
                  ;
                  If *bar\vertical
                     *SB\arrow\direction = 1 ; верх
                  Else
                     *SB\arrow\direction = 0 ; влево
                  EndIf
               ElseIf ( *bar\direction < 0 And *bar\invert ) Or 
                      ( *bar\direction > 0 And Not *bar\invert )
                  ;
                  If *bar\vertical
                     *SB\arrow\direction = 3 ; вниз
                  Else
                     *SB\arrow\direction = 2 ; вправо
                  EndIf
               EndIf
            EndIf
            
            ; track bar draw coordinate
            If *bar\vertical
               If *bar\thumb\len
                  *SB\y      = *this\frame_y( ) + *bar\thumb\pos
                  *SB\height = *bar\thumb\len
               EndIf
               
               *BB1\width = DPIScaled( #__tracksize )
               *BB2\width = *BB1\width
               *SB\width  = *SB\size + ( Bool( *SB\size < 10 ) * *SB\size )
               
               *BB1\y      = *this\frame_y( )
               *BB1\height = *bar\thumb\pos
               
               *BB2\y      = *BB1\y + *BB1\height + *bar\thumb\len
               *BB2\height = *this\frame_height( ) - *bar\thumb\pos - *bar\thumb\len
               
               If *bar\invert
                  *BB1\x = *this\frame_x( ) + DPIScaled(6)
               Else
                  *BB1\x = *this\frame_x( ) + *this\frame_width( ) + DPIScaled(6) - *SB\size - 1
               EndIf
               
               *BB2\x = *BB1\x
               *SB\x  = *BB1\x - ( *SB\size - *BB1\width )/2
            Else
               If *bar\thumb\len
                  *SB\x     = *this\frame_x( ) + *bar\thumb\pos
                  *SB\width = *bar\thumb\len
               EndIf
               
               *BB1\height = DPIScaled( #__tracksize )
               *BB2\height = *BB1\height
               *SB\height  = *SB\size + ( Bool( *SB\size < 10 ) * *SB\size )
               
               *BB1\x     = *this\frame_x( )
               *BB1\width = *bar\thumb\pos
               
               *BB2\x     = *BB1\x + *BB1\width + *bar\thumb\len
               *BB2\width = *this\frame_width( ) - *bar\thumb\pos - *bar\thumb\len
               
               If *bar\invert
                  *BB1\y = *this\frame_y( ) + *this\frame_height( ) + DPIScaled(6) - *SB\size - 1
               Else
                  *BB1\y = *this\frame_y( ) + DPIScaled(6)
               EndIf
               
               *BB2\y = *BB1\y
               *SB\y  = *BB1\y - ( *SB\size - *BB1\height )/2
            EndIf
         EndIf
         
         ;\\
         If is_bar_( *this ) Or *this\type = #__type_TabBar
            ;
            ; inner coordinate
            If *bar\vertical
               *this\inner_x( )      = *this\frame_x( )
               *this\inner_width( )  = *this\frame_width( ) - 1
               *this\inner_y( )      = *this\frame_y( ) + Bool( *BB2\hide = #False ) * ( *BB2\size + *this\fs )
               *this\inner_height( ) = *this\frame_y( ) + *this\frame_height( ) - *this\inner_y( ) - Bool( *BB1\hide = #False ) * ( *BB1\size + *this\fs )
            Else
               *this\inner_y( )      = *this\frame_y( )
               *this\inner_height( ) = *this\frame_height( ) - 1
               *this\inner_x( )      = *this\frame_x( ) + Bool( *BB2\hide = #False ) * ( *BB2\size + *this\fs )
               *this\inner_width( )  = *this\frame_x( ) + *this\frame_width( ) - *this\inner_x( ) - Bool( *BB1\hide = #False ) * ( *BB1\size + *this\fs )
            EndIf
            
            If *BB2\size And Not *BB2\hide
               If *bar\vertical
                  ; Top button coordinate on vertical scroll bar
                  ;  *BB2\x = *this\frame_x( ) + ( *this\frame_width( ) - *BB2\size )/2
                  *BB2\y = *this\inner_y( ) - *BB2\size
               Else
                  ; Left button coordinate on horizontal scroll bar
                  *BB2\x = *this\inner_x( ) - *BB2\size
                  ;  *BB2\y = *this\frame_y( ) + ( *this\frame_height( ) - *BB2\size )/2
               EndIf
               If *BB2\width <> *BB2\size
                  *BB2\width = *BB2\size
               EndIf
               If *BB2\height <> *BB2\size
                  *BB2\height = *BB2\size
               EndIf
            EndIf
            
            If *BB1\size And Not *BB1\hide
               If *bar\vertical
                  ; Botom button coordinate on vertical scroll bar
                  ;  *BB1\x = *this\frame_x( ) + ( *this\frame_width( ) - *BB1\size )/2
                  *BB1\y = *this\inner_y( ) + *this\inner_height( )
               Else
                  ; Right button coordinate on horizontal scroll bar
                  *BB1\x = *this\inner_x( ) + *this\inner_width( )
                  ;  *BB1\y = *this\frame_y( ) + ( *this\frame_height( ) - *BB1\size )/2
               EndIf
               If *BB1\width <> *BB1\size
                  *BB1\width = *BB1\size
               EndIf
               If *BB1\height <> *BB1\size
                  *BB1\height = *BB1\size
               EndIf
            EndIf
            
            ;If *bar\thumb\len
            If *bar\vertical
               *SB\x      = *this\inner_x( )
               *SB\width  = *this\inner_width( )
               *SB\height = *bar\max
               *SB\y      = *this\frame_y( ) + ( *bar\thumb\pos - *bar\area\end )
            Else
               *SB\y      = *this\inner_y( )
               *SB\height = *this\inner_height( )
               *SB\width  = *bar\max
               *SB\x      = *this\frame_x( ) + ( *bar\thumb\pos - *bar\area\end )
            EndIf
            ;EndIf
         EndIf
         
         ;\\ Ok
         If *this\type = #__type_Spin
            *SB\x      = *this\inner_x( )
            *SB\y      = *this\inner_y( )
            *SB\width  = *this\inner_width( )
            *SB\height = *this\inner_height( )
            
            If Not *this\flag & #__spin_Plus
               Protected draw_tipe = 1
               If *BB2\size
                  *BB2\x      = ( *this\frame_x( ) + *this\frame_width( ) ) - *SB\size + draw_tipe * 2
                  *BB2\y      = *this\frame_y( ) + draw_tipe * 2
                  *BB2\width  = *SB\size - draw_tipe * 4
                  *BB2\height = *BB2\size - draw_tipe * 3
               EndIf
               If *BB1\size
                  *BB1\x      = *BB2\x
                  *BB1\y      = ( *this\frame_y( ) + *this\frame_height( ) ) - *BB1\size + draw_tipe
                  *BB1\height = *BB1\size - draw_tipe * 3
                  *BB1\width  = *BB2\width
               EndIf
            Else
               ; spin buttons numeric plus -/+
               If *bar\vertical
                  If *BB1\size
                     *BB1\x      = *this\frame_x( )
                     *BB1\y      = ( *this\frame_y( ) + *this\frame_height( ) ) - *BB1\size
                     *BB1\width  = *this\frame_width( )
                     *BB1\height = *BB1\size
                  EndIf
                  If *BB2\size
                     *BB2\x      = *this\frame_x( )
                     *BB2\y      = *this\frame_y( )
                     *BB2\width  = *this\frame_width( )
                     *BB2\height = *BB2\size
                  EndIf
               Else
                  If *BB1\size
                     *BB1\x      = *this\frame_x( )
                     *BB1\y      = *this\frame_y( )
                     *BB1\width  = *BB1\size
                     *BB1\height = *this\frame_height( )
                  EndIf
                  If *BB2\size
                     *BB2\x      = ( *this\frame_x( ) + *this\frame_width( ) ) - *BB2\size
                     *BB2\y      = *this\frame_y( )
                     *BB2\width  = *BB2\size
                     *BB2\height = *this\frame_height( )
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ; ;          
         ; ;          ;Debug ">>>>>>>>>"+Str(*bar)+">>>>>>>>"
         ; ;          Debug " - ["+ *this\class +"] "+
         ; ;                *bar\percent +" >< "+
         ; ;                *bar\min +" "+
         ; ;                *bar\max +" >< "+
         ; ;                *bar\page\pos +" "+
         ; ;                *bar\page\len +" "+
         ; ;                *bar\page\end +" "+
         ; ;                *bar\page\change +" >< "+
         ; ;                *bar\area\pos +" "+
         ; ;                *bar\area\len +" "+
         ; ;                *bar\area\end +" "+
         ; ;                *bar\area\change +" >< "+
         ; ;                *bar\thumb\pos +" "+
         ; ;                *bar\thumb\len +" "+
         ; ;                *bar\thumb\end +" "+
         ; ;                *bar\thumb\change +""
         ; ;          Debug "<<<<<<<<<<<<<<<<<"
         ;  
         
         
         ;\\
         If *bar\PageChange( )
            ;\\
            If *this\type = #__type_Progress
               *this\text\string = "%" + Str( *bar\page\pos )
            EndIf
            
            ;\\
            If *this\type = #__type_Spin
               If *this\__String( )
                  Debug " update spin-change " + *bar\PageChange( ) + " " + Str( *bar\thumb\pos - *bar\area\pos )
                  Protected i
                  For i = 0 To 3
                     If *this\scroll\increment = ValF( StrF( *this\scroll\increment, i ) )
                        SetText( *this\__String( ), StrF( *bar\page\pos, i ) )
                        ;SetText( *this\__String( ), StrF( ( *bar\thumb\pos - *bar\area\pos ), i ) )
                        Break
                     EndIf
                  Next
               EndIf
            EndIf
            
            ;\\ post change event
            If mode = 2
               If is_scrollbars_( *this )
                  If *this\type = #__type_Scroll
                     Send( *this\parent, #__event_ScrollChange, *this, *bar\page\pos ) ; *bar\PageChange( ) )
                  EndIf
               Else
                  ; scroll area change
                  Send( *this, #__event_Change, EnteredButton( ), *bar\PageChange( ) )
               EndIf  
               
               ;               If *this\__String( )
               ;                 Debug 777
               ;                 Send( *this\parent, #__event_ScrollChange, *this, *bar\PageChange( ) )
               ;               EndIf
            EndIf
            
            *this\BarChange( ) = 0
            *bar\PageChange( ) = 0
            *bar\ThumbChange( ) = 0
            
            ;*this\root\repaint  = #True
            ProcedureReturn #True   
         EndIf
      EndProcedure
      
      Procedure.b bar_PageChange( *this._s_WIDGET, ScrollPos.l, mode.b = 1 )
         Protected result.b, *bar._s_BAR = *this\bar
         
         If *bar\area\len
            If Not *bar\max
               *bar\page\end = *bar\area\len - *bar\thumb\len
            EndIf
            
            ;????
            If *bar\thumb\len
               If *bar\thumb\len = *bar\thumb\end 
                  ScrollPos = *bar\min
               EndIf
            EndIf
            
            If ScrollPos > *bar\page\end - *bar\min[2]
               ScrollPos = *bar\page\end - *bar\min[2]
            EndIf
         EndIf
         
         If Not *bar\button\disable 
            If ScrollPos < *bar\min
               If *bar\max > *bar\page\len
                  ScrollPos = *bar\min
               EndIf
            EndIf
            If ScrollPos > *bar\page\end
               If *bar\page\end
                  ScrollPos = *bar\page\end
               Else
                  If *bar\area\end ; TODO - ? example-splitter(3)
                     ScrollPos = bar_page_pos_( *bar, *bar\area\end ) - ScrollPos
                  EndIf
               EndIf
            EndIf
            
            If *bar\page\pos <> ScrollPos
               If *bar\page\pos > ScrollPos
                  *bar\direction =- 1
               Else
                  *bar\direction = 1
               EndIf
               ;
               *bar\PageChange( ) = *bar\page\pos - ScrollPos
               *bar\page\pos      = ScrollPos
               
               ; Debug ""+*this +" "+ ScrollPos +" "+ *bar\page\end +" "+ *bar\thumb\len +" "+ *bar\thumb\end +" "+ *bar\page\pos +" "+ Str(*bar\page\end-*bar\min[2])
               
               result = *bar\PageChange( )
            EndIf
            
            If *this\BarChange( ) Or result
               ; Debug ""+*this +" "+ result +" "+ *bar\PageChange( )
               If bar_Update( *this, mode)
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.b bar_ThumbChange( *this._s_WIDGET, ThumbPos.i )
         Protected *bar._s_BAR = *this\bar
         Protected ScrollPos.f
         
         If ThumbPos < *bar\area\pos : ThumbPos = *bar\area\pos : EndIf
         If ThumbPos > *bar\area\end : ThumbPos = *bar\area\end : EndIf
         
         If *bar\thumb\pos <> ThumbPos
            *bar\ThumbChange( ) = *bar\thumb\pos - ThumbPos
            *bar\thumb\pos = ThumbPos
            
            If *this\child
               *this\parent\redraw = 1
            Else
               *this\redraw = 1
            EndIf
            
            If Not ( *this\type = #__type_Track And constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks ))
               *this\BarChange( ) = 1
            EndIf
            
            ScrollPos = bar_page_pos_( *bar, ThumbPos )
            ScrollPos = bar_invert_page_pos_( *bar, ScrollPos )
            bar_PageChange( *this, ScrollPos, 2 ) ; and post change event 
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      Procedure.l bar_SetAttribute( *this._s_WIDGET, Attribute.l, *value )
         Protected result.l
         Protected value = *value
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         With *this
            ;\\
            If Attribute = #__bar_invert
               If *bar\invert <> Bool( value )
                  *bar\invert = Bool( value )
                  result      = 1
               EndIf
            EndIf
            
            ;\\
            If Attribute = #__bar_ScrollStep
               If *this\scroll\increment <> value
                  *this\scroll\increment = value
                  result                 = 1
               EndIf
            EndIf
            
            ;\\
            If *this\type = #__type_Splitter
               Select Attribute
                  Case #PB_Splitter_FirstMinimumSize
                     *bar\min[1] = DPIScaled(*value)
                     result = Bool( *bar\max )
                     
                  Case #PB_Splitter_SecondMinimumSize
                     *bar\min[2] = DPIScaled(*value)
                     result = Bool( *bar\max )
                     
                  Case #PB_Splitter_FirstGadget
                     *this\split_1( )    = *value
                     result              = - 1
                     
                  Case #PB_Splitter_SecondGadget
                     *this\split_2( )    = *value
                     result              = - 1
                     
               EndSelect
            EndIf
            
            ;\\
            If *this\type <> #__type_Splitter
               Select Attribute
                  Case #__bar_minimum
                     If *bar\min <> *value ;And Not *value < 0
                                           ;*bar\AreaChange( ) = *bar\min - value
                        If *bar\page\pos < *value
                           *bar\page\pos = *value
                        EndIf
                        *bar\min = *value
                        ; Debug  " min " + *bar\min + " max " + *bar\max
                        result = #True
                     EndIf
                     
                  Case #__bar_maximum
                     If *bar\max <> *value ;And Not ( *value < 0 And Not #__bar_minus)
                                           ;*bar\AreaChange( ) = *bar\max - value
                        
                        If *bar\min > *value ;And Not #__bar_minus
                           *bar\max = *bar\min + 1
                        Else
                           *bar\max = *value
                        EndIf
                        ;
                        If Not *bar\max ;And Not #__bar_minus
                           *bar\page\pos = *bar\max
                        EndIf
                        ; Debug  "   min " + *bar\min + " max " + *bar\max
                        
                        ;\\
                        If *bar And *this\parent And is_integral_( *this )
                           If *bar\vertical
                              *this\parent\scroll_height( ) = *bar\max
                           Else
                              *this\parent\scroll_width( ) = *bar\max
                           EndIf
                        EndIf
                        
                        result = #True
                     EndIf
                     
                  Case #__bar_pagelength
                     If *bar\page\len <> *value ;And Not ( *value < 0 And Not #__bar_minus )
                                                ;*bar\AreaChange( ) = *bar\page\len - value
                        *bar\page\len      = *value
                        
                        If Not *bar\max ;And Not #__bar_minus
                           If *bar\min > *value
                              *bar\max = *bar\min + 1
                           Else
                              *bar\max = *value
                           EndIf
                        EndIf
                        
                        result = #True
                     EndIf
                     
                  Case #__bar_buttonsize
                     If *SB\size <> *value
                        *SB\size = *value
                        
                        If *this\type = #__type_spin
                           If *this\flag & #__spin_plus
                              ; set real spin-buttons width
                              *BB1\size = *value
                              *BB2\size = *value
                              
                              If *bar\vertical
                                 *this\fs[2] = *BB2\size - 1
                                 *this\fs[4] = *BB1\size - 1
                              Else
                                 *this\fs[1] = *BB1\size - 1
                                 *this\fs[3] = *BB2\size - 1
                              EndIf
                           Else
                              If *bar\vertical
                                 If *bar\invert
                                    *this\fs[1] = *value - 1
                                 Else
                                    *this\fs[3] = *value - 1
                                 EndIf
                              Else
                                 If *bar\invert
                                    *this\fs[2] = *value - 1
                                 Else
                                    *this\fs[4] = *value - 1
                                 EndIf
                              EndIf
                           EndIf
                           
                           
                        Else
                           ; to reset the button size to default
                           If is_bar_( *this ) Or
                              *this\type = #__type_TabBar Or
                              *this\type = #__type_Scroll
                              ;
                              If *value
                                 *BB1\size = - 1
                                 *BB2\size = - 1
                                 *BB1\hide = 0
                                 *BB2\hide = 0
                              Else
                                 *BB1\size = 0
                                 *BB2\size = 0
                                 *BB1\hide = 1
                                 *BB2\hide = 1
                              EndIf
                           EndIf
                           
                           ; if it is a composite element of the parent
                           If is_integral_( *this ) And *this\parent And *value
                              *value + 1
                              If *bar\vertical
                                 Resize(*this, *this\parent\container_width( ) - *value, #PB_Ignore, *value, #PB_Ignore)
                              Else
                                 Resize(*this, #PB_Ignore, *this\parent\container_width( ) - *value, #PB_Ignore, *value)
                              EndIf
                           EndIf
                           
                           bar_Update( *this, #True )
                           PostRepaint( *this\root )
                           ProcedureReturn #True
                        EndIf
                     EndIf
                     
               EndSelect
            EndIf
            
            
            
            If result ; And *this\width And *this\height ; есть проблемы с imagegadget и scrollareagadget
                      ;Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               
               ;If *this\root ;And *this\root\canvas\postrepaintevent = #False
               If ( *bar\vertical And *this\height ) Or ( *bar\vertical = 0 And *this\width )
                  ; Debug "bar_SetAttribute - "+*this\height +" "+ *this\width +" "+ *bar\vertical
                  bar_Update( *this, #True ) ; ??????????????
               EndIf
               ;EndIf
               
               ; after update and resize bar
               If *this\type = #__type_Scroll And
                  Attribute = #__bar_buttonsize
                  *BB1\size = - 1
                  *BB2\size = - 1
               EndIf
               
               If *this\type = #__type_Splitter
                  If result = - 1
                     SetParent(*value, *this)
                  EndIf
               EndIf
            EndIf
         EndWith
         
         ProcedureReturn result
      EndProcedure
      
      Procedure GetItemIndex( *this._s_WIDGET, *row )
         PushListPosition( *this\__tabs( ) )
         ForEach *this\__tabs( )
            If *row = *this\__tabs( )
               ProcedureReturn ListIndex( *this\__tabs( ) )
            EndIf
         Next
         PopListPosition( *this\__tabs( ) ) 
         ProcedureReturn - 1
      EndProcedure
      
      
      
      ;-
      ;- MENU
      ;-
      Macro PopupBar( )
         root\canvas\menu
      EndMacro
      
      Procedure   BarPosition( *this._s_widget, position.i, size.i = #PB_Default )
         Protected fs = 2, *box._s_WIDGET
         
         If *this\type = #__type_Panel
            *box = *this\__Tab( )  
         Else
             *box = *this
             *this = *this\parent
         EndIf
         
         ; reset position
         *this\fs[1] = 0
         *this\fs[2] = 0
         *this\fs[3] = 0
         *this\fs[4] = 0
         
          
         If  *box
            *box\TabChange( ) = 1
            
            If size = #PB_Default
               If constants::BinaryFlag( *box\flag, #PB_ToolBar_Small )
                  size = 21
               ElseIf constants::BinaryFlag( *box\flag, #PB_ToolBar_Large )
                  size = 40
               Else ; If constants::BinaryFlag( *this\flag, #PB_Toolbar_Normal )
                  size = 32
               EndIf
               
               If position = 1 Or position = 3
                  If constants::BinaryFlag( *box\flag, #PB_ToolBar_InlineText )
                     size = 80
                  Else
                     size = 50; - (1 + fs)
                  EndIf
               EndIf
            EndIf   
            
            size = DPIScaled( size )
            
            If *this  
               If *this\type = #__type_Panel Or *box\Type = #__type_ToolBar
                  *this\ToolBarHeight = size
               Else
                  *this\MenuBarHeight = size
               EndIf
            EndIf
            
            size = *this\TitleBarHeight + *this\MenuBarHeight + *this\ToolBarHeight
            
            If position = 0
               *box\hide = 1
            Else
               *box\hide = 0
            EndIf
            
            If position = 1
               *box\bar\vertical = 1
               *this\fs[1] = size + fs ; #__panel_width
            EndIf
            
            If position = 3
               *box\bar\vertical = 1
               *this\fs[3] = size + fs ; #__panel_width
            EndIf
            
            If position = 2
               *box\bar\vertical = 0
               *this\fs[2] = size + fs ; #__panel_height
            EndIf
            
            If position = 4
               *box\bar\vertical = 0
               *this\fs[4] = size + fs ; #__panel_height
            EndIf
            
            If Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               PostEventRepaint( *this\root )
            EndIf
         EndIf
      EndProcedure
      
      Procedure   BarSeparator( )
         Protected *item._s_ROWS 
         *item = BarButton( #PB_Ignore, - 1, 0, "" )
         *item\sublevel = - 1
      EndProcedure
      
      Procedure   BarButton( Button.i, Image.i, mode.i = 0, Text.s = #Null$ )
         ProcedureReturn AddItem( widget( ), Button, Text, Image, mode )
      EndProcedure
      
      Procedure   BarItem( item, Text.s, Image = - 1 )
         Protected._s_ROWS  *item, *tab
         Protected *this._s_WIDGET = widget( )
         ;
         If *this
            ; get the address of the last item
            ; to make it the parent of the current item
            If *this\__Popup( )
               *tab = *this\__Popup( )\__tabs( )
            EndIf
            ;
            *item = BarButton( item, Image, 0, Text.s )
            ;
            If *tab
               *item\sublevel = *tab\sublevel + 1
               *tab\childrens + 1
               *tab\Row__Menu( ) = *this
            EndIf
         EndIf
         ;
         ProcedureReturn *item
      EndProcedure
      
      Procedure   BarTitle( title.s, Image = - 1 )
         CloseSubBar( )
         OpenSubBar( title, Image )
      EndProcedure
      
      Procedure   OpenSubBar( Text.s, Image = - 1)
         Protected *this._s_WIDGET
         If widget( )
            BarItem( #PB_Any, Text.s, Image )
            ;
            *this = CreateBar( #__type_PopupBar, widget( ) ) 
            SetClass( *this, Text )
            ProcedureReturn *this
         EndIf
      EndProcedure
      
      Procedure   CloseSubBar( )
         If widget( )\__Popup( )
            widget( ) = widget( )\__Popup( )
         EndIf
      EndProcedure
      
      Procedure   CreateBar( Type.w, *parent._s_WIDGET, flag.q = #Null )
         Static count
         Protected *menu, *this._s_WIDGET
         
         If Type = #__type_PopupBar
            If is_bar_( *parent )
               *menu = *parent
               *parent = *parent\parent
            EndIf
            
            *this = Create( *parent, "PopupMenu_"+count, #__type_PopupBar,
                            0,0,0,0, #Null$, flag|#__flag_vertical | #__flag_child, 0, 0, 0, 0, 0, 30 ) ; 
            
            count + 1
            *this\__Popup( ) = *menu
            ;
            SetColor( *this, #__color_back, $FFF2F2F2)
            Hide( *this, #True ) 
         Else
            If Not *parent
               *parent = root( )
            EndIf
            ;
            If constants::BinaryFlag( Flag, #PB_Toolbar_Left ) Or 
               constants::BinaryFlag( Flag, #PB_Toolbar_Right )
               Flag | #__flag_vertical
            EndIf
            
            ;
            *this = Create( *parent, "["+*parent\class +"]-"+ ClassFromType( Type ), Type,
                            0, 0, 0, 0, #Null$, Flag | #__flag_child, 0, 0, 0, 0, 0, 30 )
            
            If *parent\type = #__type_Panel Or Type = #__type_ToolBar
              *parent\__Tab( ) = *this  
              If *parent\MenuBarHeight
                 Debug "--- "+*parent\MenuBarHeight;*parent\class
              EndIf
             ; *parent\ToolBarHeight = DPIScaled(24)
            Else
               *parent\__Menu( ) = *this  
             ;  *parent\MenuBarHeight = DPIScaled(24)
            EndIf
           
            If constants::BinaryFlag( Flag, #PB_Toolbar_Left ) 
               BarPosition( *this, 1 )
            ElseIf constants::BinaryFlag( Flag, #PB_Toolbar_Right )
               BarPosition( *this, 3 )
            ElseIf constants::BinaryFlag( Flag, #PB_Toolbar_Bottom )
               BarPosition( *this, 4 )
            Else
               BarPosition( *this, 2 )
            EndIf
           EndIf
         
         widget( ) = *this ;?
         ProcedureReturn *this
      EndProcedure
      
      Procedure   HideBar( *this._s_WIDGET )
         If *this
            If Not *this\hide
               Protected *PopupBar._s_WIDGET = *this
               *PopupBar\root\repaint = #True
               ;
               While *PopupBar
                  If *PopupBar 
                     If *PopupBar\root\parent
                        *PopupBar\root\parent\PopupBar( ) = #Null
                     EndIf
                     Debug " Hide PopupMenuBar - "+ *PopupBar\class 
                     HideWindow( GetCanvasWindow( *PopupBar\root ), #True, #PB_Window_NoActivate )
                     Hide( *PopupBar, #True )
                  EndIf
                  *PopupBar = *PopupBar\PopupBar( )
               Wend
               ProcedureReturn #True
            EndIf 
         EndIf
      EndProcedure
      
      Procedure HidePopupBar( *this._s_WIDGET )
         If *this\__Popup( )  
            If *this\__Popup( )\TabFocused( )
               *this\__Popup( )\TabFocused( )\_focus = 0
               *this\__Popup( )\TabFocused( ) = 0
            EndIf
            ;
            HideBar( *this )
         Else
            If *this\parent\parent ;And *this\parent\parent\type = #__type_ComboBox
               ;
               DisplayPopupBar( *this, *this\parent\parent )
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i DisplayPopupBar( *this._s_WIDGET, *display._s_WIDGET, X.l = #PB_Ignore, Y.l = #PB_Ignore )
         Protected Width = #PB_Ignore
         Protected Height = #PB_Ignore
         
         Protected Index
         Protected mode = 0
         Protected *displayroot._s_root
         
         ;\\
         If *this
            If Not *display
               ProcedureReturn 0
            EndIf
            
            *display\root\repaint = 1
            
            ;\\
            If *display\TabEntered( )
               DoEvents( *display, #__event_StatusChange);, *display\TabEntered( )\position )
            EndIf
            
            ;\\ ComboBox
            If *display\ComboButton( )
               ;           ;\\ hide previews popup widget
               ;           If Popup( ) And 
               ;              Popup( ) <> *this
               ;             DisplayPopupBar( Popup( ), Popup( )\root\parent )
               ;           EndIf
               
               ;\\ hide current popup widget
               Hide( *this, *this\hide ! 1 )
               
               If *this\hide
                  Debug "comboBar - hide "+*this\class +" "+ *this\hide
                  ;
                  *display\ComboButton( )\arrow\direction = 2
                  
                  HideWindow( *this\root\canvas\window, #True, #PB_Window_NoActivate )
                  ;
                  If *this\displaypopup
                     If PressedWidget( ) = *this
                        PressedWidget( ) = *display
                     EndIf
                  EndIf
                  ;             ;
                  ;             Popup( ) = #Null 
                  ProcedureReturn - 1
               Else
                  Debug "comboBar - show"
                  *display\ComboButton( )\arrow\direction = 3
               EndIf
            Else
               If *this\hide
                  Debug "menuBar - show "+*this\class
                  Hide( *this, #False )
               EndIf
            EndIf
            
            ;\\
            If *this\displaypopup = 0
               *this\displaypopup = 1
               Protected parentID
               Protected *popup._S_WIDGET = *display
               While *popup\__Popup( )
                  *popup = *popup\__Popup( )
               Wend
               If *popup
                  parentID = WindowID( *popup\root\canvas\window )
               Else
                  parentID = WindowID( *display\root\canvas\window )
               EndIf
               
               Debug "displayBar - create " + *this\class +" "+ *this\root ;
               *displayroot = Open( #PB_Any, 0, 0, 1, 1, "", #__window_NoActivate | #__window_NoGadgets | #__window_BorderLess | #__window_Invisible | #__window_Tool,  parentID )
               *displayroot\parent = *display
               *displayroot\class = "["+*this\class+"]"+"-root" ; "root_"+
                                                                ;\\
               Protected Window = GetCanvasWindow( *displayroot )
               Protected WindowID = WindowID( Window )
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  ; var windowLevel: UIWindow.Level { get set } ; stay on top
                  CocoaMessage(0, WindowID, "setLevel:", 3)
                  ; Debug CocoaMessage(0, WindowID, "level")
               CompilerElse
                  StickyWindow( window, #True )
               CompilerEndIf
               
               *displayroot\__Tab( ) = *this
               
               ;\\
               If is_integral_( *this )
                  ReParent( *this, *displayroot )
               Else
                  SetParent( *this, *displayroot )
               EndIf
               
               
               *this\autosize = 1
               
               ;
               If StartDraw( *this\root )
                  ;\\ init drawing font
                  draw_font( *this, GetFontID( *this\root ) )
                  ;
                  CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
                     If CurrentFontID( )
                        DrawingFont( CurrentFontID( ) )
                     EndIf
                  CompilerEndIf
                  ;
                  If is_bar_( *this ) Or *this\type = #__type_TabBar 
                     bar_tab_UpdateItems( *this, *this\__tabs( ) )
                  ElseIf *this\row
                     Update_TreeRows( *this, *this\__rows( ) )
                  EndIf
                  ;
                  StopDraw()
               EndIf
               
               ;\\
               If is_bar_( *this ) Or *this\type = #__type_TabBar 
                  
                  Width = 0
                  Height = 1
                  PushListPosition( *this\__tabs( ) ) 
                  If ListSize( *this\__tabs( ) ) > 9
                     SelectElement( *this\__tabs( ), 9 )
                  Else
                     LastElement( *this\__tabs( ) ) 
                  EndIf
                  Height + ( *this\__tabs( )\y + *this\__tabs( )\height )
                  PopListPosition( *this\__tabs( ) ) 
                  
               ElseIf *this\row
                  Width = *this\text\padding\x + 1 ;*this\fs*2
                  Height = *this\text\padding\y + *this\fs*2
                  PushListPosition( *this\__rows( ) ) 
                  If ListSize( *this\__rows( ) ) > 9
                     SelectElement( *this\__rows( ), 9 )
                  Else
                     LastElement( *this\__rows( ) ) 
                  EndIf
                  Height + ( *this\__rows( )\y + *this\__rows( )\height )
                  PopListPosition( *this\__rows( ) ) 
               EndIf
               
               
               ;\\
               If *this\scroll And 
                  *this\scroll\v 
                  ;bar_area_update( *this )
                  ;Debug *this\scroll\v\hide
                  ;If Not *this\scroll\v\hide
                  Width + *this\scroll\v\width 
                  ;EndIf
               EndIf
               Width + *this\scroll_width( )
               
               ;\\
               If *display\type = #__type_ComboBox
                  If Width < *display\width 
                     Width = *display\width 
                  EndIf
               EndIf
               
               ;\\
               If *display\round
                  Width - *display\round * 2
               EndIf
               ;
               CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                  If DPIResolutionX( )
                     Width = DPIUnscaledX( Width )
                  EndIf
                  If DPIResolutionY( )
                     Height = DPIUnScaledY( Height )
                  EndIf
               CompilerEndIf
            EndIf
            
            ;\\
            If *this\displaypopup  
               *display\PopupBar( ) = *this
               
               If mode
                  X = mouse( )\x - Width / 2
                  
                  If ListSize( *this\__rows( ) ) And *this\RowFocused( )\_focus
                     Y = mouse( )\y - row_y_( *this, *this\RowFocused( ) ) - *this\RowFocused( )\height / 2
                  EndIf
                  If ListSize( *this\__tabs( ) ) And *this\TabFocused( )\_focus
                     Y = mouse( )\y - row_y_( *this, *this\TabFocused( ) ) - *this\TabFocused( )\height / 2
                  EndIf
               Else
                  If X = #PB_Ignore
                     If *display\bar And *display\bar\vertical
                        X = DPIUnScaledX( *display\screen_width( ) ) - 5
                     Else
                        If *display\type = #__type_ComboBox
                           X = *display\screen_x( )
                        ElseIf *display\bar And *display\TabEntered( )
                           X = *display\screen_x( ) + *display\TabEntered( )\x
                        Else
                           X = mouse( )\x
                        EndIf
                     EndIf
                     
                     CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                        If DPIResolutionX( )
                           X = DPIUnscaledX(X)
                        EndIf
                     CompilerEndIf
                  EndIf
                  If *display\round
                     X + *display\round
                  EndIf
                  If Y = #PB_Ignore
                     If *display\type = #__type_ComboBox
                        Y = *display\screen_y( ) + *display\screen_height( )
                        
                     ElseIf *display\bar And *display\TabEntered( )
                        Y = *display\screen_y( ) + *display\TabEntered( )\y
                        ;  Debug ""+*display\scroll_height( )+" "+*display\TabEntered( )\y
                        
                        If Not *display\bar\vertical
                           Y + *display\TabEntered( )\height
                        EndIf
                     Else
                        Y = mouse( )\y
                     EndIf
                     
                     
                     CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                        If DPIResolutionY( )
                           Y = DPIUnscaledY(Y)
                        EndIf
                     CompilerEndIf
                  EndIf
               EndIf
               ;
               X + GadgetX( *display\root\canvas\gadget, #PB_Gadget_ScreenCoordinate )
               Y + GadgetY( *display\root\canvas\gadget, #PB_Gadget_ScreenCoordinate )
               
               ;   
               ResizeWindow( *this\root\canvas\window, X, Y, Width, Height )
               ResizeGadget( *this\root\canvas\gadget, 0, 0, Width, Height )
               
               ;
               HideWindow( *this\root\canvas\window, #False, #__window_NoActivate )
               DisableWindow( *this\root\canvas\window, #False)
               
               PostRepaint( *this\root )
               If *display\root\canvas\postrepaint 
                  *display\root\canvas\postrepaint = 0
                  PostEventRepaint( *display\root )
               EndIf
               
               ProcedureReturn #True
            EndIf
            
         EndIf
      EndProcedure
      
      ;-
      ;-  EDIT STRING
      ;\\ Macro edit_row_caret_1_( _this_ ): _this_\text\caret\pos[3]: EndMacro
      
      Macro edit_string_x_( _this_, _mode_ )
         ( row_x_( _this_, _this_\__lines( ) ) + _this_\__lines( )\text\edit#_mode_\x )
      EndMacro
      
      Macro edit_string_y_( _this_, _mode_ ) ; пока не используется
         ( row_y_( _this_, _this_\__lines( ) ) + _this_\__lines( )\text\edit#_mode_\y )
      EndMacro
      
      Macro edit_change_text_( _address_, _char_len_ = 0, _position_ = )
         _address_\text\edit#_position_\len + _char_len_
         _address_\text\len      = _address_\text\edit[1]\len + _address_\text\edit[3]\len
         _address_\text\string.s = Left( _address_\text\string.s, _address_\text\edit[1]\len ) + Right( _address_\text\string.s, _address_\text\edit[3]\len )
      EndMacro
      
      Macro edit_change_caret_( _this_, _index_ )
         If _this_\LinePressedIndex( ) <> _index_
            _this_\text\TextChange( ) = - 1
         EndIf
         
         If _this_\edit_caret_1( ) > _this_\edit_caret_2( )
            _this_\edit_caret_1( ) = _this_\edit_caret_2( )
         Else
            _this_\edit_caret_2( ) = _this_\edit_caret_1( )
         EndIf
         
         If _this_\LinePressedIndex( ) > _index_
            _this_\LinePressedIndex( ) = _index_
            _this_\LineEnteredIndex( ) = _index_
         Else
            _this_\LineEnteredIndex( ) = _this_\LinePressedIndex( )
         EndIf
      EndMacro
      
      ;-
      Macro edit_sel_reset_( _this_ )
         If _this_\text\edit[2]\width <> 0
            ; вызывать если только строки выделени
            If _this_\text\multiLine
               PushListPosition( _this_\__lines( ) )
               ForEach _this_\__lines( )
                  If _this_\__lines( )\text\edit[2]\width <> 0
                     ; Debug " remove - " +" "+ _this_\__lines( )\text\string
                     edit_sel_string_( _this_, _this_\__lines( ), #__sel_to_remove )
                  EndIf
               Next
               PopListPosition( _this_\__lines( ) )
            EndIf
         EndIf
      EndMacro
      
      Macro edit_sel_is_line_pos_( _this_ )
         Bool( _this_\__lines( )\text\edit[2]\width And
               mouse( )\x > _this_\__lines( )\text\edit[2]\x - _this_\scroll_x( ) And
               mouse( )\y > _this_\__lines( )\text\y - _this_\scroll_y( ) And
               mouse( )\y < ( _this_\__lines( )\text\y + _this_\__lines( )\text\height ) - _this_\scroll_y( ) And
               mouse( )\x < ( _this_\__lines( )\text\edit[2]\x + _this_\__lines( )\text\edit[2]\width ) - _this_\scroll_x( ) )
      EndMacro
      
      Macro edit_sel_end_( _char_ )
         Bool(( _char_ >= ' ' And _char_ <= '/' ) Or               ; ! " # $ % & ' ( ) * + , - .
              ( _char_ >= ':' And _char_ <= '@' ) Or               ;   ; < = > ?
              ( _char_ >= '[' And _char_ <= '^' ) Or               ; \ ] ^ _ `
              ( _char_ >= '{' And _char_ <= '~' ) Or _char_ = '`') ; | }
         
      EndMacro
      
      Procedure.i edit_sel_start_word( *this._s_WIDGET, caret, *rowLine._s_ROWS )
         Protected result.i, i.i, char.i
         
         ; | <<<<<< left edge of the word
         char = Asc( Mid( *rowLine\text\string, caret + 1, 1 ))
         If edit_sel_end_( char )
            result = *rowLine\text\pos + caret
         Else
            result = *rowLine\text\pos
            For i = caret To 1 Step - 1
               char = Asc( Mid( *rowLine\text\string, i, 1 ))
               If edit_sel_end_( char )
                  result = *rowLine\text\pos + i
                  Break
               EndIf
            Next
         EndIf
         ;Debug result - *rowLine\text\pos
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i edit_sel_stop_word( *this._s_WIDGET, caret, *rowLine._s_ROWS )
         Protected result.i, i.i, char.i
         
         ; >>>>>> | right edge of the word
         char = Asc( Mid( *rowLine\text\string, caret, 1 ))
         If edit_sel_end_( char )
            result.i = *rowLine\text\pos + caret
         Else
            result.i = *rowLine\text\pos + *rowLine\text\len
            For i = caret + 1 To *rowLine\text\len
               char = Asc( Mid( *rowLine\text\string, i, 1 ))
               If edit_sel_end_( char )
                  result = *rowLine\text\pos + ( i - 1 )
                  Break
               EndIf
            Next
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Macro edit_redraw_font( _this_ )
         CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
            If StartDraw( _this_\root ) : Debug "  ---- root ReDrawing ----  " 
               If CurrentFontID( )
                  DrawingFont(CurrentFontID( ))
               EndIf
            EndIf
         CompilerEndIf
      EndMacro
      
      Procedure edit_sel_string_( *this._s_WIDGET, *rowLine._s_ROWS, mode.l = #__sel_to_line )
         Protected CaretLeftPos, CaretRightPos, CaretLastLen = 0
         Debug "edit_sel_row_text - " + *rowLine\position + " " + mode
         
         ;\\
         edit_redraw_font( *this )
         
         *this\root\repaint = #True
         ;\\ *rowLine\ColorState( ) = #__s_2
         *rowLine\_focus = 1
         
         If mode = #__sel_to_remove
            
            CaretLeftPos         = 0
            CaretRightPos        = 0
            *rowLine\ColorState( ) = #__s_0
            *rowLine\_focus = 0
            
         ElseIf mode = #__sel_to_set
            
            CaretLeftPos  = 0
            CaretRightPos = *rowLine\text\len
            CaretLastLen  = *this\mode\fullselection
            
         ElseIf mode = #__sel_to_first
            
            CaretLeftPos = 0
            If *rowLine = *this\LinePressed( )
               CaretRightPos = *this\edit_caret_2( ) - *rowLine\text\pos
            Else
               CaretRightPos = *rowLine\text\len
               CaretLastLen  = *this\mode\fullselection
            EndIf
            ;\\ *this\edit_caret_1( ) = *rowLine\text\pos
            
         ElseIf mode = #__sel_to_last
            
            If *rowLine = *this\LinePressed( )
               CaretLeftPos = *this\edit_caret_2( ) - *rowLine\text\pos
            Else
               CaretLeftPos = 0
            EndIf
            CaretRightPos = *rowLine\text\len
            
            If *rowLine\position <> *this\countitems - 1
               CaretLastLen = *this\mode\fullselection
            EndIf
            ;\\ *this\edit_caret_1( ) = *rowLine\text\pos + *rowLine\text\len
            
         ElseIf mode = #__sel_to_line
            
            If *this\edit_caret_1( ) >= *this\edit_caret_2( )
               If *rowLine\text\pos <= *this\edit_caret_2( )
                  CaretLeftPos = *this\edit_caret_2( ) - *rowLine\text\pos
               EndIf
               CaretRightPos = *this\edit_caret_1( ) - *rowLine\text\pos
            Else
               CaretLeftPos = *this\edit_caret_1( ) - *rowLine\text\pos
               If *this\edit_caret_2( ) > ( *rowLine\text\pos + *rowLine\text\len )
                  If *rowLine <> *this\LinePressed( )
                     CaretLastLen = *this\mode\fullselection
                  EndIf
                  CaretRightPos = *rowLine\text\len
               Else
                  CaretRightPos = *this\edit_caret_2( ) - *rowLine\text\pos
               EndIf
            EndIf
            
         EndIf
         
         ; Debug "caret change " + CaretLeftPos +" "+ CaretRightPos
         
         *rowLine\text\edit[1]\pos = 0
         *rowLine\text\edit[2]\pos = CaretLeftPos  ; - *rowLine\text\pos
         *rowLine\text\edit[3]\pos = CaretRightPos ; - *rowLine\text\pos
         
         *rowLine\text\edit[1]\len = *rowLine\text\edit[2]\pos
         *rowLine\text\edit[2]\len = *rowLine\text\edit[3]\pos - *rowLine\text\edit[2]\pos
         *rowLine\text\edit[3]\len = *rowLine\text\len - *rowLine\text\edit[3]\pos
         
         ; item left text
         If *rowLine\text\edit[1]\len > 0
            *rowLine\text\edit[1]\string = Left( *rowLine\text\string, *rowLine\text\edit[1]\len )
            *rowLine\text\edit[1]\width  = TextWidth( *rowLine\text\edit[1]\string )
            *rowLine\text\edit[1]\y      = *rowLine\text\y
            *rowLine\text\edit[1]\height = *rowLine\text\height
         Else
            *rowLine\text\edit[1]\string = ""
            *rowLine\text\edit[1]\width  = 0
         EndIf
         ; item right text
         If *rowLine\text\edit[3]\len > 0
            *rowLine\text\edit[3]\y      = *rowLine\text\y
            *rowLine\text\edit[3]\height = *rowLine\text\height
            If *rowLine\text\edit[3]\len = *rowLine\text\len
               *rowLine\text\edit[3]\string = *rowLine\text\string
               *rowLine\text\edit[3]\width  = *rowLine\text\width
            Else
               *rowLine\text\edit[3]\string = Right( *rowLine\text\string, *rowLine\text\edit[3]\len )
               *rowLine\text\edit[3]\width  = TextWidth( *rowLine\text\edit[3]\string )
            EndIf
         Else
            *rowLine\text\edit[3]\string = ""
            *rowLine\text\edit[3]\width  = 0
         EndIf
         ; item edit text
         If *rowLine\text\edit[2]\len > 0
            If *rowLine\text\edit[2]\len = *rowLine\text\len
               *rowLine\text\edit[2]\string = *rowLine\text\string
               *rowLine\text\edit[2]\width  = *rowLine\text\width
            Else
               *rowLine\text\edit[2]\string = Mid( *rowLine\text\string, 1 + *rowLine\text\edit[2]\pos, *rowLine\text\edit[2]\len )
               *rowLine\text\edit[2]\width  = *rowLine\text\width - ( *rowLine\text\edit[1]\width + *rowLine\text\edit[3]\width )
            EndIf
            *rowLine\text\edit[2]\y      = *rowLine\text\y
            *rowLine\text\edit[2]\height = *rowLine\text\height
         Else
            *rowLine\text\edit[2]\string = ""
            *rowLine\text\edit[2]\width  = 0
         EndIf
         
         ;
         If CaretLastLen
            *rowLine\text\edit[2]\width + CaretLastLen
         EndIf
         
         ; Чтобы знать что строки выделени
         If *rowLine\text\edit[2]\width
            *this\text\edit[2]\width = *rowLine\text\edit[2]\width
         EndIf
         
         ; set text position
         *rowLine\text\edit[1]\x = *rowLine\text\x
         *rowLine\text\edit[2]\x = *rowLine\text\x + *rowLine\text\edit[1]\width
         *rowLine\text\edit[3]\x = *rowLine\text\x + *rowLine\text\edit[1]\width + *rowLine\text\edit[2]\width
         
         ProcedureReturn #True
      EndProcedure
      
      Procedure edit_sel_text_( *this._s_WIDGET, *line._s_ROWS )
         ; edit sel all items
         If *line = #PB_All
            *line                 = *this\LineFocused( )
            *this\LinePressed( )  = #Null
            *this\edit_caret_0( ) = 0
            *this\edit_caret_1( ) = 0
            *this\edit_caret_2( ) = 0
            PushListPosition( *this\__lines( ) )
            ForEach *this\__lines( )
               edit_sel_string_( *this, *this\__lines( ), #__sel_to_last )
            Next
            ;*this\LinePressed( ) = *this\__lines( )
            PopListPosition( *this\__lines( ) )
            *this\edit_caret_1( ) = 0
            *this\edit_caret_2( ) = *this\text\len
            *this\LinePressed( )  = *this\LineFocused( )
         EndIf
         
         If *this\edit_caret_1( ) > *this\edit_caret_2( )
            *this\text\edit[2]\pos = *this\edit_caret_2( )
            *this\text\edit[3]\pos = *this\edit_caret_1( )
            *this\text\caret\x     = *line\x + *line\text\edit[3]\x - 1
         Else
            *this\text\edit[2]\pos = *this\edit_caret_1( )
            *this\text\edit[3]\pos = *this\edit_caret_2( )
            *this\text\caret\x     = *line\x + *line\text\edit[2]\x - 1
         EndIf
         
         *this\text\caret\height = *line\text\height
         *this\text\caret\y      = *line\y
         
         ;       ;*this\text\caret\x = 13
         ;       ;Debug ""+*this\text\padding\x +" "+ *this\text\caret\x +" "+ *this\edit_caret_1( ) +" "+ *line\text\edit[1]\string
         ;       ;Debug TextWidth("W")
         
         ;
         *this\text\edit[1]\len = *this\text\edit[2]\pos
         *this\text\edit[3]\len = ( *this\text\len - *this\text\edit[3]\pos )
         
         If *this\text\edit[2]\len <> ( *this\text\edit[3]\pos - *this\text\edit[2]\pos )
            *this\text\edit[2]\len = ( *this\text\edit[3]\pos - *this\text\edit[2]\pos )
         EndIf
         ;;Debug ""+*this\edit_caret_1( ) +" "+ *this\text\edit[3]\pos;*this\text\edit[2]\len;*this\text\edit[2]\string
         
         ; left text
         If *this\text\edit[1]\len > 0
            *this\text\edit[1]\string = Left( *this\text\string.s, *this\text\edit[1]\len )
         Else
            *this\text\edit[1]\string = ""
         EndIf
         ; right text
         If *this\text\edit[3]\len > 0
            *this\text\edit[3]\string = Right( *this\text\string.s, *this\text\edit[3]\len )
         Else
            *this\text\edit[3]\string = ""
         EndIf
         ; edit text
         If *this\text\edit[2]\len > 0
            *this\text\edit[2]\string = Mid( *this\text\string.s, 1 + *this\text\edit[2]\pos, *this\text\edit[2]\len )
         Else
            *this\text\edit[2]\string = ""
         EndIf
         
         ProcedureReturn 1
      EndProcedure
      
      ;-
      Procedure.l edit_make_caret_position( *this._s_WIDGET, *line._s_ROWS )
         ; Get caret position
         Protected i.l, mouse_x.l, caret_x.l, caret.l = - 1
         Protected Distance.f, MinDistance.f = Infinity( )
         
         If *line 
            edit_redraw_font( *this )
            
            mouse_x = mouse( )\x - row_x_( *this, *line ) - *line\text\x - *this\scroll_x( ) - Bool( #PB_Compiler_OS = #PB_OS_MacOS ) ; надо узнать, думаю это связано с DrawRotateText( )
            
            For i = 0 To *line\text\len
               caret_x = TextWidth( Left( *line\text\string, i ))
               Distance = ( mouse_x - caret_x ) * ( mouse_x - caret_x )
               
               If MinDistance >= Distance
                  MinDistance = Distance
                  caret = i
                  *this\redraw = 1
                  
               Else
                  Break
               EndIf
            Next
         EndIf
         
         ProcedureReturn caret
      EndProcedure
      
      Procedure edit_make_text_position( *this._s_WIDGET )
         ; edit row align
         ; Debug ""+*this\text\align\left +" "+ *this\text\align\top +" "+ *this\text\align\right +" "+ *this\text\align\bottom
         ForEach *this\__lines( )
            If *this\text\vertical
            Else ; horizontal
               If *this\text\rotate = 180
                  *this\__lines( )\y - ( *this\inner_height( ) - *this\scroll_height( ) )
               EndIf
               
               ; changed
               set_align_y_( *this\text, *this\__lines( )\text, - 1, *this\text\rotate )
               set_align_x_( *this\text, *this\__lines( )\text, *this\scroll_width( ), *this\text\rotate )
               
               ;           If *this\type = #__type_String
               ;             Debug *this\__lines( )\text\string
               ;           EndIf
            EndIf
         Next
         
         ;
         bar_area_update( *this )
         
         ; make horizontal scroll x
         make_scrollarea_x( *this, *this\text )
         
         ; make vertical scroll y
         make_scrollarea_y( *this, *this\text )
         
         If *this\scroll\v And
            bar_PageChange( *this\scroll\v, - *this\scroll_y( ) )
         EndIf
         
         If *this\scroll\h And
            bar_PageChange( *this\scroll\h, - *this\scroll_x( ) )
         EndIf
      EndProcedure
      
      Procedure.s edit_make_insert_text( *this._s_WIDGET, Text.s )
         Protected String.s, i.i, Len.i
         
         With *this
            If *this\text\numeric And Text.s <> #LF$
               Static Dot, Minus
               Protected Chr.s, Input.i, left.s, count.i
               
               Len = Len( Text.s )
               For i = 1 To Len
                  Chr   = Mid( Text.s, i, 1 )
                  Input = Asc( Chr )
                  
                  Select Input
                     Case '0' To '9', '.', '-'
                     Case 'Ю', 'ю', 'Б', 'б', 44, 47, 60, 62, 63 : Input = '.' : Chr = Chr( Input )
                        
                     Default
                        Input = 0
                  EndSelect
                  
                  If Input
                     If *this\type = #__type_IPAddress
                        left.s = Left( *this\text\string, *this\edit_caret_1( ) )
                        Select CountString( left.s, "." )
                           Case 0 : left.s = StringField( left.s, 1, "." )
                           Case 1 : left.s = StringField( left.s, 2, "." )
                           Case 2 : left.s = StringField( left.s, 3, "." )
                           Case 3 : left.s = StringField( left.s, 4, "." )
                        EndSelect
                        count = Len( left.s + Trim( StringField( Mid( *this\text\string, *this\edit_caret_1( ) + 1 ), 1, "." ), #LF$ ))
                        If count < 3 And ( Val( left.s ) > 25 Or Val( left.s + Chr.s ) > 255 )
                           Continue
                           ;               ElseIf Mid( *this\text\string, *this\edit_caret_1( ) + 1, 1 ) = "."
                           ;                 *this\edit_caret_1( ) + 1 : *this\edit_caret_2( ) = *this\edit_caret_1( )
                        EndIf
                     EndIf
                     
                     If Not Dot And Input = '.' And Mid( *this\text\string, *this\edit_caret_1( ) + 1, 1 ) <> "."
                        Dot = 1
                     ElseIf Input <> '.' And count < 3
                        Dot = 0
                     Else
                        Continue
                     EndIf
                     
                     If Not Minus And Input = '-' And Mid( *this\text\string, *this\edit_caret_1( ) + 1, 1 ) <> "-"
                        Minus = 1
                     ElseIf Input <> '-'
                        Minus = 0
                     Else
                        Continue
                     EndIf
                     
                     String.s + Chr
                  EndIf
               Next
               
            ElseIf *this\text\pass
               Len = Len( Text.s )
               CompilerIf #PB_Compiler_Version =< 546
                  For i = 1 To Len : String.s + "*" : Next
               CompilerElse
                  For i = 1 To Len : String.s + "●" : Next ; "•●"
               CompilerEndIf
               
            Else
               Select #True
                  Case *this\text\lower : String.s = LCase( Text.s )
                  Case *this\text\upper : String.s = UCase( Text.s )
                  Default
                     String.s = Text.s
               EndSelect
            EndIf
         EndWith
         
         ProcedureReturn String.s
      EndProcedure
      
      ;-
      Procedure.b edit_insert_text( *this._s_WIDGET, Chr.s )
         Protected result.b, String.s, Count.i, *rowLine._s_ROWS
         
         Chr.s = edit_make_insert_text( *this, Chr.s)
         
         If Chr.s
            *rowLine = *this\LineFocused( )
            ;\\
            edit_redraw_font( *this )
            
            If *rowLine
               Count = CountString( Chr.s, #LF$)
               
               If *this\edit_caret_1( ) > *this\edit_caret_2( )
                  *this\edit_caret_1( ) = *this\edit_caret_2( )
               Else
                  *this\edit_caret_2( ) = *this\edit_caret_1( )
               EndIf
               
               *this\edit_caret_1( ) + Len( Chr.s )
               *this\edit_caret_2( ) = *this\edit_caret_1( )
               
               If count Or *rowLine\position <> *this\LinePressedIndex( )
                  *this\text\TextChange( ) = - 1
               EndIf
               
               If *rowLine\text\edit[2]\width <> 0
                  *rowLine\text\edit[2]\len      = 0
                  *rowLine\text\edit[2]\string.s = ""
               Else
                  *rowLine\text\edit[1]\len + Len( Chr.s )
                  *rowLine\text\edit[1]\string.s + Chr.s
                  
                  *rowLine\text\len      = *rowLine\text\edit[1]\len + *rowLine\text\edit[3]\len
                  *rowLine\text\string.s = *rowLine\text\edit[1]\string.s + *rowLine\text\edit[3]\string.s
                  *rowLine\text\width    = TextWidth( *rowLine\text\string )
               EndIf
               
               *this\text\edit[1]\len + Len( Chr.s )
               *this\text\edit[1]\string.s + Chr.s
               
               *this\text\len      = *this\text\edit[1]\len + *this\text\edit[3]\len
               *this\text\string.s = *this\text\edit[1]\string + *this\text\edit[3]\string
               
               ;
               If *rowLine\position > *this\LinePressedIndex( )
                  *this\LineEnteredIndex( ) = *this\LinePressedIndex( ) + Count
               Else
                  *this\LineEnteredIndex( ) = *rowLine\position + Count
               EndIf
               *this\LinePressedIndex( ) = *this\LineEnteredIndex( )
               
               ;
               If Not *this\text\TextChange( )
                  If *this\scroll_width( ) < *rowLine\text\width
                     *this\scroll_width( ) = *rowLine\text\width
                     
                     bar_area_update( *this )
                  EndIf
               EndIf
               
               result             = 1
               *this\root\repaint = 1
            EndIf
         Else
            *this\notify = 1
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure edit_key_page_up_down_( *this._s_WIDGET, wheel, index_select_row )
         Protected repaint, select_index, page_height
         Protected first_index = 0, last_index = *this\countitems - 1
         
         If wheel = - 1 ; page-up
            If index_select_row
               If index_select_row > 0
                  select_index = *this\RowFirstVisible( )\position
               Else
                  select_index = first_index
               EndIf
               If *this\LineFocused( )\position <> select_index
                  row_sel_element_( *this, *this\LineFocused( ), select_index )
                  
                  If select_index = first_index
                     *this\edit_caret_1( ) = 0
                  Else
                     ;\\ *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\edit_caret_0( )
                     *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\edit_caret_1( )
                  EndIf
                  
                  page_height = *this\inner_height( )
                  repaint     = 1
               EndIf
            Else
               If *this\edit_caret_1( ) <> *this\LineFocused( )\text\pos
                  *this\edit_caret_1( ) = *this\LineFocused( )\text\pos
                  repaint               = 1
               EndIf
            EndIf
            
         ElseIf wheel = 1 ; page-down
            If index_select_row
               If index_select_row > 0
                  select_index = *this\RowLastVisible( )\position
               Else
                  select_index = last_index
               EndIf
               If *this\LineFocused( )\position <> select_index
                  row_sel_element_( *this, *this\LineFocused( ), select_index )
                  
                  If select_index = last_index
                     *this\edit_caret_1( ) = *this\text\len
                  Else
                     ;\\ *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\edit_caret_0( )
                     *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\edit_caret_1( )
                  EndIf
                  
                  page_height = *this\inner_height( )
                  repaint     = 1
               EndIf
            Else
               If *this\edit_caret_1( ) <> *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                  *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                  repaint               = 1
               EndIf
            EndIf
         EndIf
         
         If repaint
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            *this\LineEnteredIndex( ) = *this\LineFocused( )\position
            *this\LinePressedIndex( ) = *this\LineEnteredIndex( )
            
            If wheel = - 1
               row_scroll_y_( *this, *this\LineFocused( ), - page_height )
            ElseIf wheel = 1
               row_scroll_y_( *this, *this\LineFocused( ), + page_height )
            EndIf
         EndIf
         
         ProcedureReturn repaint
      EndProcedure
      
      Procedure edit_key_home_( *this._s_WIDGET )
         Protected result
         
         If keyboard( )\key[1] & #PB_Canvas_Control
            If *this\edit_caret_1( ) <> 0
               *this\edit_caret_1( )     = 0
               *this\LineEnteredIndex( ) = 0
               
               Debug "key ctrl home"
               result = 1
            EndIf
         Else
            If *this\edit_caret_1( ) <> *this\LineFocused( )\text\pos
               *this\edit_caret_1( )     = *this\LineFocused( )\text\pos
               *this\LineEnteredIndex( ) = *this\LineFocused( )\position
               
               Debug "key home"
               result = 1
            EndIf
         EndIf
         
         If result
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            *this\LinePressedIndex( ) = *this\LineEnteredIndex( )
            ;\\ *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
            *this\LineFocused( )\edit_caret_1( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure edit_key_end_( *this._s_WIDGET )
         Protected result
         
         If keyboard( )\key[1] & #PB_Canvas_Control
            If *this\edit_caret_1( ) <> *this\text\len
               *this\edit_caret_1( )     = *this\text\len
               *this\LineEnteredIndex( ) = *this\countitems - 1
               
               Debug "key ctrl end"
               result = 1
            EndIf
         Else
            If *this\edit_caret_1( ) <> *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
               *this\edit_caret_1( )     = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
               *this\LineEnteredIndex( ) = *this\LineFocused( )\position
               
               Debug "key end"
               result = 1
            EndIf
         EndIf
         
         If result
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            *this\LinePressedIndex( ) = *this\LineEnteredIndex( )
            ;\\ *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
            *this\LineFocused( )\edit_caret_1( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure edit_key_backup_( *this._s_WIDGET )
         Protected Repaint, remove_chr_len, *rowLine._s_ROWS = *this\LineFocused( )
         
         If *this\text\edit[2]\len
            edit_change_caret_( *this, *rowLine\position )
            
            Debug "" + #PB_Compiler_Procedure + " " + 1111111111
            remove_chr_len = 0
            edit_change_text_( *rowLine, - remove_chr_len, [1] )
            edit_change_text_( *this, - remove_chr_len, [1] )
            Repaint = - 1
            
         ElseIf *this\edit_caret_1( ) > *rowLine\text\pos
            Debug "" + #PB_Compiler_Procedure + " " + 2222222222 + " " + *this\text\len
            *this\edit_caret_1( ) - 1
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            *this\LineEnteredIndex( ) = *rowLine\position
            
            remove_chr_len = 1
            edit_change_text_( *rowLine, - remove_chr_len, [1] )
            edit_change_text_( *this, - remove_chr_len, [1] )
            Repaint = - 1
            
         Else
            Debug "" + #PB_Compiler_Procedure + " " + 3333333333 + " " + *this\text\len
            If *rowLine\position > 0
               remove_chr_len = Len( #LF$ )
               *this\edit_caret_1( ) - remove_chr_len
               *this\edit_caret_2( ) = *this\edit_caret_1( )
               
               *this\LineEnteredIndex( ) = *rowLine\position - 1
               *this\LinePressedIndex( ) = *this\LineEnteredIndex( )
               *this\text\TextChange( )       = - 1
               
               edit_change_text_( *rowLine, - remove_chr_len, [1] )
               edit_change_text_( *this, - remove_chr_len, [1] )
               Repaint = - 1
               
            Else
               *this\notify = 2
            EndIf
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      
      Procedure edit_key_delete_( *this._s_WIDGET )
         Protected Repaint, remove_chr_len, *rowLine._s_ROWS = *this\LineFocused( )
         
         If *this\text\edit[2]\len
            edit_change_caret_( *this, *rowLine\position )
            
            remove_chr_len = 1
            Repaint        = - 1
            
         ElseIf *this\edit_caret_1( ) < *this\text\len ; ok
            If *this\edit_caret_1( ) = *rowLine\text\pos + *rowLine\text\len
               remove_chr_len      = Len( #LF$ )
               *this\text\TextChange( ) = - 1
            Else
               remove_chr_len = 1
            EndIf
            
            ;Debug ""+*this\edit_caret_1( ) +" "+ *this\text\len
            ; change caret
            *this\LineEnteredIndex( ) = *rowLine\position
            *this\LinePressedIndex( ) = *rowLine\position
            
            Repaint = - 1
         EndIf
         
         If Repaint
            edit_change_text_( *rowLine, - remove_chr_len, [3] )
            edit_change_text_( *this, - remove_chr_len, [3] )
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      
      Procedure edit_key_return_( *this._s_WIDGET )
         Protected *rowLine._s_ROWS
         
         If *this\text\multiline
            *rowLine._s_ROWS = *this\LineFocused( )
            
            If *this\LinePressedIndex( ) >= *rowLine\position
               If *this\edit_caret_1( ) > *this\edit_caret_2( )
                  *this\edit_caret_1( ) = *this\edit_caret_2( )
               EndIf
               *this\edit_caret_1( ) + Len( #LF$ )
               *this\edit_caret_2( )     = *this\edit_caret_1( )
               *this\LineEnteredIndex( ) = *rowLine\position + 1
            Else
               *this\edit_caret_2( ) + Len( #LF$ )
               *this\edit_caret_1( )     = *this\edit_caret_2( )
               *this\LineEnteredIndex( ) = *this\LinePressedIndex( ) + 1
            EndIf
            *this\LinePressedIndex( ) = *this\LineEnteredIndex( )
            
            ; Debug ""+*this\edit_caret_1( ) +" "+ *this\edit_caret_2( ) +" "+ *this\LineEnteredIndex( ) +" "+ *this\LinePressedIndex( )
            
            *this\text\string.s = *this\text\edit[1]\string + #LF$ + *this\text\edit[3]\string
            *this\text\TextChange( ) = - 1
            
            ;
            ;         _AddItem( *this, *this\LinePressedIndex( ), *rowLine\text\edit[3]\string )
            ;
            ;         *this\text\string.s = *this\text\edit[1]\string + #LF$ + *rowLine\text\edit[3]\string + #LF$ + Right( *this\text\string.s, *this\text\len - (*rowLine\text\pos + *rowLine\text\len + 1))
            ;         *rowLine\text\edit[3]\len = Len( #LF$ )
            ;         *rowLine\text\edit[3]\string = #LF$
            ;         *rowLine\text\len = *rowLine\text\edit[1]\len + *rowLine\text\edit[3]\len
            ;         *rowLine\text\string.s = *rowLine\text\edit[1]\string + *rowLine\text\edit[3]\string
            ;          *this\text\TextChange( ) = 0
            ;          *this\WidgetChange( ) = 0
            ;
            ; ;                 ForEach *this\__lines( )
            ; ;                   Debug *this\__lines( )\text\string
            ; ;                 Next
            
            ProcedureReturn - 1
         Else
            *this\notify = 3
         EndIf
      EndProcedure
      
      
      ;-
      Procedure edit_SetItem( *this._s_WIDGET, List e_rows._s_ROWS( ), position, *text.Character, string_len )
         Protected *rowLine._s_ROWS
         Protected add_index = - 1, add_y, add_pos, add_height
         
         If position < 0 Or position > ListSize( e_rows( )) - 1
            LastElement( e_rows( ))
            *rowLine = AddElement( e_rows( ))
            
            ;If position < 0
            position = ListIndex( e_rows( ))
            ;EndIf
            
         Else
            
            *rowLine   = SelectElement( e_rows( ), position )
            add_index  = e_rows( )\position
            add_y      = e_rows( )\y + Bool( #PB_Compiler_OS = #PB_OS_Windows )
            add_pos    = e_rows( )\text\pos
            add_height = e_rows( )\height + *this\mode\gridlines
            *rowLine   = InsertElement( e_rows( ))
            
            PushListPosition( e_rows( ))
            While NextElement( e_rows( ))
               e_rows( )\position = ListIndex( e_rows( ) )
               e_rows( )\y + add_height
               e_rows( )\text\pos + string_len + Len( #LF$ )
            Wend
            PopListPosition(e_rows( ))
            
         EndIf
         
         ;\\
         ;edit_redraw_font( *this )
         
         e_rows( )\position       = position
         e_rows( )\text\len    = string_len
         e_rows( )\text\string = PeekS ( *text, string_len )
         
         e_rows( )\height = e_rows( )\text\height ; + 10
         e_rows( )\width  = *this\inner_width( )
         
         e_rows( )\color  = _get_colors_( )
         
         ; make line position
         If *this\text\vertical
         Else ; horizontal
            If *this\scroll_width( ) < e_rows( )\text\width + *this\text\padding\x * 2
               *this\scroll_width( ) = e_rows( )\text\width + *this\text\padding\x * 2
            EndIf
            
            If *this\text\rotate = 0
               If add_index >= 0
                  e_rows( )\text\pos = add_pos
                  e_rows( )\y        = add_y - *this\text\padding\y
               Else
                  e_rows( )\text\pos = *this\text\len
                  e_rows( )\y        = *this\scroll_height( ) - *this\text\padding\y
               EndIf
            ElseIf *this\text\rotate = 180
               e_rows( )\y = ( *this\inner_height( ) - *this\scroll_height( ) - e_rows( )\text\height ) + *this\text\padding\y
            EndIf
            
            *this\scroll_height( ) + e_rows( )\height + *this\mode\gridlines
         EndIf
         
         *this\countitems + 1
         *this\text\len + string_len + Len( #LF$ )
         
         set_align_y_( *this\text, e_rows( )\text, - 1, *this\text\rotate )
         set_align_x_( *this\text, e_rows( )\text, *this\scroll_width( ), *this\text\rotate )
      EndProcedure
      
      Procedure edit_AddItem( *this._s_WIDGET, position, *text.Character, string_len )
         edit_SetItem(*this, *this\__lines( ), position, *text, string_len)
         
         If *this\__lines( )\text\pos = 0
            *this\text\string = InsertString( *this\text\string, *this\__lines( )\text\string, 1 )
         Else
            *this\text\string = InsertString( *this\text\string, #LF$ + *this\__lines( )\text\string, 1 + *this\__lines( )\text\pos )
         EndIf
         ;*this\text\string = InsertString( *this\text\string, *this\__lines( )\text\string + #LF$, 1 + *this\__lines( )\text\pos )
         
         ;       If *this\type = #__type_Editor
         ;         ; Debug "e - "+*this\__lines( )\text\pos +" "+ *this\__lines( )\text\string +" "+ *this\__lines( )\y +" "+ *this\__lines( )\width +" "+ *this\__lines( )\height
         ;         ;  Debug "e - "+*this\__lines( )\text\pos +" "+ *this\__lines( )\text\string +" "+ *this\__lines( )\text\y +" "+ *this\__lines( )\text\width +" "+ *this\__lines( )\text\height
         ;       EndIf
         ;
         ;
         *this\WidgetChange( )  = 0
         *this\text\TextChange( )    = 1
         *this\text\edit\string = *this\text\string
      EndProcedure
      
      Procedure edit_ClearItems( *this._s_WIDGET )
         *this\WidgetChange( )  = - 1
         *this\countitems      = - 1
         *this\text\TextChange( )    = - 1
         *this\text\string      = ""
         *this\text\edit\string = ""
         
         If *this\text\editable
            *this\edit_caret_1( )     = 0
            *this\edit_caret_2( )     = 0
            *this\LinePressedIndex( ) = 0
            *this\LineEnteredIndex( ) = 0
         EndIf
         
         PostRepaint( *this\root ) ;?
         ProcedureReturn 1
      EndProcedure
      
      Procedure edit_RemoveItem( *this._s_WIDGET, item )
         *this\countitems - 1
         
         If *this\countitems = - 1
            edit_ClearItems( *this )
         Else
            *this\text\TextChange( ) = - 1
            *this\text\string   = RemoveString( *this\text\string, StringField( *this\text\string, item + 1, #LF$ ) + #LF$ )
            
            If ListSize( *this\__lines( ) )
               If SelectElement( *this\__lines( ), item )
                  DeleteElement( *this\__lines( ), 1 )
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn 1
      EndProcedure
      
      Procedure edit_SetText( *this._s_WIDGET, Text.s )
         ; If Text.s = "" : Text.s = #LF$ : EndIf
         Text.s = ReplaceString( Text.s, #LFCR$, #LF$ )
         Text.s = ReplaceString( Text.s, #CRLF$, #LF$ )
         Text.s = ReplaceString( Text.s, #CR$, #LF$ )
         
         If *this\text\multiline = 0
            Text.s = edit_make_insert_text( *this, Text.s )
            Text.s = RemoveString( Text.s, #LF$ )
         EndIf
         
         ;       If *this\text\rotate = 180
         ;         *this\scroll\v\bar\invert = 1
         ;       EndIf
         
         Protected String.s = Text.s + #LF$
         Protected *str.Character = @string
         Protected *end.Character = @string
         
         
         *this\scroll_width( )  = *this\text\padding\x * 2
         *this\scroll_height( ) = *this\text\padding\y * 2
         
         Protected enter_index = - 1: If *this\LineEntered( ): enter_index = *this\LineEntered( )\position: *this\LineEntered( ) = #Null: EndIf
         Protected focus_index = - 1: If *this\LineFocused( ): focus_index = *this\LineFocused( )\position: *this\LineFocused( ) = #Null: EndIf
         Protected press_index = - 1: If *this\LinePressed( ): press_index = *this\LinePressed( )\position: *this\LinePressed( ) = #Null: EndIf
         
         If *this\countitems
            *this\countitems = 0
            ClearList( *this\__lines( ))
         Else
            Protected count = 1
         EndIf
         
         ; ; ;       *this\text\len = Len( string )
         ; ; ;       *this\text\string = string
         ; ; ;       *this\countitems = CountString( String, #LF$ )
         ; ; ;       *this\text\TextChange( ) = 1
         ; ; ;       *this\WidgetChange( ) = 1
         
         *this\text\len    = 0
         *this\text\string = String
         
         While *end\c
            If *end\c = #LF
               edit_SetItem( *this, *this\__lines( ), - 1, *str, (*end - *str) >> #PB_Compiler_Unicode )
               
               If enter_index = *this\__lines( )\position: *this\LineEntered( ) = *this\__lines( ): EndIf
               If focus_index = *this\__lines( )\position: *this\LineEntered( ) = *this\__lines( ): EndIf
               If press_index = *this\__lines( )\position: *this\LineEntered( ) = *this\__lines( ): EndIf
               
               *str = *end + #__sOC
            EndIf
            *end + #__sOC
         Wend
         
         *this\text\len - Len( #LF$ )
         *this\text\string = Left( *this\text\string, *this\text\len )
         
         *this\WidgetChange( ) = 1
         *this\text\TextChange( )   = 1
         
         If count
            *this\text\edit\string = *this\text\string
         EndIf
         
         ;Debug ""+*this\scroll_height( ) +" "+ *this\scroll_width( )
         
         ProcedureReturn 1
      EndProcedure
      
      Procedure edit_SetItemState( *this._s_WIDGET, Item.l, State.i )
         If *this\LineFocusedIndex( ) <> Item
            *this\LineFocusedIndex( ) = Item
            
            SelectElement( *this\__lines( ), Item )
            
            If *this\LineFocused( ) <> *this\__lines( )
               If *this\LineFocused( )
                  If *this\LineFocused( )\_focus <> 0
                     *this\LineFocused( )\_focus = 0
                  EndIf
                  
                  ;*this\LineFocused( )\ColorState( ) = #__s_0
               EndIf
               
               *this\LineFocused( ) = *this\__lines( )
               
               If *this\LineFocused( )\_focus = 0
                  *this\LineFocused( )\_focus = 1
               EndIf
               
               ;
               *this\LineFocused( )\ColorState( ) = #__s_2
            EndIf
            
            ;
            If state < 0 Or
               state > *this\LineFocused( )\text\len
               state = *this\LineFocused( )\text\len
            EndIf
            
            *this\edit_caret_0( ) = State
            *this\edit_caret_1( ) = State + *this\LineFocused( )\text\pos
            *this\edit_caret_2( ) = State + *this\LineFocused( )\text\pos
            
            ;
            edit_sel_string_( *this, *this\LineFocused( ) )
            edit_sel_text_( *this, *this\LineFocused( ) )
            row_scroll_y_( *this, *this\LineFocused( ) )
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      Procedure edit_SetState( *this._s_WIDGET, State.i )
         If state < 0 Or
            state > *this\text\len
            state = *this\text\len
         EndIf
         
         If *this\edit_caret_1( ) <> State
            PushListPosition( *this\__lines( ) )
            ForEach *this\__lines( )
               If *this\__lines( )\text\pos <= state And
                  *this\__lines( )\text\pos + *this\__lines( )\text\len >= state
                  
                  If *this\LineFocused( ) <> *this\__lines( )
                     If *this\LineFocused( )
                        If *this\LineFocused( )\_focus <> 0
                           *this\LineFocused( )\_focus = 0
                        EndIf
                        
                        *this\LineFocused( )\ColorState( ) = #__s_0
                     EndIf
                     
                     *this\LineFocused( )      = *this\__lines( )
                     *this\LineFocusedIndex( ) = *this\__lines( )\position
                     
                     If *this\LineFocused( )\_focus = 0
                        *this\LineFocused( )\_focus = 1
                     EndIf
                     
                     *this\LineFocused( )\ColorState( ) = #__s_2
                  EndIf
                  Break
               EndIf
            Next
            PopListPosition( *this\__lines( ) )
            
            ;
            *this\edit_caret_1( ) = State
            *this\edit_caret_2( ) = State
            *this\edit_caret_0( ) = State - *this\LineFocused( )\text\pos
            
            ;
            edit_sel_string_( *this, *this\LineFocused( ) )
            edit_sel_text_( *this, *this\LineFocused( ) )
            row_scroll_y_( *this, *this\LineFocused( ) )
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      Procedure edit_UpdateText( *this._s_WIDGET )
         With *this
            
            If *this\text\string.s
               
               Protected *str.Character
               Protected *end.Character
               Protected TxtHeight = *this\text\height
               Protected String.s, String1.s, CountString
               Protected IT, len.l, Position.l, Width
               Protected ColorFont = *this\color\front[\ColorState( )]
               
               ; *this\max
               If *this\text\vertical
                  If *this\scroll_height( ) > *this\inner_height( )
                     *this\text\TextChange( ) = #__text_Update
                  EndIf
                  Width = *this\inner_height( ) - *this\text\padding\x * 2
                  
               Else
                  If *this\scroll_width( ) > *this\inner_width( )
                     *this\text\TextChange( ) = #__text_Update
                  EndIf
                  
                  Width = *this\inner_width( ) - *this\text\padding\x * 2
               EndIf
               
               If *this\text\multiLine
                  ; make multiline text
                  Protected text$ = *this\text\string.s + #LF$
                  
                  ;     text$ = ReplaceString( text$, #LFCR$, #LF$ )
                  ;     text$ = ReplaceString( text$, #CRLF$, #LF$ )
                  ;     text$ = ReplaceString( text$, #CR$, #LF$ )
                  
                  If *this\text\multiLine > 0
                     String = text$
                  Else
                     ; <http://www.purebasic.fr/english/viewtopic.php?f = 12&t = 53800>
                     Protected.i i, start, found, length
                     Protected$ line$, DelimList$ = " " + Chr( 9 ), nl$ = #LF$
                     
                     *str.Character = @text$
                     *end.Character = @text$
                     
                     ; make word wrap
                     While *end\c
                        If *end\c = #LF
                           start  = ( *end - *str ) >> #PB_Compiler_Unicode
                           line$  = PeekS ( *str, start )
                           length = start
                           
                           ; Get text len
                           While length > 1
                              If Width > TextWidth( RTrim( Left( line$, length ) ))
                                 Break
                              Else
                                 length - 1
                              EndIf
                           Wend
                           
                           While start > length
                              For found = length To 1 Step - 1
                                 If FindString( " ", Mid( line$, found, 1 ))
                                    start = found
                                    Break
                                 EndIf
                              Next
                              
                              If Not found
                                 start = length
                              EndIf
                              
                              String + Left( line$, start ) + nl$
                              line$ = LTrim( Mid( line$, start + 1 ))
                              start = Len( line$ )
                              
                              ;If length <> start
                              length = start
                              
                              ; Get text len
                              While length > 1
                                 If Width > TextWidth( RTrim( Left( line$, length ) ))
                                    Break
                                 Else
                                    length - 1
                                 EndIf
                              Wend
                              ;EndIf
                           Wend
                           
                           String + line$ + nl$
                           *str = *end + #__sOC
                        EndIf
                        
                        *end + #__sOC
                     Wend
                     
                     ;String + #LF$
                  EndIf
                  
                  CountString = CountString( String, #LF$ )
               Else
                  String.s    = RemoveString( *this\text\string, #LF$ ) + #LF$
                  CountString = 1
               EndIf
               
               If *this\countitems <> CountString
                  If *this\countitems > CountString
                     *this\text\TextChange( ) = 1
                  Else
                     *this\text\TextChange( ) = #__text_Update
                  EndIf
                  
                  *this\countitems = CountString
               EndIf
               
               If *this\text\TextChange( )
                  *str.Character = @String
                  *end.Character = @String
                  
                  *this\text\pos = 0
                  *this\text\len = Len( *this\text\string )
                  
                  ;\\
                  ClearList( *this\__lines( ))
                  *this\scroll_width( )  = *this\text\padding\x * 2
                  *this\scroll_height( ) = *this\text\padding\y * 2
                  
                  ;
                  While *end\c
                     If *end\c = #LF
                        AddElement( *this\__lines( ))
                        *this\__lines( )\text\len    = ( *end - *str ) >> #PB_Compiler_Unicode
                        *this\__lines( )\text\string = PeekS ( *str, *this\__lines( )\text\len )
                        ;;*this\__lines( )\text\width = TextWidth( *this\__lines( )\text\string )
                        
                        ; drawing item font
                        draw_font( *this\__lines( ));, GetFontID( *this ) )
                        
                        ;; editor
                        *this\__lines( )\position = ListIndex( *this\__lines( ))
                        
                        *this\__lines( )\height = *this\__lines( )\text\height
                        *this\__lines( )\width  = *this\inner_width( )
                        *this\__lines( )\color  = _get_colors_( )
                        
                        
                        
                        If *this\LineEnteredIndex( ) = *this\__lines( )\position Or
                           *this\LineFocusedIndex( ) = *this\__lines( )\position
                           *this\__lines( )\text\TextChange( ) = 1
                        EndIf
                        
                        ; make line position
                        If *this\text\vertical
                           If *this\scroll_height( ) < *this\__lines( )\text\height + *this\text\padding\y * 2 + *this\mode\fullselection
                              *this\scroll_height( ) = *this\__lines( )\text\height + *this\text\padding\y * 2 + *this\mode\fullselection
                           EndIf
                           
                           If *this\text\rotate = 90
                              *this\__lines( )\x = *this\scroll_width( ) - *this\text\padding\x
                           ElseIf *this\text\rotate = 270
                              *this\__lines( )\x = ( *this\inner_width( ) - *this\scroll_width( ) - *this\__lines( )\text\width ) + *this\text\padding\x
                           EndIf
                           
                           *this\scroll_width( ) + TxtHeight + Bool( *this\__lines( )\position <> *this\countitems - 1 ) * *this\mode\gridlines
                        Else ; horizontal
                           If *this\scroll_width( ) < *this\__lines( )\text\width + *this\text\padding\x * 2 + *this\mode\fullselection
                              *this\scroll_width( ) = *this\__lines( )\text\width + *this\text\padding\x * 2 + *this\mode\fullselection
                           EndIf
                           
                           If *this\text\rotate = 0
                              *this\__lines( )\y = *this\scroll_height( ) - *this\text\padding\y
                           ElseIf *this\text\rotate = 180
                              *this\__lines( )\y = ( *this\inner_height( ) - *this\scroll_height( ) - *this\__lines( )\text\height ) + *this\text\padding\y
                           EndIf
                           
                           *this\scroll_height( ) + TxtHeight + Bool( *this\__lines( )\position <> *this\countitems - 1 ) * *this\mode\gridlines
                        EndIf
                        
                        *str = *end + #__sOC
                     EndIf
                     
                     *end + #__sOC
                  Wend
                  
                  
                  ;
                  ForEach *this\__lines( )
                     *this\__lines( )\text\pos = *this\text\pos
                     *this\text\pos + *this\__lines( )\text\len + 1 ; Len( #LF$ )
                     
                     If *this\text\vertical
                        If *this\text\rotate = 270
                           *this\__lines( )\x - ( *this\inner_width( ) - *this\scroll_width( ) )
                        EndIf
                        
                        ; changed
                        If *this\text\rotate = 0
                           *this\__lines( )\text\x = 0
                        ElseIf *this\text\rotate = 270
                           *this\__lines( )\text\x = Bool( #PB_Compiler_OS = #PB_OS_MacOS ) * 2 + Bool( #PB_Compiler_OS = #PB_OS_Linux ) + *this\__lines( )\text\width
                        Else
                           *this\__lines( )\text\x = - Bool( #PB_Compiler_OS = #PB_OS_MacOS )
                        EndIf
                        
                        set_align_y_( *this\text, *this\__lines( )\text, *this\scroll_height( ), *this\text\rotate )
                     Else ; horizontal
                        If *this\text\rotate = 180
                           *this\__lines( )\y - ( *this\inner_height( ) - *this\scroll_height( ) )
                        EndIf
                        
                        ; changed
                        If *this\text\rotate = 90
                           *this\__lines( )\text\y = 0
                        ElseIf *this\text\rotate = 180
                           *this\__lines( )\text\y = Bool( #PB_Compiler_OS = #PB_OS_MacOS ) * 2 + Bool( #PB_Compiler_OS = #PB_OS_Linux ) + *this\__lines( )\text\height
                        Else
                           *this\__lines( )\text\y = - Bool( #PB_Compiler_OS = #PB_OS_MacOS )
                        EndIf
                        
                        set_align_x_( *this\text, *this\__lines( )\text, *this\scroll_width( ), *this\text\rotate )
                     EndIf
                     
                     
                     If *this\__lines( )\text\TextChange( ) <> 0
                        ; edit_sel_update_( *this )
                        
                        *this\__lines( )\text\TextChange( ) = 0
                     EndIf
                  Next
               EndIf
            EndIf
            
            ;\\
            bar_area_update( *this )
            
            ; make horizontal scroll x
            make_scrollarea_x( *this, *this\text )
            
            ; make vertical scroll y
            make_scrollarea_y( *this, *this\text )
            
            ;           ; This is for the caret and scroll
            ;           ; when entering the key - ( enter & backspace )
            ;           If *this\scroll\v
            ;             edit_text_*this\scroll_y( )
            ;           EndIf
            ;           If *this\scroll\h
            ;             edit_text_*this\scroll_x( )
            ;           EndIf
            
            
            ; vertical bar one before displaying
            If *this\scroll\v And Not *this\scroll\v\bar\ThumbChange( ) ;And Not *this\show
               If *this\scroll\v\bar\max > *this\scroll\v\bar\page\len
                  If *this\text\align\bottom
                     If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\end )
                     EndIf
                     
                  ElseIf Not *this\text\align\top
                     If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\end / 2 )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ; horizontal bar one before displaying
            If *this\scroll\h And Not *this\scroll\h\bar\ThumbChange( ) ;And Not *this\show
               If *this\scroll\h\bar\max > *this\scroll\h\bar\page\len
                  If *this\text\align\right
                     If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\end )
                     EndIf
                     
                  ElseIf Not *this\text\align\left
                     If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\end / 2 )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
         EndWith
      EndProcedure
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      ;-
      Declare tt_close( *this._s_tt )
      
      Procedure tt_Draw_Tree( *this._s_tt, *color._s_color = 0 )
         With *this
            If *this And PB(IsGadget)( *this\gadget ) And StartDrawing( CanvasOutput( *this\gadget ))
               If Not *color
                  *color = *this\color
               EndIf
               
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_box_( 0, 1, *this\width, *this\height - 2, *color\back[*color\state] )
               draw_mode_( #PB_2DDrawing_Transparent )
               DrawText( *this\text\x, *this\text\y, *this\text\string, *color\front[*color\state] )
               draw_mode_( #PB_2DDrawing_Outlined )
               Line( 0, 0, *this\width, 1, *color\frame[*color\state] )
               Line( 0, *this\height - 1, *this\width, 1, *color\frame[*color\state] )
               Line( *this\width - 1, 0, 1, *this\height, *color\frame[*color\state] )
               StopDrawing( )
            EndIf
         EndWith
      EndProcedure
      
      Procedure tt_tree_callBack( )
         ;     ;SetActiveWindow( EventWidget( )\canvas\window )
         ;     ;SetActiveGadget( EventWidget( )\\canvas\gadget )
         ;
         ;     If RowFocused( EventWidget( ) )
         ;       RowFocused( EventWidget( ) )\ColorState( ) = 0
         ;     EndIf
         ;
         ;     RowFocused( EventWidget( ) ) = EventWidget( )\__rows( )
         ;     EventWidget( )\__rows( )\ColorState( ) = 2
         ;     EventWidget( )\ColorState( ) = 2
         ;
         ;     ;Draw_Tree( EventWidget( ))
         
         tt_close( GetWindowData( EventWindow( ) ))
      EndProcedure
      
      Procedure tt_creare( *this._s_WIDGET, X, Y )
         With *this
            If *this
               EventWidget( ) = *this
               *this\RowToolTip( ).allocate( TT )
               *this\RowToolTip( )\visible = 1
               *this\RowToolTip( )\x       = X + *this\__rows( )\x + *this\__rows( )\width - 1
               *this\RowToolTip( )\y       = Y + *this\__rows( )\y - *this\scroll\v\bar\page\pos
               
               *this\RowToolTip( )\width = *this\__rows( )\text\width - *this\inner_width( ) + ( *this\__rows( )\text\x - *this\__rows( )\x ) + 5 ; - ( *this\scroll_width( ) - *this\__rows( )\width )  ; - 32 + 5
               
               If *this\RowToolTip( )\width < 6
                  *this\RowToolTip( )\width = 0
               EndIf
               
               ;Debug *this\RowToolTip( )\width ;Str( *this\__rows( )\text\x - *this\__rows( )\x )
               
               *this\RowToolTip( )\height = *this\__rows( )\height
               Protected flag
               CompilerIf #PB_Compiler_OS = #PB_OS_Linux
                  flag = #__window_Tool
               CompilerEndIf
               
               *this\RowToolTip( )\window = OpenWindow( #PB_Any, *this\RowToolTip( )\x, *this\RowToolTip( )\y, *this\RowToolTip( )\width, *this\RowToolTip( )\height, "",
                                                        #__window_BorderLess | #__window_NoActivate | flag, WindowID( *this\root\canvas\window ))
               
               *this\RowToolTip( )\gadget      = CanvasGadget( #PB_Any, 0, 0, *this\RowToolTip( )\width, *this\RowToolTip( )\height )
               *this\RowToolTip( )\color       = *this\__rows( )\color
               *this\RowToolTip( )\text        = *this\__rows( )\text
               
               *this\RowToolTip( )\text\x      = - ( *this\inner_width( ) - ( *this\__rows( )\text\x - *this\__rows( )\x )) + 1
               *this\RowToolTip( )\text\y      = ( *this\__rows( )\text\y - *this\__rows( )\y ) + *this\scroll\v\bar\page\pos
               
               BindEvent( #PB_Event_ActivateWindow, @tt_tree_callBack( ), *this\RowToolTip( )\window )
               SetWindowData( *this\RowToolTip( )\window, *this\RowToolTip( ) )
               tt_Draw_Tree( *this\RowToolTip( ) )
            EndIf
         EndWith
      EndProcedure
      
      Procedure tt_close( *tt._s_tt )
         If IsWindow( *tt\window )
            *tt\visible = 0
            ; UnbindEvent( #PB_Event_ActivateWindow, @tt_tree_callBack( ), *tt\window )
            CloseWindow( *tt\window )
            ; ClearStructure( *this, _s_tt ) ;??????
         EndIf
      EndProcedure
      
      
      ;-
      Procedure.q Flag( *this._s_WIDGET, flag.q = #Null, state.b = #PB_Default )
         Protected result.q
         ;
         Protected string_bar = Bool( *this\type = #__type_Text Or
                                      *this\type = #__type_Editor Or
                                      *this\type = #__type_String Or
                                      *this\type = #__type_Button Or
                                      *this\type = #__type_Option Or
                                      *this\type = #__type_Spin Or
                                      *this\type = #__type_Hyperlink Or
                                      *this\type = #__type_ComboBox Or
                                      *this\type = #__type_CheckBox )
         ;
         Protected list_bar = Bool( *this\type = #__type_Tree Or
                                    *this\type = #__type_ListIcon Or
                                    *this\type = #__type_ListView Or
                                    *this\type = #__type_Properties )
         
         Protected Container = Bool( *this\type = #__type_Container Or
                                     *this\type = #__type_Panel Or
                                     *this\type = #__type_ScrollArea Or
                                     *this\type = #__type_Frame )
         Container = Bool(*this\type = #__type_Container)
         ;
         ;\\ get widget flags
         If Not flag
            ;result = *this\flag
            result = ToPBFlag( *this\type, *this\flag )
         Else
            ;\\ replace pb flag
            flag = FromPBFlag( *this\type, flag )
            
            ;\\ is flag on the widget
            If state = #PB_Default
               result = Bool( *this\flag & flag = flag )
            Else
               state = Bool( state )
               
               ;\\ set & remove flags
               If state
                  *this\flag | flag
               Else
                  *this\flag & ~ flag
               EndIf
               
               *this\WidgetChange( ) = 1
               
               ;\\ text align
               If string_bar
                  *this\text\TextChange( ) = #__text_Update
                  ; 
                  If constants::BinaryFlag( Flag, #__flag_Textinvert )
                     *this\text\invert = state
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_Textvertical )
                     *this\text\vertical = state
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_Textwordwrap )
                     *this\text\multiline = - state
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_Textmultiline )
                     *this\text\multiline = state
                  EndIf
                  ;
                  If constants::BinaryFlag( Flag, #__flag_Textleft )
                     *this\text\align\left = state
                     ;
                     If Not *this\text\align\left 
                        If constants::BinaryFlag( *this\flag, #__flag_Textright )
                           *this\text\align\right = #True
                        EndIf
                     EndIf
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_Texttop )
                     *this\text\align\top = state
                     ;
                     If Not *this\text\align\top 
                        If constants::BinaryFlag( *this\flag, #__flag_Textbottom )
                           *this\text\align\bottom = #True
                        EndIf
                     EndIf
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_Textright )
                     *this\text\align\right = state
                     ;
                     If Not *this\text\align\right 
                        If constants::BinaryFlag( *this\flag, #__flag_Textleft )
                           *this\text\align\left = #True
                        EndIf
                     EndIf
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_Textbottom )
                     *this\text\align\bottom = state
                     ;
                     If Not *this\text\align\bottom 
                        If constants::BinaryFlag( *this\flag, #__flag_Texttop )
                           *this\text\align\top = #True
                        EndIf
                     EndIf
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_Textcenter )
                     *this\text\align\left   = #False
                     *this\text\align\top    = #False
                     *this\text\align\right  = #False
                     *this\text\align\bottom = #False
                  EndIf
                  ;
                  ;\\0в ,
                  If *this\type = #__type_Button
                     ; set toggle button
                     If constants::BinaryFlag( flag, #__flag_ButtonToggle )
                        If constants::BinaryFlag( *this\Flag, #__flag_ButtonToggle )
                           If Not *this\togglebox
                              *this\togglebox.allocate( BOX )
                           EndIf
                           ;
                           *this\ToggleBoxState( ) = state
                           ;
                           If state
                              *this\ColorState( ) = #__s_2
                           Else
                              *this\ColorState( ) = #__s_0
                           EndIf
                        EndIf
                     Else
                        If *this\togglebox
                           *this\togglebox = #Null
                           *this\ColorState( ) = #__s_0
                        EndIf
                     EndIf
                     
                     ;\\ reset to center vertical
                     If *this\text\align\top = #True And
                        *this\text\align\bottom = #True
                        ;
                        *this\text\align\top    = #False
                        *this\text\align\bottom = #False
                     EndIf
                     
                     ;\\ reset to center horizontal
                     If *this\text\align\left = #True And
                        *this\text\align\right = #True
                        ;
                        *this\text\align\left  = #False
                        *this\text\align\right = #False
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               If list_bar
                  If constants::BinaryFlag( Flag, #__flag_RowClickSelect )
                     *this\mode\clickSelect = 1
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_RowMultiSelect )
                     *this\mode\multiSelect = 1
                  EndIf
                  
                  If constants::BinaryFlag( Flag, #__tree_nolines )
                     *this\mode\Lines = state
                  EndIf
                  If constants::BinaryFlag( Flag, #__tree_nobuttons )
                     *this\mode\Buttons = state
                     
                     If constants::BinaryFlag( *this\flag, #__flag_optionboxes )
                        If *this\countitems
                           PushListPosition( *this\__rows( ))
                           ForEach *this\__rows( )
                              If *this\__rows( )\RowParent( ) And
                                 *this\__rows( )\RowParent( )\childrens
                                 *this\__rows( )\sublevel = state
                              EndIf
                           Next
                           PopListPosition( *this\__rows( ))
                        EndIf
                     EndIf
                  EndIf
                  
                  If constants::BinaryFlag( Flag, #__tree_threestate ) 
                     *this\mode\threestate = constants::BinaryFlag( *this\flag, #__tree_checkboxes )
                  EndIf
                  
                  If constants::BinaryFlag( Flag, #__tree_checkboxes ) 
                     *this\mode\check = state 
                     *this\mode\checkboxes = state
                     *this\mode\optionboxes = constants::BinaryFlag( *this\flag, #__flag_optionboxes )
                  EndIf
                  
                  If constants::BinaryFlag( Flag, #__flag_optionboxes )
                     *this\mode\check = state 
                     *this\mode\optionboxes = state
                     *this\mode\checkboxes = constants::BinaryFlag( *this\flag, #__tree_checkboxes )
                     
                     ;                      ; set option group
                     ;                      If *this\countitems
                     ;                         PushListPosition( *this\__rows( ))
                     ;                         ForEach *this\__rows( )
                     ;                            If *this\__rows( )\RowParent( )
                     ;                               *this\__rows( )\ItemBoxState( ) = #PB_Checkbox_Unchecked
                     ;                               If state
                     ;                                  *this\__rows( )\Row__Option( ) = get_item_( *this, 0 )
                     ;                               EndIf
                     ;                            EndIf
                     ;                         Next
                     ;                         PopListPosition( *this\__rows( ))
                     ;                      EndIf
                  EndIf
                  
                  If constants::BinaryFlag( Flag, #__flag_gridLines ) 
                     *this\mode\gridlines = state * 10
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_collapsed ) 
                     *this\mode\collapsed = state
                     
                     If *this\countitems
                        PushListPosition( *this\__rows( ))
                        ForEach *this\__rows( )
                           If *this\__rows( )\RowParent( )
                              *this\__rows( )\RowParent( )\ItemButtonState( ) = state
                              *this\__rows( )\hide                      = state
                           EndIf
                        Next
                        PopListPosition( *this\__rows( ))
                     EndIf
                  EndIf
                  
                  
                  If ( *this\mode\lines Or *this\mode\buttons )
                     *this\row\sublevelsize = DPIScaled( #__sublevelsize )
                  Else
                     *this\row\sublevelsize = 0
                  EndIf
                  
                  If *this\countitems
                     *this\WidgetChange( ) = 1
                  EndIf
               EndIf
               
               ;           If constants::BinaryFlag( Flag, #__flag_Textbottom ) 
               ;             *this\image\ImageChange( )              = #__flag_TextUpdate
               ;             *this\image\align\top    = 0
               ;             *this\image\align\bottom = state
               ;           EndIf
               
               
               ; ;           If constants::BinaryFlag( Flag, #__flag_Textright )
               ; ;             *this\image\align\left  = 0
               ; ;             *this\image\ImageChange( )             = #__flag_TextUpdate
               ; ;             *this\image\align\right = state
               ; ;           EndIf
               
               
               
               
               If Container
                  
               EndIf
               
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i ToPBEventType( event.i )
         If event = #__event_MouseEnter
            ProcedureReturn #PB_EventType_MouseEnter
         EndIf
         If event = #__event_MouseLeave
            ProcedureReturn #PB_EventType_MouseLeave
         EndIf
         If event = #__event_MouseMove
            ProcedureReturn #PB_EventType_MouseMove
         EndIf
         If event = #__event_Focus
            ProcedureReturn #PB_EventType_Focus
         EndIf
         If event = #__event_LostFocus
            ProcedureReturn #PB_EventType_LostFocus
         EndIf
         
         If event = #__event_Resize
            ProcedureReturn #PB_EventType_Resize
         EndIf
         If event = #__event_Change
            ProcedureReturn #PB_EventType_Change
         EndIf
         If event = #__event_StatusChange
            ProcedureReturn #PB_EventType_StatusChange
         EndIf
         If event = #__event_Down
            ProcedureReturn #PB_EventType_Down
         EndIf
         If event = #__event_Up
            ProcedureReturn #PB_EventType_Up
         EndIf
         
         If event = #__event_DragStart
            ProcedureReturn #PB_EventType_DragStart
         EndIf
         If event = #__event_Input
            ProcedureReturn #PB_EventType_Input
         EndIf
         If event = #__event_KeyDown
            ProcedureReturn #PB_EventType_KeyDown
         EndIf
         If event = #__event_KeyUp
            ProcedureReturn #PB_EventType_KeyUp
         EndIf
         
         If event = #__event_LeftDown
            ProcedureReturn #PB_EventType_LeftButtonDown
         EndIf
         If event = #__event_LeftUp
            ProcedureReturn #PB_EventType_LeftButtonUp
         EndIf
         If event = #__event_LeftClick
            ProcedureReturn #PB_EventType_LeftClick
         EndIf
         If event = #__event_Left2Click
            ProcedureReturn #PB_EventType_LeftDoubleClick
         EndIf
         
         If event = #__event_RightDown
            ProcedureReturn #PB_EventType_RightButtonDown
         EndIf
         If event = #__event_RightUp
            ProcedureReturn #PB_EventType_RightButtonUp
         EndIf
         If event = #__event_RightClick
            ProcedureReturn #PB_EventType_RightClick
         EndIf
         If event = #__event_Right2Click
            ProcedureReturn #PB_EventType_RightDoubleClick
         EndIf
         
         ;       If event = #__event_PopupWindow
         ;          ProcedureReturn #PB_EventType_PopupWindow
         ;       EndIf
         ;       If event = #__event_PopupMenu
         ;          ProcedureReturn #PB_EventType_PopupMenu
         ;       EndIf
      EndProcedure
      
      Procedure.q ToPBFlag( Type, Flag.q )
         Protected flags.q = Flag
         
         Select Type
            Case #__type_Container
               If constants::BinaryFlag( Flag, #__flag_BorderLess )
                  flags & ~ #__flag_BorderLess
                  flags | #PB_Container_BorderLess
               EndIf
               If constants::BinaryFlag( Flag, #__flag_BorderFlat )
                  flags & ~ #__flag_BorderFlat
                  flags | #PB_Container_Flat
               EndIf
               If constants::BinaryFlag( Flag, #__flag_BorderSingle )
                  flags & ~ #__flag_BorderSingle
                  flags | #PB_Container_Single
               EndIf
               If constants::BinaryFlag( Flag, #__flag_BorderRaised )
                  flags & ~ #__flag_BorderRaised
                  flags | #PB_Container_Raised
               EndIf
               If constants::BinaryFlag( Flag, #__flag_BorderDouble ) 
                  flags & ~ #__flag_BorderDouble
                  flags | #PB_Container_Double
               EndIf
               
            Case #__type_Button
               If constants::BinaryFlag( Flag, #__flag_Textwordwrap ) 
                  flags & ~ #__flag_Textwordwrap
                  flag | #PB_Button_MultiLine
               EndIf
               If constants::BinaryFlag( Flag, #__flag_Textleft ) 
                  flags & ~ #__flag_Textleft
                  flags | #PB_Button_Left
               EndIf
               If constants::BinaryFlag( Flag, #__flag_Textright ) 
                  flags & ~ #__flag_Textright
                  flags | #PB_Button_Right
               EndIf
         EndSelect
         
         ProcedureReturn flags
      EndProcedure
      
      ;
      Procedure.q FromPBFlag( Type, Flag.q )
         Protected flags.q = Flag
         
         Select Type
            Case #__type_window
               If constants::BinaryFlag( Flag, #__window_BorderLess )
                  flags & ~ #__window_BorderLess
                  flags | #__flag_BorderLess
               EndIf
               ;
            Case #__type_Container
               ;                If constants::BinaryFlag( Flag, #PB_Container_BorderLess ) 
               ;                   flags & ~ #PB_Container_BorderLess
               ;                   flags = #__flag_BorderLess
               ;                EndIf
               If constants::BinaryFlag( Flag, #PB_Container_Flat )
                  flags & ~ #PB_Container_Flat
                  flags = #__flag_BorderFlat
               EndIf
               If constants::BinaryFlag( Flag, #PB_Container_Single )
                  flags & ~ #PB_Container_Single
                  flags = #__flag_BorderSingle
               EndIf
               If constants::BinaryFlag( Flag, #PB_Container_Raised ) 
                  flags & ~ #PB_Container_Raised
                  flags = #__flag_BorderRaised
               EndIf
               If constants::BinaryFlag( Flag, #PB_Container_Double )
                  flags & ~ #PB_Container_Double
                  flags = #__flag_BorderDouble
               EndIf
               ;
            Case #__type_Frame
               ;                If constants::BinaryFlag( Flag, #PB_Frame_BorderLess ) 
               ;                   flags & ~ #PB_Frame_BorderLess
               ;                   flags = #__flag_BorderLess
               ;                EndIf
               If constants::BinaryFlag( Flag, #PB_Frame_Flat )
                  flags & ~ #PB_Frame_Flat
                  flags = #__flag_BorderFlat
               EndIf
               If constants::BinaryFlag( Flag, #PB_Frame_Single )
                  flags & ~ #PB_Frame_Single
                  flags = #__flag_BorderSingle
               EndIf
               ;                If constants::BinaryFlag( Flag, #PB_Frame_Raised ) 
               ;                   flags & ~ #PB_Frame_Raised
               ;                   flags = #__flag_BorderRaised
               ;                EndIf
               If constants::BinaryFlag( Flag, #PB_Frame_Double )
                  flags & ~ #PB_Frame_Double
                  flags = #__flag_BorderDouble
               EndIf
               ;
            Case #__type_MDI
               If constants::BinaryFlag( Flag, #PB_MDI_AutoSize ) 
                  flags & ~ #PB_MDI_AutoSize
                  flags | #__flag_AutoSize
               EndIf
               If constants::BinaryFlag( Flag, #PB_MDI_BorderLess )
                  flags & ~ #PB_MDI_BorderLess
                  flags | #__flag_BorderLess
               EndIf
               ;
            Case #__type_CheckBox
               If constants::BinaryFlag( Flag, #PB_CheckBox_Right )
                  flags & ~ #PB_CheckBox_Right
                  flags | #__flag_Textright
               EndIf
               If constants::BinaryFlag( Flag, #PB_CheckBox_Center )
                  flags & ~ #PB_CheckBox_Center
                  flags | #__flag_Textcenter
               EndIf
               ;
            Case #__type_Text
               If constants::BinaryFlag( Flag, #PB_Text_Center )
                  flags & ~ #PB_Text_Center
                  flags | #__flag_Textcenter
                  ;flags & ~ #__flag_Textleft
               EndIf
               If constants::BinaryFlag( Flag, #PB_Text_Right )
                  flags & ~ #PB_Text_Right
                  flags | #__flag_Textright
               EndIf
               ;
            Case #__type_Button ; ok
               If constants::BinaryFlag( Flag, #PB_Button_MultiLine ) 
                  flags & ~ #PB_Button_MultiLine
                  flags | #__flag_Textwordwrap
               EndIf
               If constants::BinaryFlag( Flag, #PB_Button_Left ) 
                  flags & ~ #PB_Button_Left
                  flags | #__flag_Textleft
               EndIf
               If constants::BinaryFlag( Flag, #PB_Button_Right ) 
                  flags & ~ #PB_Button_Right
                  flags | #__flag_Textright
               EndIf
               ;
            Case #__type_String ; ok
               If constants::BinaryFlag( Flag, #PB_String_Password ) 
                  flags & ~ #PB_String_Password
                  flags | #__flag_Textpassword
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_LowerCase )
                  flags & ~ #PB_String_LowerCase
                  flags | #__flag_Textlowercase
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_UpperCase ) 
                  flags & ~ #PB_String_UpperCase
                  flags | #__flag_Textuppercase
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_BorderLess )
                  flags & ~ #PB_String_BorderLess
                  flags | #__flag_BorderLess
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_Numeric ) 
                  flags & ~ #PB_String_Numeric
                  flags | #__flag_Textnumeric
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_ReadOnly )
                  flags & ~ #PB_String_ReadOnly
                  flags | #__flag_Textreadonly
               EndIf
               ;
            Case #__type_Editor
               If constants::BinaryFlag( Flag, #PB_Editor_ReadOnly ) 
                  flags & ~ #PB_Editor_ReadOnly
                  flags | #__flag_Textreadonly
               EndIf
               If constants::BinaryFlag( Flag, #PB_Editor_WordWrap ) 
                  flags & ~ #PB_Editor_WordWrap
                  flags | #__flag_Textwordwrap
               EndIf
               ;
            Case #__type_Tree
               If constants::BinaryFlag( Flag, #PB_Tree_AlwaysShowSelection ) 
                  flags & ~ #PB_Tree_AlwaysShowSelection
               EndIf
               If constants::BinaryFlag( Flag, #PB_Tree_CheckBoxes ) 
                  flags & ~ #PB_Tree_CheckBoxes
                  flags | #__tree_checkboxes
               EndIf
               If constants::BinaryFlag( Flag, #PB_Tree_ThreeState ) 
                  flags & ~ #PB_Tree_ThreeState
                  flags | #__tree_threestate
               EndIf
               If constants::BinaryFlag( Flag, #PB_Tree_NoButtons )
                  flags & ~ #PB_Tree_NoButtons
                  flags | #__tree_nobuttons
               EndIf
               If constants::BinaryFlag( Flag, #PB_Tree_NoLines ) 
                  flags & ~ #PB_Tree_NoLines
                  flags | #__tree_nolines
               EndIf
               ;   
            Case #__type_ListView ; Ok
               If constants::BinaryFlag( Flag, #PB_ListView_ClickSelect ) 
                  flags & ~ #PB_ListView_ClickSelect
                  flags | #__flag_RowClickSelect
               EndIf
               If constants::BinaryFlag( Flag, #PB_ListView_MultiSelect ) 
                  flags & ~ #PB_ListView_MultiSelect
                  flags | #__flag_RowMultiSelect
               EndIf
               ;  
            Case #__type_listicon
               If constants::BinaryFlag( Flag, #PB_ListIcon_AlwaysShowSelection ) 
                  flags & ~ #PB_ListIcon_AlwaysShowSelection
               EndIf
               If constants::BinaryFlag( Flag, #PB_ListIcon_CheckBoxes )
                  flags & ~ #PB_ListIcon_CheckBoxes
                  flags | #__tree_checkboxes
               EndIf
               If constants::BinaryFlag( Flag, #PB_ListIcon_ThreeState )
                  flags & ~ #PB_ListIcon_ThreeState
                  flags | #__tree_threestate
               EndIf
               
         EndSelect
         
         ProcedureReturn flags
      EndProcedure
      
      ;
      Procedure.i TypeFromClass( class.s )
         Protected result.i
         
         Select Trim( LCase( class.s ))
            Case "popupmenu" : result = #__type_PopupBar
               ;case "property"       : result = #__type_Properties
            Case "window" : result = #__type_window
               
            Case "button" : result = #__type_Button
            Case "buttonimage" : result = #__type_ButtonImage
            Case "calendar" : result = #__type_Calendar
               ;Case "canvas" : result = #__type_Canvas
            Case "checkbox" : result = #__type_CheckBox
            Case "combobox" : result = #__type_ComboBox
            Case "container" : result = #__type_Container
            Case "date" : result = #__type_Date
            Case "editor" : result = #__type_Editor
            Case "explorercombo" : result = #__type_ExplorerCombo
            Case "explorerlist" : result = #__type_ExplorerList
            Case "explorertree" : result = #__type_ExplorerTree
            Case "frame" : result = #__type_Frame
            Case "hyperlink" : result = #__type_HyperLink
            Case "image" : result = #__type_Image
            Case "ipaddress" : result = #__type_IPAddress
            Case "listicon" : result = #__type_ListIcon
            Case "listview" : result = #__type_ListView
            Case "mdi" : result = #__type_MDI
               ;Case "opengl" : result = #__type_OpenGL
            Case "option" : result = #__type_Option
            Case "panel" : result = #__type_Panel
            Case "progress" : result = #__type_Progress
            Case "scintilla" : result = #__type_Scintilla
            Case "scrollarea" : result = #__type_ScrollArea
            Case "scroll" : result = #__type_Scroll
               ;Case "shortcut" : result = #__type_Shortcut
            Case "spin" : result = #__type_Spin
            Case "splitter" : result = #__type_Splitter
            Case "string" : result = #__type_String
            Case "text" : result = #__type_Text
            Case "track" : result = #__type_Track
            Case "tree" : result = #__type_Tree
            Case "unknown" : result = #__type_Unknown
            Case "web" : result = #__type_Web
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.s ClassFromType( Type.w )
         Protected result.s
         
         Select Type
            Case #__type_statusbar : result.s = "status"
            Case #__type_PopupBar : result.s = "popupmenu"
            Case #__type_ToolBar : result.s = "tool"
            Case #__type_TabBar : result.s = "tab"
            Case #__type_MenuBar : result.s = "menu"
               
            Case #__type_window : result.s = "window"
            Case #__type_Unknown : result.s = "create"
            Case #__type_Button : result.s = "button"
            Case #__type_String : result.s = "string"
            Case #__type_Text : result.s = "text"
            Case #__type_CheckBox : result.s = "checkbox"
            Case #__type_Option : result.s = "option"
            Case #__type_ListView : result.s = "listview"
            Case #__type_Frame : result.s = "frame"
            Case #__type_ComboBox : result.s = "combobox"
            Case #__type_Image : result.s = "image"
            Case #__type_HyperLink : result.s = "hyperlink"
            Case #__type_Container : result.s = "container"
            Case #__type_ListIcon : result.s = "listicon"
            Case #__type_IPAddress : result.s = "ipaddress"
            Case #__type_Progress : result.s = "progress"
            Case #__type_Scroll : result.s = "scroll"
            Case #__type_ScrollArea : result.s = "scrollarea"
            Case #__type_Track : result.s = "track"
            Case #__type_Web : result.s = "web"
            Case #__type_ButtonImage : result.s = "buttonimage"
            Case #__type_Calendar : result.s = "calendar"
            Case #__type_Date : result.s = "date"
            Case #__type_Editor : result.s = "editor"
            Case #__type_ExplorerList : result.s = "explorerlist"
            Case #__type_ExplorerTree : result.s = "explorertree"
            Case #__type_ExplorerCombo : result.s = "explorercombo"
            Case #__type_Spin : result.s = "spin"
            Case #__type_Tree : result.s = "tree"
            Case #__type_Panel : result.s = "panel"
            Case #__type_Splitter : result.s = "splitter"
            Case #__type_MDI : result.s = "mdi"
            Case #__type_Scintilla : result.s = "scintilla"
               ;Case #__type_Shortcut : result.s = "shortcut"
               ;Case #__type_Canvas : result.s = "canvas"
               
               ;     case #__type_imagebutton    : result.s = "imagebutton"
         EndSelect
         
         ProcedureReturn result.s
      EndProcedure
      
      ;
      Procedure$ ClassFromEvent( event.i )
         Protected result$
         
         Select event
            Case #__event_cursor          : result$ = "Cursor"
            Case #__event_free            : result$ = "Free"
            Case #__event_drop            : result$ = "Drop"
            Case #__event_create          : result$ = "Create"
            Case #__event_Draw            : result$ = "Draw"
               ;Case #__event_SizeItem    : result$ = "SizeItem"
               
            Case #__event_repaint         : result$ = "Repaint"
            Case #__event_resizeend       : result$ = "ResizeEnd"
            Case #__event_scrollchange    : result$ = "ScrollChange"
               
            Case #__event_close           : result$ = "CloseWindow"
            Case #__event_maximize        : result$ = "MaximizeWindow"
            Case #__event_minimize        : result$ = "MinimizeWindow"
            Case #__event_restore         : result$ = "RestoreWindow"
               
            Case #__event_MouseEnter      : result$ = "MouseEnter"       ; The mouse cursor entered the gadget
            Case #__event_MouseLeave      : result$ = "MouseLeave"       ; The mouse cursor left the gadget
            Case #__event_MouseMove       : result$ = "MouseMove"        ; The mouse cursor moved
            Case #__event_MouseWheel      : result$ = "MouseWheel"       ; The mouse wheel was moved
            Case #__event_LeftDown        : result$ = "LeftButtonDown"   ; The left mouse button was pressed
            Case #__event_LeftUp          : result$ = "LeftButtonUp"     ; The left mouse button was released
            Case #__event_LeftClick       : result$ = "LeftClick"        ; A click With the left mouse button
            Case #__event_Left2Click      : result$ = "Left2Click"       ; A double-click With the left mouse button
            Case #__event_RightDown       : result$ = "RightButtonDown"  ; The right mouse button was pressed
            Case #__event_RightUp         : result$ = "RightButtonUp"    ; The right mouse button was released
            Case #__event_RightClick      : result$ = "RightClick"       ; A click With the right mouse button
            Case #__event_Right2Click     : result$ = "Right2Click"      ; A double-click With the right mouse button
                                                                         ;Case #__event_MiddleDown : result$ = "MiddleButtonDown" ; The middle mouse button was pressed
                                                                         ;Case #__event_MiddleUp : result$ = "MiddleButtonUp"     ; The middle mouse button was released
            Case #__event_Focus           : result$ = "Focus"            ; The gadget gained keyboard focus
            Case #__event_LostFocus       : result$ = "LostFocus"        ; The gadget lost keyboard focus
            Case #__event_KeyDown         : result$ = "KeyDown"          ; A key was pressed
            Case #__event_KeyUp           : result$ = "KeyUp"            ; A key was released
            Case #__event_Input           : result$ = "Input"            ; Text input was generated
            Case #__event_Resize          : result$ = "Resize"           ; The gadget has been resized
            Case #__event_StatusChange    : result$ = "StatusChange"
               ;Case #__event_TitleChange : result$ = "TitleChange"
            Case #__event_Change          : result$ = "Change"
            Case #__event_DragStart       : result$ = "DragStart"
            Case #__event_Return          : result$ = "ReturnKey"
               ;Case #__event_CloseItem : result$ = "CloseItem"
               
            Case #__event_Down            : result$ = "Down"
            Case #__event_Up              : result$ = "Up"
               
            Case #__event_MouseWheelX     : result$ = "MouseWheelX"
            Case #__event_MouseWheelY     : result$ = "MouseWheelY"
         EndSelect
         
         ProcedureReturn result$
      EndProcedure
      
      Procedure.s ClassFromPBEvent( event.i )
         Protected result.s
         
         Select event
            Case #PB_EventType_MouseEnter       : result.s = "MouseEnter"           ; The mouse cursor entered the gadget
            Case #PB_EventType_MouseLeave       : result.s = "MouseLeave"           ; The mouse cursor left the gadget
            Case #PB_EventType_MouseMove        : result.s = "MouseMove"            ; The mouse cursor moved
            Case #PB_EventType_MouseWheel       : result.s = "MouseWheel"           ; The mouse wheel was moved
               
            Case #PB_EventType_LeftButtonDown   : result.s = "LeftButtonDown"   ; The left mouse button was pressed
            Case #PB_EventType_LeftButtonUp     : result.s = "LeftButtonUp"     ; The left mouse button was released
            Case #PB_EventType_LeftClick        : result.s = "LeftClick"        ; A click With the left mouse button
            Case #PB_EventType_LeftDoubleClick  : result.s = "LeftDoubleClick"  ; A double-click With the left mouse button
               
            Case #PB_EventType_RightButtonDown  : result.s = "RightButtonDown" ; The right mouse button was pressed
            Case #PB_EventType_RightButtonUp    : result.s = "RightButtonUp"   ; The right mouse button was released
            Case #PB_EventType_RightClick       : result.s = "RightClick"      ; A click With the right mouse button
            Case #PB_EventType_RightDoubleClick : result.s = "RightDoubleClick"; A double-click With the right mouse button
               
            Case #PB_EventType_MiddleButtonDown : result.s = "MiddleButtonDown" ; The middle mouse button was pressed
            Case #PB_EventType_MiddleButtonUp   : result.s = "MiddleButtonUp"   ; The middle mouse button was released
            Case #PB_EventType_Focus            : result.s = "Focus"            ; The gadget gained keyboard focus
            Case #PB_EventType_LostFocus        : result.s = "LostFocus"        ; The gadget lost keyboard focus
            Case #PB_EventType_KeyDown          : result.s = "KeyDown"          ; A key was pressed
            Case #PB_EventType_KeyUp            : result.s = "KeyUp"            ; A key was released
            Case #PB_EventType_Input            : result.s = "Input"            ; Text input was generated
            Case #PB_EventType_Resize           : result.s = "Resize"           ; The gadget has been resized
            Case #PB_EventType_StatusChange     : result.s = "StatusChange"
            Case #PB_EventType_Change           : result.s = "Change"
            Case #PB_EventType_DragStart        : result.s = "DragStart"
            Case #PB_EventType_TitleChange      : result.s = "TitleChange"
            Case #PB_EventType_CloseItem        : result.s = "CloseItem"
            Case #PB_EventType_SizeItem         : result.s = "SizeItem"
            Case #PB_EventType_Down             : result.s = "Down"
            Case #PB_EventType_Up               : result.s = "Up"
               ;                
               ;             Case #pb_eventtype_cursor : result.s = "Cursor"
               ;             Case #pb_eventtype_free : result.s = "Free"
               ;             Case #pb_eventtype_drop : result.s = "Drop"
               ;             Case #pb_eventtype_create : result.s = "Create"
               ;             Case #pb_eventtype_Draw : result.s = "Draw"
               ;                
               ;             Case #pb_eventtype_repaint : result.s = "Repaint"
               ;             Case #pb_eventtype_resizeend : result.s = "ResizeEnd"
               ;             Case #pb_eventtype_scrollchange : result.s = "ScrollChange"
               ;                
               ;             Case #pb_eventtype_close : result.s = "CloseWindow"
               ;             Case #pb_eventtype_maximize : result.s = "MaximizeWindow"
               ;             Case #pb_eventtype_minimize : result.s = "MinimizeWindow"
               ;             Case #pb_eventtype_restore : result.s = "RestoreWindow"
               ;             Case #pb_eventtype_ReturnKey : result.s = "returnKey"
               ;             Case #pb_eventtype_mousewheelX : result.s = "MouseWheelX"
               ;             Case #pb_eventtype_mousewheelY : result.s = "MouseWheelY"
         EndSelect
         
         ProcedureReturn result.s
      EndProcedure
      
      
      ;-
      ;-  CREATEs
      ;-
      Procedure.i Create( *parent._s_WIDGET, class.s, Type.w, X.l, Y.l, Width.l, Height.l, Text.s = #Null$, flag.q = #Null, *param_1 = #Null, *param_2 = #Null, *param_3 = #Null, size.l = 0, round.l = 0, ScrollStep.f = 1.0 )
         Protected *root._s_root
         If *parent
            *root = *parent\root
         EndIf
         ;
         size = DPIScaled( size )
         
         ;\\ replace pb flag
         flag = FromPBFlag( Type, flag )
         
         ;
         Protected color, Image                 ;, *this.allocate( Widget )
         
         Protected *this._s_WIDGET
         If *root And 
            constants::BinaryFlag( Flag, #__flag_autosize ) And
            Not ListSize( widgets( ) )
            X              = 0
            Y              = 0
            Width          = *root\width
            Height         = *root\height
            *root\autosize = #True
            *this          = *root
         Else
            *this.allocate( widget )
         EndIf
         
         ;\\
         *this\create = #True
         *this\color  = _get_colors_( )
         *this\type   = Type
         *this\class  = class
         *this\round  = DPIScaled( round )
         *this\child  = constants::BinaryFlag( Flag, #__flag_child )
         
         ;\\
         *this\frame_x( )      = #PB_Ignore
         *this\frame_y( )      = #PB_Ignore
         *this\frame_width( )  = #PB_Ignore
         *this\frame_height( ) = #PB_Ignore
         
         If *this\type = #__type_Button 
            If constants::BinaryFlag( flag, #__flag_ButtonToggle )
               flag &~ #__flag_ButtonToggle
               If Not *this\togglebox
                  *this\togglebox.allocate( BOX )
               EndIf
            EndIf
            *this\deffocus = Bool( flag & #PB_Button_Default )
         EndIf
         If *this\type = #__type_CheckBox 
            *this\togglebox.allocate( BOX )
            *this\togglebox\round  = DPIScaled( 2 )
            *this\togglebox\width = DPIScaled( #__buttonsize ) 
            *this\togglebox\width  - Bool( Not *this\togglebox\width % 2)
            *this\togglebox\height = *this\togglebox\width
         EndIf
         If *this\type = #__type_Option
            *this\togglebox.allocate( BOX )
            *this\togglebox\round  = DPIScaled( #__buttonround )
            *this\togglebox\width  = DPIScaled( #__buttonsize ) 
            *this\togglebox\width  - Bool( Not *this\togglebox\width % 2)
            *this\togglebox\height = *this\togglebox\width
         EndIf
         
         If *this\togglebox And
            *this\togglebox\width
            *this\text\padding\x = *this\togglebox\width + DPIScaled(8)
         EndIf
         
         ;\\ Flags
         *this\flag = Flag
         If *this\type = #__type_Button Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_HyperLink
            *this\flag | #__flag_Center
            
         ElseIf *this\type = #__type_ComboBox Or
                *this\type = #__type_Spin Or
                *this\type = #__type_String Or
                *this\type = #__type_Option Or
                *this\type = #__type_CheckBox
            
            If constants::BinaryFlag( Flag, #__flag_TextCenter, #False )
               *this\flag | #__flag_Textcenter | #__flag_Textleft
            EndIf
            
            If constants::BinaryFlag( Flag, #__flag_TextRight )
               *this\flag & ~ #__flag_Textleft
               *this\flag | #__flag_Textright
            EndIf
            
         ElseIf *this\type = #__type_Text
            *this\flag | #__flag_Textwordwrap
         EndIf
         
         ;\\ Border & Frame size
         If *this\type = #__type_Container Or
            *this\type = #__type_ScrollArea Or
            *this\type = #__type_Panel Or
            *this\type = #__type_MDI Or
            *this\type = #__type_String Or
            *this\type = #__type_Editor Or
            *this\type = #__type_Text Or
            *this\type = #__type_Tree Or
            *this\type = #__type_ListView Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ExplorerList Or
            *this\type = #__type_Properties Or
            *this\type = #__type_ComboBox Or
            *this\type = #__type_Spin Or
            *this\type = #__type_Button Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_Frame
            
            ;
            If constants::BinaryFlag( *this\flag, #__flag_BorderDouble ) Or
               constants::BinaryFlag( *this\flag, #__flag_BorderRaised )
               *this\fs = 2
            ElseIf constants::BinaryFlag( *this\Flag, #__flag_BorderLess )
               *this\fs = 0
            Else
               *this\fs = 1
            EndIf
         Else
            If is_bar_( *this ) Or *this\type = #__type_TabBar
               If is_integral_( *this )
                  *this\fs = *parent\fs
               Else
                  *this\fs = 1
               EndIf
            EndIf
         EndIf
         *this\bs = *this\fs
         
         ;\\
         If *parent
            ;\\
            If constants::BinaryFlag( Flag, #__flag_autosize )
               If *parent\type <> #__type_Splitter
                  *this\autosize = 1
                  ; set transparent parent
                  *parent\color\back      = - 1
                  *parent\ColorAlphaState( ) = 0
               EndIf
            EndIf
            
            ;\\
            If *this\child
               *this\placingindex   =- 1
               *this\address = *parent\address
               ReParent( *this, *parent )
            Else
               *this\text\string = Text
               SetParent( *this, *parent, #PB_Default )
            EndIf
         EndIf
         
         ;\\ - Create Texts
         If *this\type = #__type_Text Or
            *this\type = #__type_Editor Or
            *this\type = #__type_String Or
            *this\type = #__type_Button Or
            *this\type = #__type_Option Or
            *this\type = #__type_CheckBox Or
            *this\type = #__type_HyperLink
            
            *this\row.allocate( ROW )
            *this\LineFocusedIndex( ) = - 1
            *this\LineEnteredIndex( ) = - 1
            
            
            ;\\ - Create String
            If *this\type = #__type_String
               *this\text\caret\x   = 3
               *this\text\padding\x = 3
            EndIf
            
            ;\\ - Create Text
            If *this\type = #__type_Text
               *this\color\fore  = - 1
               *this\color\back  = _get_colors_( )\fore
               *this\color\front = _get_colors_( )\front
               If *this\fs
                  *this\color\frame = _get_colors_( )\frame
               EndIf
               
               *this\text\padding\x = 2
            EndIf
            
            ;\\ - Create Editor
            If *this\type = #__type_Editor
               *this\mode\fullselection = constants::BinaryFlag( *this\flag, #__flag_RowFullSelect, #False ) * DPIScaledX(7)
               *this\mode\gridlines     = constants::BinaryFlag( *this\flag, #__flag_gridlines ) * DPIScaledX(10)
               
               *this\MarginLine( )\hide        = constants::BinaryFlag( *this\flag, #__flag_TextNumeric, #False )
               *this\MarginLine( )\color\front = $C8000000 ; *this\color\back[0]
               *this\MarginLine( )\color\back  = $C8F0F0F0 ; *this\color\back[0]
               
               *this\text\padding\x = 3
               *this\text\padding\y = 3
            EndIf
            
            ;\\ - Create Button
            If *this\type = #__type_Button
               *this\text\padding\x = 4
               *this\text\padding\y = 4
            EndIf
            
            If *this\type = #__type_Option
               ;\\
               If *this\BeforeWidget( )
                  If *this\BeforeWidget( )\type = #__type_Option
                     *this\__Option( ) = *this\BeforeWidget( )\__Option( )
                  Else
                     *this\__Option( ) = *this\BeforeWidget( )
                  EndIf
               Else
                  *this\__Option( ) = *parent
               EndIf
               
               *this\color\fore  = - 1
               *this\color\back  = _get_colors_( )\fore
               *this\color\front = _get_colors_( )\front
            EndIf
            
            If *this\type = #__type_CheckBox
               *this\mode\threestate = constants::BinaryFlag( Flag, #PB_CheckBox_ThreeState )
               
               *this\color\fore  = - 1
               *this\color\back  = _get_colors_( )\fore
               *this\color\front = _get_colors_( )\front
            EndIf
            
            If *this\type = #__type_HyperLink
               *this\mode\Lines = constants::BinaryFlag( Flag, #PB_HyperLink_Underline )
               
               *this\color\fore[#__s_0]  = - 1
               *this\color\back[#__s_0]  = _get_colors_( )\fore
               *this\color\front[#__s_0] = _get_colors_( )\front
               
               Color = *param_1
               If Color
                  If Not Alpha( Color )
                     Color = Color & $FFFFFF | 255 << 24
                  EndIf
                  *this\color\front[#__s_1] = Color
               EndIf
            EndIf
            
         EndIf
         
         ;\\ - Create Lists
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListView Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ExplorerList Or
            *this\type = #__type_Properties
            
            ;*this\fs[1] = 50
            ;*this\fs[2] = 50
            ;*this\fs[3] = 50
            ;*this\fs[4] = 50
            *this\color\fore    = 0
            *this\color\back[0] = $FFFFFFFF
            
            *this\row.allocate( ROW )
            ;
            *this\RowFocusedIndex( )  = - 1
            *this\LineFocusedIndex( ) = - 1
            
            If Type = #__type_Properties
               If *this\bar
                  *this\bar\page\pos = 60
               EndIf
            EndIf
            
            *this\ColorAlphaState( ) = 255
            *this\color\fore[#__s_0] = - 1
            *this\color\back[#__s_0] = $ffffffff ; _get_colors_( )\fore
            *this\color\front[#__s_0] = _get_colors_( )\front
            *this\color\frame[#__s_0] = _get_colors_( )\frame
            
            *this\WidgetChange( ) = 1
            *this\text\TextChange( ) = 1
            
            *this\image\padding\x = DPIScaled( 2 )
            *this\text\padding\x  = DPIScaled( 4 )
            
            If constants::BinaryFlag( Flag, #__tree_nolines )
               flag & ~ #__tree_nolines
            Else
               flag | #__tree_nolines
            EndIf
            
            If constants::BinaryFlag( Flag, #__tree_NoButtons ) 
               flag & ~ #__tree_NoButtons
            Else
               flag | #__tree_NoButtons
            EndIf
            
            If flag
               Flag( *this, flag, #True )
            EndIf
         EndIf
         
         ;\\ - Create Containers
         If *this\type = #__type_Container Or
            *this\type = #__type_ScrollArea Or
            *this\type = #__type_Panel Or
            *this\type = #__type_MDI Or
            *this\type = #__type_Frame
            
            If *this\type = #__type_Frame
               *this\container = - 1
            Else
               *this\container = 3
               *this\resize\send = #True
            EndIf
            *this\color\back = $FFF9F9F9
            
            ;\\
            If *this\type = #__type_Frame
               *this\color\back = $96D8D8D8
               
               If Text
                  *this\fs[2] = 8
               EndIf
               
               set_text_flag_( *this, Text, flag, 12, - *this\fs[2] - 1 )
            EndIf
            
            ;\\
            If *this\type = #__type_Panel
               CreateBar( #__type_TabBar, *this, #PB_ToolBar_Small ) 
               
               If constants::BinaryFlag( Flag, #__flag_nobuttons ) 
                  If constants::BinaryFlag( Flag, #__bar_vertical ) 
                     *this\fs[1] = 0
                  Else
                     *this\fs[2] = 0
                  EndIf
               EndIf
            EndIf
            
            ;\\ Open gadget list
            If *this\container > 0 
               If constants::BinaryFlag( *this\flag, #__flag_NoGadgets, #False )
                  OpenList( *this )
               EndIf
            EndIf
         EndIf
         
         ;\\ - Create ComboBox
         If *this\type = #__type_ComboBox
            *this\ComboButton( ).allocate( BUTTONS )
            *this\ComboButton( )\color           = _get_colors_( )
            *this\ComboButton( )\arrow\type      = #__arrow_type
            *this\ComboButton( )\arrow\size      = DPIScaled( #__arrow_size )
            *this\ComboButton( )\arrow\direction = 2
            
            ;\\
            If constants::BinaryFlag( *this\flag, #PB_ComboBox_Editable )
               *this\__String( ) = Create( *this, "ComboString", #__type_String,
                                                  0, 0, 0, 0, #Null$, #__flag_child | #__flag_borderless )
               
               *this\fs[3] = DPIScaled( #__buttonsize ) 
               *this\fs[3] + Bool( Not *this\fs[3] % 2)
            EndIf
            
            ;\\
            *this\__Popup( ) = Create( *this, "ComboListView", #__type_ListView,
                                             0, 0, 0, 0, #Null$, #__flag_child | #__flag_nobuttons | #__flag_nolines ) ;| #__flag_borderless
            
            *this\__Popup( )\fs = 2
            Hide( *this\__Popup( ), #True )
            
         EndIf
         
         ;\\ - Create Bars
         If is_bar_( *this ) Or 
            *this\type = #__type_TabBar Or
            *this\type = #__type_Scroll Or
            *this\type = #__type_Progress Or
            *this\type = #__type_Track Or
            *this\type = #__type_Splitter Or
            *this\type = #__type_Spin
            
            *this\bar.allocate( BAR )
            *this\bar\button.allocate( BUTTONS )
            *this\bar\button.allocate( BUTTONS, [1] )
            *this\bar\button.allocate( BUTTONS, [2] )
            
            If *this\type = #__type_Spin
               *this\bar\PageChange( ) = 1
            EndIf
            
            *this\scroll\increment  = ScrollStep
            Protected._s_BUTTONS *BB1, *BB2, *SB
            *SB  = *this\bar\button
            *BB1 = *this\bar\button[1]
            *BB2 = *this\bar\button[2]
            
            ; - Create Scroll
            If *this\type = #__type_Scroll
               *this\color\back  = $FFF9F9F9 ; - 1
               *this\color\front = $FFFFFFFF
               
               *this\bar\invert   = constants::BinaryFlag( Flag, #__bar_invert )
               *this\bar\vertical = Bool( constants::BinaryFlag( Flag, #__bar_vertical ) Or constants::BinaryFlag( Flag, #PB_ScrollBar_Vertical ))
               
               If is_integral_( *this )
                  If *this\bar\vertical
                     *this\class = class + "-v"
                  Else
                     *this\class = class + "-h"
                  EndIf
               EndIf
               
               *BB1\color = _get_colors_( )
               *BB2\color = _get_colors_( )
               *SB\color  = _get_colors_( )
               
               ;
               If Not constants::BinaryFlag( Flag, #__flag_nobuttons ) 
                  *BB1\size = - 1
                  *BB2\size = - 1
               EndIf
               *SB\size = size
               
               *BB1\round = *this\round
               *BB2\round = *this\round
               *SB\round  = *this\round
               
               *BB1\arrow\type = #__arrow_type 
               *BB2\arrow\type = *BB1\arrow\type 
               
               *BB1\arrow\size = DPIScaled( #__arrow_size )
               *BB2\arrow\size = DPIScaled( #__arrow_size )
               *SB\arrow\size  = DPIScaled( 3 )
            EndIf
            
            ; - Create Spin
            If *this\type = #__type_Spin
               *this\color\back   = - 1
               *this\ColorAlphaState( ) = 255
               *this\color\back   = $FFFFFFFF
               
               *BB1\color = _get_colors_( )
               *BB2\color = _get_colors_( )
               
               ;
               *this\bar\invert = constants::BinaryFlag( Flag, #__bar_invert )
               
               If *this\flag & #__spin_Plus
                  If constants::BinaryFlag( Flag, #__bar_vertical ) Or 
                     constants::BinaryFlag( Flag, #PB_Splitter_Vertical )
                     *this\bar\vertical = #True
                  EndIf
                  *this\flag = flag | #__flag_Textcenter
               Else
                  If Not Bool( constants::BinaryFlag( Flag, #__bar_vertical ) Or 
                               constants::BinaryFlag( Flag, #PB_Splitter_Vertical ))
                     *this\bar\vertical = #True
                  EndIf
                  
                  *BB1\arrow\size = DPIScaled( #__arrow_size )
                  *BB2\arrow\size = DPIScaled( #__arrow_size )
                  
                  *BB1\arrow\type = #__arrow_type
                  *BB2\arrow\type = *BB1\arrow\type
               EndIf
               
               ;\\
               *this\__String( ) = Create( *this, "SpinString",
                                                  #__type_String, 0, 0, 0, 0, #Null$,
                                                  #__flag_child | #__flag_Textnumeric | #__flag_borderless | *this\flag )
               
               
            EndIf
            
            ; - Create Track
            If *this\type = #__type_Track
               *this\color\back = - 1
               *BB1\color       = _get_colors_( )
               *BB2\color       = *BB1\color
               *SB\color        = *BB1\color
               
               *this\bar\vertical = Bool( constants::BinaryFlag( Flag, #__bar_vertical ) Or
                                          constants::BinaryFlag( Flag, #PB_TrackBar_Vertical ))
               
               If *this\bar\vertical
                  *this\bar\invert = Bool( Not constants::BinaryFlag( Flag, #__bar_invert ) )
               Else
                  *this\bar\invert = constants::BinaryFlag( Flag, #__bar_invert )
               EndIf
               
               ;             If constants::BinaryFlag( Flag, #PB_Trackbar_Ticks )
               ;               *this\flag | #PB_Trackbar_Ticks
               ;             EndIf
               
               *SB\arrow\size = DPIScaled( #__arrow_size )
               *SB\arrow\type = #__arrow_type
               
               *BB1\round = DPIScaled(2)
               *BB2\round = *BB2\round
               *SB\round  = *this\round
               
               If *this\round < DPIScaled(7)
                  *SB\size = DPIScaled(9)
               Else
                  *SB\size = DPIScaled( #__buttonsize ) 
                  *SB\size - Bool( Not *SB\size % 2)
               EndIf
               
               ; button draw color
               *SB\ColorState( ) = #__s_2
               
               If Not constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks )
                  If *this\bar\invert
                     *BB2\ColorState( ) = #__s_2
                  Else
                     *BB1\ColorState( ) = #__s_2
                  EndIf
               EndIf
            EndIf
            
            ; - Create Tab
            If is_bar_( *this ) Or *this\type = #__type_TabBar
               ;
               ;;*this\text\TextChange( ) = 1
               *this\color\back = - 1
               *BB1\color       = _get_colors_( )
               *BB2\color       = _get_colors_( )
               ;*SB\color = _get_colors_( )
               
               *this\bar\invert   = constants::BinaryFlag( Flag, #__bar_invert )
               *this\bar\vertical = constants::BinaryFlag( Flag, #__bar_vertical )
               
               If constants::BinaryFlag( Flag, #__bar_buttonsize, #False )
                  *SB\size  = size
                  *BB1\size = DPIScaled( #__buttonsize ) 
                  *BB1\size - Bool( Not *BB1\size % 2) 
                  *BB2\size = *BB1\size
               EndIf
               
               *BB1\round = DPIScaled( #__buttonround )
               *BB2\round = *BB1\round
               *SB\round  = *this\round
               
               *BB1\arrow\type = 2 ; #__arrow_type 
               *BB2\arrow\type = 2 ; #__arrow_type 
               
               *BB1\arrow\size = DPIScaled( #__arrow_size )
               *BB2\arrow\size = DPIScaled( #__arrow_size )
               ;*SB\arrow\size = DPIScaled( 3 )
            EndIf
            
            ; - Create Progress
            If *this\type = #__type_Progress
               *this\bar\vertical = Bool( constants::BinaryFlag( Flag, #__bar_vertical ) Or
                                          constants::BinaryFlag( Flag, #PB_ProgressBar_Vertical ))
               
               *this\bar\invert = constants::BinaryFlag( Flag, #__bar_invert )
               
               
               *this\color         = _get_colors_( )
               *this\text\TextChange( ) = #True
               *this\text\invert = *this\bar\invert
               *this\text\vertical = *this\bar\vertical
            EndIf
            
            ; - Create Splitter
            If *this\type = #__type_Splitter
               *this\container  = - 1
               *this\color\back = - 1
               
               *this\bar\invert   = constants::BinaryFlag( Flag, #__bar_invert )
               *this\bar\vertical = Bool( Not constants::BinaryFlag( Flag, #__bar_vertical ) And 
                                          Not constants::BinaryFlag( Flag, #PB_Splitter_Vertical ))
               
               If constants::BinaryFlag( Flag, #PB_Splitter_FirstFixed )
                  *this\bar\fixed = 1
               ElseIf constants::BinaryFlag( Flag, #PB_Splitter_SecondFixed )
                  *this\bar\fixed = 2
               EndIf
               
               ;\\
               *this\split_1( ) = *param_1
               *this\split_2( ) = *param_2
               
               *this\bar\button[1]\hide = Bool( IsGadget( *this\split_1( ) ) Or *this\split_1( ) > 0 )
               *this\bar\button[2]\hide = Bool( IsGadget( *this\split_2( ) ) Or *this\split_2( ) > 0 )
               
               *SB\size                 = DPIScaled( #__splittersize ) 
               *SB\size                 + Bool( Not *SB\size % 2)
               *SB\round                = DPIScaled( #__splitterround )
               
               ;\\
               ; If *this\type = #__type_Splitter
               If IsGadget( *this\split_1( ) )
                  Debug "bar_is_first_gadget_ " + IsGadget( *this\split_1( ) )
                  parent::set( *this\split_1( ), *this\root\canvas\GadgetID )
               ElseIf *this\split_1( ) > 0
                  SetParent( *this\split_1( ), *this )
               EndIf
               
               If IsGadget( *this\split_2( ) )
                  Debug "bar_is_second_gadget_ " + IsGadget( *this\split_2( ) )
                  parent::set( *this\split_2( ), *this\root\canvas\GadgetID )
               ElseIf *this\split_2( ) > 0
                  SetParent( *this\split_2( ), *this )
               EndIf
               ; EndIf
            EndIf
            
         EndIf
         
         If constants::BinaryFlag( *this\flag, #__flag_Transparent )
            *this\color\back =- 1
         EndIf
         
         ;\\
         Post( *this, #__event_create )
         
         ;\\ Set Attribute
         If is_bar_( *this ) Or 
            *this\type = #__type_TabBar Or
            *this\type = #__type_Scroll Or
            *this\type = #__type_Progress Or
            *this\type = #__type_Track Or
            *this\type = #__type_Spin
            
            If *this\type = #__type_Spin
               bar_SetAttribute( *this, #__bar_buttonsize, Size + 5 )
            EndIf
            
            If *param_1 ; > 0 ; в окнах работает так
               SetAttribute( *this, #__bar_minimum, *param_1 )
            EndIf
            If *param_2
               SetAttribute( *this, #__bar_maximum, *param_2 )
            EndIf
            If *param_3
               SetAttribute( *this, #__bar_pageLength, *param_3 )
            EndIf
         EndIf
         
         ;\\ cursor init
         If *this\type = #__type_Splitter
            If *this\bar\vertical
               *this\cursor[1] = cursor::#__cursor_SplitUpDown
               *this\cursor[2] = cursor::#__cursor_SplitUp
               *this\cursor[3] = cursor::#__cursor_SplitDown
            Else
               *this\cursor[1] = cursor::#__cursor_SplitLeftRight
               *this\cursor[2] = cursor::#__cursor_SplitLeft
               *this\cursor[3] = cursor::#__cursor_SplitRight
            EndIf
            
         ElseIf *this\type = #__type_HyperLink
            *this\cursor[1] = cursor::#__cursor_Hand
            *this\cursor[2] = cursor::#__cursor_IBeam
            
         ElseIf *this\type = #__type_Editor Or
                *this\type = #__type_String
            *this\cursor[1] = cursor::#__cursor_IBeam
         EndIf
         If *this\cursor[1]
            *this\cursor = *this\cursor[1]
         EndIf
         
         ;\\
         If *this\row
            ;  If *this\type = #__type_ListIcon
            AddColumn( *this, 0, Text, *param_1 )
            ; EndIf
         EndIf
         
         ;\\ Resize
         If is_integral_( *this )
            If *this\type = #__type_Scroll
               If *this\parent
                  If *this\bar\vertical
                     *this\parent\scroll\v = *this
                     If *this\parent\type <> #__type_string
                        Resize( *this, *this\parent\container_width( ) - Width, Y, Width, *this\parent\container_height( ) - Width + Bool(*this\Round) * (Width / 4) )
                     EndIf
                  Else
                     *this\parent\scroll\h = *this
                     If *this\parent\type <> #__type_string
                        Resize( *this, X, *this\parent\container_height( ) - Height, *this\parent\container_width( ) - Height + Bool(*this\Round) * (Height / 4), Height )
                     EndIf
                  EndIf
               EndIf
            EndIf
         Else
            If *this\root And 
               Width And Height And 
               Not *this\root\width And 
               Not *this\root\height
               *this\autosize = 1
               Debug " canvas gadget resize"
               ResizeGadget( *this\root\canvas\gadget, X, Y, Width, Height )
            Else
               Resize( *this, X, Y, Width, Height )
            EndIf
         EndIf
         
         ;\\ Scroll bars
         If constants::BinaryFlag( Flag, #__flag_NoScrollBars, #False )
            If *this\type = #__type_String
               
               bar_area_create( *this, 1, 0, 0, *this\inner_width( ), *this\inner_height( ), #__buttonsize, 0)
               
               *this\scroll\v\hide  = 1
               *this\scroll\h\hide  = 1
               *this\scroll\v\width = 0
               ;                *this\scroll\v\bar\button[0]\size = 1
               ;                *this\scroll\v\bar\button[1]\size = 1
               ;                *this\scroll\v\bar\button[2]\size = 1
               ;                *this\scroll\h\bar\button[0]\size = 1
               ;                *this\scroll\h\bar\button[1]\size = 1
               ;                *this\scroll\h\bar\button[2]\size = 1
               *this\scroll\h\height = 0
               
            ElseIf *this\type = #__type_Editor Or
                   *this\type = #__type_Tree Or
                   *this\type = #__type_ListView Or
                   *this\type = #__type_ListIcon Or
                   *this\type = #__type_ExplorerList Or
                   *this\type = #__type_Properties
               
               bar_area_create( *this, 1, 0, 0, *this\inner_width( ), *this\inner_height( ), #__buttonsize )
            ElseIf *this\type = #__type_MDI Or
                   *this\type = #__type_ScrollArea
               
               bar_area_create( *this, 1, DPIScaledX( *param_1 ), DPIScaledY( *param_2 ), *this\inner_width( ), *this\inner_height( ), #__buttonsize )
            ElseIf *this\type = #__type_Image
               bar_area_create( *this, 1, *this\image\width, *this\image\height, *this\inner_width( ), *this\inner_height( ), #__buttonsize )
            EndIf
         EndIf
         
         ;\\ Set image
         If *this\type = #__type_Image Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_Button
            
            Image = *param_1
            
            align_content( *this\image, *this\flag )
            add_image( *this, *this\Image, Image )
            add_image( *this, *this\image[#__image_released], Image )
         EndIf
         
         ;\\
         If *this\row 
            If *this\type = #__type_Text Or
               *this\type = #__type_Editor Or
               *this\type = #__type_String Or
               *this\type = #__type_Button Or
               *this\type = #__type_Option Or
               *this\type = #__type_CheckBox Or
               *this\type = #__type_HyperLink
               
               align_content( *this\text, *this\flag )
            EndIf
            
            set_text_flag_( *this, Text, *this\flag )
         EndIf
         
         widget( ) = *this
         ProcedureReturn *this
      EndProcedure
      
      Procedure.i Scroll( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, PageLength.l, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Scroll, X, Y, Width, Height, #Null$, flag, min, max, pagelength, #__buttonsize, round, 1 )
      EndProcedure
      
      Procedure.i Track( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = #__buttonround )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Track, X, Y, Width, Height, #Null$, flag, min, max, 0, 0, round, 1 )
      EndProcedure
      
      Procedure.i Progress( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Progress, X, Y, Width, Height, #Null$, flag, min, max, 0, 0, round, 1 )
      EndProcedure
      
      Procedure.i Splitter( X.l, Y.l, Width.l, Height.l, First.i, Second.i, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Splitter, X, Y, Width, Height, #Null$, flag, First, Second, 0, 0, 0, 1 )
      EndProcedure
      
      Procedure.i Spin( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = 0, Increment.f = 1.0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Spin, X, Y, Width, Height, #Null$, flag, min, max, 0, #__buttonsize, round, Increment )
      EndProcedure
      
      Procedure.i Tab( X.l, Y.l, Width.l, Height.l, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_TabBar, X, Y, Width, Height, #Null$, flag, 0, 0, 0, 40, round, 40 )
      EndProcedure
      
      Procedure.i Tree( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Tree, X, Y, Width, Height, "", Flag )
      EndProcedure
      
      Procedure.i ListView( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ListView, X, Y, Width, Height, "", Flag | #__tree_nobuttons | #__tree_nolines )
      EndProcedure
      
      Procedure.i ListIcon( X.l, Y.l, Width.l, Height.l, ColumnTitle.s, ColumnWidth.i, flag.q = 0 )
         ;  ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_tree, x, y, width, height, "", Flag ); #__type_ListIcon
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ListIcon, X, Y, Width, Height, ColumnTitle, Flag, ColumnWidth ); #__type_ListIcon
      EndProcedure
      
      Procedure.i ExplorerList( X.l, Y.l, Width.l, Height.l, Directory.s, flag.q = 0 )
         ;Protected *this._s_WIDGET = Create( Opened( ), #PB_Compiler_Procedure, #__type_ExplorerList, x, y, width, height, "", Flag | #__tree_nobuttons | #__tree_nolines )
         Protected *this._s_WIDGET = Create( Opened( ), #PB_Compiler_Procedure, #__type_ListIcon, X, Y, Width, Height, "", Flag | #__tree_nobuttons | #__tree_nolines )
         
         ;\\
         AddColumn(*this, 0, "Name", 200)
         AddColumn(*this, 0, "Size", 100)
         AddColumn(*this, 0, "Type", 100)
         AddColumn(*this, 0, "Modified", 100)
         
         ;\\
         If Directory.s = ""
            Directory.s = GetHomeDirectory() ; Lists all files and folder in the home directory
         EndIf
         Protected Size$, Type$, Modified$
         
         If ExamineDirectory(0, Directory.s, "*.*")  
            
            While NextDirectoryEntry(0)
               If DirectoryEntryType(0) = #PB_DirectoryEntry_Directory
                  Type$ = "[Directory] "
                  Size$ = "" ; A directory doesn't have a size
                  Modified$ = FormatDate("%mm/%dd/%yyyy", DirectoryEntryDate(0, #PB_Date_Modified))
                  AddItem(*this, -1, DirectoryEntryName(0) +#LF$+ Size$ +#LF$+ Type$ +#LF$+ Modified$)
               EndIf
            Wend
            FinishDirectory(0)
         EndIf
         
         If ExamineDirectory(0, Directory.s, "*.*")  
            While NextDirectoryEntry(0)
               If DirectoryEntryType(0) = #PB_DirectoryEntry_File
                  Type$ = "[File] "
                  Size$ = " (Size: " + DirectoryEntrySize(0) + ")"
                  Modified$ = FormatDate("%mm/%dd/%yyyy", DirectoryEntryDate(0, #PB_Date_Modified))
                  AddItem(*this, -1, DirectoryEntryName(0) +#LF$+ Size$ +#LF$+ Type$ +#LF$+ Modified$)
               EndIf
            Wend
            
            FinishDirectory(0)
         EndIf
         ProcedureReturn *this
      EndProcedure
      
      Procedure.i Properties( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Properties, X, Y, Width, Height, "", Flag )
      EndProcedure
      
      Procedure.i Editor( X.l, Y.l, Width.l, Height.l, flag.q = 0, round.i = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Editor, X, Y, Width, Height, "", flag, 0, 0, 0, 0, round, 0 )
      EndProcedure
      
      Procedure.i String( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_String, X, Y, Width, Height, Text, flag, 0, 0, 0, 0, round, 0 )
      EndProcedure
      
      Procedure.i Text( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Text, X, Y, Width, Height, Text, flag, 0, 0, 0, 0, round, 0 )
      EndProcedure
      
      Procedure.i Button( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, Image.i = -1, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Button, X, Y, Width, Height, Text, flag, Image, 0, 0, 0, round )
      EndProcedure
      
      Procedure.i HyperLink( X.l, Y.l, Width.l, Height.l, Text.s, Color.i, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_HyperLink, X, Y, Width, Height, Text, flag, Color, 0, 0, 0, 0, 0 )
      EndProcedure
      
      Procedure.i ButtonImage( X.l, Y.l, Width.l, Height.l, Image.i = -1 , flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ButtonImage, X, Y, Width, Height, "", flag, Image, 0, 0, 0, round )
      EndProcedure
      
      Procedure.i Option( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Option, X, Y, Width, Height, Text, flag, 0, 0, 0, 0, 0, 0 )
      EndProcedure
      
      Procedure.i CheckBox( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_CheckBox, X, Y, Width, Height, Text, flag, 0, 0, 0, 0, 0, 0 )
      EndProcedure
      
      Procedure.i ComboBox( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ComboBox, X, Y, Width, Height, "", flag, 0, 0, 0, 0, 0, 0 )
      EndProcedure
      
      Procedure.i MDI( X.l, Y.l, Width.l, Height.l, flag.q = 0 ) ; , Menu.i, SubMenu.l, FirstMenuItem.l )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_MDI, X, Y, Width, Height, #Null$, flag | #__flag_nogadgets, 0, 0, 0, #__buttonsize, 0, 1 )
      EndProcedure
      
      Procedure.i Panel( X.l, Y.l, Width.l, Height.l, flag.q = #__flag_BorderFlat )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Panel, X, Y, Width, Height, #Null$, flag | #__flag_noscrollbars, 0, 0, 0, #__buttonsize, 0, 0 )
      EndProcedure
      
      Procedure.i Container( X.l, Y.l, Width.l, Height.l, flag.q = #__flag_BorderFlat )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Container, X, Y, Width, Height, #Null$, flag | #__flag_noscrollbars, 0, 0, 0, #__buttonsize, 0, 0 )
      EndProcedure
      
      Procedure.i ScrollArea( X.l, Y.l, Width.l, Height.l, ScrollAreaWidth.l, ScrollAreaHeight.l, ScrollStep.l = 1, flag.q = #__flag_BorderFlat )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ScrollArea, X, Y, Width, Height, #Null$, flag, ScrollAreaWidth, ScrollAreaHeight, 0, #__buttonsize, 0, ScrollStep )
      EndProcedure
      
      Procedure.i Frame( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = #__flag_nogadgets )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Frame, X, Y, Width, Height, Text, flag, 0, 0, 0, 0, 7 )
      EndProcedure
      
      Procedure.i Image( X.l, Y.l, Width.l, Height.l, Image.i, flag.q = 0 ) ; , Menu.i, SubMenu.l, FirstMenuItem.l )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Image, X, Y, Width, Height, #Null$, flag, Image, 0, 0, #__buttonsize, 0, 1 )
      EndProcedure
      
      ;-
      ;-  DRAWINGs
      ;-
      Procedure.b Draw_Arrow( direction.a, X.l, Y.l, size.a, mode.b = 1, framesize.a = 0, Color = $ff000000 )
         Protected i.w, j.w, thickness.a
         X + size/2
         Y + size/2
         
         If mode
            If mode = - 1
               
               thickness.a = 2 + size/4
               
               ;       x - thickness + 1
               ;       y - thickness + 1 
               
               If framesize
                  X + framesize*2
                  Y + framesize*2
                  
                  Color = $ffffffff
                  For i = - (size+framesize)/2 To (size+framesize)/2
                     If direction = 0 ; left
                        If i > 0
                           Box( X + i + framesize, Y + i * 1, - (thickness+framesize*2), 1, Color )
                        Else
                           Box( X - i + framesize, Y + i * 1, - (thickness+framesize*2), 1, Color )
                        EndIf
                     EndIf
                     If direction = 2 ; right
                        If i < 0
                           Box( X + i - framesize, Y + i * 1, (thickness+framesize*2), 1, Color )
                        Else
                           Box( X - i - framesize, Y + i * 1, (thickness+framesize*2), 1, Color )
                        EndIf
                     EndIf
                     If direction = 1 ; up
                        If i > 0
                           Box( X + i * 1, Y + i + framesize, 1, - (thickness+framesize*2), Color )
                        Else
                           Box( X + i * 1, Y - i + framesize, 1, - (thickness+framesize*2), Color )
                        EndIf
                     EndIf
                     If direction = 3 ; down
                        If i < 0
                           Box( X + i * 1, Y + i - framesize, 1, (thickness+framesize*2), Color )
                        Else
                           Box( X + i * 1, Y - i - framesize, 1, (thickness+framesize*2), Color )
                        EndIf
                     EndIf
                  Next
                  Color = $ff000000
               EndIf
               
               For i = - size/2 To size/2
                  If direction = 0 ; left
                     If i > 0
                        Box( X + i, Y + i * 1, - (thickness), 1, Color )
                     Else
                        Box( X - i, Y + i * 1, - (thickness), 1, Color )
                     EndIf
                  EndIf
                  If direction = 2 ; right
                     If i < 0
                        Box( X + i, Y + i * 1, (thickness), 1, Color )
                     Else
                        Box( X - i, Y + i * 1, (thickness), 1, Color )
                     EndIf
                  EndIf
                  If direction = 1 ; up
                     If i > 0
                        Box( X + i * 1, Y + i, 1, - (thickness), Color )
                     Else
                        Box( X + i * 1, Y - i, 1, - (thickness), Color )
                     EndIf
                  EndIf
                  If direction = 3 ; down
                     If i < 0
                        Box( X + i * 1, Y + i, 1, (thickness), Color )
                     Else
                        Box( X + i * 1, Y - i, 1, (thickness), Color )
                     EndIf
                  EndIf
               Next
               
            Else
               
               If framesize
                  Color = $ffffffff
                  For i = - framesize/2 To size 
                     For j = i - framesize To size - i + framesize
                        If direction = 0 ; left
                           Box( X - i * mode + framesize, Y + j-size/2, mode, 1, Color )
                        EndIf
                        If direction = 1 ; up
                           Box( X + j-size/2, Y - i * mode + framesize, 1, mode, Color )
                        EndIf
                        If direction = 2 ; right
                           Box( X + i * mode - framesize, Y + j-size/2, mode, 1, Color )
                        EndIf
                        If direction = 3 ; down
                           Box( X + j-size/2, Y + i * mode - framesize, 1, mode, Color )
                        EndIf
                     Next 
                  Next
                  Color = $ff000000
               EndIf
               
               For i = 0 To size
                  For j = i To size - i 
                     If direction = 0 ; left
                        Box( X - i * mode + framesize, Y + j-size/2, mode, 1, Color )
                     EndIf
                     If direction = 1 ; up
                        Box( X + j-size/2, Y - i * mode + framesize, 1, mode, Color )
                     EndIf
                     If direction = 2 ; right
                        Box( X + i * mode - framesize, Y + j-size/2, mode, 1, Color )
                     EndIf
                     If direction = 3 ; down
                        Box( X + j-size/2, Y + i * mode - framesize, 1, mode, Color )
                     EndIf
                  Next 
               Next
               
            EndIf
         EndIf
      EndProcedure
      
      Procedure   Draw_TreeRows( *this._s_WIDGET, List *rows._s_ROWS( ) )
         Protected state.b, X.l, Y.l, xs.l, ys.l, _box_x_.l, _box_y_.l, minus.l = 7
         Protected bs = Bool( *this\fs )
         Protected _scroll_x_ = *this\scroll\h\bar\page\pos
         Protected _scroll_y_ = *this\scroll\v\bar\page\pos
         
         ;
         clip_output_( *this, [#__c_draw2] )
         PushListPosition( *rows( ))
         ForEach *rows( )
            If *rows( )\columnindex <> ListIndex( *this\columns( ))
               Continue
            EndIf
            If Not *rows( )\visible
               Continue
            EndIf
            
            ;\\ init real drawing font
            draw_font( *rows( ) )
            
            ;\\
            state = *rows( )\ColorState( )
            X     = row_x_( *this, *rows( ) )
            Y     = row_y_( *this, *rows( ) )
            Xs    = X - _scroll_x_
            Ys    = Y - _scroll_y_
            
            ;\\ Draw selector back
            If *rows( )\color\back[state]
               If ListSize( *this\columns( )) = 1
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  If constants::BinaryFlag( *this\flag, #__flag_RowFullSelect )
                     draw_roundbox_( *this\inner_x( ), ys, *this\scroll_width( ), *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\back[state] )
                  Else
                     draw_roundbox_( xs, ys, *rows( )\width, *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\back[state] )
                  EndIf
               Else
                  If *rows( ) = *this\RowEntered( )
                     draw_roundbox_( *this\inner_x( ), ys, *this\scroll_width( ), *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\back[state] )
                  EndIf
               EndIf
            EndIf
            
            ;\\ Draw items image
            If *rows( )\image\id
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *rows( )\image\id, xs + *rows( )\image\x, ys + *rows( )\image\y, *rows( )\AlphaState( ) )
            EndIf
            
            ;\\ Draw items text
            If *rows( )\text\string.s
               draw_mode_( #PB_2DDrawing_Transparent )
               DrawRotatedText( xs + *rows( )\text\x, ys + *rows( )\text\y, *rows( )\text\string.s, *this\text\rotate, *rows( )\color\front[state] )
            EndIf
            
            ;\\ Draw selector frame
            If *rows( )\color\frame[state]
               draw_mode_( #PB_2DDrawing_Outlined )
               If constants::BinaryFlag( *this\flag, #__flag_RowFullSelect )
                  draw_roundbox_( *this\inner_x( ), ys, *this\scroll_width( ), *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\frame[state] )
               Else
                  draw_roundbox_( X, ys, *rows( )\width, *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\frame[state] )
               EndIf
            EndIf
            
            ;\\ Horizontal line
            If *this\mode\GridLines And
               ;*rows( )\color\line And
               *rows( )\color\line <> *rows( )\color\back
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_box_( X, ys + *rows( )\height, *rows( )\width, *this\mode\GridLines, $fff0f0f0 )
            EndIf
         Next
         
         
         ;           draw_mode_alpha_( #PB_2DDrawing_Default ); | #PB_2DDrawing_AlphaBlend )
         ;          draw_box_( *this\inner_x( ), *this\inner_y( ), *this\row\sublevelsize, *this\inner_height( ), *this\__rows( )\RowParent( )\color\back )
         
         If ListIndex( *this\columns( )) = 0
            ;         SelectElement( *this\columns( ), 0 )
            ;         *rows( ) = *this\__rows( )
            Protected *buttonBox._s_buttons
            
            ; Draw plots
            If *this\mode\Lines
               draw_mode_alpha_( #PB_2DDrawing_Default )
               ; draw_mode_( #PB_2DDrawing_CustomFilter ) : CustomFilterCallback( @Draw_Plot( ))
               
               ForEach *rows( )
                  ; Debug " 9999 "+*rows( )\columnindex+" "+ListIndex( *this\columns( ))+" "+*rows( )\text\string
                  If *rows( )\columnindex <> ListIndex( *this\columns( ))
                     Continue
                  EndIf
                  
                  If *rows( )\visible And Not *rows( )\hide
                     If *rows( )\_last
                        *buttonBox = *rows( )\_last\buttonbox
                     EndIf
                     
                     Xs         = row_x_( *this, *rows( ) ) - _scroll_x_
                     Ys         = row_y_( *this, *rows( ) ) - _scroll_y_
                     
                     ; for the tree vertical line
                     If *rows( )\_last And Not *rows( )\_last\hide And *rows( )\_last\sublevel
                        Line((xs + *buttonBox\x + *buttonBox\width / 2), (ys + *rows( )\height), 1, ((*rows( )\_last\y - *rows( )\y) - *rows( )\_last\height / 2), *rows( )\color\line )
                     EndIf
                     If *rows( )\RowParent( ) And Not *rows( )\RowParent( )\visible And *rows( )\RowParent( )\_last = *rows( ) And *rows( )\sublevel
                        Line((xs + *rows( )\buttonbox\x + *rows( )\buttonbox\width / 2), (*rows( )\RowParent( )\y + *rows( )\RowParent( )\height) - _scroll_y_, 1, ((*rows( )\y - *rows( )\RowParent( )\y) - *rows( )\height / 2), *rows( )\RowParent( )\color\line )
                     EndIf
                     
                     ; for the tree horizontal line
                     If Not (*this\mode\Buttons And *rows( )\childrens)
                        Line((xs + *rows( )\buttonbox\x + *rows( )\buttonbox\width / 2), (ys + *rows( )\height / 2), DPIScaledX(7), 1, *rows( )\color\line )
                     Else
                        If *this\row\sublevelsize = DPIScaled(6)
                           If Bool( Not *rows( )\ItemButtonState( ))
                              LineXY((xs + *buttonBox\x - 1), (ys + 10), (xs + *buttonBox\x + *buttonBox\width / 2 - 1), ys + *rows( )\height - 1, *rows( )\color\line )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               Next
               
               ; for the tree item first vertical line
               If *this\RowFirst( ) And *this\RowLast( )
                  Line((*this\inner_x( ) + *this\RowFirst( )\buttonbox\x + *this\RowFirst( )\buttonbox\width / 2) - _scroll_x_ + DPIScaled(4), (row_y_( *this, *this\RowFirst( ) ) + *this\RowFirst( )\height / 2) - _scroll_y_, 1, (*this\RowLast( )\y - *this\RowFirst( )\y), *this\RowFirst( )\color\line )
               EndIf
            EndIf
            
            ;\\ Draw buttons
            If *this\mode\Buttons Or
               *this\mode\check
               
               ;\\ Draw boxs ( check&option )
               ForEach *rows( )
                  If *rows( )\columnindex <> ListIndex( *this\columns( ))
                     Continue
                  EndIf
                  If *rows( )\visible And *this\mode\check
                     X = row_x_( *this, *rows( ) ) - _scroll_x_
                     Y = row_y_( *this, *rows( ) ) - _scroll_y_
                     
                     If *rows( )\RowParent( ) And *this\mode\optionboxes
                        ; option box
                        draw_button_( 1, X + *rows( )\checkbox\x, Y + *rows( )\checkbox\y, *rows( )\checkbox\width, *rows( )\checkbox\height, *rows( )\ItemBoxState( ) , 4 )
                     Else
                        ; check box
                        draw_button_( 3, X + *rows( )\checkbox\x, Y + *rows( )\checkbox\y, *rows( )\checkbox\width, *rows( )\checkbox\height, *rows( )\ItemBoxState( ) , 2 )
                     EndIf
                  EndIf
               Next
               
               ;\\ Draw buttons ( expanded&collapsed )
               ForEach *rows( )
                  If *rows( )\columnindex <> ListIndex( *this\columns( ))
                     Continue
                  EndIf
                  If *rows( )\visible And Not *rows( )\hide
                     If *this\mode\Buttons And *rows( )\childrens 
                        
                        ;If Not ( *this\mode\optionboxes )
                        
                        X = row_x_( *this, *rows( ) ) + *rows( )\buttonbox\x - _scroll_x_
                        Y = row_y_( *this, *rows( ) ) + *rows( )\buttonbox\y - _scroll_y_
                        
                        If Bool(DPIResolution( ) > 1)
                           If *rows( )\ColorState( ) = 1
                              Draw_Arrow(3 - Bool(*rows( )\ItemButtonState( )), X-1-Bool(*rows( )\ItemButtonState( )), Y-1-Bool(*rows( )\ItemButtonState( )=0), DPIScaled(10), 1 )
                           ElseIf *rows( )\ColorState( ) = 2
                              Draw_Arrow(3 - Bool(*rows( )\ItemButtonState( )), X-Bool(*rows( )\ItemButtonState( )=0)*DPIScaled(1), Y-DPIScaled(1), DPIScaled(11), 1, 2 )
                              ;   Draw_Arrow(3 - Bool(*rows( )\ItemButtonState( )), x-1-Bool(*rows( )\ItemButtonState( )), y-1-Bool(*rows( )\ItemButtonState( )=0), DPIScaled(10), 1, 0, $ffffffff )
                           Else
                              Draw_Arrow(3 - Bool(*rows( )\ItemButtonState( )), X+DPIScaled(1), Y+DPIScaled(1), DPIScaled(6)+DPIScaled(Bool(DPIResolution( )>1)), 1)
                           EndIf
                        Else
                           If *rows( )\ColorState( ) = 1
                              Draw_Arrow(3 - Bool(*rows( )\ItemButtonState( )), X, Y-Bool(*rows( )\ItemButtonState( )=0), 8, 1 )
                           ElseIf *rows( )\ColorState( ) = 2
                              Draw_Arrow(3 - Bool(*rows( )\ItemButtonState( )), X+Bool(*rows( )\ItemButtonState( ))*2, Y+Bool(*rows( )\ItemButtonState( )=0), 8, 1, 2 )
                           Else
                              Draw_Arrow(3 - Bool(*rows( )\ItemButtonState( )), X+2, Y+2, 4, 1)
                           EndIf
                        EndIf
                        
                        ;EndIf
                     EndIf
                  EndIf
               Next
            EndIf
         EndIf
         ;
         PopListPosition( *rows( )) 
         clip_output_( *this, [#__c_draw] )
         
      EndProcedure
      
      Procedure   Draw_Tree( *this._s_WIDGET )
         Protected state.b, X.l, Y.l, scroll_x, scroll_y
         
         If Not *this\hide
            ;\\
            If *this\WidgetChange( ) Or
               *this\resize\ResizeChange( )
               ;
               Update_TreeRows( *this, *this\__rows( ), *this\WidgetChange( ) )
               
               bar_area_update( *this )
               
               ;\\ SetState( scroll-to-see )
               If *this\RowFocused( ) And *this\ScrollState( ) = - 1
                  
                  row_scroll_y_( *this, *this\RowFocused( ) )
                  
                  *this\scroll\v\WidgetChange( ) = 0
                  *this\ScrollState( )             = #True
               EndIf
               
               ; reset draw list
               ClearList( *this\RowVisibleList( ))
               *this\RowFirstVisible( ) = 0
               *this\RowLastVisible( )  = 0
               
               Update_TreeVisibleRows( *this, *this\__rows( ) )
               *this\WidgetChange( ) = 0
            EndIf
            
            ;\\ Draw background
            If *this\AlphaState( )
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back )
            EndIf
            
            ;\\ Draw background image
            If *this\image\id
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *this\image\id, *this\image\x, *this\image\y, *this\AlphaState( ) )
            EndIf
            
            ;\\
            Draw_TreeRows( *this, *this\RowVisibleList( ) )
            
            ;\\ draw frames
            If *this\bs
               draw_mode_( #PB_2DDrawing_Outlined )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame[*this\ColorState( )] )
               If *this\round : draw_roundbox_( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), *this\frame_height( ) + 2, *this\round, *this\round, *this\color\front[*this\ColorState( )] ) : EndIf  ; Сглаживание краев ) ))
            EndIf
            
         EndIf
         
      EndProcedure
      
      Procedure   Draw_EditorItems( *this._s_WIDGET, List e_rows._s_ROWS( ) )
         Protected Y, Text_x, Text_y, visible_y, visible_height
         
         
         If Not visible_y
            visible_y = 0;*this\inner_y( ) ; *this\draw_y( ) ;
         EndIf
         If Not visible_height
            If *this\draw_height( ) > *this\inner_height( )
               visible_height = *this\inner_height( ) ;
            Else
               visible_height = *this\draw_height( )
            EndIf
         EndIf
         
         ;
         clip_output_( *this, [#__c_draw2] )
         PushListPosition( e_rows( ))
         ForEach e_rows( )
            ; update visible lines 
            e_rows( )\visible = Bool( Not e_rows( )\hide And
                                      (( e_rows( )\y + *this\scroll_y( ) ) < visible_y + visible_height ) And
                                      ( e_rows( )\y + e_rows( )\height + *this\scroll_y( ) ) > visible_y )
            
            
            ; Draw selections
            If e_rows( )\visible
               If Not *this\RowFirstVisible( )
                  *this\RowFirstVisible( ) = e_rows( )
               EndIf
               *this\RowLastVisible( ) = e_rows( )
               
               
               ;\\
               If *this\focus >= 0
                  *this\ColorState( ) = *this\focus
               EndIf
               
               Y      = row_y_( *this, e_rows( ) ) + *this\scroll_y( )
               Text_x = row_x_( *this, e_rows( ) ) + *this\scroll_x( ) + e_rows( )\text\x
               Text_Y = Y + e_rows( )\text\y
               
               Protected sel_text_x1 = edit_string_x_( *this, [1] ) + *this\scroll_x( )
               Protected sel_text_x2 = edit_string_x_( *this, [2] ) + *this\scroll_x( )
               Protected sel_text_x3 = edit_string_x_( *this, [3] ) + *this\scroll_x( )
               
               Protected sel_x = *this\inner_x( ) + *this\text\x
               Protected sel_width = *this\inner_width( ) - *this\text\y * 2
               Protected text_sel_width = e_rows( )\text\edit[2]\width
               
               If *this\text\editable
                  ; Draw lines
                  ; Если для итема установили задный
                  ; фон отличный от заднего фона едитора
                  If e_rows( )\color\back
                     ;                     draw_mode_alpha_( #PB_2DDrawing_Default )
                     ;                     draw_roundbox_( sel_x,Y,sel_width ,e_rows( )\height, e_rows( )\round,e_rows( )\round, e_rows( )\color\back[0] )
                     
                     If *this\color\back And
                        *this\color\back <> e_rows( )\color\back
                        ; Draw margin back color
                        If *this\MarginLine( )\width > 0
                           ; то рисуем вертикальную линию на границе поля нумерации и начало итема
                           draw_mode_alpha_( #PB_2DDrawing_Default )
                           draw_box_( *this\MarginLine( )\x, e_rows( )\y, *this\MarginLine( )\width, e_rows( )\height, *this\MarginLine( )\color\back )
                           Line( *this\inner_x( ) + *this\MarginLine( )\width, e_rows( )\y, 1, e_rows( )\height, *this\color\back ) ; $FF000000 );
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
                  If *this\focus = 2
                     If e_rows( ) = *this\LinePressed( ) Or 
                        e_rows( ) = *this\LineFocused( )
                        
                        draw_mode_alpha_( #PB_2DDrawing_Default )
                        draw_roundbox_( Text_x, Y, e_rows( )\text\width, e_rows( )\height, e_rows( )\round, e_rows( )\round, e_rows( )\color\back[1] )
                     EndIf
                  EndIf
               EndIf
               
               ; Draw text string
               draw_mode_alpha_( #PB_2DDrawing_Default )
               If e_rows( )\color\front[2] = *this\color\front 
                  If e_rows( )\text\edit[2]\width
                     draw_box_( sel_text_x2, Y, text_sel_width, e_rows( )\height, e_rows( )\color\back[*this\ColorState( )] )
                  EndIf
               EndIf 
               
               If e_rows( )\text\string.s
                  ;                   CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                  ;                      ; GetDC_(*this\root\canvas\gadgetID)
                  ;                      SetBkMode_(DrawingDC, #TRANSPARENT)
                  ;                      SetTextColor_(DrawingDC, e_rows( )\color\front & $FFFFFF | e_rows( )\AlphaColor24( ) )
                  ;                      TextOut_(DrawingDC, Text_x, Text_Y, e_rows( )\text\string.s,Len(e_rows( )\text\string.s))
                  ;                   CompilerElse
                  DrawRotatedText( Text_x, Text_Y, e_rows( )\text\string.s, *this\text\rotate, e_rows( )\color\front )
                  ;                   CompilerEndIf
               EndIf
               
               If e_rows( )\color\front[2] <> *this\color\front
                  If e_rows( )\text\edit[2]\width 
                     draw_box_( sel_text_x2, Y, text_sel_width, e_rows( )\height, e_rows( )\color\back[*this\ColorState( )] )
                     
                     If *this\press And #PB_Compiler_OS = #PB_OS_MacOS
                        
                        ; to right select
                        If ( ( *this\LineEntered( ) And *this\LinePressed( ) And *this\LineEntered( )\position > *this\LinePressed( )\position ) Or
                             ( *this\LineEntered( ) = *this\LinePressed( ) And *this\edit_caret_1( ) > *this\edit_caret_2( ) ))
                           
                           If e_rows( )\text\edit[2]\string.s
                              DrawRotatedText( sel_text_x2, Text_Y, e_rows( )\text\edit[2]\string.s, *this\text\rotate, e_rows( )\color\front[*this\ColorState( )] )
                           EndIf
                           
                           ; to left select
                        Else
                           If e_rows( )\text\edit[2]\string.s
                              DrawRotatedText( Text_x, Text_Y, e_rows( )\text\edit[1]\string.s + e_rows( )\text\edit[2]\string.s, *this\text\rotate, e_rows( )\color\front[*this\ColorState( )] )
                           EndIf
                           
                           If e_rows( )\_enter
                              If e_rows( )\text\edit[1]\width
                                 draw_box_( Text_x, Text_Y+2, e_rows( )\text\edit[1]\width, e_rows( )\text\edit[1]\height-2, e_rows( )\color\back[1] )
                              EndIf
                           EndIf
                           
                           If e_rows( )\text\edit[1]\string.s
                              DrawRotatedText( Text_x, Text_Y, e_rows( )\text\edit[1]\string.s, *this\text\rotate, e_rows( )\color\front )
                           EndIf
                        EndIf
                        
                     Else
                        If e_rows( )\text\edit[2]\string.s
                           DrawRotatedText( sel_text_x2, Text_Y, e_rows( )\text\edit[2]\string.s, *this\text\rotate, e_rows( )\color\front[*this\ColorState( )] )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;                ;\\
               ;                If e_rows( ) = *this\LineEntered( ) 
               ;                   ;draw_mode_alpha_( #PB_2DDrawing_XOr | #PB_2DDrawing_Outlined )
               ;                   draw_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                   draw_roundbox_( Mouse()\x, Y, 20, e_rows( )\height, e_rows( )\round, e_rows( )\round, e_rows( )\color\frame[1] )
               ; ;                   draw_roundbox_( Text_x-2, Y, e_rows( )\text\width+2 + 7, e_rows( )\height, e_rows( )\round, e_rows( )\round, e_rows( )\color\frame[1] )
               ; ;                   draw_roundbox_( Text_x-1, Y+1, e_rows( )\text\width + 7 , e_rows( )\height-2, e_rows( )\round, e_rows( )\round, $ffffffff )
               ; ;                   draw_roundbox_( Text_x, Y+2, e_rows( )\text\width-2 + 7 , e_rows( )\height-4, e_rows( )\round, e_rows( )\round, e_rows( )\color\frame[1] )
               ;                EndIf
               
               ; Draw margin text
               If *this\MarginLine( )\width > 0
                  draw_mode_( #PB_2DDrawing_Transparent )
                  DrawRotatedText( e_rows( )\margin\x + Bool( *this\text\vertical ) * *this\scroll_x( ),
                                   e_rows( )\margin\y + Bool( Not *this\text\vertical ) * *this\scroll_y( ),
                                   e_rows( )\margin\string, *this\text\rotate, *this\MarginLine( )\color\front )
               EndIf
               
               ; Horizontal line
               If *this\mode\GridLines And
                  e_rows( )\color\line And e_rows( )\color\line <> e_rows( )\color\back
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  draw_box_( row_x_( *this, e_rows( ) ), Y + e_rows( )\height, e_rows( )\width, *this\mode\GridLines, $fff0f0f0 )
               EndIf
            EndIf
         Next
         PopListPosition( e_rows( )) ;
         clip_output_( *this, [#__c_draw] )
      EndProcedure
      
      Procedure   Draw_Editor( *this._s_WIDGET )
         Protected String.s, StringWidth
         Protected IT, Text_Y, Text_x, X, Y, Width, Drawing
         
         If Not *this\hide
            
            With *this
               ; Make output multi line text
               If *this\text\TextChange( ) Or 
                  *this\resize\ResizeChange( )
                  ;
                  edit_UpdateText( *this )
                  
                  ;             If *this\LineEnteredIndex( ) >= 0
                  ;               Debug " key - update draw lines"
                  ;             Else
                  ;               Debug " edit update draw lines"
                  ;             EndIf
               EndIf
               
               ;;;;;;;;;;;;;;;;;;;;
               If *this\create = 1
                  *this\create = - 1
                  edit_make_text_position( *this )
               EndIf
               ;
               ; then change text update cursor pos
               If *this\text\editable
                  If *this\LineEnteredIndex( ) >= 0
                     If Not ( *this\LineFocused( ) And *this\LineFocused( )\position = *this\LineEnteredIndex( ) )
                        *this\LineFocused( ) = SelectElement( *this\__lines( ), *this\LineEnteredIndex( ) )
                     EndIf
                     Debug "----- " + *this\text\string
                     Debug "    key - change caret pos " + ListSize( *this\__lines( ) ) + " " + *this\LineFocused( )\position + " " + *this\LinePressedIndex( )
                     
                     ;
                     edit_sel_string_( *this, *this\LineFocused( ) )
                     edit_sel_text_( *this, *this\LineFocused( ) )
                     
                     ;
                     ; edit_make_text_position( *this )
                     ;               ;bar_area_update( *this )
                     ;               make_scrollarea_x( *this, *this\text )
                     ;               If *this\scroll\h And
                     ;                  bar_PageChange( *this\scroll\h, -*this\scroll_x( ) )
                     ;               EndIf
                     
                     If *this\scroll\v And Not *this\scroll\v\hide
                        If *this\LineFocused( )\y + *this\scroll_y( ) < 0 Or
                           *this\LineFocused( )\y + *this\LineFocused( )\height + *this\scroll_y( ) > *this\inner_height( )
                           
                           If *this\LineFocused( )\y + *this\scroll_y( ) < 0
                              Debug "       key - scroll ^"
                           ElseIf *this\LineFocused( )\y + *this\LineFocused( )\height + *this\scroll_y( ) > *this\inner_height( )
                              Debug "       key - scroll v"
                           EndIf
                           
                           ;row_scroll_y_( *this, *this\LineFocused( ) )
                           bar_set_scroll_pos_( *this\scroll\v, *this\text\caret\y, *this\text\caret\height ) ; ok
                        EndIf
                     EndIf
                     
                     If *this\scroll\h And Not *this\scroll\h\hide
                        If *this\text\caret\x + *this\scroll_x( ) < 0 Or
                           *this\text\caret\x + *this\text\caret\width + *this\scroll_x( ) > *this\inner_width( )
                           
                           If *this\text\caret\x + *this\scroll_x( ) < 0
                              Debug "       key - scroll <"
                           ElseIf *this\text\caret\x + *this\text\caret\width + *this\scroll_x( ) > *this\inner_width( )
                              Debug "       key - scroll >"
                           EndIf
                           
                           ; bar_set_scroll_pos_( *this\scroll\h, (*this\text\caret\x - *this\text\padding\x), ( *this\text\padding\x * 2 + *this\MarginLine( )\width )) ; ok
                           bar_set_scroll_pos_( *this\scroll\h, *this\text\caret\x, *this\text\caret\width ) ; ok
                        EndIf
                     EndIf
                     
                     
                     *this\LineEnteredIndex( ) = - 1
                  EndIf
               EndIf
               
               ; Draw back color
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back )
               
               ; Draw margin back color
               If *this\MarginLine( )\width > 0
                  If ( *this\text\TextChange( ) Or *this\resize\ResizeChange( ) )
                     *this\MarginLine( )\x      = *this\inner_x( )
                     *this\MarginLine( )\y      = *this\inner_y( )
                     *this\MarginLine( )\height = *this\inner_height( )
                  EndIf
                  
                  ; Draw margin
                  draw_mode_alpha_( #PB_2DDrawing_Default ); | #PB_2DDrawing_AlphaBlend )
                  draw_box_( *this\MarginLine( )\x, *this\MarginLine( )\y, *this\MarginLine( )\width, *this\MarginLine( )\height, *this\MarginLine( )\color\back )
               EndIf
               
               ; Draw Lines text
               If *this\countitems
                  *this\RowFirstVisible( ) = 0
                  *this\RowLastVisible( )  = 0
                  
                  ;\\
                  Draw_EditorItems( *this, *this\__lines( ) )
               EndIf
               
               ; Draw caret
               If *this\text\editable And *this\focus
                  draw_mode_( #PB_2DDrawing_XOr )
                  draw_box_( *this\inner_x( ) + *this\text\caret\x + *this\scroll_x( ), *this\inner_y( ) + *this\text\caret\y + *this\scroll_y( ), *this\text\caret\width, *this\text\caret\height, $FFFFFFFF )
               EndIf
               
               ; Draw frames
               If *this\notify
                  draw_mode_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, $FF0000FF )
                  If *this\round : draw_roundbox_( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), *this\frame_height( ) + 2, *this\round, *this\round, $FF0000FF ) : EndIf  ; Сглаживание краев ) ))
               ElseIf *this\bs
                  draw_mode_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame[\ColorState( )] )
                  If *this\round : draw_roundbox_( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), *this\frame_height( ) + 2, *this\round, *this\round, *this\color\front[\ColorState( )] ) : EndIf  ; Сглаживание краев ) ))
               EndIf
               
               If *this\text\TextChange( ) : *this\text\TextChange( ) = 0 : EndIf
               If *this\WidgetChange( ) : *this\WidgetChange( ) = 0 : EndIf
            EndWith
         EndIf
         
      EndProcedure
      
      Procedure   Draw_Window( *this._s_WIDGET )
         Protected caption_height = *this\caption\height - *this\fs
         Protected mouse_interact_state = 0
         
         With *this
            ; чтобы закруглять только у окна с титлебаром
            Protected gradient = 1
            Protected r = 9
            
            draw_mode_alpha_( #PB_2DDrawing_Default )
            
            If *this\fs And *this\round And Not *this\fs[2]
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\caption\color\back[\ColorState( )] )
            EndIf
            
            ; Draw back
            If *this\color\back <> - 1
               If *this\color\back[mouse_interact_state * *this\ColorState( )]
                  If *this\fs > *this\round / 3 And *this\round
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\color\back[mouse_interact_state * *this\ColorState( )] )
                  Else
                     If *this\round
                        draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back[mouse_interact_state * *this\ColorState( )] )
                     Else
                        draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back[mouse_interact_state * *this\ColorState( )] )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            If gradient And Not *this\round
               draw_mode_alpha_( #PB_2DDrawing_Gradient )
               BackColor( *this\color\fore[\ColorState( )] & $FFFFFF | 255 << 24 )
               FrontColor( *this\color\frame[\ColorState( )] & $FFFFFF | 255 << 24 )
            EndIf
            
            If *this\fs[2] And Not *this\round
               Protected ch = *this\fs[2]
               If Not *this\round
                  ch = *this\fs[2] - 1             ; (*this\fs+*this\fs[2])/2
               EndIf
               
               ; top
               If gradient
                  LinearGradient( *this\frame_x( ) + *this\fs, *this\frame_y( ), *this\frame_x( ) + *this\fs, *this\frame_y( ) + (*this\fs[2] + *this\fs) * 2)
               EndIf
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + *this\fs, r, r, *this\color\frame[\ColorState( )] )
               
               If *this\fs[2]
                  draw_mode_alpha_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + *this\fs, r, r, *this\color\frame[\ColorState( )] )
               EndIf
               
               If gradient
                  draw_mode_alpha_( #PB_2DDrawing_Gradient )
                  BackColor( *this\color\fore[\ColorState( )] & $FFFFFF | 255 << 24 )
                  FrontColor( *this\color\frame[\ColorState( )] & $FFFFFF | 255 << 24 )
                  LinearGradient( *this\frame_x( ) + *this\fs, *this\frame_y( ), *this\frame_x( ) + *this\fs, *this\frame_y( ) + (*this\fs[2] + *this\fs) * 2)
               EndIf
               draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\fs[2] - r, *this\frame_width( ), r + *this\fs, *this\color\frame[\ColorState( )] )
            EndIf
            
            ; Draw frame
            If *this\fs > 0
               If Not gradient
                  draw_mode_alpha_( #PB_2DDrawing_Default )
               EndIf
               If Not *this\round
                  If *this\fs = 1
                     gradient = 0
                  EndIf
                  
                  If Not *this\fs[2]; top
                     If gradient
                        LinearGradient( *this\frame_x( ), *this\frame_y( ) + *this\fs * 2, *this\frame_x( ), *this\frame_y( ) - *this\fs )
                     EndIf
                     draw_box_( *this\frame_x( ) + *this\fs, *this\frame_y( ), *this\frame_width( ) - *this\fs * 2, *this\fs, *this\color\frame[\ColorState( )] )
                     ; left&top
                     If gradient
                        BoxedGradient(*this\frame_x( ), *this\frame_y( ), *this\fs * 2, *this\fs * 2)
                     EndIf
                     draw_box_( *this\frame_x( ), *this\frame_y( ), *this\fs, *this\fs, *this\color\frame[\ColorState( )] )
                     
                     ; right&top
                     If gradient
                        BoxedGradient(*this\frame_x( ) + *this\frame_width( ) - *this\fs * 2, *this\frame_y( ), *this\fs * 2, *this\fs * 2)
                     EndIf
                     draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs, *this\frame_y( ), *this\fs, *this\fs, *this\color\frame[\ColorState( )] )
                  EndIf
                  
                  ; left
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\fs * 2, *this\frame_y( ) + *this\fs + ch, *this\frame_x( ) - *this\fs, *this\frame_y( ) + *this\fs + ch )
                  EndIf
                  draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\fs + ch, *this\fs, *this\frame_height( ) - *this\fs * 2 - ch, *this\color\frame[\ColorState( )] )
                  ; right
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\frame_width( ) - *this\fs * 2, *this\frame_y( ) + *this\fs + ch, *this\frame_x( ) + *this\frame_width( ) + *this\fs, *this\frame_y( ) + *this\fs + ch )
                  EndIf
                  draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs, *this\frame_y( ) + *this\fs + ch, *this\fs, *this\frame_height( ) - *this\fs * 2 - ch, *this\color\frame[\ColorState( )] )
                  ; bottom
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\fs, *this\frame_y( ) + *this\frame_height( ) - *this\fs * 2, *this\frame_x( ) + *this\fs, *this\frame_y( ) + *this\frame_height( ) + *this\fs )
                  EndIf
                  draw_box_( *this\frame_x( ) + *this\fs, *this\frame_y( ) + *this\frame_height( ) - *this\fs, *this\frame_width( ) - *this\fs * 2, *this\fs, *this\color\frame[\ColorState( )] )
                  
                  ; left&bottom
                  If gradient
                     BoxedGradient(*this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs * 2, *this\fs * 2, *this\fs * 2)
                  EndIf
                  draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs, *this\fs, *this\fs, *this\color\frame[\ColorState( )] )
                  
                  ; right&bottom
                  If gradient
                     BoxedGradient(*this\frame_x( ) + *this\frame_width( ) - *this\fs * 2, *this\frame_y( ) + *this\frame_height( ) - *this\fs * 2, *this\fs * 2, *this\fs * 2)
                  EndIf
                  draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs, *this\frame_y( ) + *this\frame_height( ) - *this\fs, *this\fs, *this\fs, *this\color\frame[\ColorState( )] )
                  
               EndIf
            EndIf
            
            If *this\fs[2] Or (*this\fs > *this\round / 3 And *this\round) Or Not *this\round
               If *this\fs
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  ; inner top
                  Line( *this\frame_x( ) + *this\fs + *this\fs[1], *this\frame_y( ) + *this\fs + *this\fs[2] - 1, *this\frame_width( ) - *this\fs[1] - *this\fs[3] - *this\fs * 2, 1, *this\color\frame[\ColorState( )] )
                  ; inner left
                  Line( *this\frame_x( ) + *this\fs + *this\fs[1] - 1, *this\frame_y( ) + *this\fs + *this\fs[2] - 1, 1, *this\frame_height( ) - *this\fs[2] - *this\fs[4] - *this\fs * 2 + 1, *this\color\frame[\ColorState( )] )
                  ; inner right
                  Line( *this\frame_x( ) + *this\frame_width( ) - *this\fs[3] - *this\fs, *this\frame_y( ) + *this\fs + *this\fs[2] - 1, 1, *this\frame_height( ) - *this\fs[2] - *this\fs[4] - *this\fs * 2 + 1, *this\color\frame[\ColorState( )] )
                  ; inner bottom
                  Line( *this\frame_x( ) + *this\fs + *this\fs[1], *this\frame_y( ) + *this\frame_height( ) - *this\fs[4] - *this\fs, *this\frame_width( ) - *this\fs[1] - *this\fs[3] - *this\fs * 2, 1, *this\color\frame[\ColorState( )] )
               EndIf
            Else
               If *this\round
                  draw_mode_alpha_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\caption\color\back[\ColorState( )] )
               EndIf
            EndIf
            
            If Not *this\round
               If *this\fs
                  If Not *this\fs[2]
                     ; frame top
                     Line( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), 1, *this\color\frame[\ColorState( )] )
                  EndIf
                  ; frame bottom
                  Line( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - 1, *this\frame_width( ), 1, *this\color\frame[\ColorState( )] )
                  ; frame left
                  Line( *this\frame_x( ), *this\frame_y( ) + *this\fs[2] - r, 1, *this\frame_height( ) - *this\fs[2] + r, *this\color\frame[\ColorState( )] )
                  ; frame right
                  Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ) + *this\fs[2] - r, 1, *this\frame_height( ) - *this\fs[2] + r, *this\color\frame[\ColorState( )] )
               ElseIf *this\fs[2]
                  ; frame left
                  Line( *this\frame_x( ), *this\frame_y( ) + *this\fs[2] - r, 1, r + *this\fs, *this\color\frame[\ColorState( )] )
                  ; frame right
                  Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ) + *this\fs[2] - r, 1, r + *this\fs, *this\color\frame[\ColorState( )] )
               EndIf
            EndIf
            
            ; then caption
            If *this\fs[2]
               ;                   ; Draw caption back
               ;                   If *this\caption\color\back
               ;                     draw_mode_alpha_( #PB_2DDrawing_Gradient )
               ;                     draw_gradient_( 0, *this\caption, *this\caption\color\fore[\ColorState( )], *this\caption\color\back[\ColorState( )] )
               ;                   EndIf
               ;
               ;                   ; Draw caption frame
               ;                   If *this\fs
               ;                     draw_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                     draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs + *this\fs[2], *this\caption\round, *this\caption\round, *this\color\frame[\ColorState( )] )
               ;
               ;                     ; erase the bottom edge of the frame
               ;                     draw_mode_alpha_( #PB_2DDrawing_Gradient )
               ;                     BackColor( *this\caption\color\fore[\ColorState( )] )
               ;                     FrontColor( *this\caption\color\back[\ColorState( )] )
               ;
               ;                     ;Protected i
               ;                     For i = 0 To *this\caption\round
               ;                       Line( *this\inner_x( ) - *this\fs + 1, *this\frame_y( ) + (*this\fs + *this\fs[2] - *this\caption\round) + i - 2, *this\frame_width( ) - 2, 1, *this\caption\color\back[\ColorState( )] )
               ;                     Next
               ;
               ;                     ; two edges of the frame
               ;                     draw_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                     Line( *this\frame_x( ), *this\frame_y( ) + *this\caption\round / 2 + 2, 1, caption_height - *this\caption\round / 2, *this\color\frame[\ColorState( )] )
               ;                     Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ) + *this\caption\round / 2 + 2, 1, caption_height - *this\caption\round / 2, *this\color\frame[\ColorState( )] )
               ;                   EndIf
               
               ; buttins background
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_box_button( *this\CloseButton( ), color\back )
               draw_box_button( *this\MaximizeButton( ), color\back )
               draw_box_button( *this\MinimizeButton( ), color\back )
               draw_box_button( *this\HelpButton( ), color\back )
               
               ; buttons image
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               draw_close_button( *this\CloseButton( ), DPIScaled(6) )
               draw_maximize_button( *this\MaximizeButton( ), DPIScaled(4) )
               draw_minimize_button( *this\MinimizeButton( ), DPIScaled(4) )
               draw_help_button( *this\HelpButton( ), DPIScaled(4) )
               
               ; Draw image
               If *this\image\id
                  draw_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawAlphaImage( *this\image\id,
                                  *this\frame_x( ) + *this\bs + *this\scroll_x( ) + *this\image\x,
                                  *this\frame_y( ) + *this\bs + *this\scroll_y( ) + *this\image\y - 2, *this\AlphaState( ) )
               EndIf
               
               If *this\TitleText( )\string
                  If *this\inner_height( )
                     ClipPut( *this, *this\caption\x, *this\caption\y, *this\caption\width, *this\caption\height - *this\fs * 2 )
                  EndIf
                  
                  ; Draw string
                  If *this\resize\ResizeChange( )
                     If *this\image\id
                        *this\TitleText( )\x = *this\caption\x + *this\TitleText( )\padding\x + *this\image\width + 10;\image\padding\x
                     Else
                        *this\TitleText( )\x = *this\caption\x + *this\TitleText( )\padding\x
                     EndIf
                     *this\TitleText( )\y = *this\caption\y + ( *this\caption\height - *this\fs * 2 - TextHeight( "A" )) / 2
                  EndIf
                  
                  draw_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawText( *this\TitleText( )\x, *this\TitleText( )\y, *this\TitleText( )\string, *this\color\front[\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                  
                  ;             draw_mode_alpha_( #PB_2DDrawing_Outlined )
                  ;             draw_roundbox_( *this\caption\x, *this\caption\y, *this\caption\width, *this\caption\height - *this\fs * 2, *this\round, *this\round, $FF000000 )
                  If *this\inner_height( )
                     clip_output_( *this, [#__c_draw] )
                  EndIf
               EndIf
            EndIf
            
            ; background image draw
            If *this\image[#__image_background]\id
               draw_background_image_( *this, *this\inner_x( ), *this\inner_y( ), [#__image_background] )
            EndIf
            
            ;clip_output_( *this, [#__c_draw] )
            
            ; UnclipOutput( )
            ; draw_mode_alpha_( #PB_2DDrawing_Outlined )
            ; draw_roundbox_( *this\frame_x( ),\frame_y( ),\frame_width( ),\frame_height( ), round,round,$ff000000 )
            ; draw_roundbox_( *this\inner_x( ),\inner_y( ),\inner_width( ),\inner_height( ), round,round,$ff000000 )
            
         EndWith
      EndProcedure
      
      Procedure   Draw_ListIcon( *this._s_WIDGET )
         Protected state.b, X.l, Y.l, scroll_x, scroll_y
         
         If Not *this\hide
            If *this\WidgetChange( ) Or *this\ResizeChange( )
               ForEach *this\columns( )
                  Update_TreeRows( *this, *this\__rows( ), *this\WidgetChange( ) )
               Next
               
               ;\\
               bar_area_update( *this )
               
               ;\\ SetState( scroll-to-see )
               If *this\RowFocused( ) And *this\ScrollState( ) = - 1
                  row_scroll_y_( *this, *this\RowFocused( ) )
                  
                  *this\scroll\v\WidgetChange( ) = 0
                  *this\ScrollState( )             = #True
               EndIf
               
               ;\\ reset draw list
               ClearList( *this\RowVisibleList( ))
               *this\RowFirstVisible( ) = 0
               *this\RowLastVisible( )  = 0
               
               ForEach *this\columns( )
                  Update_TreeVisibleRows( *this, *this\__rows( ) )
               Next
               
               *this\WidgetChange( ) = 0
            EndIf
            
            ;\\ Draw background
            If *this\AlphaState( )
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back);[*this\ColorState( )] )
            EndIf
            
            ;\\ Draw background image
            If *this\image\id
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *this\image\id, *this\image\x, *this\image\y, *this\AlphaState( ) )
            EndIf
            
            ;\\
            ForEach *this\columns( )
               X                            = *this\frame_x( ) + *this\fs + *this\columns( )\x + *this\scroll_x( ) + *this\row\sublevelpos + *this\MarginLine( )\width
               Y                            = *this\frame_y( ) + *this\fs + *this\columns( )\y
               *this\columns( )\text\height = *this\text\height
               *this\columns( )\text\y      = ( *this\columns( )\height - *this\columns( )\text\height ) / 2
               *this\columns( )\text\x      = *this\text\padding\x
               
               
               ;\\
               Draw_TreeRows( *this, *this\RowVisibleList( ) )
               
               ;\\ Draw selector back
               If *this\color\back
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  If ListIndex( *this\columns( ) ) = 0
                     draw_roundbox_( *this\frame_x( ) + *this\fs + *this\columns( )\x + *this\scroll_x( ), Y, *this\columns( )\width + *this\row\sublevelpos + *this\MarginLine( )\width, *this\columns( )\height, *this\round, *this\round, *this\color\frame )
                  Else
                     draw_roundbox_( X, Y, *this\columns( )\width, *this\columns( )\height, *this\round, *this\round, *this\color\frame )
                  EndIf
               EndIf
               
               ;\\ Draw items image
               If *this\columns( )\image\id
                  draw_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawAlphaImage( *this\columns( )\image\id, X + *this\columns( )\image\x, Y + *this\columns( )\image\y, *this\AlphaState( ) )
               EndIf
               
               ;\\ Draw items text
               If *this\columns( )\text\string.s
                  draw_mode_( #PB_2DDrawing_Transparent )
                  DrawRotatedText( X + *this\columns( )\text\x, Y + *this\columns( )\text\y, *this\columns( )\text\string.s, *this\text\rotate, *this\color\front )
               EndIf
               
            Next
            
            ;\\ horizontal lines
            draw_mode_alpha_( #PB_2DDrawing_Default )
            X = *this\frame_x( ) + *this\fs + *this\scroll_x( ) + *this\row\sublevelpos + *this\MarginLine( )\width
            ForEach *this\columns( )
               If ListIndex( *this\columns( )) = 0
                  ; draw_box_( x + *this\columns( )\x, *this\frame_y( ), 1, *this\columns( )\height + *this\fs, $ff000000 )
                  draw_box_( X + *this\columns( )\x, *this\frame_y( ), 1, *this\frame_height( ), $ff000000 )
               EndIf
               draw_box_( X + *this\columns( )\x + *this\columns( )\width - 1, *this\frame_y( ), 1, *this\frame_height( ), $ff000000 )
            Next
         EndIf
         
      EndProcedure
      
      Procedure   Draw_Button( *this._s_WIDGET )
         Protected X, Y
         
         With *this
            Protected state
            If *this\type = #__type_Button Or
               *this\type = #__type_ButtonImage
               state = *this\ColorState( )
               If *this\togglebox And *this\ToggleBoxState( )
                  state = #__s_2
               EndIf
            EndIf
            
            ; update text
            If *this\WidgetChange( ) Or 
               *this\resize\ResizeChange( )
               ;
               edit_UpdateText( *this )
            EndIf
            
            ;\\
            If *this\image\ImageChange( )
               *this\image\padding\x = *this\text\padding\x
               *this\image\padding\y = *this\text\padding\y
               
               ; make horizontal scroll max
               If *this\scroll_width( ) < *this\image\width + *this\image\padding\x * 2
                  *this\scroll_width( ) = *this\image\width + *this\image\padding\x * 2
               EndIf
               
               ; make vertical scroll max
               If *this\scroll_height( ) < *this\image\height + *this\image\padding\y * 2
                  *this\scroll_height( ) = *this\image\height + *this\image\padding\y * 2
               EndIf
               
               ; make horizontal scroll x
               make_scrollarea_x( *this, *this\image )
               
               ; make vertical scroll y
               make_scrollarea_y( *this, *this\image )
               
               
               ;           set_align_x_( *this\image, *this\image, *this\scroll_width( ), 0 )
               ;           set_align_y_( *this\image, *this\image, *this\scroll_height( ), 270 )
            EndIf
            
            ;\\ origin position
            X = *this\inner_x( ) + *this\scroll_x( )
            Y = *this\inner_y( ) + *this\scroll_y( )
            
            ;\\ draw background
            If *this\image[#__image_background]\id
               draw_background_image_( *this, X, Y, [#__image_background] )
            Else
               If *this\color\back <> - 1
                  If *this\color\fore <> - 1
                     draw_mode_alpha_( #PB_2DDrawing_Gradient )
                     draw_gradient_( *this\text\vertical, *this, *this\color\fore[state], *this\color\back[state], [#__c_frame] )
                  Else
                     draw_mode_alpha_( #PB_2DDrawing_Default )
                     draw_box( *this, color\back, [#__c_frame])
                  EndIf
               EndIf
            EndIf
            
            ;\\ draw text items
            If *this\text\string.s
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               ForEach *this\__lines( )
                  DrawRotatedText( X + *this\__lines( )\x + *this\__lines( )\text\x, Y + *this\__lines( )\y + *this\__lines( )\text\y,
                                   *this\__lines( )\text\String.s, *this\text\rotate, *this\color\front[state] ) ; *this\__lines( )\color\font )
                  
                  If *this\mode\Lines
                     Protected i, count = Bool( func::GetFontSize( GetFontID( *this\__lines( ) ) ) > 13 )
                     For i = 0 To count
                        Line( X + *this\__lines( )\x + *this\__lines( )\text\x, Y + *this\__lines( )\y + *this\__lines( )\text\y + *this\__lines( )\text\height - count + i - 1, *this\__lines( )\text\width, 1, *this\color\front[state] )
                     Next
                  EndIf
               Next
            EndIf
            
            ;\\ draw box
            Protected _box_type_, _box_x_, _box_y_
            ; update widget ( option&checkbox ) position
            If *this\togglebox And *this\togglebox\width And *this\WidgetChange( ) 
               *this\togglebox\y = *this\inner_y( ) + ( *this\inner_height( ) - *this\togglebox\height ) / 2
               
               If *this\text\align\right
                  *this\togglebox\x = *this\inner_x( ) + ( *this\inner_width( ) - *this\togglebox\height - 3 )
               ElseIf Not *this\text\align\left
                  *this\togglebox\x = *this\inner_x( ) + ( *this\inner_width( ) - *this\togglebox\width ) / 2
                  
                  If Not *this\text\align\top
                     If *this\text\rotate = 0
                        *this\togglebox\y = *this\inner_y( ) + *this\scroll_y( ) - *this\togglebox\height
                     Else
                        *this\togglebox\y = *this\inner_y( ) + *this\scroll_y( ) + *this\scroll_height( )
                     EndIf
                  EndIf
               Else
                  *this\togglebox\x = *this\inner_x( ) + 3
               EndIf
            EndIf
            
            
            If #__type_Option = *this\type
               _box_type_ = 1
            EndIf
            If #__type_CheckBox = *this\type
               _box_type_ = 3
            EndIf
            If _box_type_
               draw_button_( _box_type_, *this\togglebox\x, *this\togglebox\y, *this\togglebox\width, *this\togglebox\height, *this\ToggleBoxState( ), *this\togglebox\round )
            EndIf
            
            ;\\ draw image
            If *this\image\id
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *this\image\id, X + *this\image\x, Y + *this\image\y, *this\AlphaState( ) )
            EndIf
            
            ;\\ Draw frames
            If *this\fs
               draw_mode_( #PB_2DDrawing_Outlined )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ),
                               *this\round, *this\round, *this\color\frame[state] & $FFFFFF | *this\AlphaState24( ) )
            EndIf
            
            ;\\ draw frame defaul focus widget
            If *this\type = #__type_Button
               If *this\deffocus 
                  draw_mode_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ),
                                  *this\round, *this\round, *this\color\frame[1] & $FFFFFF | *this\AlphaState24( ) )
                  If *this\round
                     draw_roundbox_( *this\inner_x( ) - 1, *this\inner_y( ), *this\inner_width( ) + 2, *this\inner_height( ),
                                     *this\round, *this\round, *this\color\frame[1] & $FFFFFF | *this\AlphaState24( ) )
                  EndIf
                  draw_roundbox_( *this\x, *this\y, *this\width, *this\height,
                                  *this\round, *this\round, *this\color\frame[1] & $FFFFFF | *this\AlphaState24( ) )
               EndIf
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure   Draw_ComboBox( *this._s_WIDGET )
         Protected state
         Protected arrow_right
         
         state = *this\ColorState( )
         If state = #__s_3
            state = 0
         EndIf
         
         *this\text\x = 5
         *this\text\y = ( *this\ComboButton( )\height - *this\text\height ) / 2
         
         ;
         If *this\__String( )
            draw_mode_alpha_( #PB_2DDrawing_Gradient )
            draw_gradient_( 0, *this\ComboButton( ), *this\color\fore[*this\ColorState( )], *this\color\back[state] )
            ; Draw_Editor( *this\__String( ) )
         Else
            draw_mode_alpha_( #PB_2DDrawing_Gradient )
            draw_gradient_( *this\text\vertical, *this, *this\color\fore[*this\ColorState( )], *this\color\back[state], [#__c_frame] )
            If *this\text\string
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawText( *this\frame_x( ) + *this\text\x,
                         *this\frame_y( ) + *this\text\y,
                         *this\text\string, *this\color\front[state] & $FFFFFF | *this\AlphaState24( ) )
            EndIf
         EndIf
         
         ;
         draw_mode_alpha_( #PB_2DDrawing_Default )
         If *this\__String( )
            draw_arrows( *this\ComboButton( ), *this\ComboButton( )\arrow\direction )
         Else
            Draw_Arrow( *this\ComboButton( )\arrow\direction,
                        *this\ComboButton( )\x + ( *this\ComboButton( )\width - *this\ComboButton( )\arrow\size * 2 - 4 ),
                        *this\ComboButton( )\y + ( *this\ComboButton( )\height - *this\ComboButton( )\arrow\size ) / 2,
                        *this\ComboButton( )\arrow\size, 
                        *this\ComboButton( )\arrow\type, 0,
                        *this\ComboButton( )\color\front[state] & $FFFFFF | *this\ComboButton( )\AlphaState24( ) )
         EndIf
         
         ; frame draw
         If *this\fs
            draw_mode_( #PB_2DDrawing_Outlined )
            draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame[state] )
         EndIf
         
         ;draw_box_( *this\ComboButton( )\x, *this\ComboButton( )\y, *this\ComboButton( )\width, *this\ComboButton( )\height, $ff000000 )
         
      EndProcedure
      
      Procedure   Draw_Container( *this._s_WIDGET )
         Protected i
         
         With *this
            If *this\fs
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               If constants::BinaryFlag( *this\flag, #__flag_BorderSingle ) Or 
                  constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                  draw_roundbox_(*this\frame_x( ), *this\frame_y( ), *this\round*2, *this\round*2, *this\round, *this\round, $FFAAAAAA )
                  draw_roundbox_(*this\frame_x( )+*this\frame_width( )-*this\round*2, *this\frame_y( ), *this\round*2, *this\round*2, *this\round, *this\round, $FFFFFFFF )
                  draw_roundbox_(*this\frame_x( ), *this\frame_y( )+*this\frame_height( )-*this\round*2, *this\round*2, *this\round*2, *this\round, *this\round, $FFAAAAAA )
                  draw_roundbox_(*this\frame_x( )+*this\frame_width( )-*this\round*2, *this\frame_y( )+*this\frame_height( )-*this\round*2, *this\round*2, *this\round*2, *this\round, *this\round, $FFFFFFFF )
               EndIf
               If constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                  draw_roundbox_(*this\frame_x( )+1, *this\frame_y( )+1, *this\round*2, *this\round*2, *this\round, *this\round, $FFAAAAAA )
                  draw_roundbox_(*this\frame_x( )+1+*this\frame_width( )-*this\round*2, *this\frame_y( )+1, *this\round*2, *this\round*2, *this\round, *this\round, $FFFFFFFF )
                  draw_roundbox_(*this\frame_x( )+1, *this\frame_y( )-1+*this\frame_height( )-*this\round*2, *this\round*2, *this\round*2, *this\round, *this\round, $FFAAAAAA )
                  draw_roundbox_(*this\frame_x( )-1+*this\frame_width( )-*this\round*2, *this\frame_y( )-1+*this\frame_height( )-*this\round*2, *this\round*2, *this\round*2, *this\round, *this\round, $FFFFFFFF )
               EndIf
               
               ;                If *this\type <> #__type_panel And *this\type <> #__type_Frame
               ;                   draw_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                   For i = 0 To *this\fs - 1
               ;                      draw_roundbox_( *this\frame_x( ) + i, *this\frame_y( ) + i, *this\frame_width( ) - i * 2, *this\frame_height( ) - i * 2, *this\round, *this\round, *this\color\frame[*this\ColorState( )] )
               ;                      If *this\round
               ;                         draw_roundbox_( *this\frame_x( ) + i, *this\frame_y( ) + i + 1, *this\frame_width( ) - i * 2, *this\frame_height( ) - i * 2 - 2, *this\round, *this\round, *this\color\frame[*this\ColorState( )] )
               ;                      EndIf
               ;                   Next
               ;                EndIf
            EndIf
            
            If *this\image\id Or
               *this\image[#__image_background]\id
               
               If *this\image\ImageChange( ) <> 0
                  ;             set_align_x_( *this\image, *this\image, *this\inner_width( ), 0 )
                  ;             set_align_y_( *this\image, *this\image, *this\inner_height( ), 270 )
                  ;             
                  
                  
                  If *this\image\ImageChange( )
                     *this\image\padding\x = *this\text\padding\x
                     *this\image\padding\y = *this\text\padding\y
                     
                     ; make horizontal scroll max
                     If *this\scroll_width( ) < *this\image\width + *this\image\padding\x * 2
                        *this\scroll_width( ) = *this\image\width + *this\image\padding\x * 2
                     EndIf
                     
                     ; make vertical scroll max
                     If *this\scroll_height( ) < *this\image\height + *this\image\padding\y * 2
                        *this\scroll_height( ) = *this\image\height + *this\image\padding\y * 2
                     EndIf
                     
                     ; make horizontal scroll x
                     make_scrollarea_x( *this, *this\image )
                     
                     ; make vertical scroll y
                     make_scrollarea_y( *this, *this\image )
                     
                     
                     ;           set_align_x_( *this\image, *this\image, *this\scroll_width( ), 0 )
                     ;           set_align_y_( *this\image, *this\image, *this\scroll_height( ), 270 )
                  EndIf
                  *this\image\ImageChange( ) = 0
               EndIf
            EndIf
            
            ;\\ backcolor
            If *this\color\back <> - 1
               draw_mode_alpha_( #PB_2DDrawing_Default )
               If *this\fs
                  draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back);[*this\ColorState( )] )
               Else
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back);[*this\ColorState( )] )
               EndIf
            EndIf
         
            ;\\
            If *this\image\id Or
               *this\image[#__image_background]\id
               
               draw_mode_alpha_( #PB_2DDrawing_Default )
               
               ;\\ background image draw
               If *this\image[#__image_background]\id
                  draw_background_image_( *this, *this\inner_x( ), *this\inner_y( ), [#__image_background] )
               EndIf
               
               ;\\ scroll image draw
               If *this\image\id
                  DrawAlphaImage( *this\image\id,
                                  *this\inner_x( ) + *this\scroll_x( ) + *this\image\x,
                                  *this\inner_y( ) + *this\scroll_y( ) + *this\image\y, *this\AlphaState( ) )
               EndIf
            EndIf
            
            ;\\
            If *this\text\string
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawText( *this\inner_x( ) + *this\scroll_x( ) + *this\text\x,
                         *this\inner_y( ) + *this\scroll_y( ) + *this\text\y,
                         *this\text\string, *this\color\front[\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
            EndIf
            
            
            If *this\fs
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                Debug " - "+ *this\inner_x( ) +" "+ *this\inner_y( ) +" "+ *this\inner_width( ) +" "+ *this\inner_height( ) ;+ 
               ;                Debug "   - "+ *this\frame_x( ) +" "+ *this\frame_y( ) +" "+ *this\frame_width( ) +" "+ *this\frame_height( )
               
               ;draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame )
               ;               If *this\fs[1] Or
               ;                  *this\fs[2] Or
               ;                  *this\fs[3] Or
               ;                  *this\fs[4] 
               ;                  ;
               ;                 If *this\inner_width( ) And 
               ;                    *this\inner_height( ) 
               ;                   draw_roundbox_( *this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, *this\color\frame )
               ;                 EndIf
               ;               EndIf
               
               If constants::BinaryFlag( *this\flag, #__flag_BorderFlat )
;                   If *this\inner_width( ) And 
;                      *this\inner_height( ) 
;                      ;If *this\type <> #__type_Panel
;                         draw_roundbox_( *this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3], *this\frame_height( )-*this\fs[2]-*this\fs[4], *this\round, *this\round, $fff00fff);*this\color\frame )
;                      ;EndIf
;                   EndIf
;                   If *this\type = #__type_Container
                  If Not ( *this\fs[1] Or *this\fs[2] Or *this\fs[3] Or *this\fs[4] )
                     draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame )
                  EndIf
                  ;                   EndIf
                  
               ElseIf constants::BinaryFlag( *this\flag, #__flag_BorderSingle ) Or
                      constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                  Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FFAAAAAA)
                  Line(*this\frame_x( ), *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FFAAAAAA)
                  Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+*this\frame_height( )-1, *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FFFFFFFF)
                  Line(*this\frame_x( )+*this\frame_width( )-1, *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FFFFFFFF)
                  ;                 draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                  ;                 draw_roundbox_(*this\inner_x( ) - 2, *this\inner_y( ) - 2, *this\inner_width( ) + 3, *this\inner_height( ) + 3, *this\round, *this\round, $FFFFFFFF )
                  
               ElseIf constants::BinaryFlag( *this\flag, #__flag_BorderRaised )
                  Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FFFFFFFF)
                  Line(*this\frame_x( ), *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FFFFFFFF)
                  Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\frame_height( )-1, *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FF838383)
                  Line(*this\frame_x( )+*this\frame_width( )-1, *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FF838383)
                  
                  Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2]+1, *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FFFFFFFF)
                  Line(*this\frame_x( )+1, *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FFFFFFFF)
                  Line(*this\frame_x( )+*this\fs[1]+1, *this\frame_y( )+*this\frame_height( )-2, *this\frame_width( )-*this\fs[1]-*this\fs[3]-2, 1, $FFAAAAAA)
                  Line(*this\frame_x( )+*this\frame_width( )-2, *this\frame_y( )+*this\fs[2]+1, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-2, $FFAAAAAA)
               EndIf
               
               If constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                  ;                 Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2]+1, *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FF838383)
                  ;                 Line(*this\frame_x( )+*this\fs[1]+1, *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FF838383)
                  ;                 Line(*this\frame_x( )+*this\fs[1]+1, *this\frame_y( )+*this\frame_height( )-2, *this\frame_width( )-*this\fs[1]-*this\fs[3]-2, 1, $FFE7E7E7)
                  ;                 Line(*this\frame_x( )+*this\frame_width( )-2, *this\frame_y( )+*this\fs[2]+1, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-2, $FFE7E7E7)
                  
                  Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+1+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FF838383)
                  Line(*this\frame_x( )+1, *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FF838383)
                  Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+*this\frame_height( )-2, *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FFE7E7E7)
                  Line(*this\frame_x( )+*this\frame_width( )-2, *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FFE7E7E7)
               EndIf
               
            EndIf
            
            
            
         EndWith
      EndProcedure
      
      Macro draw_focus_frame( _address_, _color_ )
         draw_roundbox_( _address_\inner_x( ), _address_\inner_y( ), _address_\inner_width( ), _address_\inner_height( ), _address_\round, _address_\round, _color_ )
         ;draw_roundbox_( _address_\frame_x( ), _address_\frame_y( ), _address_\frame_width( ), _address_\frame_height( ), _address_\round, _address_\round, _color_ )
         ;draw_roundbox_( _address_\frame_x( ) + 1, _address_\frame_y( ) + 1, _address_\frame_width( ) - 2, _address_\frame_height( ) - 2, _address_\round, _address_\round, _color_ )
         ; draw_roundbox_( _address_\frame_x( ) + 2, _address_\frame_y( ) + 2, _address_\frame_width( ) - 4, _address_\frame_height( ) - 4, _address_\round, _address_\round, _color_ )
      EndMacro
      Procedure.b Draw( *this._s_WIDGET )
         Protected arrow_right
         
         With *this
            If *this\redraw = 1
               *this\redraw = 0
               ; Debug " redraw - " + *this\class
            EndIf
            
            If *this\align And 
               *this\align\update = 1
               *this\align\update = 0
               Resize(*this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore)
            EndIf
            
            If *this\contex
               DrawAlphaImage( ImageID( *this\contex ), *this\x, *this\y )
               ;*this\contex = 0
               ProcedureReturn 0
            EndIf
            
            ;\\ draw belowe drawing
            If Not *this\hide
               ;Debug "DRAW( "+*this\class +" "+ *this\enter
               If *this\resize\clip <> 0
                  *this\resize\clip = 0
                  Reclip( *this )
               EndIf
               
               ;\\
               If *this\draw_width( ) > 0 And
                  *this\draw_height( ) > 0
                  
                  If *this\root\drawmode & 1<<2
                     ;\\ init drawing font
                     draw_font( *this, GetFontID( *this\root ) )
                     ;
                     CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
                        If CurrentFontID( )
                           DrawingFont( CurrentFontID( ) )
                        EndIf
                     CompilerEndIf
                     ;
                     ;\\ limit drawing boundaries
                     clip_output_( *this, [#__c_draw] )
                     ;
                     ;\\ draw widgets
                     Select *this\type
                        Case #__type_Window : Draw_Window( *this )
                           
                        Case #__type_Root : Draw_Container( *this )
                        Case #__type_MDI : Draw_Container( *this )
                        Case #__type_Container : Draw_Container( *this )
                        Case #__type_ScrollArea : Draw_Container( *this )
                        Case #__type_Image : Draw_Container( *this )
                        Case #__type_Panel : Draw_Container( *this )
                           
                        Case #__type_ComboBox : Draw_ComboBox( *this )
                           
                           
                        Case #__type_String : Draw_Editor( *this )
                        Case #__type_Editor : Draw_Editor( *this )
                           
                        Case #__type_Tree : Draw_Tree( *this )
                        Case #__type_Properties : Draw_Tree( *this )
                        Case #__type_ListView : Draw_Tree( *this )
                        Case #__type_ListIcon : Draw_ListIcon( *this )
                           
                        Case #__type_Text : Draw_Button( *this )
                        Case #__type_Button : Draw_Button( *this )
                        Case #__type_ButtonImage : Draw_Button( *this )
                        Case #__type_Option : Draw_Button( *this )
                        Case #__type_CheckBox : Draw_Button( *this )
                        Case #__type_HyperLink : Draw_Button( *this )
                           
                           ; Draw frames
                        Case #__type_Frame
                           ;                         If *this\fs
                           ;                            
                           ;                            draw_mode_alpha_( #PB_2DDrawing_Outlined )
                           ;                            If *this\flag = #PB_Frame_Single
                           ;                               draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                           ;                               
                           ;                               draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ) + 1, *this\inner_height( ) + 1, *this\round, *this\round, $FFF5F5F5 )
                           ;                            ElseIf *this\flag = #PB_Frame_Double
                           ;                               draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                           ;                               
                           ;                               draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ) + 1, *this\inner_height( ) + 1, *this\round, *this\round, $FFF5F5F5 )
                           ;                               
                           ;                               draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, $FFAFAFAF )
                           ;                            ElseIf *this\flag = #PB_Frame_Flat
                           ;                               draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                           ;                            Else
                           ;                               draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, *this\color\frame )
                           ;                            EndIf
                           ;                            
                           ;                            draw_mode_alpha_( #PB_2DDrawing_Default )
                           ;                            draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back )
                           ;                            
                           ;                         EndIf
                           Draw_Container( *this )
                           If *this\text\string
                              ;
                              draw_mode_alpha_( #PB_2DDrawing_Default )
                              draw_roundbox_(*this\inner_x( ) + *this\scroll_x( ) + *this\text\x - 6,
                                             *this\inner_y( ) + *this\scroll_y( ) + *this\text\y + 1, *this\text\width + 12, *this\text\height, *this\round, *this\round, $BEEFEFEF )
                              
                              ;
                              draw_mode_alpha_( #PB_2DDrawing_Outlined )
                              draw_roundbox_(*this\inner_x( ) + *this\scroll_x( ) + *this\text\x - 6,
                                             *this\inner_y( ) + *this\scroll_y( ) + *this\text\y + 1, *this\text\width + 12, *this\text\height, *this\round, *this\round, *this\color\frame )
                              
                              ;
                              draw_mode_alpha_( #PB_2DDrawing_Transparent )
                              DrawText( *this\inner_x( ) + *this\scroll_x( ) + *this\text\x,
                                        *this\inner_y( ) + *this\scroll_y( ) + *this\text\y,
                                        *this\text\string, *this\color\front & $FFFFFF | *this\AlphaState24( ) )
                           EndIf
                           
                        Case #__type_Scroll   : bar_draw_scroll( *this )
                        Case #__type_Track    : bar_draw_track( *this )
                        Case #__type_Splitter    : bar_draw_splitter( *this )
                        Case #__type_Progress : bar_draw_progress( *this )
                        Case #__type_Spin        : bar_draw_spin( *this )
                     EndSelect
                     
                     If is_bar_( *this ) Or
                        *this\type = #__type_TabBar
                        ;
                        bar_draw_tab( *this )
                     EndIf
                     
                     ;\\
                     ;               If *this\__Tab( ) And
                     ;                  *this\__Tab( )\countitems
                     ;                 bar_draw_tab( *this\__Tab( ) )
                     ;                 ; clip_output_( *this, [#__c_draw] )
                     ;               EndIf
                     If *this\__Tab( ) And
                        *this\__Tab( )\countitems
                        ;
                        If is_bar_( *this\__Tab( ) ) Or 
                           *this\__Tab( )\type = #__type_TabBar
                           ;
                           bar_draw_tab( *this\__Tab( ) )
                        Else 
                           Draw( *this\__Tab( ) ) ; clip_output_( *this, [#__c_draw] )
                        EndIf
                     EndIf
                     
                     If *this\__Menu( ) And
                        *this\__Menu( )\countitems
                        If is_bar_( *this\__Menu( ) ) Or 
                           *this\__Menu( )\type = #__type_TabBar
                           ;
                           bar_draw_tab( *this\__Menu( ) )
                        Else 
                           Draw( *this\__Menu( ) ) ; clip_output_( *this, [#__c_draw] )
                        EndIf
                     EndIf
                     
                     ;\\
                     If *this\__String( )
                        Draw( *this\__String( ) )
                        clip_output_( *this, [#__c_draw] )
                     EndIf
                     
                     ;\\ draw area scrollbars
                     If *this\scroll And ( *this\scroll\v Or *this\scroll\h )
                        bar_area_draw( *this )
                        ; clip_output_( *this, [#__c_draw] )
                     EndIf
                     
                     ;\\ draw disable state
                     If *this\disable
                        draw_mode_alpha_( #PB_2DDrawing_Default )
                        draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $AAE4E4E4 )
                     EndIf
                  EndIf
                  
                  If *this\root\drawmode & 1<<1 
                  EndIf
                  ;
                  ; post event re draw
                  If is_root_( *this )
                     Send( *this, #__event_ReDraw );, #PB_All, *this )
                                                   ; PostEvent( #PB_Event_Gadget, *this\root\canvas\window, *this\root\canvas\gadget, #PB_EventType_Repaint )
                  Else
                     Send( *this, #__event_Draw )
                  EndIf
                  ;
                  ;
                  If *this\root\drawmode & 1<<2
                     ;\\
                     If test_focus_show
                        If *this\focus 
                           draw_mode_(#PB_2DDrawing_Outlined)
                           If *this\focus = 2
                              If Not *this\haschildren 
                                 If *this = GetActive( )
                                    draw_focus_frame( *this, $ff0000ff) ; $ffff0000
                                 Else
                                    draw_focus_frame( *this, $ff00ff00)
                                 EndIf
                              EndIf
                           ElseIf *this\focus = 3
                              draw_focus_frame( *this, $FFBFBFC3)
                           EndIf
                        EndIf
                     EndIf
                     
                     ;\\
                     If *this\enter
                        ;\\ draw entered anchors
                        If Not *this\haschildren 
                           If *this\anchors And *this\anchors\mode
                              a_draw( *this )
                           EndIf
                        EndIf
                        
                        ;\\ draw drag & drop
                        If Not *this\disable
                           If Not mouse( )\selector  
                              DDropDraw( *this )
                           EndIf
                        EndIf
                     EndIf
                     ;
                     
                     If test_clip 
                        If *this\parent
                           draw_mode_alpha_( #PB_2DDrawing_Outlined )
                           ;   draw_box_( *this\parent\draw_x( ), *this\parent\draw_y( ), *this\parent\draw_width( ), *this\parent\draw_height( ), $ff000000 )
                           draw_box_( *this\draw_x( ), *this\draw_y( ), *this\draw_width( ), *this\draw_height( ), $ff000000 )
                        EndIf
                     EndIf
                  EndIf
               EndIf   
            EndIf
            
            
            If test_scrollbars_draw And Not is_root_(*this)
               Debug "    Draw - " + *this\class
            EndIf
            
            
            ;\\ reset values
            If *this\WidgetChange( ) <> 0
               If Not *this\hide
                  *this\WidgetChange( ) = 0
               EndIf
            EndIf
            If *this\text\TextChange( ) <> 0
               *this\text\TextChange( ) = 0
            EndIf
            If *this\image\ImageChange( ) <> 0
               *this\image\ImageChange( ) = 0
            EndIf
            
            If *this\resize\x <> 0
               *this\resize\x = 0
            EndIf
            If *this\resize\y <> 0
               *this\resize\y = 0
            EndIf
            If *this\resize\width <> 0
               *this\resize\width = 0
            EndIf
            If *this\resize\height <> 0
               *this\resize\height = 0
            EndIf
            
            If *this\resize\change <> 0
               *this\resize\change = 0
            EndIf
         EndWith
      EndProcedure
      
      Procedure   ReDraw( *this._s_WIDGET )
         If Not widget::__gui\DrawingRoot
            widget::StartDraw( *this\root )
         EndIf
         widget::Drawing( *this\root )
         widget::StopDraw( )
         
         ; if not is root refresh widget
         If Not is_root_( *this )
            Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
         EndIf
      EndProcedure
      
      Procedure   Drawing( *root._s_root = 0 )
         If Not *root
            *root = __gui\DrawingRoot
         EndIf
         
         ;          ClearDebugOutput( )
         ;          ;\\
         If *root
            If *root\contex 
               DrawAlphaImage( ImageID( *root\contex ), 0,0)
               ;DrawImage( ImageID( *root\contex ), 0,0)
            Else
               If *root\drawmode & 1<<1 And Not *root\drawmode & 1<<2
                  VectorSourceColor($FFF0F0F0)
                  FillVectorOutput( )
               EndIf
               ;\\
               If *root\drawmode & 1<<2
                  ; If *root\color\back = - 1 ; test example anchor(b5)
                     CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                        ; good transparent canvas
                        FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ))
                     CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
                        FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), GetSysColor_(#COLOR_BTNFACE) )
                     CompilerElse
                        ;               Protected *style.GtkStyle, *color.GdkColor
                        ;               *style = gtk_widget_get_style_(WindowID(*root\canvas\window))
                        ;               *color = *style\bg[0]                       ; 0=#GtkStateNormal
                        ;               FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), RGB(*color\red >> 8, *color\green >> 8, *color\blue >> 8) )
                        FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), $f0 )
                     CompilerEndIf
                     ; FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), GetWindowColor(*root\canvas\window))
                  ; EndIf
               EndIf
               
               ;\\
               Draw( *root )
            EndIf
            
            ;\\
            If Not ( *root\autosize And *root\haschildren = 0 )
               
               ;\\
               If StartEnum( *root )
                  If *root\contex
                     If Not widgets( )\redraw
                        Continue
                     EndIf
                  EndIf
                  ;
                  If test_focus_show
                     ;\\ draw active containers frame
                     If GetActive( )
                        If GetActive( )\focus = 2 And 
                           GetActive( )\haschildren 
                           ;
                           If GetActive( )\AfterWidget( ) = widgets( )  
                              clip_output_( GetActive( ), [#__c_draw] )
                              draw_mode_(#PB_2DDrawing_Outlined)
                              draw_focus_frame( GetActive( ), $ff0000ff) ; $ffff0000)
                           EndIf
                        EndIf
                        ;
                        ;\\ draw active parent frame
                        If ActiveWindow( )  
                           If ActiveWindow( )\focus = 2 And 
                              ActiveWindow( )\haschildren And  
                              ActiveWindow( ) <> GetActive( )
                              ;
                              If ActiveWindow( )\AfterWidget( ) = widgets( )  
                                 clip_output_( ActiveWindow( ), [#__c_draw] )
                                 draw_mode_(#PB_2DDrawing_Outlined)
                                 draw_focus_frame( ActiveWindow( ), $ff00ff00)
                              EndIf
                           EndIf
                           ;
                           ;\\ draw active child frame
                           If ActiveGadget( ) And
                              ActiveGadget( )\focus = 2 And 
                              ActiveGadget( )\haschildren And  
                              ActiveGadget( ) <> GetActive( ) 
                              
                              If ActiveGadget( )\AfterWidget( ) = widgets( )  
                                 clip_output_( ActiveGadget( ), [#__c_draw] )
                                 draw_mode_(#PB_2DDrawing_Outlined)
                                 draw_focus_frame( ActiveGadget( ), $ff00ff00)
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;
                  ;\\ draw entered widget anchors
                  If Not MouseButtonPress( )
                     If a_entered( ) And
                        a_entered( )\enter And 
                        a_entered( )\haschildren And
                        a_entered( ) <> a_focused( ) ; Not ( a_anchors( ) And a_focused( ) = a_entered( ) )
                                                     ;
                        If a_entered( )\AfterWidget( ) = widgets( )  
                           clip_output_( a_entered( ), [#__c_draw] )
                           a_draw( a_entered( ) )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  Draw( widgets( ))
                  ;
                  ;\\ draw scroll area frames
                  If widgets( )\parent
                     If Not widgets( )\parent\hide
                        If widgets( ) <> widgets( )\parent
                           If widgets( ) = widgets( )\parent\LastWidget( ) 
                              If widgets( )\parent\scroll\v And widgets( )\parent\scroll\h
                                 clip_output_( widgets( )\parent, [#__c_draw] )
                                 draw_mode_alpha_( #PB_2DDrawing_Outlined )
                                 
                                 ;\\ Scroll area coordinate
                                 draw_box_( widgets( )\parent\inner_x( ) + widgets( )\parent\scroll_x( ), widgets( )\parent\inner_y( ) + widgets( )\parent\scroll_y( ), widgets( )\parent\scroll_width( ), widgets( )\parent\scroll_height( ), $FF0000FF )
                                 
                                 ;\\
                                 draw_box_( widgets( )\parent\scroll\h\frame_x( ) + widgets( )\parent\scroll_x( ), widgets( )\parent\scroll\v\frame_y( ) + widgets( )\parent\scroll_y( ), widgets( )\parent\scroll_width( ), widgets( )\parent\scroll_height( ), $FF0000FF )
                                 
                                 ;\\ page coordinate
                                 draw_box_( widgets( )\parent\scroll\h\frame_x( ), widgets( )\parent\scroll\v\frame_y( ), widgets( )\parent\scroll\h\bar\page\len, widgets( )\parent\scroll\v\bar\page\len, $FF00FF00 )
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  ; 
                  ; 
                  If test_focus_show
                     ;\\ draw active containers frame
                     If GetActive( ) 
                        If GetActive( )\focus = 2 And 
                           GetActive( )\haschildren 
                           ;
                           If Not GetActive( )\AfterWidget( ) 
                              If widgets( ) = GetPositionLast( GetActive( ) )
                                 clip_output_( GetActive( ), [#__c_draw] )
                                 draw_mode_(#PB_2DDrawing_Outlined)
                                 draw_focus_frame( GetActive( ), $ff0000ff) ; $ffff0000)
                              EndIf
                           EndIf
                        EndIf
                        ;
                        ;\\ draw active parent frame
                        If ActiveWindow( )  
                           If ActiveWindow( )\focus = 2 And 
                              ActiveWindow( )\haschildren And  
                              ActiveWindow( ) <> GetActive( ) 
                              ;
                              If Not ActiveWindow( )\AfterWidget( ) 
                                 If widgets( ) = GetPositionLast( ActiveWindow( ) )
                                    clip_output_( ActiveWindow( ), [#__c_draw] )
                                    draw_mode_(#PB_2DDrawing_Outlined)
                                    draw_focus_frame( ActiveWindow( ), $ff00ff00)
                                 EndIf
                              EndIf
                           EndIf
                           ; 
                           ;\\ draw active child frame
                           If ActiveGadget( ) And
                              ActiveGadget( )\focus = 2 And 
                              ActiveGadget( )\haschildren And  
                              ActiveGadget( ) <> GetActive( ) 
                              
                              If Not ActiveGadget( )\AfterWidget( ) 
                                 If widgets( ) = GetPositionLast( ActiveGadget( ) )
                                    clip_output_( ActiveGadget( ), [#__c_draw] )
                                    draw_mode_(#PB_2DDrawing_Outlined)
                                    draw_focus_frame( ActiveGadget( ), $ff00ff00)
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;
                  ;\\ draw entered parent anchors
                  If Not MouseButtonPress( )
                     If a_entered( ) And 
                        a_entered( )\enter And 
                        a_entered( )\haschildren And
                        a_entered( ) <> a_focused( ) ; Not ( a_anchors( ) And a_focused( ) = a_entered( ) )
                        
                        If Not a_entered( )\AfterWidget( ) 
                           If widgets( ) = GetPositionLast( a_entered( ) )
                              ; Debug ""+widgets( )\parent\class +" "+ widgets( )\class +" "+ a_entered( )\class +" ("+ widgets( )\text\string +") "+ IsChild( widgets( ), a_entered( ) )
                              
                              ; If IsChild( widgets( ), a_entered( ) )
                              clip_output_( a_entered( ), [#__c_draw] )
                              a_draw( a_entered( ) )
                              ; EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  ;                       
                  StopEnum( )
               EndIf
               
               ;\\ draw clip out transform widgets frame
               If *root\drawmode & 1<<2
                  UnclipOutput( )
                  draw_mode_alpha_( #PB_2DDrawing_Outlined )
                  ;
                  If StartEnum( *root )
                     If Not widgets( )\parent\hide And
                        Not ( Not widgets( )\hide And widgets( )\draw_width( ) > 0 And widgets( )\draw_height( ) > 0 )
                        
                        ; is child
                        If Bool( Not ( widgets( )\parent\__Tab( ) And widgets( )\TabIndex( ) <> widgets( )\parent\__Tab( )\TabState( ) ))
                           draw_roundbox_( widgets( )\inner_x( ), widgets( )\inner_y( ), widgets( )\inner_width( ), widgets( )\inner_height( ), widgets( )\round, widgets( )\round, $ff00ffff )
                        EndIf
                     EndIf
                     StopEnum( )
                  EndIf
               EndIf
               ;
            EndIf
            
            
            ;
            ;\\ draw anchors (movable & sizable)
            If *root\drawmode & 1<<2
               If a_anchors( ) 
                  ;\\
                  If a_focused( ) And
                     a_focused( )\hide = 0 And
                     a_focused( )\anchors And
                     a_focused( )\anchors\mode And
                     a_focused( )\root = *root
                     
                     ; draw key-focused-widget anchors
                     If a_main( ) 
                        clip_output_( a_main( ), [#__c_draw2] )
                     EndIf
                     ;
                     a_draw( a_focused( ) )
                  EndIf
                  
                  ;\\
                  If a_main( ) And
                     a_main( )\root = *root
                     ;
                     If mouse( )\selector
                        ;\\ draw mouse selector
                        Protected selector_backcolor = mouse( )\selector\backcolor & $FFFFFF | 80 << 24
                        Protected selector_framecolor = mouse( )\selector\framecolor & $FFFFFF | 255 << 24
                        ;Protected selector_frontcolor = mouse( )\selector\fontcolor & $FFFFFF | 255 << 24
                        
                        ;
                        ;\\ draw selector back
                        If selector_backcolor
                           draw_mode_alpha_( #PB_2DDrawing_Default )
                           draw_box_( mouse( )\selector\x, mouse( )\selector\y, mouse( )\selector\width, mouse( )\selector\height, selector_backcolor )
                        EndIf
                        ;
                        If Not mouse( )\selector\dotted
                           CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
                              If CurrentFontID( )
                                 DrawingFont( CurrentFontID( ) )
                              EndIf
                           CompilerEndIf
                           Protected selector_text.s = Str( mouse( )\selector\width ) + "x" + Str( mouse( )\selector\height )
                           DrawText( mouse( )\selector\x + (mouse( )\selector\width - TextWidth(selector_text))/2, 
                                     mouse( )\selector\y + (mouse( )\selector\height - TextHeight(selector_text))/2, 
                                     selector_text );, selector_frontcolor, selector_backcolor )
                        EndIf
                        ;
                        ;\\ draw selector frame
                        If selector_framecolor
                           If mouse( )\selector\dotted
                              CustomFilterCallback( @Draw_Datted( ))
                              draw_mode_alpha_( #PB_2DDrawing_CustomFilter | #PB_2DDrawing_Outlined )
                           Else
                              draw_mode_alpha_( #PB_2DDrawing_Outlined )
                           EndIf
                           draw_box_( mouse( )\selector\x, mouse( )\selector\y, mouse( )\selector\width, mouse( )\selector\height, selector_framecolor )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            ;         ;\\ draw current-popup-widget
            ;         If Popup( )
            ;           If Popup( )\root = *root
            ;             ;Debug "popup - draw " + *root\class
            ;             
            ;             Draw( Popup( ) )
            ;           EndIf
            ;         EndIf
            
            ;\\ TEMP
            If *root\drawmode & 1<<2
               ;                If mouse( )\selector
               ;                   DrawingMode(#PB_2DDrawing_Outlined)
               ;                   Box( mouse( )\selector\x, mouse( )\selector\y, mouse( )\selector\width, mouse( )\selector\height, $ff0000ff )
               ;                EndIf
               
               If test_buttons_draw
                  If EnteredButton( ) And
                     a_entered( ) And
                     a_entered( )\bar And
                     a_entered( )\enter And
                     a_entered( )\root = *root And
                     ( a_entered( )\bar\button = EnteredButton( ) Or
                       a_entered( )\bar\button[1] = EnteredButton( ) Or
                       a_entered( )\bar\button[2] = EnteredButton( ) )
                     
                     UnclipOutput( )
                     ;Debug ""+EnteredButton( ) +" "+ EnteredButton( )\x +" "+ EnteredButton( )\y +" "+ EnteredButton( )\width +" "+ EnteredButton( )\height
                     draw_mode_alpha_( #PB_2DDrawing_Outlined )
                     If EnteredButton( )\disable
                        draw_box_( EnteredButton( )\x, EnteredButton( )\y, EnteredButton( )\width, EnteredButton( )\height, $ff0000ff )
                     Else
                        draw_box_( EnteredButton( )\x, EnteredButton( )\y, EnteredButton( )\width, EnteredButton( )\height, $ffff0000 )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;             ; TEST ROW
            ;             If EnteredWidget( ) And EnteredWidget( )\root = *root And EnteredWidget( )\row And EnteredWidget( )\RowEntered( )
            ;                draw_mode_( #PB_2DDrawing_Outlined )
            ;                draw_box_( EnteredWidget( )\inner_x( )+EnteredWidget( )\RowEntered( )\x, EnteredWidget( )\inner_y( )+EnteredWidget( )\RowEntered( )\y, EnteredWidget( )\RowEntered( )\width, EnteredWidget( )\RowEntered( )\height, $ffff0000 )
            ;             EndIf
            
            If test_draw_contex
               If Not *root\contex
                  *root\contex = GrabDrawingImage( #PB_Any, 0,0, OutputWidth( ), OutputHeight( ) )
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn *root
      EndProcedure
      
      ;-
      Procedure.l Update_TreeRows( *this._s_WIDGET, List *rows._s_ROWS( ), _change_ = 1 )
         Protected state.b, X.l, Y.l
         
         With *this
            If Not *this\hide
               ;\\ update coordinate
               If _change_ > 0
                  ; Debug "   " + #PB_Compiler_Procedure + "( )"
                  
                  ;\\ if the item list has changed
                  *this\scroll_width( ) = 0
                  If ListSize( *this\columns( ) )
                     *this\scroll_height( ) = *this\columns( )\height
                  Else
                     *this\scroll_height( ) = 0
                  EndIf
                  
                  ; reset item z - order
                  Protected buttonpos = DPIScaled(6)
                  Protected buttonsize = DPIScaled(9)
                  Protected boxpos = DPIScaled(4)
                  Protected boxsize = buttonsize + DPIScaled(2)
                  Protected bs = Bool( *this\fs )
                  Protected scroll_width
                  
                  ;\\
                  PushListPosition( *rows( ))
                  ForEach *rows( )
                     *this\__rows( )\position = ListIndex( *rows( ))
                     
                     If *rows( )\hide
                        *rows( )\visible = 0
                        Continue
                     EndIf
                     
                     ;\\ init drawing item font
                     draw_font( *rows( ), GetFontID( *this ) )
                     
                     ;\\ draw items height
                     CompilerSelect #PB_Compiler_OS
                        CompilerCase #PB_OS_MacOS
                           *rows( )\height = *rows( )\text\height + 4
                        CompilerCase #PB_OS_Linux
                           CompilerIf Subsystem("qt")
                              *rows( )\height = *rows( )\text\height - 1
                           CompilerElse
                              *rows( )\height = *rows( )\text\height + 3
                           CompilerEndIf
                        CompilerCase #PB_OS_Windows
                           If *this\type = #__type_ListView
                              *rows( )\height = *rows( )\text\height
                           Else
                              *rows( )\height = *rows( )\text\height + 2
                           EndIf
                     CompilerEndSelect
                     
                     *rows( )\y = *this\scroll_height( )
                     
                     If *rows( )\columnindex = 0
                        ;\\ check box size
                        If *this\mode\check
                           *rows( )\checkbox\width  = boxsize
                           *rows( )\checkbox\height = boxsize
                        EndIf
                        
                        ;\\ collapse box size
                        If *this\mode\Lines Or *this\mode\Buttons 
                           *rows( )\buttonbox\width  = buttonsize
                           *rows( )\buttonbox\height = buttonsize
                        EndIf
                        
                        ;\\ sublevel position
                        *this\row\sublevelpos = *rows( )\sublevel * *this\row\sublevelsize 
                        
                        If *this\mode\Buttons Or *this\mode\Lines 
                           *this\row\sublevelpos + (buttonpos+buttonsize) 
                        EndIf
                        
                        ;\\ expanded & collapsed box position
                        If ( *this\mode\Lines Or *this\mode\Buttons ) 
                           *rows( )\buttonbox\x = *this\row\sublevelpos - *rows( )\buttonbox\width - DPIScaled(2)
                           *rows( )\buttonbox\y = ( *rows( )\height ) - ( *rows( )\height + *rows( )\buttonbox\height ) / 2
                        EndIf
                        
                        If *this\mode\check 
                           *this\row\sublevelpos + (boxpos+boxsize)
                        EndIf
                        
                        ;\\ check & option box position
                        If *this\mode\check
                           *rows( )\checkbox\x = *this\row\sublevelpos - *rows( )\checkbox\width
                           *rows( )\checkbox\y = ( *rows( )\height ) - ( *rows( )\height + *rows( )\checkbox\height ) / 2
                        EndIf
                        
                        ;\\ image position
                        If *rows( )\image\id
                           If *this\mode\check
                              ; If Not ( *this\mode\Buttons And *this\mode\Lines )
                              *this\row\sublevelpos + DPIScaled( 2 )
                              ; EndIf
                           EndIf
                           
                           *rows( )\image\x = *this\row\sublevelpos + *this\image\padding\x
                           *rows( )\image\y = ( *rows( )\height - *rows( )\image\height ) / 2
                        EndIf
                        
                     EndIf
                     
                     If *rows( )\columnindex = 0
                        *rows( )\x = *this\columns( )\x
                     Else
                        *rows( )\x = *this\columns( )\x + *this\row\sublevelpos + *this\MarginLine( )\width
                     EndIf
                     
                     ;\\ text position
                     If *rows( )\text\string
                        If *rows( )\columnindex > 0
                           *rows( )\text\x = *this\text\padding\x
                        Else
                           *rows( )\text\x = *this\row\sublevelpos + *this\MarginLine( )\width + *this\text\padding\x
                        EndIf
                        *rows( )\text\y = ( *rows( )\height - *rows( )\text\height ) / 2
                     EndIf
                     
                     ;\\ vertical scroll max value
                     *this\scroll_height( ) + *rows( )\height + Bool( *this\__rows( )\position <> *this\countitems - 1 ) * *this\mode\GridLines
                     
                     ;\\ horizontal scroll max value
                     If *this\type = #__type_ListIcon
                        *rows( )\image\x - DPIScaled(8)
                        *rows( )\checkbox\x - boxsize
                        scroll_width = ( *this\row\sublevelpos + *this\text\padding\x + *this\MarginLine( )\width + *this\columns( )\x + *this\columns( )\width )
                     Else
                        scroll_width = ( *rows( )\x + *rows( )\text\x + *rows( )\text\width + *this\mode\fullSelection + *this\text\padding\x * 2 ) ; - *this\inner_x( )
                     EndIf
                     
                     If *this\scroll_width( ) < scroll_width 
                        *this\scroll_width( ) = scroll_width
                     EndIf
                  Next
                  PopListPosition( *rows( ))
                  
                  ;\\
                  If *this\mode\gridlines
                     ; *this\scroll_height( ) - *this\mode\gridlines
                  EndIf
               EndIf
            EndIf
         EndWith
         
      EndProcedure
      
      Procedure.l Update_TreeVisibleRows( *this._s_WIDGET, List *rows._s_ROWS( ), visible_height.l = 0 )
         Protected result, scroll_y = *this\scroll\v\bar\page\pos
         Protected visible_y.l = 0
         
         PushListPosition( *rows( ))
         
         If Not visible_y
            visible_y = 0;*this\inner_y( ) ; *this\draw_y( ) ;
         EndIf
         If Not visible_height
            If *this\draw_height( ) > *this\inner_height( )
               visible_height = *this\inner_height( ) ;
            Else
               visible_height = *this\draw_height( )
            EndIf
         EndIf
         
         
         ForEach *rows( )
            *rows( )\visible = Bool( Not *rows( )\hide And
                                      (( *rows( )\y - scroll_y ) < visible_y + visible_height ) And
                                      ( *rows( )\y + *rows( )\height - scroll_y ) > visible_y )
            
            ;;Debug ""+*this\class +" "+ visible_height  +" "+ *rows( )\height
            
            If *this\__rows( )\position % 2 = 0
               If *rows( )\color\back = 0
                  *rows( )\color\back = $FFF3F3F3;*rows( )\color\back[1] ; *this\color\back & $FFFFFF | *this\AlphaState24( )
               EndIf
            EndIf
            
            
            ;\\ add new draw list
            If *rows( )\visible And
               AddElement( *this\RowVisibleList( ))
               *this\RowVisibleList( ) = *rows( )
               
               ;\\
               If *rows( )\columnindex = 0
                  If ListSize( *This\Columns( ) ) = 1
                     *this\columns( )\width = *this\inner_width( ) - *this\columns( )\x
                     *rows( )\width  = *this\columns( )\width
                  Else
                     *rows( )\width = *this\columns( )\width + *this\row\sublevelpos + *this\MarginLine( )\width
                  EndIf
               Else
                  ;\\
                  If *rows( )\width <> *this\columns( )\width
                     *rows( )\width = *this\columns( )\width
                  EndIf
               EndIf
               
               ;\\
               If Not *this\RowFirstVisible( )
                  *this\RowFirstVisible( ) = *rows( )
                  ; Debug ""+*this\RowFirstVisible( )\x+" "+*this\RowFirstVisible( )\y
               EndIf
               *this\RowLastVisible( ) = *rows( )
               
               ; Debug ""+*this\RowLastVisible( )\position +" "+ *this\RowLastVisible( )\y
               result = 1
            EndIf
         Next
         
         PopListPosition( *rows( ))
         ProcedureReturn result
      EndProcedure
      
      ;-
      Macro multi_select_rows_( _this_, _current_row_ )
         PushListPosition( *this\__rows( ))
         ForEach *this\__rows( )
            If *this\__rows( )\visible
               If Bool(( *this\RowPressed( )\position >= *this\__rows( )\position And _current_row_\position <= *this\__rows( )\position ) Or ; верх
                       ( *this\RowPressed( )\position <= *this\__rows( )\position And _current_row_\position >= *this\__rows( )\position ))   ; вниз
                  
                  If *this\__rows( )\ColorState( ) <> #__s_2
                     *this\__rows( )\ColorState( ) = #__s_2
                     *this\root\repaint          = #True
                  EndIf
                  
               Else
                  
                  If Not *this\__rows( )\press
                     If *this\__rows( )\ColorState( ) <> #__s_0
                        *this\__rows( )\ColorState( ) = #__s_0
                        *this\root\repaint          = #True
                     EndIf
                  EndIf
                  
               EndIf
            EndIf
         Next
         PopListPosition( *this\__rows( ))
      EndMacro
      
      ;-
      Procedure GetAtPoint( *root._s_root, mouse_x, mouse_y, List *List._s_WIDGET( ), *address = #Null )
         Protected i, a_index, Repaint, *this._s_WIDGET, *e._s_WIDGET
         
         ;\\ get at point address
         If *root\haschildren
            If ListSize( *list( ))
               If *address
                  ChangeCurrentElement( *list( ), *address )
                  PreviousElement( *list( ))
               Else
                  LastElement( *list( ))
               EndIf
;                If MouseButtons( ) And Not MouseButtonPress( )
;                   Debug *root\class
;                EndIf
               Repeat
                  If *list( )\address And
                     *list( )\hide = 0 And
                     *list( )\root = *root And 
                     is_atpoint_( *list( ), mouse_x, mouse_y, [#__c_frame] ) And
                     is_atpoint_( *list( ), mouse_x, mouse_y, [#__c_draw] )
                     
                     ;\\ если переместили виджет то его исключаем
                     If mouse( )\drag
                        If is_drag_move( )
                           If PressedWidget( ) = *list( )
                              Continue
                           EndIf
                           EnteredWidget( ) = *list( )
                           ProcedureReturn 0
                        EndIf
                     EndIf
                     
                     *this = *list( )
                     Break
                  EndIf
               Until PreviousElement( *list( )) = #False
            EndIf
         EndIf
         ;
         ;\\ root no enumWidget
         If Not *this
            If is_atpoint_( *root, mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *root, mouse_x, mouse_y, [#__c_draw] )
               *this = *root
            EndIf
         EndIf
         ;
         ;\\ is integral
         If *this
            ;\\ is integral string bar
            If *this\__String( ) And Not *this\__String( )\hide And
               is_atpoint_( *this\__String( ), mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *this\__String( ), mouse_x, mouse_y, [#__c_draw] )
               *this = *this\__String( )
            EndIf
            ;\\ is integral tab bar
            If *this\__Tab( ) And Not *this\__Tab( )\hide And
               is_atpoint_( *this\__Tab( ), mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *this\__Tab( ), mouse_x, mouse_y, [#__c_draw] )
               *this = *this\__Tab( )
            EndIf
            ;\\ is integral tab bar
            If *this\__Menu( ) And Not *this\__Menu( )\hide And
               is_atpoint_( *this\__Menu( ), mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *this\__Menu( ), mouse_x, mouse_y, [#__c_draw] )
               *this = *this\__Menu( )
            EndIf
            ;\\ is integral scroll bar's
            If *this\scroll
               If *this\scroll\v And Not *this\scroll\v\hide And
                  is_atpoint_( *this\scroll\v, mouse_x, mouse_y, [#__c_frame] ) And
                  is_atpoint_( *this\scroll\v, mouse_x, mouse_y, [#__c_draw] )
                  *this = *this\scroll\v
               EndIf
               If *this\scroll\h And Not *this\scroll\h\hide And
                  is_atpoint_( *this\scroll\h, mouse_x, mouse_y, [#__c_frame] ) And
                  is_atpoint_( *this\scroll\h, mouse_x, mouse_y, [#__c_draw] )
                  *this = *this\scroll\h
               EndIf
            EndIf
         EndIf
         
         If test_atpoint
            Debug ""+*root\class+" "+*root\haschildren ;+" "+ *this\class
         EndIf
         ;
         ;\\ entered anchor index
         If MouseButtonPress( )
            If a_index( ) And 
               a_entered( ) And 
               a_entered( )\anchors\id[a_index( )] And
               a_entered( )\anchors\state
               ;
               If Not mouse( )\drag
                  If *this <> a_entered( ) And 
                     *this\root = a_entered( )\root 
                     ;
                     EnteredWidget( ) = a_entered( )
                     *this = a_entered( )
                  EndIf
               EndIf
            EndIf
         Else
            If Not a_entered( )
               a_entered( ) = a_focused( )
            EndIf
            ;
            If a_entered( )  
               If Not (*this And a_entered( )\root <> *this\root )
                  ;
                  If a_enter( a_entered( ), - 3 )
                     If a_entered( )
                        If ( *this And a_entered( )\placingindex < *this\placingindex ) And 
                           a_entered( ) <> a_focused( ) 
                           ;
                           a_index( ) = 0
                        Else
                           *this = a_entered( )
                        EndIf
                     EndIf
                  Else
                     If a_index( )
                        Debug "a out to parent border "+a_entered( )\enter 
                        
                        ; a_entered( )\enter = 0
                        a_index( ) = 0
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         ;
         ;\\ reset
         If EnteredButton( )
            If a_index( ) Or ( EnteredWidget( ) And
                               EnteredWidget( ) <> *this )
               ;
               If Leaved( EnteredButton( ) )
                  If EnteredWidget( )
                     EnteredWidget( )\root\repaint = #True
                  Else
                     *this\root\repaint = #True
                  EndIf
                  EnteredButton( ) = #Null
               EndIf
            EndIf
         EndIf
         
         ;\\
         If *this
            If Not a_index( )
               If Not MouseButtonPress( )
                  ;\\
                  DoEvent_Button( *this, #__event_MouseMove, mouse_x, mouse_y )
               EndIf
            EndIf
         EndIf
         
         ;\\ do events entered & leaved
         If EnteredWidget( ) <> *this
            LeavedWidget( ) = EnteredWidget( )
            EnteredWidget( ) = *this
            Protected *parent._s_WIDGET 
            
            ;
            If LeavedWidget( ) And Not ( *this And *this\parent = LeavedWidget( ) And is_integral_( *this ) ) And
               LeavedWidget( )\enter > 0
               LeavedWidget( )\enter = 0
               ;
               If is_integral_( LeavedWidget( ) )
                 If LeavedWidget( )\parent And
                   LeavedWidget( )\parent\enter
                  
                     If LeavedWidget( )\parent = *this
                        If is_atpoint_( LeavedWidget( )\parent, mouse_x, mouse_y, [#__c_inner] ) And
                           is_atpoint_( LeavedWidget( )\parent, mouse_x, mouse_y, [#__c_draw] )
                           MouseEnter( LeavedWidget( )\parent )
                        Else
                           LeavedWidget( )\parent\enter = 1
                        EndIf
                     Else
                        LeavedWidget( )\parent\enter = 0
                     EndIf
                  EndIf
               Else
                  If Not a_index( )
                     If Not LeavedWidget( )\anchors
                        If LeavedWidget( )\parent And 
                           LeavedWidget( )\parent\type = #__type_Splitter
                           ;
                           *parent = LeavedWidget( )\parent
                           While *parent And Not *parent\anchors
                              *parent = *parent\parent
                           Wend
                           ;
                           If *parent 
                              If *parent\anchors And 
                                 *parent\enter = - 2
                                 *parent\enter = 0
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               ;
               DoEvents( LeavedWidget( ), #__event_MouseLeave )
               ;
               If is_integral_( LeavedWidget( ) ) And 
                  LeavedWidget( )\parent\enter = 0
                  ;
                  DoEvents( LeavedWidget( )\parent, #__event_MouseLeave, -1, - 2 )
               EndIf
            EndIf
            ;
            ;
            If *this And 
               *this\enter = 0
               
               If is_integral_( *this ) 
                  If *this\parent  
                     If *this\parent\enter = 0
                        If *this\parent\anchors
                           If Not MouseButtonPress( )
                              a_show( *this\parent )
                           EndIf
                        EndIf
                        ;
                        If Not a_index( )
                           *this\parent\enter = - 2
                           DoEvents( *this\parent, #__event_MouseEnter, -1, - 2 )
                        EndIf
                     Else
                        *this\parent\enter = - 2
                        ;
                        ;DoEvents( *this\parent, #__event_StatusChange, -1, - 2 )
                     EndIf
                  EndIf
               Else
                  If Not MouseButtonPress( )
                     If Not a_index( )
                        If *this\anchors
                           a_show( *this )
                        Else
                           If *this\parent And 
                              *this\parent\type = #__type_Splitter
                              ;
                              *parent = *this\parent
                              While *parent And Not *parent\anchors
                                 *parent = *parent\parent
                              Wend
                              ;
                              If *parent
                                 If *parent\anchors
                                    a_show( *parent )
                                    ;
                                    If Not a_index( )
                                       *parent\enter = - 2
                                    EndIf
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               If Not a_index( )
                  *this\enter = 1
                  DoEvents( *this, #__event_MouseEnter )
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn *this
      EndProcedure
      
      Procedure.l DoKeyEvents_ListView( *this._s_WIDGET,List  *rows._s_ROWS( ), eventtype.l )
         Protected Repaint, mouse_x.l = mouse( )\x, mouse_y.l = mouse( )\y
         
         If eventtype = #__event_KeyDown
            Protected *current._s_ROWS
            Protected result, from = - 1
            Static cursor_change, Down
            
            If *this\focus
               
               If *this\mode\clickSelect
                  *current = *this\RowEntered( )
               Else
                  *current = *this\RowFocused( )
               EndIf
               
               Select keyboard( )\key
                  Case #PB_Shortcut_Space
                     If *this\mode\clickSelect
                        If *current\press = #True
                           *current\press       = #False
                           *current\ColorState( ) = #__s_1
                        Else
                           *current\press       = #True
                           *current\ColorState( ) = #__s_2
                           *this\RowFocused( )  = *current
                        EndIf
                        
                        ; listview items change
                        DoEvents( *this, #__event_Change, *current\position, *current )
                        Repaint = 1
                     EndIf
                     
                  Case #PB_Shortcut_PageUp
                     ; TODO scroll to first visible
                     If bar_PageChange( *this\scroll\v, 0 )
                        *this\WidgetChange( ) = 1
                        Repaint               = 1
                     EndIf
                     
                  Case #PB_Shortcut_PageDown
                     ; TODO scroll to last visible
                     If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\end )
                        *this\WidgetChange( ) = 1
                        Repaint               = 1
                     EndIf
                     
                  Case #PB_Shortcut_Up,
                       #PB_Shortcut_Home
                     
                     If *current
                        If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                           ( keyboard( )\key[1] & #PB_Canvas_Control )
                           
                           ; scroll to top
                           If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos - 18 )
                              *this\WidgetChange( ) = 1
                              Repaint               = 1
                           EndIf
                           
                        ElseIf *current\position > 0
                           ; select modifiers key item
                           If ( keyboard( )\key = #PB_Shortcut_Home Or
                                ( keyboard( )\key[1] & #PB_Canvas_Alt ))
                              SelectElement( *rows( ), 0 )
                           Else
                              select_prev_item_( *rows( ), *current\position )
                           EndIf
                           
                           If *current <> *rows( )
                              If *current
                                 set_state_list_( *current, #False )
                              EndIf
                              set_state_list_( *rows( ), #True )
                              
                              If Not *this\mode\clickSelect
                                 *this\RowFocused( ) = *rows( )
                              EndIf
                              
                              If Not keyboard( )\key[1] & #PB_Canvas_Shift
                                 *this\RowEntered( ) = *this\RowFocused( )
                              EndIf
                              
                              If *this\mode\multiSelect
                                 multi_select_rows_( *this, *this\RowFocused( ) )
                              EndIf
                              
                              *current = *rows( )
                              If row_scroll_y_( *this, *current )
                                 *this\WidgetChange( ) = - 1
                              EndIf
                              
                              ; listview items change
                              DoEvents( *this, #__event_Change, *current\position, *current )
                              Repaint = 1
                           EndIf
                           
                        EndIf
                     EndIf
                     
                  Case #PB_Shortcut_Down,
                       #PB_Shortcut_End
                     
                     If *current
                        If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                           ( keyboard( )\key[1] & #PB_Canvas_Control )
                           
                           If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos + 18 )
                              *this\WidgetChange( ) = 1
                              Repaint               = 1
                           EndIf
                           
                        ElseIf *current\position < ( *this\countitems - 1 )
                           ; select modifiers key item
                           If ( keyboard( )\key = #PB_Shortcut_End Or
                                ( keyboard( )\key[1] & #PB_Canvas_Alt ))
                              SelectElement( *rows( ), ( *this\countitems - 1 ))
                           Else
                              select_next_item_( *rows( ), *current\position )
                           EndIf
                           
                           If *current <> *rows( )
                              If *current
                                 set_state_list_( *current, #False )
                              EndIf
                              set_state_list_( *rows( ), #True )
                              
                              If Not *this\mode\clickSelect
                                 *this\RowFocused( ) = *rows( )
                              EndIf
                              
                              If Not keyboard( )\key[1] & #PB_Canvas_Shift
                                 *this\RowEntered( ) = *this\RowFocused( )
                              EndIf
                              
                              If *this\mode\multiSelect
                                 multi_select_rows_( *this, *this\RowFocused( ) )
                              EndIf
                              
                              *current = *rows( )
                              If row_scroll_y_( *this, *current )
                                 *this\WidgetChange( ) = - 1
                              EndIf
                              
                              ; listview items change
                              DoEvents( *this, #__event_Change, *current\position, *current )
                              Repaint = 1
                           EndIf
                           
                           
                        EndIf
                     EndIf
                     
                  Case #PB_Shortcut_Left
                     If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                        ( keyboard( )\key[1] & #PB_Canvas_Control )
                        
                        If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos - ( *this\scroll\h\bar\page\end / 10 ))
                           *this\WidgetChange( ) = 1
                        EndIf
                        Repaint = 1
                     EndIf
                     
                  Case #PB_Shortcut_Right
                     If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                        ( keyboard( )\key[1] & #PB_Canvas_Control )
                        
                        If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos + ( *this\scroll\h\bar\page\end / 10 ))
                           *this\WidgetChange( ) = 1
                        EndIf
                        Repaint = 1
                     EndIf
                     
               EndSelect
               
               If *this\mode\clickSelect
                  *this\RowEntered( ) = *current
               Else
                  *this\RowFocused( ) = *current
               EndIf
               
            EndIf
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      
      Procedure.l DoKeyEvents_Tree( *this._s_WIDGET, List  *rows._s_ROWS( ), eventtype.l )
         Protected result, from = - 1
         Static cursor_change, Down, *row_selected._s_ROWS
         
         With *this
            Select eventtype
               Case #__event_KeyDown
                  
                  Select keyboard( )\key
                     Case #PB_Shortcut_PageUp
                        If bar_PageChange( *this\scroll\v, 0 )
                           *this\WidgetChange( ) = 1
                           result                = 1
                        EndIf
                        
                     Case #PB_Shortcut_PageDown
                        If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\end )
                           *this\WidgetChange( ) = 1
                           result                = 1
                        EndIf
                        
                     Case #PB_Shortcut_Up,
                          #PB_Shortcut_Home
                        If *this\RowFocused( )
                           If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                              ( keyboard( )\key[1] & #PB_Canvas_Control )
                              If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos - 18 )
                                 *this\WidgetChange( ) = 1
                                 result                = 1
                              EndIf
                              
                           ElseIf *this\RowFocused( )\position > 0
                              ; select modifiers key
                              If ( keyboard( )\key = #PB_Shortcut_Home Or
                                   ( keyboard( )\key[1] & #PB_Canvas_Alt ))
                                 SelectElement( *rows( ), 0 )
                              Else
                                 select_prev_item_( *rows( ), *this\RowFocused( )\position )
                              EndIf
                              ;
                              If *this\RowFocused( ) <> *rows( )
                                 If *this\RowFocused( )
                                    If *this\RowFocused( )\_enter
                                       *this\RowFocused( )\ColorState( ) = 1
                                    Else
                                       *this\RowFocused( )\ColorState( ) = 0
                                    EndIf
                                 EndIf
                                 
                                 *row_selected                  = *rows( )
                                 *this\RowFocused( )             = *rows( )
                                 *this\RowFocused( )\ColorState( ) = 2
                                 
                                 If *this\RowFocused( )\y + *this\scroll_y( ) <= 0
                                    If row_scroll_y_( *this, *this\RowFocused( ) )
                                       *this\WidgetChange( ) = - 1
                                    EndIf
                                 EndIf
                                 ; tree items change
                                 DoEvents( *this, #__event_Change, *this\RowFocused( )\position, *this\RowFocused( ) )
                                 result = 1
                              EndIf
                              
                              
                           EndIf
                        EndIf
                        
                     Case #PB_Shortcut_Down,
                          #PB_Shortcut_End
                        If *this\RowFocused( )
                           If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                              ( keyboard( )\key[1] & #PB_Canvas_Control )
                              
                              If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos + 18 )
                                 *this\WidgetChange( ) = 1
                                 result                = 1
                              EndIf
                              
                           ElseIf *this\RowFocused( )\position < ( *this\countitems - 1 )
                              ; select modifiers key
                              If ( keyboard( )\key = #PB_Shortcut_End Or
                                   ( keyboard( )\key[1] & #PB_Canvas_Alt ))
                                 SelectElement( *rows( ), ( *this\countitems - 1 ))
                              Else
                                 select_next_item_( *rows( ), *this\RowFocused( )\position )
                              EndIf
                              
                              If *this\RowFocused( ) <> *rows( )
                                 If *this\RowFocused( )
                                    If *this\RowFocused( )\_enter
                                       *this\RowFocused( )\ColorState( ) = 1
                                    Else
                                       *this\RowFocused( )\ColorState( ) = 0
                                    EndIf
                                 EndIf
                                 
                                 *row_selected                  = *rows( )
                                 *this\RowFocused( )             = *rows( )
                                 *this\RowFocused( )\ColorState( )     = 2
                                 
                                 If *this\RowFocused( )\y >= *this\inner_height( )
                                    If row_scroll_y_( *this, *this\RowFocused( ) )
                                       *this\WidgetChange( ) = - 1
                                    EndIf
                                 EndIf
                                 ;
                                 ; tree items change
                                 DoEvents( *this, #__event_Change, *this\RowFocused( )\position, *this\RowFocused( ) )
                                 result = 1
                              EndIf
                              
                              
                           EndIf
                        EndIf
                        
                     Case #PB_Shortcut_Left
                        If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                           ( keyboard( )\key[1] & #PB_Canvas_Control )
                           
                           If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos - ( *this\scroll\h\bar\page\end / 10 ))
                              *this\WidgetChange( ) = 1
                           EndIf
                           result = 1
                        EndIf
                        
                     Case #PB_Shortcut_Right
                        If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                           ( keyboard( )\key[1] & #PB_Canvas_Control )
                           
                           If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos + ( *this\scroll\h\bar\page\end / 10 ))
                              *this\WidgetChange( ) = 1
                           EndIf
                           result = 1
                        EndIf
                        
                  EndSelect
                  
                  ;EndIf
                  
            EndSelect
         EndWith
         
         ProcedureReturn result
      EndProcedure
      
      
      
      ;-
      Procedure DoEventTimer_Item( )
         ; Debug "  timer"
         Protected result
         Protected scroll_x, scroll_y
         Protected *this._s_WIDGET = PressedWidget( )
         
         If *this
            If *this\root <> root( )
               mouse( )\x = GadgetMouseX( *this\root\canvas\gadget )
               mouse( )\y = GadgetMouseY( *this\root\canvas\gadget )
            EndIf
            
            If Not is_inside_( *this\y[#__c_inner], *this\height[#__c_inner], mouse( )\y ) And *this\scroll\v
               If mouse( )\y < mouse( )\delta\y
                  If Not bar_in_start_( *this\scroll\v\bar )
                     scroll_y = mouse( )\y - ( *this\inner_y( ) )
                     bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos + scroll_y )
                     edit_UpdateText( *this )
                     Debug "scroll v top " + scroll_y + " " + *this\RowFirstVisible( )\position
                     
                  Else
                     ; Debug "scroll v stop top"
                  EndIf
               ElseIf mouse( )\y > mouse( )\delta\y
                  If Not bar_in_stop_( *this\scroll\v\bar )
                     scroll_y = 400;mouse( )\y - ( *this\inner_y( ) + *this\inner_height( ) )
                                   ;bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos + scroll_y )
                                   ;edit_UpdateText( *this )
                     
                     Debug "scroll v bottom " + scroll_y + " " + *this\RowLastVisible( )\position
                     
                     ;               If *this\RowFocused( ) <> *this\RowLastVisible( )
                     ;                 ;                 If *this\RowEntered( )
                     ;                 ;                   *this\RowEntered( )\_enter = 0
                     ;                 ;                   *this\RowEntered( )\ColorState( ) = 0
                     ;                 ;                 EndIf
                     ;                 ;                 *this\RowEntered( ) = *this\RowLastVisible( )
                     ;                 ;                 *this\RowEntered( )\_enter = 1
                     ;                 ;                 *this\RowEntered( )\ColorState( ) = 1
                     ;
                     ;                 If *this\RowFocused( )
                     ;                   ; Debug "scroll v bottom "+ scroll_y +" "+ *this\RowLastVisible( )\position +" "+ *this\RowFocused( )\position
                     ;                   *this\RowFocused( )\_focus = 0
                     ;                   *this\RowFocused( )\ColorState( ) = 0
                     ;                 EndIf
                     ;
                     ;                 ; edit_sel__( *this, *this\RowLastVisible( ), *this\LinePressed( ), *this\RowFocused( ), 0, *this\RowFocused( )\text\len )
                     ;                 *this\RowFocused( ) = *this\RowLastVisible( )
                     ;                 ;*this\RowFocused( ) = SelectElement( *this\__rows( ), *this\RowLastVisible( )\position )
                     ;                 *this\RowFocused( )\_focus = 1
                     ;                 *this\RowFocused( )\ColorState( ) = 1
                     ;                 *this\RowFocused( )\root\repaint = 1
                     ;
                     ;                 Debug *this\RowFocused( )\position
                     ;                 edit_set_sel_( *this, *this\RowFocused( ), *this\LinePressed( ) )
                     ;
                     ;                 *this\root\repaint = 1
                     ;               EndIf
                     
                     ;                 result = 1
                  Else
                     ; Debug "scroll v stop bottom"
                  EndIf
               EndIf
            EndIf
            
            If Not is_inside_( *this\inner_x( ), *this\inner_width( ), mouse( )\x ) And *this\scroll\h
               If mouse( )\x < mouse( )\delta\x
                  If Not bar_in_start_( *this\scroll\h\bar )
                     scroll_x = mouse( )\x - ( *this\inner_x( ) )
                     Debug "scroll h top " + scroll_x
                     bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos + scroll_x )
                     result = 1
                  Else
                     ; Debug "scroll h stop top"
                  EndIf
               ElseIf mouse( )\x > mouse( )\delta\x
                  If Not bar_in_stop_( *this\scroll\h\bar )
                     scroll_x = mouse( )\x - ( *this\inner_x( ) + *this\inner_height( ) )
                     Debug "scroll h bottom " + scroll_x
                     bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos + scroll_x )
                     result = 1
                  Else
                     ; Debug "scroll h stop bottom"
                  EndIf
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure DoEvent_Lines( *this._s_WIDGET, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
         Protected dragged 
         Protected repaint, *line._s_ROWS
         mouse_x - *this\inner_x( )
         mouse_y - *this\inner_y( ) - *this\scroll_y( )
         
         If *this\press
            dragged = mouse( )\drag
         EndIf
         
         ;
         If *this\row
            ; get at point items
            If ListSize( *this\RowVisibleList( ) )
               If Not ( *this\LineEntered( ) And
                        *this\LineEntered( )\visible And
                        *this\LineEntered( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\LineEntered( ), mouse_x, mouse_y )) Or
                          ( dragged And is_inside_( *this\LineEntered( )\y, *this\LineEntered( )\height, mouse_y )) ))
                  
                  ; search entered item
                  LastElement( *this\RowVisibleList( ))
                  Repeat
                     If *this\RowVisibleList( )\visible And
                        *this\RowVisibleList( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\RowVisibleList( ), mouse_x, mouse_y )) Or
                          ( dragged And is_inside_( *this\RowVisibleList( )\y, *this\RowVisibleList( )\height, mouse_y )) )
                        *line = *this\RowVisibleList( )
                        Break
                     EndIf
                  Until PreviousElement( *this\RowVisibleList( )) = #False
               Else
                  *line = *this\LineEntered( )
               EndIf
            ElseIf ListSize( *this\__lines( ) )
               If Not ( *this\LineEntered( ) And
                        *this\LineEntered( )\visible And
                        *this\LineEntered( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\LineEntered( ), mouse_x, mouse_y )) Or
                          ( dragged And is_inside_( *this\LineEntered( )\y, *this\LineEntered( )\height, mouse_y )) ))
                  
                  ; search entered item
                  LastElement( *this\__lines( ))
                  Repeat
                     If *this\__lines( )\visible And
                        *this\__lines( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\__lines( ), mouse_x, mouse_y )) Or
                          ( dragged And is_inside_( *this\__lines( )\y, *this\__lines( )\height, mouse_y )) )
                        *line = *this\__lines( )
                        Break
                     EndIf
                  Until PreviousElement( *this\__lines( )) = #False
               Else
                  *line = *this\LineEntered( )
               EndIf
            EndIf
            
            ;
            If dragged
               If *line = #Null
                  If mouse( )\y < mouse( )\delta\y + *this\inner_y( ) And mouse( )\y <= *this\inner_y( )
                     If *this\RowFirstVisible( ) And Not bar_in_start_( *this\scroll\v\bar )
                        ChangeCurrentElement( *this\__lines( ), *this\RowFirstVisible( ))
                        *line = PreviousElement( *this\__lines( ) )
                        
                        If *line
                           row_scroll_y_( *this, *line )
                        EndIf
                     Else
                        ; *line = *this\RowFirstVisible( )
                     EndIf
                  ElseIf mouse( )\y > mouse( )\delta\y + *this\inner_y( ) And mouse( )\y > *this\inner_y( ) + *this\inner_height( )
                     If *this\RowLastVisible( ) And Not bar_in_stop_( *this\scroll\v\bar )
                        ChangeCurrentElement( *this\__lines( ), *this\RowLastVisible( ))
                        *line = NextElement( *this\__lines( ) )
                        
                        If *line
                           row_scroll_y_( *this, *line )
                        EndIf
                     Else
                        ; *line = *this\RowLastVisible( )
                     EndIf
                  EndIf
               EndIf
            Else
               If eventtype = #__event_MouseMove
                  If *this\enter = #False
                     *line = #Null
                  EndIf
               EndIf
            EndIf
            
            ; change enter/leave state
            If *this\LineEntered( ) <> *line 
               *this\redraw = 1
               
               ; leave state
               If *this\LineEntered( )
                  If *this\LineEntered( )\_enter
                     *this\LineEntered( )\_enter = #False
                     
                     If *this\LineEntered( )\ColorState( ) = #__s_1
                        *this\LineEntered( )\ColorState( ) = #__s_0
                     EndIf
                     
                     If dragged = #PB_Drag_Update
                        ;Debug "le - "
                        
                        If *this\LineEntered( ) And *this\LinePressed( )
                           If mouse_y > ( *this\LineEntered( )\y + *this\LineEntered( )\height / 2 )
                              If *this\LineEntered( ) = *this\LinePressed( )
                                 ;Debug " le bottom  set - Pressed  " +" "+ *this\LineEntered( )\text\string
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_last )
                                 edit_sel_text_( *this, *this\LineEntered( ))
                              ElseIf *this\LineEntered( )\position < *this\LinePressed( )\position
                                 ;Debug "  ^le top remove - " +" "+ *this\LineEntered( )\text\string
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_remove )
                                 edit_sel_text_( *this, SelectElement(*this\__lines( ), *this\LineEntered( )\position + 1))
                              Else
                                 ;Debug " le bottom  set - " +" "+ *this\LineEntered( )\text\string
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_set )
                                 edit_sel_text_( *this, *this\LineEntered( ))
                              EndIf
                           Else
                              If *this\LineEntered( ) = *this\LinePressed( )
                                 ;Debug " le top remove - Pressed  " +" "+ *this\LineEntered( )\text\string
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_first )
                                 edit_sel_text_( *this, *this\LineEntered( ))
                              ElseIf *this\LineEntered( )\position > *this\LinePressed( )\position
                                 ;Debug "  le top remove - " +" "+ *this\LineEntered( )\text\string
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_remove )
                                 edit_sel_text_( *this, SelectElement(*this\__lines( ), *this\LineEntered( )\position - 1))
                              Else
                                 ;Debug " ^le bottom  set - " +" "+ *this\LineEntered( )\text\string
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_set )
                                 edit_sel_text_( *this, *this\LineEntered( ))
                              EndIf
                           EndIf
                        EndIf
                        
                     EndIf
                     
                  EndIf
               EndIf
               
               ; Debug "lines "+*line+" "+*this\LineEntered( )
               *this\LineEntered( ) = *line
               
               ; enter state
               If Not a_index( )
                  If *this\enter
                     If *line And 
                        *line\_enter = 0
                        *line\_enter = 1
                        
                        If *line\ColorState( ) = #__s_0
                           *line\ColorState( ) = #__s_1
                        EndIf
                        
                        If dragged = #PB_Drag_Update
                           ; Debug "en - "
                           
                           *this\LineFocused( )  = *line
                           *this\edit_caret_0( ) = edit_make_caret_position( *this, *line )
                           *this\edit_caret_1( ) = *this\edit_caret_0( ) + *line\text\pos
                           
                           ; это на тот случай если резко выделили строки
                           ; чтобы не пропустить некоторые из них
                           If *this\text\multiLine 
                              If *this\LinePressed( )
                                 PushListPosition( *this\__lines( ) )
                                 ForEach *this\__lines( )
                                    If Bool(( *line\position >= *this\__lines( )\position And
                                              *this\LinePressed( )\position <= *this\__lines( )\position ) Or ; верх
                                            ( *line\position <= *this\__lines( )\position And
                                              *this\LinePressed( )\position >= *this\__lines( )\position ))   ; вниз
                                       
                                       ;
                                       If *this\__lines( )\position <> *this\LinePressed( )\position And
                                          *this\__lines( )\position <> *line\position
                                          
                                          If *this\__lines( )\text\edit[2]\width <> *this\__lines( )\text\width + *this\mode\fullselection
                                             Debug "set - " + " " + *this\__lines( )\text\string
                                             edit_sel_string_( *this, *this\__lines( ), #__sel_to_set )
                                          EndIf
                                       EndIf
                                    Else
                                       ;
                                       If *this\__lines( )\text\edit[2]\width <> 0
                                          Debug " remove - " + " " + *this\__lines( )\text\string
                                          edit_sel_string_( *this, *this\__lines( ), #__sel_to_remove )
                                       EndIf
                                    EndIf
                                 Next
                                 PopListPosition( *this\__lines( ) )
                              EndIf
                           EndIf
                           
                           ;\\ *this\LineEnteredIndex( ) = *line\position
                           edit_sel_string_( *this, *line )
                           edit_sel_text_( *this, *line )
                           
                        EndIf
                     EndIf
                  EndIf
               EndIf
               ;
            Else
               If dragged = #PB_Drag_Update
                  If *this\LinePressed( ) And *this\LineFocused( ) And *this\LineEntered( )
                     
                     *this\edit_caret_0( ) = edit_make_caret_position( *this, *this\LineEntered( ) )
                     If *this\edit_caret_1( ) <> *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                        *this\edit_caret_1( ) = *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                        edit_sel_string_( *this, *this\LineEntered( ) )
                        edit_sel_text_( *this, *this\LineEntered( ) )
                     EndIf
                  EndIf
                  ;                 Else
                  ;                    If *this\LineEntered( )
                  ;                       *this\edit_caret_0( ) = edit_make_caret_position( *this, *this\LineEntered( ) )
                  ;                       ;Debug *this\edit_caret_0( )
                  ;                       
                  ;                       If *this\edit_caret_1( ) <> *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                  ;                          *this\edit_caret_1( ) = *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                  ;                          *this\edit_caret_2( ) = *this\edit_caret_1( )
                  ;                          
                  ;                          edit_sel_string_( *this, *this\LineEntered( ) )
                  ;                          edit_sel_text_( *this, *this\LineEntered( ) )
                  ;                       EndIf
                  ;                    EndIf  
               EndIf
            EndIf
            
            
            ;
            If eventtype = #__event_Focus
               PushListPosition( *this\__lines( ) )
               ForEach *this\__lines( )
                  If *this\__lines( )\_focus
                     If *this\__lines( )\ColorState( ) = #__s_3
                        *this\__lines( )\ColorState( ) = #__s_2
                        
                        *this\root\repaint = #True
                     EndIf
                  EndIf
               Next
               PopListPosition( *this\__lines( ) )
            EndIf
            
            ;
            If eventtype = #__event_LostFocus
               PushListPosition( *this\__lines( ) )
               ForEach *this\__lines( )
                  If *this\__lines( )\_focus
                     If *this\__lines( )\ColorState( ) = #__s_2
                        *this\__lines( )\ColorState( ) = #__s_3
                        
                        *this\root\repaint = #True
                     EndIf
                  EndIf
               Next
               PopListPosition( *this\__lines( ) )
            EndIf
            
            ;
            If eventtype = #__event_Down
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *this\LineEntered( )
                     *this\LinePressed( ) = *this\LineEntered( )
                     
                     If *this\LinePressed( )\press = #False
                        *this\LinePressed( )\press = #True
                     EndIf
                     
                     If *this\LineFocused( ) <> *this\LineEntered( )
                        PushListPosition( *this\__lines( ) )
                        ForEach *this\__lines( )
                           If *this\__lines( )\_focus <> 0
                              *this\__lines( )\_focus = 0
                           EndIf
                           
                           If *this\__lines( )\ColorState( ) <> #__s_0
                              *this\__lines( )\ColorState( ) = #__s_0
                           EndIf
                        Next
                        PopListPosition( *this\__lines( ) )
                        
                        *this\LineFocused( )      = *this\LineEntered( )
                        *this\LineFocusedIndex( ) = *this\LineFocused( )\position
                        
                        If *this\LineFocused( )\_focus = 0
                           *this\LineFocused( )\_focus = 1
                        EndIf
                        *this\LineFocused( )\ColorState( ) = #__s_2
                     EndIf
                     
                     
                     If mouse( )\click = 1
                        *this\edit_caret_0( ) = edit_make_caret_position( *this, *this\LineEntered( ) )
                        ;Debug *this\edit_caret_0( )
                        
                        If *this\edit_caret_1( ) <> *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                           *this\edit_caret_1( ) = *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                           *this\edit_caret_2( ) = *this\edit_caret_1( )
                           
                           *this\LinePressedIndex( )            = *this\LineEntered( )\position ;????
                           *this\LineEntered( )\edit_caret_1( ) = *this\edit_caret_1( ) - *this\LineEntered( )\text\pos
                           
                           ;
                           edit_sel_reset_( *this )
                           
                           edit_sel_string_( *this, *this\LineEntered( ) )
                           edit_sel_text_( *this, *this\LineEntered( ) )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;
            If eventtype = #__event_Left2Click
               ;Debug "edit - Left2Click"
               *this\edit_caret_1( ) = edit_sel_stop_word( *this, *this\edit_caret_0( ), *this\LineEntered( ) )
               *this\edit_caret_2( ) = edit_sel_start_word( *this, *this\edit_caret_0( ) + 1, *this\LineEntered( ) )
               
               edit_sel_string_( *this, *this\LineEntered( ) )
               edit_sel_text_( *this, *this\LineEntered( ) )
            EndIf
            
            ;
            If eventtype = #__event_Left3Click
               ;Debug "edit - Left3Click"
               *this\edit_caret_2( ) = *this\LineEntered( )\text\pos
               *this\edit_caret_1( ) = *this\LineEntered( )\text\pos + *this\LineEntered( )\text\len
               
               edit_sel_string_( *this, *this\LineEntered( ) )
               edit_sel_text_( *this, *this\LineEntered( ) )
            EndIf
            
            ;
            If eventtype = #__event_Up
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *this\LinePressed( )
                     If *this\LinePressed( )\press = #True
                        *this\LinePressed( )\press = #False
                        
                        If *this\LinePressed( )\_focus = 0
                           If *this\LinePressed( )\_enter
                              *this\LinePressed( )\ColorState( ) = #__s_1
                           Else
                              *this\LinePressed( )\ColorState( ) = #__s_0
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ edit key events
            If eventtype = #__event_Input Or
               eventtype = #__event_KeyDown Or
               eventtype = #__event_KeyUp
               
               Static _caret_last_pos_, DoubleClick.i
               Protected i.i, caret.i
               
               Protected Item.i, String.s
               Protected _line_, _step_ = 1, _caret_min_ = 0, _caret_max_ = *this\__lines( )\text\len, _line_first_ = 0, _line_last_ = *this\countitems - 1
               Protected page_height = *this\inner_height( )
               
               With *this
                  Select EventType
                     Case #__event_Input ; - Input ( key )
                        If Not keyboard( )\key[1] & #PB_Canvas_Control
                           If Not *this\notify And keyboard( )\input
                              
                              edit_insert_text( *this, Chr( keyboard( )\input ))
                              
                           EndIf
                        EndIf
                        
                     Case #__event_KeyUp
                        ; Чтобы перерисовать
                        ; рамку вокруг едитора
                        ; reset all errors
                        If *this\notify
                           *this\notify = 0
                           ProcedureReturn - 1
                        EndIf
                        
                        
                     Case #__event_KeyDown
                        Select keyboard( )\key
                           Case #PB_Shortcut_Home
                              Repaint = edit_key_home_( *this )
                              
                           Case #PB_Shortcut_End
                              Repaint = edit_key_end_( *this )
                              
                           Case #PB_Shortcut_PageUp : Debug "key PageUp"
                              Repaint = edit_key_page_up_down_( *this, - 1, 1 )
                              
                           Case #PB_Shortcut_PageDown : Debug "key PageDown"
                              Repaint = edit_key_page_up_down_( *this, 1, 1 )
                              
                           Case #PB_Shortcut_Up       ; Ok
                              If *this\LineFocused( ) And *this\edit_caret_1( ) > 0
                                 If keyboard( )\key[1] & #PB_Canvas_Shift
                                    If *this\LineFocused( ) = *this\LinePressed( )
                                       ;Debug " le top remove - Pressed  " +" "+ *this\LineFocused( )\text\string
                                       edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_first )
                                       edit_sel_text_( *this, *this\LineFocused( ))
                                    ElseIf *this\LineFocused( )\position > *this\LinePressed( )\position
                                       ;Debug "  le top remove - " +" "+ *this\LineFocused( )\text\string
                                       edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_remove )
                                       edit_sel_text_( *this, SelectElement(*this\__lines( ), *this\LineFocused( )\position - 1))
                                    Else
                                       ;Debug " ^le bottom  set - " +" "+ *this\LineFocused( )\text\string
                                       edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_set )
                                       edit_sel_text_( *this, *this\LineFocused( ))
                                    EndIf
                                 EndIf
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Alt
                                    *this\edit_caret_1( ) = *this\LineFocused( )\text\pos
                                    *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
                                 Else
                                    If *this\LineFocused( )\position > 0
                                       *this\LineFocused( )\ColorState( ) = #__s_0
                                       *this\LineFocused( )             = SelectElement( *this\__lines( ), *this\LineFocused( )\position - 1 )
                                       *this\LineFocused( )\ColorState( ) = #__s_1
                                       
                                       If *this\edit_caret_0( ) > *this\LineFocused( )\text\len
                                          *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                       Else
                                          *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\edit_caret_0( )
                                       EndIf
                                    Else
                                       *this\edit_caret_1( ) = *this\LineFocused( )\text\pos
                                    EndIf
                                 EndIf
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                                    edit_sel_reset_( *this )
                                    
                                    If *this\LinePressed( ) <> *this\LineFocused( )
                                       If *this\LinePressed( ) And
                                          *this\LinePressed( )\press
                                          *this\LinePressed( )\press = #False
                                       EndIf
                                       *this\LinePressed( )       = *this\LineFocused( )
                                       *this\LinePressed( )\press = #True
                                    EndIf
                                    
                                    *this\edit_caret_2( ) = *this\edit_caret_1( )
                                 EndIf
                                 
                                 edit_sel_string_( *this, *this\LineFocused( ) )
                                 edit_sel_text_( *this, *this\LineFocused( ) )
                              EndIf
                              
                           Case #PB_Shortcut_Down     ; Ok
                              If *this\LineFocused( ) And *this\edit_caret_1( ) < *this\text\len
                                 If keyboard( )\key[1] & #PB_Canvas_Shift
                                    If *this\LineFocused( ) = *this\LinePressed( )
                                       ;Debug " le bottom  set - Pressed  " +" "+ *this\LineFocused( )\text\string
                                       edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_last )
                                       edit_sel_text_( *this, *this\LineFocused( ))
                                    ElseIf *this\LineFocused( )\position < *this\LinePressed( )\position
                                       ;Debug "  ^le top remove - " +" "+ *this\LineFocused( )\text\string
                                       edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_remove )
                                       edit_sel_text_( *this, SelectElement(*this\__lines( ), *this\LineFocused( )\position + 1))
                                    Else
                                       ;Debug " le bottom  set - " +" "+ *this\LineFocused( )\text\string
                                       edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_set )
                                       edit_sel_text_( *this, *this\LineFocused( ))
                                    EndIf
                                 EndIf
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Alt
                                    *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                    *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
                                 Else
                                    If *this\LineFocused( )\position < ( *this\countitems - 1 )
                                       *this\LineFocused( )\ColorState( ) = #__s_0
                                       *this\LineFocused( )             = SelectElement( *this\__lines( ), *this\LineFocused( )\position + 1 )
                                       *this\LineFocused( )\ColorState( ) = #__s_1
                                       
                                       If *this\edit_caret_0( ) > *this\LineFocused( )\text\len
                                          *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                       Else
                                          *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\edit_caret_0( )
                                       EndIf
                                    Else
                                       *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                    EndIf
                                 EndIf
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                                    edit_sel_reset_( *this )
                                    
                                    If *this\LinePressed( ) <> *this\LineFocused( )
                                       If *this\LinePressed( ) And
                                          *this\LinePressed( )\press
                                          *this\LinePressed( )\press = #False
                                       EndIf
                                       *this\LinePressed( )       = *this\LineFocused( )
                                       *this\LinePressed( )\press = #True
                                    EndIf
                                    
                                    *this\edit_caret_2( ) = *this\edit_caret_1( )
                                 EndIf
                                 
                                 edit_sel_string_( *this, *this\LineFocused( ) )
                                 edit_sel_text_( *this, *this\LineFocused( ) )
                              EndIf
                              
                           Case #PB_Shortcut_Left     ; Ok
                              If *this\LineFocused( ) And *this\edit_caret_1( ) > 0
                                 If *this\edit_caret_1( ) > *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                    *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                 EndIf
                                 
                                 If *this\edit_caret_1( ) = *this\LineFocused( )\text\pos
                                    If *this\LineFocused( )\position > 0
                                       *this\LineFocused( )\ColorState( ) = #__s_0
                                       *this\LineFocused( )             = SelectElement( *this\__lines( ), *this\LineFocused( )\position - 1 )
                                       *this\LineFocused( )\ColorState( ) = #__s_1
                                    EndIf
                                 EndIf
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Alt
                                    *this\edit_caret_1( ) = edit_sel_start_word( *this, *this\edit_caret_0( ) - 1, *this\LineFocused( ) )
                                 Else
                                    *this\edit_caret_1( ) - 1
                                 EndIf
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                                    edit_sel_reset_( *this )
                                    
                                    *this\edit_caret_2( ) = *this\edit_caret_1( )
                                 EndIf
                                 
                                 *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
                                 
                                 edit_sel_string_( *this, *this\LineFocused( ) )
                                 edit_sel_text_( *this, *this\LineFocused( ) )
                              EndIf
                              
                           Case #PB_Shortcut_Right    ; Ok
                              If *this\LineFocused( ) And *this\edit_caret_1( ) < *this\text\len
                                 If *this\edit_caret_1( ) > *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                    *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                 EndIf
                                 
                                 If *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                    If *this\LineFocused( )\position < *this\countitems - 1
                                       
                                       If keyboard( )\key[1] & #PB_Canvas_Shift
                                          If *this\LineFocused( ) = *this\LinePressed( )
                                             ;Debug " le bottom  set - Pressed  " +" "+ *this\LineFocused( )\text\string
                                             edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_last )
                                             edit_sel_text_( *this, *this\LineFocused( ))
                                          ElseIf *this\LineFocused( )\position < *this\LinePressed( )\position
                                             ;Debug "  ^le top remove - " +" "+ *this\LineFocused( )\text\string
                                             edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_remove )
                                             edit_sel_text_( *this, SelectElement(*this\__lines( ), *this\LineFocused( )\position + 1))
                                          Else
                                             ;Debug " le bottom  set - " +" "+ *this\LineFocused( )\text\string
                                             edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_set )
                                             edit_sel_text_( *this, *this\LineFocused( ))
                                          EndIf
                                       EndIf
                                       
                                       *this\LineFocused( )\ColorState( ) = #__s_0
                                       *this\LineFocused( )             = SelectElement( *this\__lines( ), *this\LineFocused( )\position + 1 )
                                       *this\LineFocused( )\ColorState( ) = #__s_1
                                    EndIf
                                 EndIf
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Alt
                                    *this\edit_caret_1( ) = edit_sel_stop_word( *this, *this\edit_caret_0( ) + 1, *this\LineFocused( ) )
                                 Else
                                    *this\edit_caret_1( ) + 1
                                 EndIf
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                                    edit_sel_reset_( *this )
                                    
                                    *this\edit_caret_2( ) = *this\edit_caret_1( )
                                 EndIf
                                 
                                 *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
                                 
                                 edit_sel_string_( *this, *this\LineFocused( ) )
                                 edit_sel_text_( *this, *this\LineFocused( ) )
                              EndIf
                              
                           Case #PB_Shortcut_Back
                              If Not *this\notify
                                 Repaint = edit_key_backup_( *this )
                              EndIf
                              
                           Case #PB_Shortcut_Delete
                              If Not *this\notify
                                 Repaint = edit_key_delete_( *this )
                              EndIf
                              
                           Case #PB_Shortcut_Return
                              If Not *this\notify
                                 Repaint = edit_key_return_( *this )
                              EndIf
                              
                              
                           Case #PB_Shortcut_A        ; Ok
                              If keyboard( )\key[1] & #PB_Canvas_Control
                                 If *this\text\edit[2]\len <> *this\text\len
                                    
                                    ; select first and last items
                                    *this\LinePressedIndex( ) = *this\countitems - 1
                                    *this\LineFocused( )      = SelectElement( *this\__lines( ), 0 )
                                    
                                    edit_sel_text_( *this, #PB_All )
                                    
                                    Repaint = 1
                                 EndIf
                              EndIf
                              
                           Case #PB_Shortcut_C, #PB_Shortcut_X
                              If keyboard( )\key[1] & #PB_Canvas_Control
                                 If *this\text\edit[2]\len
                                    SetClipboardText( *this\text\edit[2]\string )
                                    
                                    If keyboard( )\key = #PB_Shortcut_X
                                       edit_ClearItems( *this )
                                    EndIf
                                 EndIf
                              EndIf
                              
                           Case #PB_Shortcut_V
                              ; edit_key_v_
                              If keyboard( )\key[1] & #PB_Canvas_Control
                                 If *this\text\editable
                                    Protected Text.s = GetClipboardText( )
                                    
                                    If Not *this\text\multiLine
                                       Text = ReplaceString( Text, #LFCR$, #LF$ )
                                       Text = ReplaceString( Text, #CRLF$, #LF$ )
                                       Text = ReplaceString( Text, #CR$, #LF$ )
                                       Text = RemoveString( Text, #LF$ )
                                    EndIf
                                    
                                    edit_insert_text( *this, Text )
                                 EndIf
                              EndIf
                              
                        EndSelect
                        
                        Select keyboard( )\key
                           Case #PB_Shortcut_Home,
                                #PB_Shortcut_End,
                                #PB_Shortcut_PageUp,
                                #PB_Shortcut_PageDown,
                                #PB_Shortcut_Up,
                                #PB_Shortcut_Down,
                                #PB_Shortcut_Left,
                                #PB_Shortcut_Right,
                                #PB_Shortcut_Delete,
                                #PB_Shortcut_Return ;, #PB_Shortcut_back
                              
                              If Not Repaint
                                 *this\notify = - 1
                                 ProcedureReturn - 1
                              EndIf
                              
                           Case #PB_Shortcut_A,
                                #PB_Shortcut_C,
                                #PB_Shortcut_X,
                                #PB_Shortcut_V
                              
                        EndSelect
                        
                  EndSelect
               EndWith
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure DoEvent_Rows( *this._s_WIDGET, List *rows._s_ROWS( ), eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
         Protected dragged = Bool( mouse( )\drag And *this\press )
         Protected repaint, *row._s_ROWS
         mouse_x - *this\inner_x( ) ; - *this\scroll_x( )
         mouse_y - *this\inner_y( ) - *this\scroll_y( )
         
         ;
         If *this\row
            ;Debug ""+*this\class +" "+ ClassFromEvent(eventtype)
            
            ;\\ search at point entered items
            If Not mouse( )\drop Or *this\drop
               If MouseEnter( *this )
                  If ListSize( *this\RowVisibleList( ) )
                     If *this\RowEntered( ) And
                        *this\RowEntered( )\visible And
                        Not *this\RowEntered( )\hide And
                        is_atpoint_( *this\RowEntered( ), mouse_x, mouse_y )
                        *row = *this\RowEntered( )
                     Else
                        LastElement( *this\RowVisibleList( ))
                        Repeat
                           If *this\RowVisibleList( )\visible And
                              Not *this\RowVisibleList( )\hide And
                              is_atpoint_( *this\RowVisibleList( ), mouse_x, mouse_y )
                              *row = *this\RowVisibleList( )
                              Break
                           EndIf
                        Until PreviousElement( *this\RowVisibleList( )) = #False
                     EndIf
                     
                  ElseIf ListSize( *rows( ) )
                     If *this\RowEntered( ) And
                        *this\RowEntered( )\visible And
                        Not *this\RowEntered( )\hide And
                        is_atpoint_( *this\RowEntered( ), mouse_x, mouse_y )
                        *row = *this\RowEntered( )
                     Else
                        LastElement( *rows( ))
                        Repeat
                           If *rows( )\visible And
                              Not *rows( )\hide And
                              is_atpoint_( *rows( ), mouse_x, mouse_y )
                              *row = *rows( )
                              Break
                           EndIf
                        Until PreviousElement( *rows( )) = #False
                     EndIf
                  EndIf
                  
               Else
                  
                  If dragged 
                     If eventtype = #__event_MouseMove
                        If is_inside_( *this\x, *this\width, mouse( )\x )
                           If mouse( )\y <= mouse( )\delta\y + *this\inner_y( ) And mouse( )\y <= *this\inner_y( )
                              If *this\RowFirstVisible( ) And Not bar_in_start_( *this\scroll\v\bar )
                                 ChangeCurrentElement( *rows( ), *this\RowFirstVisible( ))
                                 *row = PreviousElement( *rows( ) )
                                 
                                 If *row
                                    row_scroll_y_( *this, *row )
                                 EndIf
                              Else
                                 *row = *this\RowFirstVisible( )
                              EndIf
                           ElseIf mouse( )\y >= mouse( )\delta\y + *this\inner_y( ) And
                                  mouse( )\y >= *this\inner_y( ) + *this\inner_height( )
                              If *this\RowLastVisible( ) And Not bar_in_stop_( *this\scroll\v\bar )
                                 ChangeCurrentElement( *rows( ), *this\RowLastVisible( ))
                                 *row = NextElement( *rows( ) )
                                 
                                 If *row
                                    row_scroll_y_( *this, *row )
                                 EndIf
                              Else
                                 *row = *this\RowLastVisible( )
                              EndIf
                           EndIf
                        EndIf
                        If *row = 0
                           ProcedureReturn 0
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ change enter/leave state  And *this\press = 0
            If *this\RowEntered( ) <> *row; ;And Not ( ( *this\press And Not mouse( )\drop ) And Not *row );And Not *this\mode\multiSelect )
                                           ;
                                           ;\\ leave state
               If *this\RowEntered( )
                  If *this\RowEntered( )\_enter
                     *this\RowEntered( )\_enter = 0
                     
                     If ( *this\press And Not mouse( )\drop ) And
                        Not *this\mode\multiSelect And
                        Not *this\mode\clickSelect
                        
                        If *this\RowEntered( )\ColorState( ) = #__s_2
                           *this\RowEntered( )\ColorState( ) = #__s_0
                        EndIf
                     Else
                        If *this\RowEntered( )\ColorState( ) = #__s_1
                           *this\RowEntered( )\ColorState( ) = #__s_0
                        EndIf
                        
                        If *this\RowEntered( )\_focus
                           If *this\RowEntered( )\ColorState( ) <> #__s_2
                              *this\RowEntered( )\ColorState( ) = #__s_3
                              *this\root\repaint              = #True
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;
               *this\RowLeaved( )  = *this\RowEntered( )
               *this\RowEntered( ) = *row
               ;
               ;\\ enter state
               If *row
                  ;\\
                  If *this\RowPressed( )
                     If *this\mode\multiSelect
                        multi_select_rows_( *this, *row )
                     EndIf
                  EndIf
                  
                  ;\\
                  If Not a_index( )
                     If *row\_enter = 0
                        *row\_enter = 1
                        
                        If ( *this\press And Not mouse( )\drop ) And ( *this\mode\clickSelect = 0 Or
                                                                       ( *this\mode\clickSelect And *this\mode\multiSelect ))
                           If *row\ColorState( ) = #__s_0
                              *row\ColorState( ) = #__s_2
                           EndIf
                        Else
                           If *row\ColorState( ) = #__s_0
                              *row\ColorState( ) = #__s_1
                           EndIf
                           
                           If *row\_focus
                              If *row\ColorState( ) <> #__s_2
                                 *row\ColorState( ) = #__s_1
                              EndIf
                           EndIf
                        EndIf
                        
                        ;\\ update non-focus status
                        If Not ( *this\RowLeaved( ) = #Null And *row = *this\RowFocused( ) And
                                 Not ( *this\press And Not *this\mode\clickSelect And Not *this\mode\multiSelect ) )
                           ; Debug " enter-items status change"
                           
                           DoEvents(*this, #__event_StatusChange, *row\position)
                        Else
                           *this\root\repaint = #True
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
               ElseIf *this\press = 0 And
                      Not ( *this\RowLeaved( ) = *this\RowFocused( ) And 
                            Not ( *this\press And Not *this\mode\clickSelect And Not *this\mode\multiSelect ))
                  ; Debug " leave-items status change"
                  
                  If *this\RowFocused( )
                     DoEvents(*this, #__event_StatusChange, *this\RowFocused( )\position)
                  ElseIf *this\RowLeaved( )
                     DoEvents(*this, #__event_StatusChange, *this\RowLeaved( )\position)
                  EndIf
               EndIf
               ;
            EndIf
            
            ;\\ drag & drop state
            If mouse( )\drop
               If *this\drop
                  If *this\RowEntered( ) And
                     *this\RowEntered( )\_enter
                     
                     If ( mouse_y - *this\RowEntered( )\y ) > *this\RowEntered( )\height / 2
                        If *this\RowEntered( )\_enter <> 1
                           *this\RowEntered( )\_enter = 1
                           ; Debug "-1 (+1)"
                           *this\root\repaint = 1
                        EndIf
                     Else
                        If *this\RowEntered( )\_enter <> - 1
                           *this\RowEntered( )\_enter = - 1
                           ; Debug "+1 (-1)"
                           *this\root\repaint = 1
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If mouse( )\drop
               If PressedWidget( ) And PressedWidget( )\row
                  If PressedWidget( )\RowPressed( )
                     PressedWidget( )\RowFocusedIndex( ) = PressedWidget( )\RowPressed( )\position
                     
                     If PressedWidget( )\RowFocused( )
                        PressedWidget( )\RowFocused( )\_focus = 0
                        PressedWidget( )\RowFocused( )\ColorState( ) = #__s_0
                     EndIf
                     
                     PressedWidget( )\RowFocused( )       = PressedWidget( )\RowPressed( )
                     PressedWidget( )\RowPressed( )\press = 0
                     PressedWidget( )\RowPressed( )       = 0
                     
                     If PressedWidget( )\RowFocused( )
                        PressedWidget( )\RowFocused( )\_focus = 1
                        PressedWidget( )\RowFocused( )\ColorState( ) = #__s_2
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_MouseEnter
            EndIf
            
            ;\\ ok
            If eventtype = #__event_Focus
               ;\\
               If *this\mode\multiSelect Or *this\mode\clickSelect
                  PushListPosition( *rows( ) )
                  ForEach *rows( )
                     If *rows( ) <> *this\RowFocused( )
                        If *rows( )\ColorState( ) = #__s_3
                           *rows( )\ColorState( ) = #__s_2
                           *this\root\repaint          = 1
                        EndIf
                     EndIf
                  Next
                  PopListPosition( *rows( ) )
               EndIf
               ;;Debug "fffffffocus"
               ;\\
               If *this\RowFocused( ) 
                  ; Debug "     fffffffocus "+*this\RowFocused( )\_focus
                  If *this\RowFocused( )\_focus  And
                     *this\RowFocused( )\ColorState( ) = #__s_3
                     
                     ;
                     *this\RowFocusedIndex( )        = *this\RowFocused( )\position
                     *this\RowFocused( )\ColorState( ) = #__s_2
                     *this\root\repaint              = #True
                     
                     ;\\
                     If *this\RowFocused( )\ScrollToActive( - 1 )
                        *this\RowFocused( )\ScrollToActive( 1 )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ ok
            If eventtype = #__event_LostFocus
               If *this\mode\multiSelect Or *this\mode\clickSelect
                  PushListPosition( *rows( ) )
                  ForEach *rows( )
                     If *rows( ) <> *this\RowFocused( )
                        If *rows( )\ColorState( ) = #__s_2
                           *rows( )\ColorState( ) = #__s_3
                           *this\root\repaint          = 1
                        EndIf
                     EndIf
                  Next
                  PopListPosition( *rows( ) )
               EndIf
               
               ;\\
               If *this\RowFocused( )
                  ; Debug ""+*this\x+" "+*this\y ;????????????????????
                  If *this\RowFocused( )\_focus
                     *this\RowFocused( )\ColorState( ) = #__s_3
                     ; DoEvents(*this, #__event_StatusChange, *this\RowFocused( )\position)
                     *this\root\repaint              = 1
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_Down
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *this\RowEntered( ) And Not EnteredButton( )
                     *this\RowFocusedIndex( ) = *this\RowEntered( )\position
                     
                     ;\\
                     If *this\mode\multiSelect And Not *this\mode\clickSelect
                        PushListPosition( *rows( ) )
                        ForEach *rows( )
                           If *rows( )\ColorState( ) <> #__s_0
                              *rows( )\ColorState( ) = #__s_0
                              
                              ;                               If *rows( )\focus > 0
                              ;                                  Debug " multiselect " + *rows( )\focus + " " + *rows( )\text\string
                              ;                               EndIf
                              
                              If Not *rows( )\_enter
                                 If *rows( )\_focus <> 0
                                    *rows( )\_focus = 0
                                 EndIf
                              EndIf
                           EndIf
                        Next
                        PopListPosition( *rows( ) )
                     EndIf
                     
                     *this\RowPressed( ) = *this\RowEntered( )
                     
                     ;\\
                     If *this\mode\clickSelect
                        *this\RowPressed( )\press ! 1
                        If *this\RowPressed( )\press
                           *this\RowPressed( )\ColorState( ) = #__s_2
                        Else
                           *this\RowPressed( )\ColorState( ) = #__s_1
                        EndIf
                        ;
                        ;    ; status-change
                        ;    DoEvents(*this, #__event_StatusChange, *this\RowPressed( )\position)
                     Else
                        *this\RowPressed( )\press       = 1
                        *this\RowPressed( )\ColorState( ) = #__s_2
                        
                        If *this\RowPressed( ) <> *this\RowFocused( )
                           If *this\RowFocused( ) And
                              *this\RowFocused( )\ColorState( ) = #__s_2
                              *this\RowFocused( )\ColorState( ) = #__s_3
                              ;
                              ; status-lostfocus
                              If *this\RowLeaved( ) <> *this\RowFocused( )
                                 *this\RowLeaved( ) = *this\RowFocused( )
                                 DoEvents(*this, #__event_StatusChange, *this\RowFocused( )\position)
                              EndIf
                           EndIf
                           
                           ; status-focus
                           DoEvents(*this, #__event_StatusChange, *this\RowPressed( )\position)
                        EndIf
                     EndIf
                     ;
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_DragStart ; Ok
                                              ;               If *this\RowPressed( )
                                              ;                 If *this\RowFocused( )
                                              ;                   If *this\RowFocused( )\_focus = 1
                                              ; ;                     *this\RowFocused( )\_focus = 0
                                              ; ;
                                              ; ;                     *this\RowFocused( )\ColorState( ) = #__s_0
                                              ; ;
                                              ; ;                      Debug "change5"
                                              ; ;                     DoEvents(*this, #__event_StatusChange, *this\RowFocused( )\position)
                                              ; ;                     ;*this\root\repaint = #True
                                              ;                   EndIf
                                              ;                 EndIf
                                              ;
                                              ;                 *this\RowFocused( ) = *this\RowPressed( )
                                              ;               EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_Drop ; Ok
               If *this\RowEntered( )
                  *this\RowFocusedIndex( ) = *this\RowEntered( )\position
               EndIf
               ;           If *this\RowFocused( )
               ;             ;             Debug "drop p - "+*this\RowPressed( ) +" "+ *this\RowPressed( )\text\string +" "+ *this\RowPressed( )\press +" "+ *this\RowPressed( )\_enter +" "+ *this\RowPressed( )\_focus
               ;             ;             ;Debug "drop e - "+*this\RowEntered( ) +" "+ *this\RowEntered( )\text\string +" "+ *this\RowEntered( )\press +" "+ *this\RowEntered( )\_enter +" "+ *this\RowEntered( )\_focus
               ;             ;             Debug "drop f - "+*this\RowFocused( ) +" "+ *this\RowFocused( )\text\string +" "+ *this\RowFocused( )\press +" "+ *this\RowFocused( )\_enter +" "+ *this\RowFocused( )\_focus
               ;
               ;             If *this\RowPressed( ) And
               ;                *this\RowFocused( )\position > *this\RowPressed( )\position
               ;               *this\RowFocused( )\_enter = 0
               ;             EndIf
               ;             *this\RowFocused( )\_focus = 0
               ;             *this\RowFocused( )\press = 0
               ;             *this\RowFocused( )\ColorState( ) = #__s_0
               ;           EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_Up
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  ;             If *row
                  ;               Debug "up * - " + *row + " " + *row\text\string + " " + *row\press + " " + *row\_enter + " " + *row\focus
                  ;             EndIf
                  ;
                  ;             If *this\RowEntered( )
                  ;               Debug "up e - " + *this\RowEntered( ) + " " + *this\RowEntered( )\text\string + " " + *this\RowEntered( )\press + " " + *this\RowEntered( )\_enter + " " + *this\RowEntered( )\_focus
                  ;             EndIf
                  ;
                  ;             ;\\
                  ;             If *this\RowPressed( )
                  ;               Debug "up p - " + *this\RowPressed( ) + " " + *this\RowPressed( )\text\string + " " + *this\RowPressed( )\press + " " + *this\RowPressed( )\_enter + " " + *this\RowPressed( )\_focus
                  ;             EndIf
                  ;
                  ;             ;\\
                  ;             If *this\RowFocused( )
                  ;               Debug "up f - " + *this\RowFocused( ) + " " + *this\RowFocused( )\text\string + " " + *this\RowFocused( )\press + " " + *this\RowFocused( )\_enter + " " + *this\RowFocused( )\_focus
                  ;             EndIf
                  
                  
                  If *this\RowPressed( )
                     If is_atpoint_( *this\RowPressed( ), mouse( )\x-*this\inner_x( )-*this\scroll_x( ), mouse( )\y-*this\inner_y( )-*this\scroll_y( ) )
                        *this\RowEntered( ) = *this\RowPressed( )
                     EndIf
                     
                     If *this\mode\clickSelect
                        If *this\mode\multiSelect
                           PushListPosition( *rows( ) )
                           ForEach *rows( )
                              If *rows( )\ColorState( ) = #__s_2
                                 If *rows( )\press <> 1
                                    *rows( )\press = 1
                                 EndIf
                              EndIf
                           Next
                           PopListPosition( *rows( ) )
                        EndIf
                        
                        If Not *this\mode\multiSelect
                           If dragged
                              If *this\RowPressed( ) <> *this\RowEntered( )
                                 If *this\RowEntered( )
                                    *this\RowPressed( )\press       = 0
                                    *this\RowPressed( )\ColorState( ) = #__s_0
                                    
                                    *this\RowEntered( )\press       = 1
                                    *this\RowEntered( )\ColorState( ) = #__s_2
                                    
                                    ;Debug "change1"
                                    DoEvents(*this, #__event_Change, *this\RowEntered( )\position, *this\RowEntered( ))
                                 Else
                                    If *this\RowPressed( )\press
                                       *this\RowPressed( )\ColorState( ) = #__s_0
                                    Else
                                       *this\RowPressed( )\ColorState( ) = #__s_2
                                    EndIf
                                    *this\RowPressed( )\press ! 1
                                    
                                 EndIf
                              EndIf
                           Else
                              ; Debug "change2" ; click-select flag
                              DoEvents(*this, #__event_Change, *this\RowPressed( )\position, *this\RowPressed( ))
                           EndIf
                        EndIf
                     EndIf
                     
                     If Not *this\mode\clickSelect
                        If *this\RowEntered( ) And
                           *this\RowEntered( )\_enter
                           ;
                           If Not *this\mode\multiSelect
                              If *this\RowFocused( ) And
                                 *this\RowFocused( ) <> *this\RowEntered( )
                                 *this\RowFocused( )\_enter        = 0
                                 *this\RowFocused( )\_focus        = 0
                                 *this\RowFocused( )\ColorState( ) = #__s_0
                                 ;
                                 DoEvents(*this, #__event_StatusChange, *this\RowFocused( )\position)
                              EndIf
                           EndIf
                           
                           *this\RowFocused( ) = *this\RowEntered( )
                        EndIf
                        
                        If Not *this\mode\multiSelect
                           If Not *this\RowPressed( )\_focus
                              If *this\RowPressed( ) <> *this\RowEntered( )
                                 *this\RowPressed( )\_enter        = 0
                                 *this\RowPressed( )\ColorState( ) = #__s_0
                              EndIf
                           EndIf
                        EndIf
                        ;
                        *this\RowPressed( )\press = 0
                        *this\RowPressed( )       = #Null
                        ;
                        If *this\RowFocused( )
                           If *this\RowFocused( )\press
                              *this\RowFocused( )\press = 0
                           EndIf
                           ;
                           *this\RowFocused( )\ColorState( ) = #__s_2
                           ;
                           If *this\RowFocused( )\_focus = 0
                              *this\RowFocused( )\_focus = 1
                              
                              ;Debug "change3"
                              If is_integral_( *this ) And *this\parent\parent And *this\parent\parent\type = #__type_ComboBox
                                 ; Debug " combo send change event"
                                 DoEvents(*this\parent\parent, #__event_Change, *this\RowFocused( )\position, *this\RowFocused( ))
                                 ;Send( *this\parent\parent, #__event_Change, *this\RowFocused( )\position, *this\RowFocused( ) )
                              Else
                                 DoEvents(*this, #__event_Change, *this\RowFocused( )\position, *this\RowFocused( ))
                              EndIf
                           EndIf
                        EndIf
                        ;
                     EndIf
                  EndIf
                  
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure DoEvent_Button( *this._s_WIDGET, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
         Protected._s_BUTTONS *EnteredButton, *BB1, *BB2, *BB0
         
         ;\\
         If *this\type = #__type_window
            *BB0 = *this\CloseButton( )
            *BB1 = *this\MaximizeButton( )
            *BB2 = *this\MinimizeButton( )
         Else
            If *this\row
               If *this\RowEntered( )
                  *BB1 = *this\RowEntered( )\checkbox
                  If *this\RowEntered( )\childrens
                     *BB2 = *this\RowEntered( )\buttonbox
                  EndIf
                  mouse_x = mouse( )\x - *this\inner_x( ) - *this\RowEntered( )\x - *this\scroll_x( )
                  mouse_y = mouse( )\y - *this\inner_y( ) - *this\RowEntered( )\y - *this\scroll_y( )
               EndIf
            EndIf
            
            If *this\bar
               *BB0 = *this\bar\button
               If *this\type <> #__type_splitter
                  *BB1 = *this\bar\button[1]
                  *BB2 = *this\bar\button[2]
               EndIf
            EndIf
         EndIf
         
         ;\\ get at-point-button address
         If *BB1 And *BB1\hide = 0 And is_atpoint_( *BB1, mouse_x, mouse_y )
            *EnteredButton = *BB1
         ElseIf *BB2 And *BB2\hide = 0 And is_atpoint_( *BB2, mouse_x, mouse_y )
            *EnteredButton = *BB2
         ElseIf *BB0 And *BB0\hide = 0 And is_atpoint_( *BB0, mouse_x, mouse_y )
            *EnteredButton = *BB0
         EndIf
         
         ;\\ do buttons events entered & leaved
         If EnteredButton( ) <> *EnteredButton
            If EnteredButton( ) And
               Leaved( EnteredButton( ) )
               *this\root\repaint = #True
            EndIf
            
            EnteredButton( ) = *EnteredButton
            
            If EnteredButton( ) And
               Entered( EnteredButton( ) )
               ;
               If EnteredButton( ) = *BB0
                  If EnteredButton( )\_enter > 0
                     EnteredButton( )\_enter = - 1
                  EndIf
               EndIf
               *this\root\repaint = #True
            EndIf
         EndIf
         
         ;\\
         If Not EnteredButton( )
            If *this\caption
               *this\caption\interact = is_atpoint_( *this\caption, mouse( )\x, mouse( )\y )
            EndIf
         EndIf
      EndProcedure
      
      Procedure DoEvent_Bar( *this._s_WIDGET, eventtype.l )
         Protected result.b
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         Protected *tab._s_ROWS, mode_type = 0
         Static *tabmenu._s_ROWS
         
          
         If *bar
            *SB  = *bar\button
            *BB1 = *bar\button[1]
            *BB2 = *bar\button[2]
         EndIf
         
        If Not MouseButtonPress( )
          If *this\tab
            If *this\bar
               Protected mouse_bar_x = mouse( )\x - *this\bar\button\x
               Protected mouse_bar_y = mouse( )\y - *this\bar\button\y
               
               ;\\ get at point tab 
               If MouseEnter( *this )
                  If ListSize( *this\__tabs( ) )
                     If *this\TabEntered( ) And
                        *this\TabEntered( )\visible And
                        *this\TabEntered( )\hide = 0 And
                        is_atpoint_( *this\TabEntered( ), mouse_bar_x, mouse_bar_y )
                        
                        *tab = *this\TabEntered( )
                     Else
                        ; search entered item
                        LastElement( *this\__tabs( ))
                        Repeat
                           If *this\__tabs( )\visible And
                              *this\__tabs( )\hide = 0 And
                              is_atpoint_( *this\__tabs( ), mouse_bar_x, mouse_bar_y )
                              *tab = *this\__tabs( )
                              Break
                           EndIf
                        Until Not PreviousElement( *this\__tabs( ))
                     EndIf
                  EndIf
               EndIf
               
               ; change enter/leave state
               If *this\TabEntered( ) <> *tab 
                  *this\redraw = 1
                  *this\root\contex = 0
                  
                  ;\\ leaved tabs
                  If *this\TabEntered( ) And
                     Leaved( *this\TabEntered( ) )
                     *this\root\repaint = #True
                  EndIf
                  ;
                  *this\TabEntered( ) = *tab
                  ;
                  If *tab 
                     If *this\enter 
                        ;\\ entered tabs
                        If Entered( *tab )
                           *this\root\repaint = #True
                           
                           ;\\ show popup bar
                           If is_bar_( *this )
                              ;
                              If *this\PopupBar( ) And 
                                 *this\PopupBar( )\hide = 0 And 
                                 *this\PopupBar( ) <> *tab\Row__Menu( )
                                 HideBar( *this\PopupBar( ) )
                              EndIf
                              ;
                              ;\\ change focused tab
                              If is_menu_( *this )
                                 If *this\TabFocused( )
                                    *this\TabFocused( )\_focus = 0
                                    
                                    *this\TabFocused( ) = *tab
                                    *this\TabFocused( )\_focus = 1
                                 EndIf
                              EndIf
                              ;
                              ;\\ change toggle state
                              If *tabmenu
                                 If *tabmenu\TabItemState( )
                                    *tabmenu\TabItemState( ) = 0
                                 EndIf
                                 If *tab\childrens
                                    If *tab\TabItemState( ) = 0
                                       *tab\TabItemState( ) = 1
                                       *tabmenu = *tab
                                    EndIf
                                 EndIf
                              EndIf
                              ;
                              If *tab\Row__Menu( ) And *tab\Row__Menu( )\hide
                                 If *this\bar\vertical
                                    ;Debug "  show POPUPMENUBARS "+ClassFromEvent(eventtype)
                                    DisplayPopupBar( *tab\Row__Menu( ), *this )
                                 Else
                                    If *tab\_focus Or 
                                       *tab\TabItemState( )
                                       ;Debug "  show TOOLBAR "+ClassFromEvent(eventtype)
                                       DisplayPopupBar( *tab\Row__Menu( ), *this )
                                    EndIf
                                 EndIf
                              EndIf
                              ;
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
      EndIf
            
        ;
         If eventtype = #__event_LostFocus
            If *this\tab
               If *this\PopupBar( )
                  If *this\PopupBar( )\enter = 0 
                     HidePopupBar( *this\PopupBar( ) )
                  EndIf
                  *this\PopupBar( ) = 0
               EndIf
            EndIf
         EndIf
            
          ;\\
         If eventtype = #__event_Down
                If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *this\tab
                  *tab = *this\TabEntered( )
                  
                  If *this\displaypopup ; *this\type = #__type_PopupBar
                  Else
                     ;\\
                     If *tab And *tab\childrens 
                        If *this\type <> #__type_PopupBar
                           If Not HideBar( *this\PopupBar( ) )
                              If *tab\Row__Menu( )\hide
                                 DisplayPopupBar( *tab\Row__Menu( ), *this )
                              EndIf
                           EndIf
                        EndIf
                     Else
                        If *this\PopupBar( ) 
                           If *this\PopupBar( ) <> *this\__Popup( )
                              ;
                              HidePopupBar( *this\PopupBar( ) )
                           EndIf
                           *this\PopupBar( ) = 0
                        EndIf
                     EndIf
                     
                     
                     ;\\
                     *this\TabPressed( ) = *tab
                     
                     ;                                              ;
                     If Not ( EnteredButton( ) And 
                              EnteredButton( )\press And 
                              ( EnteredButton( ) = *this\bar\button[1] Or 
                                EnteredButton( ) = *this\bar\button[2] ) )
                        ;
                        If *tab And
                           *tab\press = #False
                           *tab\press = #True
                           
                           *tab\ColorState( ) = #__s_2
                           *this\root\repaint = #True
                        EndIf
                     EndIf
                  EndIf
                  
                  
                  If *this\type = #__type_MenuBar Or
                     *this\type = #__type_ToolBar
                     
                     If *tab
                        If *this\TabFocused( )
                           *this\TabFocused( )\_focus = 0
                           *this\TabFocused( ) = 0
                        EndIf
                        ;
                        If *this\type = #__type_MenuBar
                           *this\TabFocused( ) = *tab
                           *this\TabFocused( )\_focus = 1
                           
                        ElseIf *this\TabEntered( )\childrens 
                           *tab\TabItemState( ) ! 1
                           *tabmenu = *tab
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               If *bar
                    If EnteredButton( ) And
                  EnteredButton( )\press = #False And
                  EnteredButton( )\disable = #False And
                  EnteredButton( )\ColorState( ) <> #__s_3 ; change the color state of non-disabled buttons
                       
                  PressedButton( )       = EnteredButton( )
                  PressedButton( )\press = #True
                  
                  If Not ( *this\type = #__type_Track Or
                           ( *this\type = #__type_Splitter And PressedButton( ) <> *SB ))
                     PressedButton( )\ColorState( ) = #__s_2
                  EndIf
                  
                  ;
                  If ( *BB2\press And *bar\invert ) Or
                     ( *BB1\press And Not *bar\invert )
                     
                     If *this\type = #__type_spin
                        If bar_PageChange( *this, *bar\page\pos - *this\scroll\increment )
                           result = #True
                        EndIf
                     Else
                        If bar_ThumbChange( *this, *bar\thumb\pos - *this\scroll\increment )
                           result = #True
                        EndIf
                     EndIf
                  ElseIf ( *BB1\press And *bar\invert ) Or
                         ( *BB2\press And Not *bar\invert )
                     
                     If *this\type = #__type_spin
                        If bar_PageChange( *this, *bar\page\pos + *this\scroll\increment )
                           result = #True
                        EndIf
                     Else
                        If bar_ThumbChange( *this, *bar\thumb\pos + *this\scroll\increment )
                           result = #True
                        EndIf
                     EndIf
                  EndIf
               EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_Up
            If MouseButtons( ) & #PB_Canvas_LeftButton
               If *this\tab
                  If *this\TabEntered( ) And *this\TabEntered( )\childrens 
                     If Not *this\PopupBar( )
                        If *this\TabFocused( )
                           *this\TabFocused( )\_focus = 0
                           *this\TabFocused( ) = 0
                        EndIf
                     EndIf
                  Else
                     If *this\displaypopup ; *this\type = #__type_PopupBar
                        If *this\__Popup( )
                           HidePopupBar( *this )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               If *bar
                  If PressedButton( ) And
                  PressedButton( )\press = #True
                  PressedButton( )\press = #False
                  
                  If PressedButton( )\disable = #False And
                     PressedButton( )\ColorState( ) <> #__s_3
                     
                     ; change color state
                     If PressedButton( )\ColorState( ) = #__s_2 And
                        Not ( *this\type = #__type_Track Or
                              ( *this\type = #__type_Splitter And PressedButton( ) <> *SB ))
                        
                        If PressedButton( )\_enter
                           PressedButton( )\ColorState( ) = #__s_1
                        Else
                           PressedButton( )\ColorState( ) = #__s_0
                        EndIf
                     EndIf
                     
                     result = #True
                  EndIf
               EndIf
               
               ;\\
               If *this\TabPressed( )
                  If *this\TabPressed( )\press = #True
                     *this\TabPressed( )\press = #False
                     
                     If *this\TabPressed( )\_enter
                        *this\TabPressed( )\ColorState( ) = #__s_1
                     Else
                        *this\TabPressed( )\ColorState( ) = #__s_0
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_LeftClick
            If *this\type = #__type_TabBar
               Protected state = GetItemIndex( *this, *this\TabPressed( ) )
               ;
               If state >= 0 
                  If bar_tab_SetState( *this, state ) 
                     result = #True
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_MouseMove
            If *bar 
               If *SB\press
                  If *bar\vertical
                     If bar_ThumbChange( *this, ( mouse( )\y - mouse( )\delta\y ))
                        result = #True
                     EndIf
                  Else
                     If bar_ThumbChange( *this, ( mouse( )\x - mouse( )\delta\x ))
                        result = #True
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result 
      EndProcedure
      
      Procedure.l DoEvent_Tree( *this._s_WIDGET, eventtype.l, mouse_x.l, mouse_y.l )
         Protected Repaint
         
         ;
         If eventtype = #__event_Down
            If MouseButtons( ) & #PB_Canvas_LeftButton
               If *this\RowEntered( ) And
                  *this\RowEntered( )\_enter
                  
                  ; collapsed/expanded button
                  If *this\RowEntered( )\buttonbox\_enter
                     If *this\RowEntered( )\ItemButtonState( )
                        SetItemState( *this, *this\RowEntered( )\position, #PB_Tree_Expanded )
                        Send( *this, #__event_StatusChange, *this\RowEntered( )\position, #PB_Tree_Expanded )
                     Else
                        SetItemState( *this, *this\RowEntered( )\position, #PB_Tree_Collapsed )
                        Send( *this, #__event_StatusChange, *this\RowEntered( )\position, #PB_Tree_Collapsed )
                     EndIf
                  EndIf
                  
                  ; change box ( option&check )
                  If *this\RowEntered( )\checkbox\_enter
                     ; Debug ""+*this\RowEntered( ) +" "+ *this\RowEntered( )\Row__Option( )
                     ; change box option
                     If *this\mode\optionboxes
                        If *this\RowEntered( )\Row__Option( )
                           If *this\RowEntered( )\RowParent( ) 
                              If *this\RowEntered( )\Row__Option( )\RowParent( ) And
                                 *this\RowEntered( )\Row__Option( )\ItemBoxState( )
                                 *this\RowEntered( )\Row__Option( )\ItemBoxState( ) = #PB_Checkbox_Unchecked
                              EndIf
                           EndIf
                           
                           If *this\RowEntered( )\Row__Option( )\Row__Option( ) <> *this\RowEntered( )
                              If *this\RowEntered( )\Row__Option( )\Row__Option( )
                                 *this\RowEntered( )\Row__Option( )\Row__Option( )\ItemBoxState( ) = #PB_Checkbox_Unchecked
                              EndIf
                              *this\RowEntered( )\Row__Option( )\Row__Option( ) = *this\RowEntered( )
                           EndIf
                        EndIf
                     EndIf
                     
                     ; tree checkbox change check
                     set_check_state_( *this\RowEntered( )\ItemBoxState( ), *this\mode\threestate )
                     
                     ; Send( *this, #__event_StatusChange, *this\RowEntered( )\position, *this\mode\threestate  )
                     ;                         ;\\
                     ;                         If *this\RowEntered( )\ColorState( ) = #__s_2
                     ;                            ; tree items change
                     ;                                  DoEvents( *this, #__event_Change, *this\RowEntered( )\position, *this\RowEntered( ) )
                     ;                         EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         If eventtype = #__event_Up
            If MouseButtons( ) & #PB_Canvas_LeftButton
               If *this\RowEntered( ) And
                  *this\RowEntered( )\_enter
                  
                  If *this\RowEntered( )\ColorState( ) = #__s_0
                     *this\RowEntered( )\ColorState( ) = #__s_1
                  Else
                     If *this\RowEntered( )\buttonbox\_enter
                        Send( *this, #__event_Up, *this\RowEntered( )\position, *this\RowEntered( ) )
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_Left2Click Or
            eventtype = #__event_RightClick Or
            eventtype = #__event_Right2Click
            
            If *this\RowEntered( ) And
               *this\RowEntered( )\_enter
               Post( *this, eventtype, *this\RowEntered( )\position )
            EndIf
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      
      Procedure DoEvents( *this._s_WIDGET, eventtype.l, *button = #PB_All, *data = #Null )
         ;\\ entered position state
         If *this\enter > 0
            If Bool( is_atpoint_( *this, mouse( )\x, mouse( )\y, [#__c_draw] ) And
                     is_atpoint_( *this, mouse( )\x, mouse( )\y, [#__c_inner] ) And
                     Not ( *this\type = #__type_Splitter And is_atpoint_( *this\bar\button, mouse( )\x, mouse( )\y ) = 0 ) And
                     Not ( *this\type = #__type_HyperLink And is_atpoint_( *this, mouse( )\x - *this\frame_x( ), mouse( )\y - *this\frame_y( ), [#__c_Required] ) = 0 ))
               ;
               If *this\enter = 1
                  MouseEnter( *this )
               EndIf
            Else
               If *this\enter <> 1
                  *this\enter = 1
               EndIf
            EndIf
         EndIf
         
         ;\\ cursor update
         If eventtype = #__event_MouseEnter Or
            eventtype = #__event_MouseMove Or
            ;eventtype = #__event_Drop Or
            eventtype = #__event_Up
            ;
            If eventtype = #__event_Up 
               If *this\enter
                  If a_index( )
                     a_enter( *this, 9999999 )
                     ChangeCurrentCursor( *this, a_anchors( )\cursor[a_index( )] )
                  Else
                     If CurrentCursor( ) <> *this\cursor
                        ChangeCurrentCursor( *this, *this\cursor )
                     EndIf
                  EndIf
               Else
                  If EnteredWidget( )
                     UpdateCurrentCursor( EnteredWidget( ) )
                  EndIf
               EndIf
            Else
               UpdateCurrentCursor( *this )
            EndIf
         EndIf
            
         Debug "DoEvents( "+*this\class +" "+ ClassFromEvent(eventtype)
         
         ;\\
         If test_event_entered
            If eventtype = #__event_MouseEnter
               Debug " enter "+ *this\class
            EndIf
            If eventtype = #__event_MouseLeave
               Debug " leave "+ *this\class
            EndIf
         EndIf
         
         ;\\
            If eventtype = #__event_Change
               If *this\row
                  ; Debug "#__event_Change "+*this\RowFocusedIndex( ) +" "+ *this\RowFocused( )\position +" "+ *button ;+" "+ *data
                  *this\RowFocusedIndex( ) = *button
               EndIf
            EndIf
         
         ;          
         ;\\ DoEvents_Anchors( )
         a_events( *this, eventtype )
         
         If Not *this\disable
            
            ;\\ repaint state
            Select eventtype
               Case #__event_ScrollChange,
                    #__event_StatusChange
                  
                  If *this\row
                     *this\root\repaint = #True
                  EndIf
                  
                  *this\redraw = 1
                  
               Case #__event_Focus,
                    #__event_LostFocus, 
                    #__event_MouseEnter,
                    #__event_MouseLeave,
                    #__event_Down,
                    #__event_Up,
                    #__event_LeftDown,
                    #__event_LeftUp,
                    #__event_LeftClick,
                    #__event_Left2Click,
                    #__event_Left3Click,
                    #__event_RightDown,
                    #__event_RightUp,
                    #__event_RightClick,
                    #__event_Right2Click,
                    #__event_Right3Click,
                    #__event_KeyDown,
                    #__event_KeyUp,
                    #__event_Drop,
                    #__event_DragStart
                  
                  ; If *this\row
                  *this\root\repaint = #True
                  ; EndIf
                  
                  *this\redraw = 1
                  *this\root\contex = 0
                  
            EndSelect
            
            ;\\ items events
            If *this\type = #__type_Editor Or
               *this\type = #__type_string
               
               DoEvent_Lines( *this, eventtype, mouse( )\x, mouse( )\y )
               
            ElseIf is_items_( *this )
               
               DoEvent_Rows( *this, *this\__rows( ), eventtype, mouse( )\x, mouse( )\y )
            EndIf
            
            
            ;\\
            If DoEvent_Bar( *this, eventtype )
               *this\root\repaint = #True
            EndIf
            
            
            ;\\ widgets events
            Select *this\type
               Case #__type_Window
                  If Not *this\anchors
                     If eventtype = #__event_Focus
                        *this\ColorState( ) = #__s_2
                     EndIf
                     
                     If eventtype = #__event_LostFocus
                        If *this\ColorState( ) = #__s_2
                           *this\ColorState( ) = #__s_0
                        EndIf
                     EndIf
                     
                     If eventtype = #__event_MouseMove
                        If *this\caption\interact And *this\press And Not *this\anchors
                           Resize( *this, DPIUnScaledX(mouse( )\x - mouse( )\delta\x), DPIUnScaledY(mouse( )\y - mouse( )\delta\y) , #PB_Ignore, #PB_Ignore )
                        EndIf
                     EndIf
                     
                     If eventtype = #__event_Left2Click
                        If *this\caption\interact
                           If Not *this\resize\flag & #__resize_maximize
                              ProcedureReturn SetState( *this, #__window_Maximize )
                           Else
                              ProcedureReturn SetState( *this, #__window_Normal )
                           EndIf
                        EndIf
                     EndIf
                     
                     If eventtype = #__event_LeftClick
                        Select EnteredButton( )
                              ; close button
                           Case *this\CloseButton( )
                              If is_root_( *this )
                                 PostEvent( #PB_Event_CloseWindow, *this\root\canvas\window, *this )
                              Else
                                 Post( *this, #__event_close )
                              EndIf
                              
                              ; maximize button
                           Case *this\MaximizeButton( )
                              If Not *this\resize\flag & #__resize_maximize
                                 ProcedureReturn SetState( *this, #__window_Maximize )
                              Else
                                 ProcedureReturn SetState( *this, #__window_Normal )
                              EndIf
                              
                              ; minimize button
                           Case *this\MinimizeButton( )
                              If Not *this\resize\flag & #__resize_minimize
                                 ProcedureReturn SetState( *this, #__window_Minimize )
                              Else
                                 ProcedureReturn SetState( *this, #__window_Normal )
                              EndIf
                        EndSelect
                     EndIf
                  EndIf
                  
                  ;\\
               Case #__type_Button, #__type_ButtonImage
                  If Not ( *this\togglebox And *this\ToggleBoxState( ))
                     Select eventtype
                        Case #__event_MouseEnter
                           If *this\enter 
                              If *this\press
                                 *this\ColorState( ) = #__s_2
                              Else
                                 *this\ColorState( ) = #__s_1
                              EndIf
                           EndIf
                           
                        Case #__event_MouseLeave
                           ; If Not *this\press
                           *this\ColorState( ) = #__s_0
                           ; EndIf
                           
                        Case #__event_Down
                           If *this\enter 
                              If MouseButtons( ) & #PB_Canvas_LeftButton
                                 *this\ColorState( ) = #__s_2
                              EndIf
                              
                              If *this\image[#__image_pressed]\id
                                 *this\image = *this\image[#__image_pressed]
                              EndIf
                           EndIf
                           
                        Case #__event_Up
                           If MouseButtons( ) & #PB_Canvas_LeftButton
                              If *this\enter
                                 *this\ColorState( ) = #__s_1
                              Else
                                 *this\ColorState( ) = #__s_0
                              EndIf
                           EndIf
                           
                           If *this\image[#__image_released]\id
                              *this\image = *this\image[#__image_released]
                           EndIf
                           
                     EndSelect
                  EndIf
                  ;
                  If eventtype = #__event_Up
                     If MouseButtons( ) & #PB_Canvas_LeftButton
                        If *this\enter 
                           If *this\togglebox
                              SetState( *this, Bool( *this\ToggleBoxState( ) ! 1 ))
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
               Case #__type_Option
                  If eventtype = #__event_LeftClick
                     If SetState( *this, #True )
                        
                     EndIf
                  EndIf
                  
                  ;\\
               Case #__type_checkBox
                  If eventtype = #__event_LeftClick
                     If SetState( *this, Bool( *this\ToggleBoxState( ) ! 1 ) )
                        
                     EndIf
                  EndIf
                  
               Case #__type_HyperLink
                  If eventtype = #__event_Down
                     If MouseEnter( *this )
                        ChangeCurrentCursor( *this, *this\cursor[2] )
                     EndIf
                  EndIf
                  If eventtype = #__event_MouseMove Or
                     eventtype = #__event_MouseEnter Or
                     eventtype = #__event_MouseLeave
                     
                     If MouseEnter( *this )
                        If *this\ColorState( ) <> #__s_1
                           *this\ColorState( ) = #__s_1
                        EndIf
                        *this\root\repaint = 1
                     Else
                        If *this\ColorState( ) <> #__s_0
                           *this\ColorState( ) = #__s_0
                        EndIf
                     EndIf
                  EndIf
                  
               Case #__type_Tree, #__type_ListView, #__type_ListIcon
                  DoEvent_Tree( *this, eventtype, mouse( )\x, mouse( )\y )
                  
                  
            EndSelect
            
            ;\\
            ; If Popup( )
            If eventtype = #__event_Down
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *this\type = #__type_combobox
                     If *this\__Popup( )
                        DisplayPopupBar( *this\__Popup( ), *this )
                     EndIf
                  Else
                     If *this\root\parent And
                        ( *this\root\parent\type = #__type_ComboBox Or
                          *this\root\parent\type = #__type_MenuBar )
                        ; Debug 777
                        ;
                        If IsWindow( *this\root\parent\root\canvas\window )
                           DisableWindow( *this\root\canvas\window, #True )
                           SetActiveWindow( *this\root\parent\root\canvas\window )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            If eventtype = #__event_up
               If *this <> *this\root\parent
                  If *this\root\parent 
                     If *this\root\parent\type = #__type_ComboBox 
                        SetText( *this\root\parent, GetItemText( *this, GetState( *this ) ) )
                        DisplayPopupBar( *this, *this\root\parent )
                        PostRepaint( *this\root\parent\root )
                     EndIf
                     
                     ;                     If *this\root\parent\type = #__type_MenuBar 
                     ;                        Debug *this\__Popup( )\class
                     ;                         _HidePopupBar( *this\__Popup( ) )
                     ;                       ;HidePopupBar( *this ) 
                     ;                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ; EndIf
            
            
            ;\\ before post-widget-events drop
            ;\\
            If *this\row And
               *this\RowEntered( ) And
               *this\RowEntered( )\_enter
               
               If eventtype = #__event_Drop
                  If *this\RowEntered( )\_enter < 0
                     *button = *this\RowEntered( )\position
                     *data   = mouse( )\x | mouse( )\y << 16
                  Else
                     *button = *this\RowEntered( )\position + 1
                     *data   = mouse( )\x | mouse( )\y << 16
                  EndIf
                  
               ElseIf eventtype = #__event_MouseMove Or
                      eventtype = #__event_MouseEnter
                  *button = *this\RowEntered( )\position
                  *data   = *this\RowEntered( )
               EndIf
            EndIf
            
            ;\\ mouse wheel horizontal
            If eventtype = #__event_MouseWheelX
               ; Debug "wheelX " + *data
               If *this\scroll And *this\scroll\h And
                  bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos - *data, 2 )
                  *this\root\repaint = #True
               ElseIf *this\bar And bar_PageChange( *this, *this\bar\page\pos - *data, 2 )
                  *this\root\repaint = #True
               EndIf
            EndIf
            
            ;\\ mouse wheel verticl
            If eventtype = #__event_MouseWheelY
               ; Debug "wheelY " + *data
               If *this\scroll And *this\scroll\v And 
                  bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos - *data, 2 )
                  *this\root\repaint = #True
               ElseIf *this\bar And bar_PageChange( *this, *this\bar\page\pos - *data, 2 )
                  *this\root\repaint = #True
               EndIf
            EndIf
            
            ;          ;\\ mouse wheel 
            ;          If eventtype = #__event_MouseWheelX Or eventtype = #__event_MouseWheelY
            ;             ;
            ;             If *this\bar And
            ;                bar_PageChange( *this, *this\bar\page\pos - *data, 2 )
            ;                Debug "wheel " + *data
            ;                *this\root\repaint = #True
            ;             EndIf
            ;          EndIf
            
            ;\\ send-widget-events
            If eventtype = #__event_Create
            ElseIf eventtype = #__event_Focus
               Send( *this, eventtype, *button, *data )
            ElseIf eventtype = #__event_LostFocus
               Send( *this, eventtype, *button, *data )
            ElseIf eventtype = #__event_Change
               Send( *this, eventtype, *button, *data )
            Else
               Send( *this, eventtype, *button, *data )
               
               If eventtype = #__event_Down
                  If *this\type = #__type_Spin
                     If *this\__String( )
                        Send( *this, #__event_Change, *this\__String( ), *this\bar\PageChange( ) )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ enabled mouse behavior
            If eventtype = #__event_Down
               
               ;             If *this\type = #__type_Splitter
               ;                If EnteredButton( ) And
               ;                   EnteredButton( )\_enter
               ;                EndIf
               ;             EndIf
            EndIf
            
            ;\\ after post-widget-events then drop if create new widget
            If eventtype = #__event_Drop
               If *this <> widgets( )
                  If widgets( )\resize\clip <> 0
                     widgets( )\resize\clip = 0
                     Reclip( widgets( ) )
                  EndIf
               EndIf
            EndIf
            
             ;\\ key events
            If eventtype = #__event_Input Or
               eventtype = #__event_KeyDown Or
               eventtype = #__event_KeyUp
               
               If *this\type = #__type_listview
                  DoKeyEvents_ListView( *this, *this\__rows( ), eventtype )
               Else
                  DoKeyEvents_Tree( *this, *this\__rows( ), eventtype )
               EndIf
            EndIf
            ;\\ post repaint canvas
            If *this\root\repaint = 1
               ; Debug ""+" ["+*this\ColorState( )+"] "+*this\class +" "+ ClassFromEvent(eventtype)
               PostEventRepaint( *this\root )
               *this\root\repaint = 0
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Procedure EventResize( )
         Protected Canvas = PB(GetWindowData)( PB(EventWindow)( ))
         ;Debug "- resize - os - window -"
         ; PB(ResizeGadget)( canvas, #PB_Ignore, #PB_Ignore, WindowWidth( EventWindow( )) - GadgetX( canvas )*2, WindowHeight( EventWindow( )) - GadgetY( canvas )*2 )
         PB(ResizeGadget)( Canvas, #PB_Ignore, #PB_Ignore, PB(WindowWidth)( PB(EventWindow)( )) - PB(GadgetX)( Canvas ) * 2, PB(WindowHeight)( PB(EventWindow)( )) - PB(GadgetY)( Canvas ) * 2 ) ; bug
      EndProcedure
      
      Procedure EventRepaint( )
         If EventData( )
            Protected eventdata = EventData( )
            
            If eventdata <> root( )\canvas\gadgetID
               ChangeCurrentCanvas( eventdata )
            EndIf
            
            If root( )\canvas\postrepaint = 1
               If __gui\eventexit <> 1
                  Repost( )
               EndIf
               
               If test_draw_repaint
                  ;  Debug "   REPAINT " + root( )\class ;+" "+ Popup( )\x +" "+ Popup( )\y +" "+ Popup( )\width +" "+ Popup( )\height
               EndIf
               
               ReDraw( root( ) )
               root( )\canvas\postrepaint = 0
            EndIf
            
            If test_draw_repaint
               Debug "   REPAINT " + root( )\class ;+" "+ Popup( )\x +" "+ Popup( )\y +" "+ Popup( )\width +" "+ Popup( )\height
            EndIf
         EndIf
      EndProcedure
      
      Procedure EventHandler( eventgadget = - 1, eventtype = - 1, eventdata = 0 )
         Static EnteredCanvasID
         Protected *root._s_root, repaint, event, mouse_x , mouse_y
         
         ;\\
         If eventtype = #PB_EventType_Focus
            If GetActive( )
               If EnteredWidget( ) And EnteredWidget( )\press
                  If EnteredWidget( )\root\canvas\gadget = eventgadget
                     If test_focus_set
                     Debug "canvas - eFocus " + EnteredWidget( )\root\canvas\gadget + " " + eventgadget
                     EndIf
                     SetActive( EnteredWidget( ))
                  EndIf
               Else
                  PushMapPosition( roots( ) )
                  ForEach roots( )
                     If roots( )\canvas\gadget = eventgadget
                        If roots( )\active 
                           If test_focus_set
                     Debug "canvas - Focus " + GetActive( )\root\canvas\gadget + " " + eventgadget
                           EndIf
                           SetActive( roots( )\active )
                        EndIf
                        Break
                     EndIf
                  Next
                  PopMapPosition( roots( ) )
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_LostFocus
            If GetActive( ) And
               GetActive( )\root\canvas\gadget = eventgadget
               If test_focus_set
                     Debug "canvas - LostFocus " + GetActive( )\root\canvas\gadget + " " + eventgadget
               EndIf
               SetActive( 0 )
            EndIf
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_Resize ;: PB(ResizeGadget)( eventgadget, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
            ; Debug "resize - canvas ["+eventgadget+"]"
            
            ; ;               *root = root( )
            ;PushMapPosition( roots( ) )
            If Not ( root( ) And root( )\canvas\gadget = eventgadget )
               ChangeCurrentCanvas( GadgetID( eventgadget ) )
            EndIf 
            If Resize( root( ), 0, 0, DPIScaledX(PB(GadgetWidth)( eventgadget )), DPIScaledY(PB(GadgetHeight)( eventgadget )) )
               ReDraw( root( ) )
            EndIf
            ;PopMapPosition( roots( ) )
            ; ; ;                ;root( ) = *root
            ProcedureReturn #PB_Event_Gadget
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_MouseWheelX
            If EnteredWidget( )
               mouse( )\wheel\x = eventdata
               If is_integral_( EnteredWidget( ) )
                  DoEvents( EnteredWidget( )\parent, #__event_MouseWheelX, -1, eventdata )
               Else
                  DoEvents( EnteredWidget( ), #__event_MouseWheelX, -1, eventdata )
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_MouseWheelY
            If EnteredWidget( )
               mouse( )\wheel\y = eventdata
               If is_integral_( EnteredWidget( ) )
                  DoEvents( EnteredWidget( )\parent, #__event_MouseWheelY, -1, eventdata )
               Else
                  DoEvents( EnteredWidget( ), #__event_MouseWheelY, -1, eventdata )
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_MouseEnter
            EnteredCanvasID = GadgetID( eventgadget )
            If Not ( root( ) And root( )\canvas\gadgetID = EnteredCanvasID )
               ChangeCurrentCanvas( EnteredCanvasID )
            EndIf
            
            mouse( )\change = 1 << 0
            mouse( )\x      = GadgetMouseX( eventgadget )
            mouse( )\y      = GadgetMouseY( eventgadget )
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_MouseLeave
            If PressedWidget( ) And
               root( ) <> PressedWidget( )\root
               eventgadget = PressedWidget( )\root\canvas\gadget
               ChangeCurrentCanvas( GadgetID( eventgadget ) )
            EndIf
            EnteredCanvasID = #Null
            
            mouse( )\change = - 1
            mouse( )\x      = - 1
            mouse( )\y      = - 1
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_LeftButtonDown Or
            eventtype = #PB_EventType_MiddleButtonDown Or
            eventtype = #PB_EventType_RightButtonDown
            ;\\
            Static ClickTime.q
            Protected ElapsedMilliseconds.q = ElapsedMilliseconds( )
            If DoubleClickTime( ) > ( ElapsedMilliseconds - ClickTime ) ;+ Bool( #PB_Compiler_OS = #PB_OS_Windows ) * 492
               mouse( )\click + 1
            Else
               mouse( )\click = 1
            EndIf
            ClickTime = ElapsedMilliseconds
            
            ;
            mouse( )\change = 1 << 5
            ;
            mouse( )\delta.allocate( POINT )
            mouse( )\delta\x = mouse( )\x
            mouse( )\delta\y = mouse( )\y
            
            ;
            If EnteredWidget( ) And EnteredWidget( )\anchors
               If mouse( )\steps
                  mouse( )\delta\x + ( mouse( )\delta\x % mouse( )\steps )
                  mouse( )\delta\x = ( mouse( )\delta\x / mouse( )\steps ) * mouse( )\steps
                  mouse( )\delta\y + ( mouse( )\delta\y % mouse( )\steps )
                  mouse( )\delta\y = ( mouse( )\delta\y / mouse( )\steps ) * mouse( )\steps
                  
                  mouse( )\delta\x + ( EnteredWidget( )\inner_x( ) % mouse( )\steps ) 
                  mouse( )\delta\y + ( EnteredWidget( )\inner_y( ) % mouse( )\steps ) 
               EndIf
            EndIf
            
            ;  
            If eventtype = #PB_EventType_LeftButtonDown 
               event            = #__event_LeftDown
               mouse( )\press   = #PB_MouseButton_Left
               mouse( )\buttons | #PB_Canvas_LeftButton 
               
               ; Должно сработат только внутри настоящего контейнера
               If Not a_index( ) And EnteredWidget( ) And EnteredWidget( )\container > 0
                  mouse( )\selector.allocate( SELECTOR )
                  mouse( )\selector\x = mouse( )\delta\x 
                  mouse( )\selector\y = mouse( )\delta\y
                  mouse( )\selector\width = 0
                  mouse( )\selector\height = 0
                  mouse( )\selector\dotted = 1
               EndIf
            EndIf
            If eventtype = #PB_EventType_MiddleButtonDown 
               event            = #__event_MiddleDown 
               mouse( )\press   = #PB_MouseButton_Middle
               mouse( )\buttons | #PB_Canvas_MiddleButton
            EndIf
            If eventtype = #PB_EventType_RightButtonDown 
               event            = #__event_RightDown 
               mouse( )\press   = #PB_MouseButton_Right
               mouse( )\buttons | #PB_Canvas_RightButton
            EndIf
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_MouseMove
            event = #__event_MouseMove
            ;Debug "MOVE"
            
            If root( ) And
               root( )\canvas\gadget = eventgadget
               mouse_x               = GadgetMouseX( eventgadget )
               mouse_y               = GadgetMouseY( eventgadget )
               ;
               If mouse( )\press
                  If PressedWidget( ) And PressedWidget( )\anchors
                     If mouse( )\steps
                        mouse_x + ( mouse_x % mouse( )\steps )
                        mouse_x = ( mouse_x / mouse( )\steps ) * mouse( )\steps
                        mouse_y + ( mouse_y % mouse( )\steps )
                        mouse_y = ( mouse_y / mouse( )\steps ) * mouse( )\steps
                     EndIf
                  EndIf
               EndIf
               ;
               If mouse( )\x <> mouse_x
                  If PressedWidget( )
                     If mouse( )\selector And mouse( )\delta
                        If mouse( )\delta\x > mouse_x
                           ; to left
                           mouse( )\selector\x    = mouse_x
                           If mouse( )\steps > 0
                              mouse( )\selector\x + ( mouse( )\selector\x % mouse( )\steps )
                              mouse( )\selector\x = ( mouse( )\selector\x / mouse( )\steps ) * mouse( )\steps
                              mouse( )\selector\x + ( PressedWidget( )\inner_x( ) % mouse( )\steps )
                              mouse( )\selector\width = ( mouse( )\delta\x - mouse( )\selector\x ) + DPIScaledX( 1 ) 
                           Else
                              mouse( )\selector\width = ( mouse( )\delta\x - mouse( )\selector\x )
                           EndIf
                        Else
                           ; to right
                           mouse( )\selector\x = mouse( )\delta\x
                           mouse( )\selector\width = ( mouse_x - mouse( )\selector\x )
                           If mouse( )\steps > 0
                              mouse( )\selector\width + ( mouse( )\selector\width % mouse( )\steps )
                              mouse( )\selector\width = ( mouse( )\selector\width / mouse( )\steps ) * mouse( )\steps
                              mouse( )\selector\width + DPIScaledX( 1 ) 
                           EndIf
                        EndIf
                        root()\repaint = 1
                     EndIf
                  EndIf
                  ;
                  If mouse( )\x < mouse_x
                     mouse( )\change | 1 << 3
                  Else
                     mouse( )\change | 1 << 1
                  EndIf
                  mouse( )\x = mouse_x
               EndIf
               ;
               If mouse( )\y <> mouse_y
                  If PressedWidget( )
                     If mouse( )\selector And mouse( )\delta
                        If mouse( )\delta\y > mouse_y
                           ; to top
                           mouse( )\selector\y    = mouse_y 
                           If mouse( )\steps > 0
                              mouse( )\selector\y + ( mouse( )\selector\y % mouse( )\steps )
                              mouse( )\selector\y = ( mouse( )\selector\y / mouse( )\steps ) * mouse( )\steps
                              mouse( )\selector\y + ( PressedWidget( )\inner_y( ) % mouse( )\steps ) 
                              mouse( )\selector\height = ( mouse( )\delta\y - mouse( )\selector\y ) + DPIScaledY( 1 ) 
                           Else
                              mouse( )\selector\height = ( mouse( )\delta\y - mouse( )\selector\y )
                           EndIf
                        Else
                           ; to bottom
                           mouse( )\selector\y = mouse( )\delta\y
                           mouse( )\selector\height = ( mouse_y - mouse( )\selector\y )
                           If mouse( )\steps > 0
                              mouse( )\selector\height + ( mouse( )\selector\height % mouse( )\steps )
                              mouse( )\selector\height = ( mouse( )\selector\height / mouse( )\steps ) * mouse( )\steps
                              mouse( )\selector\height + DPIScaledY( 1 ) 
                           EndIf
                        EndIf
                        root()\repaint = 1
                     EndIf
                  EndIf
                  ;
                  If mouse( )\y < mouse_y
                     mouse( )\change | 1 << 4
                  Else
                     mouse( )\change | 1 << 2
                  EndIf
                  mouse( )\y = mouse_y
               EndIf
               
               ;\\ mouse-drag-start send drag event
               If PressedWidget( ) And 
                  PressedWidget( )\press And
                  mouse( )\drag = #PB_Drag_None
                  mouse( )\drag = #PB_Drag_Update
                  DoEvents( PressedWidget( ), #__event_DragStart )
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_LeftButtonUp Or 
            eventtype = #PB_EventType_MiddleButtonUp Or
            eventtype = #PB_EventType_RightButtonUp
            ;
            If eventtype = #PB_EventType_LeftButtonUp : event = #__event_LeftUp : EndIf
            If eventtype = #PB_EventType_MiddleButtonUp : event = #__event_MiddleUp : EndIf
            If eventtype = #PB_EventType_RightButtonUp : event = #__event_RightUp : EndIf
            ;
            mouse( )\press = 0
            mouse( )\change = 1 << 6
            
            ;
            If root( ) And
               root( )\canvas\gadget = eventgadget
               mouse( )\x            = GadgetMouseX( eventgadget )
               mouse( )\y            = GadgetMouseY( eventgadget )
            EndIf
         EndIf
         
         ;\\
         If eventtype = #PB_EventType_KeyDown Or
            eventtype = #PB_EventType_Input Or
            eventtype = #PB_EventType_KeyUp
            
            ;\\
            If GetActive( )
               keyboard( )\key[1] = GetGadgetAttribute( GetActive( )\root\canvas\gadget, #PB_Canvas_Modifiers )
               ;
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  If keyboard( )\key[1] & #PB_Canvas_Command
                     keyboard( )\key[1] & ~ #PB_Canvas_Command
                     keyboard( )\key[1] | #PB_Canvas_Control
                  EndIf
               CompilerEndIf
               ;
               ;\\
               If eventtype = #PB_EventType_Input
                  keyboard( )\input = GetGadgetAttribute( GetActive( )\root\canvas\gadget, #PB_Canvas_Input )
               Else
                  keyboard( )\Key = GetGadgetAttribute( GetActive( )\root\canvas\gadget, #PB_Canvas_Key )
               EndIf
               ;
               ;\\ keyboard events
               If eventtype = #PB_EventType_KeyDown 
                  DoEvents( GetActive( ), #__event_KeyDown )
                  ;
                  ;\\ tab focus
                  Select keyboard( )\Key
                     Case #PB_Shortcut_Tab
                        If GetActive( )\container And
                           GetActive( )\FirstWidget( )
                           ;
                           SetActive( GetActive( )\FirstWidget( ) )
                        ElseIf GetActive( )\AfterWidget( )
                           SetActive( GetActive( )\AfterWidget( ) )
                        Else
                           If GetActive( )\parent
                              If GetActive( )\parent\AfterWidget( )
                                 SetActive( GetActive( )\parent\AfterWidget( ) )
                              Else
                                 If GetActive( )\root\FirstWidget( )
                                    SetActive( GetActive( )\root\FirstWidget( ) )
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                  EndSelect
               EndIf
               If eventtype = #PB_EventType_Input
                  DoEvents( GetActive( ), #__event_Input )
               EndIf
               If eventtype = #PB_EventType_KeyUp
                  DoEvents( GetActive( ), #__event_KeyUp )
                  ;
                  keyboard( )\key[1] = 0
                  keyboard( )\Key    = 0
               EndIf
            EndIf
         EndIf
         
         
         ;\\ get enter&leave widget address
         If mouse( )\change 
            If root( ) And root( )\canvas\gadget = eventgadget
               ;                      If root( )
               ;                          Debug "    "+root( )\class +" "+ ClassFromEvent(event)
               ;                      EndIf
               ;                      If ListSize( __gui\intersect( ) )
               ;                         GetAtPoint( root( ), mouse( )\x, mouse( )\y, __gui\intersect( ) )
               ;                      Else
               GetAtPoint( root( ), mouse( )\x, mouse( )\y, widgets( ) )
               ;                      EndIf
               
               If event = #__event_LeftDown Or
                  event = #__event_MiddleDown Or
                  event = #__event_RightDown
                  
                  If EnteredWidget( ) And Not EnteredWidget( )\anchors
                     If EnteredWidget( )\image[#__image_background]\id And
                        EnteredWidget( )\image[#__image_background]\depth > 31  
                        
                        If StartDrawing( ImageOutput(  EnteredWidget( )\image[#__image_background]\img ) )
                           DrawingMode( #PB_2DDrawing_AlphaChannel )
                           
                           If Not Alpha( Point( mouse( )\x - EnteredWidget( )\inner_x( ), mouse( )\y - EnteredWidget( )\inner_y( ) ) )
                              GetAtPoint( root( ), mouse( )\x, mouse( )\y, widgets( ), EnteredWidget( )\address )
                           EndIf
                           
                           StopDrawing( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
            EndIf
         EndIf
         
         ;
         ;\\ do all events
         ;
         If event = #__event_MouseMove
            If mouse( )\change > 1
               ;\\ mouse-pressed-widget move event
               If mouse( )\drag And 
                  PressedWidget( ) And 
                  PressedWidget( ) <> EnteredWidget( )
                  ;
                  If root( ) <> PressedWidget( )\root
                     mouse( )\x = GadgetMouseX( PressedWidget( )\root\canvas\gadget )
                     mouse( )\y = GadgetMouseY( PressedWidget( )\root\canvas\gadget )
                  EndIf
                  DoEvents( PressedWidget( ), event )
               EndIf
               
               ;\\ mouse-entered-widget move event
               If EnteredWidget( ) And
                  EnteredWidget( )\enter
                  ;
                  If PressedWidget( ) And
                     PressedWidget( )\root <> root( )
                     mouse( )\x = GadgetMouseX( root( )\canvas\gadget )
                     mouse( )\y = GadgetMouseY( root( )\canvas\gadget )
                  EndIf
                  DoEvents( EnteredWidget( ), event )
               EndIf
            EndIf
         EndIf
         
         ;
         If event = #__event_LeftDown Or
            event = #__event_MiddleDown Or
            event = #__event_RightDown
            ;
            If EnteredWidget( )
               ;\\ mouse delta (x&y)
               If event <> #__event_MiddleDown
                  If Not a_index( )
                     If Not EnteredWidget( )\anchors
                        If EnteredWidget( )\bar And EnteredButton( ) > 0
                           mouse( )\delta\x - EnteredWidget( )\bar\thumb\pos
                           mouse( )\delta\y - EnteredWidget( )\bar\thumb\pos
                        Else
                           mouse( )\delta\x - EnteredWidget( )\container_x( )
                           mouse( )\delta\y - EnteredWidget( )\container_y( )
                           ;
                           If EnteredWidget( )\parent
                              If Not EnteredWidget( )\child
                                 mouse( )\delta\x - EnteredWidget( )\parent\scroll_x( )
                                 mouse( )\delta\y - EnteredWidget( )\parent\scroll_y( )
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               ;
               ;\\ set active widget
;                If EnteredWidget( )\disable
;                   If event = #__event_LeftDown
;                      If GetActive( ) <> EnteredWidget( )\parent
;                         If EnteredButton( )
;                            ;
;                         Else
;                            If Not EnteredWidget( )\parent\disable
;                               SetActive( EnteredWidget( )\parent)
;                            EndIf
;                         EndIf
;                      EndIf
;                   EndIf
;                Else
                  PressedWidget( )       = EnteredWidget( )
                  PressedWidget( )\press = #True
                  ;
                  If event = #__event_LeftDown
                     If GetActive( ) <> EnteredWidget( )
                        SetActive( EnteredWidget( ))
                     EndIf
                  EndIf
               ;EndIf
               ;
               ;\\
               DoEvents( EnteredWidget( ), #__event_Down )
               ;
               If mouse( )\click = 1
                  DoEvents( EnteredWidget( ), event )
               EndIf
            EndIf
         EndIf
         
         ;
         If event = #__event_LeftUp Or
            event = #__event_MiddleUp Or
            event = #__event_RightUp
            
            ;\\
            If PressedWidget( )
               ;\\ do up&click events
               If PressedWidget( )\press
                  
                  ;\\ do drop events
                  If mouse( )\drop
                     If mouse( )\drag = #PB_Drag_Enter
                        mouse( )\drag = #PB_Drag_Finish
                     EndIf
                     ;
                     If is_drag_move( )
                        If EnteredWidget( )\drop
                           ;                            If mouse( )\selector
                           ;                               mouse( )\drop\x = DPIUnScaledX( mouse( )\selector\x - PressedWidget( )\inner_x( ) - PressedWidget( )\scroll_x( ) )
                           ;                               mouse( )\drop\y = DPIUnScaledY( mouse( )\selector\y - PressedWidget( )\inner_y( ) - PressedWidget( )\scroll_y( ) )
                           ;                               
                           ;                               mouse( )\drop\width  = DPIUnScaledX( mouse( )\selector\width )
                           ;                               mouse( )\drop\height = DPIUnScaledY( mouse( )\selector\height )
                           ;                            EndIf
                           ; "DD_move"
                           DoEvents( EnteredWidget( ), #__event_Drop )
                        EndIf
                     Else
                        If IsContainer( PressedWidget( ) ) 
                           If PressedWidget( )\drop
                              If mouse( )\selector
                                 mouse( )\drop\x = DPIUnScaledX( mouse( )\selector\x - PressedWidget( )\inner_x( ) - PressedWidget( )\scroll_x( ) )
                                 mouse( )\drop\y = DPIUnScaledY( mouse( )\selector\y - PressedWidget( )\inner_y( ) - PressedWidget( )\scroll_y( ) )
                                 
                                 mouse( )\drop\width  = DPIUnScaledX( mouse( )\selector\width )
                                 mouse( )\drop\height = DPIUnScaledY( mouse( )\selector\height )
                                 
                                 DoEvents( PressedWidget( ), #__event_Drop )
                              EndIf
                           EndIf
                           
                        ElseIf EnteredWidget( )\drop
                           If mouse( )\drag = #PB_Drag_Finish
                              mouse( )\drop\x = DPIUnScaledX( mouse( )\x - EnteredWidget( )\inner_x( ) - EnteredWidget( )\scroll_x( ) )
                              mouse( )\drop\y = DPIUnScaledY( mouse( )\y - EnteredWidget( )\inner_y( ) - EnteredWidget( )\scroll_y( ) )
                              
                              mouse( )\drop\width  = #PB_Ignore
                              mouse( )\drop\height = #PB_Ignore
                              
                              DoEvents( EnteredWidget( ), #__event_Drop )
                           EndIf
                        EndIf
                     EndIf
                     
                     ;\\ reset dragged cursor
                     If CurrentCursor( ) 
                        Debug "free drop CURSOR "
                       ; ChangeCurrentCursor( PressedWidget( ), 0 )
                     EndIf
                     
                     ;\\ reset
                     FreeStructure( mouse( )\drop )
                     mouse( )\drop = #Null
                  EndIf
                  
                  ;\\ do enter&leave events
                  If mouse( )\drag
                     If EnteredWidget( ) <> PressedWidget( )
                        GetAtPoint( root( ), mouse( )\x, mouse( )\y, widgets( ) )
                        
                        If EnteredWidget( ) <> PressedWidget( )
                           EnteredWidget( ) = PressedWidget( )
                           GetAtPoint( PressedWidget( )\root, mouse( )\x, mouse( )\y, widgets( ) )
                        EndIf
                     EndIf
                  EndIf
                  
                  ;
                  PressedWidget( )\press = #False
                  ;\\
                  DoEvents( PressedWidget( ), #__event_Up )
            
                  ;\\ do up events
                  If mouse( )\click = 1
                     DoEvents( PressedWidget( ), event )
                  EndIf
                  
                  ;\\ do 1click events
                  If mouse( )\drag
                     mouse( )\drag = #PB_Drag_None
                  Else
                     If PressedWidget( ) = EnteredWidget( )
                        If event = #__event_LeftUp
                           DoEvents( PressedWidget( ), #__event_LeftClick )
                        EndIf
                        If event = #__event_RightUp
                           DoEvents( PressedWidget( ), #__event_RightClick )
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ do 2click events
                  If mouse( )\click = 2
                     If event = #__event_LeftUp
                        DoEvents( PressedWidget( ), #__event_Left2Click )
                     EndIf
                     If event = #__event_RightUp
                        DoEvents( PressedWidget( ), #__event_Right2Click )
                     EndIf
                     
                     ;\\ do 3click events
                  ElseIf mouse( )\click = 3
                     If event = #__event_LeftUp
                        DoEvents( PressedWidget( ), #__event_Left3Click )
                     EndIf
                     If event = #__event_RightUp
                        DoEvents( PressedWidget( ), #__event_Right3Click )
                     EndIf
                     
                  EndIf
               EndIf
               
               PressedWidget( ) = 0
            EndIf
            
            ;\\ reset mouse states
            mouse( )\delta = 0
            mouse( )\buttons = 0
            If mouse( )\selector
               If mouse( )\drag
                  Debug "selector "+mouse( )\selector\x +" "+ mouse( )\selector\y +" "+ mouse( )\selector\width +" "+ mouse( )\selector\height
               EndIf
               mouse( )\selector = 0
            EndIf
         EndIf
         
         ;
         If mouse( )\change <> 0
            mouse( )\change = 0
         EndIf
         ProcedureReturn #PB_Event_Gadget
         
      EndProcedure
      
      Procedure CanvasEvents( )
         EventHandler( EventGadget( ), EventType( ), EventData( ) )
      EndProcedure
      
      ;-
      Procedure.i Post( *this._s_WIDGET, eventtype.l, *button = #PB_All, *data = #Null )
         If *this > 0
            If test_event_send
               Static test
               Debug ""+*this\class + " - Post( test "+test +" ) "+ ClassFromEvent(eventtype)
               test + 1
            EndIf
            
            ; Debug "post - "+*this\class +" "+ ClassFromEvent(eventtype)
            
            If AddElement( __gui\eventqueue( ) )
               __gui\eventqueue.allocate( EVENTDATA, ( ) )
               __gui\eventqueue( )\widget = *this
               __gui\eventqueue( )\type   = eventtype
               __gui\eventqueue( )\item   = *button
               __gui\eventqueue( )\data   = *data
               ProcedureReturn __gui\eventqueue( )
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i Send( *this._s_root, eventtype.l, *button = #PB_All, *data = #Null )
         Protected result, __widget = #Null, __type = #PB_All, __item = #PB_All, __data = #Null
         
         If *this > 0
            If __gui\eventexit >= 0
               If __gui\eventexit = 0
                  Post( *this, eventtype, *button, *data )
                  
               Else
                  ;\\ 
                  
                  If is_bar_( *this )
                     If eventtype = #__event_LeftClick Or
                        eventtype = #__event_Change
                        If *this\TabEntered( )
                           *button = *this\TabEntered( )\itemindex
                        EndIf
                     EndIf
                     ;
                     If *button < 0
                        ProcedureReturn 0
                     EndIf
                  EndIf
                  
                  ;\\ 
                  __widget = EventWidget( )
                  __type   = WidgetEvent( )
                  __item   = WidgetEventItem( )
                  __data   = WidgetEventData( )
                  
                  ;\\
                  EventWidget( )     = *this
                  WidgetEvent( )     = eventtype
                  WidgetEventItem( ) = *button
                  WidgetEventData( ) = *data
                  
                  ;\\ menu send bind event
                  If is_bar_( *this ) 
                     If *this\__Popup( )
                        While *this\__Popup( )
                           *this = *this\__Popup( )
                        Wend
                        EventWidget( )     = *this
                     EndIf
                  EndIf
                  
                  ; Debug "send - "+*this\class +" "+ ClassFromEvent(eventtype) +" "+ *button +" "+ *data
                  
                  ;
                  ;\\
                  If Not is_root_( *this )
                     ;\\ 1 call (current-widget) bind event function
                     If __gui\eventhook(Str(*this)+" "+Str(eventtype)+" "+Str(*button))
                        result = __gui\eventhook( )\function( )
                     ElseIf __gui\eventhook(Str(*this)+" "+Str(eventtype)+" "+Str(#PB_All)) 
                        result = __gui\eventhook( )\function( )
                     EndIf
                     
                     ;\\ 2 call (current-widget-window) bind event function
                     If result <> #PB_Ignore
                        If *this\window 
                           If Not is_root_( *this\window )
                              If __gui\eventhook(Str(*this\window)+" "+Str(eventtype)+" "+Str(*button)) 
                                 result = __gui\eventhook( )\function( )
                              ElseIf __gui\eventhook(Str(*this\window)+" "+Str(eventtype)+" "+Str(#PB_All)) 
                                 result = __gui\eventhook( )\function( )
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ 3 call (current-widget-root) bind event function
                  If result <> #PB_Ignore
                     If *this\root
                        If __gui\eventhook(Str(*this\root)+" "+Str(eventtype)+" "+Str(*button)) 
                           result = __gui\eventhook( )\function( )
                        ElseIf __gui\eventhook(Str(*this\root)+" "+Str(eventtype)+" "+Str(#PB_All)) 
                           result = __gui\eventhook( )\function( )
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
                  If eventtype = #__event_Close
                     If result <> #PB_Ignore
                        Select result
                           Case - 1
                              If is_root_( *this ) Or
                                 is_window_( *this )
                                 Close( #PB_All )
                              EndIf
                              
                           Case 1
                              If *button >= 0
                                 If Not IsWindow( *button )
                                    Close( root( ) )
                                 EndIf
                              EndIf
                              
                           Case 0
                              If *button >= 0 And
                                 *button = *data
                                 Close( #PB_All )
                              Else
                                 Close( *this )
                              EndIf
                              
                        EndSelect
                     EndIf
                  EndIf
                  
                  ;\\ если это оставить то после вызова функции напр setState( ) получается EventWidget( ) будеть равно #Null
                  EventWidget( )       = __widget
                  WidgetEvent( )   = __type
                  WidgetEventItem( )   = __item
                  WidgetEventData( )   = __data
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i Bind( *this._s_WIDGET, *callback, eventtype.l = #PB_All, item.l = #PB_All )
         ;
         If *this = #PB_All
            PushMapPosition(roots( ))
            ForEach roots( )
               Bind( roots( ), *callback, eventtype, item )
            Next
            PopMapPosition(roots( ))
            ProcedureReturn #PB_All
         EndIf
         ;
         If *this > 0
            *this\haseventhook = 1
            ;
            If eventtype = #PB_All 
               Define i
               For i = 0 To #__event - 1
                  If i = #__event_Draw
                     Continue
                  EndIf
                  Bind( *this, *callback, i, item )
               Next
            Else
               If eventtype >= 0  
                  If Not FindMapElement( __gui\eventhook( ), Str(*this)+" "+Str(eventtype)+" "+Str(item) )
                     AddMapElement(__gui\eventhook( ), Str(*this)+" "+Str(eventtype)+" "+Str(item))
                     __gui\eventhook.allocate( HOOK, ( ))
                  EndIf
                  __gui\eventhook( )\function = *callback
                  __gui\eventhook( )\type     = eventtype
                  __gui\eventhook( )\item     = item
                  __gui\eventhook( )\widget   = *this
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i Unbind( *this._s_WIDGET, *callback, eventtype.l = #PB_All, item.l = #PB_All )
         ;
         If *this = #PB_All
            PushMapPosition(roots( ))
            ForEach roots( )
               Unbind( roots( ), *callback, eventtype, item )
            Next
            PopMapPosition(roots( ))
            ProcedureReturn #PB_All
         EndIf
         ;
         If *this > 0
            If eventtype = #PB_All 
               Define i
               For i = 0 To #__event - 1
                  Unbind( *this, *callback, i, item )
               Next
            Else
               If eventtype >= 0  
                  If FindMapElement( __gui\eventhook( ), Str(*this)+" "+Str(eventtype)+" "+Str(item) )
                     DeleteMapElement(__gui\eventhook( ), Str(*this)+" "+Str(eventtype)+" "+Str(item))
                  EndIf
               EndIf
            EndIf 
         EndIf
      EndProcedure
      
      ;-
      Procedure.i CloseList( )
         Protected *open._s_WIDGET
         
         ;\\ 1-test splitter
         If Opened( ) And
            Opened( )\type = #__type_Splitter
            
            Opened( )\split_1( ) = Opened( )\FirstWidget( )
            Opened( )\split_2( ) = Opened( )\LastWidget( )
            
            bar_Update( Opened( ), #True )
         EndIf
         
         If Opened( ) And
            Opened( )\parent
            
            If Opened( )\parent\type = #__type_MDI
               *open = Opened( )\parent\parent
            Else
               If Opened( )\Lastroot( )
                  *open                 = Opened( )\Lastroot( )
                  Opened( )\Lastroot( ) = #Null
               Else
                  If Opened( ) = Opened( )\root
                     *open = Opened( )\root\Beforeroot( )
                  Else
                     *open = Opened( )\parent
                  EndIf
               EndIf
            EndIf
         Else
            *open = root( )
         EndIf
         
         If *open = Opened( )
            If *open\root\Beforeroot( )
               UseGadgetList( WindowID(*open\root\Beforeroot( )\canvas\window))
               ; Debug ""+*open\root\Beforeroot( )\canvas\window +" "+Opened( )\root\canvas\window
               *open = *open\root\Beforeroot( )
            EndIf
         EndIf
         
         If *open And
            Opened( ) <> *open
            Opened( ) = *open
            ; OpenList( *open )
         EndIf
      EndProcedure
      
      Procedure.i OpenList( *this._s_WIDGET, item.l = 0 )
         Protected result.i = Opened( )
         
         If *this = Opened( )
            If Not( *this\__Tab( ) And *this\__Tab( )\TabIndex( ) <> item )
               ProcedureReturn result
            EndIf
         EndIf
         
         If *this
            If *this\parent <> Opened( )
               *this\Lastroot( ) = Opened( )
            EndIf
            
            If *this\root
               If *this\root <> root( )
                  If Opened( )\root
                     Opened( )\root\Afterroot( ) = *this\root
                  EndIf
                  *this\root\Beforeroot( ) = Opened( )\root
                  
                  If is_root_( *this )
                     ChangeCurrentCanvas(*this\root\canvas\GadgetID )
                  EndIf
               EndIf
            EndIf
            
            ; add 
            If *this\__Tab( ) And 
               *this\__Tab( )\type = #__type_TabBar
               *this\__Tab( )\TabIndex( ) = Item
            EndIf
            
            Opened( ) = *this
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure Open( window, X.l = 0, Y.l = 0, Width.l = #PB_Ignore, Height.l = #PB_Ignore, title$ = #Null$, flag.q = #Null, *parentID = #Null, Canvas = #PB_Any )
         Protected result, w, g, canvasflag = #PB_Canvas_Keyboard, UseGadgetList, *root._s_root 
         
         ; init
         If Not MapSize( roots( ) )
            Events::SetCallback( @EventHandler( ) )
         EndIf
         
         If PB(IsWindow)( Window )
            w = WindowID( Window )
            ;
            ;             If constants::BinaryFlag( Flag, #__window_NoGadgets )
            ;                flag &~ #__window_NoGadgets
            ;             EndIf
            If constants::BinaryFlag( Flag, #PB_Canvas_Container ) 
               flag &~ #PB_Canvas_Container
               canvasflag | #PB_Canvas_Container
            EndIf
            If Width = #PB_Ignore And 
               Height = #PB_Ignore
               canvasflag | #PB_Canvas_Container
            EndIf
         Else
            If constants::BinaryFlag( Flag, #__window_NoGadgets ) 
               flag &~ #__window_NoGadgets
            Else
               canvasflag | #PB_Canvas_Container
            EndIf
            ;
            ; then bug in windows
            If Window = #PB_Any
               Window = 300 + MapSize( roots( ) )
            EndIf
            ;
            w = OpenWindow( Window, X, Y, Width, Height, title$, flag, *parentID )
            If Window = #PB_Any 
               Window = w 
               w = WindowID( Window ) 
            EndIf
            ;
            If constants::BinaryFlag( Flag, #__window_BorderLess )
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  If CocoaMessage(0, w, "hasShadow") = 0
                     CocoaMessage(0, w, "setHasShadow:", 1)
                  EndIf
               CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
                  If GetClassLongPtr_( w, #GCL_STYLE ) & #CS_DROPSHADOW = 0
                     SetClassLongPtr_( w, #GCL_STYLE, #CS_DROPSHADOW )
                  EndIf
                  ;SetWindowLongPtr_(w,#GWL_STYLE,GetWindowLongPtr_(w,#GWL_STYLE)&~#WS_BORDER) 
                  SetWindowLongPtr_(w,#GWL_STYLE,GetWindowLongPtr_(w,#GWL_STYLE)&~#WS_CAPTION) 
                  SetWindowLongPtr_(w,#GWL_EXSTYLE,GetWindowLongPtr_(w,#GWL_EXSTYLE)|#WS_EX_NOPARENTNOTIFY) 
               CompilerElse
                  ;  
               CompilerEndIf
            EndIf
            ;
            X = 0
            Y = 0
         EndIf
         
         ;\\ get a handle from the previous usage list
         If w
            UseGadgetList = UseGadgetList( w )
         EndIf
         ;
         If X = #PB_Ignore : X = 0 : EndIf
         If Y = #PB_Ignore : Y = 0 : EndIf
         ;
         If Width = #PB_Ignore
            Width = WindowWidth( Window, #PB_Window_InnerCoordinate )
            If X <> #PB_Ignore
               If X > 0 And X < 50 
                  Width - X * 2
               EndIf
            EndIf
         EndIf
         ;
         If Height = #PB_Ignore
            Height = WindowHeight( Window, #PB_Window_InnerCoordinate )
            If Y <> #PB_Ignore
               If Y > 0 And Y < 50 
                  Height - Y * 2
               EndIf
            EndIf
         EndIf
         ;
         If PB(IsGadget)(Canvas)
            g = GadgetID( Canvas )
         Else
            If test_focus_set Or test_focus_show
               canvasflag|#PB_Canvas_DrawFocus
            EndIf
            
            g = CanvasGadget( Canvas, X, Y, Width, Height, canvasflag )
            If Canvas = - 1 : Canvas = g : g = PB(GadgetID)(Canvas) : EndIf
         EndIf
         ;
         If UseGadgetList And w <> UseGadgetList
            UseGadgetList( UseGadgetList )
         EndIf
         
         ;
         If Not FindMapElement( roots( ), Str( g ) ) ; ChangeCurrentCanvas(g)
            result     = AddMapElement( roots( ), Str( g ) )
            roots( ) = AllocateStructure( _s_root )
            root( )    = roots( )
            *root      = roots( )
            
            
            ;
            *root\address   = result
            *root\container = 1
            *root\class     = "root"
            *root\root      = *root
            *root\window    = *root ; если это убрать то функцию set active надо изменить
            *root\type      = #__type_Root
            ;*root\parent   = Opened( )
            
            ;
            *root\color       = _get_colors_( )
            If constants::BinaryFlag( Flag, #__flag_Transparent )
               *root\color\back  = - 1
            EndIf
            SetFontID( *root, PB_( GetGadgetFont )( #PB_Default ))
            
            ;
            *root\canvas\GadgetID = g
            *root\canvas\window   = Window
            *root\canvas\gadget   = Canvas
            
            ;\\
            Post( *root, #__event_create )
            
            ;\\
            If Width Or Height
               Resize( *root, #PB_Ignore, #PB_Ignore, Width, Height )
            EndIf
            
            ;\\
            If Not constants::BinaryFlag( Flag, #__window_NoGadgets ) 
               If Opened( )
                  Opened( )\Afterroot( ) = *root
               EndIf
               *root\Beforeroot( ) = Opened( )
               
               Opened( ) = *root
               ; OpenList( *root)
            EndIf
            
            ;\\
            If constants::BinaryFlag( Flag, #__window_NoActivate )
               *root\focus =- 1
            Else
               SetActive( *root )
            EndIf
         EndIf
         
         If g
            SetWindowData( Window, Canvas )
            
            ;\\ Bug fixed in the windows mouse-(enter&leave)
            CompilerIf #PB_Compiler_OS = #PB_OS_Windows
               Events::BindGadget( Canvas, @EventHandler( ))
            CompilerElse
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_Focus )
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_LostFocus )
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MouseEnter )
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MouseLeave )
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MouseMove )
            CompilerEndIf
            
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_Resize )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_LeftButtonDown )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_LeftButtonUp )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_RightButtonDown )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_RightButtonUp )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MiddleButtonDown )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MiddleButtonUp )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_Input )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_KeyDown )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_KeyUp )
            
            ; BindGadgetEvent( Canvas, @CanvasEvents( ))
            ; BindEvent( #PB_Event_Gadget, @CanvasEvents( ), Window, Canvas )
            BindEvent( #PB_Event_Repaint, @EventRepaint( ), Window )
            If constants::BinaryFlag( canvasflag, #PB_Canvas_Container )
               BindEvent( #PB_Event_SizeWindow, @EventResize( ), Window )
            EndIf
            
            ;\\ z - order
            CompilerIf #PB_Compiler_OS = #PB_OS_Windows
               ;SetWindowLongPtr_( g, #GWL_STYLE, GetWindowLongPtr_( g, #GWL_STYLE ) | #WS_CLIPCHILDREN )
               SetWindowLongPtr_( g, #GWL_STYLE, GetWindowLongPtr_( g, #GWL_STYLE ) | #WS_CLIPSIBLINGS )
               SetWindowPos_( g, #GW_HWNDFIRST, 0, 0, 0, 0, #SWP_NOMOVE | #SWP_NOSIZE )
               
               ; RedrawWindow_(WindowID(a), 0, 0, #RDW_ERASE | #RDW_FRAME | #RDW_INVALIDATE | #RDW_ALLCHILDREN)
               
               RemoveKeyboardShortcut( Window, #PB_Shortcut_Tab )
            CompilerEndIf
            
            ;\\
            CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
               ; CocoaMessage(0, g, "setBoxType:", #NSBoxCustom)
               ; CocoaMessage(0, g, "setBorderType:", #NSLineBorder)
               ; CocoaMessage(0, g, "setBorderType:", #NSGrooveBorder)
               ; CocoaMessage(0, g, "setBorderType:", #NSBezelBorder)
               ; CocoaMessage(0, g, "setBorderType:", #NSNoBorder)
               
               ;;;CocoaMessage(0, w, "makeFirstResponder:", g)
               
               ; CocoaMessage(0, GadgetID(0), "setFillColor:", CocoaMessage(0, 0, "NSColor colorWithPatternImage:", ImageID(0)))
               ; CocoaMessage(0, WindowID(w), "setBackgroundColor:", CocoaMessage(0, 0, "NSColor colorWithPatternImage:", ImageID(0)))
               ; CocoaMessage(0, g,"setFocusRingType:",1)
            CompilerEndIf
         EndIf
         
         widget( ) = *root
         PostEventRepaint( *root )
         ProcedureReturn *root
      EndProcedure
      
      Procedure.i Window( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, *parent._s_WIDGET = 0 )
         Protected fs = DPIScaled(#__window_FrameSize)
         Protected barHeight = DPIScaled( #__window_CaptionHeight )
         
         ;Protected *this.allocate( Widget )
         If Opened( )
            Protected *root._s_root = Opened( )\root
         EndIf
         
         With *this
            Static pos_x.l, pos_y.l
            
            Protected *this._s_WIDGET
            If MapSize( roots( ) )
               If Not ListSize( widgets( ) ) And
                  constants::BinaryFlag( Flag, #__flag_autosize ) 
                  
                  X              = 0
                  Y              = 0
                  Width          = *root\width
                  Height         = *root\height
                  *root\autosize = #True
                  *this          = *root
               Else
                  *this.allocate( widget )
               EndIf
               ;\\ open root list
            Else
               *this = Open( #PB_Any, X, Y, Width + fs * 2, Height + fs * 2 + barHeight, Text, flag | #__window_BorderLess, *parent )
               X     = 0
               Y     = 0
               ;EndIf
            EndIf
            
            ;\\
            If X = #PB_Ignore
               X = pos_x + mouse( )\steps
            EndIf
            If Y = #PB_Ignore
               Y = pos_y + mouse( )\steps
            EndIf
            pos_x = X + fs
            pos_y = Y + fs + barHeight
            
            ;\\
            If constants::BinaryFlag( Flag, #__flag_child )
               If *parent And *parent\type = #__type_MDI
                  *this\child =- 1
               Else
                  *this\child = 1
               EndIf
            EndIf
            
            If *parent
               If *root = *parent
                  *root\parent = *this
               EndIf
               
            Else
               *parent = *root
            EndIf
            
            ;\\
            *this\type            = #__type_window
            *this\frame_x( )      = #PB_Ignore
            *this\frame_y( )      = #PB_Ignore
            *this\frame_width( )  = #PB_Ignore
            *this\frame_height( ) = #PB_Ignore
            
            
            ;\\ replace pb flag
            flag = FromPBFlag( *this\type, flag )
            
            Static count
            *this\flag      = flag
            *this\create    = #True
            *this\class     = #PB_Compiler_Procedure ;+""+ count
            *this\container = 2
            count + 1
            
            ;
            ;       *this\round = round
            ;
            *this\color      = _get_colors_( )
            *this\color\back = $FFF9F9F9
            If constants::BinaryFlag( Flag, #__flag_Transparent ) 
               *this\color\back = - 1
            EndIf
            
            *this\caption\round    = 4
            *this\caption\_padding = *this\caption\round
            *this\caption\color    = _get_colors_( )
            
            ; border frame size
            *this\fs = constants::BinaryFlag( *this\flag, #__flag_borderless, #False ) * fs
            
            
            ;
            *this\CloseButton( )\hide    = constants::BinaryFlag( *this\flag, #__window_SystemMenu, #False )
            *this\MaximizeButton( )\hide = constants::BinaryFlag( *this\flag, #__window_MaximizeGadget, #False )
            *this\MinimizeButton( )\hide = constants::BinaryFlag( *this\flag, #__window_MinimizeGadget, #False )
            *this\HelpButton( )\hide     = 1
            
            
            If *this\MaximizeButton( )\hide = 0 Or
               *this\MinimizeButton( )\hide = 0 Or
               *this\CloseButton( )\hide = 0
               *this\caption\hide = 0
            Else
               *this\caption\hide = constants::BinaryFlag( *this\flag, #__window_titleBar, #False )
            EndIf
            
            If *this\caption\hide
               *this\TitleBarHeight = 0
               *this\fs[2] = 0
            Else
               *this\fs[2] = constants::BinaryFlag( *this\flag, #__flag_borderless, #False ) * barHeight
               *this\TitleBarHeight = *this\fs[2]
               *this\round     = DPIScaled( #__buttonround )
               
               *this\TitleText( )\padding\x = 5
               *this\TitleText( )\string    = Text
            EndIf
            
            *this\CloseButton( )\color    = colors::*this\red
            *this\MaximizeButton( )\color = colors::*this\blue
            *this\MinimizeButton( )\color = colors::*this\green
            
            *this\CloseButton( )\ColorState( )    = 1
            *this\MaximizeButton( )\ColorState( ) = 1
            *this\MinimizeButton( )\ColorState( ) = 1
            
            *this\CloseButton( )\round    = DPIScaled( #__buttonround )
            *this\MaximizeButton( )\round = *this\CloseButton( )\round
            *this\MinimizeButton( )\round = *this\CloseButton( )\round
            *this\HelpButton( )\round     = *this\CloseButton( )\round
            
            *this\CloseButton( )\width    = DPIScaled( #__buttonsize - 2 )
            *this\CloseButton( )\height   = *this\CloseButton( )\width
            
            *this\MaximizeButton( )\width  = *this\CloseButton( )\width
            *this\MaximizeButton( )\height = *this\CloseButton( )\height
            
            *this\MinimizeButton( )\width  = *this\CloseButton( )\width
            *this\MinimizeButton( )\height = *this\CloseButton( )\height
            
            *this\HelpButton( )\width  = *this\CloseButton( )\width * 2
            *this\HelpButton( )\height = *this\CloseButton( )\height
            
            
            
            
            ; Background image
            *this\image\img = - 1
            
            ;
            *this\bs = *this\fs
            
            ;\\
            Post( *this, #__event_create )
            
            ;\\
            If *parent
               If constants::BinaryFlag( *this\flag, #__window_WindowCentered )
                  X = *parent\x + ( *parent\width - Width - *this\fs * 2 - *this\fs[1] - *this\fs[3] ) / 2
                  Y = *parent\y + ( *parent\height - Height - *this\fs * 2 - *this\fs[2] - *this\fs[4] ) / 2
               EndIf
               
               If *this\child Or *parent\type <> #__type_window
                  SetParent( *this, *parent, #PB_Default )
               Else
                  
                  If Not *parent\autosize And SetAttach( *this, *parent, 0 )
                     X - DPIUnscaled(*parent\container_x( )) - DPIUnscaled((*parent\fs + (*parent\fs[1] + *parent\fs[3])))
                     Y - DPIUnScaled(*parent\container_y( )) - DPIUnscaled((*parent\fs + (*parent\fs[2] + *parent\fs[4])))
                  Else
                     ; Debug "888888 "+ *parent +" "+ root( )+" "+Opened( )
                     SetParent( *this, *parent, #PB_Default )
                  EndIf
               EndIf
            EndIf
            
            ;\\
            Resize( *this, X, Y, Width, Height )
            
            If Not constants::BinaryFlag( *this\flag, #__window_NoGadgets )
               OpenList( *this )
            EndIf
            
            If constants::BinaryFlag( *this\flag, #__window_NoActivate )
               *this\focus =- 1
            Else
               If Not *this\anchors
                  SetActive( *this )
               EndIf
            EndIf
            
            If constants::BinaryFlag( *this\flag, #__window_SizeGadget )
               a_create( *this, #__a_full | #__a_zoom | #__a_nodraw )
            EndIf
         EndWith
         
         widget( ) = *this
         
         ProcedureReturn *this
      EndProcedure
      
      Procedure.i Gadget( Type.w, Gadget.i, X.l, Y.l, Width.l, Height.l, Text.s = "", *param1 = #Null, *param2 = #Null, *param3 = #Null, flag.q = #Null )
         Protected *this, g, Window = ID::Window( UseGadgetList( 0 ) )
         
         Flag = FromPBFlag( Type, Flag ) | #__flag_autosize
         
         If MapSize( roots( ) )
            Protected Canvas = root( )\canvas\gadget
         EndIf
         ;
         Open( Window, X, Y, Width, Height, "", #PB_Canvas_Container, #Null, Gadget )
         ;
         Select Type
            Case #__type_Tree : *this = Tree( 0, 0, Width, Height, flag )
            Case #__type_Text : *this = Text( 0, 0, Width, Height, Text, flag )
            Case #__type_Button : *this = Button( 0, 0, Width, Height, Text, flag )
            Case #__type_Option : *this = Option( 0, 0, Width, Height, Text, flag )
            Case #__type_CheckBox : *this = CheckBox( 0, 0, Width, Height, Text, flag )
            Case #__type_HyperLink : *this = HyperLink( 0, 0, Width, Height, Text, *param1, flag )
            Case #__type_Splitter : *this = Splitter( 0, 0, Width, Height, *param1, *param2, flag )
         EndSelect
         ;
         CloseGadgetList( )
         ;
         If Gadget = - 1
            Gadget = GetCanvasGadget( root( ))
            g      = Gadget
         Else
            g = GadgetID( Gadget )
         EndIf
         
         SetGadgetData( Gadget, *this )
         
         If IsGadget(Canvas)
            ; CloseList( )
            ;Debug ""+Gadget+" "+canvas
            ChangeCurrentCanvas( GadgetID(Canvas) )
            ; OpenList( root( ) )
         EndIf
         
         ProcedureReturn g
      EndProcedure
      
      ;       Procedure   ChangeCurrentroot( )
      ;          If MapSize( roots( ) )
      ;             If MapKey( roots( ) ) = ""
      ;                ResetMap( roots( ) )
      ;                NextMapElement( roots( ) )
      ;                root( ) = roots( )
      ;             EndIf
      ;             ProcedureReturn 1
      ;          EndIf
      ;       EndProcedure
      
      Procedure Close( *window._s_WIDGET )
         Protected window, Canvas
         Protected is_window = IsWindow( *window )
         
         ;\\
         If Not is_window
            If *window = #PB_All
               is_window = #True
            Else
               If is_root_( *window )
                  *window   = *window\root\canvas\window
                  is_window = #True
               Else
                  If is_widget_( *window )
                     *window = GetCanvasWindow( *window )
                  EndIf
                  is_window = #True
               EndIf
            EndIf
         EndIf
         
         ;\\
         If is_window
            ForEach roots( )
               root( ) = roots( )
               window  = root( )\canvas\window
               Canvas  = root( )\canvas\gadget
               
               ;\\
               If #PB_All <> *window
                  If window <> *window
                     Continue
                  EndIf
               EndIf
               
               If *window = #PB_All
                  If root( )\haschildren
                     LastElement( widgets( ) )
                     Repeat
                        If is_window_( widgets( ) )
                           window = #PB_All
                           ; Debug " free --------- " + widgets( )\class
                           
                           Free( widgets( ) )
                           
                           If Not root( )\haschildren
                              Break 2
                           EndIf
                           
                        ElseIf Not PreviousElement( widgets( ) )
                           Break
                        EndIf
                     ForEver
                     
                     If window = #PB_All
                        Break
                     EndIf
                  EndIf
                  
                  __gui\eventquit = - 1
               EndIf
               
               ;\\
               If Free( root( ) )
                  If PB(IsWindow)( window )
                     If DraggedGadget( ) = Canvas
                        DraggedGadget( ) = - 1
                     EndIf
                     If EnteredGadget( ) = Canvas
                        EnteredGadget( ) = - 1
                     EndIf
                     If PressedGadget( ) = Canvas
                        PressedGadget( ) = - 1
                     EndIf
                     If FocusedGadget( ) = Canvas
                        FocusedGadget( ) = - 1
                     EndIf
                     
                     If __gui\eventquit = - 1
                        FreeGadget( Canvas )
                        CloseWindow( window )
                        ResetMap( roots( ) )
                     Else
                        PostEvent( #PB_Event_CloseWindow, window, #PB_Default )
                     EndIf
                  EndIf
               EndIf
            Next
         EndIf
         
         ;\\
         ;ChangeCurrentroot( )
         
         ProcedureReturn window
      EndProcedure
      
      ;-
      Procedure.i Free( *this._s_WIDGET )
         If *this
            If Not Send( *this, #__event_free )
               ; еще не проверял
               ;                If  *this\haseventhook
               ;                   Define i
               ;                   For i = 0 To #__event_free
               ;                      If *this\eventhook[i]
               ;                         ; Debug "free-events " + *this\eventhook[i]
               ;                         Unbind( *this, *this\eventhook[i]\function, i, *this\eventhook[i]\item )
               ;                      EndIf
               ;                   Next
               ;                EndIf
               
               ;\\
               If Not *this\parent
                  *this\parent = *this
               EndIf
               
               If PopupWindow( ) = *this
                  PopupWindow( ) = #Null
               EndIf
               
               ;\\
               If Opened( ) = *this
                  OpenList( *this\parent )
               EndIf
               
               If GetActive( ) = *this
                  If *this <> *this\parent
                     GetActive( ) = *this\parent
                  Else
                     GetActive( ) = #Null
                  EndIf
               EndIf
               
               If *this\parent\FirstWidget( ) = *this
                  *this\parent\FirstWidget( ) = *this\AfterWidget( )
               EndIf
               
               If *this\parent\LastWidget( ) = *this
                  *this\parent\LastWidget( ) = *this\BeforeWidget( )
               EndIf
               
               If *this\parent\__Tab( )
                  If *this\parent\__Tab( ) = *this
                     FreeStructure( *this\parent\__Tab( ) )
                     *this\parent\__Tab( ) = 0
                  EndIf
                  *this\parent\__Tab( ) = #Null
               EndIf
               
               If *this\parent\scroll
                  If *this\parent\scroll\v = *this
                     FreeStructure( *this\parent\scroll\v )
                     *this\parent\scroll\v = 0
                  EndIf
                  If *this\parent\scroll\h = *this
                     FreeStructure( *this\parent\scroll\h )
                     *this\parent\scroll\h = 0
                  EndIf
                  ; *this\parent\scroll = #Null
               EndIf
               
               If *this\parent\type = #__type_Splitter
                  If *this\parent\split_1( ) = *this
                     FreeStructure( *this\parent\split_1( ) )
                     *this\parent\split_1( ) = 0
                  EndIf
                  If *this\parent\split_2( ) = *this
                     FreeStructure( *this\parent\split_2( ) )
                     *this\parent\split_2( ) = 0
                  EndIf
               EndIf
               
               ;
               If *this\parent\haschildren
                  ; With *this\root
                  LastElement(widgets( ))
                  Repeat
                     If widgets( ) = *this Or IsChild( widgets( ), *this )
                        If widgets( )\root\haschildren > 0
                           widgets( )\root\haschildren - 1
                           
                           If widgets( )\parent <> widgets( )\root
                              widgets( )\parent\haschildren - 1
                           EndIf
                           
                           If widgets( )\__Tab( )
                              If widgets( )\__Tab( ) = widgets( )
                                 Debug "   free - tab " + widgets( )\__Tab( )\class
                                 FreeStructure( widgets( )\__Tab( ) )
                                 widgets( )\__Tab( ) = 0
                              EndIf
                              widgets( )\__Tab( ) = #Null
                           EndIf
                           
                           If widgets( )\scroll
                              If widgets( )\scroll\v
                                 Debug "   free - scroll-v " + widgets( )\scroll\v\class
                                 FreeStructure( widgets( )\scroll\v )
                                 widgets( )\scroll\v = 0
                              EndIf
                              If widgets( )\scroll\h
                                 Debug "   free scroll-h - " + widgets( )\scroll\h\class
                                 FreeStructure( widgets( )\scroll\h )
                                 widgets( )\scroll\h = 0
                              EndIf
                              ; widgets( )\scroll = #Null
                           EndIf
                           
                           If widgets( )\type = #__type_Splitter
                              If widgets( )\split_1( )
                                 Debug "   free - splitter - first " + widgets( )\split_1( )\class
                                 FreeStructure( widgets( )\split_1( ) )
                                 widgets( )\split_1( ) = 0
                              EndIf
                              If widgets( )\split_2( )
                                 Debug "   free - splitter - second " + widgets( )\split_2( )\class
                                 FreeStructure( widgets( )\split_2( ) )
                                 widgets( )\split_2( ) = 0
                              EndIf
                           EndIf
                           
                           If widgets( )\bounds\attach
                              ;Debug " free - attach " +widgets( )\bounds\attach\parent\class
                              widgets( )\bounds\attach\parent = 0
                              FreeStructure( widgets( )\bounds\attach )
                              widgets( )\bounds\attach = #Null
                           EndIf
                           
                           If PressedWidget( ) = widgets( )
                              PressedWidget( ) = #Null
                           EndIf
                           If GetActive( ) = widgets( )
                              GetActive( ) = #Null
                           EndIf
                           
                           Debug " free - " + widgets( )\class
                           If widgets( )\BeforeWidget( )
                              widgets( )\BeforeWidget( )\AfterWidget( ) = widgets( )\AfterWidget( )
                           EndIf
                           If widgets( )\AfterWidget( )
                              widgets( )\AfterWidget( )\BeforeWidget( ) = widgets( )\BeforeWidget( )
                           EndIf
                           
                           widgets( )\parent  = #Null
                           widgets( )\address = #Null
                           
                           DeleteElement( widgets( ), 1 )
                        EndIf
                        
                        If *this\root\haschildren = 0
                           Break
                        EndIf
                     ElseIf PreviousElement( widgets( )) = 0
                        Break
                     EndIf
                  ForEver
                  ; EndWith
               EndIf
               
               ;\\
               If PressedWidget( ) = *this
                  PressedWidget( ) = #Null
               EndIf
               
               ;\\
               If roots( ) = *this
                  roots( )\address = #Null
                  DeleteMapElement( roots( ) )
                  ; DeleteMapElement( roots( ), MapKey( roots( ) ) )
                  ; ResetMap( roots( ) )
                  Debug " FREE - " + *this\class + " " + *this\address
                  
                  If Not MapSize( roots( ) )
                     __gui\eventquit = 1
                  EndIf
               EndIf
               
               ProcedureReturn 1
            EndIf
         EndIf
      EndProcedure
      
      Procedure Repost( ) ; root = #PB_All )
         Static *repaint._s_root
         Protected *root._s_root, __widget, __type, __item, __data
         
         ;\\
         If __gui\eventexit <> 1
            __gui\eventexit = 1
            
            ;\\ send posted events (queue events) 
            If ListSize( __gui\eventqueue( ) )
               ForEach __gui\eventqueue( )
                  *root    = __gui\eventqueue( )\widget\root
                  __widget = __gui\eventqueue( )\widget
                  __type   = __gui\eventqueue( )\type
                  __item   = __gui\eventqueue( )\item
                  __data   = __gui\eventqueue( )\data
                  DeleteElement( __gui\eventqueue( ) )
                  
                  ;\\
                  If *root <> root( )
                     If *repaint
                        If ChangeCurrentCanvas( *repaint\canvas\gadgetID )
                           *repaint\canvas\postrepaint = 0
                           PostEventRepaint( *repaint )
                        EndIf
                     EndIf
                     If ChangeCurrentCanvas( *root\canvas\gadgetID )
                        *repaint = root( )
                        ; Debug "    change canvas "
                     EndIf
                  EndIf
                  
                  ;\\
                  If #__event_Repaint = __type
                     Debug "#__event_Repaint"
                     
                  ElseIf #__event_Close = __type
                     Debug "Post close...."
                     Send( __widget, __type, __item, __data )
                     Break
                     
                  ElseIf #__event_Focus = __type Or
                         #__event_LostFocus = __type
                     
                     If Not Send( __widget, __type, __item, __data )
                        DoEvents( __widget, __type )
                     EndIf
                     
                  Else
                     Send( __widget, __type, __item, __data )
                  EndIf
                  ;EndIf
               Next
            EndIf
            
            ;\\
            If *repaint
               *repaint\canvas\postrepaint = 0
               PostEventRepaint( *repaint )
               *repaint = 0
            EndIf
            
            ;\\ call message
            If EnteredWidget( ) And
               EnteredWidget( )\root <> root( )
               ; Debug " Change Current Canvas "
               ChangeCurrentCanvas( EnteredWidget( )\root\canvas\gadgetID )
            EndIf
            
            Debug "     -     "
         EndIf
      EndProcedure
      
      Procedure WaitClose( *root._s_root = #Null, waitTime.l  = #PB_Default )
         Static mainWindow = - 1
         Protected result
         Protected *ew._s_WIDGET
         
         ;\\
         If *root
            mainWindow = *root\canvas\window
         EndIf
         
         ;\\ send posted events
         If __gui\eventexit <> 1
            Repost( )
         Else
            ReDraw( root( ) )
         EndIf
         
         ;\\
         If MapSize( roots( ) )
            ;\\
            ;ChangeCurrentroot( )
            
            Repeat
               
               Select WaitWindowEvent( waittime )
                     ;                   Case #PB_Event_ActivateWindow
                     ;                      EventActivate( )
                     ;                   Case #PB_Event_DeactivateWindow
                     ;                      EventDeactive( )
                     ;                   Case #PB_Event_Repaint
                     ;                      EventRepaint( )
                     
                  Case #PB_Event_CloseWindow : __gui\eventquit = - 1
                     Protected window = PB(EventWindow)( )
                     Protected Canvas = PB(GetWindowData)( window )
                     
                     If ChangeCurrentCanvas( PB(GadgetID)(Canvas))
                        Debug "Wait close.... " + root( )\address + " " + root( )\canvas\window + " " + window + " - " + EventGadget( ) + " " + EventData( )
                        
                        Send( root( ), #__event_Close, window, mainWindow )
                        
                     Else
                        FreeGadget( Canvas )
                        CloseWindow( window )
                     EndIf
                     
                     ;\\
                     If MapSize( roots( ) )
                        ; ChangeCurrentroot( )
                        __gui\eventquit = 0
                     Else
                        __gui\eventquit = 1
                     EndIf
                     
                  Case #PB_Event_RestoreWindow
                     Debug "restore.... "
                     Send( root( ), #__event_Restore )
                     
                  Case #PB_Event_MaximizeWindow
                     Debug "maximize.... "
                     If Send( root( ), #__event_Maximize )
                        SetWindowState( window, #__window_Normal )
                     EndIf
                     
                  Case #PB_Event_MinimizeWindow
                     Debug "minimize.... "
                     If Send( root( ), #__event_Minimize )
                        SetWindowState( window, #__window_Normal )
                     EndIf
                     
               EndSelect
               
               If __gui\eventquit
                  __gui\eventquit = 0
                  Debug "---------break-QUIT-------- " + IsWindow(root( )\canvas\window)
                  Break
               EndIf
               If Not MapSize( roots( ) )
                  Debug "---------break-MAP---------"
                  Break
               EndIf
            ForEver
            
            ;\\
            If Not __gui\eventquit
               If IsWindow( PB(EventWindow)( ))
                  Debug "  - end cicle - yes event window"
                  PB(CloseWindow)( PB(EventWindow)( ))
               Else
                  Debug "  - end cicle - no event window"
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure WaitQuit( *root._s_root = #Null )
         
         __gui\eventloop + 1
         
         ;\\ send posted events
         If __gui\eventexit <> 1
            Repost( )
         EndIf
         
         ;\\ start main loop
         CompilerSelect #PB_Compiler_OS
            CompilerCase #PB_OS_Linux
               gtk_main_( )
               
            CompilerCase #PB_OS_Windows
               Protected msg.MSG
               
               While GetMessage_( @msg, #Null, 0, 0 )
                  TranslateMessage_( msg )
                  DispatchMessage_( msg )
               Wend
               
            CompilerCase #PB_OS_MacOS
               ;                Define sharedApplication = CocoaMessage( 0, 0, "NSApplication sharedApplication" )
               ;                Define currentEvent = CocoaMessage(0,sharedApplication , "currentEvent") ; var currentEvent: NSEvent? { get }
               ;                Debug " WaitQuit - "+currentEvent
               CocoaMessage( 0, CocoaMessage( 0, 0, "NSApplication sharedApplication" ), "run" )
               
         CompilerEndSelect
         
         Debug "  event( QUIT ) ";+*window\class
      EndProcedure
      
      Procedure PostQuit( *root._s_root = #Null )
         Debug "post( QUIT)"
         
         __gui\eventloop = 0
         
         ;\\
         ;          If *root > 0
         ;             PushMapPosition( roots( ) )
         ;             ForEach roots( )
         ;                If roots( ) <> *root
         ;                   DisableWindow( roots( )\canvas\window, #False )
         ;                EndIf
         ;             Next
         ;             PopMapPosition( roots( ) )
         ;          EndIf
         
         ;\\ stop main loop
         CompilerSelect #PB_Compiler_OS
            CompilerCase #PB_OS_Linux
               gtk_main_quit_( )
               
            CompilerCase #PB_OS_Windows
               PostQuitMessage_( 0 )
               
            CompilerCase #PB_OS_MacOS
               CocoaMessage( 0, CocoaMessage( 0, 0, "NSApplication sharedApplication" ), "stop:", 0 )
               
         CompilerEndSelect
      EndProcedure
      
      ;-
      Procedure MessageEvents( )
         
         Select WidgetEvent( )
            Case #__event_Repaint
               Debug "repaint - message " + EventWidget( )\class
               
            Case #__event_Focus
               Debug " MessageEvents (FOCUS) "
               
            Case #__event_LeftClick
               Protected *ew._s_WIDGET = EventWidget( )
               
               If #__type_Button = *ew\type
                  Protected *message._s_WIDGET = *ew\window
                  
                  Select GetText( *ew )
                     Case "No" : SetData( *message, #__message_No )     ; no
                     Case "Yes" : SetData( *message, #__message_Yes )   ; yes
                     Case "Cancel" : SetData( *message, #__message_Cancel ) ; cancel
                  EndSelect
                  
                  Unbind( *message, @MessageEvents( ), #__event_LeftClick )
                  
                  PostQuit( *message )
               EndIf
               
               ProcedureReturn #PB_Ignore
         EndSelect
         
      EndProcedure
      
      Procedure Message( Title.s, Text.s, flag.q = #Null )
         If __gui\eventloop > 3
            ProcedureReturn 0
         EndIf
         __gui\eventloop = 1
         __gui\eventexit = 0
         
         Protected result, X, Y, Width = 400, Height = 120
         Protected img = - 1, f1 = - 1, f2 = 8
         Protected bw = 85, bh = 25, iw = Height - bh - f1 - f2 * 4 - 2 - 1
         
         Protected._s_root *parent, *message
         Protected._s_WIDGET *ok, *no, *cancel, *widget = EventWidget( )
         
         ;\\
         If *widget
            *parent = *widget\root
         Else
            *parent = root( )
         EndIf
         
         ;          ;\\ 1)
         ;          x = ( root( )\width - width )/2
         ;          y = ( root( )\height - height )/2 - #__window_CaptionHeight
         ;          *message = Window( x, y, width, height, Title, #__window_TitleBar, *parent)
         ; ;
         ; ; ;          ;\\ 2)
         ; ; ;          ; *message = Window( x, y, width, height, Title, #__window_TitleBar | #__window_WindowCentered, *parent)
         ;
         ;\\ 3)
         Define newflag = #__window_TitleBar | #__window_Invisible | #__window_NoActivate
         If constants::BinaryFlag( Flag, #__message_ScreenCentered )
            newflag | #__window_ScreenCentered
         Else
            newflag | #__window_WindowCentered
         EndIf
         
         *message = Open( #PB_Any, X, Y, Width, Height, Title, newflag, WindowID( *parent\canvas\window ))
         SetClass( *message, #PB_Compiler_Procedure )
         
         ;\\
         If constants::BinaryFlag( Flag, #__message_Info )
            img = -1;CatchImage( #PB_Any, ?img_info, ?end_img_info - ?img_info )
            CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'APPL'")
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'caut'")
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'note'")
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'stop'")
            CompilerEndIf
            DataSection
               img_info:
               ; size : 1404 bytes
               Data.q $0A1A0A0D474E5089, $524448490D000000, $2800000028000000, $B8FE8C0000000608, $474B62060000006D
               Data.q $A0FF00FF00FF0044, $493105000093A7BD, $5F98CD8558544144, $3B3BBFC71C47144C, $54C0F03D7F7BB707
               Data.q $14DA0D5AD0348C10, $7C1A6360A90B6D6D, $6D03CAADF49898D3, $D1A87D7AD262545F, $B69B5F469AA9349A
               Data.q $680D82AB6C37D269, $A6220B47FA51A890, $DECFEE38E105102A, $053FB87D333B772E, $CCDD3CF850EE114A
               Data.q $0766FDFE767ECCDC, $F476DC569948E258, $5BCA94AD89227ADA, $3C10B9638C15E085, $7A59504C89240017
               Data.q $8055B371E2774802, $2E678FEAA9A17AFC, $06961711C3AC7F58, $EF905DD4CA91A322, $A159B0EAD38F5EA2
               Data.q $4D30000CA9417358, $1A3033484098DD06, $2C671601A343EB08, $EDD3F547A138B820, $DAFB560A82C89ABE
               Data.q $2E1D2C863E5562A8, $3CD50AAB359173CC, $8D8C00262FCE6397, $83FB0DA43FD7D187, $DDAAFF5D74F85C02
               Data.q $B3A477582D666357, $45754E5D9B42C73C, $16732AAEDD894565, $41FBABA3A6B0899B, $3FAB16311F45A424
               Data.q $8FDB82C66F4B707F, $1595D6EF9001DD5F, $69B32B24BD2B2529, $EA0DEEB7E6181FDC, $9D9F369A5BB6326
               Data.q $A94FBDAEC7BBE0B7, $A732EAE5951BF5F4, $5C114204D2DD216D, $6B9C344C651BD9B9, $5F8FDB82CE66FAAA
               Data.q $5F57EDFEF90841DD, $8469F486ECB61D52, $C2634777AE971D35, $2A9E9FF5E072D5DC, $8DE85A9CB3A47758
               Data.q $4DCF559EDB963737, $0D1DD74741182C67, $C9DDD550E5F86C71, $E68DAFB555E65365, $79E522B2BAF36858
               Data.q $B2DAC765C78001C9, $8DAFB573522C2B62, $8F9455C8929B2E4E, $77B1059330B54E5C, $D579F26E672AD4E3
               Data.q $AC8D0E0F2BD2BD5F, $9F9532F8021F1304, $C910838758FEB56E, $816E0DF732515957, $DAAF81036D5F2CA9
               Data.q $C2E305A5E54F66D7, $73EED922E79850D2, $88B9E6F02BB0E0D9, $2241697952FB2AA2, $B51C5D50B8ACB1A3
               Data.q $69322368555B297F, $A654FC089009A54C, $1E34DD1B45EE65EE, $5F9F7579224403B7, $416D440905240B59
               Data.q $244059B47C668BBE, $56F2A644DDF22B00, $1EBC77E473482920, $E3DCB126CD5175A7, $E720A4816B952854
               Data.q $AA1C1F8C97DBB0A8, $3CE0A0A481CA0015, $2829A74C5DCDCD5F, $0F5481799C981CD6, $9356B8BCB2A56E0A
               Data.q $0B4C0AC3821950B0, $6188962AC4914B75, $8326E2692ED8B632, $32112C58C9006044, $ECE858E5B0989D1A
               Data.q $743677B1BE616735, $07BA4027E44A0623, $6C80F60B188E13D1, $829201DC00066B09, $8C96858E8E2EC9A6
               Data.q $805AC633A82068E1, $371FE43AD04336D4, $3E017C48017AE2C5, $292045C9C672091A, $FE17193FA6FF7E78
               Data.q $24BB170DC670F1B1, $228215E7B04759EC, $8381081FD341E657, $105A57F6BD342FFB, $B487FAFAA7631800
               Data.q $02CD8258AB7E1B4C, $7FAFA533BF1272D8, $0B4E95227E4D3348, $C2283FB0F4FD51EA, $448A12D9E3719E9A
               Data.q $A9D39441710FE231, $C02226AFBB60B4BC, $BE71A320F3D6FF0F, $B80C4880C5A02FD4, $EAE80059B3FE70FC
               Data.q $BFD96D3E2109AFBE, $33433E3653923D3E, $6181FDEF7925044E, $40CCA2BCC151695B, $BFB32F995BDBE050
               Data.q $4BD80C6A38598607, $EED1229FCE4E4FFB, $37BADFD58B1931AB, $9AC9DFBE734207A8, $31180DF76E30F1B1
               Data.q $484A73B9DC7FEBCE, $D7A5B83F9D2F4FFB, $F3E8DECDC7776C64, $77EFE7474D218F98, $BEA6C0F5ABB1CE75
               Data.q $E6D34B630E33E5E9, $D1DDEBF686899CB3, $30F1B1C9EBB3E0B1, $707F829A8EE8DF2E, $EB33FE99E7EAA9A1
               Data.q $92547BE745F7507E, $CF3D5948A6BB587F, $BB773989021B3939, $EE4FFEBB1CE0C06F, $17B5C8FDB00082A9
               Data.q $0D85E5765D9A9161, $D2CFBB3D8776A515, $B091079EAE8A2450, $58699FAF38C60FA6, $AAAC44AE240825E7
               Data.q $524EF9BCCF8048DA, $7CE63B71E6C2BC56, $B1F0FBBCC0BA9B3D, $B389F106710FE236, $E0B19105F4D4FFA4
               Data.q $4964FB2AA2BB5124, $96EF9053D965946A, $5542B5438A9C7B97, $AA218C9B953A9172, $F504091819AC204F
               Data.q $19C68C085CE323C7, $0AFC1667EBA1393B, $9132FEBD1DB62678, $0A88495AE54CAD78, $974C713C10AF0B93
               Data.q $C7A92409E9132188, $DA1DCE5A182B5934, $00FF3496B3E99DD4, $C5E52BD0901E71B2, $444E454900000000
               Data.b $AE, $42, $60, $82
               end_img_info:
            EndDataSection
         EndIf
         If constants::BinaryFlag( Flag, #__message_Error )
            img = CatchImage( #PB_Any, ?img_error, ?end_img_error - ?img_error )
            
            DataSection
               img_error:
               ; size : 1642 bytes
               Data.q $0A1A0A0D474E5089, $524448490D000000, $3000000030000000, $F902570000000608, $474B620600000087
               Data.q $A0FF00FF00FF0044, $491F06000093A7BD, $41D9ED8168544144, $CCEFF1C71DC7546C, $F6A06C4218C6ED7A
               Data.q $E448A410E515497A, $2070C40BB121A4E0, $46DC512B241A4E54, $124BD29004AB2039, $5150F4DA060B2630
               Data.q $52894889E9734815, $42B01552AB888955, $0A9535535581A8E4, $A69B1B838C151352, $0F5F9BEDFAF1DAF1
               Data.q $1B16F7DEBB3635DE, $DBF3D5DEB2E7A873, $8599BCFFBCCDEFCF, $8B999BBFFED0B685, $D94DFC3235B5A893
               Data.q $2AD241A8331E9177, $A24A50090AA21D50, $F4E23494382E38DF, $CDC2449B1FD5A692, $67C9F4601567BBF6
               Data.q $EA910FC176C73A56, $FB3E2C820C026811, $90FA231C4D0CFD92, $77E7A6B4722EFB8E, $3975B5B8601AF37D
               Data.q $E795079E6401C8E9, $718909C7B3E02570, $139E92E751637E23, $67B6C9EA403CB783, $16621CEA8257EE71
               Data.q $51DA72431163C9F8, $ED40125BADFBB67D, $B69198EA40D4D1ED, $E1CFD7F08E620A6A, $649A76066FAEE378
               Data.q $1CAF696A00B39BD2, $F8A5BF1E82DFA931, $B68B1E9F7E92E7EC, $10366C83462792C6, $9B483C679D1EDEDF
               Data.q $E5ADFDD3DFC7CA2B, $679B1D481A900EB3, $FD5FC5A1C6FDEE7C, $789EA5087457C832, $DF27E036FC740DB6
               Data.q $2EDEA7739A99E91B, $7D63573D4FD7C039, $091E176ECB121FEF, $3D92C5F7739E6BA1, $E3F8C8438CEC4B05
               Data.q $E338639DC7E0C287, $93E731F8D0BBE631, $A883C20B9CF064CA, $C03059C99BECC32E, $8A2A927678B696E8
               Data.q $6773962BC31DF31F, $5E32A40D35BC1ED7, $61AE34C8F7C47E20, $B482B75C33F7CFE9, $BD6DC8C3B3E18BF3
               Data.q $F3CE00E87774D0D6, $C8C73B8EC3301077, $1EAA53FC3F1397B7, $A3ED685DBED88879, $889BEB3C515EF88C
               Data.q $FBB987C6E2C3DC1F, $4F437B575A305FF5, $D8C99E55CF67C74C, $B432B0912802A16D, $0BD967DF31F98D05
               Data.q $2244C006A9AB295B, $95211F6B425F3AC4, $131BB7DFAF88CCC9, $17F2C3565D100089, $60D9F045FBE631B7
               Data.q $0C030246B6B523F0, $1BA0F14E30F0BF9F, $EF9127DDBFE58A36, $7DED884489AFFE4F, $0078CCC4F5CBAD05
               Data.q $A1A89BAF79FF3EF9, $AF17ABFAEFE27E38, $B54C2C7A40060436, $9FD33FDED83596F9, $D82EC4FA885E59F8
               Data.q $D0F7C463C6548EB0, $7ABDF473BC7CC6DA, $3F0026054BD3D308, $C1803039A9C479F1, $CC32DA5654B6183D
               Data.q $843D34389FD11F87, $875C6CC25F3AC4B5, $EFC7C8EAEF1236D6, $86D6458670FE883D, $6F207AF2E72123C2
               Data.q $EE229FADFBFAF81E, $E35C19F88FCEA52F, $89B8CABF4FF7EA1A, $F8B374EBF5EC6161, $5A3FDFED5BFB10EC
               Data.q $524EA5751007B45D, $7B2B97B0FD822695, $BC3B99AC09EB4E0F, $A8050B7237754E04, $6194D2B63B9F052A
               Data.q $FCB800F3AFA5E83E, $D12A27E1D9A4A295, $FA6EE7C74A0110E2, $3343761C4CC77B89, $A4788CCDAA213002
               Data.q $66EA532260530BFC, $3698EAEF136AB9F0, $377FBE21937FAE6C, $F026FF1923335366, $598BE240181C3102
               Data.q $3270DA691B56A7E1, $666A6EC0EAEF12D6, $08BE902F11299324, $7D1CEF04E7174011, $C4AF2272F4B8079D
               Data.q $9181BE3CC1EC0FC6, $C085D20F121D8CEC, $B0DECF8273F38800, $621F92BD2E59CCE6, $A6A48DE6EC4EC1E5
               Data.q $181F3A4E3C00A70C, $F4D5891F61D388C0, $FF7BBCB9F7DE3E68, $9675385AC3B9B564, $5373410C15F6BBCB
               Data.q $ECEB025E38B489F6, $8C7F569A4B00C0E9, $4B1CE3220F0C5CB8, $4FE0BA3BE3E5365B, $7F45AC8B952B4C1F
               Data.q $2DEA844889EFC9EC, $AA5D23C40BBE782D, $091207B8325CECFD, $630A823C3166F487, $4543837863E1F7F9
               Data.q $19E4E8B5A54439F1, $CBEF0864EAFCBD2E, $4131B94C3B5E0641, $2D1D5E40D37B9078, $4D6E25BF5A1CA4B8
               Data.q $EEB9F085E5489FE6, $FC565ABAD19F3B4E, $A7A63EFBBDAE05E4, $6E687C654A927037, $E61DAF030B4B7AA2
               Data.q $3330F5B7215D7F8E, $DF6577BFDC7F695E, $FAD5F0000A84AF5F, $73E133C7EE175E27, $6A27DF318E73D6A5
               Data.q $EF9E3E769954FD08, $47491E3068863728, $99CE42CECBFF3FEA, $D060C40EE915C4D7, $1E3436B2A80CBC02
               Data.q $1F8B0DAC8B0C0A89, $CEE0189ADA5B5132, $7C316769C9AF2793, $336A9850616065F1, $19C98BB16DA138F5
               Data.q $ED9F556C6E8B7D37, $3A0F0BB71BC70B7E, $03198A7793FCFF1A, $E71DB45BAAEEE677, $EFB1DD41BC6F9DDE
               Data.q $B7736A17C8317D2C, $077E9A22B2A5A1BF, $E37DE9DE572F3CD8, $B9BF6727F58E9E45, $86F6AD189E4B100B
               Data.q $B13618F9EBF4207E, $F1370F06153E967B, $E8769E1B43D0C703, $DA14BFE31CD96208, $607AA16C6FE6341E
               Data.q $630AEDEA7739AB6A, $7C039E94863A4956, $152AAF8DE711D25A, $E681F06F91FCB30F, $65624DA80766477A
               Data.q $DDC7F71DC8CBF889, $35C804BCEC3342D1, $388C1EF7C0FABD81, $AA70FBA106B9CB35, $887D7214F8B2AA07
               Data.q $FB5D3D9D6F3A4E8B, $B6859B67A164B9D9, $FEEC7FED695A16D0, $00006B709A860323, $42AE444E45490000
               Data.b $60, $82
               
               
               end_img_error:
            EndDataSection
         EndIf
         If constants::BinaryFlag( Flag, #__message_Warning )
            img = CatchImage( #PB_Any, ?img_warning, ?end_img_warning - ?img_warning )
            
            DataSection
               img_warning:
               ; size : 1015 bytes
               Data.q $0A1A0A0D474E5089, $524448490D000000, $2800000028000000, $B8FE8C0000000608, $474B62060000006D
               Data.q $A0FF00FF00FF0044, $49AC03000093A7BD, $DD98ED8558544144, $67339F8718551C6B, $6BA934DBB3B3B267
               Data.q $60255624DDDB3493, $785E2A42F0458295, $068C4AF69BDA17E3, $030B4150FDBB362A, $D9AC514B49409622
               Data.q $86FF825726F0546E, $2968A4290537B482, $7B79EF7CD1F26F42, $CCECECDD9B68DDB1, $3DE7337B07E4DE84
               Data.q $CE73DE666FECFBEF, $BE4895C549A28EC0, $D18003BEE526913D, $1BC8E3E7C60FAABF, $9FECC2827EF8A00B
               Data.q $A661997980015464, $5B7351EBFBE505F3, $47813B9850001351, $53C3D570C7AAE19E, $B23A91C71FB3F205
               Data.q $DEADAC5DE7CBF283, $8B8B83D4866AB9E2, $A3501A8AC0BD75C0, $F5C1DD1FC946EE17, $A401C06F62B271D5
               Data.q $FA6A26F924D8AC80, $7E5A30F4E54A0E48, $5560C8F125D550E7, $EF525E4622D61FC1, $09839A235B0F5C4F
               Data.q $6801C1363A672499, $22528E5162499C81, $1C849B7E9D4CA034, $9B0B11E8E79A47A4, $D4275B0ADE94A961
               Data.q $86766961DF69962D, $ACF075B2DD97A5A7, $D5E5ADCCBFD61B82, $E0E70AD6ED2BCBC9, $01C25A643259C2E2
               Data.q $267D976692740A74, $BDB1C9941DB6A94C, $00648F1BCF26FAD8, $B2C7BE9AE0658040, $5EA769DE2F46A039
               Data.q $1126BD12FA3A0EFB, $4936293C09200E18, $A54A016D72DDA26B, $768E93EC9BC50878, $2E521BC80E33910B
               Data.q $141140605A676E1D, $A093744937932ADA, $8281A48D7ED62F67, $15A3F82459547171, $403871C753A9C1DC
               Data.q $06470A2CF737C256, $804094E82C78A9F8, $D268304CD1725D32, $92EA1CB5051ED691, $7565900D8BC67CFC
               Data.q $D18BC6D5D9712E8E, $117CC62E3760194C, $10E54E54A025BC24, $2A40E3FD026F2319, $6858AA64C64A1498
               Data.q $61F477CD41DADA15, $27D00E40F641C4E3, $8096E855B9759636, $67D2AF1465F163F2, $8B1B13EAEAE0D8EC
               Data.q $535855B2BD295223, $321995650B7DF140, $C60B95CDEEFB4C6E, $B8D66D1F4CB2AB43, $D29243E17FBD28B6
               Data.q $084F4AD2B684774F, $4859A46E52C3D2B8, $3D5D0669FAB94043, $435D5C1B6F49A0CF, $B3ACF95CB8C88D26
               Data.q $D9AFD513076370D1, $EC1E3B578FDB0E23, $4DE1A355F6B926C1, $FEC232053D2E5280, $8171BCABDB194E87
               Data.q $9B43A3CCF63AB911, $1D8D8BF4930EEB37, $1B03C18628DF29A2, $2381EFADB70E37E8, $5E94A941C87A1FFF
               Data.q $4653A34D7B30E2C3, $57BCFD90E834E96B, $37AF4AA6517A9634, $506499A04FDF1404, $4BE860F68ADAA152
               Data.q $7B4EB6B20E173A18, $DF46D1F2B907EA58, $CA9492773F250FFD, $BBF30895BD7115D2, $BF527F49C6E93C04
               Data.q $2DC126EA5CA400A4, $73BAB8046E349A0E, $A6B8292C73E17BD5, $BB85E8D406B15816, $05103AFB551D0735
               Data.q $DA95C00E05160EAE, $1B16FD43CE570957, $DA5DBF1B621FD38E, $EA54075063860747, $5917BB61884A7336
               Data.q $FBD40FF52823CC02, $FE37EB4DCBBCBAE0, $9BF9A436D938F722, $8ED1D8C6E3DEF555, $2EE409553D03EE00
               Data.q $4900000000FAB21F
               Data.b $45, $4E, $44, $AE, $42, $60, $82
               end_img_warning:
            EndDataSection
         EndIf
         
         ;\\
         Container( f1, f1, Width - f1 * 2, Height - bh - f1 - f2 * 2 - 1 )
         Image( f2, f2, iw, iw, img, #PB_Image_Border | #__image_center )
         Text( f2 + iw + f2, f2, Width - iw - f2 * 3, iw, Text, #__flag_Textcenter | #__flag_Textleft )
         CloseList( )
         
         ;\\
         *ok = Button( Width - bw - f2, Height - bh - f2, bw, bh, "Ok", #PB_Button_Default )
         If constants::BinaryFlag( Flag, #__message_YesNo ) Or
            constants::BinaryFlag( Flag, #__message_YesNoCancel )
            SetText( *ok, "Yes" )
            *no = Button( Width - ( bw + f2 ) * 2 - f2, Height - bh - f2, bw, bh, "No" )
         EndIf
         If constants::BinaryFlag( Flag, #__message_YesNoCancel )
            *cancel = Button( Width - ( bw + f2 ) * 3 - f2 * 2, Height - bh - f2, bw, bh, "Cancel" )
         EndIf
         
         Bind( *message, @MessageEvents( ), #__event_LeftClick )
         Bind( *message, @MessageEvents( ), #__event_Focus )
         
         ;\\
         Sticky( *message, #True )
         HideWindow( *message\root\canvas\window, 0);, #__window_NoActivate )
         
         ;\\
         ;Disable( *parent, 1 )
         
         ;\\
         WaitQuit( *message )
         
         ;\\
         ;Disable( *parent, 0 )
         
         ;\\
         FreeImage( img )
         Sticky( *message, #False )
         result = GetData( *message )
         
         ;\\ close
         Close( *message )
         Debug "Close - Message " + IsWindow(*message\canvas\window)
         
         ;\\
         ;ChangeCurrentroot( )
         
         ;\\
         EventWidget( ) = *widget
         
         ProcedureReturn result
      EndProcedure
      
   EndModule
CompilerEndIf
Macro UseWidgets( )
   UseModule widget
   UseModule constants
   UseModule structures
EndMacro
;- <<<


CompilerIf #PB_Compiler_IsMainFile
   UseWidgets( )
   test_docursor = 1
   test_changecursor = 1
   test_setcursor = 1
   #_DD_reParent = 1<<2
   
   Global btn1, Button_0, Button_1, Button_2, Button_3, Button_4, Button_5, Splitter_0, Splitter_1, Splitter_2, Splitter_3, Splitter_4
   
   Procedure events_widgets( )
      Protected drop, source, selectedIndex, selectedText$
      
      Select WidgetEvent( )
         Case #__event_DragStart      
            
            Select EventWidget( )         
               Case btn1, Button_0    
                  Debug "event( DRAGSTART )"
                  
                  If EventWidget( ) = btn1
                     If DDragPrivate( #_DD_reParent )
                        ChangeCurrentCursor( btn1, #PB_Cursor_Hand ) 
                     EndIf
                  Else
                     selectedIndex = GetState(EventWidget())           
                     selectedText$ = GetItemText(EventWidget(), selectedIndex)
                     DDragText(selectedText$)                                           
                  EndIf
            EndSelect
            
         Case #__event_Drop   
            Debug "event( DROP )"
            
         Case #__event_Cursor      
            Debug Index(EventWidget( ))
            ProcedureReturn #__cursor_Hand
      EndSelect
      
   EndProcedure
   
   If Open(0, 0, 0, 430, 280, "SplitterGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
      SetBackgroundColor(widget(), $FFAC97DB)
      
      ;\\
      a_init(root( ))
      Window(230,10,180,100,"form1")
         btn1 = Button(10,10,110,80, "btn1") 
      CloseList( )
      
      ;\\
      Splitter_1 = Splitter(30, 10, 180, 100, -1, -1, #PB_Splitter_Vertical)
      SetAttribute(Splitter_1, #PB_Splitter_FirstMinimumSize, 60)
      SetAttribute(Splitter_1, #PB_Splitter_SecondMinimumSize, 60)
      Splitter_2 = Splitter(30, 10, 180, 100, Splitter_1, -1)
      ;SetFrame( Splitter_1, 20)
      
      Button_0 = Button(30,120,110,80, "Button 0") 
      Button_1 = Button(80,130,80,40, "Button 1")
      Button_2 = Button(120,120,110,80, "Button 2") 
      Button_3 = String(180,120,110,80, "String") 
      SetFrame( Button_3, 20)
      Button_4 = String(250,120,110,80, "String") 
      Button_5 = Button(320,120,110,80, "Button 3") 
      
      Disable( Button_1, 1 )
      
      SetCursor( Button_0, #__cursor_Hand )
      SetCursor( Button_1, #__cursor_Cross )
      SetCursor( Button_2, #__cursor_IBeam )
      
      EnableDDrop(Button_1, #PB_Drop_Text, #PB_Drag_Copy)
      EnableDDrop(Button_4, #PB_Drop_Text, #PB_Drag_Copy)
      EnableDDrop(Button_5, #PB_Drop_Text, #PB_Drag_Copy)
      Bind( #PB_All, @events_widgets( ), #__event_DragStart )
      Bind( #PB_All, @events_widgets( ), #__event_Drop )
      
      SetMoveBounds( btn1, -1,-1,-1,-1 )
      SetMoveBounds( Button_0, -1,-1,-1,-1 )
      SetMoveBounds( Button_1, -1,-1,-1,-1 )
      SetMoveBounds( Button_2, -1,-1,-1,-1 )
      SetMoveBounds( Button_3, -1,-1,-1,-1 )
      SetMoveBounds( Button_4, -1,-1,-1,-1 )
      
      ;\\ change current cursor
      ; Bind( #PB_All, @events_widgets( ), #__event_Cursor )
      
      WaitClose( )
   EndIf
   
CompilerEndIf

; IDE Options = PureBasic 6.12 LTS (Windows - x64)
; CursorPosition = 20540
; FirstLine = 20530
; Folding
; EnableXP
; DPIAware