;
;     Light library documentation
;
;      (c) 2014 - Fantaisie Software
;

@Library Light

@Overview

Lights are essential components in order to create worlds which look realistic. As with
real life light, it is possible to specify many attributes of this light such as: the color, 
specular color, direction and more. @@InitEngine3D must
be called successfully before using the light functions.

@CommandList

@ExampleFile All Light.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CopyLight(#Light, #NewLight)

@Description
  Creates a new light which is the exact copy of the specified light. All light
  attributes such as: color, specular color, position etc. are duplicated.

@Parameter "#Light"
  The light to copy.
  
@Parameter "#NewLight"
  A number to identify the new light.
  @ReferenceLink "purebasic_objects" "#PB_Any" can be used to auto-generate this number.

@ReturnValue
  Nonzero if the light was successfully duplicated, zero otherwise. If @#PB_Any was used
  for the #NewLight parameter then the generated number is returned on success.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CreateLight(#Light, Color [, x, y, z [, Flags]])

@Description

  Creates a new #Light of the given color in the current world. 
  
@Parameter "#Light"
  A number to identify the light.
  @ReferenceLink "purebasic_objects" "#PB_Any" can be used to auto-generate this number.

@Parameter "Color"
  The color of the new light. Valid colors may be easily created using the @@RGB function.
  
@OptionalParameter "x, y, z"
  The initial light absolute position. If omitted the light is created at position "0,0,0".

@OptionalParameter "Flags"
  It can be one of the following value:
@FixedFont
  @#PB_Light_Point       : Creates a point light (the light is emitted in all directions) (default).
  @#PB_Light_Directional : Creates a directional light.
  @#PB_Light_Spot        : Creates a spot type light. @@SpotLightRange can be used to change the light behavior.
@EndFixedFont

@ReturnValue
  Nonzero if the light was successfully created, zero otherwise. If @#PB_Any was used
  for the #Light parameter then the generated number is returned on success.
  
@Example
@Code
  CreateLight(0, RGB(255,0,0)) ; Creates a red light
  
  CreateLight(1, RGB(0,255,0),  0, 100.7, 50) ; Creates a green light, at the position (0, 100.7, 50)
@EndCode

@SeeAlso
  @@FreeLight

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeLight(#Light)

@Description
  Frees the specified #Light. All its associated memory is released and at this point, the object no longer may be used.

@Parameter "#Light"
  The light to free. If @#PB_All is specified, all the remaining lights are freed.

@NoReturnValue

@Remarks
  All remaining lights are automatically freed when the program ends.

@SeeAlso
  @@CreateLight

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function HideLight(#Light, State)

@Description
  Hides or shows the specified #Light. 
  
@Parameter "#Light"
  The light to use.
  
@Parameter "State"
  It can be one of following values:
@FixedFont
  @#True : the #Light is hidden
  @#False: the #Light is shown
@EndFixedFont

@NoReturnValue

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = IsLight(#Light)

@Description
  Tests if the given light is valid and correctly initialized. 

@Parameter "#Light"
  The light to test.

@ReturnValue
  Nonzero if the light is valid, zero otherwise.

@Remarks
  This function is bulletproof and may be used with any value. This is the correct way to ensure a light is ready to use.

@SeeAlso
  @@CreateLight
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GetLightColor(#Light, Type)

@Description
  Gets the specified light color value.
  
@Parameter "#Light"
  The light to use.
  
@Parameter "Type"
  The color type to get. It can be one of the following value:    
@FixedFont
  @#PB_Light_DiffuseColor : get the diffuse color value.
  @#PB_Light_SpecularColor: get the specular color value.
@EndFixedFont
    
@ReturnValue
  The specified light RGB color value.

@SeeAlso
  @@SetLightColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetLightColor(#Light, Type, Color)

@Description
  Changes the light color value.
  
@Parameter "#Light"
  The light to use.
  
@Parameter "Type"
  The color type to change. It can be one of the following value:    
@FixedFont
  @#PB_Light_DiffuseColor : change the diffuse color.
  @#PB_Light_SpecularColor: change the specular color.
@EndFixedFont
    
@Parameter "Color"
  The new RGB color value. It can be easily created with @@RGB.

@NoReturnValue

@SeeAlso
  @@GetLightColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SpotLightRange(#Light, InnerAngle, OuterAngle [, FallOff])

@Description
  Changes the spot #Light behavior. The light has to be created with the @#PB_Light_Spot flag.

@Parameter "#Light"
  The light to use.  
  
@Parameter "InnerAngle"
  Inner angle of the light.

@Parameter "OutterAngle"
  Outer angle of the light.
  
@Parameter "FallOff"
  Falloff of the light amongst the distance. A value of 1 means a linear falloff, a value less than 1 means a slower falloff
  while a value greater than 1 means a faster falloff.

@NoReturnValue

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function LightLookAt(#Light, x, y, z)

@Description
  Changes the #Light orientation in the world, to point towards the specified x,y,z point.
  
@Parameter "#Light"
  The light use.

@Parameter "x, y, z"
  The point to look at.

@NoReturnValue  
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function DisableLightShadows(#Light, State)

@Description
  Disables or enables the light shadow casting.

@Parameter "#Light"
  The light use.

@Parameter "State"
  The new state of the light shadow casting.
  If sets to @#True, the light shadow casting will be disabled. If sets to @#False it will be enabled.

@NoReturnValue

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function MoveLight(#Light, x, y, z [, Mode])

@Description
  Moves the specified light.

@Parameter "#Light"
  The light to use.

@Parameter "x, y, z"  
  The new position of the light.

@OptionalParameter "Mode"
  The move mode. It can be one of the following values:
@FixedFont
  @#PB_Relative: relative move, from the current light position (default).
  @#PB_Absolute: absolute move to the specified position.
@EndFixedFont
  combined with one of the following values:
@FixedFont
  @#PB_Local : local move.
  @#PB_Parent: move relative to the parent position.
  @#PB_World : move relative to the world.
@EndFixedFont

@NoReturnValue  

@SeeAlso
  @@RotateLight

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function LightDirection(#Light, x, y, z)

@Description
  Changes the direction of a light. The position of the light is not changed.

@Parameter "#Light"
  The light to use.

@Parameter "x, y, z"
  The direction vector (usually values between -1.0 and 1.0, if not it will be automatically normalized).

@NoReturnValue

@SeeAlso
  @@LightDirectionX, @@LightDirectionY, @@LightDirectionZ
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LightDirectionX(#Light [, Mode])

@Description
  Returns the 'x' direction vector of the light.

@Parameter "#Light"
  The light to use.

@OptionalParameter "Mode"
  The mode to get the 'x' direction vector. It can be one of the following value:
@FixedFont
  @#PB_Absolute: get the absolute 'x' direction vector of the light in the world (default).
  @#PB_Relative: get the 'x' direction vector of the light relative to its parent.
@EndFixedFont  

@ReturnValue
  The 'x' direction vector of the light. This value is always between -1.0 and 1.0.
  
@SeeAlso
  @@LightDirectionY, @@LightDirectionZ, @@LightDirection

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LightDirectionY(#Light [, Mode])

@Description
  Returns the 'y' direction vector of the light.

@Parameter "#Light"
  The light to use.

@OptionalParameter "Mode"
  The mode to get the 'y' direction vector. It can be one of the following value:
@FixedFont
  @#PB_Absolute: get the absolute 'y' direction vector of the light in the world (default).
  @#PB_Relative: get the 'y' direction vector of the light relative to its parent.
@EndFixedFont  

@ReturnValue
  The 'y' direction vector of the light. This value is always between -1.0 and 1.0.

@SeeAlso
  @@LightDirectionX, @@LightDirectionZ, @@LightDirection

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LightDirectionZ(#Light [, Mode])

@Description
  Returns the 'z' direction vector of the light.

@Parameter "#Light"
  The light to use.

@OptionalParameter "Mode"
  The mode to get the 'z' direction vector. It can be one of the following value:
@FixedFont
  @#PB_Absolute: get the absolute 'z' direction vector of the light in the world (default).
  @#PB_Relative: get the 'z' direction vector of the light relative to its parent.
@EndFixedFont  

@ReturnValue
  The 'z' direction vector of the light. This value is always between -1.0 and 1.0.

@SeeAlso
  @@LightDirectionX, @@LightDirectionY, @@LightDirection

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LightX(#Light [, Mode])

@Description
  Returns the current position of the light in the world.

@Parameter "#Light"
  The light to use.

@OptionalParameter "Mode"
  The mode to get the 'x' position. It can be one of the following value:
@FixedFont
  @#PB_Absolute: get the absolute 'x' position of the light in the world (default).
  @#PB_Relative: get the 'x' position of the light relative to its parent.
@EndFixedFont  

@ReturnValue
  The 'x' position of the light.
  
@SeeAlso
  @@LightY, @@LightZ, @@MoveLight
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LightY(#Light [, Mode])

@Description
  Returns the current position of the light in the world.

@Parameter "#Light"
  The light to use.

@OptionalParameter "Mode"
  The mode to get the 'y' position. It can be one of the following value:
@FixedFont
  @#PB_Absolute: get the absolute 'y' position of the light in the world (default).
  @#PB_Relative: get the 'y' position of the light relative to its parent.
@EndFixedFont  

@ReturnValue
  The 'y' position of the light.
  
@SeeAlso
  @@LightX, @@LightZ, @@MoveLight

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LightZ(#Light [, Mode])

@Description
  Returns the current position of the light in the world.

@Parameter "#Light"
  The light to use.

@OptionalParameter "Mode"
  The mode to get the 'z' position. It can be one of the following value:
@FixedFont
  @#PB_Absolute: get the absolute 'z' position of the light in the world (default).
  @#PB_Relative: get the 'z' position of the light relative to its parent.
@EndFixedFont  

@ReturnValue
  The 'z' position of the light.

@SeeAlso
  @@LightX, @@LightY, @@MoveLight

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function LightAttenuation(#Light, Range, Attenuation)

@Description
  Changes the light attenuation.

@Parameter "#Light"
  The light to use.

@Parameter "Range"
  The light range (in world unit) above which the light won't affect the world anymore.

@Parameter "Attenuation"
  The global attenuation of the light. A value of 0.0 means no global attenuation (it will still attenuate depending of the range).
  It can be used to adjust the light brightness.

@NoReturnValue

@SeeAlso
  @@SetLightColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function RotateLight(#Light, x, y, z [, Mode])

@Description
  Rotates the #Light according to the specified x,y,z angle values. 

@Parameter "#Light"
  The light to use.

@Parameter "x, y, z"  
  The new rotation to apply to the light. Values are in degree ranging from 0 to 360.

@OptionalParameter "Mode"
  It can be one of the following value:  
@FixedFont
  @#PB_Absolute: absolute rotation (default).
  @#PB_Relative: relative rotation based on the previous light rotation.    
@EndFixedFont

@NoReturnValue

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LightRoll(#Light [, Mode])

@Description
  Gets the roll of the #Light.

@Parameter "#Light"
  The light to use.

@OptionalParameter "Mode"
  The mode to get the roll. It can be one of the following value:
@FixedFont
  @#True : the roll is the raw value, but it can't be used in @@RotateLight to get back the same orientation (default).
  @#False: the roll is adjusted, so it can put back in @@RotateLight to get back the same orientation.
@EndFixedFont  

@ReturnValue
  The current roll value of the light.

@SeeAlso
  @@LightYaw, @@LightPitch
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LightPitch(#Light [, Mode])

@Description
  Gets the pitch of the #Light.

@Parameter "#Light"
  The light to use.

@OptionalParameter "Mode"
  The mode to get the pitch. It can be one of the following value:
@FixedFont
  @#True : the pitch is the raw value, but it can't be used in @@RotateLight to get back the same orientation (default).
  @#False: the pitch is adjusted, so it can be put back in @@RotateLight to get back the same orientation.
@EndFixedFont  

@ReturnValue
  The current pitch value of the light.

@SeeAlso
  @@LightYaw, @@LightRoll
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LightYaw(#Light [, Mode])

@Description
  Gets the yaw of the #Light.

@Parameter "#Light"
  The light to use.

@OptionalParameter "Mode"
  The mode to get the yaw. It can be one of the following value:
@FixedFont
  @#True : the yaw is the raw value, but it can't be used in @@RotateLight to get back the same orientation (default).
  @#False: the yaw is adjusted, so it can be put back in @@RotateLight to get back the same orientation.
@EndFixedFont  

@ReturnValue
  The current yaw value of the light.

@SeeAlso
  @@LightPitch, @@LightRoll
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function LightID = LightID(#Light)

@Description
  Returns the unique system identifier of the light.

@Parameter "#Light"
  The light to use.

@ReturnValue
  The unique system identifier of the light.

@SupportedOS
