;
;     Spline library documentation
;
;      (c) 2012 - Fantaisie Software
;

@Library Spline

@Overview

A spline contains any number of points which are smoothly interpolated. The time to go 
from one point to another is always the same, independent from the distance between these points.
A spline doesn't exist physically in the 3D world, it is an virtual 
object which can be used for different purpose, like path-finding, smooth node moving
(be sure to check @LibraryLink "nodeanimation" "NodeAnimation" library for this as well)
and more.
@LineBreak
@LineBreak
@@InitEngine3D should be called successfully before using the spline functions.
@LineBreak
@LineBreak
  See also the Wikipedia article about @InternetLink "http://en.wikipedia.org/wiki/Spline_(mathematics)" "splines".
@Image spline.png
@CommandList

@ExampleFile All Spline.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CreateSpline(#Spline)

@Description
  Creates a new spline. A spline doesn't exist physically in the 3D world, it is an virtual 
  object which can be used for different purpose, like path-finding, smooth node moving
  (be sure to check @LibraryLink "nodeanimation" "NodeAnimation" library for this as well)
  and more. To calculate the position of an intermediate point, see @@ComputeSpline.

@Parameter "#Spline"
  The number to identify the new spline. @ReferenceLink "purebasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@ReturnValue
  Returns zero if the spline can't be created. If @ReferenceLink "purebasic_objects" "#PB_Any" is used 
  as '#Spline' parameter, the new spline number is returned.

@SeeAlso
  @@FreeSpline, @@ComputeSpline 

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeSpline(#Spline)

@Description
  Frees a spline and releases all its associated memory. This spline must not be used
  (by using its number with the other functions in this library) after
  calling this function, unless you create it again.

@Parameter "#Spline"
  The spline to free. If @#PB_All is specified, all the remaining splines are freed.

@NoReturnValue

@Remarks
  All remaining splines are automatically freed when the program ends.

@SeeAlso
  @@CreateSpline
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function AddSplinePoint(#Spline, x, y, z)

@Description
  Add a new point to the spline. The time to go from one point to another is always the same, 
  independent from the distance between these points.

@Parameter "#Spline"
  The spline to use.

@Parameter "x, y, z"
  The new point position in the world.
  
@NoReturnValue

@SeeAlso
  @@CreateSpline, @@ComputeSpline
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ClearSpline(#Spline)

@Description
  Clear the spline. All points will be removed from the spline.

@Parameter "#Spline"
  The spline to clear.

@NoReturnValue

@SeeAlso
  @@CreateSpline, @@AddSplinePoint
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CountSplinePoints(#Spline)

@Description
  Returns the number of points in the spline.

@Parameter "#Spline"
  The spline to use.

@ReturnValue
  Returns the number of points in the spline.

@SeeAlso
  @@CreateSpline, @@AddSplinePoint
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SplinePointX(#Spline, PointIndex)

@Description

  Returns the spline point 'x' position.

@Parameter "#Spline"
  The spline to use.
  
@Parameter "PointIndex"
  The point index. The first point index is zero. The point index has to be below than the result of
  @@CountSplinePoints.
  
@ReturnValue
  Returns the spline point 'x' position.

@SeeAlso
  @@CreateSpline, @@AddSplinePoint, @@SplinePointY, @@SplinePointZ

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SplinePointY(#Spline, PointIndex)

@Description

  Returns the spline point 'y' position.

@Parameter "#Spline"
  The spline to use.
  
@Parameter "PointIndex"
  The point index. The first point index is zero. The point index has to be below than the result of
  @@CountSplinePoints.
  
@ReturnValue
  Returns the spline point 'y' position.

@SeeAlso
  @@CreateSpline, @@AddSplinePoint, @@SplinePointX, @@SplinePointZ

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SplinePointZ(#Spline, PointIndex)

@Description

  Returns the spline point 'z' position.

@Parameter "#Spline"
  The spline to use.
  
@Parameter "PointIndex"
  The point index. The first point index is zero. The point index has to be below than the result of
  @@CountSplinePoints.
  
@ReturnValue
  Returns the spline point 'z' position.

@SeeAlso
  @@CreateSpline, @@AddSplinePoint, @@SplinePointX, @@SplinePointY

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function UpdateSplinePoint(#Spline, PointIndex, x, y, z)

@Description
  Update the specified point in the spline. The time to go from one point to another is always the same, 
  independent from the distance between these points.

@Parameter "#Spline"
  The spline to use.

@Parameter "PointIndex"
  The point index. The first point index is zero. The point index has to be below than the result of
  @@CountSplinePoints.

@Parameter "x, y, z"
  The new point position in the world.
  
@NoReturnValue

@SeeAlso
  @@CreateSpline, @@ComputeSpline
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ComputeSpline(#Spline, Offset)

@Description
  Computes the spline point position at the specified offset. Once the point has been computed, its position
  is available with @@SplineX, @@SplineY and @@SplineZ.

@Parameter "#Spline"
  The spline to use.

@Parameter "Offset"
  The offset in the spline. The offset value is ranged from 0.0 (start of the spline) and 1.0 (end of the spline).

@NoReturnValue

@SeeAlso
  @@CreateSpline, @@SplineX, @@SplineY and @@SplineZ
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SplineX(#Spline)

@Description

  Returns the spline 'x' position in the world, after a @@ComputeSpline.

@Parameter "#Spline"
  The spline to use.
  
@ReturnValue
  Returns the spline point 'x' position in the world, after a @@ComputeSpline.

@SeeAlso
  @@ComputeSpline, @@SplineY, @@SplineZ

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SplineY(#Spline)

@Description

  Returns the spline 'y' position in the world, after a @@ComputeSpline.

@Parameter "#Spline"
  The spline to use.
  
@ReturnValue
  Returns the spline point 'y' position in the world, after a @@ComputeSpline.

@SeeAlso
  @@ComputeSpline, @@SplineX, @@SplineZ

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SplineZ(#Spline)

@Description

  Returns the spline 'z' position in the world, after a @@ComputeSpline.

@Parameter "#Spline"
  The spline to use.
  
@ReturnValue
  Returns the spline point 'z' position in the world, after a @@ComputeSpline.

@SeeAlso
  @@ComputeSpline, @@SplineX, @@SplineY

@SupportedOS
