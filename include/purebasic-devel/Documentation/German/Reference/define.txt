@Title Define

@Syntax

  @Keyword Define.<Typ> [<Variable> [= <Ausdruck>], <Variable> [= <Ausdruck>], ...]

@Description

  Weist einer Reihe an @ReferenceLink "variables" "Variablen" den gleichen Variablentyp zu.
  @LineBreak
  Ohne dieses Schlüsselwort werden Variablen mit dem Standardtyp von PureBasic deklariert,
  welcher vom Typ INTEGER ist. Zur Erinnerung, der Typ INTEGER umfasst: @LineBreak
  4 Byte (mit einem 32-Bit Compiler), im Bereich von -2147483648 bis +2147483647 @LineBreak
  8 Byte (mit einem 64-Bit Compiler), im Bereich von -9223372036854775808 bis +9223372036854775807
  
@Example
@Code
   Define.b a, b = 10, c = b*2, d  ; diese 4 Variablen werden vom Typ 'Byte' (.b) sein
@EndCode

  @Keyword Define ist sehr flexibel, da Sie auch einer einzelnen Variable innerhalb einer
  Serie einen (abweichenden) Typ zuweisen können.

@Example
@Code  
   Define.q a, b.w, c, d   ; a, c und d sind vom Typ 'Quad' (.q), während b ein 'Word' (.w) ist

   Debug SizeOf(a) ; wird 8 ausgeben
   Debug SizeOf(b) ; wird 2 ausgeben, da es nicht den Standardtyp hat
   Debug SizeOf(c) ; wird 8 ausgeben
   Debug SizeOf(d) ; will wird 8 ausgeben
@EndCode

  @Keyword Define kann auch mit @ReferenceLink "dim" "Arrays", @ReferenceLink "newlist" "Linked Lists"
  und @ReferenceLink "newmap" "Maps" verwendet werden.

; -------------------------------------------------------------------------------------------------

@Syntax

  @Keyword Define <Variable>.<Typ> [= <Ausdruck>] [, <Variable>.<Typ> [= <Ausdruck>], ...] 

@Description
  
  Alternative Möglichkeit zur Variablendeklaration mittels @Keyword "Define".

@Example

@Code
  Define MyChar.c 
  Define MyLong.l 
  Define MyWord.w 
  
  Debug SizeOf(MyChar)   ; wird 2 ausgeben
  Debug SizeOf(MyLong)   ; wird 4 ausgeben
  Debug SizeOf(MyWord)   ; wird 2 ausgeben
@EndCode
