;
;     SerialPort library documentation
;
;      (c) Fantaisie Software
;

@Library SerialPort

@Overview
  Die serielle Schnittstelle (auch bekannt als RS-232 Port) wurde erstmals in 1969 hergestellt,
  und sie wird - trotz ihres "Alters" - immer noch weit verbreitet in der Industrie genutzt.
  Der Prozess der Herstellung von Computer-gesteuerten Hardware-Prototypen wird vereinfacht,
  wenn die serielle Schnittstelle eingesetzt wird. Diese Bibliothek bietet vollen Zugriff auf
  die am Computer verfügbaren seriellen Schnittstellen. Einiges grundlegendes Wissen über die
  in dieser Dokumentation verwendeten Begriffe wird benötigt, sehen Sie 
  @InternetLink "http://de.wikipedia.org/wiki/RS-232" "Wikipedia - RS232" für weitere Informationen.
@LineBreak
@LineBreak
  Hinweis: In der Befehlsbeschreibung dieser deutschen Dokumentation wird der Einfachheit halber
  für die serielle Schnittstelle der englische Begriff "SerialPort" verwendet.  

@CommandList

@ExampleFile All SerialPort.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = AvailableSerialPortInput(#SerialPort)

@Description
  Gibt die Anzahl verbleibender Bytes im  Eingabepuffer des SerialPorts zurück.

@Parameter "#SerialPort"
  Der zu verwendende SerialPort.
  
@ReturnValue
  Die Anzahl verbleibender Bytes im  Eingabepuffer des SerialPorts.
  
@SeeAlso
  @@AvailableSerialPortOutput

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = AvailableSerialPortOutput(#SerialPort)

@Description
  Gibt die Anzahl verbleibender Bytes im Ausgabepuffer des SerialPorts zurück.

@Parameter "#SerialPort"
  Der zu verwendende SerialPort.
  
@ReturnValue
  Die Anzahl verbleibender Bytes im Ausgabepuffer des SerialPorts.

@SeeAlso
  @@AvailableSerialPortInput
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function CloseSerialPort(#SerialPort)

@Description
  Schließt die serielle Schnittstelle, welche zuvor mittels @@OpenSerialPort geöffnet wurde.

@Parameter "#SerialPort"
  Der zu schließende SerialPort. Wenn @#PB_All angegeben wird, dann werden alle verbliebenen
  "SerialPorts" freigegeben.

@NoReturnValue

@Remarks
  Alle verbleibenden offenen seriellen Ports werden automatisch geschlossen, wenn
  das Programm endet.
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = GetSerialPortStatus(#SerialPort, Attribut)

@Description
  Gibt den Status des angegebenen SerialPorts zurück.
  
@Parameter "#SerialPort"
  Der zu verwendende SerialPort.

@Parameter "Attribut"
  Dies kann einer der folgenden Werte sein:
@FixedFont
  @#PB_SerialPort_RI : Ermittelt den RI Signal Status (0 oder 1)
  @#PB_SerialPort_DCD: Ermittelt den DCD Signal Status (0 oder 1)
  @#PB_SerialPort_DSR: Ermittelt den DSR Signal Status (0 oder 1)
  @#PB_SerialPort_CTS: Ermittelt den CTS Signal Status (0 oder 1)
  @#PB_SerialPort_XonCharacter : Zeichen, welches für die "Xon/Xoff Handshaking Sequenz" verwendet wird (zwischen 1 und 255)
  @#PB_SerialPort_XoffCharacter: Zeichen, welches für die "Xon/Xoff Handshaking Sequenz" verwendet wird (zwischen 1 und 255)
@EndFixedFont

@ReturnValue
  Der Status des angegebenen SerialPorts, entsprechend des angegebenen Attributs.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = IsSerialPort(#SerialPort)

@Description
  Überprüft, ob der angegebene SerialPort gültig und korrekt initialisiert ist.

@Parameter "#SerialPort"
  Der zu überprüfende SerialPort.

@ReturnValue
  Ein Wert ungleich Null, wenn der SerialPort gültig ist, andernfalls Null.

@Remarks
  Diese Funktion ist "kugelsicher" und kann mit jedem Wert verwendet werden.
  Dies ist der korrekte Weg, um sicherzugehen, dass eine serielle Schnittstelle bereit
  zur Benutzung ist. 

@SeeAlso
  @@OpenSerialPort
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = SerialPortError(#SerialPort)

@Description
  Gibt den Fehler auf dem SerialPort zurück, wenn @@ReadSerialPortData, @@WriteSerialPortData 
  oder @@WriteSerialPortString fehlschlagen. 

@Parameter "#SerialPort"
  Der zu verwendende SerialPort.

@ReturnValue
  Dies kann eine Kombination der folgenden Werte sein:
@FixedFont
  @#PB_SerialPort_RxOver: Ein Eingabepuffer Überlauf (englisch "Overflow") ist aufgetreten.
                         Es ist entweder kein Platz im Eingabepuffer oder ein Zeichen wurde
                         nach dem "End-of-file" (EOF; "Ende der Datei") empfangen.
  @#PB_SerialPort_OverRun: Ein Zeichen-Puffer Überlauf ist aufgetreten.
                          Das nächste Zeichen geht verloren.
  @#PB_SerialPort_RxParity : Die Hardware stellte einen "Parity" (Parität) Fehler fest.
  @#PB_SerialPort_Frame    : Die Hardware stellte einen "Framing" Fehler fest.
  @#PB_SerialPort_Break    : Die Hardware stellte eine "Break" Bedingung fest.
  @#PB_SerialPort_TxFull   : Die Applikation versuchte ein Zeichen zu senden, aber der Ausgabepuffer war voll.
  @#PB_SerialPort_IOE      :  Ein I/O Fehler trat während der Kommunikation mit dem Gerät (englisch "device") auf.
  @#PB_SerialPort_WaitingCTS  : Definiert, ob die Übertragung auf das zu sendende CTS (clear-to-send) Signal wartet.
  @#PB_SerialPort_WaitingDSR  : Definiert, ob die Übertragung auf das zu sendende DSR (data-set-ready) Signal wartet.
  @#PB_SerialPort_WaitingRLSD : Definiert, ob die Übertragung auf das zu sendende RLSD (receive-line-signal-detect) Signal wartet.
  @#PB_SerialPort_XoffReceived: Definiert, ob die Übertragung wartet, weil ein XOFF Zeichen empfangen wurde.
  @#PB_SerialPort_XoffSent    : Definiert, ob die Übertragung wartet, weil ein XOFF Zeichen übertragen wurde.
                               Die Übertragung hält an, wenn das XOFF Zeichen an ein System übertragen wird, welches das
                               nächste Zeichen als XON annimmt, unabhängig vom aktuellen Zeichen.
  @#PB_SerialPort_EOFSent: Definiert, ob das end-of-file (EOF) Zeichen empfangen wurde.
@EndFixedFont  

@SeeAlso
  @@ReadSerialPortData, @@WriteSerialPortData, @@WriteSerialPortString

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SerialPortID = SerialPortID(#SerialPort)

@Description
  Gibt den eindeutigen Systembezeichner ("Identifier" bzw. ID) des SerialPorts zurück.

@Parameter "#SerialPort"
  Der zu verwendende SerialPort.

@ReturnValue
  Die ID des SerialPorts. Diese Funktion ist nützlich, wenn eine andere Befehlsbibliothek
  oder API-Befehle einen Bezug auf eine serielle Schnittstelle benötigt.

@SeeAlso
  @@OpenSerialPort

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = OpenSerialPort(#SerialPort, SerialPortName$, Bauds, Parität, Daten, Stop.f, HandshakeModus, EingabePufferGröße, AusgabePufferGröße)

@Description
  Öffnet einen SerialPort (serielle Schnittstelle) zur weiteren Verwendung.
  
@Parameter "#SerialPort"
  Eine Nummer zum Identifizieren des neuen SerialPort.
  @ReferenceLink "purebasic_objects" "#PB_Any" kann verwendet werden, um diese Zahl
  automatisch zu generieren.
  
@Parameter "SerialPortName$"
  Textkennung (englisch "Text identifier") für die serielle Schnittstelle, zum Beispiel
  "COM1" auf Windows oder "/dev/ttyS0" auf Linux. 

@Parameter "Bauds"
  Bestimmt die Geschwindigkeit der seriellen Verbindung und kann einer der folgenden
  Werte sein:
@FixedFont
    50, 75, 110, 150, 300, 600, 1200, 1800, 2400
    4800, 9600, 19200, 38400, 57600 or 115200
@EndFixedFont

@Parameter "Parität"
  Definiert, wie die Parität (englisch "Parity") bei dieser Verbindung gehandhabt wird.
  Dies kann einer der folgenden Werte sein:
@FixedFont
  @#PB_SerialPort_NoParity   : Keine Parität
  @#PB_SerialPort_EvenParity : Gerade ("Even") Parität
  @#PB_SerialPort_MarkParity : "Mark" Parität
  @#PB_SerialPort_OddParity  : "Odd" Parität
  @#PB_SerialPort_SpaceParity: "Space" Parität
@EndFixedFont

@Parameter "Data"
  Definiert die Datenlänge, in Bytes (üblicherweise 7 oder 8).
  
@Parameter "Stop"
  Legt die Anzahl an Stop-Bits (1, 1.5 oder 2) fest.

@Parameter "HandshakeModus"
  Der Handshake-Modus. Dies kann einer der folgenden Werte sein:
@FixedFont
  @#PB_SerialPort_NoHandshake     : Kein "handshaking"
  @#PB_SerialPort_RtsHandshake    : Kein "handshaking", aber RTS wird auf 1 gesetzt
  @#PB_SerialPort_RtsCtsHandshake : RTS/CTS
  @#PB_SerialPort_XonXoffHandshake: Xon/Xoff
@EndFixedFont

@Parameter "EingabePufferGröße"
  Definiert die Größe des Eingabepuffers, in Bytes.
  
@Parameter "AusgabePufferGröße"
  Definiert die Größe des Ausgabepuffers, in Bytes.
  
@ReturnValue
  Ein Wert ungleich Null, wenn der SerialPort erfolgreich geöffnet wurde, andernfalls
  Null (er kann bereits in Benutzung sein, oder die Parameter sind falsch).
  Wenn @#PB_Any als #SerialPort Parameter verwendet wurde, dann wird im Erfolgsfall
  die generierte Nummer zurückgegeben.

@Example
@Code
  If OpenSerialPort(0, "COM1", 300, #PB_SerialPort_NoParity, 8, 1, #PB_SerialPort_NoHandshake, 1024, 1024)
    Debug "Success"
  Else
    Debug "Failed"
  EndIf
@EndCode

@SeeAlso
  @@CloseSerialPort

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = ReadSerialPortData(#SerialPort, *Puffer, Länge)

@Description
  Liest eine beliebige Menge an Daten vom #SerialPort. Wenn der Eingabepuffer leer war,
  wird diese Funktion das Programm blockieren, bis Daten verfügbar sind. 
  Um zu überprüfen, ob Daten verfügbar sind, verwenden Sie @@AvailableSerialPortInput.

@Parameter "#SerialPort"
  Der zu verwendende SerialPort.

@Parameter "*Puffer"
  Die für das Einlesen der Daten zu verwendende Speicheradresse.
    
@Parameter "Länge"
  Die Länge der vom SerialPort zu lesenden Daten, in Bytes. Der angegebene Puffer
  sollte groß genug sein, um diese verarbeiten zu können.

@ReturnValue
  Die Anzahl Bytes, welche aktuell gelesen wurden. Dies können weniger als die
  angeforderte Länge sein. Wenn ein Lesefehler auftrat, wird Null zurückgegeben.

@SeeAlso
  @@AvailableSerialPortInput

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SerialPortTimeouts(#SerialPort, RIT, RTTC, RTTM, WTTC, WTTM)

@Description
  Ändert die standardmäßigen "Timeouts" (Zeitüberschreitungen) des SerialPort.

@Parameter "#SerialPort"
  Der zu verwendende SerialPort.

@Parameter "RIT"
  RIT steht für 'ReadIntervalTimeout'. Definiert die maximale Zeit, in Millisekunden, welche zwischen der Ankunft
  von zwei Zeichen auf der Kommunikationsverbindung vergehen darf. Der Standardwert ist 100 ms.

@Parameter "RTTC"
  RTTC steht für 'ReadTotalTimeoutConstant'. Definiert die Konstante, in Millisekunden, welche zum Berechnen der
  totalen "Time-out" Periode für Lese-Operationen verwendet wird. Für jede Lese-Operation wird dieser
  Wert zum Produkt aus dem ReadTotalTimeoutMultiplier Element und der angeforderten Anzahl an Bytes
  hinzu addiert. Der Standardwert ist 100 ms.

@Parameter "RTTM"
  RTTM steht für 'ReadTotalTimeoutMultiplier'. Definiert den Multiplikator, in Millisekunden, welcher zum Berechnen
  der totalen "Time-out" Periode für Lese-Operationen verwendet wird. Für jede Lese-Operation wird
  dieser Wert mit der angeforderten Anzahl zu lesender Bytes multipliziert. Der Standardwert ist 100 ms.

@Parameter "WTTC"
  WTTC steht für 'WriteTotalTimeoutConstant'. Definiert die Konstante, in Millisekunden, welchen zum Berechnen der
  der totalen "Time-out" Periode für Schreib-Operationen verwendet wird. Für jede Schreib-Operation wird
  dieser Wert zum Produkt aus dem WriteTotalTimeoutMultiplier Element und der Anzahl zu schreibender
  Bytes hinzu addiert. Der Standardwert ist 10 ms.

@Parameter "WTTM"
  WTTM steht für 'WriteTotalTimeoutMultiplier'. Definiert den Multiplikator, in Millisekunden, welcher zum Berechnen
  der totalen "Time-out" Periode für Schreib-Operationen verwendet wird. Für jede Schreib-Operation wird
  dieser Wert mit der Anzahl zu schreibender Bytes multipliziert. Der Standardwert ist 100 ms.

@NoReturnValue

@SeeAlso
  @@OpenSerialPort

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetSerialPortStatus(#SerialPort, Attribut, Wert)

@Description
  Ändert den angegebenen #SerialPort Status. 

@Parameter "#SerialPort"
  Der zu verwendende SerialPort.

@Parameter "Attribut"
  Das zu setzende Attribut. Dies kann einer der folgenden Werte sein:
@FixedFont
  @#PB_SerialPort_DTR: Setzt den DTR Signal Status (0 oder 1)
  @#PB_SerialPort_RTS: Setzt den RTS Signal Status (0 oder 1)
  @#PB_SerialPort_TXD: Setzt den TXD Signal Status (0 oder 1)
  @#PB_SerialPort_XonCharacter : Zeichen, welches für die "Xon/Xoff Handshaking Sequenz" verwendet wird (zwischen 1 und 255). Standardwert ist $11.
  @#PB_SerialPort_XoffCharacter: Zeichen, welches für die "Xon/Xoff Handshaking Sequenz" verwendet wird (zwischen 1 und 255). Standardwert ist $13.
@EndFixedFont

@Parameter "Wert"
  Der zu setzende Attribut-Wert. Siehe die 'Attribut' Beschreibung, um zu sehen, welche Werte
  genutzt werden können.

@NoReturnValue

@Example
@Code
  If OpenSerialPort(0, "COM1", 300, #PB_SerialPort_NoParity, 8, 1, #PB_SerialPort_XonXoffHandshake, 1024, 1024)
    SetSerialPortStatus(0, #PB_SerialPort_XonCharacter, 8)
    SetSerialPortStatus(0, #PB_SerialPort_XoffCharacter, 9)
    Debug "Success"
  Else
    Debug "Failed"
  EndIf
@EndCode

@SeeAlso
  @@OpenSerialPort

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = WriteSerialPortData(#SerialPort, *Puffer, Länge)

@Description
  Schreibt eine beliebige Menge an Daten auf die angegebene serielle Schnittstelle.

@Parameter "#SerialPort"
  Der zu verwendende SerialPort.

@Parameter "*Puffer"
  Der zu schreibende Speicherpuffer.
  
@Parameter "Länge"
  Die zu schreibende Pufferlänge, in Bytes.
  
@ReturnValue
  Die Anzahl an Bytes, welche auf die serielle Schnittstelle geschrieben wurden -
  oder Null, wenn die Operation fehlgeschlagen ist.
  
@Remarks
  Um zu überprüfen, wie viele Daten im Ausgabepuffer verfügbar sind, verwenden Sie
  @@AvailableSerialPortOutput.

@SeeAlso
  @@OpenSerialPort, @@WriteSerialPortString

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = WriteSerialPortString(#SerialPort, String$ [, Format])

@Description
  Schreibt einen String auf die angegebene serielle Schnittstelle.

@Parameter "#SerialPort"
  Der zu verwendende SerialPort.

@Parameter "String$"
  Der zu schreibende String.
  
@OptionalParameter "Format"
  Das zu verwendende String-Format. Dies kann einer der folgenden Werte sein:
@FixedFont  
  @#PB_Ascii   : der String wird im ASCII-Format geschrieben.
  @#PB_UTF8    : der String wird im UTF8-Format geschrieben (Standard).
  @#PB_Unicode : der String wird im Unicode-Format (UTF16) geschrieben.
@EndFixedFont

@ReturnValue
  Die Anzahl an Bytes, welche auf die serielle Schnittstelle geschrieben wurden -
  oder Null, wenn die Operation fehlgeschlagen ist.
  
@Remarks
  Um zu überprüfen, wie viele Daten im Ausgabepuffer verfügbar sind, verwenden Sie
  @@AvailableSerialPortOutput.

@SeeAlso
  @@OpenSerialPort, @@WriteSerialPortData

@SupportedOS
