;
;     Image library documentation
;
;      (c) 2014 - Fantaisie Software
;

@Library Image

@Overview
  Images are graphics objects which can be displayed in a window or in several gadgets.
  SpiderBasic supports all image types supported by the host browser, the most common
  are PNG (lossless compression) and JPG (lossy compression).
@LineBreak
@LineBreak  
  Transparent PNG images can be used to enable transparency in the @LibraryLink "Gadget" "gadgets", 
  @LibraryLink "menu" "menu" and @LibraryLink "Toolbar" "toolbars" images.

@CommandList

@ExampleFile All Image.sb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CopyImage(#Image1, #Image2)

@Description
  Creates an identical copy of an image.

@Parameter "#Image1"
  The source image.

@Parameter "#Image2"
  A number to identify the new copy. @ReferenceLink "spiderbasic_objects" "#PB_Any" can be specified to
  auto-generate this number.
@LineBreak
@LineBreak
  Note: The number of an existing image created using @#PB_Any can not be used as the target image.
  Instead, the existing image must be freed and a new number generated by passing @#PB_Any here.

@ReturnValue
  Returns nonzero if the image was copied successfully and zero if the copy could not be created.
  If @#PB_Any was specified as the #Image2 parameter then the auto-generated number is returned on success.

@SeeAlso
  @@GrabImage, @@FreeImage

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CreateImage(#Image, Width, Height [, Depth [, BackColor]])

@Description
  Create an empty canvas image (with black background) which can be used to do rendering on it.

@Parameter "#Image"
  A number to identify the new canvas image. @ReferenceLink "spiderbasic_objects" "#PB_Any" can be specified to
  auto-generate this number.

@Parameter "Width, Height"
  The dimensions of the new image. Both the width and height must be greater than zero.

@OptionalParameter "Depth"
  The color depth for the new image.
  Valid values can be: 24 and 32. The default is 24-bit if no depth is specified.

@OptionalParameter "BackColor"
  The back @@RGB color used when the image is created. This color can be set to @#PB_Image_Transparent to create an image with the 
  alpha channel set to full transparent. This only has an effect on 32-bit images. The default
  backcolor is black if not specified.

@ReturnValue
  Returns nonzero if the image was created successfully and zero if the image could not be created.
  If @#PB_Any was specified as the #Image parameter then the auto-generated number is returned on success.

@Remarks
  The limit for the image size that can be handled depends on the operating system and the available amount of memory.
  If enough memory is available, then images up to at least 8192x8192 are can be handled by all operating systems supported by SpiderBasic.
@LineBreak
@LineBreak
  You can use the several other functions for acting with the created image:
@LineBreak
  @@StartDrawing with @@ImageOutput to draw on the created image
@LineBreak
  @@StartVectorDrawing with @@ImageVectorOutput to draw on the created image using vector drawing
@LineBreak
  @@CopyImage to create another image from the actual one
@LineBreak
  @@GrabImage to create another image from a given area of the actual one
@LineBreak
  @@DrawImage with @@ImageID to draw the image on actual output channel.
@LineBreak
  @@ImageGadget for displaying image on an application window
@LineBreak
  @@ButtonImageGadget for creating an image button on an application window

@SeeAlso
  @@LoadImage, @@FreeImage

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function URL$ = EncodeImage(#Image [, ImagePlugin [, Flags]])

@Description
  Encode the specified canvas image into an image URL.

@Parameter "#Image"
  The image to encode.

@OptionalParameter "ImagePlugin"
  The format to encode the image in. This can be one of the following values:
@FixedFont
  @#PB_ImagePlugin_JPEG: encode the image in JPEG
  @#PB_ImagePlugin_PNG : encode the image in PNG
@EndFixedFont

@OptionalParameter "Flags"
  Parameters for the image plug-in. For now, only the quality setting is supported:
  a number from 0 (worse quality) to 10 (maximum quality). Only the JPEG plugins currently support it (default
  quality is set to '7' if no flags are specified).

@OptionalParameter "Depth"
  The depth in which to save the image. Valid values are 24 and 32.
  The default value is the original image depth. 

@ReturnValue
  Returns the URL containing the encoded image, or an empty string if the encoding has failed.

@SeeAlso 
  @@LoadImage
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeImage(#Image)

@Description
  Free the specified image and release its associated memory.

@Parameter "#Image"
  The image to free. If @#PB_All is specified, all the remaining images are freed.

@NoReturnValue

@Remarks
  All remaining images are automatically freed when the program ends.
  
@SeeAlso
  @@CreateImage, @@LoadImage, @@CopyImage, @@GrabImage

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GrabImage(#Image1, #Image2, x, y, Width, Height)

@Description
  Create a new image with the selected area on the source image.

@Parameter "#Image1"
  The source image.

@Parameter "#Image2"
  A number to identify the new image. @ReferenceLink "spiderbasic_objects" "#PB_Any" can be specified to
  auto-generate this number.
@LineBreak
@LineBreak
  Note: The number of an existing image created using @#PB_Any can not be used as the target image.
  Instead, the existing image must be freed and a new number generated by passing @#PB_Any here.

@Parameter "x, y, Width, Height"
  The location and size of the area to copy into the new image.
  
@ReturnValue
  Returns nonzero if the image was created successfully and zero if the image could not be created.
  If @#PB_Any was specified as the #Image2 parameter then the auto-generated number is returned on success.

@SeeAlso
  @@CreateImage, @@LoadImage, @@CopyImage

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ImageDepth(#Image [, Flags])

@Description
  Returns the depth of the #Image, as it is stored internally by SpiderBasic.

@Parameter "#Image"
  The image to use.

@OptionalParameter "Flags"
  Not used.

@ReturnValue
  Returns always '32' as all images are 32-bit in a browser.

@SeeAlso
  @@ImageWidth, @@ImageHeight
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ImageFormat(#Image)

@Description
  Return the original image format. 

@Parameter "#Image"
  The image to use.

@ReturnValue
  Returns the image original format. It can be one of the following value:
@FixedFont  
  @#PB_ImagePlugin_JPEG
  @#PB_ImagePlugin_PNG
@EndFixedFont
  If the image was not loaded from one of this format, it will return zero. This is the case for images created with
  @@CreateImage or @@GrabImage.

@SeeAlso  
  @@LoadImage, @@CreateImage, @@GrabImage
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ImageHeight(#Image) 

@Description
  Returns the height of the given image.

@Parameter "#Image"
  The image to use.

@ReturnValue
  Returns the height of the image in pixels.

@SeeAlso
  @@ImageWidth, @@ImageDepth  

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ImageID(#Image)

@Description
  Returns the ImageID of the image.

@Parameter "#Image"
  The image to use.

@ReturnValue
  Returns the operating system @ReferenceLink "handles" "handle" of the image.

@SeeAlso
  @@DrawImage,
  @@ImageGadget,
  @@ButtonImageGadget,
  @@CanvasGadget
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function OutputID = ImageOutput(#Image)

@Description
  Returns the OutputID of the image to perform @LibraryLink "2ddrawing" "2D rendering operation" on it. 
  Alternatively, the @@ImageVectorOutput command can be used to perform vector drawing on the image.

@Parameter "#Image"
  The image to draw on.

@ReturnValue
  Returns the output ID or zero if drawing is not possible. This value should be passed directly to the
  @@StartDrawing function to start the drawing operation. The return-value
  is valid only for one drawing operation and cannot be reused.

@Example
@Code
  StartDrawing(ImageOutput(#Image))
    ; do some drawing stuff here...
  StopDrawing()
@EndCode

@SeeAlso
  @@StartDrawing, @@ImageVectorOutput

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function VectorOutputID = ImageVectorOutput(#Image [, Unit])

@Description
  Returns the OutputID of the image to perform @LibraryLink "vectordrawing" "2D vector drawing operations" on it. 

@Parameter "#Image"
  The image to draw on.
  
@OptionalParameter "Unit"
  Specifies the unit used for measuring distances on the drawing output. 
  The default unit for images is @#PB_Unit_Pixel.
@FixedFont
  @#PB_Unit_Pixel     : Values are measured in pixels
  @#PB_Unit_Point     : Values are measured in points (1/72 inch)
  @#PB_Unit_Inch      : Values are measured in inches
  @#PB_Unit_Millimeter: Values are measured in millimeters
@EndFixedFont

@ReturnValue
  Returns the output ID or zero if drawing is not possible. This value should be passed directly to the
  @@StartVectorDrawing function to start the drawing operation. The return-value
  is valid only for one drawing operation and cannot be reused.

@Example
@Code
  StartVectorDrawing(ImageVectorOutput(#Image, #PB_Unit_Millimeter))
    ; do some drawing stuff here...
  StopVectorDrawing()
@EndCode

@SeeAlso
  @@StartVectorDrawing, @@ImageOutput

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ImageWidth(#Image)

@Description
  Returns the width of the given image.

@Parameter "#Image"
  The image to use.

@ReturnValue
  Returns the width of the image in pixels.

@SeeAlso
  @@ImageHeight, @@ImageDepth
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = IsImage(#Image)

@Description
  Tests if the given image number is a valid and correctly initialized image. 

@Parameter "#Image"
  The image to test.

@ReturnValue
  Returns nonzero if #Image is a valid image and zero if not.

@Remarks
  This function is bulletproof and can be used with any value. 
  This is the correct way to ensure an image is ready to use.

@SeeAlso
  @@CreateImage, @@LoadImage, @@CopyImage, @@GrabImage  

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = LoadImage(#Image, Filename$ [, Flags])

@Description
  Load the specified image from an URL or a local file.

@Parameter "#Image"
  A number to identify the loaded image. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be specified to auto-generate this number.

@Parameter "Filename$"
  The name of the file to load. The filename can be an URL or a local file (if the flag @#PB_LocalFile is set).

@OptionalParameter "Flags"
  It can be one of the following value:
@FixedFont
  @#PB_LocalFile: the filename is a local file, @@OpenFileRequester() needs to be called before
                 to have access to local files. @@SelectedFileID() is used to get the
                 local file identifier.
@EndFixedFont

@ReturnValue
  Returns nonzero if a temporary image has been created or zero otherwise.
  The image is still not loaded, the callbacks binded to @#PB_Event_Loading and @#PB_Event_LoadingError
  will be called once the loading is done.
  If @#PB_Any was specified as the #Image parameter then the auto-generated number is returned on success.
@LineBreak
@LineBreak
  You can use the several other functions for acting with the loaded image:
@LineBreak
  @@StartDrawing with @@ImageOutput to draw on the loaded image
@LineBreak
  @@StartVectorDrawing with @@ImageVectorOutput to draw on the created image using vector drawing
@LineBreak
  @@CopyImage to create another image from the actual one
@LineBreak
  @@GrabImage to create another image from a given area of the actual one
@LineBreak
  @@DrawImage with @@ImageID to draw the image on actual output channel.
@LineBreak
  @@ImageGadget for displaying image on an application window
@LineBreak
  @@ButtonImageGadget for creating an image button on an application window

@Example with an URL
@Code
  Procedure Loaded(Type, Filename$, ObjectId)

    ; Display the image in a new window
    OpenWindow(#PB_Any, 10, 10, 300, 300, "Image", #PB_Window_SizeGadget)
      ImageGadget(#PB_Any, 0, 0, ImageWidth(ObjectId), ImageHeight(ObjectId), ImageID(ObjectId))
    
  EndProcedure
  
  Procedure LoadingError(Type, Filename$, ObjectId)
    Debug Filename$ + ": loading error"
  EndProcedure
  
  ; Register the loading event before calling any resource load command
  BindEvent(#PB_Event_Loading, @Loaded())
  BindEvent(#PB_Event_LoadingError, @LoadingError())
  
  LoadImage(0, "Data/SpiderBasicLogo.png")
@EndCode

@Example with local file
@Code

@EndCode

@SeeAlso
  @@CreateImage, @@CopyImage, @@GrabImage, @@ExportImage

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ResizeImage(#Image, Width, Height [, Mode])

@Description  
  Resize the #Image to the given dimension.

@Parameter "#Image"
  The image to resize.

@Parameter "Width, Height"
  The new dimensions of the image. Both width and height must be greater than zero.
  @#PB_Ignore can be specified for width or height, so this value won't be changed.

@OptionalParameter "Mode"
  The resize method. It can be one of the following values:
@FixedFont
  @#PB_Image_Smooth: Resize the image with smoothing (default).
  @#PB_Image_Raw   : Resize the image without any interpolation.
@EndFixedFont

@ReturnValue
  Returns nonzero if the operation succeeded and zero if it failed.

@Remarks
  This function changes the @ReferenceLink "handles" "handle" of the
  used image. Therefore it must be newly assigned e.g. to an @@ImageGadget with
  @@SetGadgetState.

@SeeAlso
  @@ImageWidth, @@ImageHeight

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ExportImage(#Image, Filename$ [, ImagePlugin])

@Description
  Exports the specified image to the user through a download. 

@Parameter "#Image"
  The image to export.

@Parameter "Filename$"
  The filename to use. This is the name which will be shown to the user when the download starts.

@OptionalParameter "ImagePlugin"
  The format to save the image in. This can be one of the following values:
@FixedFont
  @#PB_ImagePlugin_JPEG: export the image as JPEG.
  @#PB_ImagePlugin_PNG : export the image as PNG.
@EndFixedFont

@NoReturnValue
  
@SeeAlso 
  @@LoadImage

@SupportedOS
