@Title Define 

@Syntax 

  @Keyword Define.<type> [<variable> [= <expression>], <variable> [= <expression>], ...]

@Description 

  If no <variables> are specified, @Keyword Define is used to change the default type for future untyped @ReferenceLink "variables" "variables"
  (including @ReferenceLink "Procedures" procedure parameters and @ReferenceLink "Interfaces" interface method parameters).
  The initial default type is integer (.i). Each variable can have a default value directly assigned to it. @LineBreak
  @LineBreak
  @Keyword Define may also be used with @ReferenceLink "dim" "arrays", 
  @ReferenceLink "newlist" "lists" and @ReferenceLink "newmap" "maps". @LineBreak

  @Example

@Code
  d = e + f
  Define.w
  a = b + c 
@EndCode

  d, e and f will be created as integer type variables, since there was no type specified. a, b and c will be 
  signed word typed (.w) as no type is specified and the default type had been changed to the word type. @LineBreak
@LineBreak
  If variables are specified, @Keyword Define only declares these variables as "defined type" and will not change the default type. 
  If you don't assign a value to the variables at this time, the value will be 0.

  @Example

@Code
  Define.b a, b = 10, c = b*2, d ; these 4 variables will be byte typed (.b)
@EndCode


@Syntax

  @Keyword Define <variable>.<type> [= <expression>] [, <variable>.<type> [= <expression>], ...] 

@Description
  
  Alternative possibility for the variable declaration using @Keyword "Define". 

  @Example

@Code
  Define MyChar.c 
  Define MyLong.l 
  Define MyWord.w 
  
  Debug SizeOf(MyChar)   ; will print 2
  Debug SizeOf(MyLong)   ; will print 4
  Debug SizeOf(MyWord)   ; will print 2
@EndCode
