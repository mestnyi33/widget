@Title Procedures

@Syntax

  @Keyword Procedure[.<type>] name(<parameter1[.<type>]> [, <parameter2[.<type>] [= DefaultValue]>, ...]) 
    ...
    [@Keyword ProcedureReturn value]
  @Keyword EndProcedure 
  
@Description

  A @Keyword Procedure is a part of code independent from the main code which can have any parameters 
  and it's own @ReferenceLink "variables" "variables". In SpiderBasic, a recurrence is fully supported for the procedures 
  and any procedure can call it itself. At each call of the procedure the variables inside 
  will start with a value of 0 (null). To access main code variables, they have to be shared 
  them by using @ReferenceLink "Shared" Shared or @ReferenceLink "Global" Global keywords
  (see also the @ReferenceLink "Protected" Protected and @ReferenceLink "Static" Static keywords). 
  @LineBreak
  @LineBreak
  The last parameters can have a default value (need to be a constant
  expression), so if these parameters are omitted when the procedure is called, the default value will be used.
  @LineBreak
  @LineBreak
  @ReferenceLink "dim" "Arrays" can be passed as parameters using the @Keyword Array keyword,
  @ReferenceLink "newlist" "lists" using the @Keyword List keyword and @ReferenceLink "newmap" "maps" using the @Keyword Map keyword.
  @LineBreak
  @LineBreak
  A procedure can return a value or a string if necessary. You have to set the type after @Keyword Procedure
  and use the @Keyword ProcedureReturn keyword at any moment inside the procedure. 
  A call of @Keyword ProcedureReturn exits immediately the procedure, even when its called inside a loop. 
  @LineBreak
  @Keyword ProcedureReturn can't be used to return an @ReferenceLink "dim" "array", @ReferenceLink "newlist" "list" or a @ReferenceLink "newmap" "map".
  For this purpose pass the array, the list or the map as parameter to the procedure.
  @LineBreak
  @LineBreak
  If no value is specified for @Keyword ProcedureReturn, the returned value will be undefined.

  @Example Procedure with a numeric variable as return-value

@Code
  Procedure Maximum(nb1, nb2)
    If nb1 > nb2
      Result = nb1
    Else
      Result = nb2
    Endif
  
    ProcedureReturn Result
  EndProcedure 
  
  Result = Maximum(15, 30)
  Debug Result
@EndCode


  @Example Procedure with a string as return-value

@Code
  Procedure.s Attach(String1$, String2$)
    ProcedureReturn String1$+" "+String2$
  EndProcedure 

  Result$ = Attach("SpiderBasic", "Coder")
  Debug Result$
@EndCode


  @Example Parameter with default value

@Code
  Procedure a(a, b, c=2)
    Debug c
  EndProcedure

  a(10, 12)      ; 2 will be used as default value for 3rd parameter
  a(10, 12, 15) 
@EndCode

 @Example List as parameter

@Code
  NewList Test.Point()

  AddElement(Test())
  Test()\x = 1
  AddElement(Test())
  Test()\x = 2

  Procedure DebugList(c.l, List ParameterList.Point())

    AddElement(ParameterList())
    ParameterList()\x = 3

    ForEach ParameterList()
      MessageRequester("List", Str(ParameterList()\x))
    Next
 
  EndProcedure

  DebugList(10, Test())
@EndCode

  @Example Array as parameter

@Code
  Dim Table.Point(10, 15)

  Table(0,0)\x = 1
  Table(1,0)\x = 2

  Procedure TestIt(c.l, Array ParameterTable.Point(2))  ; The table support 2 dimensions

    ParameterTable(1, 2)\x = 3
    ParameterTable(2, 2)\x = 4
 
  EndProcedure

  TestIt(10, Table())

  MessageRequester("Table", Str(Table(1, 2)\x))
@EndCode

 

@Syntax 

  @Keyword Declare[.<type>] name(<parameter1[.<type>]> [, <parameter2[.<type>] [= DefaultValue]>, ...])

@Description 

  Sometimes a procedure need to call another procedure which isn't declared before its definition. 
  This is annoying because the compiler will complain 'Procedure <name> not found'. @Keyword Declare can help 
  in this particular case by declaring only the header of the procedure. Nevertheless, the @Keyword Declare 
  and real @Keyword Procedure declaration must be identical (including the correct type and optional parameters, if any).
  @LineBreak
  @LineBreak
  For advanced programmers @Keyword DeclareC is available and will declare the procedure using 'CDecl' 
  instead of 'StandardCall' calling convention.
  
  @Example

@Code
  Declare Maximum(Value1, Value2)
  
  Procedure Operate(Value)
    Maximum(10, 2)      ; At this time, Maximum() is unknown.
  EndProcedure
  
  Procedure Maximum(Value1, Value2)
    ProcedureReturn 0
  EndProcedure
@EndCode
