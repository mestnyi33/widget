; ;  ^^
; ; (oo)\__________
; ; (__)\          )\/\3
; ;      ||------w||
; ;      ||       ||
; ;        _
; ;       /(|
; ;      (  :
; ;     __\  \  _____
; ;   (____)  `|
; ;  (____)|   |
; ;   (____).__|
; ;    (___)__.|_____
; ;  Mini Thread Control https://www.purebasic.fr/english/viewtopic.php?t=73231
; ;
; ; sudo adduser your_username vboxsf
; ; https://linuxrussia.com/sh-ubuntu.html
; ;
; ;https://github.com/mestnyi33/widget/commits/macos/?after=24cf91f4b5a08e4a496f764416578125334e97ab+1154
; ; 43025500559246
; ; Regex Trim(Arguments)
; ; https://regex101.com/r/zxBLgG/2
; ; ~"((?:(?:\".*?\")|(?:\\(.*?\\))|[^,])+)"
; ; ~"(?:\"(?:.*?)\"|(?:\\w*)\\s*\\((?:(?>[^( )]+|(?R))*)\\)|[\\^\\;\\/\\|\\!\\*\\w\\s\\.\\-\\+\\~\\#\\&\\$\\\\])+"
; ; #Button_0, ReadPreferenceLong("x", WindowWidth(#Window_0)/WindowWidth(#Window_0)+20), 20, WindowWidth(#Window_0)-(390-155), WindowHeight(#Window_0) - 180 * 2, GetWindowTitle(#Window_0) + Space( 1 ) +"("+ "Button" + "_" + Str(1)+")"
; 
; ; Regex Trim(Captions)
; ; https://regex101.com/r/3TwOgS/1
; ; ~"((?:\"(.*?)\"|\\((.*?)\\)|[^+\\s])+)"
; ; ~"(?:(\\w*)\\s*\\(((?>[^( )\"]+|(?R))+)\\))|\"(.*?)\"|[^+\\s]+"
; ; ~"(?:\"(.*?)\"|(\\w*)\\s*\\(((?>[^( )\"]+|(?R))+)\\))|([\\d]+)|(\b[\\w]+)|([\\#\\w]+)|([\\/])|([\\*])|([\\-])|([\\+])"
; ; ~"(?:(?:\"(.*?)\"|(\\w*)\\s*\\(((?>[^( )\"]+|(?R))*)\\))|([\\d]+)|(\b[\\w]+)|([\\#\\w]+)|([\\*\\w]+)|[\\.]([\\w]+)|([\\\\w]+)|([\\/])|([\\*])|([\\-])|([\\+]))"
; ; Str(ListIndex(List( )))+"Число между"+Chr(10)+"это 2!"+
; ; ListIndex(List( )) ; вот так не работает
; 
; ; ; https://regex101.com/r/RFubVd/14
; ; ; #Эта часть нужна для поиска переменных
; ; ; #Например, "Window" в выражении "Window=OpenWindow(#PB_Any...)"
; ; ; (?:(\b[^:\n\s]+)\s*=\s*)?
; ; ;
; ; ; #Эта часть для поиска процедур
; ; ; (?:\".*\"|(\w+)\s*\(((?>(?R)|[^)(])*)\))
; ; ;
; ; ; #После выполнения:
; ; ; # - В группе \1 будет находиться название переменной
; ; ; # - В группе \2 - название процедуры
; ; ; # - В группе \3 - перечень всех аргументов найденной процедуры
; ; ; ~"(?:(\\b[^:\\n\\s]+)\\s*=\\s*)?(?:\".*\"|(\\w+)\\s*\\(((?>(?R)|[^)(])*)\\))"
; #RegEx_Pattern_FindFunction = ~"(?P<Comments>;).*|(?:(?P<Handle>\\b[^:\\n\\s]+)\\s*=\\s*)?(?:\".*\"|(?P<Function>\\w+)\\s*\\((?P<Arguments>(?>(?R)|[^)(])*)\\))" ; "(;).*|\b(?:.*(=)\s*\w*\(.*\)|([A-Za-z0-9_.]*)\b[^:\n\(]*\s*\((?>[^)(]|(?R))*\))"
; 
; ; Найти
; ; https://regex101.com/r/u60Wqt/1
; ; https://regex101.com/r/rQCwws/3
; ; https://regex101.com/r/RFubVd/22
; ; https://regex101.com/r/D4Jxuh/24
; ; https://regex101.com/r/mBkJTA/29
; 
; #RegEx_Pattern_Find = "" +
;                       ; https://regex101.com/r/oIDfrI/2
; "(?P<Comments>;).* |" +
; ; #Эта часть нужна для поиска переменных
; ; #Например, "Window" в выражении "Window=OpenWindow(#PB_Any...)"
; "(?:(?P<Handle>[^:\n\s]+)\s*=\s*)?" +
; "(?P<FuncString>" +
; ~"\".*\" |" +
; ; #Эта часть для поиска функций
; "\b(?P<FuncName>\w+)\s*" +
; ; #Эта часть для поиска аргументов функции
; "(?:\((?P<FuncArguments>(?>(?R)|[^()])*)\))" +
; ") |" +
; ; #Эта часть для поиска процедур
; "(?P<StartPracedure>\bProcedure[.A-Za-z]* \s*" +
; ; #Эта часть для поиска имени процедуры
; "(?P<PracName>\w*) \s*" +
; ; #Эта часть для поиска аргументов процедуры
; "(?:\((?P<ProcArguments>(?>(?R)|[^()])*)\))) |" +
; ; #Эта часть для поиска конец процедуры
; "(?P<StopProcedure>\bEndProcedure\b)"
; ;
; ; #После выполнения:
; ; # - В группе (Comments) будет находиться комментария
; ; # - В группе (Handle) будет находиться название переменной
; ; # - В группе (FuncName) - название Функции
; ; # - В группе (FuncArguments) - перечень всех аргументов найденной Функции
; ; # - В группе (ProcedureName) - название процедуры
; ; # - В группе (ProcArguments) - перечень всех аргументов найденной процедуры

; ; https://www.purebasic.fr/english/viewtopic.php?t=79212
; !macro ppublic name{
; !if name eq _SYS_StaticStringEnd
; !repeat $-_SYS_StaticStringStart
; !load zczc from _SYS_StaticStringStart+%-1
; !store zczc xor 137 at _SYS_StaticStringStart+%-1
; !end repeat
; !end if
; !public name}
; !public fix ppublic
; CompilerIf #PB_Compiler_Processor = #PB_Processor_x86
;    !mov edi,_SYS_StaticStringStart
;    !mov ecx,_SYS_StaticStringEnd-_SYS_StaticStringStart
;    !@@:
;    !xor byte[edi],137
;    !inc edi
;    !dec ecx
; CompilerElse
;    !mov rdi,_SYS_StaticStringStart
;    !mov rcx,_SYS_StaticStringEnd-_SYS_StaticStringStart
;    !@@:
;    !xor byte[rdi],137
;    !inc rdi
;    !dec rcx
; CompilerEndIf
; !jnz @b


; ver: 3.0.0.1 ;
CompilerSelect #PB_Compiler_OS
   CompilerCase #PB_OS_MacOS
      #path = ""
   CompilerCase #PB_OS_Linux
      #path = ""
   CompilerCase #PB_OS_Windows
      #path = "" ; C:\Users\user\Documents\GitHub\widget\"
CompilerEndSelect

IncludePath #path

CompilerIf #PB_Compiler_Version < 520
   #PB_Module = 10
   #PB_Compiler_IsMainFile = 88888
   Macro Defined( _name_, _type_ )
      1
   EndMacro
CompilerEndIf

CompilerIf Not Defined( constants, #PB_Module )
   XIncludeFile "include/constants.pbi"
CompilerEndIf

CompilerIf Not Defined( structures, #PB_Module )
   XIncludeFile "include/structures.pbi"
CompilerEndIf

CompilerIf Not Defined( func, #PB_Module )
   XIncludeFile "include/func.pbi"
CompilerEndIf

CompilerIf Not Defined( colors, #PB_Module )
   XIncludeFile "include/colors.pbi"
CompilerEndIf

; fix all pb bug's
CompilerIf Not Defined( fix, #PB_Module )
   XIncludeFile "include/fix.pbi"
CompilerEndIf


;-  >>>
CompilerIf Not Defined( widget, #PB_Module )
   DeclareModule widget
      CompilerIf Defined( fix, #PB_Module )
         UseModule fix
      CompilerElse
         Macro PB(Function)
            Function
         EndMacro
         
         Macro PB_(Function)
            Function
         EndMacro
      CompilerEndIf
      
      EnableExplicit
      UseModule Events
      UseModule constants
      UseModule structures
      
      
      ;-\\ cursor
      ;       #PB_Cursor_Default         = Cursor::#__cursor_Default
      ;       #PB_Cursor_Cross           = Cursor::#__cursor_Cross
      ;       #PB_Cursor_IBeam           = Cursor::#__cursor_IBeam
      ;       #PB_Cursor_Hand            = Cursor::#__cursor_Hand
      ;       #PB_Cursor_Busy            = Cursor::#__cursor_Busy
      ;       #PB_Cursor_Denied          = Cursor::#__cursor_Denied
      ;       #PB_Cursor_Arrows          = Cursor::#__cursor_Arrows
      
      ;       #PB_Cursor_UpDown          = Cursor::#__cursor_UpDown
      ;       #PB_Cursor_LeftRight       = Cursor::#__cursor_LeftRight
      #pb_cursor_Diagonal1       = Cursor::#__cursor_Diagonal1
      #pb_cursor_Diagonal2       = Cursor::#__cursor_Diagonal2
      
      ;       #PB_Cursor_Invisible       = Cursor::#__cursor_Invisible
      
      #pb_cursor_SplitUp         = Cursor::#__cursor_SplitUp
      #pb_cursor_SplitDown       = Cursor::#__cursor_SplitDown         
      #pb_cursor_SplitLeft       = Cursor::#__cursor_SplitLeft
      #pb_cursor_SplitRight      = Cursor::#__cursor_SplitRight       
      #pb_cursor_SplitUpDown     = Cursor::#__cursor_SplitUpDown  
      #pb_cursor_SplitLeftRight  = Cursor::#__cursor_SplitLeftRight
      
      #pb_cursor_LeftUp          = Cursor::#__cursor_LeftUp
      #pb_cursor_RightUp         = Cursor::#__cursor_RightUp
      #pb_cursor_LeftDown        = Cursor::#__cursor_LeftDown
      #pb_cursor_RightDown       = Cursor::#__cursor_RightDown
      
      #pb_cursor_Drag            = Cursor::#__cursor_Drag
      #pb_cursor_Drop            = Cursor::#__cursor_Drop
      
      #pb_cursor_Grab            = Cursor::#__cursor_Grab      
      #pb_cursor_Grabbing        = Cursor::#__cursor_Grabbing
      #pb_cursor_VIBeam          = Cursor::#__cursor_VIBeam
      ; #pb_cursor_Arrow           = Cursor::#__cursor_Arrow
      
      #pb_cursor_Up              = Cursor::#__cursor_Up
      #pb_cursor_Down            = Cursor::#__cursor_Down      
      #pb_cursor_Left            = Cursor::#__cursor_Left
      #pb_cursor_Right           = Cursor::#__cursor_Right       
      ;       #PB_Cursor_LeftUpRightDown = Cursor::#__cursor_LeftUpRightDown
      ;       #PB_Cursor_LeftDownRightUp = Cursor::#__cursor_LeftDownRightUp
      
      ;-  -----------------
      ;-   GLOBALS
      ;-  -----------------
      Global display_mode_linux = 1
      
      Global test_align = 0
      Global test_atpoint
      Global test_display
      Global test_edit_text
      Global test_delete
      
      Global test_focus_set = 0
      Global test_focus_draw = 0
      
      Global test_event_repost
      Global test_event_entered
      Global test_event_send = 0
      Global test_resize
      Global test_event_canvas
      
      Global test_redraw_items = 1
      Global test_draw_repaint = 0
      Global test_buttons_draw      = 0
      Global test_startdrawing      = 0
      Global test_clip              = 0
      
      Global test_resize_area = 0
      Global test_scrollbars_reclip = 0
      
      Global test_draw_area
      Global test_anchors
      Global test_DoChangeCursor, test_changecursor,test_setcursor
      
      Global window_pos_x.l, window_pos_y.l
      
      Global DrawingDC = 0
      
      Global __GUI._s_GUI
      ;Global NewMap *roots._s_root( )
      ;Global *event._s_EVENT( )
      Global NewMap fonts._s_FONTS( )
      Global NewList images._s_images( )
      Global NewMap gadgets.i()
      
      ;-  ----------------
      ;-   DECLARE_macros
      ;-  ----------------
      
      Macro allocate( _struct_name_, _struct_type_ = )
         _s_#_struct_name_#_struct_type_ = AllocateStructure( _s_#_struct_name_ )
      EndMacro
      
      Global _macro_call_count_
      Macro Debug_out( _text_ = "" )
         CompilerIf #PB_Compiler_Debugger  ; Only enable assert in debug mode
            Debug " " + _macro_call_count_ + _text_ + "   ( debug >> " + #PB_Compiler_Procedure + " ( " + #PB_Compiler_Line + " ))"
            _macro_call_count_ + 1
         CompilerEndIf
      EndMacro
      Macro Debug_position( _root_, _text_ = "" )
         Debug " " + _text_ + " - "
         ForEach widgets( )
            If widgets( )\root = _root_
               If widgets( )\BeforeWidget( ) And widgets( )\AfterWidget( )
                  Debug " - " + Str(ListIndex( widgets( ))) + " " + widgets( )\index + " ( " + widgets( )\BeforeWidget( )\class + " " + widgets( )\class + " " + widgets( )\AfterWidget( )\class + " )"
               ElseIf widgets( )\AfterWidget( )
                  Debug " - " + Str(ListIndex( widgets( ))) + " " + widgets( )\index + " ( --- " + widgets( )\class + " " + widgets( )\AfterWidget( )\class + " )"
               ElseIf widgets( )\BeforeWidget( )
                  Debug " - " + Str(ListIndex( widgets( ))) + " " + widgets( )\index + " ( " + widgets( )\BeforeWidget( )\class + " " + widgets( )\class + " --- )"
               Else
                  Debug " - " + Str(ListIndex( widgets( ))) + " " + widgets( )\index + " ( --- " + widgets( )\class + " --- ) "
               EndIf
            EndIf
         Next
         Debug ""
      EndMacro
      
      ;-
      ;- PB_VERSION_546
      CompilerIf #PB_Compiler_Version =< 546
         Global DPISCALEDX.d = (GetDeviceCaps_(GetDC_(0),#LOGPIXELSX) / 96)
         Global DPISCALEDY.d = (GetDeviceCaps_(GetDC_(0),#LOGPIXELSY) / 96)
         
         Macro DesktopResolutionX( )
            DPISCALEDX
         EndMacro
         Macro DesktopResolutionY( )
            DPISCALEDY
         EndMacro
         Macro DesktopScaledX( _x_ )
            ((_x_) * DesktopResolutionX( ))
         EndMacro
         Macro DesktopScaledY( _y_ )
            ((_y_) * DesktopResolutionY( ))
         EndMacro
         Macro DesktopUnscaledX( _x_ )
            ((_x_) / DesktopResolutionX( ))
         EndMacro
         Macro DesktopUnscaledY( _y_ )
            ((_y_) / DesktopResolutionY( ))
         EndMacro
         ;     CompilerEndIf
         ;     
         ;     CompilerIf #PB_Compiler_Version =< 546
         Macro ResizeGadget(_event_gadget_,_x_,_y_,_width_,_height_)
            PB(ResizeGadget)(_event_gadget_,_x_,_y_,_width_,_height_)
            ;
            If PB(GadgetType)(_event_gadget_) = #PB_GadgetType_Canvas
               PushMapPosition( roots( ) )
               If widget::ChangeCurrentCanvas( GadgetID( _event_gadget_ ), 0 )
                  widget::Resize( widget::roots( ), 0, 0, _width_, _height_)
               EndIf
               PopMapPosition( roots( ) )
            EndIf
         EndMacro
      CompilerEndIf
      
      ; ;       Macro DPIResolutionX( ): DPIScaleResolutionX: EndMacro
      ; ;       Macro DPIResolutionY( ): DPIScaleResolutionY: EndMacro
      ;       Macro DPIScaledX( _x_ ): ( _x_ * DPIResolutionX( )): EndMacro
      ;       Macro DPIUnScaledX( _x_ ): ( _x_ / DPIResolutionX( )): EndMacro
      ;       Macro DPIScaledY( _y_ ): ( _y_ * DPIResolutionY( )): EndMacro
      ;       Macro DPIUnScaledY( _y_ ): ( _y_ / DPIResolutionY( )): EndMacro
      
      ;     Macro DPIScaledX( _x_ ): ( _x_ ): EndMacro
      ;     Macro DPIUnScaledX( _x_ ): ( _x_ ): EndMacro
      ;     Macro DPIScaledY( _y_ ): ( _y_ ): EndMacro
      ;     Macro DPIUnScaledY( _y_ ): ( _y_ ): EndMacro
      ;     Macro DPIScaled( _value_ ): ( _value_ ): EndMacro
      ;     Macro DPIUnScaled( _value_ ): ( _value_ ): EndMacro
      ;     Macro DPIResolution( ): Bool(1=0): EndMacro
      ;     Macro DPIResolutionX( ): Bool(1=0): EndMacro
      ;     Macro DPIResolutionY( ): Bool(1=0): EndMacro
      
      ;-
      Macro DPIScaledX( _x_ ): DesktopScaledX( _x_ ): EndMacro
      Macro DPIUnScaledX( _x_ ): DesktopUnscaledX( _x_ ): EndMacro
      Macro DPIScaledY( _y_ ): DesktopScaledY( _y_ ): EndMacro
      Macro DPIUnScaledY( _y_ ): DesktopUnscaledY( _y_ ): EndMacro
      ;Macro DPIScaled( _value_ ): DesktopScaledX( _value_ ): EndMacro
      Macro DPIUnScaled( _value_ ): DesktopUnscaledX( _value_ ): EndMacro
      Macro DPIResolutionX( ): DesktopResolutionX( ): EndMacro
      Macro DPIResolutionY( ): DesktopResolutionY( ): EndMacro
      Macro DPIResolution( ): DesktopResolutionX( ): EndMacro
      Declare DPIScaled( _value_ )
      
      ;-
      ;===TEMP====
      Macro AlphaState( ) 
         color\_alpha
      EndMacro
      
      Macro AlphaState24( ) 
         color\_alpha << 24
      EndMacro
      
      
      Macro is_drag_move( )
         a_index( ) = #__a_moved
      EndMacro
      
      ;-
      Macro SetBounds( _this_, _mode_ = #__bounds_Parentsize )
         If _mode_ = #__bounds_Parentsize 
            SetSizeBounds( _this_ )
            SetMoveBounds( _this_ )
         EndIf
         If _mode_ & #__bounds_Children 
            SetChildrenBounds( _this_, 1 )
         EndIf
         If _mode_ & #__bounds_size
            SetSizeBounds( _this_, -1,-1,-1,-1 )
         EndIf
         If _mode_ & #__bounds_move 
            SetMoveBounds( _this_, -1,-1,-1,-1 )
         EndIf
      EndMacro
      
      Macro SetBackColor( _this_, _color_ )
         SetBackgroundColor( _this_, _color_ )
      EndMacro
      
      ;-
      ;       Macro  SetState(widget, State)
      ;          SetText(widget,
      ;                  Str(IPAddressField(State,0))+"."+
      ;                  Str(IPAddressField(State,1))+"."+
      ;                  Str(IPAddressField(State,2))+"."+
      ;                  Str(IPAddressField(State,3)))
      ;       EndMacro
      
      Macro IPAddress( X,Y,Width,Height, flag=0 )
         String( X,Y,Width,Height, "", #__flag_Textnumeric|flag )
         widget( )\class = "IPAddress"
      EndMacro
      
      ;-
      Macro TabChange( ): change: EndMacro         ; tab\widget\change
      Macro TextChange( ): Text\change: EndMacro   ; temp
      Macro AreaChange( ): area\change: EndMacro   ; temp
      Macro PageChange( ): page\change: EndMacro   ; temp
      Macro ThumbChange( ): thumb\change: EndMacro ; temp
      Macro BarChange( ): bar\change: EndMacro     ; temp
      Macro ResizeChange( ): Resize\change: EndMacro      ; temp
      Macro WidgetChange( ): change: EndMacro             ; temp
      
      ;-\\
      ; Macro Firstroot( ): firstroot: EndMacro
      Macro LastRoot( ): lastroot: EndMacro
      Macro AfterRoot( ): afterroot: EndMacro
      Macro BeforeRoot( ): beforeroot: EndMacro
      
      ;-
      Macro split_1( ) : gadget[1] : EndMacro ; temp
      Macro split_2( ) : gadget[2] : EndMacro ; temp
      
      ;-
      Macro __tabs: Tab\_s: EndMacro
      Macro TabEntered( ): Tab\entered: EndMacro   ; Returns mouse entered tab
      Macro TabPressed( ): Tab\pressed: EndMacro   ; Returns mouse focused tab
      Macro TabFocused( ): Tab\focused: EndMacro   ; Returns mouse focused tab
                                                   ;
      Macro TabIndex( ): Tab\index: EndMacro
      Macro TabState( ): Tab\state: EndMacro      
      ;-
      Macro ColorState( ): color\state: EndMacro
      
      ;-
      Macro MarginLine( ): row\margin: EndMacro ; temp
                                                ;
      Macro LineEntered( ): row\entered: EndMacro ; Returns mouse entered widget
      Macro LinePressed( ): row\pressed: EndMacro ; Returns key focus item address
      Macro LineFocused( ): row\focused: EndMacro ; Returns key focus item address
      
      ;-
      Macro LineFocusedIndex( ): row\id[2]: EndMacro ; *this\ Returns key focused line index   ; 11 count
      Macro LinePressedIndex( ): row\id[3]: EndMacro ; *this\ Returns mouse pressed line index ; 23 count
      Macro RowFocusedIndex( ): state: EndMacro
      
      
      ;-
      Macro EnteredRow( ): row\entered: EndMacro         ; Returns mouse entered item address
      Macro PressedRow( ): row\pressed: EndMacro         ; Returns mouse press item address
      Macro FocusedRow( ): row\focused: EndMacro         ; Returns key focus item address
      Macro __rows( ): columns( )\items( ) : EndMacro    ; row\items( )
      Macro RowParent( ): _parent: EndMacro              ; _s_ROWS( )
      Macro RowLeaved( ): row\leaved: EndMacro           ; Returns mouse entered item address
      Macro RowEntered( ): row\entered: EndMacro         ; Returns mouse entered item address
      Macro RowPressed( ): row\pressed: EndMacro         ; Returns mouse press item address
      Macro RowFocused( ): row\focused: EndMacro         ; Returns key focus item address
      Macro RowToolTip( ): row\tt: EndMacro
      
      Macro RowFirstLevelFirst( ): row\first: EndMacro
      Macro RowFirstLevelLast( ): row\last: EndMacro
      Macro RowLast( ): row\added: EndMacro
      
      Macro RowVisibleList( ): row\visible\_s( ): EndMacro
      Macro RowFirstVisible( ): row\visible\first: EndMacro
      Macro RowLastVisible( ): row\visible\last: EndMacro
      
      ;-
      Macro mouse( ): widget::__gui\mouse: EndMacro
      Macro keyboard( ): widget::__gui\keyboard: EndMacro
      
      ;-
      Macro root( ): widget::__gui\root: EndMacro
      Macro roots( ): widget::__gui\__roots( ): EndMacro
      
      ;-
      Macro widget( ): widget::__gui\widget: EndMacro ; Returns current-root last added widget
      Macro widgets( ): __gui\__widgets( ): EndMacro
      
      ;-
      Macro Opened( ): widget::__gui\opened: EndMacro ; object list opened container
      Macro Sticked( ): widget::__gui\sticky\window: EndMacro
      ; Macro PopupCombo( ): menu\parent: EndMacro
      Macro PopupCombo( ): combobar: EndMacro
      
      
      ;-
      Macro FirstWidget( ): FirstWidget: EndMacro
      Macro LastWidget( ): LastWidget: EndMacro
      Macro AfterWidget( ): AfterWidget: EndMacro
      Macro BeforeWidget( ): BeforeWidget: EndMacro
      
      ;-
      Macro Leaved( ): mouse( )\widget[0]: EndMacro ; Returns mouse entered widget
      Macro Entered( ): mouse( )\widget[1]: EndMacro; Returns mouse entered widget
      Macro Pressed( ): mouse( )\widget[2]: EndMacro; Returns mouse button pushed widget
      
      ;-
      Macro EnteredButton( ): mouse( )\button[1]: EndMacro
      Macro PressedButton( ): mouse( )\button[2]: EndMacro
      
      ;-
      Macro GetActive( ): keyboard( )\active: EndMacro         ; Returns actived object
      Macro ActiveWindow( ): keyboard( )\window: EndMacro      ; Returns activeed window
      Macro ActiveGadget( ): ActiveWindow( )\gadget: EndMacro  ; Returns activeed gadget
      Macro ActiveBar( ): ActiveWindow( )\gadget\bar\gadget: EndMacro ; Returns activeed gadget
      
      
      ;-
      ;Macro EventIndex( ): EventWidget( )\index: EndMacro
      Macro EventWidget( ): widget::widget( ): EndMacro
      ;Macro EventWidget( ): widget::__gui\event\widget: EndMacro
      Macro WidgetEvent( ): widget::__gui\event\type: EndMacro
      Macro WidgetEventType( ): PBEventType( WidgetEvent( ) ): EndMacro
      Macro WidgetEventData( ): widget::__gui\event\data: EndMacro
      Macro WidgetEventItem( ): widget::__gui\event\item: EndMacro
      
      Macro GetEvent( ): widget::__gui\event\type: EndMacro
      Macro GetEventWidget( ): widget::__gui\event\widget: EndMacro
      Macro GetEventType( ): PBEventType( WidgetEvent( ) ): EndMacro
      Macro GetEventData( ): widget::__gui\event\data: EndMacro
      Macro GetEventItem( ): widget::__gui\event\item: EndMacro
      Macro EventBar( ): widget::__gui\event\item: EndMacro
      
      ;-
      Global *before_start_enumerate_widget._s_WIDGET
      Macro StartEnum( _parent_, _item_ = #PB_All, _mode_ = 0 )
         Bool( _parent_\haschildren And _parent_\FirstWidget( ) )
         *before_start_enumerate_widget = widget( )
         PushListPosition( widgets( ) )
         ;
         If _parent_\FirstWidget( )\address
            ChangeCurrentElement( widgets( ), _parent_\FirstWidget( )\address )
         Else
            ResetList( widgets( ) )
         EndIf
         widget( ) = widgets( )
         ;
         ;\\
         If _item_ > 0
            Repeat
               If widgets( ) = _parent_\AfterWidget( ) 
                  Break
               EndIf
               If widgets( )\root <> _parent_\root
                  Break    
               EndIf
               If  widgets( )\level < _parent_\level
                  Break
               EndIf
               If widgets( )\parent = _parent_  
                  If widgets( )\TabIndex( ) = _item_
                     Break
                  EndIf
               EndIf
            Until Not NextElement( widgets( ) ) 
         EndIf
         ;
         ;\\
         
         If widgets( )\parent = _parent_
            Repeat
               If widgets( )\parent = _parent_  
                  If widgets( )\TabIndex( ) <> _item_
                     If _item_ >= 0  
                        Break
                     EndIf
                  EndIf
               Else
                  If _mode_
                     Continue
                  EndIf
               EndIf
               If widgets( ) = _parent_\AfterWidget( ) 
                  Break
               EndIf
               If widgets( )\root <> _parent_\root
                  Break    
               EndIf
               If  widgets( )\level < _parent_\level
                  Break
               EndIf
               ;
               If Not IsChild( widgets(), _parent_ )
                  Break
               EndIf
               ;
               widget( ) = widgets( )
            EndMacro
            ;             ;
            ;             Macro AbortEnum( )
            ;                Break
            ;             EndMacro
            ;             ;
            Macro StopEnum( )
            Until Not NextElement( widgets( ) )
         EndIf
         PopListPosition( widgets( ) )
         widget( ) = *before_start_enumerate_widget
      EndMacro
      
      ;-
      Macro StartDraw( _root_ )
         Bool(widget::__gui\DrawingRoot <> _root_)
         ;
         widget::StopDraw( )
         If Not _root_\drawmode 
            _root_\drawmode | 1<<2
         EndIf
         If _root_\drawmode & 1<<1 = 1<<1
            widget::DrawingDC = StartVectorDrawing( CanvasVectorOutput( _root_\canvas\gadget ))
         EndIf
         If _root_\drawmode & 1<<2 = 1<<2
            widget::DrawingDC = StartDrawing( CanvasOutput( _root_\canvas\gadget ))
         EndIf
         widget::__gui\DrawingRoot = _root_
      EndMacro
      Macro StopDraw( )
         If widget::__gui\DrawingRoot 
            ;Debug "StopDrawingRoot "+widget::__gui\DrawingRoot\class
            If widget::__gui\DrawingRoot\drawmode & 1<<2 = 1<<2
               StopDrawing( )
            EndIf
            If widget::__gui\DrawingRoot\drawmode & 1<<1 = 1<<1
               StopVectorDrawing( )  
            EndIf
            widget::__gui\DrawingRoot = #Null
         EndIf
      EndMacro
      
      ;-
      Macro PostReDraw( _root_ )
         If _root_
            ; Debug #PB_Compiler_Procedure
            If widget::__gui\event\loop
               ;                If test_draw_repaint
               ;                   Debug "post - ReDraw "+_root_\canvas\gadget +" "+ IsGadget(_root_\canvas\gadget)
               ;                EndIf
               ;                If IsGadget(_root_\canvas\gadget)
               ;                   widget::ReDraw( _root_ )
               ;                EndIf
            Else
               If _root_\canvas\repaint = 0
                  _root_\canvas\repaint = 1
                  PostEvent( #PB_Event_Repaint, _root_\canvas\window, #PB_All, #PB_All, _root_\canvas\gadgetID )
               EndIf
            EndIf
         EndIf
      EndMacro
      Macro PostEventRepaint( _root_ )
         ;PostReDraw( _root_ )
      EndMacro
      Macro PostRepaint( _root_ )
         ; Debug #PB_Compiler_Procedure
         ; PostReDraw( _root_ )
      EndMacro
      Macro PostFree( _this_ )
        AddEvents( _this_, #__event_free  ) 
      EndMacro
      Macro PostClose( _this_ )
        AddEvents( _this_, #__event_Close  ) 
      EndMacro
      ;-
      Macro MidF(_string_, _start_pos_, _length_ = -1)
         func::MidFast(_string_, _start_pos_, _length_)
      EndMacro
      
      Macro ICase( String ) ; sTRinG = StrINg
         func::InvertCase( String )
      EndMacro
      
      Macro ULCase( String ) ; sTRinG = String
         InsertString( UCase( Left( String, 1 )), LCase( Right( String, Len( String ) - 1 )), 2 )
      EndMacro
      
      
      ;-
      Macro TitleText( ): Text: EndMacro
      Macro GetTitle( window ): widget::GetText( window ): EndMacro
      Macro CloseButton( ): caption\button[#__wb_close]: EndMacro
      Macro MaximizeButton( ): caption\button[#__wb_maxi]: EndMacro
      Macro MinimizeButton( ): caption\button[#__wb_mini]: EndMacro
      Macro HelpButton( ): caption\button[#__wb_help]: EndMacro
      
      ;-
      Macro clip_x( ): X[#__c_idraw]: EndMacro
      Macro clip_y( ): Y[#__c_idraw]: EndMacro
      Macro clip_width( ): Width[#__c_idraw]: EndMacro
      Macro clip_height( ): Height[#__c_idraw]: EndMacro
      ;-
      Macro draw_x( ): X[#__c_draw]: EndMacro
      Macro draw_y( ): Y[#__c_draw]: EndMacro
      Macro draw_width( ): Width[#__c_draw]: EndMacro
      Macro draw_height( ): Height[#__c_draw]: EndMacro
      
      ;-
      Macro screen_x( ): X[#__c_screen]: EndMacro
      Macro screen_y( ): Y[#__c_screen]: EndMacro
      Macro screen_width( ): Width[#__c_screen]: EndMacro
      Macro screen_height( ): Height[#__c_screen]: EndMacro
      
      ;-
      Macro inner_x( ): X[#__c_inner]: EndMacro
      Macro inner_y( ): Y[#__c_inner]: EndMacro
      Macro inner_width( ): Width[#__c_inner]: EndMacro
      Macro inner_height( ): Height[#__c_inner]: EndMacro
      
      ;-
      Macro frame_x( ): X[#__c_frame]: EndMacro
      Macro frame_y( ): Y[#__c_frame]: EndMacro
      Macro frame_width( ): Width[#__c_frame]: EndMacro
      Macro frame_height( ): Height[#__c_frame]: EndMacro
      
      ;-
      Macro container_x( ): X[#__c_container]: EndMacro
      Macro container_y( ): Y[#__c_container]: EndMacro
      Macro container_width( ): Width[#__c_container]: EndMacro
      Macro container_height( ): Height[#__c_container]: EndMacro
      
      ;-
      Macro scroll_x( ): X[#__c_required]: EndMacro
      Macro scroll_y( ): Y[#__c_required]: EndMacro
      Macro scroll_width( ): Width[#__c_required]: EndMacro
      Macro scroll_height( ): Height[#__c_required]: EndMacro
      
      ;- TEMP
      Macro scroll_inner_width( ): Width[#__c_inner]: EndMacro
      Macro scroll_inner_height( ): Height[#__c_inner]: EndMacro
      
      ;-
      Macro _get_colors_( ) : colors::*this\blue : EndMacro
      
      ;-
      Macro is_menu_( _this_ ) : Bool( _this_\type = constants::#__type_MenuBar Or _this_\type = constants::#__type_PopupBar ) : EndMacro
      Macro is_bar_( _this_ ) : Bool( is_menu_( _this_ ) Or _this_\type = constants::#__type_ToolBar ) : EndMacro
      Macro is_root_(_this_ ) : Bool( _this_ >= 65536 And _this_ = _this_\root ): EndMacro
      Macro is_gadget_( _this_ ) : Bool( Not is_root_( _this_ ) And _this_\type > 0 ) : EndMacro
      Macro is_window_( _this_ ) : Bool( _this_\type = constants::#__type_Window ) : EndMacro
      
      Macro is_level_( _address_1, _address_2 )
         Bool( _address_1 <> _address_2 And _address_1\parent = _address_2\parent And _address_1\TabIndex( ) = _address_2\TabIndex( ) )
      EndMacro
      
      Macro is_scrollbars_( _this_ )
         Bool( _this_\parent And _this_\parent\scroll And ( _this_\parent\scroll\v = _this_ Or _this_\parent\scroll\h = _this_ ))
      EndMacro
      
      Macro is_integral_( _this_ ) ; It is an integral part
         Bool( _this_\child > 0 And Not is_window_(_this_) )
      EndMacro
      
      Macro is_inside_( _position_, _size_, _mouse_ ) ;
         Bool( _mouse_ > _position_ And _mouse_ <= ( _position_ + _size_ ) And ( _position_ + _size_ ) > 0 )
      EndMacro
      
      ;       Macro is_atbox_( _x_, _y_, _width_, _height_, _mouse_x_, _mouse_y_ )
      ;          Bool( is_inside_( _x_, _width_, _mouse_x_ ) And
      ;                is_inside_( _y_, _height_, _mouse_y_ ) )
      ;       EndMacro
      ;       
      ;       Macro is_atcircle_( _position_x_, _position_y_, _mouse_x_, _mouse_y_, _circle_radius_ )
      ;          Bool( Sqr( Pow((( _position_x_ + _circle_radius_ ) - _mouse_x_ ), 2 ) + Pow((( _position_y_ + _circle_radius_ ) - _mouse_y_ ), 2 )) <= _circle_radius_ )
      ;       EndMacro
      
      Macro is_atpoint_( _address_, _mouse_x_, _mouse_y_, _mode_ = )
         Bool( is_inside_( _address_\x#_mode_, _address_\width#_mode_, _mouse_x_ ) And
               is_inside_( _address_\y#_mode_, _address_\height#_mode_, _mouse_y_ ) )
      EndMacro
      
      
      
      ;       Macro is_interrect_( _address_1_x_, _address_1_y_, _address_1_width_, _address_1_height_,
      ;                            _address_2_x_, _address_2_y_, _address_2_width_, _address_2_height_ )
      ;          
      ;          Bool(( _address_1_x_ + _address_1_width_ ) > _address_2_x_ And _address_1_x_ < ( _address_2_x_ + _address_2_width_ ) And
      ;               ( _address_1_y_ + _address_1_height_ ) > _address_2_y_ And _address_1_y_ < ( _address_2_y_ + _address_2_height_ ))
      ;       EndMacro
      
      Macro is_intersect_( _address_1_, _address_2_, _address_1_mode_ = )
         Bool(( _address_1_\x#_address_1_mode_ + _address_1_\width#_address_1_mode_ ) > _address_2_\x And _address_1_\x#_address_1_mode_ < ( _address_2_\x + _address_2_\width ) And
              ( _address_1_\y#_address_1_mode_ + _address_1_\height#_address_1_mode_ ) > _address_2_\y And _address_1_\y#_address_1_mode_ < ( _address_2_\y + _address_2_\height ))
      EndMacro
      
      
      ;-
      Macro is_lines_( _this_ )
         Bool( _this_\type = #__type_Editor Or
               _this_\type = #__type_String  Or
               _this_\type = #__type_Hyperlink Or
               _this_\type = #__type_IPAddress Or
               _this_\type = #__type_CheckBox Or
               _this_\type = #__type_Option Or
               _this_\type = #__type_Button Or
               _this_\type = #__type_Text Or
               _this_\type = #__type_ComboBox )
      EndMacro
      
      Macro is_items_( _this_ )
         Bool( _this_\type = #__type_Tree Or
               _this_\type = #__type_ListIcon Or
               _this_\type = #__type_ListView Or
               _this_\type = #__type_Properties )
      EndMacro
      
      Macro is_no_select_item_( _list_, _item_ )
         Bool( _item_ < 0 Or _item_ >= ListSize( _list_ ) Or (ListIndex( _list_ ) <> _item_ And Not SelectElement( _list_, _item_ ) ))
      EndMacro
      
      ;-
      ;       Macro MouseInner( _this_, _mouse_x_, _mouse_y_ )
      ;          Bool( is_atpoint_( _this_, _mouse_x_, _mouse_y_, [#__c_draw] ) And
      ;                is_atpoint_( _this_, _mouse_x_, _mouse_y_, [#__c_inner] ) And
      ;                Not ( _this_\type = #__type_Splitter And is_atpoint_( _this_\bar\button, _mouse_x_, _mouse_y_ ) = 0 ) And
      ;                Not ( _this_\type = #__type_HyperLink And is_atpoint_( _this_, _mouse_x_ - _this_\frame_x( ), _mouse_y_ - _this_\frame_y( ), [#__c_Required] ) = 0 ))
      ;       EndMacro
      Macro MouseEnter( _this_, _mode_ = 2 ) : _this_\enter = _mode_ : EndMacro
      Macro MouseButtons( ): mouse( )\buttons: EndMacro                  ; Returns mouse x
      Macro MouseButtonPress( ): mouse( )\press: EndMacro                ; Returns mouse x
      Macro MouseWheelData( ): mouse( )\wheeldata: EndMacro              ; Returns mouse wheel
      Macro MouseWheelDirection( ): mouse( )\wheeldirection: EndMacro    ; Returns mouse direction
      Macro MouseData( ): mouse( )\data: EndMacro                        ; Returns mouse data
      Macro MouseMoveX( ): DPIUnscaledX( mouse( )\x - mouse( )\press_x ): EndMacro ; Returns mouse x
      Macro MouseMoveY( ): DPIUnscaledY( mouse( )\y - mouse( )\press_y ): EndMacro ; Returns mouse y
      
      ;-
      Macro GetMouseX( _this_ ): DPIUnScaledX( mouse( )\x - _this_\x[#__c_inner] ): EndMacro           ; Returns mouse x
      Macro GetMouseY( _this_ ): DPIUnScaledY( mouse( )\y - _this_\y[#__c_inner] ): EndMacro           ; Returns mouse y
      
      ;-
      Macro CanvasMouseX( ): mouse( )\x: EndMacro                        ; Returns mouse x
      Macro CanvasMouseY( ): mouse( )\x: EndMacro                        ; Returns mouse x
      Macro CanvasMouseButton( ): mouse( )\buttons: EndMacro             ; Returns mouse x
      
      ;-
      Macro IsCanvas(_gadget_)
         FindMapElement( widget::gadgets( ), Str(_gadget_))
      EndMacro
      Macro ChangeCurrentCanvas( _canvasID_, _change_root_ = 1 )
         FindMapElement( widget::roots( ), Str( _canvasID_ ) )
         If _change_root_ = 1
            widget::root( ) = widget::roots( )
            ;             mouse( )\x = GadgetMouseX( widget::root( )\canvas\gadget )
            ;             mouse( )\y = GadgetMouseY( widget::root( )\canvas\gadget )
         EndIf
         ;Debug ""+ #PB_Compiler_Procedure + " ChangeCurrentCanvas "+widget::root( )\class
      EndMacro
      
      
      ;-
      ;       ;-
      ;       Macro imageiDWidth( _img_id_ )
      ;          func::Getimagewidth( _img_id_ )
      ;       EndMacro
      ;       
      ;       Macro imageiDHeight( _img_id_ )
      ;          func::Getimageheight( _img_id_ )
      ;       EndMacro
      ;       
      ;       Macro ResizeimageiD( _img_id_, _width_, _height_ )
      ;          func::Setimagewidth( _img_id_, _width_ )
      ;          func::Setimageheight( _img_id_, _height_ )
      ;       EndMacro
      
      
      ;- ANCHORSMACRO
      Macro a_anchors( )
         widget::mouse( )\anchors
      EndMacro
      Macro a_index( )
         widget::a_anchors( )\index
      EndMacro
      Macro a_main( )
         widget::a_anchors( )\main
      EndMacro
      Macro a_entered( )
         widget::a_anchors( )\entered
      EndMacro
      Macro a_focused( )
         widget::a_anchors( )\focused
      EndMacro
      ;
      Macro a_getsize( _this_ )
         DPIUnScaled(_this_\anchors\size)
      EndMacro
      Macro a_getpos( _this_ )
         DPIUnScaled(_this_\anchors\pos)
      EndMacro
      Macro a_setsize( _this_, _size_, _update_size_ = 1  )
         If _this_\anchors\size <> DPIScaled(_size_)
            _this_\anchors\size = DPIScaled(_size_)
            ;             _this_\bs - _this_\anchors\pos
            ;             _this_\anchors\pos = _this_\anchors\size / 2
            ;             _this_\bs + _this_\anchors\pos
            ;a_size( _this_\anchors\id, _this_\anchors\size, _this_\anchors\mode )
            If _update_size_
               Resize( _this_, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
            EndIf
         EndIf
      EndMacro
      Macro a_setpos( _this_, _position_, _update_position_ = 1 )
         If _this_\anchors\pos <> DPIScaled(_position_)
            _this_\bs - _this_\anchors\pos
            _this_\anchors\pos = DPIScaled(_position_)
            _this_\bs + _this_\anchors\pos 
            ;a_size( _this_\anchors\id, _this_\anchors\size, _this_\anchors\mode )
            If _update_position_
               Resize( _this_, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
            EndIf
         EndIf
      EndMacro
      
      Macro a_size( _address_, _size_, _mode_=0 )
         If _address_[#__a_left] ; left
            _address_[#__a_left]\width  = _size_
            _address_[#__a_left]\height = _size_
         EndIf
         If _address_[#__a_top] ; top
            _address_[#__a_top]\width  = _size_
            _address_[#__a_top]\height = _size_
         EndIf
         If _address_[#__a_right] ; right
            _address_[#__a_right]\width  = _size_
            _address_[#__a_right]\height = _size_
         EndIf
         If _address_[#__a_bottom] ; bottom
            _address_[#__a_bottom]\width  = _size_
            _address_[#__a_bottom]\height = _size_
         EndIf
         
         If _address_ <> mouse( )\selector
            If _mode_ & #__a_zoom = #__a_zoom
               If _address_[#__a_left_top] ; left&top
                  _address_[#__a_left_top]\width  = _size_ * 2
                  _address_[#__a_left_top]\height = _size_ * 2
               EndIf
               If _address_[#__a_right_top] ; right&top
                  _address_[#__a_right_top]\width  = _size_ * 2
                  _address_[#__a_right_top]\height = _size_ * 2
               EndIf
               If _address_[#__a_right_bottom] ; right&bottom
                  _address_[#__a_right_bottom]\width  = _size_ * 2
                  _address_[#__a_right_bottom]\height = _size_ * 2
               EndIf
               If _address_[#__a_left_bottom] ; left&bottom
                  _address_[#__a_left_bottom]\width  = _size_ * 2
                  _address_[#__a_left_bottom]\height = _size_ * 2
               EndIf
            Else
               If _address_[#__a_left_top] ; left&top
                  _address_[#__a_left_top]\width  = _size_
                  _address_[#__a_left_top]\height = _size_
               EndIf
               If _address_[#__a_right_top] ; right&top
                  _address_[#__a_right_top]\width  = _size_
                  _address_[#__a_right_top]\height = _size_
               EndIf
               If _address_[#__a_right_bottom] ; right&bottom
                  _address_[#__a_right_bottom]\width  = _size_
                  _address_[#__a_right_bottom]\height = _size_
               EndIf
               If _address_[#__a_left_bottom] ; left&bottom
                  _address_[#__a_left_bottom]\width  = _size_
                  _address_[#__a_left_bottom]\height = _size_
               EndIf
            EndIf
         EndIf
      EndMacro
      
      Macro a_move( _this_, _address_, _x_, _y_, _width_, _height_ )
         If _address_ And _this_ ; frame
            _address_\x      = _x_ + _this_\anchors\pos
            _address_\y      = _y_ + _this_\anchors\pos
            _address_\width  = _width_ - _this_\anchors\pos * 2
            _address_\height = _height_ - _this_\anchors\pos * 2
         EndIf
         
         If _address_ <> mouse( )\selector
            If _this_
               If _address_[#__a_moved]         ; moved
                                                ;                   If _this_\anchors\mode & #__a_zoom ; _this_\type = #__type_window
                                                ;                      _address_[#__a_moved]\x      = _x_ + _address_[#__a_left]\width
                                                ;                      _address_[#__a_moved]\y      = _y_ + _address_[#__a_top]\height
                                                ;                      _address_[#__a_moved]\width  = _width_ - ( _address_[#__a_left]\width + _address_[#__a_right]\width )
                                                ;                      _address_[#__a_moved]\height = ( _this_\fs + _this_\fs[2] + _this_\fs[4] ) - _address_[#__a_top]\height / 2
                                                ;                   Else
                  If _this_\container
                     _address_[#__a_moved]\x      = _x_
                     _address_[#__a_moved]\y      = _y_
                     _address_[#__a_moved]\width  = _this_\anchors\size * 2
                     _address_[#__a_moved]\height = _this_\anchors\size * 2
                  EndIf
                  ;                   EndIf
               EndIf
            EndIf
            
            If _this_ And _this_\anchors\mode & #__a_zoom = #__a_zoom
               If _address_[#__a_left] ; left
                  _address_[#__a_left]\x      = _x_
                  _address_[#__a_left]\y      = _y_ + _address_[#__a_left_top]\height
                  _address_[#__a_left]\height = _this_\height - ( _address_[#__a_left_top]\height + _address_[#__a_left_bottom]\height )
               EndIf
               If _address_[#__a_top] ; top
                  _address_[#__a_top]\x     = _x_ + _address_[#__a_left_top]\width
                  _address_[#__a_top]\y     = _y_
                  _address_[#__a_top]\width = _this_\width - ( _address_[#__a_left_top]\width + _address_[#__a_right_top]\width )
               EndIf
               If _address_[#__a_right] ; right
                  _address_[#__a_right]\x      = _x_ + _width_ - _address_[#__a_right]\width
                  _address_[#__a_right]\y      = _y_ + _address_[#__a_right_top]\height
                  _address_[#__a_right]\height = _this_\height - ( _address_[#__a_right_top]\height + _address_[#__a_right_bottom]\height )
               EndIf
               If _address_[#__a_bottom] ; bottom
                  _address_[#__a_bottom]\x     = _x_ + _address_[#__a_left_bottom]\width
                  _address_[#__a_bottom]\y     = _y_ + _height_ - _address_[#__a_bottom]\height
                  _address_[#__a_bottom]\width = _this_\width - ( _address_[#__a_left_bottom]\width + _address_[#__a_right_bottom]\width )
               EndIf
            Else
               If _address_[#__a_left] ; left
                  _address_[#__a_left]\x = _x_
                  _address_[#__a_left]\y = _y_ + ( _height_ - _address_[#__a_left]\height ) / 2
               EndIf
               If _address_[#__a_top] ; top
                  _address_[#__a_top]\x = _x_ + ( _width_ - _address_[#__a_top]\width ) / 2
                  _address_[#__a_top]\y = _y_
               EndIf
               If _address_[#__a_right] ; right
                  _address_[#__a_right]\x = _x_ + ( _width_ - _address_[#__a_right]\width )
                  _address_[#__a_right]\y = _y_ + ( _height_ - _address_[#__a_right]\height ) / 2
               EndIf
               If _address_[#__a_bottom] ; bottom
                  _address_[#__a_bottom]\x = _x_ + ( _width_ - _address_[#__a_bottom]\width ) / 2
                  _address_[#__a_bottom]\y = _y_ + ( _height_ - _address_[#__a_bottom]\height )
               EndIf
            EndIf
            
            If _address_[#__a_left_top] ; left&top
               _address_[#__a_left_top]\x = _x_
               _address_[#__a_left_top]\y = _y_
            EndIf
            If _address_[#__a_right_top] ; right&top
               _address_[#__a_right_top]\x = _x_ + ( _width_ - _address_[#__a_right_top]\width )
               _address_[#__a_right_top]\y = _y_
            EndIf
            If _address_[#__a_left_bottom] ; left&bottom
               _address_[#__a_left_bottom]\x = _x_
               _address_[#__a_left_bottom]\y = _y_ + ( _height_ - _address_[#__a_left_bottom]\height )
            EndIf
            If _address_[#__a_right_bottom] ; right&bottom
               _address_[#__a_right_bottom]\x = _x_ + ( _width_ - _address_[#__a_right_bottom]\width )
               _address_[#__a_right_bottom]\y = _y_ + ( _height_ - _address_[#__a_right_bottom]\height )
            EndIf
         EndIf
         
         If a_focused( )
            a_line( a_focused( ) )
         EndIf
      EndMacro
      
      Macro a_line( _this_ )
         If a_anchors( ) And _this_\parent And 
            a_anchors( )\line[#__a_line_left] And
            a_anchors( )\line[#__a_line_right] And
            a_anchors( )\line[#__a_line_top] And
            a_anchors( )\line[#__a_line_bottom]
            
            ;\\ line default size&pos
            a_anchors( )\line[#__a_line_left]\width  = DPIScaled(1)
            a_anchors( )\line[#__a_line_left]\height = 0
            a_anchors( )\line[#__a_line_left]\x      = _this_\frame_x( )
            a_anchors( )\line[#__a_line_left]\y      = _this_\frame_y( )
            
            a_anchors( )\line[#__a_line_top]\height = a_anchors( )\line[#__a_line_left]\width
            a_anchors( )\line[#__a_line_top]\width  = 0
            a_anchors( )\line[#__a_line_top]\x      = _this_\frame_x( )
            a_anchors( )\line[#__a_line_top]\y      = _this_\frame_y( )
            
            a_anchors( )\line[#__a_line_right]\width  = a_anchors( )\line[#__a_line_left]\width
            a_anchors( )\line[#__a_line_right]\height = 0
            a_anchors( )\line[#__a_line_right]\x      = ( _this_\frame_x( ) + _this_\frame_width( ) ) - a_anchors( )\line[#__a_line_right]\width
            a_anchors( )\line[#__a_line_right]\y      = _this_\frame_y( )
            
            a_anchors( )\line[#__a_line_bottom]\height = a_anchors( )\line[#__a_line_left]\width
            a_anchors( )\line[#__a_line_bottom]\width  = 0
            a_anchors( )\line[#__a_line_bottom]\x      = _this_\frame_x( )
            a_anchors( )\line[#__a_line_bottom]\y      = ( _this_\frame_y( ) + _this_\frame_height( ) ) - a_anchors( )\line[#__a_line_bottom]\height
            
            ;\\
            If StartEnum( _this_\parent )
               ;
               If widgets( )\anchors And Not widgets( )\hide And widgets( ) <> _this_ And widgets( )\level = _this_\level
                  ;\\ left-line
                  If _this_\frame_x( ) = widgets( )\frame_x( )
                     If a_anchors( )\line[#__a_line_left]\y > widgets( )\frame_y( )
                        a_anchors( )\line[#__a_line_left]\y = widgets( )\frame_y( )
                     EndIf
                     If _this_\frame_y( ) + _this_\frame_height( ) < widgets( )\frame_y( ) + widgets( )\frame_height( )
                        If a_anchors( )\line[#__a_line_left]\height < widgets( )\frame_y( ) + widgets( )\frame_height( ) 
                           a_anchors( )\line[#__a_line_left]\height = widgets( )\frame_y( ) + widgets( )\frame_height( )
                        EndIf
                     Else
                        If a_anchors( )\line[#__a_line_left]\height < _this_\frame_y( ) + _this_\frame_height( ) 
                           a_anchors( )\line[#__a_line_left]\height = _this_\frame_y( ) + _this_\frame_height( )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;\\ top-line
                  If _this_\frame_y( ) = widgets( )\frame_y( )
                     If a_anchors( )\line[#__a_line_top]\x > widgets( )\frame_x( )
                        a_anchors( )\line[#__a_line_top]\x = widgets( )\frame_x( )
                     EndIf
                     If _this_\frame_x( ) + _this_\frame_width( ) <= widgets( )\frame_x( ) + widgets( )\frame_width( ) 
                        If a_anchors( )\line[#__a_line_top]\width < widgets( )\frame_x( ) + widgets( )\frame_width( ) 
                           a_anchors( )\line[#__a_line_top]\width = widgets( )\frame_x( ) + widgets( )\frame_width( )
                        EndIf
                     Else
                        If a_anchors( )\line[#__a_line_top]\width < _this_\frame_x( ) + _this_\frame_width( ) 
                           a_anchors( )\line[#__a_line_top]\width = _this_\frame_x( ) + _this_\frame_width( )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;\\ right-line
                  If _this_\frame_x( ) + _this_\frame_width( ) = widgets( )\frame_x( ) + widgets( )\frame_width( )
                     If a_anchors( )\line[#__a_line_right]\y > widgets( )\frame_y( )
                        a_anchors( )\line[#__a_line_right]\y = widgets( )\frame_y( )
                     EndIf
                     If _this_\frame_y( ) + _this_\frame_height( ) < widgets( )\frame_y( ) + widgets( )\frame_height( )
                        If a_anchors( )\line[#__a_line_right]\height < widgets( )\frame_y( ) + widgets( )\frame_height( ) 
                           a_anchors( )\line[#__a_line_right]\height = widgets( )\frame_y( ) + widgets( )\frame_height( )
                        EndIf
                     Else
                        If a_anchors( )\line[#__a_line_right]\height < _this_\frame_y( ) + _this_\frame_height( ) 
                           a_anchors( )\line[#__a_line_right]\height = _this_\frame_y( ) + _this_\frame_height( )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;\\ bottom-line
                  If _this_\frame_y( ) + _this_\frame_height( ) = widgets( )\frame_y( ) + widgets( )\frame_height( )
                     If a_anchors( )\line[#__a_line_bottom]\x > widgets( )\frame_x( )
                        a_anchors( )\line[#__a_line_bottom]\x = widgets( )\frame_x( )
                     EndIf
                     If _this_\frame_x( ) + _this_\frame_width( ) < widgets( )\frame_x( ) + widgets( )\frame_width( )
                        If a_anchors( )\line[#__a_line_bottom]\width < widgets( )\frame_x( ) + widgets( )\frame_width( ) 
                           a_anchors( )\line[#__a_line_bottom]\width = widgets( )\frame_x( ) + widgets( )\frame_width( )
                        EndIf
                     Else
                        If a_anchors( )\line[#__a_line_bottom]\width < _this_\frame_x( ) + _this_\frame_width( ) 
                           a_anchors( )\line[#__a_line_bottom]\width = _this_\frame_x( ) + _this_\frame_width( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               ;
               StopEnum( )
               ;
               If a_anchors( )\line[#__a_line_left]\height > a_anchors( )\line[#__a_line_left]\y
                  a_anchors( )\line[#__a_line_left]\height - a_anchors( )\line[#__a_line_left]\y
               EndIf
               If a_anchors( )\line[#__a_line_top]\width > a_anchors( )\line[#__a_line_top]\x
                  a_anchors( )\line[#__a_line_top]\width - a_anchors( )\line[#__a_line_top]\x
               EndIf
               If a_anchors( )\line[#__a_line_right]\height > a_anchors( )\line[#__a_line_right]\y
                  a_anchors( )\line[#__a_line_right]\height - a_anchors( )\line[#__a_line_right]\y
               EndIf
               If a_anchors( )\line[#__a_line_bottom]\width > a_anchors( )\line[#__a_line_bottom]\x
                  a_anchors( )\line[#__a_line_bottom]\width - a_anchors( )\line[#__a_line_bottom]\x
               EndIf
            EndIf
         EndIf
         
      EndMacro
      
      ;-
      ;-  FONT
      Macro GetFontID( _address_ )
         _address_\fontID    
      EndMacro
      Macro SetFontID( _address_, _font_ID_ )
         _address_\fontID = _font_ID_ 
      EndMacro
      Macro CurrentFontID( )
         __gui\fontID    
      EndMacro
      Macro ChangeFontID( _address_, _font_ID_ )
         Bool( GetFontID( _address_ ) <> _font_ID_ )
         SetFontID( _address_, _font_ID_ )
      EndMacro
      
      ;-
      Macro draw_mode_alpha_( _mode_ )
         draw_mode_( _mode_ | #PB_2DDrawing_AlphaBlend )
      EndMacro
      
      Macro draw_mode_( _mode_ )
         DrawingMode( _mode_ )
      EndMacro
      
      Macro draw_box_( _x_, _y_, _width_, _height_, _color_ = $ffffffff )
         Box( _x_, _y_, _width_, _height_, _color_ )
      EndMacro
      
      Macro draw_roundbox_( _x_, _y_, _width_, _height_, _round_x_, _round_y_, _color_ = $ffffffff )
         If _round_x_ Or _round_y_
            RoundBox( _x_, _y_, _width_, _height_, _round_x_, _round_y_, _color_ ) ; bug _round_y_ = 0
         Else
            draw_box_( _x_, _y_, _width_, _height_, _color_ )
         EndIf
      EndMacro
      
      Macro draw_image_( _this_, _x_, _y_, _mode_ = )
         ; draw_mode_alpha_( #PB_2DDrawing_Transparent )
         DrawAlphaImage( _this_\picture#_mode_\imageID, _x_ + _this_\picture#_mode_\x + _this_\scroll_x( ), _y_ + _this_\picture#_mode_\y + _this_\scroll_y( ), _this_\color\ialpha )
      EndMacro
      
      Macro draw_font( _address_, _font_id_ = 0, _update_ = 0 )
         If _font_id_
            If Not GetFontID( _address_ )
               SetFontID( _address_, _font_id_ )
               
               _address_\text\width = 0
               _address_\text\height = 0
            EndIf
         EndIf
         ;
         If GetFontID( _address_ ) And
            CurrentFontID( ) <> GetFontID( _address_ )
            ; Debug " draw current font - " + #PB_Compiler_Procedure + " " +  Str(_address_) + " " + CurrentFontID( ) +" "+ GetFontID( _address_ )
            CurrentFontID( ) = GetFontID( _address_ )
            
            DrawingFont( CurrentFontID( ) )
            
            _address_\text\width = 0
            _address_\text\height = 0
         EndIf
         ;
         If Not ( _address_\text\width And _address_\text\height ) Or _address_\TextChange( )
            If _address_\text\string
               _address_\text\width = TextWidth( _address_\text\string )
            EndIf
            
            _address_\text\height = TextHeight( "A" )
            
            ; set rotate text value
            _address_\text\rotate = Bool( _address_\text\invert ) * 180 + Bool( _address_\text\vertical ) * 90
            
         EndIf
      EndMacro
      
      ;-
      Macro __draw_up_arrow(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ;
         ;                                                                                                                                                      ;
         Line(_x_ + 7, _y_, 2, 1, _frame_color_)                                                                                                                  ; 0,0,0,0,0,0,0,0,0,0
         Plot(_x_ + 6, _y_ + 1, _frame_color_ ) : Line(_x_ + 7, _y_ + 1, 2, 1, _back_color_) : Plot(_x_ + 9, _y_ + 1, _frame_color_ )                             ; 0,0,0,0,1,1,0,0,0,0
         Plot(_x_ + 5, _y_ + 2, _frame_color_ ) : Line(_x_ + 6, _y_ + 2, 4, 1, _back_color_) : Plot(_x_ + 10, _y_ + 2, _frame_color_ )                            ; 0,0,0,1,1,1,1,0,0,0
         Plot(_x_ + 4, _y_ + 3, _frame_color_ ) : Line(_x_ + 5, _y_ + 3, 6, 1, _back_color_) : Plot(_x_ + 11, _y_ + 3, _frame_color_ )                            ; 0,0,1,1,1,1,1,1,0,0
         Line(_x_ + 3, _y_ + 4, _size_ / 3 - 1, 1, _frame_color_) : Line(_x_ + 7, _y_ + 4, 2, 1, _back_color_) : Line(_x_ + _size_ / 2 + 1, _y_ + 4, _size_ / 3 - 1 , 1, _frame_color_) ; 0,0,0,0,1,1,0,0,0,0
         Plot(_x_ + _size_ / 2 - 2, _y_ + 5, _frame_color_ ) : Line(_x_ + 7, _y_ + 5, 2, 1, _back_color_) : Plot(_x_ + _size_ / 2 + 1, _y_ + 5, _frame_color_ )                         ; 0,0,0,0,1,1,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ;
                                                                                                                                                                                        ;                                                                                                                                                      ;
      EndMacro
      Macro __draw_down_arrow(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ;
         ;                                                                                                                                                      ;
         Plot(_x_ + _size_ / 2 - 2, _y_ + 4, _frame_color_ ) : Line(_x_ + 7, _y_ + 4, 2, 1, _back_color_) : Plot(_x_ + _size_ / 2 + 1, _y_ + 4, _frame_color_ )                     ; 0,0,0,0,1,1,0,0,0,0
         Line(_x_ + 3, _y_ + 5, _size_ / 3 - 1, 1, _frame_color_) : Line(_x_ + 7, _y_ + 5, 2, 1, _back_color_) : Line(_x_ + _size_ / 2 + 1, _y_ + 5, _size_ / 3 - 1, 1, _frame_color_)  ; 0,0,0,0,1,1,0,0,0,0
         Plot(_x_ + 4, _y_ + 6, _frame_color_ ) : Line(_x_ + 5, _y_ + 6, 6, 1, _back_color_) : Plot(_x_ + 11, _y_ + 6, _frame_color_ )                                                  ; 0,0,1,1,1,1,1,1,0,0
         Plot(_x_ + 5, _y_ + 7, _frame_color_ ) : Line(_x_ + 6, _y_ + 7, 4, 1, _back_color_) : Plot(_x_ + 10, _y_ + 7, _frame_color_ )                                                  ; 0,0,0,1,1,1,1,0,0,0
         Plot(_x_ + 6, _y_ + 8, _frame_color_ ) : Line(_x_ + 7, _y_ + 8, 2, 1, _back_color_) : Plot(_x_ + 9, _y_ + 8, _frame_color_ )                                                   ; 0,0,0,0,1,1,0,0,0,0
         Line(_x_ + 7, _y_ + 9, 2, 1, _frame_color_)                                                                                                                                    ; 0,0,0,0,0,0,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ;
                                                                                                                                                                                        ;                                                                                                                                                      ;
      EndMacro
      Macro __draw_left_arrow(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         Line(_x_, _y_ + 7, 1, 2, _frame_color_)                                                                                                                  ; 0,0,1,0,0,0
         Plot(_x_ + 1, _y_ + 6, _frame_color_ ) : Line(_x_ + 1, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 1, _y_ + 9, _frame_color_ )                             ; 0,0,1,1,0,0
         Plot(_x_ + 2, _y_ + 5, _frame_color_ ) : Line(_x_ + 2, _y_ + 6, 1, 4, _back_color_) : Plot(_x_ + 2, _y_ + 10, _frame_color_ )                            ; 1,1,1,1,1,0
         Plot(_x_ + 3, _y_ + 4, _frame_color_ ) : Line(_x_ + 3, _y_ + 5, 1, 6, _back_color_) : Plot(_x_ + 3, _y_ + 11, _frame_color_ )                            ; 1,1,1,1,1,0
         Line(_x_ + 4, _y_ + 3, 1, _size_ / 3 - 1, _frame_color_) : Line(_x_ + 4, _y_ + 7, 1, 2, _back_color_) : Line(_x_ + 4, _y_ + _size_ / 2 + 1, 1, _size_ / 3 - 1, _frame_color_)  ; 0,0,1,1,0,0
         Plot(_x_ + 5, _y_ + _size_ / 2 - 2, _frame_color_ ) : Line(_x_ + 5, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 5, _y_ + _size_ / 2 + 1, _frame_color_ )                         ; 0,0,1,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
      EndMacro
      Macro __draw_right_arrow(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         Plot(_x_ + 4, _y_ + _size_ / 2 - 2, _frame_color_ ) : Line(_x_ + 4, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 4, _y_ + _size_ / 2 + 1, _frame_color_ )                     ; 0,0,0,1,0,0
         Line(_x_ + 5, _y_ + 3, 1, _size_ / 3 - 1, _frame_color_) : Line(_x_ + 5, _y_ + 7, 1, 2, _back_color_) : Line(_x_ + 5, _y_ + _size_ / 2 + 1, 1, _size_ / 3 - 1, _frame_color_)  ; 0,0,1,1,0,0
         Plot(_x_ + 6, _y_ + 4, _frame_color_ ) : Line(_x_ + 6, _y_ + 5, 1, 6, _back_color_) : Plot(_x_ + 6, _y_ + 11, _frame_color_ )                                                  ; 0,1,1,1,1,1
         Plot(_x_ + 7, _y_ + 5, _frame_color_ ) : Line(_x_ + 7, _y_ + 6, 1, 4, _back_color_) : Plot(_x_ + 7, _y_ + 10, _frame_color_ )                                                  ; 0,1,1,1,1,1
         Plot(_x_ + 8, _y_ + 6, _frame_color_ ) : Line(_x_ + 8, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 8, _y_ + 9, _frame_color_ )                                                   ; 0,0,1,1,0,0
         Line(_x_ + 9, _y_ + 7, 1, 2, _frame_color_)                                                                                                                                    ; 0,0,0,1,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
      EndMacro
      Macro __draw_arrows( _address_, _direction_ )
         Draw_Arrow( _direction_,
                     _address_\x + ( _address_\width - _address_\arrow\size ) / 2,
                     _address_\y + ( _address_\height - _address_\arrow\size ) / 2, 
                     _address_\arrow\size, _address_\arrow\type, 0,
                     _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
      EndMacro
      
      ;-
      Macro __draw_gradient( _vertical_, _address_, _x_,_y_, _state_, _round_ = 0, _alpha_ = 255, _mode_ = )
         BackColor( _address_\color\fore[_state_] & $FFFFFF | _address_\AlphaState24( ) )
         FrontColor( _address_\color\back[_state_] & $FFFFFF | _address_\AlphaState24( ) )
         
         If _vertical_  ; _address_\vertical
            LinearGradient( (_x_+_address_\x#_mode_), (_y_+_address_\y#_mode_), ( (_x_+_address_\x#_mode_) + _address_\width#_mode_ ), (_y_+_address_\y#_mode_) )
         Else
            LinearGradient( (_x_+_address_\x#_mode_), (_y_+_address_\y#_mode_), (_x_+_address_\x#_mode_), ( (_y_+_address_\y#_mode_) + _address_\height#_mode_ ))
         EndIf
         
         If _round_
            draw_roundbox_( (_x_+_address_\x#_mode_), (_y_+_address_\y#_mode_), _address_\width#_mode_, _address_\height#_mode_, _round_, _round_ )
         Else
            draw_roundbox_( (_x_+_address_\x#_mode_), (_y_+_address_\y#_mode_), _address_\width#_mode_, _address_\height#_mode_, _address_\round, _address_\round )
         EndIf
         
         BackColor( #PB_Default )
         FrontColor( #PB_Default ) ; bug
      EndMacro
      
      Macro __draw_plus( _address_, _plus_, _size_ = DPIScaled( #__draw_plus_size ))
         Line(_address_\x + (_address_\width - _size_) / 2, _address_\y + (_address_\height - 1) / 2, _size_, 1, _address_\color\front[_address_\ColorState( )])
         If _plus_
            Line(_address_\x + (_address_\width - 1) / 2, _address_\y + (_address_\height - _size_) / 2, 1, _size_, _address_\color\front[_address_\ColorState( )])
         EndIf
      EndMacro
      
      Macro __draw_checkbox( _type_, _address_, _x_,_y_,_round_, _color_fore_ = $FFFFFFFF, _color_fore2_ = $FFE9BA81, _color_back_ = $80E2E2E2, _color_back2_ = $FFE89C3D, _color_frame_ = $80C8C8C8, _color_frame2_ = $FFDC9338, _alpha_ = 255, size=4 )
         draw_mode_alpha_( #PB_2DDrawing_Gradient )
         LinearGradient( (_x_+_address_\x), (_y_+_address_\y), (_x_+_address_\x), ( (_y_+_address_\y) + _address_\height ))
         
         If _address_\checked
            BackColor( _color_fore2_ & $FFFFFF | _alpha_ << 24 )
            FrontColor( _color_back2_ & $FFFFFF | _alpha_ << 24 )
         Else
            BackColor( _color_fore_ & $FFFFFF | _alpha_ << 24 )
            FrontColor( _color_back_ & $FFFFFF | _alpha_ << 24 )
         EndIf
         
         draw_roundbox_( (_x_+_address_\x), (_y_+_address_\y), _address_\width, _address_\height, _round_, _round_ )
         
         If _type_ = 4
            FrontColor( $ff000000 & $FFFFFF | _alpha_ << 24 )
            BackColor( $ff000000 & $FFFFFF | _alpha_ << 24 )
            
            Line( (_x_+_address_\x) + 1 + ( _address_\width - 6 ) / 2, (_y_+_address_\y) + ( _address_\height - 6 ) / 2, 6, 6 )
            Line( (_x_+_address_\x) + ( _address_\width - 6 ) / 2, (_y_+_address_\y) + ( _address_\height - 6 ) / 2, 6, 6 )
            
            Line( (_x_+_address_\x) - 1 + 6 + ( _address_\width - 6 ) / 2, (_y_+_address_\y) + ( _address_\height - 6 ) / 2, - 6, 6 )
            Line( (_x_+_address_\x) + 6 + ( _address_\width - 6 ) / 2, (_y_+_address_\y) + ( _address_\height - 6 ) / 2, - 6, 6 )
         Else
            FrontColor( _color_fore_ & $FFFFFF | _alpha_ << 24 )
            BackColor( _color_fore_ & $FFFFFF | _alpha_ << 24 )
            
            If _address_\checked
               If _type_ = 1
                  If _address_\width % 2
                     draw_roundbox_( (_x_+_address_\x) + ( _address_\width - DesktopScaledY(4) ) / 2, (_y_+_address_\y) + ( _address_\height - DesktopScaledY(4) ) / 2, DesktopScaledY(5), DesktopScaledY(5), 4, 4 )
                  Else
                     draw_roundbox_( (_x_+_address_\x) + ( _address_\width - DesktopScaledY(4) ) / 2, (_y_+_address_\y) + ( _address_\height - DesktopScaledY(4) ) / 2, DesktopScaledY(4), DesktopScaledY(4), 4, 4 )
                  EndIf
               Else
                  If _address_\checked = - 1
                     If _address_\width % 2
                        draw_box_( (_x_+_address_\x) + ( _address_\width - DesktopScaledY(4) ) / 2, (_y_+_address_\y) + ( _address_\height - DesktopScaledY(4) ) / 2, DesktopScaledY(5), DesktopScaledY(5) )
                     Else
                        draw_box_( (_x_+_address_\x) + ( _address_\width - DesktopScaledY(4) ) / 2, (_y_+_address_\y) + ( _address_\height - DesktopScaledY(4) ) / 2, DesktopScaledY(4), DesktopScaledY(4) )
                     EndIf
                  Else
                     _box_x_ = _address_\width / 2 - 4
                     _box_y_ = _box_x_ + Bool( _address_\width % 2 )
                     
                     LineXY(( (_x_+_address_\x) + 1 + _box_x_ ), ( (_y_+_address_\y) + 4 + _box_y_ ), ( (_x_+_address_\x) + 2 + _box_x_ ), ( (_y_+_address_\y) + 5 + _box_y_ )) ; Левая линия
                     LineXY(( (_x_+_address_\x) + 1 + _box_x_ ), ( (_y_+_address_\y) + 5 + _box_y_ ), ( (_x_+_address_\x) + 2 + _box_x_ ), ( (_y_+_address_\y) + 6 + _box_y_ )) ; Левая линия
                     
                     LineXY(( (_x_+_address_\x) + 6 + _box_x_ ), ( (_y_+_address_\y) + 0 + _box_y_ ), ( (_x_+_address_\x) + 3 + _box_x_ ), ( (_y_+_address_\y) + 6 + _box_y_ )) ; правая линия
                     LineXY(( (_x_+_address_\x) + 7 + _box_x_ ), ( (_y_+_address_\y) + 0 + _box_y_ ), ( (_x_+_address_\x) + 4 + _box_x_ ), ( (_y_+_address_\y) + 6 + _box_y_ )) ; правая линия
                  EndIf
               EndIf
            EndIf
            
         EndIf
         
         draw_mode_alpha_( #PB_2DDrawing_Outlined )
         
         If _address_\checked
            FrontColor( _color_frame2_ & $FFFFFF | _alpha_ << 24 )
         Else
            FrontColor( _color_frame_ & $FFFFFF | _alpha_ << 24 )
         EndIf
         
         draw_roundbox_( (_x_+_address_\x), (_y_+_address_\y), _address_\width, _address_\height, _round_, _round_, _color_frame_ & $FFFFFF | _alpha_ << 24 )
      EndMacro
      
      Macro __draw_text( _this_, _color_ = $ff000000 )
         If _this_\text 
            If _this_\text\string 
               If _this_\TextChange( ) Or 
                  _this_\ResizeChange( )
                  ;
                  If _this_\text\vertical
                     change_align_horizontal( _this_\text, _this_\inner_width( ), _this_\text\height, _this_\text\rotate, _this_\text\align, _this_\padding\x )
                     change_align_vertical( _this_\text, _this_\inner_height( ), _this_\text\width, _this_\text\rotate, _this_\text\align, _this_\padding\y )
                  Else
                     change_align_horizontal( _this_\text, _this_\inner_width( ), _this_\text\width, _this_\text\rotate, _this_\text\align, _this_\padding\x )
                     change_align_vertical( _this_\text, _this_\inner_height( ), _this_\text\height, _this_\text\rotate, _this_\text\align, _this_\padding\y )
                  EndIf
               EndIf
               
               ;
               If _this_\screen_height( ) > _this_\text\height
                  draw_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawRotatedText( _this_\inner_x( ) + _this_\text\x, _this_\inner_y( ) + _this_\text\y, _this_\text\string, _this_\text\rotate, _color_ )
               EndIf
            EndIf
         EndIf
      EndMacro
      
      ;-
      Macro __draw_box( _address_, _color_type_, _mode_ = )
         draw_roundbox_( _address_\x#_mode_, _address_\y#_mode_, _address_\width#_mode_, _address_\height#_mode_,
                         _address_\round, _address_\round, _address_\_color_type_[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
      EndMacro
      
      Macro __draw_roundbox( _address_, _color_type_ )
         ;__draw_box( _address_, _color_type_)
         If Not _address_\hide
            draw_roundbox_( _address_\x, _address_\y, _address_\width, _address_\height, _address_\round, _address_\round, _address_\_color_type_[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            draw_roundbox_( _address_\x, _address_\y + 1, _address_\width, _address_\height - 2, _address_\round, _address_\round, _address_\_color_type_[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            draw_roundbox_( _address_\x + 1, _address_\y, _address_\width - 2, _address_\height, _address_\round, _address_\round, _address_\_color_type_[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
         EndIf
      EndMacro
      
      Macro __draw_close_button( _address_, _size_ )
         ; close button
         If Not _address_\hide
            If _address_\ColorState( )
               Line( _address_\x + 1 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               
               Line( _address_\x - 1 + _size_ + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + _size_ + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            EndIf
            
            __draw_roundbox( _address_, color\frame )
         EndIf
      EndMacro
      
      Macro __draw_maximize_button( _address_, _size_ )
         If Not _address_\hide
            If _address_\ColorState( )
               Line( _address_\x + 2 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + 1 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               
               Line( _address_\x + 1 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + 2 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            EndIf
            
            __draw_roundbox( _address_, color\frame )
         EndIf
      EndMacro
      
      Macro __draw_minimize_button( _address_, _size_ )
         If Not _address_\hide
            If _address_\ColorState( )
               Line( _address_\x + 1 + ( _address_\width ) / 2 - _size_, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x + 0 + ( _address_\width ) / 2 - _size_, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               
               Line( _address_\x - 1 + ( _address_\width ) / 2 + _size_, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
               Line( _address_\x - 2 + ( _address_\width ) / 2 + _size_, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
            EndIf
            
            __draw_roundbox( _address_, color\frame )
         EndIf
      EndMacro
      
      Macro __draw_help_button( _address_, _size_ )
         If Not _address_\hide
            draw_roundbox_( _address_\x, _address_\y, _address_\width, _address_\height,
                            _address_\round, _address_\round, _address_\color\frame[_address_\ColorState( )] & $FFFFFF | _address_\AlphaState24( ) )
         EndIf
      EndMacro
      
      ;-
      Macro __draw_option_button( _address_, _size_, _color_ )
         If _address_\round > 2
            If _address_\width % 2
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_ + 1, _size_ + 1, _size_ + 1, _size_ + 1, _color_ )
            Else
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _size_, _size_, _color_ )
            EndIf
         Else
            If _address_\width % 2
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_ + 1, _size_ + 1, 1, 1, _color_ )
            Else
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_ + 1, _size_ + 1, 1, 1, _color_ )
            EndIf
         EndIf
      EndMacro
      
      Macro __draw_check_button( _address_, _size_, _color_ )
         LineXY(( _address_\x + 0 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 4 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 1 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 5 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; Левая линия
         LineXY(( _address_\x + 0 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 5 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 1 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 6 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; Левая линия
         
         LineXY(( _address_\x + 5 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 0 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 2 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 6 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; правая линия
         LineXY(( _address_\x + 6 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 0 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 3 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 6 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; правая линия
      EndMacro
      
      Macro __draw_navigator_button( _this_ )
         ; background buttons draw
         If Not _this_\bar\button[1]\hide
            If _this_\bar\button[1]\color\fore <> - 1
               draw_mode_alpha_( #PB_2DDrawing_Gradient )
               __draw_gradient(_this_\bar\vertical, _this_\bar\button[1], 0,0, _this_\bar\button[1]\ColorState( ))
            Else
               draw_mode_alpha_( #PB_2DDrawing_Default )
               __draw_box(_this_\bar\button[1], color\back)
               ; draw_roundbox_( _this_\bar\button[1]\x, _this_\bar\button[1]\y, _this_\bar\button[1]\width, _this_\bar\button[1]\height, _this_\bar\button[1]\round, _this_\bar\button[1]\round, _this_\bar\button[1]\color\frame[_this_\bar\button[1]\ColorState( )] & $FFFFFF | _this_\bar\button[1]\AlphaState24( ) )
            EndIf
         EndIf
         If Not _this_\bar\button[2]\hide
            If _this_\bar\button[2]\color\fore <> - 1
               draw_mode_alpha_( #PB_2DDrawing_Gradient )
               __draw_gradient(_this_\bar\vertical, _this_\bar\button[2], 0,0, _this_\bar\button[2]\ColorState( ))
            Else
               draw_mode_alpha_( #PB_2DDrawing_Default )
               __draw_box(_this_\bar\button[2], color\back)
               ; draw_roundbox_( _this_\bar\button[2]\x, _this_\bar\button[2]\y, _this_\bar\button[2]\width, _this_\bar\button[2]\height, _this_\bar\button[2]\round, _this_\bar\button[2]\round, _this_\bar\button[2]\color\frame[_this_\bar\button[2]\ColorState( )] & $FFFFFF | _this_\bar\button[2]\AlphaState24( ) )
            EndIf
         EndIf
         
         draw_mode_alpha_( #PB_2DDrawing_Outlined )
         
         ;
         If _this_\type = #__type_Scroll
            If _this_\bar\vertical
               If (_this_\bar\page\len + Bool(_this_\round ) * (_this_\frame_width( ) / 4 )) = _this_\frame_height( )
                  Line(_this_\frame_x( ), _this_\frame_y( ), 1, _this_\bar\page\len + 1, _this_\color\front & $FFFFFF | _this_\AlphaState24( ) ) ; $FF000000 ) ;
               Else
                  Line(_this_\frame_x( ), _this_\frame_y( ) + _this_\bar\button[1]\round, 1, _this_\frame_height( ) - _this_\bar\button[1]\round - _this_\bar\button[2]\round, _this_\color\front & $FFFFFF | _this_\AlphaState24( ) ) ; $FF000000 ) ;
               EndIf
            Else
               If (_this_\bar\page\len + Bool(_this_\round ) * (_this_\frame_height( ) / 4 )) = _this_\frame_width( )
                  Line(_this_\frame_x( ), _this_\frame_y( ), _this_\bar\page\len + 1, 1, _this_\color\front & $FFFFFF | _this_\AlphaState24( ) ) ; $FF0000ff ) ;
               Else
                  Line(_this_\frame_x( ) + _this_\bar\button[1]\round, _this_\frame_y( ), _this_\frame_width( ) - _this_\bar\button[1]\round - _this_\bar\button[2]\round, 1, _this_\color\front & $FFFFFF | _this_\AlphaState24( ) ) ; $FF000000 ) ;
               EndIf
            EndIf
         EndIf
         
         ; frame buttons draw
         If Not _this_\bar\button[1]\hide
            If _this_\bar\button[1]\arrow\size
               If _this_\flag & #__spin_Plus 
                  __draw_plus( _this_\bar\button[1], Bool( _this_\bar\invert ) )
               Else
                  __draw_arrows( _this_\bar\button[1], Bool(_this_\bar\vertical ) + (Bool(_this_\type <> #__type_Scroll)*2))
               EndIf
            EndIf
            __draw_box(_this_\bar\button[1], color\frame)
            ; draw_roundbox_( _this_\bar\button[1]\x, _this_\bar\button[1]\y, _this_\bar\button[1]\width, _this_\bar\button[1]\height, _this_\bar\button[1]\round, _this_\bar\button[1]\round, _this_\bar\button[1]\color\frame[_this_\bar\button[1]\ColorState( )] & $FFFFFF | _this_\bar\button[1]\AlphaState24( ) )
         EndIf
         If Not _this_\bar\button[2]\hide
            If _this_\bar\button[2]\arrow\size
               If _this_\flag & #__spin_Plus 
                  __draw_plus( _this_\bar\button[2], Bool( Not _this_\bar\invert ) )
               Else
                  __draw_arrows( _this_\bar\button[2], Bool(_this_\bar\vertical ) + (Bool(_this_\type = #__type_Scroll)*2) )
               EndIf
            EndIf
            __draw_box(_this_\bar\button[2], color\frame)
            ; draw_roundbox_( _this_\bar\button[2]\x, _this_\bar\button[2]\y, _this_\bar\button[2]\width, _this_\bar\button[2]\height, _this_\bar\button[2]\round, _this_\bar\button[2]\round, _this_\bar\button[2]\color\frame[_this_\bar\button[2]\ColorState( )] & $FFFFFF | _this_\bar\button[2]\AlphaState24( ) )
         EndIf
      EndMacro     
      
      ;-
      
      ;-  
      ;-\\   DECLARE_globals
      ;-  
      Declare.l DropX( )
      Declare.l DropY( )
      Declare.l DropWidth( )
      Declare.l DropHeight( )
      
      Declare.s DropFiles( )
      Declare.s DropText( )
      Declare.i DropType( )
      Declare.i DropAction( )
      Declare.i DropPrivate( )
      Declare.i DropImage( img.i = -1, Depth.i = 24 )
      
      Declare.i DragDropText( Text.S, Actions.b = #PB_Drag_Copy )
      Declare.i DragDropImage( img.i, Actions.b = #PB_Drag_Copy )
      Declare.i DragDropPrivate( Type.i, Actions.b = #PB_Drag_Copy )
      Declare.i DragDropFiles( Files.s, Actions.b = #PB_Drag_Copy )
      Declare.i EnableDrop( *this, Format.l, Actions.b, PrivateType.i = 0 )
      
      Declare a_grid_image( Steps = 5, line = 0, Color = 0, startx = 0, starty = 0 )
      Declare a_init( *this, grid_size.a = 7, grid_type.b = 0 )
      Declare a_set( *this, mode.i = #PB_Default, size.l = #PB_Default, position.l = #PB_Default )
      Declare a_update( *parent )
      Declare a_align( *this, align )
      Declare a_free( *this )
      Declare a_object( X.l, Y.l, Width.l, Height.l, Text.s, color.i, flag.q = #Null, framesize = 1 )
      
      Declare.b bar_Update_DrawTabItems( *this._s_WIDGET, List *tabs._s_ITEMS( ) )
      Declare.l bar_setAttribute( *this, Attribute.l, *value )
      Declare   bar_mdi_resize( *this, X.l, Y.l, Width.l, Height.l )
      Declare   bar_mdi_update( *this, X.l, Y.l, Width.l, Height.l )
      Declare.b bar_Update( *this, mode.b = 1 )
      Declare.b bar_PageChange( *this, state.l, mode.b = 1 )
      
      Declare.l Update_DrawRows( *this._s_WIDGET, List *rows._s_ROWS( ), _change_ = 1 )
      
      
      
      Declare   GetAtPoint( *root._s_root, mouse_x, mouse_y, List *List._s_WIDGET( ), *address = #Null )
      Declare.i Sticky( *window = #PB_Default, state.b = #PB_Default )
      
      Declare.q ToPBFlag( Type, Flag.q )
      Declare.q FromPBFlag( Type, Flag.q )
      Declare.q Flag( *this, flag.q = #Null, state.b = #PB_Default )
      Declare.s MakeFlagsString( Type )
      Declare.q MakeConstants( string$ )
      Declare$  MakeStringConstants( string$ )
      Declare$  MakeConstantsString( type$, flag.q ) 
      
      Declare.i PBEventType( event.i )
      Declare.i TypeFromClass( class.s )
      Declare.s ClassFromType( Type )
      Declare.s ClassFromEvent( event.i )
      Declare   SetBackgroundColor( *this, color.i )
      
      
      Declare.b Draw_Arrow( direction.a, X.l, Y.l, size.a, mode.b = 1, framesize.a = 0, Color.i = $ff000000 )
      Declare   Draw_Button( *this )
      Declare.b Draw( *this )
      Declare   ReDraw( *this )
      Declare   Drawing( )
      
      Declare.b HideItem( *this, item.l, state.b )
      Declare.b Hide( *this, State.b = #PB_Default, flags.q = 0 )
      Declare.b DisableItem( *this, item.l, state.b )
      Declare.b Disable( *this, State.b = #PB_Default )
      Declare.l Type( *this )
      Declare.i ID( Index )
      Declare.l Index( *this )
      
      Declare.l X( *this, mode.l = #PB_Default )
      Declare.l Y( *this, mode.l = #PB_Default )
      Declare.l Width( *this, mode.l = #PB_Default )
      Declare.l Height( *this, mode.l = #PB_Default )
      
      Declare   IsChild( *this, *parent )
      Declare   IsChildrens( *this )
      Declare.b IsContainer( *this )
      
      Declare   ResizeRootWindow( *this, X.l, Y.l, Width.l, Height.l )
      Declare.b Resize( *this, ix.l, iy.l, iwidth.l, iheight.l, scale.b = 1 )
      Declare.i SetAlign( *this, mode.q, left.q = 0, top.q = 0, right.q = 0, bottom.q = 0 )
      Declare.i SetAttach( *this, *parent, mode.a )
      Declare   SetChildrenBounds( *this, state.b )
      Declare   SetMoveBounds( *this, MinimumX.l = #PB_Ignore, MinimumY.l = #PB_Ignore, MaximumX.l = #PB_Ignore, MaximumY.l = #PB_Ignore )
      Declare   SetSizeBounds( *this, MinimumWidth.l = #PB_Ignore, MinimumHeight.l = #PB_Ignore, MaximumWidth.l = #PB_Ignore, MaximumHeight.l = #PB_Ignore )
      
      
      Declare.l CountItems( *this )
      Declare.l ClearItems( *this )
      Declare.b IsItem( *this, Item.l ) 
      Declare   PushItem( *this )
      Declare   PopItem( *this )
      Declare.i SelectItem( *this, Item.l )
      Declare   RemoveItem( *this, Item.l )
      Declare   AddItem( *this, Item.l, Text.s, img.i = -1, flag.q = 0 )
      Declare   AddColumn( *this, position.l, Text.s, Width.l, img.i = - 1 )
      
      
      Declare.i GetRoot( *this )
      Declare.i GetWindow( *this )
      Declare.i GetCanvasGadget( *this = #Null )
      Declare.i GetCanvasWindow( *this = #Null )
      
      Declare.l Level( *this )
      Declare.i CountType( *this, mode.b = 0 )
      
      Declare.b GetFocus( *this )
      Declare.b SetFocus( *this, state.b = #__s_2 )
      Declare.i SetActive( *this )
      Declare   SetForeground( *window )
      
      Declare.l GetRound( *this )
      Declare   SetRound( *this, round.l )
      
      Declare.a GetFrame( *this, mode.b = 0 )
      Declare   SetFrame( *this, size.a, mode.b = 0 )
      
      Declare.s GetClass( *this )
      Declare   SetClass( *this, class.s )
      
      Declare   SetTextXY( *this, X.l, Y.l )
      Declare   GetCaret( *this, mode.a = 0 )
      Declare   SetCaret( *this, position.i )
      Declare.s GetText( *this )
      Declare   SetText( *this, Text.s )
      Declare.s GetItemText( *this, Item.l, Column.l = 0 )
      Declare.l SetItemText( *this, Item.l, Text.s, Column.l = 0 )
      
      
      Declare.i GetData( *this )
      Declare.i SetData( *this, *data )
      Declare.i GetItemData( *this, item.l )
      Declare.i SetItemData( *this, item.l, *data )
      ;
      Declare.i GetFontColor( *this )
      Declare   SetFontColor( *this, color.i )
      Declare.i GetFont( *this )
      Declare.i SetFont( *this, Font.i )
      Declare.i GetItemFont( *this, Item.l )
      Declare.i SetItemFont( *this, Item.l, Font.i )
      
      Declare.i GetState( *this )
      Declare.b SetState( *this, state.i )
      Declare.l GetItemState( *this, Item.l )
      Declare.b SetItemState( *this, Item.l, State.b )
      
      Declare.i GetColor( *this, ColorType.l, ColorState.a = 0 )
      Declare.l SetColor( *this, ColorType.l, color.i, ColorState.b = 0 )
      Declare.l GetItemColor( *this, Item.l, ColorType.l, Column.l = 0, ColorState.a = 0 )
      Declare.l SetItemColor( *this, Item.l, ColorType.l, color.i, Column.l = 0, ColorState.b = 0 )
      
      Declare.i GetAttribute( *this, Attribute.l )
      Declare.i SetAttribute( *this, Attribute.l, *value )
      Declare.i GetItemAttribute( *this, Item.l, Attribute.l, Column.l = 0 )
      Declare.i SetItemAttribute( *this, Item.l, Attribute.l, *value, Column.l = 0 )
      
      Declare.i GetCursor( *this = #PB_All, Type.a = 0 )
      Declare   SetCursor( *this, *cursor, Type.a = 0 )
      Declare   ChangeCursor( *this, *cursor )
      
      Declare.i GetImage( *this )
      Declare   SetImage( *this, img )
      Declare   RemoveImage( *this, img )
      Declare   SetBackgroundImage( *this, img )
      Declare.i GetItemImage( *this, Item.l )
      Declare.i SetItemImage( *this, Item.l, img )
      
      Declare.i GetParent( *this )
      Declare   SetParent( *this, *parent, tabindex.l = #PB_Default )
      
      Declare   GetLast( *this, tabindex.l = #PB_Default )
      Declare   GetPosition( *this, position.l, tabindex.l = #PB_Default )
      Declare   SetPosition( *this, position.l, *widget = #Null )
      
      ;
      ;-\\ BAR  [menu;popupmenu;toolbar]
      ;Declare.b IsBar( *this._s_widget )
      Macro     PopupBar( ): __GUI\popup: EndMacro
      Macro     BarBar( ): BarSeparator( ): EndMacro
      Declare   BarSeparator( )
      Declare   CreatePopupBar( _flags_ = 0 )
      Declare   CreateBar( *parent, flag.q = #Null, Type.w = #__type_MenuBar )
      Declare   OpenSubBar( Text.s, img.i = - 1 )
      Declare   CloseSubBar( )
      Declare.i DisplayPopupBar( *this, *display, X.l = #PB_Ignore, Y.l = #PB_Ignore )
      Declare   DisableBarItem( *this, _baritem_, _state_ )
      Declare   DisableBarButton( *this, _barbutton_, _state_ )
      Declare   BarToolTip( *this, _barbutton_, _text_.s )
      Declare   BarPosition( *this, position.i, size.i = #PB_Default )
      Declare   BarTitle( title.s, img = - 1 )
      Declare   BarItem( item, Text.s, img = - 1 )
      Declare   BarButton( Button.i, img.i, mode.i = 0, Text.s = #Null$ )
      Declare.s GetBarTitleText( *this, _title_.s )
      Declare   SetBarTitleText( *this, _titleindex_, _text_.s )
      Declare   SetBarItemText( *this, _baritem_, _text_.s )
      Declare.s GetBarItemText( *this, _baritem_ )
      Declare   SetBarItemState( *this, _baritem_, _state_ )
      Declare   GetBarItemState( *this, _baritem_ )
      Declare   BindBarEvent( *this, _baritem_, *callback )
      Declare   UnbindBarEvent( *this, _baritem_, *callback )
      
      Declare.i VBar( *this )
      Declare.i HBar( *this )
      
      ;
      Declare.i Create( *parent, class.s, Type.w, X.l, Y.l, Width.l, Height.l, Text.s = #Null$, flag.q = #Null, *param_1 = #Null, *param_2 = #Null, *param_3 = #Null, size.l = 0, round.l = 0, ScrollStep.d = 1.0 )
      
      ; bar
      Declare.i Spin( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = 0, increment.d = 1.0 )
      Declare.i Tab( X.l, Y.l, Width.l, Height.l, flag.q = 0, round.l = 0 )
      Declare.i Scroll( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, PageLength.l, flag.q = 0, round.l = 0 )
      Declare.i Track( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, scrollstep.d = 1.0  )
      Declare.i Progress( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = 0 )
      Declare.i Splitter( X.l, Y.l, Width.l, Height.l, First.i, Second.i, flag.q = 0 )
      
      ; button
      Declare.i Button( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
      Declare.i Option( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0 )
      Declare.i CheckBox( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0 )
      Declare.i HyperLink( X.l, Y.l, Width.l, Height.l, Text.s, Color.i, flag.q = 0 )
      Declare.i ComboBox( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      Declare.i ButtonImage( X.l, Y.l, Width.l, Height.l, img.i = -1, flag.q = 0, round.l = 0 )
      
      ; text
      Declare.i Text( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
      Declare.i String( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
      Declare.i Editor( X.l, Y.l, Width.l, Height.l, flag.q = 0, round.i = 0 )
      
      ; list
      Declare.i Tree( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      Declare.i ListView( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      Declare.i ListIcon( X.l, Y.l, Width.l, Height.l, ColumnTitle.s, ColumnWidth.i, flag.q = 0 )
      Declare.i ExplorerList( X.l, Y.l, Width.l, Height.l, Directory.s, flag.q = 0 )
      Declare.i Properties( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      
      ; container
      Declare.i Panel( X.l, Y.l, Width.l, Height.l, flag.q = #__flag_BorderFlat )
      Declare.i Container( X.l, Y.l, Width.l, Height.l, flag.q = #__flag_BorderFlat )
      Declare.i ScrollArea( X.l, Y.l, Width.l, Height.l, ScrollAreaWidth.l, ScrollAreaHeight.l, ScrollStep.l = 1, flag.q = #__flag_BorderFlat )
      Declare.i Frame( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = #__flag_nogadgets )
      Declare.i Image( X.l, Y.l, Width.l, Height.l, img.i, flag.q = 0 )
      Declare.i MDI( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
      
      ;
      Declare.i CloseList( )
      Declare.i OpenList( *this, item.l = 0 )
      ;
      Declare   ResetEvents( *this._s_WIDGET )
      Declare   AddEvents( *this._s_root, event.l, *button = #PB_All, *data = #Null )
      Declare.i Post( *this, event.l, *button = #PB_All, *data = #Null )
      Declare.i Bind( *this, *callback, event.l = #PB_All, item.l = #PB_All, *data = 0 )
      Declare.i Unbind( *this, *callback, event.l = #PB_All, item.l = #PB_All )
      ;
      Declare   Message( Title.s, Text.s, flag.q = #Null, ParentID = #Null )
      Declare   PostQuit( *root = #Null )
      Declare   WaitQuit( *root = #Null )
      Declare   WaitClose( *callback = #Null )
      ;
      Declare   Open( Window, X.l = 0, Y.l = 0, Width.l = #PB_Ignore, Height.l = #PB_Ignore, title$ = #Null$, flag.q = #Null, *parentID = #Null, Canvas = #PB_Any )
      Declare   Free( *this )
      Declare   Close( *root )
      ;
      Declare   DoEvents( *this, event.l, *button = #PB_All, *data = #Null )
      Declare   EventHandler( Canvas.i = - 1, event.i = - 1, eventdata = 0 )
      ;
      Declare.i Window( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, *parent = 0 )
      Declare.i Gadget( Type.w, Gadget.i, X.l, Y.l, Width.l, Height.l, Text.s = "", *param1 = #Null, *param2 = #Null, *param3 = #Null, flag.q = #Null )
   EndDeclareModule
   
   Module widget
      CompilerIf #PB_Compiler_OS = #PB_OS_Windows
         Global DPISCALED.d = (GetDeviceCaps_(GetDC_(0),#LOGPIXELSX) / 96) - 1.0
      CompilerEndIf
      
      Procedure DPIScaled( _value_ )
         CompilerIf #PB_Compiler_OS = #PB_OS_Windows
            ;ProcedureReturn DPIScaledX(_value_)
            ProcedureReturn _value_ + Bool(DPISCALED) * (_value_ * DPISCALED)
         CompilerElse
            ProcedureReturn _value_
         CompilerEndIf
      EndProcedure
      
      Global NewMap typeCount( )
      
      
      Global bar_toggle_line_size = DPIScaled(#__bar_toggle_line_size)
      Global bar_splitter_size = DPIScaled(#__bar_splitter_size)
      Global dpi_scale_two = DPIScaled(2)
      
      
      ;-
      ;-\\ DECLARE PRIVATEs
      ;-
      Declare   DoEvent_Lines( *this, event.l, mouse_x.l = - 1, mouse_y.l = - 1 )
      Declare   DoEvent_Rows( *this, List  *rows._s_ROWS( ), event.l, mouse_x.l = - 1, mouse_y.l = - 1 )
      Declare   DoEvents( *this, event.l, *button = #PB_All, *data = #Null )
      
      Declare.b bar_draw_tab( *this )
      Declare   bar_area_resize( *this )
      Declare.b bar_area_update( *this )
      
      Declare.l Update_DrawVisibleRows( *this, List *rows._s_ROWS( ), visible_height.l = 0 )
      Declare   Draw_TreeRows( *this, List *rows._s_ROWS( ) )
      Declare   Update_DrawText( *this, textchange.b )
      
      Declare   ReParent( *this, *parent )
      
      Declare   edit_SetState( *this, State.i )
      Declare   edit_SetItemState( *this, Item.l, State.i )
      Declare   edit_AddItem( *this, position, *text.Character, string_len )
      Declare.s edit_make_insert_text( *this, Text.s )
      
      Global img_indent = DPIScaled(10)
      Declare  Draw_Content( *this._s_WIDGET, state )
      
      ;\\
      Macro edit_caret_0( ): Text\caret\pos[0]: EndMacro
      Macro edit_caret_1( ): Text\caret\pos[1]: EndMacro
      Macro edit_caret_2( ): Text\caret\pos[2]: EndMacro
      
      ;-
      Macro row_x_( _this_, _address_ )
         ( _this_\inner_x( ) + _address_\x )  ; + _this_\scroll_x( )
      EndMacro
      
      Macro row_y_( _this_, _address_ )
         ( _this_\inner_y( ) + _address_\y )
      EndMacro
      
      Macro row_scroll_y_( _this_, _row_, _page_height_ = )
         make_scrollarea_pos( _this_\scroll\v, ( row_y_( _this_, _row_ ) _page_height_ ) - _this_\scroll\v\y, _row_\height )
      EndMacro
      
      
      ;-
      Macro set_state_list_( _address_, _state_ )
         If _state_ > 0
            If *this\mode\clickSelect
               If _address_\_enter = #False
                  _address_\_enter = #True
               EndIf
            Else
               If _address_\press = #False
                  _address_\press = #True
               EndIf
            EndIf
            
            If _address_\press = #True
               _address_\ColorState( ) = #__s_2
            ElseIf _address_\_enter
               _address_\ColorState( ) = #__s_1
            EndIf
            
         ElseIf _address_
            If Not *this\mode\clickSelect
               If _address_\press = #True
                  _address_\press = #False
               EndIf
            EndIf
            
            If _address_\_enter
               _address_\_enter = #False
            EndIf
            
            If _address_\press = #False
               _address_\ColorState( ) = #__s_0
            EndIf
         EndIf
      EndMacro
      
      ;-
      Macro make_scrollarea_x( _this_, _size_, _align_ )
         ; make horizontal scroll x
         If _align_\right
            _this_\scroll_x( ) = ( _this_\inner_width( ) - _size_ )
         ElseIf Not _align_\left ; horizontal center
            _this_\scroll_x( ) = ( _this_\inner_width( ) - _size_ ) / 2
         Else
            If _this_\scroll\h
               _this_\scroll_x( ) = - ( _this_\scroll\h\bar\page\pos - _this_\scroll\h\bar\min )
            Else
               _this_\scroll_x( ) = 0
            EndIf
         EndIf
      EndMacro
      
      Macro make_scrollarea_y( _this_, _size_, _align_ )
         ; make vertical scroll y
         If _align_\bottom
            _this_\scroll_y( ) = ( _this_\inner_height( ) - _size_ )
         ElseIf Not _align_\top ; vertical center
            _this_\scroll_y( ) = ( _this_\inner_height( ) - _size_ ) / 2
         Else
            If _this_\scroll\v
               _this_\scroll_y( ) = - ( _this_\scroll\v\bar\page\pos - _this_\scroll\v\bar\min )
            Else
               _this_\scroll_y( ) = 0
            EndIf
         EndIf
      EndMacro
      
      Procedure make_scrollarea_pos( *this._s_WIDGET, ScrollPos, len )
         ScrollPos + *this\bar\min
         len = *this\bar\page\len - len
         
         ; to start position
         If ( ScrollPos - *this\bar\page\pos ) < 0 
            ProcedureReturn bar_PageChange( *this, ScrollPos ) 
         EndIf
         
         ; to stop position
         If ( ScrollPos - *this\bar\page\pos ) > len 
            ProcedureReturn bar_PageChange( *this, ScrollPos - len )
         EndIf
      EndProcedure
      
      
      ;-
      Macro set_align_content( _address_, _flag_ )
         _address_\align\left   = constants::BinaryFlag( _flag_, #__flag_left )
         _address_\align\top    = constants::BinaryFlag( _flag_, #__flag_top )
         _address_\align\right  = constants::BinaryFlag( _flag_, #__flag_right )
         _address_\align\bottom = constants::BinaryFlag( _flag_, #__flag_bottom )
         
         If constants::BinaryFlag( _flag_, #__flag_Center, #False )
            If Not _address_\align\top And
               Not _address_\align\left And
               Not _address_\align\right And
               Not _address_\align\bottom 
               
               If Not _address_\align\right
                  _address_\align\left = #True
                  _flag_ | #__flag_left
               EndIf
               If Not _address_\align\bottom
                  _address_\align\top = #True
                  _flag_ | #__flag_top
               EndIf
            Else
               If _address_\align\left
                  If Not _address_\align\right Or
                     Not _address_\align\bottom
                     _address_\align\top = #True
                     _flag_ | #__flag_top
                  EndIf
               ElseIf _address_\align\top
                  If Not _address_\align\left Or
                     Not _address_\align\bottom
                     _address_\align\right = #True
                     _flag_ | #__flag_right
                  EndIf
               ElseIf _address_\align\right
                  If Not _address_\align\left Or
                     Not _address_\align\top
                     _address_\align\bottom = #True
                     _flag_ | #__flag_bottom
                  EndIf
               ElseIf _address_\align\bottom
                  If Not _address_\align\right Or
                     Not _address_\align\top
                     _address_\align\left = #True
                     _flag_ | #__flag_left
                  EndIf
               EndIf
            EndIf
         EndIf
         
         If test_align = -1
            Debug " left "+ constants::BinaryFlag( _flag_, #__flag_Left) +" "+  _address_\align\left +
                  " top "+ constants::BinaryFlag( _flag_, #__flag_Top) +" "+  _address_\align\top + 
                  " right "+ constants::BinaryFlag( _flag_, #__flag_Right) +" "+  _address_\align\right + 
                  " bottom "+ constants::BinaryFlag( _flag_, #__flag_Bottom) +" "+  _address_\align\bottom +
                  " center "+ constants::BinaryFlag( _flag_, #__flag_Center)
         EndIf   
      EndMacro
      
      Macro change_align_horizontal( _address_, _width_, _size_, _rotate_, _align_, _padding_ )
         If _rotate_ = 0 Or
            _rotate_ = 90
            ;
            If _align_\right
               _address_\x = ( _width_ - _size_ - _padding_ )
            ElseIf Not _align_\left
               _address_\x = ( _width_ - _size_ ) / 2
            Else
               _address_\x = _padding_
            EndIf
         EndIf  
         
         ; invert
         If _rotate_ = 180 Or
            _rotate_ = 270
            ;
            If _align_\right
               _address_\x = _width_ - _padding_
            ElseIf Not _align_\left
               _address_\x = ( _width_ + _size_ ) / 2
            Else
               _address_\x = _size_ + _padding_
            EndIf
         EndIf
      EndMacro
      
      Macro change_align_vertical( _address_, _height_, _size_, _rotate_, _align_, _padding_ )
         If _rotate_ = 90 Or 
            _rotate_ = 180
            ;
            If _align_\bottom
               _address_\y = _height_ - _padding_
            ElseIf Not _align_\top
               _address_\y = ( _height_ + _size_ ) / 2
            Else
               _address_\y = _size_ + _padding_
            EndIf
         EndIf 
         
         ; invert 
         If _rotate_ = 270 Or
            _rotate_ = 0
            ;
            If _align_\bottom
               _address_\y = ( _height_ - _size_ - _padding_ )
            ElseIf Not _align_\top
               _address_\y = ( _height_ - _size_ ) / 2
            Else
               _address_\y = _padding_
            EndIf
         EndIf
      EndMacro
      
      ;-
      Macro set_text_flag( _this_, _text_, _flag_, _x_ = 0, _y_ = 0 )
         ;     If Not _this_\text
         ;       _this_\text.allocate( TEXT )
         ;     EndIf
         
         If _this_\text
            _this_\TextChange( ) = 1
            _this_\text\x        = _x_
            _this_\text\y        = _y_
            
            _this_\text\editable = Bool( Not constants::BinaryFlag( _flag_, #__flag_Textreadonly ))
            _this_\text\lower    = constants::BinaryFlag( _flag_, #__flag_Textlowercase )
            _this_\text\upper    = constants::BinaryFlag( _flag_, #__flag_Textuppercase )
            _this_\text\pass     = constants::BinaryFlag( _flag_, #__flag_Textpassword )
            _this_\text\invert   = constants::BinaryFlag( _flag_, #__flag_TextInvert )
            _this_\text\vertical = constants::BinaryFlag( _flag_, #__flag_TextVertical )
            
            If constants::BinaryFlag( _flag_, #__flag_Textwordwrap )
               _this_\text\multiLine = 1
            ElseIf constants::BinaryFlag( _flag_, #__flag_Textmultiline )
               _this_\text\multiLine = - 1
            Else
               _this_\text\multiLine = 0
            EndIf
            
            ;\\
            If _this_\type = #__type_Editor Or
               _this_\type = #__type_String
               
               _this_\color\fore = 0
               
               If _this_\text\editable
                  _this_\text\caret\width = DPIScaled(1)
                  _this_\color\back[0]    = $FFFFFFFF
               Else
                  _this_\color\back[0] = $FFF0F0F0
               EndIf
               
               ;\\
               If _this_\type = #__type_Editor
                  If Not _this_\text\multiLine
                     _this_\text\multiLine = 1
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If _this_\type = #__type_Option Or
               _this_\type = #__type_CheckBox Or
               _this_\type = #__type_HyperLink
               
               _this_\text\multiline = - CountString( _text_, #LF$ )
            EndIf
            
            If _this_\type = #__type_String
               If _this_\text\multiline
                  _this_\MarginLine( )\hide        = 0
                  _this_\MarginLine( )\color\front = $C8000000 ; \color\back[0]
                  _this_\MarginLine( )\color\back  = $C8F0F0F0 ; \color\back[0]
               Else
                  _this_\MarginLine( )\hide = 1
                  _this_\text\numeric       = constants::BinaryFlag( _flag_, #__flag_Textnumeric )
               EndIf
            EndIf
            
            If _text_
               SetText( _this_, _text_ )
            EndIf
         EndIf
         
      EndMacro
      
      Macro set_check_state_( _state_, _three_state_ )
         ; change checkbox state
         Select _state_
            Case #PB_Checkbox_Unchecked
               If _three_state_
                  _state_ = #PB_Checkbox_Inbetween
               Else
                  _state_ = #PB_Checkbox_Checked
               EndIf
            Case #PB_Checkbox_Checked : _state_ = #PB_Checkbox_Unchecked
            Case #PB_Checkbox_Inbetween : _state_ = #PB_Checkbox_Checked
         EndSelect
      EndMacro
      
      ;
      ;-
      CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
         ;     Macro OSX_NSColorToRGB( _color_ )
         ;       _color_
         ;     EndMacro
         ;     Macro BlendColor_(Color1, Color2, Scale=50)
         ;       Color1
         ;     EndMacro
         
         Procedure.i BlendColor_(Color1.i, Color2.i, Scale.i = 50)
            Define.i R1, G1, B1, R2, G2, B2
            Define.d Blend = Scale / 100
            
            R1 = Red(Color1): G1 = Green(Color1): B1 = Blue(Color1)
            R2 = Red(Color2): G2 = Green(Color2): B2 = Blue(Color2)
            
            ProcedureReturn RGB((R1*Blend) + (R2 * (1 - Blend)), (G1*Blend) + (G2 * (1 - Blend)), (B1*Blend) + (B2 * (1 - Blend)))
         EndProcedure
         
         Procedure OSX_NSColorToRGBA(NSColor)
            Protected.cgfloat red, green, blue, alpha
            Protected nscolorspace, rgba
            nscolorspace = CocoaMessage(0, nscolor, "colorUsingColorSpaceName:$", @"NSCalibratedRGBColorSpace")
            If nscolorspace
               CocoaMessage(@red, nscolorspace, "redComponent")
               CocoaMessage(@green, nscolorspace, "greenComponent")
               CocoaMessage(@blue, nscolorspace, "blueComponent")
               CocoaMessage(@alpha, nscolorspace, "alphaComponent")
               rgba = RGBA(red * 255.9, green * 255.9, blue * 255.9, alpha * 255.)
               ProcedureReturn rgba
            EndIf
         EndProcedure
         
         Procedure OSX_NSColorToRGB(NSColor)
            Protected.cgfloat red, green, blue
            Protected r, g, b, a
            Protected nscolorspace, rgb
            nscolorspace = CocoaMessage(0, nscolor, "colorUsingColorSpaceName:$", @"NSCalibratedRGBColorSpace")
            If nscolorspace
               CocoaMessage(@red, nscolorspace, "redComponent")
               CocoaMessage(@green, nscolorspace, "greenComponent")
               CocoaMessage(@blue, nscolorspace, "blueComponent")
               rgb = RGB(red * 255.0, green * 255.0, blue * 255.0)
               ProcedureReturn rgb
            EndIf
         EndProcedure
      CompilerEndIf
      
      ;     CompilerSelect #PB_Compiler_OS ;{ Color
      ;       CompilerCase #PB_OS_Windows
      ;         _get_colors_( )\Front         = GetSysColor_(#COLOR_WINDOWTEXT)
      ;         _get_colors_( )\Back          = GetSysColor_(#COLOR_WINDOW)
      ;         _get_colors_( )\focus         = GetSysColor_(#COLOR_HIGHLIGHT)
      ;         _get_colors_( )\Gadget        = GetSysColor_(#COLOR_mENU)
      ;         _get_colors_( )\Button        = GetSysColor_(#COLOR_3DLIGHT)
      ;         _get_colors_( )\Border        = GetSysColor_(#COLOR_WINDOWFRAME)
      ;         _get_colors_( )\WordColor     = GetSysColor_(#COLOR_HOTLIGHT)
      ;         _get_colors_( )\Highlight     = GetSysColor_(#COLOR_HIGHLIGHT)
      ;         _get_colors_( )\HighlightText = GetSysColor_(#COLOR_HIGHLIGHTTEXT)
      ;
      ;       CompilerCase #PB_OS_MacOS
      ;         _get_colors_( )\Front         = OSX_NSColorToRGBa(CocoaMessage(0, 0, "NSColor textColor"))
      ;         ;_get_colors_( )\Back          = BlendColor_(OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor textBackgroundColor")), $FFFFFF, 80)
      ;         ;_get_colors_( )\back[2]      = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor keyboardFocusIndicatorColor"))
      ;         ;_get_colors_( )\Back         = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor windowBackgroundColor"))
      ;         _get_colors_( )\Back         = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor controlBackgroundColor"))
      ;         _get_colors_( )\frame         = OSX_NSColorToRGBa(CocoaMessage(0, 0, "NSColor grayColor"))
      ;         ;_get_colors_( )\back[2]       = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor selectedTextBackgroundColor"))
      ;         ;_get_colors_( )\front[2]      = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor selectedTextColor"))
      ;       CompilerCase #PB_OS_Linux
      ;
      ;     CompilerEndSelect ;}
      
      Procedure CreateIcon( img.l, Type.l )
         Protected X, Y, Pixel, size = 8, Index.i
         
         Index = CreateImage( img, size, size )
         If img = - 1 : img = Index : EndIf
         
         If StartDrawing( ImageOutput( img ))
            draw_box_( 0, 0, size, size, $fff0f0f0 );GetSysColor_( #COLOR_bTNFACE ))
            
            If Type = 1
               Restore img_arrow_down
               For Y = 0 To size - 1
                  For X = 0 To size - 1
                     Read.b Pixel
                     
                     If Pixel
                        Plot( X, Y, $000000 )
                     EndIf
                  Next X
               Next Y
               
            ElseIf Type = 2
               Restore img_arrow_down
               For Y = size - 1 To 0 Step - 1
                  For X = 0 To size - 1
                     Read.b Pixel
                     
                     If Pixel
                        Plot( X, Y, $000000 )
                     EndIf
                  Next X
               Next Y
            EndIf
            StopDrawing( )
         EndIf
         
         DataSection
            
            img_arrow_down:
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            
            
            ;       img_arrow_>:
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,1,1,1,0,0,0,0
            ;       Data.b 0,0,1,1,1,0,0,0
            ;       Data.b 0,0,0,1,1,1,0,0
            ;       Data.b 0,0,1,1,1,0,0,0
            ;       Data.b 0,1,1,1,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            
            ;       img_arrow_v:
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,1,0,0,0,1,0,0
            ;       Data.b 0,1,1,0,1,1,0,0
            ;       Data.b 0,1,1,1,1,1,0,0
            ;       Data.b 0,0,1,1,1,0,0,0
            ;       Data.b 0,0,0,1,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            ;
            ;       img_close
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,1,1,0,0,1,1,0
            ;       Data.b 0,1,1,1,1,1,1,0
            ;       Data.b 0,0,1,1,1,1,0,0
            ;       Data.b 0,0,1,1,1,1,0,0
            ;       Data.b 0,1,1,1,1,1,1,0
            ;       Data.b 0,1,1,0,0,1,1,0
            ;       Data.b 0,0,0,0,0,0,0,0
            
         EndDataSection
      EndProcedure
      
      Procedure.i Match( *value, Grid.i, Max.i = $7FFFFFFF )
         If Grid
            *value = Round(( *value / Grid ), #PB_Round_Nearest ) * Grid
            
            If *value > Max
               *value = Max
            EndIf
         EndIf
         
         ProcedureReturn *value
         ;   Procedure.i Match( *value.i, Grid.i, Max.i = $7FFFFFFF )
         ;     ProcedureReturn (( Bool( *value>Max ) * Max ) + ( Bool( Grid And *value<Max ) * ( Round(( *value/Grid ), #PB_round_nearest ) * Grid ) ))
      EndProcedure
      
      Procedure Draw_Datted( X, Y, Sourcecolor.l, Targetcolor.l )
         Static Len.b
         Protected Color,
                   Dot = mouse( )\selector\dotted,
                   Space.b = mouse( )\selector\dotspace,
                   line.b = mouse( )\selector\dotline
         
         ;             Dot = 1
         ;             Space = 4
         ;             line = 8
         
         If Len <= Bool(Dot) * (space + 1) + Space + line
            If Len <= Bool(Dot) * (space + 1) + Space
               If Len = Space
                  Color = SourceColor
               Else
                  Color = TargetColor
               EndIf
            Else
               Color = SourceColor
            EndIf
         Else
            If Space
               Color = TargetColor
            Else
               Color = SourceColor
            EndIf
            Len = 0
         EndIf
         
         Len + 1
         ProcedureReturn Color
      EndProcedure
      
      Procedure Draw_Plot( X, Y, SourceColor, TargetColor )
         Protected Color
         
         If (Y % 2 And Not X % 2) Or
            (X % 2 And Not Y % 2)
            
            Color = SourceColor
         Else
            Color = TargetColor
         EndIf
         
         ProcedureReturn Color
      EndProcedure
      
      Procedure GetMainParent( *this._s_WIDGET )
         Protected result
         Protected *parent._s_WIDGET
         
         If *this\parent
            *parent = *this\parent
            
            ;\\ get main parent
            While *parent
               If IsChild( *this, *parent )
                  If *parent\parent And
                     Not *parent\parent\parent
                     ; Debug "*parent "+*parent\class
                     result = *parent
                  EndIf
                  *parent = *parent\parent
               EndIf
            Wend
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      
      
      
      ;-
      ;-\\ DD
      ;-
      Procedure DropDraw( *this._s_WIDGET )
         Protected j = 5, s = j/2
         
         If mouse( )\drop
            ;\\ if you drag to the widget-dropped
            If is_scrollbars_( *this )
               *this = *this\parent
            EndIf
            
            If *this\enter > 0
               ;\\ first - draw backgraund color
               draw_mode_alpha_( #PB_2DDrawing_Default )
               If *this\drop And MouseEnter( *this )
                  If MouseEnter( *this )
                     If mouse( )\dragstart = #PB_Drag_Enter
                        draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $1000ff00 )
                        
                        If *this\row
                           draw_box_( *this\inner_x( )+5, mouse( )\y-s-1, *this\inner_width( )-10, j, $2000ff00 )
                        EndIf
                     Else
                        draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $10ff0000 )
                     EndIf
                     ;                   Else
                     ;                      draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $10ff0000 )
                  EndIf
               Else
                  If *this\press And MouseEnter( *this )
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $10ff00ff )
                  Else
                     draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $100000ff )
                  EndIf
               EndIf
               
               ;\\ second - draw frame color
               draw_mode_( #PB_2DDrawing_Outlined )
               If *this\drop And MouseEnter( *this )
                  If MouseEnter( *this )
                     If mouse( )\dragstart = #PB_Drag_Enter
                        draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ff00ff00 )
                        
                        If *this\row
                           draw_box_( *this\inner_x( )+5, mouse( )\y-s-1, *this\inner_width( )-10, j, $ff00ff00 )
                        EndIf
                     Else
                        draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ffff0000 )
                     EndIf
                     ;                   Else
                     ;                      draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $ffff0000 )
                  EndIf
               Else
                  If *this\press And MouseEnter( *this )
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ffff00ff )
                  Else
                     draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $ff0000ff )
                  EndIf
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.l DropX( )
         ProcedureReturn mouse( )\drop\x
      EndProcedure
      
      Procedure.l DropY( )
         ProcedureReturn mouse( )\drop\y
      EndProcedure
      
      Procedure.l DropWidth( )
         ProcedureReturn mouse( )\drop\width
      EndProcedure
      
      Procedure.l DropHeight( )
         ProcedureReturn mouse( )\drop\height
      EndProcedure
      
      Procedure.i DropType( )
         ; после того, как произошло событие ( event-DROP )
         ; эта функция возвращает формат отброшенных данных.
         ;   или ОС-специфичный ID для произвольного формата 
         ;   (Доп. информацию см. в описании функции DragOSFormats().) 
         ; возвращает одно из следующих значений 
         ; #PB_Drop_Text   : Перетащен текст.  (для получения текста воспользуйтесь функцией EventDropText() )
         ; #PB_Drop_image  : Перетащено изображение.  (для получения изображения воспользуйтесь функцией EventDropimage())
         ; #PB_Drop_Files  : Перетащены имена файлов. (для получения имён воспользуйтесь функцией EventDropFiles())
         ; #PB_Drop_Private: Завершена "внутренняя" операция. (чтобы узнать её тип, воспользуйтесь функцией EventDropPrivate())
         ProcedureReturn mouse( )\drop\format
      EndProcedure
      
      Procedure.i DropAction( )
         ; эта функция возвращает действие, которое следует выполнить с данными.
         ; после того, как произошло событие ( event-DROP )
         ProcedureReturn mouse( )\drop\actions
      EndProcedure
      
      Procedure.i DropPrivate( )
         ; эта функция возвращает 'PrivateType', который был сброшен.
         ; после того, как произошло событие ( event-DROP ) с форматом #PB_Drop_Private (формат можно получить с помощью DropType( ))
         ProcedureReturn mouse( )\drop\private
      EndProcedure
      
      Procedure.s DropFiles( )
         ; эта функция возвращает имена файлов, который был сброшен.
         ; после того, как произошло событие ( event-DROP ) с форматом #PB_Drop_Files (формат можно получить с помощью DropType( ))
         ; ProcedureReturn mouse( )\drop\files\s
      EndProcedure
      
      Procedure.s DropText( )
         ; эта функция возвращает текст, который был сброшен.
         ; после того, как произошло событие ( event-DROP ) с форматом #PB_Drop_Text (формат можно получить с помощью DropType( ))
         ProcedureReturn mouse( )\drop\string
      EndProcedure
      
      Procedure.i DropImage( img.i = #PB_Any, Depth.i = 24 )
         ; эта функция возвращает изображения, который был сброшен.
         ; после того, как произошло событие ( event-DROP ) с форматом #PB_Drop_image (формат можно получить с помощью DropType( ))
         If mouse( )\drop\imageID
            If img = #PB_Any
               img = CreateImage( #PB_Any, DropWidth( ), DropHeight( ) )
            EndIf
            
            If IsImage( img ) And
               StartDrawing( ImageOutput( img ))
               If Depth = 32
                  DrawAlphaImage( mouse( )\drop\imageID, 0, 0 )
               Else
                  DrawImage( mouse( )\drop\imageID, 0, 0 )
               EndIf
               StopDrawing( )
               
               ProcedureReturn 1
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i EnableDrop( *this._s_WIDGET, Format.l, Actions.b, PrivateType.i = 0 )
         ;                        ; windows ;    macos   ; linux ;
         ; Формат = Format
         ; #PB_Drop_Text          ; = 1     ; 1413830740 ; -1    ; Accept text on this widget
         ; #PB_Drop_image         ; = 8     ; 1346978644 ; -2    ; Accept images on this widget
         ; #PB_Drop_Files         ; = 15    ; 1751544608 ; -3    ; Accept filenames on this widget
         ; #PB_Drop_Private       ; = 512   ; 1885499492 ; -4    ; Accept a "private" Drag & Drop on this gadgetProtected Result.i
         
         ; Действие & Actions
         ; #PB_Drag_None          ; = 0     ; 0          ; 0     ; The Data format will Not be accepted on the widget
         ; #PB_Drag_Copy          ; = 1     ; 1          ; 2     ; The Data can be copied
         ; #PB_Drag_Move          ; = 2     ; 16         ; 4     ; The Data can be moved
         ; #PB_Drag_Link          ; = 4     ; 2          ; 8     ; The Data can be linked
         
         ; SetDragCallback( )
         ; "Состояние" указывает текущее состояние операции перетаскивания и имеет одно из следующих значений:
         ; #PB_Drag_Enter         ; = 1     ; 1          ; 1     ; Мышь вошла внутр (объекта).
         ; #PB_Drag_Update        ; = 2     ; 2          ; 2     ; Мышь была перемещена внутри (объекта) или изменено предполагаемое действие.
         ; #PB_Drag_Leave         ; = 3     ; 3          ; 3     : Мышь покинула (объект) (Формат, Действие, x, y здесь равны 0)
         ; #PB_Drag_Finish        ; = 4     ; 4          ; 4     : Перетаскивание завершено.
         ;
         If IsGadget(*this)
            ProcedureReturn PB(EnableGadgetDrop)(*this, Format, Actions, PrivateType )
         EndIf
         
         If Not *this\drop
            ;Debug "Enable dropped - " + *this\class
            *this\drop.allocate( DROP )
         EndIf
         
         *this\drop\format  = Format
         *this\drop\actions = Actions
         *this\drop\private = PrivateType
      EndProcedure
      
      Procedure.i DragDropText( Text.s, Actions.b = #PB_Drag_Copy )
         ;Debug "  drag text - " + Text
         
         If Not mouse( )\drop
            mouse( )\drop.allocate( DROPMOUSE )
         EndIf
         mouse( )\drop\format  = #PB_Drop_Text
         mouse( )\drop\actions = Actions
         mouse( )\drop\string  = Text
         
         SetCursor( #PB_All, cursor::#__cursor_Drag )
         ProcedureReturn mouse( )\drop
      EndProcedure
      
      Procedure.i DragDropImage( img.i, Actions.b = #PB_Drag_Copy )
         ;Debug "  drag img - " + img
         
         If Not mouse( )\drop
            mouse( )\drop.allocate( DROPMOUSE )
         EndIf
         mouse( )\drop\format  = #PB_Drop_Image
         mouse( )\drop\actions = Actions
         
         If IsImage( img )
            mouse( )\drop\imageID = ImageID( img )
            mouse( )\drop\width   = ImageWidth( img )
            mouse( )\drop\height  = ImageHeight( img )
         EndIf
         
         SetCursor( #PB_All, cursor::#__cursor_Drag )
         ProcedureReturn mouse( )\drop
      EndProcedure
      
      Procedure.i DragDropFiles( Files.s, Actions.b = #PB_Drag_Copy )
         ;         ;Debug "  drag files - " + Files
         ;
         ;         If Not mouse( )\drop
         ;           mouse( )\drop.allocate( DROPMOUSE )
         ;         EndIf
         ;         mouse( )\drop\format  = #PB_Drop_Files
         ;         mouse( )\drop\actions = Actions
         ;         mouse( )\drop\files  = Files
         
         SetCursor( #PB_All, cursor::#__cursor_Drag )
         ProcedureReturn mouse( )\drop
      EndProcedure
      
      Procedure.i DragDropPrivate( PrivateType.i, Actions.b = #PB_Drag_Copy )
         ; Debug "  drag PrivateType - " + PrivateType +" - Actions - "+ Actions
         
         If Not mouse( )\drop
            mouse( )\drop.allocate( DROPMOUSE )
         EndIf
         mouse( )\drop\format  = #PB_Drop_Private
         mouse( )\drop\actions = Actions
         mouse( )\drop\private = PrivateType
         
         SetCursor( #PB_All, cursor::#__cursor_Drag )
         ProcedureReturn mouse( )\drop
      EndProcedure
      
      ;-
      ;-\\  ANCHORs
      ;-
      Macro a_draw( _this_, _state_ )
         ; Debug "a_draw "+_this_\class +" "+ _this_\anchors +" "+ _this_\anchors\mode
         If Not _this_\anchors\mode & #__a_nodraw = #__a_nodraw; 
            draw_mode_alpha_( #PB_2DDrawing_Outlined )
            
            ; draw a_object frame 
            If _this_\anchors
               If _this_\anchors\id[0] 
                  draw_box_( _this_\anchors\id[0]\x, _this_\anchors\id[0]\y, _this_\anchors\id[0]\width, _this_\anchors\id[0]\height , a_anchors( )\framecolor[Bool(a_index( )) * _state_] ) 
               EndIf
               
               ; draw lines
               If _this_ = a_focused( )
                  ;\\ left line
                  If a_anchors( )\line[#__a_line_left]
                     If Not ( _this_\anchors\id[#__a_moved] And a_anchors( )\line[#__a_line_left]\y = _this_\frame_y( ) And a_anchors( )\line[#__a_line_left]\height = _this_\frame_height( ))
                        draw_box_( a_anchors( )\line[#__a_line_left]\x, a_anchors( )\line[#__a_line_left]\y, a_anchors( )\line[#__a_line_left]\width, a_anchors( )\line[#__a_line_left]\height , a_anchors( )\framecolor[1] )
                     EndIf
                  EndIf
                  
                  ;\\ top line
                  If a_anchors( )\line[#__a_line_top]
                     If Not ( _this_\anchors\id[#__a_moved] And a_anchors( )\line[#__a_line_top]\y = _this_\frame_y( ) And a_anchors( )\line[#__a_line_top]\height = _this_\frame_height( ))
                        draw_box_( a_anchors( )\line[#__a_line_top]\x, a_anchors( )\line[#__a_line_top]\y, a_anchors( )\line[#__a_line_top]\width, a_anchors( )\line[#__a_line_top]\height , a_anchors( )\framecolor[2] )
                     EndIf
                  EndIf
                  
                  ;\\ right line
                  If a_anchors( )\line[#__a_line_right]
                     If Not ( _this_\anchors\id[#__a_moved] And a_anchors( )\line[#__a_line_right]\x = _this_\frame_x( ) And a_anchors( )\line[#__a_line_right]\width = _this_\frame_width( ))
                        draw_box_( a_anchors( )\line[#__a_line_right]\x, a_anchors( )\line[#__a_line_right]\y, a_anchors( )\line[#__a_line_right]\width, a_anchors( )\line[#__a_line_right]\height , a_anchors( )\framecolor[1] )
                     EndIf
                  EndIf
                  
                  ;\\ bottom line
                  If a_anchors( )\line[#__a_line_bottom]
                     If Not ( _this_\anchors\id[#__a_moved] And a_anchors( )\line[#__a_line_bottom]\x = _this_\frame_x( ) And a_anchors( )\line[#__a_line_bottom]\width = _this_\frame_width( ))
                        draw_box_( a_anchors( )\line[#__a_line_bottom]\x, a_anchors( )\line[#__a_line_bottom]\y, a_anchors( )\line[#__a_line_bottom]\width, a_anchors( )\line[#__a_line_bottom]\height , a_anchors( )\framecolor[2] )
                     EndIf
                  EndIf
               EndIf
               
               draw_mode_alpha_( #PB_2DDrawing_Default )
               
               ;\\ draw background anchors
               If _this_\anchors\id[#__a_left] :draw_box_( _this_\anchors\id[#__a_left]\x, _this_\anchors\id[#__a_left]\y, _this_\anchors\id[#__a_left]\width, _this_\anchors\id[#__a_left]\height ,a_anchors( )\backcolor[Bool(a_index( ) = #__a_left)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_top] :draw_box_( _this_\anchors\id[#__a_top]\x, _this_\anchors\id[#__a_top]\y, _this_\anchors\id[#__a_top]\width, _this_\anchors\id[#__a_top]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_top)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_right] :draw_box_( _this_\anchors\id[#__a_right]\x, _this_\anchors\id[#__a_right]\y, _this_\anchors\id[#__a_right]\width, _this_\anchors\id[#__a_right]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_right)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_bottom] :draw_box_( _this_\anchors\id[#__a_bottom]\x, _this_\anchors\id[#__a_bottom]\y, _this_\anchors\id[#__a_bottom]\width, _this_\anchors\id[#__a_bottom]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_bottom)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_left_top] :draw_box_( _this_\anchors\id[#__a_left_top]\x, _this_\anchors\id[#__a_left_top]\y, _this_\anchors\id[#__a_left_top]\width, _this_\anchors\id[#__a_left_top]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_left_top)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_right_top] :draw_box_( _this_\anchors\id[#__a_right_top]\x, _this_\anchors\id[#__a_right_top]\y, _this_\anchors\id[#__a_right_top]\width, _this_\anchors\id[#__a_right_top]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_right_top)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_right_bottom] :draw_box_( _this_\anchors\id[#__a_right_bottom]\x, _this_\anchors\id[#__a_right_bottom]\y, _this_\anchors\id[#__a_right_bottom]\width, _this_\anchors\id[#__a_right_bottom]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_right_bottom)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_left_bottom] :draw_box_( _this_\anchors\id[#__a_left_bottom]\x, _this_\anchors\id[#__a_left_bottom]\y, _this_\anchors\id[#__a_left_bottom]\width, _this_\anchors\id[#__a_left_bottom]\height , a_anchors( )\backcolor[Bool(a_index( ) = #__a_left_bottom)*_state_] ) : EndIf
               
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               
               ;\\ draw frame anchors
               If _this_\anchors\id[#__a_left] :draw_box_( _this_\anchors\id[#__a_left]\x, _this_\anchors\id[#__a_left]\y, _this_\anchors\id[#__a_left]\width, _this_\anchors\id[#__a_left]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_left)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_top] :draw_box_( _this_\anchors\id[#__a_top]\x, _this_\anchors\id[#__a_top]\y, _this_\anchors\id[#__a_top]\width, _this_\anchors\id[#__a_top]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_top)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_right] :draw_box_( _this_\anchors\id[#__a_right]\x, _this_\anchors\id[#__a_right]\y, _this_\anchors\id[#__a_right]\width, _this_\anchors\id[#__a_right]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_right)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_bottom] :draw_box_( _this_\anchors\id[#__a_bottom]\x, _this_\anchors\id[#__a_bottom]\y, _this_\anchors\id[#__a_bottom]\width, _this_\anchors\id[#__a_bottom]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_bottom)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_left_top] :draw_box_( _this_\anchors\id[#__a_left_top]\x, _this_\anchors\id[#__a_left_top]\y, _this_\anchors\id[#__a_left_top]\width, _this_\anchors\id[#__a_left_top]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_left_top)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_right_top] :draw_box_( _this_\anchors\id[#__a_right_top]\x, _this_\anchors\id[#__a_right_top]\y, _this_\anchors\id[#__a_right_top]\width, _this_\anchors\id[#__a_right_top]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_right_top)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_right_bottom] :draw_box_( _this_\anchors\id[#__a_right_bottom]\x, _this_\anchors\id[#__a_right_bottom]\y, _this_\anchors\id[#__a_right_bottom]\width, _this_\anchors\id[#__a_right_bottom]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_right_bottom)*_state_] ) : EndIf
               If _this_\anchors\id[#__a_left_bottom] :draw_box_( _this_\anchors\id[#__a_left_bottom]\x, _this_\anchors\id[#__a_left_bottom]\y, _this_\anchors\id[#__a_left_bottom]\width, _this_\anchors\id[#__a_left_bottom]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_left_bottom)*_state_] ) : EndIf
               ;
               If _this_\anchors\id[#__a_moved] And ( _this_\anchors\id[#__a_moved]\width <> _this_\anchors\id[0]\width And _this_\anchors\id[#__a_moved]\height <> _this_\anchors\id[0]\height )
                  draw_box_( _this_\anchors\id[#__a_moved]\x, _this_\anchors\id[#__a_moved]\y, _this_\anchors\id[#__a_moved]\width, _this_\anchors\id[#__a_moved]\height, a_anchors( )\framecolor[Bool(a_index( ) = #__a_moved)*_state_] )
               EndIf
            EndIf
         EndIf
      EndMacro
      
      Procedure a_grid_image( Steps = 5, line = 0, Color = 0, startx = 0, starty = 0 )
         If mouse()\steps < 2
            ProcedureReturn 0
         EndIf
         
         ;\\
         Steps - 1
         
         ;Steps = DPIScaled(Steps)
         Protected hDC, X, Y
         ExamineDesktops( )
         Protected Width = DesktopWidth( 0 )
         Protected Height = DesktopHeight( 0 )
         hDC = CreateImage( #PB_Any, Width, Height, 32, #PB_Image_Transparent )
         ;
         ;\\
         widget::StopDraw( )
         If StartDrawing( ImageOutput( hDC ))
            draw_mode_( #PB_2DDrawing_AllChannels )
            If Color = 0 : Color = $ff808080 : EndIf
            ;
            For X = startx To Width - 1
               For Y = starty To Height - 1
                  ;
                  If line
                     Line( X, 0, 1, Height, Color )
                     Line( 0, Y, Width, 1, Color )
                  Else
                     Box(X, Y, DPIScaled(1), DPIScaled(1), Color )
                  EndIf
                  ;
                  Y + Steps
               Next
               X + Steps
            Next
            ;
            StopDrawing( )
         EndIf
         
         ProcedureReturn hDC
      EndProcedure
      
      Procedure.i a_init( *this._s_WIDGET, grid_size.a = 7, grid_type.b = 0 )
         Protected i
         ;
         If Not *this\anchors
            *this\anchors.allocate( ANCHORS )
         EndIf
         ;
         a_main( ) = *this
         ;
         a_anchors( )\grid_type = grid_type
         If grid_size > 1
            mouse( )\steps = DPIScaled(grid_size)
         Else
            mouse( )\steps = 1
         EndIf
         ;
         If IsImage( a_anchors( )\grid_image )
            FreeImage( a_anchors( )\grid_image )
         EndIf
         If mouse( )\steps
            a_anchors( )\grid_image = a_grid_image( mouse( )\steps, a_anchors( )\grid_type, $FF000000 )
         EndIf
         ;
         a_anchors( )\framecolor[#__s_0] = $ff000000
         a_anchors( )\framecolor[#__s_1] = $ffFF0000
         a_anchors( )\framecolor[#__s_2] = $ff0000FF
         
         a_anchors( )\backcolor[#__s_0] = $ffFFFFFF
         a_anchors( )\backcolor[#__s_1] = $80FF0000
         a_anchors( )\backcolor[#__s_2] = $800000FF
         ;
         
      EndProcedure
      
      Procedure a_add( *this._s_WIDGET, mode )
         Structure _s_CURSORDATA
            cursor.i[#__a_moved+1]
         EndStructure
         
         Protected a_index
         Protected *CURSORDATA._s_CURSORDATA = ?CURSORDATA
         
         If *this\container < 3
            *this\bindresize = #True
         EndIf
         ; Debug "a_add "+*this\class
         For a_index = 0 To #__a_moved
            ; reset
            *this\anchors\id[a_index] = #Null
            a_anchors( )\cursor[a_index] = #Null
            
            ;
            If mode & #__a_height = 0 And
               mode & #__a_width = 0
               If a_index = #__a_left Or
                  a_index = #__a_top Or
                  a_index = #__a_right Or
                  a_index = #__a_bottom
                  Continue
               EndIf
            Else
               If mode & #__a_height = 0
                  If a_index = #__a_top Or
                     a_index = #__a_bottom
                     Continue
                  EndIf
               EndIf
               If mode & #__a_width = 0
                  If a_index = #__a_left Or
                     a_index = #__a_right
                     Continue
                  EndIf
               EndIf
            EndIf
            ;
            If mode & #__a_corner = 0
               If a_index = #__a_left_top Or
                  a_index = #__a_right_top Or
                  a_index = #__a_right_bottom Or
                  a_index = #__a_left_bottom
                  Continue
               EndIf
            EndIf
            ;
            If mode & #__a_position = 0
               If a_index = #__a_moved
                  Continue
               EndIf
            EndIf
            ;
            ; add
            *this\anchors\id.allocate( COORDINATE, [a_index] )
            a_anchors( )\cursor[a_index] = *CURSORDATA\cursor[a_index]
         Next a_index
         
         DataSection
            CURSORDATA:
            Data.i cursor::#__cursor_Default          ; 0
            Data.i cursor::#__cursor_Left             ; 1=#__a_left
            Data.i cursor::#__cursor_Up               ; 2=#__a_top
            Data.i cursor::#__cursor_Right            ; 3=#__a_right
            Data.i cursor::#__cursor_Down             ; 4=#__a_bottom
            Data.i cursor::#__cursor_LeftUp           ; 5=#__a_left_top
            Data.i cursor::#__cursor_RightUp          ; 6=#__a_right_top
            Data.i cursor::#__cursor_RightDown        ; 7=#__a_right_bottom
            Data.i cursor::#__cursor_LeftDown         ; 8=#__a_left_bottom
            Data.i cursor::#__cursor_Arrows           ; 9=#__a_moved
         EndDataSection
      EndProcedure
      
      Procedure a_group_show( *this._s_WIDGET, event )
         If event = #__event_Create Or
            event = #__event_LostFocus Or
            event = #__event_MouseLeave
            
            a_add( *this, #__a_Position|#__a_Corner )
         EndIf
         
         If event = #__event_Free Or
            event = #__event_Focus Or
            event = #__event_MouseEnter
            
            a_add( *this, *this\anchors\mode )
         EndIf
         
         If event = #__event_Create 
            a_anchors( )\backcolor[#__s_0] = $ff000000
         EndIf
         If event = #__event_Free
            a_anchors( )\backcolor[#__s_0] = $ffFFFFFF
         EndIf
         
         Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
      EndProcedure
      
      Procedure a_enter( *this._s_WIDGET, *data )
         Protected i, a_index
         
         If Not (*this And *this\parent And Not *this\parent\hide);
            ProcedureReturn 0
         EndIf
         
         ; at point index
         If *this\anchors  
            If is_atpoint_( *this, mouse( )\x, mouse( )\y, [#__c_draw] )
               For i = 1 To #__a_moved  
                  If *this\anchors\id[i] And
                     is_atpoint_( *this\anchors\id[i], mouse( )\x, mouse( )\y )
                     ;
                     a_index = i
                     Break
                  EndIf
               Next : i = 0
            EndIf
         EndIf
         ;
         If a_focused( ) And
            a_focused( )\anchors
            ;
            For i = 1 To #__a_moved  
               If a_focused( )\anchors\id[i] And
                  is_atpoint_( a_focused( )\anchors\id[i], mouse( )\x, mouse( )\y )
                  ;
                  *this   = a_focused( )
                  a_index = i
                  Break
               EndIf
            Next : i = 0
         EndIf
         
         ;
         ; leave from index
         If a_index( )  
            If *this\anchors And 
               *this\anchors\id[a_index( )] And 
               Not is_atpoint_( *this\anchors\id[a_index( )], mouse( )\x, mouse( )\y )
               ;
               If *this\anchors\state <> #__s_0
                  *this\anchors\state = #__s_0
                  ;
                  *this\root\repaint = 1
               EndIf
               ;
               a_index( ) = 0
               ;
               If MouseEnter( *this, - 1 )
                  If ( is_atpoint_( *this, mouse( )\x, mouse( )\y, [#__c_frame] ) And
                       is_atpoint_( *this, mouse( )\x, mouse( )\y, [#__c_draw] ))
                     
                     *this\enter = 1
                     DoEvents( *this, #__event_MouseEnter, #PB_All, @"[?+a_enter]" )
                  Else
                     *this\enter = 0
                  EndIf   
               EndIf
            EndIf
         EndIf
         
         ;
         If a_entered( ) <> *this
            If a_entered( )
               If a_entered( )\anchors\state <> #__s_0
                  a_entered( )\anchors\state = #__s_0
                  ;
                  a_entered( )\root\repaint = 1
               EndIf
               
               If MouseEnter( a_entered( ), - 1 )
                  a_entered( )\enter = 0
               EndIf
               
               If a_entered( )\anchors\group\show
                  If a_entered( ) <> a_focused( )
                     a_group_show( a_entered( ), #__event_MouseLeave )
                  EndIf
                  ; Debug "     a_hide group"+a_entered( )\class +" ["+ *data +"]"
               Else
                  If *data
                     ;   Debug "     a_hide "+a_entered( )\class +" ["+ *data +"]"
                  EndIf
               EndIf
            EndIf
            
            ;
            If *this\anchors And 
               *this\anchors\group\show
               ;
               If *this <> a_focused( )
                  a_group_show( *this, #__event_MouseEnter )
               EndIf
               ; Debug "    a_show group"+*this\class +" ["+ *data +"]"
            Else
               If *data
                  ;  Debug "    a_show "+*this\class +" ["+ *data +"]"
               EndIf
            EndIf
            
            a_entered( ) = *this
         EndIf
         
         ;
         ; set new entered anchors index state
         If a_index
            If *this\anchors\id[a_index]  
               If *this\anchors\state = #__s_0
                  *this\anchors\state = #__s_1
               EndIf
               ;
               If a_index( ) <> a_index
                  a_index( ) = a_index
                  ;
                  If *this\enter > 0
                     If *this = Entered( )
                        DoEvents( *this, #__event_MouseLeave, #PB_All, @"[?-a_leave]"  )
                     EndIf
                  EndIf   
                  ;
                  ChangeCursor( *this, a_anchors( )\cursor[a_index] )
                  *this\root\repaint = 1
                  *this\enter = - 1
               EndIf
            EndIf
            ; 
            ProcedureReturn *this
         EndIf
         
      EndProcedure
      
      Procedure a_free( *this._s_WIDGET )
         a_set( *this\parent )
         FreeStructure( *this\anchors )
         *this\anchors = #Null
      EndProcedure
      
      Procedure a_remove( *this._s_WIDGET )
         Protected a_index
         If *this\container < 3
            *this\bindresize = #False
         EndIf
         For a_index = 0 To #__a_moved
            If *this\anchors And
               *this\anchors\id[a_index]
               FreeStructure( *this\anchors\id[a_index] )
               *this\anchors\id[a_index] = #Null
            EndIf
         Next a_index
      EndProcedure
      
      Procedure a_align( *g._s_WIDGET, align )
         Protected.l X,Y,Width,Height
         Protected *parent._s_WIDGET
         
         If a_anchors( )\group\show
            If *g And *g\anchors\group\show
               X = *g\x[#__c_frame] 
               Y = *g\y[#__c_frame] 
               Width = *g\width[#__c_frame] 
               Height = *g\height[#__c_frame] 
               *parent = *g\parent
            Else
               *parent = a_main( )
               X = a_anchors( )\group\x
               Y = a_anchors( )\group\y
               Width = a_anchors( )\group\width
               Height = a_anchors( )\group\height
            EndIf 
            
            If *parent
               If StartEnum( *parent )
                  If widgets( )\anchors\group\show 
                     Select align
                        Case 1
                           Resize( widgets( ), (X-widgets( )\parent\x[#__c_inner]), #PB_Ignore, #PB_Ignore, #PB_Ignore, 0 )
                        Case 3
                           Resize( widgets( ), (X-widgets( )\parent\x[#__c_inner])+Width-widgets( )\width[#__c_frame], #PB_Ignore, #PB_Ignore, #PB_Ignore, 0 )
                        Case 2
                           Resize( widgets( ), #PB_Ignore, (Y-widgets( )\parent\y[#__c_inner]), #PB_Ignore, #PB_Ignore, 0 )
                        Case 4
                           Resize( widgets( ), #PB_Ignore, (Y-widgets( )\parent\y[#__c_inner])+Height-widgets( )\height[#__c_frame], #PB_Ignore, #PB_Ignore, 0 )
                           
                        Case 5
                           Resize( widgets( ), #PB_Ignore, #PB_Ignore, Width, #PB_Ignore, 0 )
                        Case 6
                           Resize( widgets( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, Height, 0 )
                           
                     EndSelect
                  EndIf
                  StopEnum( )
               EndIf
               
               a_update( *parent )
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i a_set( *this._s_WIDGET, mode.i = #PB_Default, size.l = #PB_Default, position.l = #PB_Default )
         Protected result
         ; Debug ""+*this\class
         ;
         If *this
            If *this\anchors
               If mode >= 0
                  *this\anchors\mode = mode
               EndIf
               ;
               If size >= 0
                  a_setsize( *this, size, #False )
               EndIf
               ;
               If position >= 0
                  a_setpos( *this, position, #False )
               EndIf
               ;
               ;\\
               If a_anchors( ) 
                  If a_focused( ) <> *this
                     If a_focused( )
                        If SetFocus( a_focused( ), #__s_0 )
                           If a_focused( )\anchors\group\show
                              a_group_show( a_focused( ), #__event_LostFocus )
                           EndIf
                           DoEvents( a_focused( ), #__event_LostFocus )
                        EndIf
                     EndIf
                     ; Debug "a_set focus " + *this\class 
                     ;
                     If a_anchors( )\grid_image
                        If a_focused( ) And a_focused( )\parent And a_focused( )\parent <> *this\parent 
                           SetBackgroundImage( a_focused( )\parent, 0 )
                        EndIf  
                        If *this\parent
                           If Not ( a_focused( ) And a_focused( )\parent = *this\parent )
                              SetBackgroundImage( *this\parent, a_anchors( )\grid_image )
                           EndIf
                        EndIf
                     EndIf
                     
                     ;
                     If *this = a_main( )
                        a_focused( ) = #Null
                        a_entered( ) = #Null
                        ;   Debug "a_reset "+*this\class
                     Else
                        ;   Debug "a_set "+*this\class
                        a_focused( ) = *this
                        ;
                        If SetFocus( *this, #__s_2 )
                           If *this\anchors\group\show
                              a_group_show( *this, #__event_Focus )
                           EndIf
                           DoEvents( *this, #__event_Focus )
                        EndIf
                     EndIf
                     ;
                     If Entered( ) And 
                        Entered( )\parent
                        ;
                        If Entered( )\anchors Or 
                           Entered( )\parent\anchors
                           ;
                           If GetActive( ) <> a_main( ) 
                              SetActive( a_main( ) )
                           EndIf
                        EndIf
                     EndIf
                     ;
                     result = *this
                  Else
                     ; update anchors size and position
                     Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                  EndIf
               EndIf
            EndIf
         EndIf
         ;
         ProcedureReturn result
      EndProcedure
      
      Procedure a_create( *this._s_WIDGET, mode )
         Protected a_index
         ;
         If Not *this\anchors
            *this\anchors.allocate( ANCHORS )
         EndIf 
         ;
         If *this\anchors
            *this\anchors\mode = mode 
            *this\anchors\size = DPIScaled(#__a_anchors_size)
            *this\anchors\pos = *this\anchors\size / 2
            ;
            a_add( *this, mode )
         EndIf 
         ;
         ProcedureReturn *this\anchors
      EndProcedure
      
      Procedure a_update( *this._s_WIDGET )
         ;
         a_anchors( )\group\x = *this\x+*this\width 
         a_anchors( )\group\y = *this\y+*this\height 
         a_anchors( )\group\width = 0
         a_anchors( )\group\height = 0
         ;
         If StartEnum( *this )
            If widgets( )\anchors\group\show
               If a_anchors( )\group\x > widgets( )\x[#__c_frame]
                  a_anchors( )\group\x = widgets( )\x[#__c_frame]
               EndIf
               If a_anchors( )\group\y > widgets( )\y[#__c_frame] 
                  a_anchors( )\group\y = widgets( )\y[#__c_frame] 
               EndIf
            EndIf
            StopEnum( )
         EndIf
         ;
         If StartEnum( *this )
            If widgets( )\anchors\group\show
               If a_anchors( )\group\width < (widgets( )\x[#__c_frame] + widgets( )\width[#__c_frame]) - a_anchors( )\group\x
                  a_anchors( )\group\width = (widgets( )\x[#__c_frame] + widgets( )\width[#__c_frame]) - a_anchors( )\group\x
               EndIf
               If a_anchors( )\group\height < (widgets( )\y[#__c_frame] + widgets( )\height[#__c_frame]) - a_anchors( )\group\y
                  a_anchors( )\group\height = (widgets( )\y[#__c_frame] + widgets( )\height[#__c_frame]) - a_anchors( )\group\y
               EndIf
            EndIf
            StopEnum( )
         EndIf
         
         ;
         ;\\
         If StartEnum( *this )
            If widgets( )\anchors And widgets( )\anchors\group\show
               ;
               widgets( )\anchors\group\x = widgets( )\x[#__c_container] 
               widgets( )\anchors\group\y = widgets( )\y[#__c_container]
               widgets( )\anchors\group\width = widgets( )\width[#__c_frame] 
               widgets( )\anchors\group\height = widgets( )\height[#__c_frame]
               
               
               ;                Define position = 0
               ;                a_setpos( widgets( ), position )
               
               ;                ;
               ;                a_size( widgets( )\anchors\id,
               ;                        widgets( )\anchors\size, 
               ;                        widgets( )\anchors\mode )
               ;                
               ;                ;
               ;                a_move( widgets( ),
               ;                        widgets( )\anchors\id,
               ;                        widgets( )\screen_x( ),
               ;                        widgets( )\screen_y( ),
               ;                        widgets( )\screen_width( ),
               ;                        widgets( )\screen_height( ) )
               
               Resize( widgets( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               
            EndIf
            StopEnum( )
         EndIf
         
      EndProcedure
      
      Procedure a_object( X.l, Y.l, Width.l, Height.l, Text.s, color.i, flag.q = #Null, framesize = 1 )
         ;framesize = 0
         Protected *this._s_WIDGET
         If Not Alpha(Color)
            Color = Color & $FFFFFF | 255 << 24
         EndIf
         ;
         ;*this._s_WIDGET = Text(X, Y, Width, Height, "", #__flag_nogadgets|#__flag_Transparent)
         *this._s_WIDGET = Container(X, Y, Width, Height, #__flag_nogadgets|#__flag_BorderLess) : *this\container = 0
         ;*this._s_WIDGET = Create( Opened( ), #PB_Compiler_Procedure, 0, X, Y, Width, Height, #Null$, 0, 0, 0, 0, 0, 0, 0 )
         
         If Text
            SetText( *this, Text)
         EndIf
         ;
         ;SetFrame( *this, framesize)
         *this\fs = framesize
         ;
         SetBackgroundColor( *this, Color)
         ;
         If framesize
            SetColor( *this, #__FrameColor, Color & $FFFFFF | 255 << 24)
         EndIf
         ;
         a_set( *this, #__a_full )
         ;
         ProcedureReturn *this
      EndProcedure
      
      Procedure a_doevents( *this._s_WIDGET, event.l )
         Protected mouse_x.l = mouse( )\x
         Protected mouse_y.l = mouse( )\y
         
         Static move_x, move_y, resize_x, resize_y, *after
         Protected i
         Protected.l mx, my, mw, mh
         Protected.l Px, Py, IsGrid = DPIScaled(Bool( mouse( )\steps > 1 ))
         
         Protected Text.s
         
         
         ;
         ;
         If event = #__event_Focus 
            If *this\anchors
               If Not *this\anchors\group\show 
                  If a_anchors( )\group\show 
                     a_anchors( )\group\show = #False
                     
                     ; reset show group anchors
                     If StartEnum( a_main( ) )
                        If widgets( )\anchors 
                           If widgets( )\anchors\group\show 
                              
                              Debug "reset f "+widgets( )\class +" "+ *this\class
                              widgets( )\anchors\group\show = #False
                              a_group_show( widgets( ), #__event_free )
                              
                           EndIf
                        EndIf
                        StopEnum( )
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         If event = #__event_Down
            If MouseButtons( ) & #PB_Canvas_LeftButton
               If *this\anchors
                  If Not *this\anchors\group\show 
                     If a_anchors( )\group\show 
                        a_anchors( )\group\show = #False
                        
                        ; reset show group anchors
                        If StartEnum( a_main( ) )
                           If widgets( )\anchors And
                              widgets( )\anchors\group\show 
                              
                              Debug "reset d "+widgets( )\class +" "+ *this\class
                              widgets( )\anchors\group\show = #False
                              a_group_show( widgets( ), #__event_free )
                              
                           EndIf
                           StopEnum( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;
         If event = #__event_Up
            If MouseButtons( ) & #PB_Canvas_LeftButton
               If *this\anchors
                  ; show group anchors
                  If Not a_anchors( )\group\show
                     If mouse( )\selector
                        If StartEnum( *this )
                           If widgets( )\anchors 
                              If widgets( )\anchors\group\show = #False
                                 If widgets( )\level = *this\level + 1
                                    If is_intersect_( widgets( ), mouse( )\selector, [#__c_frame] )
                                       
                                       Debug "set "+widgets( )\class
                                       a_anchors( )\group\show + 1
                                       widgets( )\anchors\group\show = #True
                                       
                                       a_group_show( widgets( ), #__event_Create )
                                       
                                    EndIf
                                 EndIf
                              EndIf
                           EndIf
                           StopEnum( )
                        EndIf
                     EndIf
                     
                     ;
                     If a_anchors( )\group\show > 1
                        a_anchors( )\group\show = 1
                     Else
                        a_anchors( )\group\show = 0
                        ; reset show group anchors
                        
                        
                        If StartEnum( *this )
                           If widgets( )\anchors And 
                              widgets( )\anchors\group\show 
                              
                              Debug "reset u "+widgets( )\class +" "+ *this\class
                              widgets( )\anchors\group\show = #False
                              a_group_show( widgets( ), #__event_free )
                              
                           EndIf
                           StopEnum( )
                        EndIf
                     EndIf
                  EndIf
                  
                  ;
                  If a_anchors( )\group\show 
                     If *this\anchors\group\show 
                        a_update( *this\parent )
                     Else
                        a_update( *this )
                     EndIf
                  EndIf
                  
                  ;
                  If *this\anchors\id[a_index( )]
                     If is_atpoint_( *this\anchors\id[a_index( )], mouse_x, mouse_y )
                        *this\anchors\state = #__s_1
                     Else
                        *this\anchors\state = #__s_0
                     EndIf
                     ;
                     *this\root\repaint = 1
                  EndIf
                  
                  ;                  
                  If mouse( )\dragstart
                     If a_anchors( )\grid_image
                        If *this\parent And 
                           *this\parent\anchors
                           ;
                           SetBackgroundImage( *this, 0 )
                           SetBackgroundImage( *this\parent, a_anchors( )\grid_image )
                           ;
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;
         If event = #__event_DragStart
            If *this\anchors
               ;\\ change frame color
               If a_anchors( ) 
                  If mouse( )\selector
                     If mouse( )\selector\dotted 
                        mouse( )\selector\dotspace = DPIScaled(3)
                        mouse( )\selector\dotline  = DPIScaled(5)
                        
                        mouse( )\selector\backcolor  = $80DFE2E2
                     Else
                        mouse( )\selector\backcolor  = $9F646565
                     EndIf
                     ;
                     mouse( )\selector\fontcolor = $FF000000
                     mouse( )\selector\framecolor = $BA161616
                  EndIf
                  
                  ;\\
                  If *this\container > 0 And MouseEnter( *this )
                     If Not a_index( )
                        If a_anchors( )\grid_image
                           If *this\parent
                              SetBackgroundImage( *this\parent, 0 )
                           EndIf
                           SetBackgroundImage( *this, a_anchors( )\grid_image )
                        EndIf
                        
                        ;                      
                        ;                      If StartDraw( *this\root )
                        ;                         Drawing( )
                        ;                         
                        ;                         a_anchors( )\grab = GrabDrawingimage( #PB_Any, 0, 0, *this\root\width, *this\root\height )
                        ;                         
                        ;                         StopDraw( )
                        ;                      EndIf
                     EndIf
                  EndIf
                  
                  If a_index( ) = #__a_Moved
                     ChangeCursor( *this, #PB_Cursor_Arrows )
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;
         If event = #__event_MouseMove
            If a_index( ) And 
               *this\press And 
               *this\anchors\id[a_index( )] And 
               *this\anchors\state = #__s_2
               ;
               mw = #PB_Ignore
               mh = #PB_Ignore
               
               mx = mouse_x - mouse( )\press_x
               my = mouse_y - mouse( )\press_y
               
               If mouse( )\steps
                  mx + ( *this\inner_x( ) % mouse( )\steps ) 
                  my + ( *this\inner_y( ) % mouse( )\steps ) 
               EndIf
               
               If a_index( ) <> #__a_moved
                  ;\\ horizontal
                  Select a_index( )
                     Case #__a_left, #__a_left_top, #__a_left_bottom ; left
                        mw = (( *this\container_x( ) - mx ) + *this\container_width( )) - *this\parent\scroll_x( )
                        If mw <= 0
                           mx = ( *this\container_x( ) + *this\container_width( )) - *this\parent\scroll_x( )
                           mw      = 0
                        EndIf
                        If *this\fs
                           If *this\type <> #__type_window
                              mw + *this\fs * 2 + *this\fs[1] + *this\fs[3] ; ( *this\frame_width( ) - *this\inner_width( ) )
                           EndIf
                        EndIf
                        
                     Case #__a_right, #__a_right_top, #__a_right_bottom ; right
                        mw = ( mx - *this\container_x( ) ) + IsGrid
                  EndSelect
                  
                  ;\\ vertical
                  Select a_index( )
                     Case #__a_top, #__a_left_top, #__a_right_top ; top
                        mh = (( *this\container_y( ) - my ) + *this\container_height( )) - *this\parent\scroll_y( )
                        If mh <= 0
                           my = ( *this\container_y( ) + *this\container_height( )) - *this\parent\scroll_y( )
                           mh      = 0
                        EndIf
                        If *this\fs
                           If *this\type <> #__type_window
                              mh + *this\fs * 2 + *this\fs[2] + *this\fs[4] ; ( *this\frame_height( ) - *this\inner_height( ) )
                           EndIf
                        EndIf
                        
                     Case #__a_bottom, #__a_left_bottom, #__a_right_bottom ; bottom
                        mh = ( my - *this\container_y( ) ) + IsGrid
                  EndSelect
                  
                  ;\\
                  If a_index( ) <> #__a_left_top
                     If a_index( ) <> #__a_left And a_index( ) <> #__a_left_bottom
                        mx = #PB_Ignore
                     EndIf
                     If a_index( ) <> #__a_top And a_index( ) <> #__a_right_top
                        my = #PB_Ignore
                     EndIf
                  EndIf
               EndIf
               
               ;Debug " " + mw + " " + mh
               Protected mx1 = mx, my1 = my, mh1 = mh, mw1 = mw
               If *this\anchors\group\show
                  If StartEnum( *this\parent )
                     If widgets( )\anchors\group\show 
                        If mx1 <> #PB_Ignore
                           mx1 = mx+(widgets( )\anchors\group\x-*this\anchors\group\x)
                        EndIf
                        If my1 <> #PB_Ignore
                           my1 = my+(widgets( )\anchors\group\y-*this\anchors\group\y)
                        EndIf
                        If mw1 <> #PB_Ignore
                           mw1 = mw+(widgets( )\anchors\group\width-*this\anchors\group\width)
                        EndIf
                        If mh1 <> #PB_Ignore
                           mh1 = mh+(widgets( )\anchors\group\height-*this\anchors\group\height)
                        EndIf
                        ;
                        Resize( widgets( ), mx1, my1, mw1, mh1, 0 )
                     EndIf
                     StopEnum( )
                     ;
                     a_update( *this\parent )
                  EndIf
               Else
                  Resize( *this, mx1, my1, mw1, mh1, 0 )
               EndIf
               
            EndIf
            
         EndIf
         
         ; -\\ widget::a_key_events
         If event = #__event_KeyDown
            If *this = a_focused( )
               ; Debug "event_KeyDown "+*this\class
               If a_anchors( )\group\show
                  mx = a_anchors( )\group\x
                  my = a_anchors( )\group\y
                  mw = a_anchors( )\group\width
                  mh = a_anchors( )\group\height
               Else
                  If is_window_( *this )
                     mx = *this\container_x( )
                     my = *this\container_y( )
                     mw = *this\inner_width( )
                     mh = *this\inner_height( )
                  Else
                     mx = *this\container_x( )
                     my = *this\container_y( )
                     mw = *this\frame_width( )
                     mh = *this\frame_height( )
                  EndIf
               EndIf
               
               Select keyboard( )\Key[1]
                  Case (#PB_Canvas_Alt | #PB_Canvas_Control), #PB_Canvas_Shift
                     Select keyboard( )\Key
                        Case #PB_Shortcut_Left  : mw - mouse( )\steps : a_index( ) = #__a_right
                        Case #PB_Shortcut_Right : mw + mouse( )\steps : a_index( ) = #__a_right
                           
                        Case #PB_Shortcut_Up    : mh - mouse( )\steps : a_index( ) = #__a_bottom
                        Case #PB_Shortcut_Down  : mh + mouse( )\steps : a_index( ) = #__a_bottom
                     EndSelect
                     
                     Resize( *this, mx, my, mw, mh, 0 )
                     
                  Case (#PB_Canvas_Shift | #PB_Canvas_Control), #PB_Canvas_Alt ;, #PB_Canvas_Control, #PB_Canvas_Command, #PB_Canvas_Control | #PB_Canvas_Command
                     Select keyboard( )\Key
                        Case #PB_Shortcut_Left  : mx - mouse( )\steps : a_index( ) = #__a_moved
                        Case #PB_Shortcut_Right : mx + mouse( )\steps : a_index( ) = #__a_moved
                           
                        Case #PB_Shortcut_Up    : my - mouse( )\steps : a_index( ) = #__a_moved
                        Case #PB_Shortcut_Down  : my + mouse( )\steps : a_index( ) = #__a_moved
                     EndSelect
                     
                     Resize( *this, mx, my, mw, mh, 0 )
               EndSelect
            EndIf
         EndIf
         
         If *this\anchors
            If event = #__event_MouseEnter
               *this\root\repaint = 1
            EndIf
            
            If event = #__event_MouseLeave
               *this\root\repaint = 1
            EndIf
         EndIf
         
         ProcedureReturn *this\root\repaint
      EndProcedure
      
      
      
      ;-
      ;-  BARs
      ;-
      ; Farbaddition
      Procedure.i TabBarGadget_ColorPlus(Color.i, Plus.i) ; Code OK
         
         If Color & $FF + Plus & $FF < $FF
            Color + Plus & $FF
         Else
            Color | $FF
         EndIf
         If Color & $FF00 + Plus & $FF00 < $FF00
            Color + Plus & $FF00
         Else
            Color | $FF00
         EndIf
         If Color & $FF0000 + Plus & $FF0000 < $FF0000
            Color + Plus & $FF0000
         Else
            Color | $FF0000
         EndIf
         
         ProcedureReturn Color
         
      EndProcedure
      
      ; Farbsubtraktion
      Procedure.i TabBarGadget_ColorMinus(Color.i, Minus.i) ; Code OK
         
         If Color & $FF - Minus & $FF > 0
            Color - Minus & $FF
         Else
            Color & $FFFFFF00
         EndIf
         If Color & $FF00 - Minus & $FF00 > 0
            Color - Minus & $FF00
         Else
            Color & $FFFF00FF
         EndIf
         If Color & $FF0000 - Minus & $FF0000 > 0
            Color - Minus & $FF0000
         Else
            Color & $FF00FFFF
         EndIf
         
         ProcedureReturn Color
         
      EndProcedure
      
      
      Macro bar_in_start_( _bar_ )
         Bool( _bar_\area\pos >= _bar_\thumb\pos )
      EndMacro
      
      Macro bar_in_stop_( _bar_ )
         Bool( _bar_\thumb\pos >= _bar_\thumb\end ) 
      EndMacro
      
      ;       Macro bar_page_in_stop_( _bar_ )
      ;          Bool( _bar_\page\pos >= _bar_\page\end - _bar_\min[2] ) ;
      ;       EndMacro
      
      ;       Macro bar_page_in_start_( _bar_ )
      ;          Bool( _bar_\page\pos <= _bar_\min + _bar_\min[1] ) ;
      ;       EndMacro
      
      Macro bar_page_pos_( _bar_, _thumb_pos_ )
         ( _bar_\min + _bar_\min[2] + Round((( _thumb_pos_ ) - _bar_\area\pos ) / _bar_\percent, #PB_Round_Nearest ))
      EndMacro
      
      Macro bar_thumb_pos_( _bar_, _scroll_pos_ )
         ( Round((( _scroll_pos_ ) - _bar_\min ) * _bar_\percent, #PB_Round_Nearest ) - _bar_\min[1] )
      EndMacro
      
      Macro bar_invert_page_pos_( _bar_, _scroll_pos_ )
         ( Bool( Not _bar_\invert ) * ( _scroll_pos_ ) +
           Bool( _bar_\invert ) * ( _bar_\page\end - ( _scroll_pos_ - _bar_\min )) )
      EndMacro
      
      ;-
      Procedure.b bar_Update_DrawTabItems( *this._s_WIDGET, List *tabs._s_ITEMS( ) )
         With *this
            Protected Index
            Protected pos
            Protected separator_step 
            Protected._s_BAR *bar = *this\bar
            Protected._s_BUTTONS *BB1, *BB2, *SB
            ;
            *SB  = *bar\button
            *BB1 = *bar\button[1]
            *BB2 = *bar\button[2]
            ;
            If is_bar_( *this )
               separator_step = 0
               pos = DPIScaled(1) 
            EndIf
            If *this\parent And *this\parent\type = #__type_Panel
               pos = bar_toggle_line_size
            EndIf
            ;
            Protected layout = pos * 2
            Protected text_pos = DPIScaled(6)
            Protected img_pos = DPIScaled(3)
            Protected childrens.b, qqq = DPIScaled(40)
            ;
            If Not *this\hide 
               If *this\TabChange( ) Or *this\ResizeChange( )
                  *bar\max = 0
                  *this\scroll_width( ) = 0
                  *this\scroll_height( ) = 0
                  *this\picture\x = ( *this\screen_height( ) - DPIScaled(16) - pos - DPIScaled(1) ) / 2
                  
                  ;
                  If *bar\vertical
                     If *this\type = #__type_popupbar
                        ForEach *tabs( )
                           If *tabs( )\hide
                              Continue
                           EndIf
                           ;
                           draw_font( *tabs( ), GetFontID( *this ), *this\TextChange( ))
                           
                           ; init items position
                           If *bar\vertical
                              If *this\scroll_width( ) < qqq+*tabs( )\text\width 
                                 *this\scroll_width( ) = qqq+*tabs( )\text\width
                                 
                                 If constants::BinaryFlag( *this\flag, #__flag_BarInlineText )
                                    *this\scroll_width( ) + *tabs( )\picture\width 
                                 EndIf
                              EndIf
                              If *tabs( )\childrens 
                                 childrens = #True
                              EndIf
                           EndIf
                        Next
                        If childrens
                           *this\scroll_width( ) + DPIScaled(15)
                        EndIf
                     Else
                        *this\scroll_width( ) = *this\screen_width( ) 
                     EndIf
                  Else
                     *this\scroll_height( ) = *this\screen_height( )
                  EndIf
                  
                  ;
                  ForEach *tabs( )
                     If *tabs( )\hide
                        Continue
                     EndIf
                     
                     ;\\
                     draw_font( *tabs( ), GetFontID( *this ), *this\TextChange( ))
                     
                     Index = ListIndex( *tabs( ) )
                     
                     ; init items position
                     If *bar\vertical
                        *tabs( )\height = 0
                        *tabs( )\y = *bar\max + pos
                        
                        If *this\type = #__type_TabBar
                           If *this\TabState( ) = Index
                              *tabs( )\x        = - Bool( *this\parent\fs[3] )
                              *tabs( )\width    = *this\screen_width( )
                           Else
                              *tabs( )\x       = Bool( *this\parent\fs[3] ) + Bool( *this\parent\fs[1] ) * bar_toggle_line_size
                              *tabs( )\width  = *this\screen_width( ) - bar_toggle_line_size - DPIScaled(1) - 1
                           EndIf
                           
                        Else
                           *tabs( )\x             = pos
                           If *tabs( )\tindex  = #PB_Ignore
                              *tabs( )\x          + 3
                           EndIf
                           
                           *tabs( )\width  = *this\scroll_width( ) - *tabs( )\x * 2
                        EndIf
                        
                        If *tabs( )\tindex  = #PB_Ignore
                           *tabs( )\y      + separator_step
                           *tabs( )\height = 1
                           *bar\max         + separator_step * 2
                        Else
                           If *tabs( )\picture\height
                              *tabs( )\height = *tabs( )\picture\height
                           EndIf
                           If *tabs( )\text\height
                              If constants::BinaryFlag( *this\flag, #__flag_BarInlineText )
                                 If Not *tabs( )\picture\height 
                                    *tabs( )\height = *tabs( )\text\height
                                 EndIf
                              Else
                                 *tabs( )\height + *tabs( )\text\height
                              EndIf
                           EndIf
                           
                           ;
                           *tabs( )\height + (6)
                           ;
                           If constants::BinaryFlag( *this\flag, #__flag_BarInlineText )
                              ;
                              ;                               *tabs( )\picture\x = *tabs( )\x + ( *tabs( )\width - *tabs( )\picture\width - *tabs( )\text\width ) / 2 
                              ;                               *tabs( )\text\x  = *tabs( )\picture\x + *tabs( )\picture\width + 5
                              Protected align_x = (5)
                              *tabs( )\picture\x = *tabs( )\x + align_x
                              *tabs( )\text\x  = *tabs( )\picture\x + *tabs( )\picture\width + align_x + (5)
                              
                              ;
                              *tabs( )\picture\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\picture\height )/2
                              *tabs( )\text\y  = *tabs( )\y + ( *tabs( )\height - *tabs( )\text\height )/2
                              ;                          
                           Else
                              If *tabs( )\text\width
                                 *tabs( )\picture\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\picture\height - *tabs( )\text\height ) / 2
                              Else
                                 *tabs( )\picture\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\picture\height ) / 2
                              EndIf
                              ;
                              *tabs( )\text\y  = *tabs( )\picture\y + *tabs( )\picture\height
                              ;
                              *tabs( )\picture\x = *tabs( )\x + ( *tabs( )\width - *tabs( )\picture\width )/2
                              *tabs( )\text\x  = *tabs( )\x + ( *tabs( )\width - *tabs( )\text\width )/2
                           EndIf
                        EndIf
                        
                        ;
                        If *this\type = #__type_TabBar
                           *bar\max + *tabs( )\height + DPIScaled(Bool( Index <> *this\countitems - 1 )) + Bool( Index = *this\countitems - 1 ) * layout
                        Else
                           *bar\max + *tabs( )\height + pos + Bool( Index = *this\countitems - 1 )
                        EndIf
                     Else
                        *tabs( )\width = 0
                        *tabs( )\x = *bar\max + pos
                        ;
                        If *this\type = #__type_TabBar
                           If *this\TabState( ) = Index
                              *tabs( )\y       = - (Bool( *this\parent\fs[4] ))
                              *tabs( )\height  = *this\screen_height( )
                           Else
                              *tabs( )\y       = Bool( *this\parent\fs[4] ) + Bool( *this\parent\fs[2] ) * bar_toggle_line_size
                              *tabs( )\height  = *this\screen_height( ) - bar_toggle_line_size - DPIScaled(1) - 1
                           EndIf
                           
                        Else
                           *tabs( )\y       = pos
                           If *tabs( )\tindex  = #PB_Ignore
                              *tabs( )\y      + 3
                           EndIf
                           
                           *tabs( )\height  = *this\scroll_height( ) - *tabs( )\y * 2
                        EndIf
                        ;
                        If *tabs( )\tindex  = #PB_Ignore
                           *tabs( )\x      + separator_step
                           *tabs( )\width  = 1
                           *bar\max + *tabs( )\width + pos + (separator_step * 2)
                        Else
                           ;
                           *this\text\y = ( *tabs( )\height - *tabs( )\text\height ) / 2
                           ;
                           *tabs( )\picture\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\picture\height ) / 2
                           *tabs( )\text\y  = *tabs( )\y + *this\text\y
                           
                           ;
                           *tabs( )\picture\x = *tabs( )\x + Bool( *tabs( )\picture\width ) * img_pos
                           *tabs( )\text\x  = text_pos + *tabs( )\picture\x + *tabs( )\picture\width
                           
                           ;
                           *tabs( )\width = (Bool( *tabs( )\text\width ) * ( text_pos * 2 ) + *tabs( )\text\width +
                                             Bool( *tabs( )\picture\width ) * ( img_pos * 2 ) + *tabs( )\picture\width) - Bool( *tabs( )\picture\width And *tabs( )\text\width ) * ( text_pos )
                           
                           If *this\type = #__type_TabBar
                              *bar\max + *tabs( )\width + DPIScaled(Bool( Index <> *this\countitems - 1 )) + Bool( Index = *this\countitems - 1 ) * layout
                              ;*bar\max + *tabs( )\width + pos + Bool( index = *this\countitems - 1 )
                           Else
                              If Not constants::BinaryFlag( *this\flag, #__flag_BarInlineText )
                                 If *tabs( )\text\width
                                    If *tabs( )\width > *tabs( )\picture\width 
                                       *tabs( )\width - *tabs( )\picture\width 
                                    EndIf
                                    ;
                                    *tabs( )\picture\y = *tabs( )\y + ( *tabs( )\height - *tabs( )\picture\height - *tabs( )\text\height ) / 2
                                    *tabs( )\text\y  = *tabs( )\picture\y + *tabs( )\picture\height
                                    ;
                                    *tabs( )\picture\x = *tabs( )\x + ( *tabs( )\width - *tabs( )\picture\width )/2
                                    *tabs( )\text\x  = *tabs( )\x + ( *tabs( )\width - *tabs( )\text\width )/2
                                 EndIf
                              EndIf
                              
                              *bar\max + *tabs( )\width + pos + Bool( Index = *this\countitems - 1 )
                           EndIf
                        EndIf
                     EndIf
                  Next
                  
                  ;
                  If *bar\vertical
                     *this\scroll_height( ) = *bar\max
                  Else
                     *this\scroll_width( ) = *bar\max
                  EndIf
                  ;
                  bar_Update( *this, #True )
                  
                  *this\TabChange( ) = #False
                  *this\ResizeChange( ) = 0
               EndIf
               
               ;
               ; drawin
               ;
               If *bar\vertical
                  *BB2\x = *this\frame_x( ) + ( *this\frame_width( ) + pos - *BB2\size ) / 2
                  *BB1\x = *this\frame_x( ) + ( *this\frame_width( ) + pos - *BB1\size ) / 2
               Else
                  *BB2\y = *this\frame_y( ) + ( *this\frame_height( ) + pos - *BB2\size ) / 2
                  *BB1\y = *this\frame_y( ) + ( *this\frame_height( ) + pos - *BB1\size ) / 2
               EndIf
               
            EndIf
         EndWith
      EndProcedure
      
      ;-
      Macro bar_draw_item_( _vertical_, _address_, _x_, _y_, _state_, _round_, _flag_ = 1 )
         ; Draw back
         If _flag_ = 1
            draw_mode_alpha_( #PB_2DDrawing_Gradient )
            __draw_gradient( 0, _address_, _x_, _y_, _state_, _round_ )
         EndIf
         ;
         ; Draw items img
         If _address_\picture\imageID
            draw_mode_alpha_( #PB_2DDrawing_Transparent )
            DrawAlphaImage( _address_\picture\imageID, _x_ + _address_\picture\x, _y_ + _address_\picture\y, _address_\color\ialpha )
         EndIf
         ;
         ; Draw items text
         If _address_\text\string
            draw_mode_alpha_( #PB_2DDrawing_Transparent )
            DrawText( _x_ + _address_\text\x, _y_ + _address_\text\y, _address_\text\string, _address_\color\front[_state_] & $FFFFFF | _address_\AlphaState24( ) )
         EndIf
         
         If _vertical_ > 0
            If _address_\childrens
               DrawText( _x_ + _address_\width - DPIScaled(15), _y_ + _address_\text\y, ">", _address_\color\front[_state_] & $FFFFFF | _address_\AlphaState24( ) )
            EndIf
         EndIf
         ;          
         ; Draw frame
         If _flag_ = 1
            draw_mode_alpha_( #PB_2DDrawing_Outlined )
            draw_roundbox_( _x_ + _address_\x, _y_ + _address_\y, _address_\width, _address_\height, _round_, _round_, _address_\color\frame[_state_] & $FFFFFF | _address_\AlphaState24( ) )
         EndIf
         
         ;\\ draw disable state
         If _address_\disable
            ; Debug "disable item"
            draw_mode_alpha_( #PB_2DDrawing_Default )
            draw_box_(  _x_ + _address_\x, _y_ + _address_\y, _address_\width, _address_\height, $AAE4E4E4 )
         EndIf
      EndMacro
      
      Procedure bar_draw_tabitems( *this._s_WIDGET, vertical, X,Y, round, List *tabs._s_ITEMS( ) )
         Protected._s_BAR *bar = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         ; draw all visible items
         ForEach *tabs( )
            If *tabs( )\hide 
               *tabs( )\visible = 0
               Continue
            EndIf
            ;
            draw_font( *tabs( ), GetFontID( *this ), *this\TextChange( ))
            
            ; real visible items
            If vertical
               *tabs( )\visible = Bool( (( Y + *tabs( )\y + *tabs( )\height ) > *this\inner_y( ) And
                                         ( Y + *tabs( )\y ) < ( *this\inner_y( ) + *this\inner_height( ) ) ))
            Else
               *tabs( )\visible = Bool( (( X + *tabs( )\x + *tabs( )\width ) > *this\inner_x( ) And
                                         ( X + *tabs( )\x ) < ( *this\inner_x( ) + *this\inner_width( ) ) ))
            EndIf
            ;
            ; Draw separator
            ;no &~ entered &~ focused
            If *tabs( )\visible 
               If *tabs( )\tindex = #PB_Ignore
                  draw_roundbox_( X + *tabs( )\x, Y + *tabs( )\y, *tabs( )\width, *tabs( )\height, 0, 0, *tabs( )\color\frame[0] & $FFFFFF | *tabs( )\AlphaState24( ) )
               Else
                  If is_menu_( *this )
                     If constants::BinaryFlag( *this\flag, #__flag_BarInlineText )
                        If *tabs( )\picture\imageID
                           If *this\bar\vertical
                              draw_mode_alpha_( #PB_2DDrawing_Default )
                              draw_roundbox_(X + *tabs( )\x,
                                             Y + *tabs( )\y - Bool( ListIndex( *tabs( ) ))*3, 
                                             *tabs( )\picture\width + 10,
                                             *tabs( )\height + Bool( ListIndex( *tabs( ) ))*3 + Bool( ListIndex( *tabs( ) ) <> *this\countitems - 1 )*3, 
                                             *this\round, *this\round, $FFF0F0F0 )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
                  If *tabs( )\checked
                     bar_draw_item_( *this\bar\vertical, *tabs( ), X, Y, 2, round )
                  Else
                     If *tabs( ) <> *this\TabEntered( )
                        ; And Not (*tabs( ) <> *this\TabFocused( ) And *tabs( )\_focus) 
                        
                        ; Debug *this\parent\class
                        ;                     ;
                        ;Debug ""+*BB1\hide +" "+ Str( *BB1\x ) +" "+ Str( x + *tabs( )\x ) +" - "+ *SB\width
                        ;Debug ""+*BB2\hide +" "+ Str( *BB2\x ) +" "+ Str( x + *tabs( )\x )
                        ;                         
                        ;                         If (( *BB2\x + *BB2\width < x + *tabs( )\x ) Or ( *BB2\hide And *BB2\x + *BB2\width > x + *tabs( )\x )) Or
                        ;                            (( *BB1\x > x + *tabs( )\x + *tabs( )\width ) Or ( *BB1\hide And *BB1\x < x + *tabs( )\x + *tabs( )\width )) 
                        bar_draw_item_( *this\bar\vertical, *tabs( ), X, Y, 0, round, Bool( Not( is_bar_( *this ) And Not constants::BinaryFlag( *this\flag, #__flag_BarButtons ))) )
                        ;                         EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         Next
         ;
         ; draw mouse-enter visible item
         If *this\TabEntered( )
            If *this\TabEntered( )\_focus = 0 And
               *this\TabEntered( )\checked = 0 And
               *this\TabEntered( )\visible 
               ;
               If *this\TabEntered( )\tindex <> #PB_Ignore
                  draw_font( *this\TabEntered( ), GetFontID( *this ), *this\TextChange( ))
                  bar_draw_item_( *this\bar\vertical, *this\TabEntered( ), X, Y, *this\TabEntered( )\ColorState( ), round)
               EndIf
            EndIf
         EndIf
         
         ;
         ; draw key-focus visible item
         If *this\TabFocused( ) And
            *this\TabFocused( )\_focus And 
            *this\TabFocused( )\visible
            Protected._s_ITEMS *activeTAB = *this\TabFocused( )
            ;   
            If *activeTAB\tindex <> #PB_Ignore
               draw_font( *activeTAB, GetFontID( *this ), *this\TextChange( ))
               ;
               If is_integral_( *this )
                  If *this\parent
                     If Not *activeTAB\press
                        draw_mode_alpha_( #PB_2DDrawing_Default )
                        draw_roundbox_( X + *activeTAB\x,
                                        Y + *activeTAB\y,
                                        *activeTAB\width,
                                        *activeTAB\height,
                                        *this\round, *this\round,
                                        *this\parent\color\back )
                     EndIf
                  EndIf
                  
                  bar_draw_item_( *this\bar\vertical, *activeTAB, X, Y, 0, round, 0 )
                  
               Else
                  ;
                  bar_draw_item_( *this\bar\vertical, *activeTAB, X, Y, 2, round )
               EndIf
            EndIf
            
            ; draw focus-item frame
            If is_integral_( *this )
               If *this\parent
                  Protected color = *this\parent\color\frame
                  If *this\parent\focus = 2
                     color = *this\parent\color\frame[2]
                  EndIf
                  
                  If *bar\vertical
                     ;                   If *activeTAB And *activeTAB\_focus And 
                     ;                      *activeTAB\visible
                     If *this\parent\fs
                        Line( X + *activeTAB\x, Y + *activeTAB\y, *activeTAB\width - *activeTAB\x - Bool(*this\parent\fs[3]), 1, color )
                        Line( X + *activeTAB\x, Y + *activeTAB\y + *activeTAB\height - 1, *activeTAB\width - *activeTAB\x - Bool(*this\parent\fs[3]), 1, color )
                     EndIf
                     ; line on the selected item
                     If *this\parent\fs[1]
                        Box(X + *activeTAB\x, Y + *activeTAB\y, bar_toggle_line_size, *activeTAB\height, *this\parent\color\frame[2])
                     ElseIf *this\parent\fs[3]
                        Box(X + *activeTAB\x + *activeTAB\width-bar_toggle_line_size, Y + *activeTAB\y, bar_toggle_line_size, *activeTAB\height, *this\parent\color\frame[2])
                     EndIf
                     ;
                     If is_menu_( *this )
                        Line( X + *activeTAB\x + *activeTAB\width - 1, Y + *activeTAB\y, 1, *activeTAB\height, color )
                     EndIf
                     ;                   EndIf
                     ;
                     If *this\type = #__type_TabBar 
                        If *this\parent\fs
                           ;
                           If *this\parent\fs[1]
                              If *activeTAB
                                 ; horizontal tab bottom line
                                 Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ), 1, ( Y + *activeTAB\y ) - *this\frame_y( ), color ) 
                                 Line( *this\frame_x( ) + *this\frame_width( ) - 1, Y + *activeTAB\y + *activeTAB\height, 1, *this\frame_y( ) + *this\frame_height( ) - ( Y + *activeTAB\y + *activeTAB\height ), color )
                              Else
                                 Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ), 1, *this\frame_height( ), color )
                              EndIf
                           Else
                              Line( *this\parent\frame_x( ), *this\parent\frame_y( ), 1, *this\parent\frame_height( ), color )
                           EndIf
                           
                           ;
                           Line( *this\parent\inner_x( ) - 1, *this\parent\frame_y( ), *this\parent\inner_width( ) + 2, 1, color )
                           Line( *this\parent\inner_x( ) - 1, *this\parent\frame_y( ) + *this\parent\frame_height( ) - 1, *this\parent\inner_width( ) + 2, 1, color )
                           
                           If *this\parent\fs[3]
                              If *activeTAB 
                                 ; horizontal tab bottom line
                                 Line( *this\frame_x( ) - 1, *this\frame_y( ), 1, ( Y + *activeTAB\y ) - *this\frame_y( ), color ) 
                                 Line( *this\frame_x( ) - 1, Y + *activeTAB\y + *activeTAB\height, 1, *this\frame_y( ) + *this\frame_height( ) - ( Y + *activeTAB\y + *activeTAB\height ), color )
                              Else
                                 Line( *this\frame_x( ) - 1, *this\frame_y( ), 1, *this\frame_height( ), color )
                              EndIf
                           Else
                              Line( *this\parent\frame_x( ) + *this\parent\frame_width( ) - 1, *this\parent\frame_y( ), 1, *this\parent\frame_height( ), color )
                           EndIf
                        EndIf
                     EndIf
                     
                  Else
                     ;                   If *activeTAB And *activeTAB\_focus And 
                     ;                      *activeTAB\visible
                     If *this\parent\fs
                        Line( X + *activeTAB\x, Y + *activeTAB\y, 1, (*activeTAB\height - *activeTAB\y - Bool(*this\parent\fs[4])), color )
                        Line( X + *activeTAB\x + *activeTAB\width - 1, Y + *activeTAB\y, 1, (*activeTAB\height - *activeTAB\y - Bool(*this\parent\fs[4])), color )
                     EndIf
                     ; line on the selected item
                     If *this\parent\fs[2]
                        Box(X + *activeTAB\x, Y + *activeTAB\y, *activeTAB\width, bar_toggle_line_size, *this\parent\color\frame[2])
                     ElseIf *this\parent\fs[4]
                        Box(X + *activeTAB\x, Y + *activeTAB\y + *activeTAB\height-bar_toggle_line_size, *activeTAB\width, bar_toggle_line_size, *this\parent\color\frame[2])
                     EndIf
                     ;
                     If is_menu_( *this )
                        Line( X + *activeTAB\x, Y + *activeTAB\y + *activeTAB\height - 1, *activeTAB\width, 1, color )
                     EndIf
                     ;                   EndIf
                     ;
                     If *this\type = #__type_TabBar
                        If *this\parent\fs
                           ;
                           ; Line( *this\parent\frame_x( ), *this\parent\frame_y( ), *this\parent\frame_width( ), 1, color )
                           If *this\parent\fs[2]
                              If *activeTAB 
                                 ; horizontal tab bottom line
                                 Line( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - 1, ( X + *activeTAB\x ) - *this\frame_x( ), 1, color ) 
                                 Line( X + *activeTAB\x + *activeTAB\width, *this\frame_y( ) + *this\frame_height( ) - 1, *this\frame_x( ) + *this\frame_width( ) - ( X + *activeTAB\x + *activeTAB\width ), 1, color )
                              Else
                                 Line( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - 1, *this\frame_width( ), 1, color )
                              EndIf
                           Else
                              Line( *this\parent\inner_x( ), *this\parent\inner_y( ), *this\parent\inner_width( ), 1, color )
                           EndIf
                           
                           ;
                           Line( *this\parent\inner_x( ) - 1, *this\parent\inner_y( ) - 1, 1, *this\parent\inner_height( ) + 2, color )
                           ; Line( *this\parent\frame_x( ), *this\parent\frame_y( ) - 1, 1, *this\parent\frame_height( ) + 2, color )
                           
                           Line( *this\parent\inner_x( ) + *this\parent\inner_width( ), *this\parent\inner_y( ) - 1, 1, *this\parent\inner_height( ) + 2, color )
                           ; Line( *this\parent\frame_x( ) + *this\parent\frame_width( ) - 1, *this\parent\frame_y( ) - 1, 1, *this\parent\frame_height( ) + 2, color )
                           
                           ;
                           If *this\parent\fs[4]
                              If *activeTAB 
                                 ; horizontal tab bottom line
                                 Line( *this\frame_x( ), *this\frame_y( ) - 1, ( X + *activeTAB\x ) - *this\frame_x( ), 1, color ) 
                                 Line( X + *activeTAB\x + *activeTAB\width, *this\frame_y( ) - 1, *this\frame_x( ) + *this\frame_width( ) - ( X + *activeTAB\x + *activeTAB\width ), 1, color )
                              Else
                                 Line( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), 1, color )
                              EndIf
                           Else
                              Line( *this\parent\inner_x( ), *this\parent\inner_y( ) + *this\parent\inner_height( ), *this\parent\inner_width( ), 1, color )
                           EndIf
                           ; Line( *this\parent\frame_x( ), *this\parent\frame_y( ) + *this\parent\frame_height( ) - 1, *this\parent\frame_width( ), 1, color )
                        EndIf
                     EndIf
                     
                  EndIf
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.b bar_draw_tab( *this._s_WIDGET )
         Protected Color, X, Y
         Protected forecolor
         Protected backcolor
         
         With *this
            Protected._s_ITEMS *activeTAB = *this\TabFocused( )
            Protected._s_BAR *bar = *this\bar
            Protected._s_BUTTONS *BB1, *BB2, *SB
            If Not *bar
               ProcedureReturn 0
            EndIf
            
            *SB  = *bar\button
            *BB1 = *bar\button[1]
            *BB2 = *bar\button[2]
            
            ;\\
            If Not *this\hide And *this\AlphaState( )
               If is_integral_( *this )
                  If ChangeFontID( *this, CurrentFontID( ))
                  EndIf
               EndIf
               
               If *this\color\back <> - 1
                  ; Draw scroll bar background
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back & $FFFFFF | *this\AlphaState24( ) )
               EndIf
               ; ;                ;
               ; ;                If constants::BinaryFlag( *this\flag, #__flag_BarInlineText )
               ; ;                            *this\picture\width = 32 - 4
               ; ;                   draw_mode_alpha_( #PB_2DDrawing_Default )
               ; ;                   If *this\bar\vertical
               ; ;                      draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\picture\width, *this\screen_height( ), *SB\round, *SB\round, *this\color\frame & $FFFFFF | *this\AlphaState24( ) )
               ; ;                   Else
               ; ;                      draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\screen_width( ), *this\picture\height, *SB\round, *SB\round, *this\color\frame & $FFFFFF | *this\AlphaState24( ) )
               ; ;                   EndIf
               ; ;                EndIf
               ;
               ;\\
               bar_Update_DrawTabItems( *this, *this\__tabs( ) )
               ;
               X = *SB\x
               Y = *SB\y 
               
               bar_draw_tabitems( *this, *this\bar\vertical, X,Y, *SB\round, *this\__tabs( ) )
               
               ;
               ;\\
               Protected State_3, Color_frame
               color = $FF909090
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               
               ; draw lines
               If *this\type = #__type_TabBar
                  
                  ; TODO Navigation
                  Protected pf
                  If is_integral_( *this )
                     pf = *this\parent\bs
                     If *this\parent\parent
                        ;                         If is_root_( *this\parent\parent )
                        ;                            backcolor = $FFf0f0f0
                        ;                         Else
                        backcolor = *this\parent\parent\color\back[\parent\ColorState( )]
                        ;                         EndIf
                     Else
                        backcolor = *this\parent\color\back[\parent\ColorState( )]
                     EndIf
                     If Not backcolor
                        backcolor = *BB2\color\back[\ColorState( )]
                     EndIf
                  Else
                     If *this\parent\type = #__type_Splitter
                        backcolor = *this\root\color\back[\parent\ColorState( )]
                     Else
                        backcolor = *this\parent\color\back[\parent\ColorState( )]
                     EndIf
                  EndIf
                  
                  Protected fabe_pos, round = 0, button_size = 20, Size = 60+pf, fabe_out = Size - button_size
                  ;;backcolor = RGBA(64, 128, 192, 64)
                  ;backcolor = backcolor & $FFFFFF | 160 << 24 ;$ff00ff00
                  
                  draw_mode_alpha_( #PB_2DDrawing_Gradient )
                  ResetGradientColors( )
                  GradientColor( 0.0, backcolor & $FFFFFF )
                  GradientColor( 0.5, backcolor & $FFFFFF | 160 << 24 )
                  GradientColor( 1.0, backcolor & $FFFFFF | 255 << 24 )
                  
                  ;
                  If *bar\vertical
                     ; to top
                     If Not *BB2\hide
                        fabe_pos = *this\frame_y( ) + ( size ) - pf
                        LinearGradient( *this\frame_x( ) - pf, fabe_pos, *this\frame_x( ) - pf, fabe_pos - fabe_out )
                        draw_roundbox_( *this\frame_x( ) - pf, fabe_pos, *this\frame_width( ) + pf - 1, - Size, round, round )
                     EndIf
                     
                     ; to bottom
                     If Not *BB1\hide
                        fabe_pos = *this\frame_y( ) + *this\frame_height( ) - ( size ) + pf
                        LinearGradient( *this\frame_x( ) - pf, fabe_pos, *this\frame_x( ) - pf, fabe_pos + fabe_out )
                        draw_roundbox_( *this\frame_x( ) - pf, fabe_pos, *this\frame_width( ) + pf - 1 , Size, round, round )
                     EndIf
                  Else
                     ; to left
                     If Not *BB2\hide
                        fabe_pos = *this\frame_x( ) + ( size ) - pf
                        LinearGradient( fabe_pos, *this\frame_y( ) - pf, fabe_pos - fabe_out, *this\frame_y( ) - pf )
                        draw_roundbox_( fabe_pos, *this\frame_y( ) - pf, - Size, *this\frame_height( ) + pf - 1, round, round )
                     EndIf
                     
                     ; to right
                     If Not *BB1\hide
                        fabe_pos = *this\frame_x( ) + *this\frame_width( ) - ( size ) + pf
                        LinearGradient( fabe_pos, *this\frame_y( ) - pf, fabe_pos + fabe_out, *this\frame_y( ) - pf )
                        draw_roundbox_( fabe_pos, *this\frame_y( ) - pf, Size, *this\frame_height( ) + pf - 1 , round, round )
                     EndIf
                  EndIf
                  
                  ResetGradientColors( )
               EndIf
               
               ;\\
               __draw_navigator_button( *this )
               
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure.b bar_draw_scroll( *this._s_WIDGET )
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         With *this
            If test_resize_area
               ; Debug "  Draw scrolbar " + *this\class +" "+ *this\screen_x( )+" "+ *this\screen_y( ) +" "+ *this\screen_width( ) +" "+ *this\screen_height( )
            EndIf
            
            ;         Drawimage( imageiD( Upimg ), *BB1\x, *BB1\y )
            ;         Drawimage( imageiD( Downimg ), *BB2\x, *BB2\y )
            ;         ProcedureReturn
            
            If *this\AlphaState( )
               ; Draw scroll bar background
               If *this\color\back <> - 1
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  If is_integral_( *this )
                     If *bar\vertical
                        draw_box_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\parent\container_height( ), *this\color\back )
                     Else
                        draw_box_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ) - *this\round / 2, *this\inner_height( ), *this\color\back )
                     EndIf
                  Else
                     draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back )
                  EndIf
               EndIf
               
               ;
               __draw_navigator_button( *this )
               
               If *bar\thumb\len And *this\type <> #__type_Progress
                  ; Draw thumb
                  draw_mode_alpha_( #PB_2DDrawing_Gradient )
                  __draw_gradient(*bar\vertical, *SB, 0,0, *SB\ColorState( ))
                  
                  If *SB\arrow\type ;*this\type = #__type_Scroll
                     If *SB\arrow\size
                        draw_mode_alpha_( #PB_2DDrawing_Default )
                        __draw_arrows( *SB, *SB\arrow\direction )
                     EndIf
                  Else
                     ; Draw thumb lines
                     draw_mode_alpha_( #PB_2DDrawing_Default )
                     ;               FrontColor( *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                     ;               If *bar\vertical
                     ;                 Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 - DPIScaled(3), *SB\arrow\size, DPIScaled(1))
                     ;                 Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2, *SB\arrow\size, DPIScaled(1))
                     ;                 Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 + DPIScaled(3), *SB\arrow\size, DPIScaled(1))
                     ;               Else
                     ;                 Box(*SB\x + *SB\width / 2 - DPIScaled(3), *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size)
                     ;                 Box(*SB\x + *SB\width / 2, *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size)
                     ;                 Box(*SB\x + *SB\width / 2 + DPIScaled(3), *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size)
                     ;               EndIf
                     If *bar\vertical
                        Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 - DPIScaled(3), *SB\arrow\size, DPIScaled(1), *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                        Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2, *SB\arrow\size, DPIScaled(1), *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                        Box(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 + DPIScaled(3), *SB\arrow\size, DPIScaled(1), *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                     Else
                        Box(*SB\x + *SB\width / 2 - DPIScaled(3), *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size, *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                        Box(*SB\x + *SB\width / 2, *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size, *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                        Box(*SB\x + *SB\width / 2 + DPIScaled(3), *SB\y + (*SB\height - *SB\arrow\size ) / 2, DPIScaled(1), *SB\arrow\size, *SB\color\front[*SB\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                     EndIf
                     
                  EndIf
                  
                  ; Draw thumb frame
                  draw_mode_alpha_( #PB_2DDrawing_Outlined )
                  __draw_box(*SB, color\frame)
               EndIf
               
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure.b bar_draw_progress( *this._s_WIDGET )
         Macro DrawHLines( _start_x_, _start_y_, _stop_x_, _stop_y_ )
            For y1 = _start_y_ To _stop_y_
               For x1 = _start_x_ To _stop_x_
                  If Point( *this\frame_x( ) + x1, *this\frame_y( ) + y1 ) & $FFFFFF = _frame_color_ & $FFFFFF
                     Line( *this\frame_x( ) + x1, *this\frame_y( ) + y1, *this\frame_width( ) - x1 * 2, 1 )
                     Break
                  EndIf
               Next x1
            Next y1
         EndMacro
         
         Macro DrawVLines( _start_x_, _start_y_, _stop_x_, _stop_y_ )
            For x1 = _start_x_ To _stop_x_
               For y1 = _start_y_ To _stop_y_
                  If Point( *this\frame_x( ) + x1, *this\frame_y( ) + y1 ) & $FFFFFF = _frame_color_ & $FFFFFF
                     Line( *this\frame_x( ) + x1, *this\frame_y( ) + y1, 1, *this\frame_height( ) - y1 * 2 )
                     Break
                  EndIf
               Next y1
            Next x1
         EndMacro
         
         With *this
            Protected *bar._s_BAR = *this\bar
            
            
            Protected x1, y1, _position_, _frame_size_ = 1, _gradient_ = 1
            Protected _vertical_ = *bar\vertical
            Protected _reverse_ = *bar\invert
            Protected _round_ = *this\round
            Protected alpha = 230
            Protected _frame_color_ = $FF000000 ; *this\color\frame
            Protected _fore_color1_
            Protected _back_color1_
            Protected _fore_color2_
            Protected _back_color2_
            
            Protected state1 = Bool(Not *bar\invert) * #__s_2
            Protected state2 = Bool(*bar\invert) * #__s_2
            
            alpha         = 230
            _fore_color1_ = *this\color\fore[state1] & $FFFFFF | alpha << 24 ; $f0E9BA81 ;
            _back_color1_ = *this\color\back[state1] & $FFFFFF | alpha << 24 ; $f0E89C3D ;
            
            alpha - 15
            _fore_color2_ = *this\color\fore[state2] & $FFFFFF | alpha << 24 ; $e0F8F8F8 ;
            _back_color2_ = *this\color\back[state2] & $FFFFFF | alpha << 24 ; $e0E2E2E2 ;
            
            If _vertical_
               
               ;           if _reverse_
               ;             _position_ = *bar\thumb\pos
               ;           Else
               _position_ = *this\frame_height( ) - *bar\thumb\pos
               ;           EndIf
            Else
               ;           if _reverse_
               ;             _position_ = *this\frame_width( ) - *bar\thumb\pos
               ;           Else
               _position_ = *bar\thumb\pos
               ;           EndIf
               
            EndIf
            
            If _position_ < 0
               _position_ = 0
            EndIf
            
            ; Debug "_position_ "+_position_ +" "+ *bar\page\pos
            
            ; https://www.purebasic.fr/english/viewtopic.php?f=13&t=75757&p=557936#p557936 ; thank you x1nfratec
            ; FrontColor(_frame_color_) ; не работает
            draw_mode_alpha_(#PB_2DDrawing_Outlined)
            draw_roundbox_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _frame_size_, *this\frame_width( ) - _frame_size_ * 2, *this\frame_height( ) - _frame_size_ * 2, _round_, _round_, _frame_color_)
            ;   draw_roundbox_(*this\frame_x( ) + _frame_size_+1, *this\frame_y( ) + _frame_size_+1, *this\frame_width( ) - _frame_size_*2-2, *this\frame_height( ) - _frame_size_*2-2, _round_,_round_)
            ;   ; ;   draw_roundbox_(*this\frame_x( ) + _frame_size_+2, *this\frame_y( ) + _frame_size_+2, *this\frame_width( ) - _frame_size_*2-4, *this\frame_height( ) - _frame_size_*2-4, _round_,_round_)
            ;   ;
            ;   ;   For x1 = 0 To 1
            ;   ;     draw_roundbox_(*this\frame_x( ) + (_frame_size_+i), *this\frame_y( ) + (_frame_size_+i), *this\frame_width( ) - (_frame_size_+i)*2, *this\frame_height( ) - (_frame_size_+i)*2, _round_,_round_)
            ;   ;   Next
            
            If _gradient_
               draw_mode_alpha_( #PB_2DDrawing_Gradient )
               If _vertical_
                  LinearGradient(*this\frame_x( ), *this\frame_y( ), (*this\frame_x( ) + *this\frame_width( )), *this\frame_y( ))
               Else
                  LinearGradient(*this\frame_x( ), *this\frame_y( ), *this\frame_x( ), (*this\frame_y( ) + *this\frame_height( )))
               EndIf
            Else
               draw_mode_alpha_( #PB_2DDrawing_Default )
            EndIf
            
            
            BackColor(_fore_color1_)
            FrontColor(_back_color1_)
            
            If Not _round_
               If _vertical_
                  draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _position_, *this\frame_width( ) - _frame_size_ * 2, (*this\frame_height( ) - _frame_size_ - _position_))
               Else
                  draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _frame_size_, _position_ - _frame_size_, *this\frame_height( ) - _frame_size_ * 2)
               EndIf
            Else
               
               If _vertical_
                  If (*this\frame_height( ) - _round_ - _position_) > _round_
                     If *this\frame_height( ) > _round_ * 2
                        ; рисуем прямоуголную часть
                        If _round_ > _position_
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _position_ + (_round_ - _position_), *this\frame_width( ) - _frame_size_ * 2, (*this\frame_height( ) - _round_ - _position_) - (_round_ - _position_))
                        Else
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _position_, *this\frame_width( ) - _frame_size_ * 2, (*this\frame_height( ) - _round_ - _position_))
                        EndIf
                     EndIf
                     
                     ;\\
                     DrawHLines( _frame_size_ , (*this\frame_height( ) - _round_), (*this\frame_width( ) - _frame_size_), (*this\frame_height( ) - _frame_size_))
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > _position_
                        DrawHLines( _frame_size_ , _frame_size_ + _position_, (*this\frame_width( ) - _frame_size_), _round_)
                     EndIf
                     
                  Else
                     DrawHLines( _frame_size_ , _position_ - _frame_size_, (*this\frame_width( ) - _frame_size_), (*this\frame_height( ) - _frame_size_))
                  EndIf
               Else
                  If _position_ > _round_
                     ; рисуем прямоуголную часть
                     If *this\frame_width( ) > _round_ * 2
                        If (*this\frame_width( ) - _position_) > _round_
                           draw_box_(*this\frame_x( ) + _round_, *this\frame_y( ) + _frame_size_, (_position_ - _round_) , *this\frame_height( ) - _frame_size_ * 2)
                        Else
                           draw_box_(*this\frame_x( ) + _round_, *this\frame_y( ) + _frame_size_, (_position_ - _round_) + (*this\frame_width( ) - _round_ - _position_), *this\frame_height( ) - _frame_size_ * 2)
                        EndIf
                     EndIf
                     
                     ;\\
                     DrawVLines( _frame_size_ , _frame_size_, _round_, (*this\frame_height( ) - _frame_size_ * 2))
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > (*this\frame_width( ) - _position_)
                        DrawVLines( (*this\frame_width( ) - _frame_size_ - _round_), _frame_size_ , (_position_ - _frame_size_), (*this\frame_height( ) - _frame_size_ * 2))
                     EndIf
                     
                  Else
                     DrawVLines( _frame_size_ , _frame_size_, (_position_ + _frame_size_ - 1), (*this\frame_height( ) - _frame_size_ * 2))
                  EndIf
               EndIf
               
            EndIf
            
            BackColor(_fore_color2_)
            FrontColor(_back_color2_)
            
            If Not _round_
               If _vertical_
                  draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _frame_size_, *this\frame_width( ) - _frame_size_ * 2, _position_ - _frame_size_)
               Else
                  draw_box_(*this\frame_x( ) + _position_, *this\frame_y( ) + _frame_size_, (*this\frame_width( ) - _frame_size_ - _position_), *this\frame_height( ) - _frame_size_ * 2)
               EndIf
            Else
               If _vertical_
                  If _position_ > _round_
                     If *this\frame_height( ) > _round_ * 2
                        ; рисуем прямоуголную часть
                        If _round_ > (*this\frame_height( ) - _position_)
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _round_, *this\frame_width( ) - _frame_size_ * 2, (_position_ - _round_) + (*this\frame_height( ) - _round_ - _position_))
                        Else
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _round_, *this\frame_width( ) - _frame_size_ * 2, (_position_ - _round_))
                        EndIf
                     EndIf
                     
                     ;\\
                     DrawHLines( _frame_size_ , _frame_size_, (*this\frame_width( ) - _frame_size_ * 2), _round_)
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > (*this\frame_height( ) - _position_)
                        DrawHLines( _frame_size_ , (*this\frame_height( ) - _frame_size_ - _round_), (*this\frame_width( ) - _frame_size_ * 2), _position_ - _frame_size_)
                     EndIf
                     
                  Else
                     DrawHLines( _frame_size_ , _frame_size_, (*this\frame_width( ) - _frame_size_ * 2), (_position_ + _frame_size_ - 1))
                  EndIf
               Else
                  If (*this\frame_width( ) - _round_ - _position_) > _round_
                     If *this\frame_width( ) > _round_ * 2
                        ; рисуем прямоуголную часть
                        If _round_ > _position_
                           draw_box_(*this\frame_x( ) + _position_ + (_round_ - _position_), *this\frame_y( ) + _frame_size_, (*this\frame_width( ) - _round_ - _position_) - (_round_ - _position_), *this\frame_height( ) - _frame_size_ * 2)
                        Else
                           draw_box_(*this\frame_x( ) + _position_, *this\frame_y( ) + _frame_size_, (*this\frame_width( ) - _round_ - _position_), *this\frame_height( ) - _frame_size_ * 2)
                        EndIf
                     EndIf
                     
                     ;\\
                     DrawVLines( (*this\frame_width( ) - _round_), _frame_size_, (*this\frame_width( ) - _frame_size_), (*this\frame_height( ) - _frame_size_ * 2))
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > _position_
                        DrawVLines( ( _frame_size_ + _position_), _frame_size_ , (_round_), (*this\frame_height( ) - _frame_size_ * 2))
                     EndIf
                     
                  Else
                     DrawVLines( (_position_ - _frame_size_), _frame_size_, (*this\frame_width( ) - _frame_size_), (*this\frame_height( ) - _frame_size_ * 2))
                  EndIf
               EndIf
            EndIf
            
            ; Draw string
            If *this\text\string
               ;__draw_text( *this )
                Draw_Content( *this, 0 )
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure.i bar_draw_spin( *this._s_WIDGET )
         Protected state = *this\ColorState( )
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         ;          __draw_navigator_button( *this )
         ;          ProcedureReturn  
         
         
         draw_mode_( #PB_2DDrawing_Default )
         ;          ; draw split-string back
         ;          ;          draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\color\back )
         ;          draw_box_( *this\frame_x( ) + *this\fs[1], *this\frame_y( ) + *this\fs[2], *this\frame_width( ) - *this\fs[1] - *this\fs[3], *this\frame_height( ) - *this\fs[2] - *this\fs[4], *this\color\back[0] )
         ;
         ;          ; draw split-bar back
         ;          If *this\fs[1] ; left
         ;             draw_box_( *this\frame_x( ), *this\frame_y( ), *this\fs[1] + 1, *this\frame_height( ), *this\color\back[0] )
         ;          EndIf
         ;          If *this\fs[2] ; top
         ;             draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + 1, *this\color\back[0] )
         ;          EndIf
         ;          If *this\fs[3] ; right
         ;             draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs[3] - 1, *this\frame_y( ), *this\fs[3] + 1, *this\frame_height( ), *this\color\back[0] )
         ;          EndIf
         ;          If *this\fs[4] ; bottom
         ;             draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs[4] - 1, *this\frame_width( ), *this\fs[4] + 1, *this\color\back[0] )
         ;          EndIf
         
         ;\\ draw spin-buttons back
         draw_mode_alpha_( #PB_2DDrawing_Gradient )
         __draw_gradient(*bar\vertical, *BB1, 0,0, *BB1\ColorState( ))
         __draw_gradient(*bar\vertical, *BB2, 0,0, *BB2\ColorState( ))
         
         ;\\
         draw_mode_( #PB_2DDrawing_Outlined )
         If *this\flag & #__spin_Plus 
            ; -/+
            __draw_plus( *BB1, Bool( *bar\invert ) )
            __draw_plus( *BB2, Bool( Not *bar\invert ) )
         Else
            ; arrows on the buttons
            If *BB2\arrow\size
               __draw_arrows( *BB2, Bool(*bar\vertical ) )
            EndIf
            If *BB1\arrow\size
               __draw_arrows( *BB1, Bool(*bar\vertical ) + 2)
            EndIf
         EndIf
         
         ;\\ draw spin-bar frame
         If *this\fs[1]
            draw_box_( *this\frame_x( ), *this\frame_y( ), *this\fs[1] + 1, *this\frame_height( ), *this\color\frame[state] )
         EndIf
         If *this\fs[2]
            draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + 1, *this\color\frame[state] )
         EndIf
         If *this\fs[3]
            draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs[3] - 1, *this\frame_y( ), *this\fs[3] + 1, *this\frame_height( ), *this\color\frame[state] )
         EndIf
         If *this\fs[4]
            draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs[4] - 1, *this\frame_width( ), *this\fs[4] + 1, *this\color\frame[state] )
         EndIf
         
         ;\\ draw spin-buttons frame
         If EnteredButton( ) <> *BB1
            draw_box_( *BB1\x, *BB1\y, *BB1\width, *BB1\height, *BB1\color\frame[*BB1\ColorState( )] )
         EndIf
         If EnteredButton( ) <> *BB2
            draw_box_( *BB2\x, *BB2\y, *BB2\width, *BB2\height, *BB2\color\frame[*BB2\ColorState( )] )
         EndIf
         If EnteredButton( )
            draw_box_( EnteredButton( )\x, EnteredButton( )\y, EnteredButton( )\width, EnteredButton( )\height, EnteredButton( )\color\frame[EnteredButton( )\ColorState( )] )
         EndIf
         
         ;\\ draw split-string frame
         draw_box_( *this\frame_x( ) + *this\fs[1], *this\frame_y( ) + *this\fs[2], *this\frame_width( ) - *this\fs[1] - *this\fs[3], *this\frame_height( ) - *this\fs[2] - *this\fs[4], *this\color\frame[state] )
      EndProcedure
      
      Procedure.b bar_draw_track( *this._s_WIDGET )
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         bar_draw_scroll( *this )
         ;bar_draw_progress( *this )
         
         With *this
            If *this\type = #__type_Track
               Protected i, X, Y, size = DPIScaled(7)
               draw_mode_( #PB_2DDrawing_XOr )
               
               If *bar\vertical
                  X = *this\screen_x( )+ Bool( *bar\invert ) * ( *this\screen_width( ) - size )
                  Y = *this\screen_y( ) + *bar\area\pos + *SB\size/2
                  
                  Line( X, Y, size, 1, *SB\color\frame )
                  Line( X, Y + *bar\area\len - *bar\thumb\len, size, 1, *SB\color\frame )
                  
                  If constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks )
                     For i = *bar\min To *bar\max
                        If i <> *bar\min And 
                           i <> *bar\max
                           Line( X + dpi_scale_two, Y + bar_thumb_pos_( *bar, i ), DPIScaled(3), 1, *SB\color\frame )
                        EndIf
                     Next
                  EndIf
               Else
                  X = *this\screen_x( ) + *bar\area\pos + *SB\size/2
                  Y = *this\screen_y( ) + Bool( Not *bar\invert ) * ( *this\screen_height( ) - size )
                  
                  Line( X, Y, 1, size, *SB\color\frame )
                  Line( X + *bar\area\len - *bar\thumb\len, Y, 1, size, *SB\color\frame )
                  
                  If constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks )
                     For i = *bar\min To *bar\max
                        If i <> *bar\min And
                           i <> *bar\max
                           Line( X + bar_thumb_pos_( *bar, i ), Y + dpi_scale_two, 1, DPIScaled(3), *SB\color\frame )
                        EndIf
                     Next
                  EndIf
               EndIf
            EndIf
         EndWith
         
      EndProcedure
      
      Procedure.b bar_draw_splitter( *this._s_WIDGET )
         Protected circle_x, circle_y
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *SB1, *SB2, *SB
         
         *SB  = *bar\button
         *SB1 = *bar\button[1]
         *SB2 = *bar\button[2]
         
         draw_mode_alpha_( #PB_2DDrawing_Default )
         
         ; draw the splitter background
         draw_box_( *SB\x, *SB\y, *SB\width, *SB\height, *this\color\back[*SB\ColorState( )] & $ffffff | 210 << 24 )
         
         ; draw the first\second background
         If Not *SB1\hide : draw_box_( *SB1\x, *SB1\y, *SB1\width, *SB1\height, *this\color\frame[*SB1\ColorState( )] ) : EndIf
         If Not *SB2\hide : draw_box_( *SB2\x, *SB2\y, *SB2\width, *SB2\height, *this\color\frame[*SB2\ColorState( )] ) : EndIf
         
         draw_mode_( #PB_2DDrawing_Outlined )
         
         ; draw the frame
         If Not *SB1\hide : draw_box_( *SB1\x, *SB1\y, *SB1\width, *SB1\height, *this\color\frame[*SB1\ColorState( )] ) : EndIf
         If Not *SB2\hide : draw_box_( *SB2\x, *SB2\y, *SB2\width, *SB2\height, *this\color\frame[*SB2\ColorState( )] ) : EndIf
         
         ;
         If *bar\thumb\len
            If *bar\vertical ; horizontal circle
               circle_y = *SB\y + *SB\height / 2 - *SB\round / 2 + 1
               circle_x = *this\frame_x( ) + ( *this\frame_width( ) - *SB\round ) / 2 + Bool( *this\screen_width( ) % 2 )
            Else
               circle_x = *SB\x + *SB\width / 2 - *SB\round / 2 + 1
               circle_y = *this\frame_y( ) + ( *this\frame_height( ) - *SB\round ) / 2 + Bool( *this\screen_height( ) % 2 )
            EndIf
            
            If *bar\vertical ; horisontal line
               If DPIUnScaledX(*SB\width) > 35
                  Circle( circle_x - ( *SB\round * 2 + 2 ) * 2 - 2, circle_y, *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x + ( *SB\round * 2 + 2 ) * 2 + 2, circle_y, *SB\round, *SB\color\frame[#__s_2] )
               EndIf
               If DPIUnScaledX(*SB\width) > 20
                  Circle( circle_x - ( *SB\round * 2 + 2 ), circle_y, *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x + ( *SB\round * 2 + 2 ), circle_y, *SB\round, *SB\color\frame[#__s_2] )
               EndIf
            Else
               If DPIUnScaledY(*SB\height) > 35
                  Circle( circle_x, circle_y - ( *SB\round * 2 + 2 ) * 2 - 2, *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x, circle_y + ( *SB\round * 2 + 2 ) * 2 + 2, *SB\round, *SB\color\frame[#__s_2] )
               EndIf
               If DPIUnScaledY(*SB\height) > 20
                  Circle( circle_x, circle_y - ( *SB\round * 2 + 2 ), *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x, circle_y + ( *SB\round * 2 + 2 ), *SB\round, *SB\color\frame[#__s_2] )
               EndIf
            EndIf
            
            Circle( circle_x, circle_y, *SB\round, *SB\color\frame[#__s_2] )
         EndIf
      EndProcedure
      
      
      ;-
      Macro bar_area_create( _parent_, _scroll_step_, _area_width_, _area_height_, _width_, _height_, _scrollbar_size_, _mode_ = #True )
         If Not _parent_\scroll\bars
            _parent_\scroll\bars = 1
            _parent_\scroll\v    = Create( _parent_, "[" + _parent_\class + "" + _parent_\createindex + "]", #__type_Scroll, 0, 0, DPIScaled( _scrollbar_size_), _height_, #Null$, #__flag_child | #__flag_Vertical, 0, _area_height_, _height_, ( _scrollbar_size_), _scrollbar_size_/2, _scroll_step_ )
            _parent_\scroll\h    = Create( _parent_, "[" + _parent_\class + "" + _parent_\createindex + "]", #__type_Scroll, 0, 0, _width_, DPIScaled( _scrollbar_size_), #Null$, #__flag_child, 0, _area_width_, _width_, Bool( _mode_ ) * ( _scrollbar_size_),  _scrollbar_size_/2, _scroll_step_ )
         EndIf
      EndMacro
      
      Macro bar_area_draw( _this_ )
         If _this_\scroll And ( _this_\scroll\v Or _this_\scroll\h )
            ;clip_output_( _this_, [#__c_draw] )
            
            If _this_\scroll\v And Not _this_\scroll\v\hide And _this_\scroll\v\frame_width( ) And
               ( _this_\scroll\v\draw_width( ) > 0 And _this_\scroll\v\draw_height( ) > 0 )
               bar_draw_scroll( _this_\scroll\v )
            EndIf
            If _this_\scroll\h And Not _this_\scroll\h\hide And _this_\scroll\h\frame_height( ) And
               ( _this_\scroll\h\draw_width( ) > 0 And _this_\scroll\h\draw_height( ) > 0 )
               bar_draw_scroll( _this_\scroll\h )
            EndIf
            ;             
            ;             ;\\
            ;             If test_draw_area
            ;                ;If Not _this_\haschildren
            ;                   draw_mode_alpha_( #PB_2DDrawing_Outlined )
            ;                   
            ;                   ; ;                ; Box( _this_\scroll_x( ), _this_\scroll_y( ), _this_\scroll_width( ), _this_\scroll_height( ), RGB( 255,0,0 ) )
            ;                   ; ;                Box( _this_\scroll\h\bar\page\pos, _this_\scroll\v\bar\page\pos, _this_\scroll\h\bar\max, _this_\scroll\v\bar\max, RGB( 255,0,0 ) )
            ;                   
            ;                   ;\\ Scroll area coordinate
            ;                   draw_box_( _this_\inner_x( ) + _this_\scroll_x( ) + _this_\padding\x, _this_\inner_y( ) + _this_\scroll_y( ) + _this_\padding\y, _this_\scroll_width( ) - _this_\padding\x * 2, _this_\scroll_height( ) - _this_\padding\y * 2, $FFFF0000 )
            ;                   draw_box_( _this_\inner_x( ) + _this_\scroll_x( ), _this_\inner_y( ) + _this_\scroll_y( ), _this_\scroll_width( ), _this_\scroll_height( ), $FF0000FF )
            ;                   
            ;                   If _this_\scroll\v And _this_\scroll\h
            ;                      draw_box_( _this_\scroll\h\frame_x( ) + _this_\scroll_x( ), _this_\scroll\v\frame_y( ) + _this_\scroll_y( ), _this_\scroll_width( ), _this_\scroll_height( ), $FF0000FF )
            ;                      
            ;                      ; Debug "" +  _this_\scroll_x( )  + " " +  _this_\scroll_y( )  + " " +  _this_\scroll_width( )  + " " +  _this_\scroll_height( )
            ;                      ;draw_box_( _this_\scroll\h\frame_x( ) - _this_\scroll\h\bar\page\pos, _this_\scroll\v\frame_y( ) - _this_\scroll\v\bar\page\pos, _this_\scroll\h\bar\max, _this_\scroll\v\bar\max, $FF0000FF )
            ;                      
            ;                      ;\\ page coordinate
            ;                      draw_box_( _this_\scroll\h\frame_x( ), _this_\scroll\v\frame_y( ), _this_\scroll\h\bar\page\len, _this_\scroll\v\bar\page\len, $FF00FF00 )
            ;                   EndIf
            ;               ; EndIf
            ;             EndIf
         EndIf
      EndMacro
      
      Procedure _bar_area_resize( *this._s_WIDGET )
         Protected.l X = *this\inner_x( ) - *this\frame_x( ),
                  Y = *this\inner_y( ) - *this\frame_y( ),
                  Width = *this\container_width( ), 
                  Height = *this\container_height( )
         
         Protected resize_v, resize_h, x1 = #PB_Ignore, y1 = #PB_Ignore, iwidth, iheight, w, h
         ;Protected resize_v, resize_h, x1 = *this\container_x( ), y1 = *this\container_y( ), width1 = *this\container_width( ), height1 = *this\container_height( ), iwidth, iheight, w, h
         
         With *this\scroll
            If Not ( *this\scroll And ( \v Or \h ))
               ProcedureReturn 0
            EndIf
            
            If ( *this\screen_width( ) = 0 And *this\screen_height( ) = 0)
               \v\hide = #True
               \h\hide = #True
               ProcedureReturn 0
            EndIf
            
            w = Bool( *this\scroll_width( ) > Width )
            h = Bool( *this\scroll_height( ) > Height )
            
            \v\bar\page\len = Height - ( Bool( w Or \h\bar\max > \h\bar\page\len ) * \h\frame_height( ) )
            \h\bar\page\len = Width - ( Bool( h Or \v\bar\max > \v\bar\page\len ) * \v\frame_width( ) )
            
            iheight = Height - ( Bool( Not \h\hide[1] And (w Or \h\bar\max > \h\bar\page\len) ) * \h\frame_height( ) )
            If \v\bar\page\len = iheight
               If \v\bar\thumb\len = \v\bar\area\end
                  bar_Update( \v, #True )
               EndIf
               bar_Update( \h, #True )
            Else
               \v\bar\AreaChange( ) = \v\bar\page\len - iheight
               \v\bar\page\len      = iheight
               
               If Not \v\bar\max
                  If \v\bar\min > iheight
                     \v\bar\max = \v\bar\min + 1
                  Else
                     \v\bar\max = iheight
                  EndIf
               EndIf
            EndIf
            
            iwidth = Width - ( Bool( Not \v\hide[1] And (h Or \v\bar\max > \v\bar\page\len) ) * \v\frame_width( ) )
            If \h\bar\page\len = iwidth
               bar_Update( \v, #True )
               If \h\bar\thumb\len = \h\bar\area\end
                  bar_Update( \h, #True )
                  
               EndIf
            Else
               \h\bar\AreaChange( ) = \h\bar\page\len - iwidth
               \h\bar\page\len      = iwidth
               
               If Not \h\bar\max
                  If \h\bar\min > iwidth
                     \h\bar\max = \h\bar\min + 1
                  Else
                     \h\bar\max = iwidth
                  EndIf
               EndIf
            EndIf
            
            Width + X
            Height + Y
            
            
            If \v\frame_x( ) = *this\inner_x( ) + (Width - \v\frame_width( ))
               x1 = \v\frame_x( )
            Else
               resize_v = 1
               x1 = *this\inner_x( ) + (Width - \v\frame_width( ))
               ; Debug "         v "+\v\frame_x( ) +" "+ x1
            EndIf
            
            If \h\frame_y( ) = *this\inner_y( ) + (Height - \h\frame_height( ))
               y1 = \h\frame_y( )
            Else
               resize_h = 1
               y1 = *this\inner_y( ) + (Height - \h\frame_height( ))
               ;Debug "         h "+\h\frame_y( ) +" "+ y1
            EndIf
            
            If \v\bar\max > \v\bar\page\len
               resize_v     = 1
               Height = ( \v\bar\page\len + Bool( Not \h\hide[1] And \h\bar\max > \h\bar\page\len And \v\round And \h\round ) * ( \h\frame_height( ) / 4 ) )
               If \v\hide <> #False
                  \v\hide = #False
                  If \h\hide
                     Width = \h\bar\page\len
                  EndIf
               EndIf
            Else
               If \v\hide <> #True
                  \v\hide = #True
                  ;// reset page pos then hide scrollbar
                  If \v\bar\page\pos > \v\bar\min
                     bar_PageChange( \v, \v\bar\min, #False )
                  EndIf
               EndIf
            EndIf
            
            If \h\bar\max > \h\bar\page\len
               resize_h    = 1
               Width = ( \h\bar\page\len + Bool( Not \v\hide[1] And \v\bar\max > \v\bar\page\len And \v\round And \h\round ) * ( \v\frame_width( ) / 4 ))
               If \h\hide <> #False
                  \h\hide = #False
                  If \v\hide
                     Height = \v\bar\page\len
                  EndIf
               EndIf
            Else
               If \h\hide <> #True
                  \h\hide = #True
                  ;// reset page pos then hide scrollbar
                  If \h\bar\page\pos > \h\bar\min
                     bar_PageChange( \h, \h\bar\min, #False )
                  EndIf
               EndIf
            EndIf
            
            If test_resize_area
               Debug "  --- area_resize " + *this\class + " " + *this\inner_width( ) + " " + *this\inner_height( ) + " " + \v\bar\page\len + " " + \h\bar\page\len
            EndIf
            
            If resize_v And (\v\frame_x( ) <> x1 Or 
                             \v\frame_y( ) <> *this\inner_y( ) + Y Or
                             \v\frame_height( ) <> Height)
               If test_resize_area
                  Debug "         v "+\v\frame_x( ) +" "+ x1
               EndIf
               Resize( \v, x1-*this\inner_x( ) , #PB_Ignore, #PB_Ignore, Height )
            EndIf
            If resize_h And (\h\frame_y( ) <> y1 Or
                             \h\frame_x( ) <> *this\inner_x( ) + X Or
                             \h\frame_width( ) <> Width)
               If test_resize_area
                  Debug "         h "+\h\frame_y( ) +" "+ y1
               EndIf
               Resize( \h, #PB_Ignore, y1-*this\inner_y( ), Width, #PB_Ignore )
            EndIf
            
            ;
            If \v\bar\max > \v\bar\page\len ; Or \v\bar\thumb\len <> \v\bar\area\end
               If \v\hide <> \v\hide[1]
                  \v\hide = \v\hide[1]
               EndIf
            Else
               If \V\hide = 0
                  \V\hide = 1
               EndIf
            EndIf
            ;
            If \h\bar\max > \h\bar\page\len ; Or \h\bar\thumb\len <> \h\bar\area\end
               If \h\hide <> \h\hide[1]
                  \h\hide = \h\hide[1]
               EndIf
            Else
               If \h\hide = 0
                  \h\hide = 1
               EndIf
            EndIf
            
            ;\\ update scrollbars parent inner coordinate
            If *this\scroll_inner_width( ) <> \h\bar\page\len
               *this\scroll_inner_width( ) = \h\bar\page\len
            EndIf
            If *this\scroll_inner_height( ) <> \v\bar\page\len
               *this\scroll_inner_height( ) = \v\bar\page\len
            EndIf
            
            ;\\
            If \v\bar\AreaChange( ) Or
               \h\bar\AreaChange( )
               ;*this\WidgetChange( ) = 1
               
               ;Debug ""+\v\class +" "+ \h\class +" "+ \v\hide[1] +" "+ \h\hide[1] +" "+ *this\scroll_inner_width( ) +" "+ *this\scroll_inner_height( )
               
               ProcedureReturn #True
            EndIf
         EndWith
      EndProcedure
      
      Procedure bar_area_resize( *this._s_WIDGET )
         Protected.l X = *this\inner_x( ) - *this\frame_x( ),
                  Y = *this\inner_y( ) - *this\frame_y( ),
                  Width = *this\container_width( ), 
                  Height =  *this\container_height( )
         
         Protected resize_v, resize_h, x1 = #PB_Ignore, y1 = #PB_Ignore, iwidth, iheight, w, h
         ;Protected resize_v, resize_h, x1 = *this\container_x( ), y1 = *this\container_y( ), width1 = *this\container_width( ), height1 = *this\container_height( ), iwidth, iheight, w, h
         
         With *this\scroll
            If Not ( *this\scroll And ( \v Or \h ))
               ProcedureReturn 0
            EndIf
            
            If ( *this\screen_width( ) = 0 And *this\screen_height( ) = 0)
               \v\hide = #True
               \h\hide = #True
               ProcedureReturn 0
            EndIf
            
            w = Bool( *this\scroll_width( ) > Width )
            h = Bool( *this\scroll_height( ) > Height )
            
            \v\bar\page\len = Height - ( Bool( w Or \h\bar\max > \h\bar\page\len ) * \h\frame_height( ) )
            \h\bar\page\len = Width - ( Bool( h Or \v\bar\max > \v\bar\page\len ) * \v\frame_width( ) )
            
            iheight = Height - ( Bool( Not \h\hide[1] And (w Or \h\bar\max > \h\bar\page\len) ) * \h\frame_height( ) )
            If \v\bar\page\len = iheight
               If \v\bar\thumb\len = \v\bar\area\end
                  bar_Update( \v, #True )
               EndIf
               bar_Update( \h, #True )
            Else
               \v\bar\AreaChange( ) = \v\bar\page\len - iheight
               \v\bar\page\len      = iheight
               
               If Not \v\bar\max
                  If \v\bar\min > iheight
                     \v\bar\max = \v\bar\min + 1
                  Else
                     \v\bar\max = iheight
                  EndIf
               EndIf
            EndIf
            
            iwidth = Width - ( Bool( Not \v\hide[1] And (h Or \v\bar\max > \v\bar\page\len) ) * \v\frame_width( ) )
            If \h\bar\page\len = iwidth
               bar_Update( \v, #True )
               If \h\bar\thumb\len = \h\bar\area\end
                  bar_Update( \h, #True )
               EndIf
            Else
               \h\bar\AreaChange( ) = \h\bar\page\len - iwidth
               \h\bar\page\len      = iwidth
               
               If Not \h\bar\max
                  If \h\bar\min > iwidth
                     \h\bar\max = \h\bar\min + 1
                  Else
                     \h\bar\max = iwidth
                  EndIf
               EndIf
            EndIf
            
            Width + X
            Height + Y
            
            
            If \v\frame_x( ) = *this\inner_x( ) + (Width - \v\frame_width( ))
               x1 = \v\frame_x( )
            Else
               resize_v = 1
               x1 = *this\inner_x( ) + (Width - \v\frame_width( ))
               ; Debug "         v "+\v\frame_x( ) +" "+ x1
            EndIf
            
            If \h\frame_y( ) = *this\inner_y( ) + (Height - \h\frame_height( ))
               y1 = \h\frame_y( )
            Else
               resize_h = 1
               y1 = *this\inner_y( ) + (Height - \h\frame_height( ))
               ;Debug "         h "+\h\frame_y( ) +" "+ y1
            EndIf
            
            If Not \v\hide[1]
               If \v\bar\max > \v\bar\page\len
                  resize_v     = 1
                  Height = ( \v\bar\page\len + Bool( Not \h\hide[1] And \h\bar\max > \h\bar\page\len And \v\round And \h\round ) * ( \h\height / 4 ) )
                  ;                If \v\hide <> #False
                  ;                   \v\hide = #False
                  If \h\hide
                     If Width <> \h\bar\page\len
                        Width = \h\bar\page\len
                     EndIf
                  EndIf
                  ;                EndIf
               Else
                  If \v\hide <> #True
                     \v\hide = #True
                     ;// reset page pos then hide scrollbar
                     If \v\bar\page\pos > \v\bar\min
                        bar_PageChange( \v, \v\bar\min, #False )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            If Not \h\hide[1]
               If \h\bar\max > \h\bar\page\len
                  resize_h    = 1
                  Width = ( \h\bar\page\len + Bool( Not \v\hide[1] And \v\bar\max > \v\bar\page\len And \v\round And \h\round ) * ( \v\frame_width( ) / 4 ))
                  ;                If \h\hide <> #False
                  ;                   \h\hide = #False
                  If \v\hide
                     If Height <> \v\bar\page\len
                        Height = \v\bar\page\len
                     EndIf
                  EndIf
                  ;                EndIf
               Else
                  If \h\hide <> #True
                     \h\hide = #True
                     ;// reset page pos then hide scrollbar
                     If \h\bar\page\pos > \h\bar\min
                        bar_PageChange( \h, \h\bar\min, #False )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            If test_resize_area
               Debug "  --- area_resize " + *this\class + " " + *this\inner_width( ) + " " + *this\inner_height( ) + " " + \v\bar\page\len + " " + \h\bar\page\len
            EndIf
            
            If resize_v And (\v\frame_x( ) <> x1 Or 
                             \v\frame_y( ) <> *this\inner_y( ) + Y Or
                             \v\frame_height( ) <> Height)
               If test_resize_area
                  Debug "         v "+\v\frame_x( ) +" "+ x1
               EndIf
               Resize( \v, x1-*this\inner_x( )-*this\fs , #PB_Ignore, #PB_Ignore, Height )
            EndIf
            If resize_h And (\h\frame_y( ) <> y1 Or
                             \h\frame_x( ) <> *this\inner_x( ) + X Or
                             \h\frame_width( ) <> Width)
               If test_resize_area
                  Debug "         h "+\h\frame_y( ) +" "+ y1
               EndIf
               Resize( \h, #PB_Ignore, y1-*this\inner_y( )-*this\fs, Width, #PB_Ignore )
            EndIf
            
            ;\\ update scrollbars parent inner coordinate
            If *this\scroll_inner_width( ) <> \h\bar\page\len
               *this\scroll_inner_width( ) = \h\bar\page\len
            EndIf
            If *this\scroll_inner_height( ) <> \v\bar\page\len
               *this\scroll_inner_height( ) = \v\bar\page\len
            EndIf
            
            ;\\
            If \v\bar\AreaChange( ) Or
               \h\bar\AreaChange( )
               ;*this\WidgetChange( ) = 1
               
               ;Debug ""+\v\class +" "+ \h\class +" "+ \v\hide[1] +" "+ \h\hide[1] +" "+ *this\scroll_inner_width( ) +" "+ *this\scroll_inner_height( )
               
               ProcedureReturn #True
            EndIf
         EndWith
      EndProcedure
      
      Procedure.b bar_area_update( *this._s_WIDGET )
         Protected result.b
         
         ;\\ change vertical scrollbar max
         If *this\scroll\v And *this\scroll\v\bar\max <> *this\scroll_height( ) And
            bar_SetAttribute( *this\scroll\v, #PB_ScrollBar_Maximum, *this\scroll_height( ) )
            result = 1
         EndIf
         
         ;\\ change horizontal scrollbar max
         If *this\scroll\h And *this\scroll\h\bar\max <> *this\scroll_width( ) And
            bar_SetAttribute( *this\scroll\h, #PB_ScrollBar_Maximum, *this\scroll_width( ) )
            result = 1
         EndIf
         
         
         
         If result
            bar_area_resize( *this )
            
            ; example state-item.pb
            ; Post( *this, #__event_Resize )
            Post( *this, #__event_ScrollChange )
         EndIf
         
         ; авто скроллим чтобы был виден выбранный итем
         If *this\row
            If *this\row\autoscroll = #True
               *this\row\autoscroll = #PB_All
               ;
               If *this\RowFocused( ) 
                  row_scroll_y_( *this, *this\RowFocused( ) )
                  
                  *this\scroll\v\WidgetChange( ) = 0
                  
                  ;
                  Protected result2
                  If *this\RowFocused( )\_focus
                     If *this\focus = 2
                        If *this\RowFocused( )\ColorState( ) <> #__s_2
                           *this\RowFocused( )\ColorState( ) = #__s_2
                           result2 = 2
                        EndIf
                     Else
                        If *this\RowFocused( )\ColorState( ) <> #__s_3
                           *this\RowFocused( )\ColorState( ) = #__s_3
                           result2 = 3
                        EndIf
                     EndIf
                  Else
                     If *this\RowFocused( )\ColorState( ) <> #__s_1
                        *this\RowFocused( )\ColorState( ) = #__s_1
                        result2 = 1
                     EndIf
                  EndIf
                  
                  ;
                  If is_integral_( *this ) 
;                      If *this\parent  
;                         If *this\parent\parent And *this\parent\parent\type = #__type_ComboBox
;                            SetText( *this\parent\parent, *this\RowFocused( )\text\string )
;                            DoEvents( *this\parent\parent, #__event_Change, *this\RowFocused( )\rindex, *this\RowFocused( ))
;                            If result2  
;                               DoEvents( *this\parent\parent, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ))
;                            EndIf 
;                         Else
;                            If *this\parent\type = #__type_ComboBox
;                               SetText( *this\parent, *this\RowFocused( )\text\string )
;                            EndIf 
;                            DoEvents( *this\parent, #__event_Change, *this\RowFocused( )\rindex, *this\RowFocused( ))
;                            If result2  
;                               DoEvents( *this\parent, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ))
;                            EndIf 
;                         EndIf 
;                      EndIf 
                  Else
                     DoEvents(*this, #__event_Change, *this\RowFocused( )\rindex, *this\RowFocused( ))
                     If result2  
                        DoEvents( *this, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ))
                     EndIf 
                  EndIf
                  
                  
               EndIf
               
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;     ;-
      ;     Macro bar_mdi_change( _this_, _objects_ )
      ;       ;\\ 
      ;       _this_\scroll_x( ) = _objects_\x 
      ;       _this_\scroll_y( ) = _objects_\Y
      ;       _this_\scroll_width( ) = _objects_\width
      ;       _this_\scroll_height( ) = _objects_\height
      ;       ;
      ;       PushListPosition( _objects_ )
      ;       ForEach _objects_
      ;         If _this_\scroll_x( ) > _objects_\x 
      ;           _this_\scroll_x( ) = _objects_\x 
      ;         EndIf
      ;         If _this_\scroll_y( ) > _objects_\y 
      ;           _this_\scroll_y( ) = _objects_\y 
      ;         EndIf
      ;       Next
      ;       ;
      ;       ForEach _objects_
      ;         If _this_\scroll_width( ) < _objects_\x + _objects_\width - _this_\scroll_x( ) 
      ;           _this_\scroll_width( ) = _objects_\x + _objects_\width - _this_\scroll_x( ) 
      ;         EndIf
      ;         If _this_\scroll_height( ) < _objects_\Y + _objects_\height - _this_\scroll_y( ) 
      ;           _this_\scroll_height( ) = _objects_\Y + _objects_\height - _this_\scroll_y( ) 
      ;         EndIf
      ;       Next
      ;       PopListPosition( _objects_ )
      ;       
      ;       widget::bar_mdi_resize( _this_,
      ;                               _this_\scroll\h\x, 
      ;                               _this_\scroll\v\y, 
      ;                               ( _this_\scroll\v\x + _this_\scroll\v\width ) - _this_\scroll\h\x,
      ;                               ( _this_\scroll\h\y + _this_\scroll\h\height ) - _this_\scroll\v\y )
      ;     EndMacro
      ;     
      Procedure bar_mdi_update( *this._s_WIDGET, X.l, Y.l, Width.l, Height.l ) ; Ok
         *this\scroll_x( )      = X
         *this\scroll_y( )      = Y
         *this\scroll_width( )  = Width
         *this\scroll_height( ) = Height
         
         ;\\
         If StartEnum( *this )
            If *this = widget( )\parent
               If *this\scroll_x( ) > widget( )\container_x( )
                  *this\scroll_x( ) = widget( )\container_x( )
               EndIf
               If *this\scroll_y( ) > widget( )\container_y( )
                  *this\scroll_y( ) = widget( )\container_y( )
               EndIf
            EndIf
            StopEnum( )
         EndIf
         
         ;\\
         If StartEnum( *this )
            If *this = widget( )\parent
               If *this\scroll_width( ) < widget( )\container_x( ) + widget( )\frame_width( ) - *this\scroll_x( )
                  *this\scroll_width( ) = widget( )\container_x( ) + widget( )\frame_width( ) - *this\scroll_x( )
               EndIf
               If *this\scroll_height( ) < widget( )\container_y( ) + widget( )\frame_height( ) - *this\scroll_y( )
                  *this\scroll_height( ) = widget( )\container_y( ) + widget( )\frame_height( ) - *this\scroll_y( )
               EndIf
            EndIf
            StopEnum( )
         EndIf
      EndProcedure
      
      Procedure bar_mdi_resize( *this._s_WIDGET, X.l, Y.l, Width.l, Height.l )
         Static v_max, h_max
         Protected sx, sy, round, result
         Protected scroll_x, scroll_y, scroll_width, scroll_height
         
         With *this\scroll
            If Not ( *this\scroll And ( \v Or \h ))
               ProcedureReturn 0
            EndIf
            
            ;\\
            scroll_x      = *this\scroll_x( )
            scroll_y      = *this\scroll_y( )
            scroll_width  = *this\scroll_width( )
            scroll_height = *this\scroll_height( )
            
            ;\\ top set state
            If scroll_y < Y
               \h\bar\page\len = Width - \v\width
            Else
               If \h\bar\page\len <> Width - Bool( scroll_height > Height ) * \v\width
                  \h\bar\page\len = Width - Bool( scroll_height > Height ) * \v\width
               EndIf
               
               sy = ( scroll_y - Y )
               scroll_height + sy
               scroll_y = Y
            EndIf
            
            ;\\ left set state
            If scroll_x < X
               \v\bar\page\len = Height - \h\height
            Else
               If \v\bar\page\len <> Height - Bool( scroll_width > Width ) * \h\height
                  \v\bar\page\len = Height - Bool( scroll_width > Width ) * \h\height
               EndIf
               
               sx = ( scroll_x - X )
               scroll_width + sx
               scroll_x = X
            EndIf
            
            ;\\
            If scroll_width > \h\bar\page\len - ( scroll_x - X )
               If scroll_width - sx <= Width And scroll_height = \v\bar\page\len - ( scroll_y - Y )
                  ;Debug "w - " + Str( scroll_height - sx )
                  
                  ; if on the h - scroll
                  If \v\bar\max > Height - \h\height
                     \v\bar\page\len = Height - \h\height
                     \h\bar\page\len = Width - \v\width
                     scroll_height   = \v\bar\max
                     
                     If scroll_y <= Y
                        \v\bar\page\pos = - ( scroll_y - Y )
                     EndIf
                     ;  Debug "w - " + \v\bar\max  + " " +  \v\height  + " " +  \v\bar\page\len
                  Else
                     scroll_height = \v\bar\page\len - ( scroll_x - X ) - \h\height
                  EndIf
               EndIf
               
               \v\bar\page\len = Height - \h\height
               If scroll_x <= X
                  \h\bar\page\pos = - ( scroll_x - X )
                  h_max           = 0
               EndIf
            Else
               \h\bar\max   = scroll_width
               scroll_width = \h\bar\page\len - ( scroll_x - X )
            EndIf
            
            ;\\
            If scroll_height > \v\bar\page\len - ( scroll_y - Y )
               If scroll_height - sy <= Height And scroll_width = \h\bar\page\len - ( scroll_x - X )
                  ;Debug " h - " + Str( scroll_height - sy )
                  
                  ; if on the v - scroll
                  If \h\bar\max > Width - \v\frame_width( )
                     \h\bar\page\len = Width - \v\frame_width( )
                     \v\bar\page\len = Height - \h\frame_height( )
                     scroll_width    = \h\bar\max
                     
                     If scroll_x <= X
                        \h\bar\page\pos = - ( scroll_x - X )
                     EndIf
                     ;  Debug "h - " + \h\bar\max  + " " +  \h\frame_width( )  + " " +  \h\bar\page\len
                  Else
                     scroll_width = \h\bar\page\len - ( scroll_x - X ) - \v\frame_width( )
                  EndIf
               EndIf
               
               \h\bar\page\len = Width - \v\frame_width( )
               If scroll_y <= Y
                  \v\bar\page\pos = - ( scroll_y - Y )
                  v_max           = 0
               EndIf
            Else
               \v\bar\max    = scroll_height
               scroll_height = \v\bar\page\len - ( scroll_y - Y )
            EndIf
            
            ;\\
            If \h\round And
               \v\round And
               \h\bar\page\len < Width And
               \v\bar\page\len < Height
               round = ( \h\frame_height( ) / 4 )
            EndIf
            
            ;Debug ""+*this\scroll_width( ) +" "+ scroll_width
            
            ;\\
            If scroll_height >= \v\bar\page\len
               If \v\bar\Max <> scroll_height
                  \v\bar\Max = scroll_height
                  If scroll_y <= Y
                     \v\bar\page\pos = - ( scroll_y - Y )
                  EndIf
               EndIf
               
               If \v\height <> \v\bar\page\len + round
                  Resize( \v, #PB_Ignore, #PB_Ignore, #PB_Ignore, \v\bar\page\len + round )
                  *this\scroll\v\hide = Bool( *this\scroll\v\bar\max <= *this\scroll\v\bar\page\len )
                  result              = 1
               EndIf
            EndIf
            
            ;\\
            If scroll_width >= \h\bar\page\len
               If \h\bar\Max <> scroll_width
                  \h\bar\Max = scroll_width
                  If scroll_x <= X
                     \h\bar\page\pos = - ( scroll_x - X )
                  EndIf
               EndIf
               
               If \h\frame_width( ) <> \h\bar\page\len + round
                  Resize( \h, #PB_Ignore, #PB_Ignore, \h\bar\page\len + round, #PB_Ignore )
                  *this\scroll\h\hide = Bool( *this\scroll\h\bar\max <= *this\scroll\h\bar\page\len )
                  result              = 1
               EndIf
            EndIf
            
            ;\\
            If test_resize_area
               Debug "  --- mdi_resize " + *this\class + " " + *this\inner_width( ) + " " + *this\inner_height( )
            EndIf
            
            ;\\
            If v_max <> \v\bar\Max
               v_max = \v\bar\Max
               bar_Update( \v, #True )
               result = 1
            EndIf
            
            ;\\
            If h_max <> \h\bar\Max
               h_max = \h\bar\Max
               bar_Update( \h, #True )
               result = 1
            EndIf
            
            ; Debug ""+\h\bar\thumb\len +" "+ \h\bar\page\len +" "+ \h\bar\area\len +" "+ \h\bar\area\end +" "+ \h\bar\page\end +" "+ \h\bar\thumb\end
            
            ;\\
            *this\scroll_x( )      = scroll_x
            *this\scroll_y( )      = scroll_y
            *this\scroll_width( )  = scroll_width
            *this\scroll_height( ) = scroll_height
            
            ;\\ update scrollbars parent inner coordinate
            If *this\scroll_inner_width( ) <> \h\bar\page\len
               *this\scroll_inner_width( ) = \h\bar\page\len
            EndIf
            If *this\scroll_inner_height( ) <> \v\bar\page\len
               *this\scroll_inner_height( ) = \v\bar\page\len
            EndIf
            
            ProcedureReturn result
         EndWith
      EndProcedure
      
      ;-
      Macro ScrollToActive( _state_ )
         _focus =- _state_
      EndMacro
      Procedure.b bar_Update( *this._s_WIDGET, mode.b = 1 )
         Protected fixed.l, ScrollPos,d, ThumbPos.i, Width, Height
         
         ;\\
         If Not *this\bar
            ProcedureReturn 0
         EndIf
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         
         ;Debug ""+ mode +" "+ *this\bar\PageChange( )
         ;mode = 2
         
         ;          ; NEW
         ;          If Not *bar\max 
         ;             If *this\type = #__type_Splitter
         ;                Debug ">>>>>>>>>"+Str(*bar)+">>>>>>>>"
         ;                Debug " ["+ *this\class +"] "+
         ;                      *bar\percent +" >< "+
         ;                      *bar\min +" "+
         ;                      *bar\max +" >< "+
         ;                      *bar\page\pos +" "+
         ;                      *bar\page\len +" "+
         ;                      *bar\page\end +" "+
         ;                      *bar\page\change +" >< "+
         ;                      *bar\area\pos +" "+
         ;                      *bar\area\len +" "+
         ;                      *bar\thumb\end +" "+
         ;                      *bar\area\change +" >< "+
         ;                      *bar\thumb\pos +" "+
         ;                      *bar\thumb\len +" "+
         ;                      *bar\area\end +" "+
         ;                      *bar\thumb\change +""
         ;                Debug "<<<<<<<<<<<<<<<<<"
         ;                
         ;                If *bar\page\pos = *bar\page\end 
         ;                   ;  ProcedureReturn 0
         ;                EndIf
         ;                
         ;             Else
         ;                ProcedureReturn 0
         ;             EndIf
         ;          EndIf
         
         ;Debug "*bar\page\pos "+*bar\page\pos
         
         Width  = *this\frame_width( )
         Height = *this\frame_height( )
         
         ;\\
         If mode
            ;\\ get area size
            If *bar\vertical
               If Height <> #PB_Ignore
                  *bar\AreaChange( ) = *bar\area\len - Height
                  *bar\area\len = Height
               EndIf
            Else
               If Width <> #PB_Ignore
                  *bar\AreaChange( ) = *bar\area\len - Width
                  *bar\area\len = Width
               EndIf
            EndIf
            
            If *this\type = #__type_Spin
               ; set real spin-buttons height
               If Not *this\flag & #__spin_Plus
                  *BB1\size = Height / 2 + Bool( Height % 2 )
                  *BB2\size = *BB1\size + Bool( Not Height % 2 )
               EndIf
               
               ;*bar\area\pos = ( *BB1\size + *bar\min[1] )
               *bar\area\end = *bar\area\len - ( *BB1\size + *BB2\size )
               
               *bar\page\end = *bar\max
               *bar\thumb\end = *bar\max - *bar\thumb\Len
               *bar\percent  = ( *bar\thumb\end - *bar\area\pos ) / ( *bar\page\end - *bar\min )
               
            Else
               ; scroll-bar default button size
               If *this\type = #__type_Scroll
                  If *bar\max
                     If *BB1\size = - 1 And *BB2\size = - 1
                        If *bar\vertical And Width > DPIScaled(7) And Width < DPIScaled(21)
                           *BB1\size = Width - 1
                           *BB2\size = Width - 1
                           
                        ElseIf Not *bar\vertical And Height > DPIScaled(7) And Height < DPIScaled(21)
                           *BB1\size = Height - 1
                           *BB2\size = Height - 1
                           
                        Else
                           *BB1\size = *SB\size
                           *BB2\size = *SB\size
                        EndIf
                     EndIf
                     
                     ;           If *SB\size
                     ;             If *bar\vertical
                     ;               If *this\screen_width( ) = 0
                     ;                 *this\screen_width( ) = *SB\size
                     ;               EndIf
                     ;             Else
                     ;               If *this\screen_height( ) = 0
                     ;                 *this\screen_height( ) = *SB\size
                     ;               EndIf
                     ;             EndIf
                     ;           EndIf
                  EndIf
               EndIf
               
               ;
               If *bar\area\len 
                  ;                   ; fixed min size
                  ;                   If *bar\area\len < ( *SB\size + *bar\min[1] + *bar\min[2] )
                  ;                      *bar\area\len = ( *SB\size + *bar\min[1] + *bar\min[2] )
                  ;                   EndIf
                  
                  *bar\area\pos  = ( *BB1\size + *bar\min[1] )
                  If *bar\area\pos > *bar\area\len
                     *bar\area\pos = *bar\area\len
                  EndIf
                  ;
                  *bar\area\end = *bar\area\len - ( *BB1\size + *BB2\size )
                  If *bar\area\end < *bar\area\pos
                     ; Debug " ??? "+*bar\area\end +"-*bar\area\end < "+ *bar\area\pos +"-*bar\area\pos "+ *this\class +" "+ClassFromType(*this\type)
                     *bar\area\end = *bar\area\pos
                  EndIf
                  
                  If *this\type = #__type_ToolBar Or 
                     *this\type = #__type_MenuBar Or 
                     *this\type = #__type_PopupBar Or 
                     *this\type = #__type_TabBar
                     ;
                     If *bar\max
                        *bar\thumb\len = *bar\area\end - ( *bar\max - *bar\area\len )
                        *bar\page\end = *bar\max - ( *bar\area\end - *bar\thumb\len )
                        ; *bar\page\end  = *bar\max - ( *bar\area\len - *bar\thumb\len )
                     EndIf
                     ;
                  Else
                     If *bar\page\len
                        ;
                        ; get thumb size
                        *bar\thumb\len = Round(( *bar\area\end / ( *bar\max - *bar\min )) * *bar\page\len, #PB_Round_Nearest )
                        If *bar\thumb\len > *bar\area\end
                           *bar\thumb\len = *bar\area\end
                        EndIf
                        If *bar\thumb\len < *SB\size
                           If *bar\area\end > *SB\size + *bar\thumb\len
                              *bar\thumb\len = *SB\size
                           EndIf
                        EndIf
                        ;
                        ; for the scroll-bar
                        If *bar\max > *bar\page\len
                           *bar\page\end = *bar\max - *bar\page\len
                        Else
                           *bar\page\end = *bar\page\len - *bar\max
                        EndIf
                        ;
                        If *bar\thumb\len = *bar\area\end
                           *bar\page\end = *bar\min
                        EndIf
                        ;
                     Else
                        ; get thumb size
                        *bar\thumb\len = *SB\size
                        If *bar\thumb\len > *bar\area\len
                           *bar\thumb\len = *bar\area\len
                        EndIf
                        ;
                        ; get page end
                        If *bar\max
                           *bar\page\end = *bar\max
                        Else
                           ; one set end
                           If Not *bar\page\end And *bar\area\len
                              *bar\page\end = *bar\area\len - *bar\thumb\len
                              
                              If Not *bar\page\pos
                                 *bar\page\pos = *bar\page\end / 2
                                 *bar\PageChange( ) = *bar\page\pos
                              EndIf
                              ;
                           Else 
                              ; не уверен нужно ли
                              If *bar\fixed = 1
                                 *bar\page\end = *bar\area\len - *bar\thumb\len
                              ElseIf *bar\PageChange( )
                                 *bar\page\end = *bar\area\len - *bar\thumb\len
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  ;
                  If *bar\page\end
                     *bar\percent = ( *bar\area\end - *bar\thumb\len ) / ( *bar\page\end - *bar\min )
                  ElseIf *bar\min
                     *bar\percent = ( *bar\area\end - *bar\thumb\len ) / *bar\min
                  Else
                     *bar\percent = ( *bar\area\end - *bar\thumb\len ) / 1
                  EndIf
                  
                  ;
                  *bar\thumb\end = *bar\area\len - *bar\thumb\len - *BB2\size - *bar\min[2] 
                  If *bar\thumb\end < 0
                     *bar\thumb\end = 0
                  EndIf
                  ; не работает без него пример splitter(e).pb
                  If *bar\thumb\end > *bar\area\end
                     *bar\thumb\end = *bar\area\end
                  EndIf
                  
                  ;                   ; не для splitter
                  ;                   If *bar\thumb\end < *bar\thumb\pos
                  ;                      ; Debug " ??? "+*bar\thumb\end +"-*bar\thumb\end < "+ *bar\thumb\pos +"-*bar\thumb\pos "+ *this\class
                  ;                      *bar\thumb\end = *bar\thumb\pos
                  ;                   EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         ; Debug ""+*bar\PageChange( ) +" "+ *bar\percent +" "+ *bar\min +" "+ *bar\min[2] +" "+ *bar\page\pos +" "+ *bar\area\end +" "+ *bar\thumb\end +" "+ *bar\page\end
         
         ;\\
         ;\\ get thumb pos
         If Not ( *bar\fixed And Not *bar\PageChange( ) )
            If *this\type = #__type_ToolBar Or
               *this\type = #__type_PopupBar Or
               *this\type = #__type_MenuBar Or
               *this\type = #__type_TabBar
               ;                ;
               ;                If *bar\page\pos < *bar\min
               ;                   ; If *bar\max > *bar\page\len
               ;                   *bar\page\pos = *bar\min
               ;                   ; EndIf
               ;                EndIf
               
               
               ;\\ scroll to active tab
               If *this\TabChange( )
                  If Not *bar\thumb\pos
                     ; Debug ""+*bar\page\pos +" "+ *bar\thumb\pos
                     *bar\page\pos = *bar\max
                     ;                   If Not *bar\page\pos
                     ;                      ScrollPos = *bar\max
                     ;                      ScrollPos     = bar_page_pos_( *bar, ScrollPos )
                     ;                      ScrollPos     = bar_invert_page_pos_( *bar, ScrollPos )
                     ;                      *bar\page\pos = ScrollPos
                     ;                   EndIf
                  EndIf
                  ;
                  If *this\TabFocused( ) 
                     If *this\TabFocused( )\_enter = #False
                        If *this\TabFocused( )\ScrollToActive( - 1 )
                           *this\TabFocused( )\ScrollToActive( 1 )
                           ;Debug " tab max - " + *bar\max + " " + " " + *bar\page\pos + " " + *bar\page\end
                           ScrollPos = *bar\max - *this\TabFocused( )\x
                           ;ScrollPos - *bar\area\end                                    ; to left
                           ;ScrollPos - *this\TabFocused( )\width                         ; to right
                           ScrollPos - ( *bar\area\end + *this\TabFocused( )\width ) / 2 ; to center
                           
                           ScrollPos     = bar_page_pos_( *bar, ScrollPos )
                           ScrollPos     = bar_invert_page_pos_( *bar, ScrollPos )
                           *bar\page\pos = ScrollPos
                        EndIf
                     EndIf
                  EndIf
               Else
                  ; Debug *bar\page\pos
                  ;                                     If Not *bar\page\pos
                  ;                                        ScrollPos = *bar\max
                  ;                                        ScrollPos     = bar_page_pos_( *bar, ScrollPos )
                  ;                                        ScrollPos     = bar_invert_page_pos_( *bar, ScrollPos )
                  ;                                        *bar\page\pos = ScrollPos
                  ;                                     EndIf
               EndIf
               
            Else
               ; fixed mac-OS splitterGadget
               If *bar\min > *bar\page\pos
                  If *bar\max > *bar\page\len
                     If *bar\page\end
                        *bar\page\pos = *bar\page\end + *bar\page\pos
                        Debug " bar error pos"
                     Else
                        Debug " bar error end - " + *bar\page\end
                     EndIf
                  EndIf
               EndIf
               
               ; for the scrollarea children's
               If *bar\page\end And *bar\page\pos > *bar\page\end
                  ; Debug " bar end change - " + *bar\page\pos +" "+ *bar\page\end
                  *bar\PageChange( )  = *bar\page\pos - *bar\page\end
                  *bar\page\pos       = *bar\page\end
                  *this\BarChange( ) = 0
               EndIf
            EndIf
            
            ;\\ 
            If Not *this\BarChange( )
               ThumbPos = bar_thumb_pos_( *bar, *bar\page\pos )
               ;
               If *bar\invert
                  ThumbPos = *bar\thumb\end - ThumbPos
               Else
                  ThumbPos = *bar\area\pos + ThumbPos
               EndIf
               ;
               If ThumbPos < *bar\area\pos : ThumbPos = *bar\area\pos : EndIf
               If ThumbPos > *bar\thumb\end : ThumbPos = *bar\thumb\end : EndIf
               ;
               If *bar\thumb\pos <> ThumbPos
                  *bar\ThumbChange( ) = *bar\thumb\pos - ThumbPos
                  *bar\thumb\pos = ThumbPos
               EndIf
               ;
               If *this\type = #__type_Splitter
                  If MouseButtonPress( )
                     If *bar\ThumbChange( )
                        If Not *bar\PageChange( ) 
                           *bar\PageChange( )  = 1
                        EndIf
                     EndIf
                  EndIf              
               EndIf               
            EndIf
            ;
         EndIf
         
         ;
         ;\\ splitter fixed size
         If *bar\fixed 
            If *bar\PageChange( ) 
               If *bar\fixed = 1
                  *bar\fixed[1] = *bar\thumb\pos
               EndIf
               If *bar\fixed = 2
                  *bar\fixed[2] = ( *bar\thumb\end + *bar\min[2] ) - *bar\thumb\pos 
               EndIf
            Else
               
               If *bar\fixed = 1
                  If *bar\thumb\end > *bar\fixed[1]
                     ThumbPos = *bar\fixed[1]
                  Else
                     If *bar\min[1] < *bar\thumb\end
                        ThumbPos = *bar\thumb\end
                     Else
                        If *bar\min[1] > ( *bar\thumb\end + *bar\min[2] )
                           ThumbPos = ( *bar\thumb\end + *bar\min[2] )
                        Else
                           If *bar\min[1] > *bar\area\len - *bar\thumb\len
                              ThumbPos = *bar\area\len - *bar\thumb\len
                           Else
                              ThumbPos = *bar\min[1]
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               ;
               If *bar\fixed = 2
                  If *bar\min[1] < ( *bar\thumb\end + *bar\min[2] ) - *bar\fixed[2] 
                     ThumbPos = ( *bar\thumb\end + *bar\min[2] ) - *bar\fixed[2] 
                  Else
                     If *bar\min[1] > ( *bar\thumb\end + *bar\min[2] )
                        ThumbPos = ( *bar\thumb\end + *bar\min[2] )
                     Else
                        If *bar\min[1] > *bar\area\len - *bar\thumb\len
                           ThumbPos = *bar\area\len - *bar\thumb\len
                        Else
                           ThumbPos = *bar\min[1]
                        EndIf
                     EndIf
                  EndIf
               EndIf
               ;
               If *bar\thumb\pos <> ThumbPos
                  *bar\ThumbChange( ) = *bar\thumb\pos - ThumbPos
                  *bar\thumb\pos = ThumbPos
                  ; Debug ""+*this\class +" "+  *bar\fixed +" "+ ThumbPos
               EndIf
               
            EndIf
         EndIf
         
         ;
         ;\\ disable/enable
         ;\\ buttons(left&top)-tab(right&bottom)
         If bar_in_start_( *bar )
            If *BB1\disable = #False
               *BB1\disable = #True
               
               ;\\
               If *this\type = #__type_Spin Or
                  *this\type = #__type_Scroll 
                  ;
                  *BB1\ColorState( ) = #__s_3
               EndIf
               
               ;\\
               If *this\type = #__type_ToolBar Or
                  *this\type = #__type_PopupBar Or
                  *this\type = #__type_MenuBar Or
                  *this\type = #__type_TabBar
                  ;
                  *BB1\hide = 1
                  *BB1\ColorState( ) = #__s_3
               EndIf
               
               ;\\
               If *this\cursor[3]
                  If *this\press And 
                     *this\type = #__type_splitter
                     ;
                     If SetCursor( *this, *this\cursor[3] )
                        ChangeCursor( *this, *this\cursor[3] )
                     EndIf
                  EndIf
               EndIf
            EndIf
         Else
            If *BB1\disable = #True
               *BB1\disable = #False
               
               ;\\
               If *this\type = #__type_Spin Or
                  *this\type = #__type_Scroll 
                  ;
                  *BB1\ColorState( ) = #__s_0
               EndIf
               
               ;\\
               If *this\type = #__type_ToolBar Or
                  *this\type = #__type_PopupBar Or
                  *this\type = #__type_MenuBar Or
                  *this\type = #__type_TabBar
                  ;
                  *BB1\hide = 0
                  *BB1\ColorState( ) = #__s_0
               EndIf
               
               ;\\
               If *this\cursor[1]
                  If *this\press And 
                     *this\type = #__type_splitter
                     ;
                     If SetCursor( *this, *this\cursor[1] )
                        ChangeCursor( *this, *this\cursor[1] )
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ buttons(right&bottom)-tab(left&top)
         If bar_in_stop_( *bar )
            If *BB2\disable = #False
               *BB2\disable = #True
               
               ;\\
               If *this\type = #__type_Spin Or
                  *this\type = #__type_Scroll 
                  ;
                  *BB2\ColorState( ) = #__s_3
               EndIf
               
               ;\\
               If *this\type = #__type_ToolBar Or
                  *this\type = #__type_PopupBar Or
                  *this\type = #__type_MenuBar Or
                  *this\type = #__type_TabBar
                  ;
                  *BB2\hide = 1
                  *BB2\ColorState( ) = #__s_3
               EndIf
               
               ;\\
               If *this\cursor[2]
                  If *this\press And 
                     *this\type = #__type_splitter
                     ;
                     If SetCursor( *this, *this\cursor[2] )
                        ChangeCursor( *this, *this\cursor[2] )
                     EndIf
                  EndIf
               EndIf
            EndIf
         Else
            If *BB2\disable = #True
               *BB2\disable = #False
               ;\\
               If *this\type = #__type_Spin Or
                  *this\type = #__type_Scroll
                  ;
                  *BB2\ColorState( ) = #__s_0
               EndIf
               
               ;\\
               If *this\type = #__type_ToolBar Or
                  *this\type = #__type_PopupBar Or
                  *this\type = #__type_MenuBar Or
                  *this\type = #__type_TabBar
                  ;
                  *BB2\hide = 0
                  *BB2\ColorState( ) = #__s_0
               EndIf
               
               ;\\
               If *this\cursor[1]
                  If *this\press And 
                     *this\type = #__type_splitter
                     ;
                     If SetCursor( *this, *this\cursor[1] )
                        ChangeCursor( *this, *this\cursor[1] )
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         
         ;
         ;\\ resize buttons coordinate
         ;\\
         If *this\type = #__type_Scroll
            ;\\ hide state
            If is_integral_( *this )
               If *bar\max > *bar\page\len
                  If Not *this\hide[1]
                     *this\hide = 0
                  EndIf
               Else
                  If *this\hide = 0
                     *this\hide = 1
                     ; 
                     *bar\page\pos = 0
                  EndIf
               EndIf
            EndIf
            
            ;\\ button-thumb
            If *bar\thumb\len
               If *BB1\ColorState( ) = #__s_3 And
                  *BB2\ColorState( ) = #__s_3
                  
                  If *SB\disable = #False
                     *SB\disable = #True
                     
                     *SB\ColorState( ) = #__s_3
                  EndIf
               Else
                  If *SB\disable = #True
                     *SB\disable = #False
                     
                     *SB\ColorState( ) = #__s_0
                  EndIf
               EndIf
               
               ;\\
               If *bar\vertical
                  *SB\x      = *this\frame_x( ) + DPIScaled(1) ; white line size
                  *SB\width  = *this\frame_width( ) - DPIScaled(1) ; white line size
                  *SB\y      = *this\inner_y( ) + *bar\thumb\pos
                  *SB\height = *bar\thumb\len
               Else
                  *SB\y      = *this\frame_y( ) + DPIScaled(1) ; white line size
                  *SB\height = *this\frame_height( ) - DPIScaled(1) ; white line size
                  *SB\x      = *this\inner_x( ) + *bar\thumb\pos
                  *SB\width  = *bar\thumb\len
               EndIf
            Else
               If *bar\vertical
                  *SB\height = 0
               Else
                  *SB\width  = 0
               EndIf
            EndIf
            
            If *BB1\size
               If *bar\vertical
                  ; Top button coordinate on vertical scroll bar
                  *BB1\x      = *SB\x
                  *BB1\width  = *SB\width
                  ;
                  If *bar\thumb\len
                     *BB1\y      = *this\frame_y( )
                     *BB1\height = *BB1\size
                  Else
                     *BB1\y      = *this\screen_y( )
                     *BB1\height = *this\screen_height( ) / 2 - Bool( Not *this\frame_height( ) % 2 )
                  EndIf
               Else
                  ; Left button coordinate on horizontal scroll bar
                  *BB1\y      = *SB\y
                  *BB1\height = *SB\height
                  ;
                  If *bar\thumb\len
                     *BB1\x      = *this\frame_x( )
                     *BB1\width  = *BB1\size
                  Else
                     *BB1\x     = *this\frame_x( )
                     *BB1\width = *this\frame_width( ) / 2 - Bool( Not *this\frame_width( ) % 2 )
                  EndIf
               EndIf
            EndIf
            
            If *BB2\size
               If *bar\vertical
                  ; Botom button coordinate on vertical scroll bar
                  *BB2\x      = *SB\x
                  *BB2\width  = *SB\width
                  ;
                  If *bar\thumb\len
                     *BB2\height = *BB2\size
                     *BB2\y      = *this\frame_y( ) + *this\frame_height( ) - *BB2\height
                  Else
                     *BB2\height = *this\frame_height( ) / 2
                     *BB2\y      = *this\frame_y( ) + *BB2\height + Bool( *this\frame_height( ) % 2 )
                  EndIf
               Else
                  ; Right button coordinate on horizontal scroll bar
                  *BB2\y      = *SB\y
                  *BB2\height = *SB\height
                  ;
                  If *bar\thumb\len
                     *BB2\width  = *BB2\size
                     *BB2\x      = *this\frame_x( ) + *this\frame_width( ) - *BB2\width
                  Else
                     *BB2\width = *this\frame_width( ) / 2
                     *BB2\x     = *this\frame_x( ) + *BB2\width + Bool( *this\frame_width( ) % 2 )
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If *bar\PageChange( )
               If *this\parent And *this\parent\scroll
                  If *bar\vertical
                     If *this\parent\scroll\v = *this
                        If Not *this\parent\text\editable
                           *this\parent\WidgetChange( ) = - 1
                        EndIf
                        
                        If *this\parent\scroll_y( ) <> - *bar\page\pos
                           *this\parent\scroll_y( ) = - *bar\page\pos
                           *bar\AreaChange( ) = 1
                        EndIf
                        
                        ;\\ Area children's x&y auto move
                        If *this\parent\type = #__type_ScrollArea And IsGadget(*this\parent\scroll\gadget[2])
                           ResizeGadget(*this\parent\scroll\gadget[2], #PB_Ignore, DPIUnScaledY(*this\parent\scroll_y( )), #PB_Ignore, #PB_Ignore)
                           CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                              UpdateWindow_(GadgetID(*this\parent\scroll\gadget[2]))
                           CompilerEndIf
                        Else
                           If StartEnum( *this\parent )
                              If *this\parent = widget( )\parent 
                                 If *this\parent\scroll\v <> widget( ) And
                                    *this\parent\scroll\h <> widget( ) And Not widget( )\align
                                    ;
                                    If widget( )\child =- 1
                                       Resize( widget( ), #PB_Ignore, ( widget( )\container_y( ) + *bar\PageChange( ) ), #PB_Ignore, #PB_Ignore, 0 )
                                    Else
                                       Resize( widget( ), #PB_Ignore, ( widget( )\container_y( ) + *bar\PageChange( ) ) - *this\parent\scroll_y( ), #PB_Ignore, #PB_Ignore, 0 )
                                    EndIf
                                 EndIf
                              EndIf
                              StopEnum( )
                           EndIf
                        EndIf
                     EndIf
                  Else
                     If *this\parent\scroll\h = *this
                        If Not *this\parent\text\editable
                           *this\parent\WidgetChange( ) = - 2
                        EndIf
                        
                        If *this\parent\scroll_x( ) <> - *bar\page\pos
                           *this\parent\scroll_x( ) = - *bar\page\pos
                           *bar\AreaChange( ) = 1
                        EndIf
                        ;
                        ;\\ Area children's x&y auto move
                        If *this\parent\type = #__type_ScrollArea And IsGadget(*this\parent\scroll\gadget[2])
                           ResizeGadget(*this\parent\scroll\gadget[2], DPIUnScaledX(*this\parent\scroll_x( )), #PB_Ignore, #PB_Ignore, #PB_Ignore)
                           CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                              UpdateWindow_(GadgetID(*this\parent\scroll\gadget[2]))
                           CompilerEndIf
                        Else
                           If StartEnum( *this\parent )
                              If *this\parent = widget( )\parent 
                                 If *this\parent\scroll\v <> widget( ) And
                                    *this\parent\scroll\h <> widget( ) And Not widget( )\align
                                    ;
                                    If widget( )\child =- 1
                                       Resize( widget( ), ( widget( )\container_x( ) + *bar\PageChange( ) ), #PB_Ignore, #PB_Ignore, #PB_Ignore, 0 )
                                    Else
                                       Resize( widget( ), ( widget( )\container_x( ) + *bar\PageChange( ) ) - *this\parent\scroll_x( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, 0 )
                                    EndIf
                                 EndIf
                              EndIf    
                              StopEnum( )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ Ok
         If *this\type = #__type_Splitter
            ;
            If *bar\vertical
               *BB1\width  = *this\frame_width( )
               *BB1\height = *bar\thumb\pos
               
               *BB1\x = *this\frame_x( )
               *BB2\x = *this\frame_x( )
               
               ;             If Not (( #PB_Compiler_OS = #PB_OS_MacOS ) And isgadget( *this\split_1( ) ) And Not *this\parent )
               *BB1\y = *this\frame_y( )
               *BB2\y = *this\frame_y( ) + ( *bar\thumb\pos + *bar\thumb\len )
               ;             Else
               ;               *BB1\y      = *this\frame_height( ) - *BB1\height
               ;             EndIf
               
               *BB2\height = *bar\area\len - ( *bar\thumb\pos + *bar\thumb\len )
               *BB2\width  = *this\frame_width( )
               
               ; seperatior pos&size
               If *bar\thumb\len
                  *SB\x      = *this\frame_x( )
                  *SB\width  = *this\frame_width( )
                  *SB\y      = *this\inner_y( ) + *bar\thumb\pos
                  *SB\height = *bar\thumb\len
               EndIf
               
            Else
               *BB1\width  = *bar\thumb\pos
               *BB1\height = *this\frame_height( )
               
               *BB1\y = *this\frame_y( )
               *BB2\y = *this\frame_y( )
               *BB1\x = *this\frame_x( )
               *BB2\x = *this\frame_x( ) + ( *bar\thumb\pos + *bar\thumb\len )
               
               *BB2\width  = *bar\area\len - ( *bar\thumb\pos + *bar\thumb\len )
               *BB2\height = *this\frame_height( )
               
               ; seperatior pos&size
               If *bar\thumb\len
                  *SB\y      = *this\frame_y( )
                  *SB\height = *this\frame_height( )
                  *SB\x      = *this\inner_x( ) + *bar\thumb\pos
                  *SB\width  = *bar\thumb\len
               EndIf
            EndIf
            
            ; Splitter first-child auto resize
            If IsGadget( *this\split_1( ) )
               ;             If is_root_container_( *this )
               CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                  ; PB(ResizeGadget)( *this\split_1( ), DPIUnScaledX(*BB1\x), DPIUnScaledY(*BB1\y), DPIUnScaledX(*BB1\width), DPIUnScaledY(*BB1\height) )
                  SetWindowPos_( GadgetID(*this\split_1( )), #HWND_TOP, *BB1\x, *BB1\y, *BB1\width, *BB1\height, #SWP_NOACTIVATE )
                  UpdateWindow_( GadgetID(*this\root\canvas\gadget))
               CompilerElse
                  PB(ResizeGadget)( *this\split_1( ), *BB1\x, *BB1\y, *BB1\width, *BB1\height )
               CompilerEndIf
               ;             Else
               ;               PB(ResizeGadget)( *this\split_1( ),
               ;                                 *BB1\x + GadgetX( *this\root\canvas\gadget ),
               ;                                 *BB1\y + GadgetY( *this\root\canvas\gadget ),
               ;                                 *BB1\width, *BB1\height )
               ;             EndIf
               
            Else
               If *this\split_1( ) > 0 And *this\split_1( ) <> *this
                  If *this\split_1( )\frame_x( ) <> *BB1\x Or
                     *this\split_1( )\frame_y( ) <> *BB1\y Or
                     *this\split_1( )\frame_width( ) <> *BB1\width Or
                     *this\split_1( )\frame_height( ) <> *BB1\height
                     
                     If *this\split_1( )\type = #__type_window
                        Resize( *this\split_1( ),
                                *BB1\x - *this\frame_x( ),
                                *BB1\y - *this\frame_y( ),
                                *BB1\width - *this\split_1( )\fs * 2 - *this\split_1( )\fs[1] - *this\split_1( )\fs[3],
                                *BB1\height - *this\split_1( )\fs * 2 - *this\split_1( )\fs[2] - *this\split_1( )\fs[4], 0 )
                     Else
                        Resize( *this\split_1( ),
                                *BB1\x - *this\frame_x( ),
                                *BB1\y - *this\frame_y( ),
                                *BB1\width, *BB1\height, 0 )
                     EndIf
                     
                  EndIf
               EndIf
            EndIf
            
            ; Splitter second-child auto resize
            If IsGadget( *this\split_2( ) )
               ;             If is_root_container_( *this )
               CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                  ; PB(ResizeGadget)( *this\split_2( ), DPIUnScaledX(*BB2\x), DPIUnScaledY(*BB2\y), DPIUnScaledX(*BB2\width), DPIUnScaledY(*BB2\height) )
                  SetWindowPos_( GadgetID(*this\split_2( )), #HWND_TOP, *BB2\x, *BB2\y, *BB2\width, *BB2\height, #SWP_NOACTIVATE )
                  UpdateWindow_( GadgetID(*this\root\canvas\gadget))
               CompilerElse
                  PB(ResizeGadget)( *this\split_2( ), *BB2\x, *BB2\y, *BB2\width, *BB2\height )
               CompilerEndIf
               ;             Else
               ;               PB(ResizeGadget)( *this\split_2( ),
               ;                                 *BB2\x + GadgetX( *this\root\canvas\gadget ),
               ;                                 *BB2\y + GadgetY( *this\root\canvas\gadget ),
               ;                                 *BB2\width, *BB2\height )
               ;             EndIf
               
            Else
               If *this\split_2( ) > 0 And *this\split_2( ) <> *this
                  If *this\split_2( )\frame_x( ) <> *BB2\x Or
                     *this\split_2( )\frame_y( ) <> *BB2\y Or
                     *this\split_2( )\frame_width( ) <> *BB2\width Or
                     *this\split_2( )\frame_height( ) <> *BB2\height
                     
                     If *this\split_2( )\type = #__type_window
                        Resize( *this\split_2( ),
                                *BB2\x - *this\frame_x( ),
                                *BB2\y - *this\frame_y( ),
                                *BB2\width - *this\split_1( )\fs * 2 - *this\split_1( )\fs[1] - *this\split_1( )\fs[3],
                                *BB2\height - *this\split_1( )\fs * 2 - *this\split_1( )\fs[2] - *this\split_1( )\fs[4], 0 )
                     Else
                        Resize( *this\split_2( ),
                                *BB2\x - *this\frame_x( ),
                                *BB2\y - *this\frame_y( ),
                                *BB2\width, *BB2\height, 0 )
                     EndIf
                     
                  EndIf
               EndIf
            EndIf
            
         EndIf
         
         ;\\
         If *this\type = #__type_Track
            If bar_in_start_( *bar ) Or 
               bar_in_stop_( *bar ) Or 
               constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks )
               ;
               If *bar\vertical 
                  If *bar\invert
                     *SB\arrow\direction = 2 ; вправо
                  Else
                     *SB\arrow\direction = 0 ; влево
                  EndIf
               Else
                  If *bar\invert
                     *SB\arrow\direction = 1 ; верх
                  Else
                     *SB\arrow\direction = 3 ; вниз
                  EndIf
               EndIf
            Else
               If ( *bar\direction > 0 And *bar\invert ) Or 
                  ( *bar\direction < 0 And Not *bar\invert )
                  ;
                  If *bar\vertical
                     *SB\arrow\direction = 1 ; верх
                  Else
                     *SB\arrow\direction = 0 ; влево
                  EndIf
               ElseIf ( *bar\direction < 0 And *bar\invert ) Or 
                      ( *bar\direction > 0 And Not *bar\invert )
                  ;
                  If *bar\vertical
                     *SB\arrow\direction = 3 ; вниз
                  Else
                     *SB\arrow\direction = 2 ; вправо
                  EndIf
               EndIf
            EndIf
            
            ; track bar draw coordinate
            If *bar\vertical
               If *bar\thumb\len
                  *SB\y      = *this\frame_y( ) + *bar\thumb\pos
                  *SB\height = *bar\thumb\len
               EndIf
               
               *BB1\width = DPIScaled( #__tracksize )
               *BB2\width = *BB1\width
               *SB\width  = *SB\size + ( Bool( *SB\size < 10 ) * *SB\size )
               
               *BB1\y      = *this\frame_y( )
               *BB1\height = *bar\thumb\pos
               
               *BB2\y      = *BB1\y + *BB1\height + *bar\thumb\len
               *BB2\height = *this\frame_height( ) - *bar\thumb\pos - *bar\thumb\len
               
               If *bar\invert
                  *BB1\x = *this\frame_x( ) + DPIScaled(6)
               Else
                  *BB1\x = *this\frame_x( ) + *this\frame_width( ) + DPIScaled(6) - *SB\size - 1
               EndIf
               
               *BB2\x = *BB1\x
               *SB\x  = *BB1\x - ( *SB\size - *BB1\width )/2
            Else
               If *bar\thumb\len
                  *SB\x     = *this\frame_x( ) + *bar\thumb\pos
                  *SB\width = *bar\thumb\len
               EndIf
               
               *BB1\height = DPIScaled( #__tracksize )
               *BB2\height = *BB1\height
               *SB\height  = *SB\size + ( Bool( *SB\size < 10 ) * *SB\size )
               
               *BB1\x     = *this\frame_x( )
               *BB1\width = *bar\thumb\pos
               
               *BB2\x     = *BB1\x + *BB1\width + *bar\thumb\len
               *BB2\width = *this\frame_width( ) - *bar\thumb\pos - *bar\thumb\len
               
               If *bar\invert
                  *BB1\y = *this\frame_y( ) + *this\frame_height( ) + DPIScaled(6) - *SB\size - 1
               Else
                  *BB1\y = *this\frame_y( ) + DPIScaled(6)
               EndIf
               
               *BB2\y = *BB1\y
               *SB\y  = *BB1\y - ( *SB\size - *BB1\height )/2
            EndIf
         EndIf
         
         ;\\
         If *this\type = #__type_ToolBar Or
            *this\type = #__type_PopupBar Or
            *this\type = #__type_MenuBar Or
            *this\type = #__type_TabBar
            ;
            ; inner coordinate
            If *bar\vertical
               *this\inner_x( )      = *this\frame_x( )
               *this\inner_width( )  = *this\frame_width( ) - 1
               *this\inner_y( )      = *this\frame_y( ) + Bool( *BB2\hide = #False ) * ( *BB2\size + *this\fs )
               *this\inner_height( ) = *this\frame_y( ) + *this\frame_height( ) - *this\inner_y( ) - Bool( *BB1\hide = #False ) * ( *BB1\size + *this\fs )
            Else
               *this\inner_y( )      = *this\frame_y( )
               *this\inner_height( ) = *this\frame_height( ) - 1
               *this\inner_x( )      = *this\frame_x( ) + Bool( *BB2\hide = #False ) * ( *BB2\size + *this\fs )
               *this\inner_width( )  = *this\frame_x( ) + *this\frame_width( ) - *this\inner_x( ) - Bool( *BB1\hide = #False ) * ( *BB1\size + *this\fs )
            EndIf
            
            If *BB2\size And Not *BB2\hide
               If *bar\vertical
                  ; Top button coordinate on vertical scroll bar
                  ;  *BB2\x = *this\frame_x( ) + ( *this\frame_width( ) - *BB2\size )/2
                  *BB2\y = *this\inner_y( ) - *BB2\size
               Else
                  ; Left button coordinate on horizontal scroll bar
                  *BB2\x = *this\inner_x( ) - *BB2\size
                  ;  *BB2\y = *this\frame_y( ) + ( *this\frame_height( ) - *BB2\size )/2
               EndIf
               If *BB2\width <> *BB2\size
                  *BB2\width = *BB2\size
               EndIf
               If *BB2\height <> *BB2\size
                  *BB2\height = *BB2\size
               EndIf
            EndIf
            
            If *BB1\size And Not *BB1\hide
               If *bar\vertical
                  ; Botom button coordinate on vertical scroll bar
                  ;  *BB1\x = *this\frame_x( ) + ( *this\frame_width( ) - *BB1\size )/2
                  *BB1\y = *this\inner_y( ) + *this\inner_height( )
               Else
                  ; Right button coordinate on horizontal scroll bar
                  *BB1\x = *this\inner_x( ) + *this\inner_width( )
                  ;  *BB1\y = *this\frame_y( ) + ( *this\frame_height( ) - *BB1\size )/2
               EndIf
               If *BB1\width <> *BB1\size
                  *BB1\width = *BB1\size
               EndIf
               If *BB1\height <> *BB1\size
                  *BB1\height = *BB1\size
               EndIf
            EndIf
            
            ;If *bar\thumb\len
            If *bar\vertical
               *SB\x      = *this\inner_x( )
               *SB\width  = *this\inner_width( )
               *SB\height = *bar\max
               *SB\y      = *this\frame_y( ) + ( *bar\thumb\pos - *bar\thumb\end )
            Else
               *SB\y      = *this\inner_y( )
               *SB\height = *this\inner_height( )
               *SB\width  = *bar\max
               *SB\x      = *this\frame_x( ) + ( *bar\thumb\pos - *bar\thumb\end )
            EndIf
            ;EndIf
         EndIf
         
         ;-\\ UPDATE-SPIN
         If *this\type = #__type_Spin
            *SB\x      = *this\inner_x( )
            *SB\y      = *this\inner_y( )
            *SB\width  = *this\inner_width( )
            *SB\height = *this\inner_height( )
            
            If *this\flag & #__spin_Plus
               ; spin buttons numeric plus -/+
               If *bar\vertical
                  If *BB1\size
                     *BB1\x      = *this\frame_x( )
                     *BB1\y      = ( *this\frame_y( ) + *this\frame_height( ) ) - *BB1\size
                     *BB1\width  = *this\frame_width( )
                     *BB1\height = *BB1\size
                  EndIf
                  If *BB2\size
                     *BB2\x      = *this\frame_x( )
                     *BB2\y      = *this\frame_y( )
                     *BB2\width  = *this\frame_width( )
                     *BB2\height = *BB2\size
                  EndIf
               Else
                  If *BB1\size
                     *BB1\x      = *this\frame_x( )
                     *BB1\y      = *this\frame_y( )
                     *BB1\width  = *BB1\size
                     *BB1\height = *this\frame_height( )
                  EndIf
                  If *BB2\size
                     *BB2\x      = ( *this\frame_x( ) + *this\frame_width( ) ) - *BB2\size
                     *BB2\y      = *this\frame_y( )
                     *BB2\width  = *BB2\size
                     *BB2\height = *this\frame_height( )
                  EndIf
               EndIf
            Else
               Protected draw_tipe = 0;DPIScaled(1)
               If *BB2\size
                  If *this\fs[1]
                     *BB2\x      = *this\frame_x( ) + draw_tipe * 2
                  EndIf
                  If *this\fs[3]
                     *BB2\x      = ( *this\frame_x( ) + *this\frame_width( ) ) - *SB\size + draw_tipe * 2
                  EndIf
                  *BB2\y      = *this\frame_y( ) + draw_tipe * 2
                  *BB2\width  = *SB\size - draw_tipe * 4
                  *BB2\height = *BB2\size - draw_tipe * 3
               EndIf
               If *BB1\size
                  *BB1\x      = *BB2\x
                  *BB1\y      = ( *this\frame_y( ) + *this\frame_height( ) ) - *BB1\size + draw_tipe
                  *BB1\height = *BB1\size - draw_tipe * 3
                  *BB1\width  = *BB2\width
               EndIf
            EndIf
         EndIf
         
         ; ;          
         ; ;          ;Debug ">>>>>>>>>"+Str(*bar)+">>>>>>>>"
         ; ;          Debug " - ["+ *this\class +"] "+
         ; ;                *bar\percent +" >< "+
         ; ;                *bar\min +" "+
         ; ;                *bar\max +" >< "+
         ; ;                *bar\page\pos +" "+
         ; ;                *bar\page\len +" "+
         ; ;                *bar\page\end +" "+
         ; ;                *bar\page\change +" >< "+
         ; ;                *bar\area\pos +" "+
         ; ;                *bar\area\len +" "+
         ; ;                *bar\thumb\end +" "+
         ; ;                *bar\area\change +" >< "+
         ; ;                *bar\thumb\pos +" "+
         ; ;                *bar\thumb\len +" "+
         ; ;                *bar\area\end +" "+
         ; ;                *bar\thumb\change +""
         ; ;          Debug "<<<<<<<<<<<<<<<<<"
         ;  
         
         
         ;\\
         If *bar\PageChange( )
            ;\\
            If *this\type = #__type_Progress
               *this\text\string = "%" + Str( *bar\page\pos )
               ;*this\text\change = 1
            EndIf
            
            ;\\
            If *this\type = #__type_Spin
               If *this\stringbar
                  Debug " update spin-change " + *bar\PageChange( ) + " " + Str( *bar\thumb\pos - *bar\area\pos )
                  Protected i
                  For i = 0 To 3
                     If *this\scroll\increment = ValF( StrF( *this\scroll\increment, i ) )
                        SetText( *this\stringbar, StrF( *bar\page\pos, i ) )
                        ;SetText( *this\stringbar, StrF( ( *bar\thumb\pos - *bar\area\pos ), i ) )
                        Break
                     EndIf
                  Next
               EndIf
            EndIf
            
            ;\\ post change event
            If mode = 2
               If is_scrollbars_( *this )
                  If *this\type = #__type_Scroll
                     Post( *this\parent, #__event_ScrollChange, *this, *bar\page\pos ) ; *bar\PageChange( ) )
                     If *this\parent\type = #__type_tree Or 
                        *this\parent\type = #__type_listicon Or 
                        *this\parent\type = #__type_listview
                        *this\parent\WidgetChange( ) = 1
                     EndIf
                  EndIf
               Else
                  ; scroll area change
                  ;__gui\event\queuesmask = 0
                  ;Post( *this, #__event_Change, EnteredButton( ), *bar\PageChange( ))
                  AddEvents( *this, #__event_Change,  EnteredButton( ), *bar\PageChange( ))
               EndIf  
            EndIf
            
            *this\BarChange( ) = 0
            *bar\PageChange( ) = 0
            *bar\ThumbChange( ) = 0
            
            ProcedureReturn #True   
         EndIf
      EndProcedure
      
      Procedure.b bar_PageChange( *this._s_WIDGET, ScrollPos.l, mode.b = 1 )
         Protected result.b, *bar._s_BAR = *this\bar
         
         If *bar\area\len
            If Not *bar\max
               *bar\page\end = *bar\area\len - *bar\thumb\len
            EndIf
            
            ;????
            If *bar\thumb\len
               If *bar\thumb\len = *bar\area\end 
                  ScrollPos = *bar\min
               EndIf
            EndIf
            
            If ScrollPos > *bar\page\end 
               ScrollPos = *bar\page\end
            EndIf
         EndIf
         
         If Not *bar\button\disable 
            If ScrollPos < *bar\min
               If *bar\max > *bar\page\len
                  ScrollPos = *bar\min
               EndIf
            EndIf
            If ScrollPos > *bar\page\end
               If *bar\page\end
                  ScrollPos = *bar\page\end
               Else
                  If *bar\thumb\end ; TODO - ? example-splitter(3)
                     ScrollPos = bar_page_pos_( *bar, *bar\thumb\end ) - ScrollPos
                  EndIf
               EndIf
            EndIf
            
            If *bar\page\pos <> ScrollPos
               If *bar\page\pos > ScrollPos
                  *bar\direction =- 1
               Else
                  *bar\direction = 1
               EndIf
               ;
               *bar\PageChange( ) = *bar\page\pos - ScrollPos
               *bar\page\pos      = ScrollPos
               
               ; Debug ""+*this +" "+ ScrollPos +" "+ *bar\page\end +" "+ *bar\thumb\len +" "+ *bar\area\end +" "+ *bar\page\pos +" "+ Str(*bar\page\end-*bar\min[2])
               
               result = *bar\PageChange( )
            EndIf
            
            If *this\BarChange( ) Or result
               ; Debug ""+*this +" "+ result +" "+ *bar\PageChange( )
               If bar_Update( *this, mode)
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.b bar_ThumbChange( *this._s_WIDGET, ThumbPos.i )
         Protected *bar._s_BAR = *this\bar
         Protected ScrollPos,d
         
         If ThumbPos < *bar\area\pos : ThumbPos = *bar\area\pos : EndIf
         If ThumbPos > *bar\thumb\end : ThumbPos = *bar\thumb\end : EndIf
         
         If *bar\thumb\pos <> ThumbPos
            *bar\ThumbChange( ) = *bar\thumb\pos - ThumbPos
            *bar\thumb\pos = ThumbPos
            
            If Not ( *this\type = #__type_Track And constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks ))
               *this\BarChange( ) = 1
            EndIf
            
            ScrollPos = bar_page_pos_( *bar, ThumbPos  )
            ScrollPos = bar_invert_page_pos_( *bar, ScrollPos )
            
            bar_PageChange( *this, ScrollPos, 2 ) ; and post change event 
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      Procedure.l bar_SetAttribute( *this._s_WIDGET, Attribute.l, *value )
         Protected result.l
         Protected value = *value
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         With *this
            ;\\
            If Attribute = #__flag_Invert
               If *bar\invert <> Bool( value )
                  *bar\invert = Bool( value )
                  result      = 1
               EndIf
            EndIf
            
            ;\\
            If Attribute = #__bar_ScrollStep
               If *this\scroll\increment <> value
                  *this\scroll\increment = value
                  result                 = 1
               EndIf
            EndIf
            
            ;\\
            If *this\type = #__type_Splitter
               Select Attribute
                  Case #PB_Splitter_FirstMinimumSize
                     *bar\min[1] = DPIScaled(*value)
                     result = Bool( *bar\max )
                     
                  Case #PB_Splitter_SecondMinimumSize
                     *bar\min[2] = DPIScaled(*value)
                     result = Bool( *bar\max )
                     
                  Case #PB_Splitter_FirstGadget
                     result                   = - 1
                     *this\split_1( )         = *value
                     *this\bar\button[1]\hide = Bool( IsGadget( *this\split_1( ) ) Or *this\split_1( ) > 0 )
                     
                     If IsGadget( *this\split_1( ) )
                        Debug "bar_is_first_gadget_ " + IsGadget( *this\split_1( ) )
                        parent::set( *this\split_1( ), *this\root\canvas\GadgetID )
                     ElseIf *this\split_1( ) > 65535
                        SetParent( *this\split_1( ), *this )
                     Else
                        *this\split_1( ) = 0
                     EndIf
                     
                  Case #PB_Splitter_SecondGadget
                     result                   = - 1
                     *this\split_2( )         = *value
                     *this\bar\button[2]\hide = Bool( IsGadget( *this\split_2( ) ) Or *this\split_2( ) > 0 )
                     
                     If IsGadget( *this\split_2( ) )
                        Debug "bar_is_second_gadget_ " + IsGadget( *this\split_2( ) )
                        parent::set( *this\split_2( ), *this\root\canvas\GadgetID )
                     ElseIf *this\split_2( ) > 65535
                        SetParent( *this\split_2( ), *this )
                     Else
                        *this\split_2( ) = 0
                     EndIf
                     
               EndSelect
            EndIf
            
            ;\\
            If *this\type <> #__type_Splitter
               Select Attribute
                  Case #__bar_minimum
                     If *bar\min <> *value ;And Not *value < 0
                                           ;*bar\AreaChange( ) = *bar\min - value
                        If *bar\page\pos < *value
                           *bar\page\pos = *value
                        EndIf
                        *bar\min = *value
                        ; Debug  " min " + *bar\min + " max " + *bar\max
                        result = #True
                     EndIf
                     
                  Case #__bar_maximum
                     If *bar\max <> *value ;And Not ( *value < 0 And Not #__bar_minus)
                                           ;*bar\AreaChange( ) = *bar\max - value
                        
                        If *bar\min > *value ;And Not #__bar_minus
                           *bar\max = *bar\min + 1
                        Else
                           *bar\max = *value
                        EndIf
                        ;
                        If Not *bar\max ;And Not #__bar_minus
                           *bar\page\pos = *bar\max
                        EndIf
                        ; Debug  "   min " + *bar\min + " max " + *bar\max
                        
                        ;\\
                        If *bar And *this\parent And is_integral_( *this )
                           If *bar\vertical
                              *this\parent\scroll_height( ) = *bar\max
                           Else
                              *this\parent\scroll_width( ) = *bar\max
                           EndIf
                        EndIf
                        
                        result = #True
                     EndIf
                     
                  Case #__bar_pagelength
                     If *bar\page\len <> *value ;And Not ( *value < 0 And Not #__bar_minus )
                                                ;*bar\AreaChange( ) = *bar\page\len - value
                        *bar\page\len      = *value
                        
                        If Not *bar\max ;And Not #__bar_minus
                           If *bar\min > *value
                              *bar\max = *bar\min + 1
                           Else
                              *bar\max = *value
                           EndIf
                        EndIf
                        
                        result = #True
                     EndIf
                     
                  Case #__bar_buttonsize
                     If *SB\size <> *value
                        *SB\size = *value
                        
                        ;- SPIN BUTTON POSITION
                        If *this\type = #__type_spin
                           If *this\flag & #__spin_plus
                              ; set real spin-buttons width
                              *BB1\size = *value
                              *BB2\size = *value
                              
                              If *bar\vertical
                                 *this\fs[2] = *BB2\size - 1
                                 *this\fs[4] = *BB1\size - 1
                              Else
                                 *this\fs[1] = *BB1\size - 1
                                 *this\fs[3] = *BB2\size - 1
                              EndIf
                           Else
                              ;                               If *bar\vertical
                              If *bar\mirror
                                 *this\fs[1] = *value - 1
                              Else
                                 *this\fs[3] = *value - 1
                              EndIf
                              ;                               Else
                              ;                                  If *bar\invert
                              ;                                     *this\fs[2] = *value - 1
                              ;                                  Else
                              ;                                     *this\fs[4] = *value - 1
                              ;                                  EndIf
                              ;                               EndIf
                           EndIf
                           
                           
                        Else
                           ; to reset the button size to default
                           If *this\type = #__type_ToolBar Or
                              *this\type = #__type_PopupBar Or
                              *this\type = #__type_MenuBar Or
                              *this\type = #__type_TabBar Or
                              *this\type = #__type_Scroll
                              ;
                              If *value
                                 *BB1\size = - 1
                                 *BB2\size = - 1
                                 *BB1\hide = 0
                                 *BB2\hide = 0
                              Else
                                 *BB1\size = 0
                                 *BB2\size = 0
                                 *BB1\hide = 1
                                 *BB2\hide = 1
                              EndIf
                           EndIf
                           
                           ; if it is a composite element of the parent
                           If is_integral_( *this ) And *this\parent And *value
                              *value + 1
                              If *bar\vertical
                                 Resize(*this, *this\parent\container_width( ) - *value, #PB_Ignore, *value, #PB_Ignore)
                              Else
                                 Resize(*this, #PB_Ignore, *this\parent\container_width( ) - *value, #PB_Ignore, *value)
                              EndIf
                           EndIf
                           
                           bar_Update( *this, #True )
                           PostRepaint( *this\root )
                           ProcedureReturn #True
                        EndIf
                     EndIf
                     
               EndSelect
            EndIf
            
            
            ;\\
            If result ; And *this\screen_width( ) And *this\screen_height( ) ; есть проблемы с imggadget и scrollareagadget
                      ;Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               
               If ( *bar\vertical And *this\screen_height( ) ) Or ( *bar\vertical = 0 And *this\screen_width( ) )
                  ; Debug "bar_SetAttribute - "+*this\screen_height( ) +" "+ *this\screen_width( ) +" "+ *bar\vertical
                  bar_Update( *this, #True ) ; ??????????????
               EndIf
               
               ; after update and resize bar
               If *this\type = #__type_Scroll 
                  If Attribute = #__bar_buttonsize
                     *BB1\size = - 1
                     *BB2\size = - 1
                  EndIf
               EndIf
               
               If *this\type = #__type_Splitter
                  If result = - 1
                     SetParent(*value, *this)
                  EndIf
               EndIf
            EndIf
         EndWith
         
         ProcedureReturn result
      EndProcedure
      
      Procedure bar_tab_GetItemIndex( *this._s_WIDGET, *row )
         PushListPosition( *this\__tabs( ) )
         ForEach *this\__tabs( )
            If *row = *this\__tabs( )
               ProcedureReturn ListIndex( *this\__tabs( ) )
            EndIf
         Next
         PopListPosition( *this\__tabs( ) ) 
         ProcedureReturn - 1
      EndProcedure
      
      
      
      ;-
      Macro HideState( _this_, _parent_ )
         _this_\hide = Bool( _this_\hide[1] Or ( _parent_ And ( _parent_\hide Or ( _parent_\tabbar And _parent_\tabbar\type = #__type_TabBar And _this_\TabIndex( ) <> _parent_\tabbar\TabState( ) ))))
         
         If _this_\tabbar
            If _this_\hide
               _this_\tabbar\hide = - 1
            Else
               _this_\tabbar\hide = _this_\tabbar\hide[1]
            EndIf
         EndIf
         If _this_\stringbar
            If _this_\hide
               _this_\stringbar\hide = - 1
            Else
               _this_\stringbar\hide = _this_\stringbar\hide[1]
            EndIf
         EndIf
         If _this_\scroll
            If _this_\scroll\v
               If _this_\hide Or _this_\scroll\v\bar\max <= _this_\scroll\v\bar\page\len
                  _this_\scroll\v\hide = - 1
               Else
                  _this_\scroll\v\hide = _this_\scroll\v\hide[1]
               EndIf
            EndIf
            If _this_\scroll\h
               If _this_\hide Or _this_\scroll\h\bar\max <= _this_\scroll\h\bar\page\len
                  _this_\scroll\h\hide = - 1
               Else
                  _this_\scroll\h\hide = _this_\scroll\h\hide[1]
               EndIf
            EndIf
         EndIf
         
         ; Чтобы обновить границы отоброжения (clip-coordinate)
         ;_this_\resize\clip = #True
      EndMacro
      
      Macro DisableState( _this_, _parent_ )
         _this_\disable = Bool( _this_\disable[1] Or ( _parent_ And _parent_\disable ))
         
         ; reset color state
         If _this_\enter
            If _this_\disable
               If _this_\ColorState( ) <> #__s_0
                  _this_\ColorState( ) = #__s_0
               EndIf
            Else
               If _this_\ColorState( ) <> #__s_1
                  _this_\ColorState( ) = #__s_1
               EndIf
            EndIf
         EndIf
         
         ;
         If _this_\tabbar
            If _this_\disable
               _this_\tabbar\disable = - 1
            Else
               _this_\tabbar\disable = _this_\tabbar\disable[1]
            EndIf
         EndIf
         If _this_\stringbar
            If _this_\disable
               _this_\stringbar\disable = - 1
            Else
               _this_\stringbar\disable = _this_\stringbar\disable[1]
            EndIf
         EndIf
         If _this_\scroll
            If _this_\scroll\v
               If _this_\disable
                  _this_\scroll\v\disable = - 1
               Else
                  _this_\scroll\v\disable = _this_\scroll\v\disable[1]
               EndIf
            EndIf
            If _this_\scroll\h
               If _this_\disable
                  _this_\scroll\h\disable = - 1
               Else
                  _this_\scroll\h\disable = _this_\scroll\h\disable[1]
               EndIf
            EndIf
         EndIf
      EndMacro
      
      ;-
      Procedure.b HideItem( *this._s_widget, item.l, state.b )
         If *this\type = #__type_MenuBar Or
            *this\type = #__type_PopupBar Or
            *this\type = #__type_ToolBar
            ;
            If *this\__tabs( )
               PushListPosition(*this\__tabs( ))
               ForEach *this\__tabs( )
                  If *this\__tabs( )\tindex = item
                     ;SelectElement( *this\__tabs( ), item )
                     *this\__tabs( )\hide = state
                     *this\TabChange( ) = #True
                     Break
                  EndIf
               Next
               PopListPosition(*this\__tabs( ))
            EndIf
            ProcedureReturn 0
         EndIf
         
         If *this\tabbar
            ForEach *this\tabbar\__tabs( )
               If *this\tabbar\__tabs( )\tindex = item
                  ;SelectElement( *this\tabbar\__tabs( ), item )
                  *this\tabbar\__tabs( )\hide = state
                  *this\tabbar\TabChange( ) = #True
                  Break
               EndIf
            Next
         EndIf
         If *this\row
            Protected *row._s_ROWS
            SelectElement( *this\__rows( ), item )
            *this\__rows( )\hide = state
            *row = *this\__rows( )
            ;
            If *this\__rows( )\childrens
               PushListPosition( *this\__rows( ))
               While NextElement( *this\__rows( ))
                  If *this\__rows( )\sublevel =< *row\sublevel
                     Break
                  EndIf
                  If *this\__rows( )\RowParent( )
                     *this\__rows( )\hide = Bool( *this\__rows( )\RowParent( )\buttonbox\checked | *this\__rows( )\RowParent( )\hide )
                  EndIf
               Wend
               PopListPosition( *this\__rows( ))
            EndIf
            *this\WidgetChange( ) = 1
         EndIf
      EndProcedure
      
      Procedure.b DisableItem( *this._s_widget, item.l, state.b )
         If *this\type = #__type_panel
            If *this\tabbar
               ForEach *this\tabbar\__tabs( )
                  If *this\tabbar\__tabs( )\tindex = item
                     ; SelectElement( *this\tabbar\__tabs( ), item )
                     *this\tabbar\__tabs( )\disable = state
                     *this\tabbar\TabChange( ) = #True
                     Break
                  EndIf
               Next
            EndIf
         EndIf
         If *this\type = #__type_MenuBar Or
            *this\type = #__type_PopupBar Or
            *this\type = #__type_ToolBar
            ;
            If *this\__tabs( )
               PushListPosition(*this\__tabs( ))
               ForEach *this\__tabs( )
                  If *this\__tabs( )\tindex = item
                     ;SelectElement( *this\__tabs( ), item )
                     *this\__tabs( )\disable = state
                     *this\TabChange( ) = #True
                     Break
                  EndIf
               Next
               PopListPosition(*this\__tabs( ))
            EndIf
         EndIf
      EndProcedure
      
      Procedure.b Hide( *this._s_WIDGET, state.b = #PB_Default, flags.q = 0 )
         If State = #PB_Default : ProcedureReturn *this\hide[1] : EndIf
         
         If *this\hide[1] <> state
            *this\hide[1] = state
            
            HideState( *this, *this\parent )
            ;
            If *this\haschildren
               ; hide all children's except those whose parent-item is selected
               If StartEnum( *this )
                  HideState( widgets( ), widgets( )\parent )
                  StopEnum( )
               EndIf
            EndIf
            ProcedureReturn 1
         EndIf
      EndProcedure
      
      Procedure.b Disable( *this._s_WIDGET, State.b = #PB_Default )
         If State = #PB_Default : ProcedureReturn *this\disable[1] : EndIf
         
         If *this\disable[1] <> State
            *this\disable[1] = State
            
            ;             ;
            ;             ; reset color state
            ;             If *this\press
            ;                If *this\ColorState( ) 
            ;                   *this\ColorState( ) = #__s_0
            ;                EndIf
            ;             EndIf
            ;
            DisableState( *this, *this\parent )
            ;
            If *this\haschildren
               ; disable all children's except those whose parent-item is selected
               If StartEnum( *this )
                  DisableState( widgets( ), widgets( )\parent )
                  StopEnum( )
               EndIf
            EndIf
            ProcedureReturn 1
         EndIf
      EndProcedure
      
      Procedure.l Type( *this._s_WIDGET ) ; Returns created widget type
         ProcedureReturn *this\type
      EndProcedure
      
      Procedure.l Index( *this._s_WIDGET )
         ProcedureReturn *this\createindex
      EndProcedure
      
      Procedure.l Level( *this._s_WIDGET )
         ProcedureReturn *this\level
      EndProcedure
      
      Procedure.i ID( Index )
         Protected.i result
         If Index >= 0
            PushListPosition( widgets( ) )
            ForEach widgets( )
               If Index( widgets( ) ) = Index
                  result = widgets( )
                  Break
               EndIf
            Next
            PopListPosition( widgets( ) )
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.l X( *this._s_WIDGET, mode.l = #PB_Default )
         If mode < 0
            If is_window_( *this )
               mode = #__c_frame
            Else
               mode = #__c_container
            EndIf
         EndIf
         ProcedureReturn DPIUnScaledX( *this\x[mode] ) 
      EndProcedure
      
      Procedure.l Y( *this._s_WIDGET, mode.l = #PB_Default )
         If mode < 0
            If is_window_( *this )
               mode = #__c_frame
            Else
               mode = #__c_container
            EndIf
         EndIf
         ProcedureReturn DPIUnScaledY( *this\y[mode] )
      EndProcedure
      
      Procedure.l Width( *this._s_WIDGET, mode.l = #PB_Default )
         If mode < 0
            If is_window_( *this )
               mode = #__c_inner
            Else
               mode = #__c_frame
            EndIf
         EndIf
         ProcedureReturn DPIUnScaledX( *this\width[mode] ) 
      EndProcedure
      
      Procedure.l Height( *this._s_WIDGET, mode.l = #PB_Default )
         If mode < 0
            If is_window_( *this )
               mode = #__c_inner
            Else
               mode = #__c_frame
            EndIf
         EndIf
         ProcedureReturn DPIUnScaledY( *this\height[mode] ) 
      EndProcedure
      
      Procedure   IsChild( *this._s_WIDGET, *parent._s_WIDGET )
         Protected result
         ;
         If *this And 
            *this <> *parent And 
            *parent\haschildren
            ;
            Repeat
               *this = *this\parent
               If *this
                  If *parent = *this
                     result = *this
                     Break
                  EndIf
               Else
                  Break
               EndIf
            Until is_root_( *this )
         EndIf
         ;
         ProcedureReturn result
      EndProcedure
      
      Procedure IsPopupChild( *this._s_WIDGET, *parent._s_WIDGET )
         While *this\menu\parent
            If *this\menu\parent = *parent
               ; Debug *this\class
               ProcedureReturn *this
            EndIf
            *this = *this\menu\parent
         Wend
      EndProcedure
      
      Procedure.b IsContainer( *this._s_WIDGET )
         ProcedureReturn *this\container
      EndProcedure
      
      Procedure   IsChildrens( *this._s_WIDGET )
         ProcedureReturn *this\haschildren
      EndProcedure
      
      Procedure.i Sticky( *window._s_WIDGET = #PB_Default, state.b = #PB_Default )
         Protected result = Sticked( )
         
         If state > #PB_Default
            If is_window_( *window )
               If state 
                  Sticked( ) = *window
                  SetForeground( *window )
               Else
                  Sticked( ) = #Null
               EndIf 
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure   ToolTip( *this._s_WIDGET, Text.s, item = - 1 )
         *this\tt\text\string = Text
      EndProcedure
      
      
      
      
      ;-
      Macro clip_output_( _address_, _mode_ = [#__c_draw] )
         CompilerIf Not ( #PB_Compiler_OS = #PB_OS_MacOS And Not Defined( Draw, #PB_Module ))
            ClipOutput( _address_\x#_mode_, _address_\y#_mode_, _address_\width#_mode_, _address_\height#_mode_ )
         CompilerEndIf
      EndMacro
      
      Procedure Reclip( *this._s_WIDGET )
         ; then move and size parent set clip coordinate
         Protected _p_x2_
         Protected _p_y2_
         Protected *parent._s_WIDGET
         
         If *this\bounds\attach
            *parent = *this\bounds\attach\parent
         Else
            *parent = *this\parent
         EndIf
         
         If test_scrollbars_reclip
            If *parent
               Debug "   reClip - " + *this\class + " * " + *parent\inner_width( ) + " " + *parent\inner_height( )
            EndIf
         EndIf
         
         If is_root_( *this )
            If *this\draw_width( ) <> *this\screen_width( )
               *this\draw_width( )     = *this\screen_width( )
               *this\clip_width( ) = *this\screen_width( )
            EndIf
            If *this\draw_height( ) <> *this\screen_height( )
               *this\draw_height( )     = *this\screen_height( )
               *this\clip_height( ) = *this\screen_height( )
            EndIf
         Else
            If *parent
               _p_x2_ = *parent\inner_x( ) + *parent\inner_width( )
               _p_y2_ = *parent\inner_y( ) + *parent\inner_height( )
               
               ; for the splitter children's
               If *parent\type = #__type_Splitter
                  If *parent\split_1( ) = *this
                     _p_x2_ = *parent\bar\button[1]\x + *parent\bar\button[1]\width
                     _p_y2_ = *parent\bar\button[1]\y + *parent\bar\button[1]\height
                  EndIf
                  If *parent\split_2( ) = *this
                     _p_x2_ = *parent\bar\button[2]\x + *parent\bar\button[2]\width
                     _p_y2_ = *parent\bar\button[2]\y + *parent\bar\button[2]\height
                  EndIf
               EndIf
               
               If is_integral_( *this ) And Not *this\bounds\attach
                  If *this\type = #__type_ToolBar Or
                     *this\type = #__type_PopupBar Or
                     *this\type = #__type_MenuBar Or
                     *this\type = #__type_TabBar Or
                     *this\type = #__type_Scroll
                     ;
                     _p_x2_ = *parent\inner_x( ) + *parent\container_width( )
                     _p_y2_ = *parent\inner_y( ) + *parent\container_height( )
                  EndIf
                  
               Else
                  ; for the scrollarea&MDI children's except scrollbars
                  If *parent\container
                     ;                      If *this\anchors
                     ;                         Debug ""+*parent\class +" "+ *parent\scroll_width( )
                     ;                      EndIf
                     If *parent\scroll_width( ) And
                        _p_x2_ > *parent\inner_x( ) + *parent\scroll_x( ) + *parent\scroll_width( )
                        _p_x2_ = *parent\inner_x( ) + *parent\scroll_x( ) + *parent\scroll_width( )
                     EndIf
                     If *parent\scroll_height( ) And
                        _p_y2_ > *parent\inner_y( ) + *parent\scroll_y( ) + *parent\scroll_height( )
                        _p_y2_ = *parent\inner_y( ) + *parent\scroll_y( ) + *parent\scroll_height( )
                     EndIf
                  EndIf
               EndIf
               
            EndIf
            
            ; then move and size parent set clip coordinate
            ; x&y clip frame coordinate
            If *parent And
               *parent\inner_x( ) > *this\screen_x( ) And
               *parent\inner_x( ) > *parent\draw_x( )
               *this\draw_x( ) = *parent\inner_x( )
            ElseIf *parent And *parent\draw_x( ) > *this\screen_x( )
               *this\draw_x( ) = *parent\draw_x( )
            Else
               *this\draw_x( ) = *this\screen_x( )
            EndIf
            If *this\draw_x( ) < 0 : *this\draw_x( ) = 0 : EndIf
            ;
            If *parent And
               *parent\inner_y( ) > *this\screen_y( ) And
               *parent\inner_y( ) > *parent\draw_y( )
               *this\draw_y( ) = *parent\inner_y( )
            ElseIf *parent And *parent\draw_y( ) > *this\screen_y( )
               *this\draw_y( ) = *parent\draw_y( )
            Else
               *this\draw_y( ) = *this\screen_y( )
            EndIf
            If *this\draw_y( ) < 0 : *this\draw_y( ) = 0 : EndIf
            ;
            ; width&height clip frame coordinate
            If *parent And
               (*parent\draw_x( ) + *parent\draw_width( )) > 0 And
               (*parent\draw_x( ) + *parent\draw_width( )) < (*this\screen_x( ) + *this\screen_width( )) And
               (_p_x2_) > (*parent\draw_x( ) + *parent\draw_width( ))
               
               *this\draw_width( ) = (*parent\draw_x( ) + *parent\draw_width( )) - *this\draw_x( )
            ElseIf *parent And (_p_x2_) > 0 And (_p_x2_) < (*this\screen_x( ) + *this\screen_width( ))
               
               *this\draw_width( ) = (_p_x2_) - *this\draw_x( )
            Else
               *this\draw_width( ) = (*this\screen_x( ) + *this\screen_width( )) - *this\draw_x( )
            EndIf
            If *this\draw_width( ) < 0 : *this\draw_width( ) = 0 : EndIf
            ;
            If *parent And
               (*parent\draw_y( ) + *parent\draw_height( )) > 0 And
               (*parent\draw_y( ) + *parent\draw_height( )) < (*this\screen_y( ) + *this\screen_height( )) And
               (_p_y2_) > (*parent\draw_y( ) + *parent\draw_height( ))
               
               *this\draw_height( ) = (*parent\draw_y( ) + *parent\draw_height( )) - *this\draw_y( )
            ElseIf *parent And (_p_y2_) > 0 And (_p_y2_) < (*this\screen_y( ) + *this\screen_height( ))
               
               *this\draw_height( ) = (_p_y2_) - *this\draw_y( )
            Else
               *this\draw_height( ) = (*this\screen_y( ) + *this\screen_height( )) - *this\draw_y( )
            EndIf
            If *this\draw_height( ) < 0 : *this\draw_height( ) = 0 : EndIf
            ;
            ;\\ x&y clip inner coordinate
            If *parent And
               *parent\inner_x( ) > *this\inner_x( ) And
               *parent\inner_x( ) > *parent\clip_x( )
               *this\clip_x( ) = *parent\inner_x( )
            ElseIf *parent And *parent\clip_x( ) > *this\inner_x( )
               *this\clip_x( ) = *parent\clip_x( )
            Else
               *this\clip_x( ) = *this\inner_x( )
            EndIf
            If *this\clip_x( ) < 0 : *this\clip_x( ) = 0 : EndIf
            ;
            If *parent And
               *parent\inner_y( ) > *this\inner_y( ) And
               *parent\inner_y( ) > *parent\clip_y( )
               *this\clip_y( ) = *parent\inner_y( )
            ElseIf *parent And *parent\clip_y( ) > *this\inner_y( )
               *this\clip_y( ) = *parent\clip_y( )
            Else
               *this\clip_y( ) = *this\inner_y( )
            EndIf
            If *this\clip_y( ) < 0 : *this\clip_y( ) = 0 : EndIf
            
            ;\\ width&height clip inner coordinate
            If *parent And
               (*parent\clip_x( ) + *parent\clip_width( )) > 0 And
               (*parent\clip_x( ) + *parent\clip_width( )) < (*this\inner_x( ) + *this\inner_width( )) And
               (_p_x2_) > (*parent\clip_x( ) + *parent\clip_width( ))
               
               *this\clip_width( ) = (*parent\clip_x( ) + *parent\clip_width( )) - *this\clip_x( )
            ElseIf *parent And (_p_x2_) > 0 And (_p_x2_) < (*this\inner_x( ) + *this\inner_width( ))
               
               *this\clip_width( ) = (_p_x2_) - *this\clip_x( )
            Else
               *this\clip_width( ) = (*this\inner_x( ) + *this\inner_width( )) - *this\clip_x( )
            EndIf
            If *this\clip_width( ) < 0 : *this\clip_width( ) = 0 : EndIf
            ;
            If *parent And
               (*parent\clip_y( ) + *parent\clip_height( )) > 0 And
               (*parent\clip_y( ) + *parent\clip_height( )) < (*this\inner_y( ) + *this\inner_height( )) And
               (_p_y2_) > (*parent\clip_y( ) + *parent\clip_height( ))
               
               *this\clip_height( ) = (*parent\clip_y( ) + *parent\clip_height( )) - *this\clip_y( )
            ElseIf *parent And (_p_y2_) > 0 And (_p_y2_) < (*this\inner_y( ) + *this\inner_height( ))
               
               *this\clip_height( ) = (_p_y2_) - *this\clip_y( )
            Else
               *this\clip_height( ) = (*this\inner_y( ) + *this\inner_height( )) - *this\clip_y( )
            EndIf
            If *this\clip_height( ) < 0 : *this\clip_height( ) = 0 : EndIf
            
         EndIf
         
         ;
         ; clip child bar
         If *this\tabbar
            *this\tabbar\draw_x( )      = *this\draw_x( )
            *this\tabbar\draw_y( )      = *this\draw_y( )
            *this\tabbar\draw_width( )  = *this\draw_width( ) 
            *this\tabbar\draw_height( ) = *this\draw_height( )
         EndIf
         If *this\menubar
            *this\menubar\draw_x( )      = *this\draw_x( )
            *this\menubar\draw_y( )      = *this\draw_y( )
            *this\menubar\draw_width( )  = *this\draw_width( )  
            *this\menubar\draw_height( ) = *this\draw_height( )
         EndIf
         If *this\stringbar
            *this\stringbar\draw_x( )      = *this\draw_x( )
            *this\stringbar\draw_y( )      = *this\draw_y( )
            *this\stringbar\draw_width( )  = *this\draw_width( )
            *this\stringbar\draw_height( ) = *this\draw_height( )
         EndIf
         If *this\scroll
            If *this\scroll\v
               *this\scroll\v\draw_x( )      = *this\draw_x( )
               *this\scroll\v\draw_y( )      = *this\draw_y( )
               *this\scroll\v\draw_width( )  = *this\draw_width( )
               *this\scroll\v\draw_height( ) = *this\draw_height( )
            EndIf
            If *this\scroll\h
               *this\scroll\h\draw_x( )      = *this\draw_x( )
               *this\scroll\h\draw_y( )      = *this\draw_y( )
               *this\scroll\h\draw_width( )  = *this\draw_width( )
               *this\scroll\h\draw_height( ) = *this\draw_height( )
            EndIf
         EndIf
         
         ProcedureReturn Bool( *this\draw_width( ) > 0 And *this\draw_height( ) > 0 )
      EndProcedure
      
      Procedure.b Resize( *this._s_WIDGET, X.l, Y.l, Width.l, Height.l, scale.b = 1 )
         Protected.b result
         Protected.l ix, iy, iwidth, iheight, Change_x, Change_y, Change_width, Change_height
         ;\\
         ; *this\resize\clip = #True
         
         ;\\
         If *this\resize\change <> #True
            *this\resize\change = #True
         EndIf
         
         ;\\
         If *this\anchors
            If *this\bs < *this\fs + *this\anchors\pos
               *this\bs = *this\fs + *this\anchors\pos
            EndIf
         Else
            If *this\bs < *this\fs
               *this\bs = *this\fs
            EndIf
         EndIf
         ;
         If *this\autosize And *this\parent And *this\parent\type = #__type_Splitter
            *this\autosize = 0
         EndIf
         
         ;\\
         If *this\autosize ;And not is_root_( *this )
            If *this\parent And *this\parent <> *this 
               X      = (*this\parent\inner_x( ))
               Y      = (*this\parent\inner_y( ))
               Width  = (*this\parent\inner_width( ))
               Height = (*this\parent\inner_height( ))
            EndIf
            
            ; Debug "auto resize "+X+" "+Y ; combobox bug fixed
         Else
            ;
            ;CompilerIf #PB_Compiler_DPIAware
            If scale = 1
               If ( *this\parent And *this\parent\type = #__type_Splitter )
                  Debug "resize no scale "+*this\class
               EndIf
            EndIf
            If scale = 1 
               If Not is_integral_( *this )
                  If Not( *this\parent And *this\parent\type = #__type_Splitter ) 
                     If X <> #PB_Ignore
                        X = DPIScaledX( X )
                     EndIf
                     If Width <> #PB_Ignore
                        Width = DPIScaledX( Width )
                     EndIf
                     If Y <> #PB_Ignore
                        Y = DPIScaledY( Y )
                     EndIf
                     If Height <> #PB_Ignore
                        Height = DPIScaledY( Height )
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;CompilerEndIf
            
            ;\\ move & size steps
            If *this\anchors And *this\anchors\mode And mouse( )\steps > 1
               If X <> #PB_Ignore
                  X + ( X % mouse( )\steps )
                  X = ( X / mouse( )\steps ) * mouse( )\steps
               EndIf
               If Y <> #PB_Ignore
                  Y + ( Y % mouse( )\steps )
                  Y = ( Y / mouse( )\steps ) * mouse( )\steps
               EndIf
               If Width <> #PB_Ignore
                  Width + ( Width % mouse( )\steps )
                  Width = (( Width / mouse( )\steps ) * mouse( )\steps ) + DPIScaled(1)
               EndIf
               If Height <> #PB_Ignore
                  Height + ( Height % mouse( )\steps )
                  Height = (( Height / mouse( )\steps ) * mouse( )\steps ) + DPIScaled(1)
               EndIf
            EndIf
            
            ;\\ move boundaries
            If *this\bounds\move
               If X <> #PB_Ignore
                  If *this\bounds\move\min\x <> #PB_Ignore And
                     X < *this\bounds\move\min\x
                     If Width <> #PB_Ignore
                        Width - ( *this\bounds\move\min\x - X )
                     EndIf
                     X = *this\bounds\move\min\x
                  EndIf
                  If *this\bounds\move\max\x <> #PB_Ignore
                     If Width = #PB_Ignore
                        If X > *this\bounds\move\max\x - *this\frame_width( )
                           X = *this\bounds\move\max\x - *this\frame_width( )
                        EndIf
                     Else
                        If X > *this\bounds\move\max\x - Width
                           X = *this\bounds\move\max\x - Width
                        EndIf
                     EndIf
                  EndIf
               EndIf
               If Y <> #PB_Ignore
                  If *this\bounds\move\min\y <> #PB_Ignore And
                     Y < *this\bounds\move\min\y
                     If Height <> #PB_Ignore
                        Height - ( *this\bounds\move\min\y - Y )
                     EndIf
                     Y = *this\bounds\move\min\y
                  EndIf
                  If *this\bounds\move\max\y <> #PB_Ignore
                     If Height = #PB_Ignore
                        If Y > *this\bounds\move\max\y - *this\frame_height( )
                           Y = *this\bounds\move\max\y - *this\frame_height( )
                        EndIf
                     Else
                        If Y > *this\bounds\move\max\y - Height
                           Y = *this\bounds\move\max\y - Height
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ size boundaries
            If *this\bounds\size
               If *this\type = #__type_window
                  Protected h_frame = *this\fs * 2 + *this\fs[1] + *this\fs[3]
                  Protected v_frame = *this\fs * 2 + *this\fs[2] + *this\fs[4]
               EndIf
               
               If Width <> #PB_Ignore
                  If #PB_Ignore <> *this\bounds\size\min\width And
                     Width < *this\bounds\size\min\width - h_frame
                     If X <> #PB_Ignore
                        X + ( Width - *this\bounds\size\min\width ) + h_frame
                     EndIf
                     Width = *this\bounds\size\min\width - h_frame
                  EndIf
                  If #PB_Ignore <> *this\bounds\size\max\width And
                     Width > *this\bounds\size\max\width - h_frame
                     If X <> #PB_Ignore
                        X + ( Width - *this\bounds\size\max\width ) + h_frame
                     EndIf
                     Width = *this\bounds\size\max\width - h_frame
                  EndIf
                  
                  ;\\
                  If *this\bounds\move
                     If X = #PB_Ignore
                        If Width > *this\bounds\size\max\width - ( *this\container_x( ) - *this\bounds\move\min\x ) - h_frame
                           Width = *this\bounds\size\max\width - ( *this\container_x( ) - *this\bounds\move\min\x ) - h_frame
                        EndIf
                     Else
                        If Width > *this\bounds\size\max\width - ( X - *this\bounds\move\min\x ) - h_frame
                           Width = *this\bounds\size\max\width - ( X - *this\bounds\move\min\x ) - h_frame
                        EndIf
                     EndIf
                  EndIf
               EndIf
               If Height <> #PB_Ignore
                  If #PB_Ignore <> *this\bounds\size\min\height And
                     Height < *this\bounds\size\min\height - v_frame
                     If Y <> #PB_Ignore
                        Y + ( Height - *this\bounds\size\min\height ) + v_frame
                     EndIf
                     Height = *this\bounds\size\min\height - v_frame
                  EndIf
                  If #PB_Ignore <> *this\bounds\size\max\height And
                     Height > *this\bounds\size\max\height - v_frame
                     If Y <> #PB_Ignore
                        Y + ( Height - *this\bounds\size\max\height ) + v_frame
                     EndIf
                     Height = *this\bounds\size\max\height - v_frame
                  EndIf
                  
                  ;\\
                  If *this\bounds\move
                     If Y = #PB_Ignore
                        If Height > *this\bounds\size\max\height - ( *this\container_y( ) - *this\bounds\move\min\y ) - v_frame
                           Height = *this\bounds\size\max\height - ( *this\container_y( ) - *this\bounds\move\min\y ) - v_frame
                        EndIf
                     Else
                        If Height > *this\bounds\size\max\height - ( Y - *this\bounds\move\min\y ) - v_frame
                           Height = *this\bounds\size\max\height - ( Y - *this\bounds\move\min\y ) - v_frame
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            
            ;\\
            If Width = #PB_Ignore
               If is_window_( *this )
                  Width = *this\container_width( )
               Else
                  Width = *this\frame_width( )
               EndIf
            EndIf
            If Height = #PB_Ignore
               If is_window_( *this )
                  Height = *this\container_height( )
               Else
                  Height = *this\frame_height( )
               EndIf
            EndIf
            
            ;\\
            If Width < 0
               Width = 0
            EndIf
            If Height < 0
               Height = 0
            EndIf
            
            ;\\ потому что окну задаются внутренные размеры
            If is_window_( *this )
               Width + ( *this\fs * 2 + *this\fs[1] + *this\fs[3] )
               Height + ( *this\fs * 2 + *this\fs[2] + *this\fs[4] )
            EndIf
            
            ;\\
            If X = #PB_Ignore
               X = *this\container_x( )
            ElseIf *this\parent  
               If Not *this\child And *this\parent\haschildren
                  If *this\parent\container ; combobox bug fixed
                     X + *this\parent\scroll_x( )
                  EndIf
               EndIf
               *this\container_x( ) = X
            EndIf
            If Y = #PB_Ignore
               Y = *this\container_y( )
            ElseIf *this\parent 
               If Not *this\child And *this\parent\haschildren 
                  If *this\parent\container ; combobox bug fixed
                     Y + *this\parent\scroll_y( )
                  EndIf
               EndIf
               *this\container_y( ) = Y
            EndIf
            
            ; container coordinate
            If test_resize
               Debug "resize - "+*this\class +" ("+ X +" "+ Y +" "+ Width +" "+ Height +")"
            EndIf
            
            
            ; frame coordinate
            If *this\parent And *this <> *this\parent And Not is_root_( *this )
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 2 )
                  X + *this\parent\inner_x( )
               EndIf
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 1 )
                  Y + *this\parent\inner_y( )
               EndIf
            EndIf
         EndIf
         
         
         ;\\ inner x&y position
         ix      = X + ( *this\fs + *this\fs[1] )
         iy      = Y + ( *this\fs + *this\fs[2] )
         iwidth  = Width - ( *this\fs * 2 + *this\fs[1] + *this\fs[3] )
         iheight = Height - ( *this\fs * 2 + *this\fs[2] + *this\fs[4] )
         
         ;\\
         If Not Change_x And *this\screen_x( ) <> X - ( *this\bs - *this\fs ) : Change_x = ( X - ( *this\bs - *this\fs )) - *this\screen_x( ) : EndIf
         If Not Change_y And *this\screen_y( ) <> Y - ( *this\bs - *this\fs ) : Change_y = ( Y - ( *this\bs - *this\fs )) - *this\screen_y( ) : EndIf
         If Not Change_width And *this\screen_width( ) <> Width + ( *this\bs * 2 - *this\fs * 2 ) : Change_width = ( Width + ( *this\bs * 2 - *this\fs * 2 )) - *this\screen_width( ) : EndIf
         If Not Change_height And *this\screen_height( ) <> Height + ( *this\bs * 2 - *this\fs * 2 ) : Change_height = ( Height + ( *this\bs * 2 - *this\fs * 2 )) - *this\screen_height( ) : EndIf
         
         If Not Change_x And *this\frame_x( ) <> X : Change_x = X - *this\frame_x( ) : EndIf
         If Not Change_y And *this\frame_y( ) <> Y : Change_y = Y - *this\frame_y( ) : EndIf
         If Not Change_width And *this\frame_width( ) <> Width : Change_width = Width - *this\frame_width( ) : EndIf
         If Not Change_height And *this\frame_height( ) <> Height : Change_height = Height - *this\frame_height( ) : EndIf
         
         If Not Change_x And *this\inner_x( ) <> ix : Change_x = ix - *this\inner_x( ) : EndIf
         If Not Change_y And *this\inner_y( ) <> iy : Change_y = iy - *this\inner_y( ) : EndIf
         If Not Change_width And *this\container_width( ) <> iwidth : Change_width = iwidth - *this\container_width( ) : EndIf
         If Not Change_height And *this\container_height( ) <> iheight : Change_height = iheight - *this\container_height( ) : EndIf
         ;          If Not Change_width And *this\inner_width( ) <> iwidth : Change_width = iwidth - *this\inner_width( ) : EndIf
         ;          If Not Change_height And *this\inner_height( ) <> iheight : Change_height = iheight - *this\inner_height( ) : EndIf
         
         
         ;\\
         If Change_x
            *this\resize\x = Change_x
            *this\frame_x( )  = X
            *this\inner_x( )  = ix
            *this\screen_x( ) = X - ( *this\bs - *this\fs )
            If *this\window
               *this\x[#__c_window] = X - *this\window\inner_x( )
            EndIf
         EndIf
         If Change_y
            *this\resize\y = Change_y
            *this\frame_y( )  = Y
            *this\inner_y( )  = iy
            *this\screen_y( ) = Y - ( *this\bs - *this\fs )
            If *this\window
               *this\y[#__c_window] = Y - *this\window\inner_y( )
            EndIf
         EndIf
         If Change_width
            If *this\bounds\move And Not Change_x
               If *this\bounds\move\max\x = ( *this\bounds\move\min\x + *this\frame_width( ) )
                  *this\bounds\move\max\x = *this\bounds\move\min\x + Width
               EndIf
            EndIf
            *this\resize\width = Change_width
            *this\container_width( ) = iwidth
            *this\frame_width( )     = Width
            *this\screen_width( )    = Width + ( *this\bs * 2 - *this\fs * 2 )
            If *this\container_width( ) < 0
               *this\container_width( ) = 0
            EndIf
            *this\inner_width( ) = *this\container_width( )
         EndIf
         If Change_height
            If *this\bounds\move And Not Change_y
               If *this\bounds\move\max\y = ( *this\bounds\move\min\y + *this\frame_height( ) )
                  *this\bounds\move\max\y = *this\bounds\move\min\y + Height
               EndIf
            EndIf
            *this\resize\height = Change_height
            *this\container_height( ) = iheight
            *this\frame_height( )     = Height
            *this\screen_height( )    = Height + ( *this\bs * 2 - *this\fs * 2 )
            If *this\container_height( ) < 0
               *this\container_height( ) = 0
            EndIf
            *this\inner_height( ) = *this\container_height( )
         EndIf
         
         
         ; 
         ;          If *this\resize\clip <> 0
         ;             *this\resize\clip = 0
         Reclip( *this )
         ;          EndIf
         
         ;
         ;\\
         ;
         If *this\anchors 
            a_size( *this\anchors\id,
                    *this\anchors\size,
                    *this\anchors\mode ) 
            
            a_move( *this,
                    *this\anchors\id,
                    *this\screen_x( ),
                    *this\screen_y( ),
                    *this\screen_width( ),
                    *this\screen_height( ) )
         EndIf
         
         ;\\ if the widgets is composite
         If *this\stringbar
            Resize( *this\stringbar, 0, 0, *this\inner_width( ), *this\inner_height( ) )
         EndIf
         
         If ( Change_x Or Change_y Or Change_width Or Change_height )
            If *this\picture\imageID
               *this\picture\change = #True
            EndIf
            
            *this\TextChange( ) = 1 ; без нее у кнопки проблемы перерисовкой текста
            
            ;\\ resize vertical&horizontal scrollbars
            If *this\scroll And
               *this\scroll\v And
               *this\scroll\h
               
               ;\\ if the integral scroll bars
               If *this\type <> #__type_MDI
                  bar_area_resize( *this )
               EndIf
               
               ;\\
               If *this\type = #__type_MDI
                  ;\\
                  ;If Change_x Or Change_y
                  Resize( *this\scroll\v, *this\container_width( ) - *this\scroll\v\width, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                  Resize( *this\scroll\h, #PB_Ignore, *this\container_height( ) - *this\scroll\h\height, #PB_Ignore, #PB_Ignore )
                  ;EndIf
                  
                  If Change_width Or Change_height
                     ;If *this\haschildren
                     bar_mdi_update( *this, 0, 0, 0, 0 )
                     bar_mdi_resize( *this, 0, 0, *this\container_width( ), *this\container_height( ) )
                     ;EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If *this\parent And
               *this\parent\scroll And
               *this\parent\scroll\v And
               *this\parent\scroll\h
               ;
               ;\\ parent mdi
               If *this\parent\type = #__type_MDI
                  If *this\child =- 1
                     If *this\parent\scroll\v <> *this And
                        *this\parent\scroll\h <> *this And
                        *this\parent\scroll\v\bar\PageChange( ) = 0 And
                        *this\parent\scroll\h\bar\PageChange( ) = 0
                        
                        bar_mdi_update( *this\parent, *this\container_x( ), *this\container_y( ), *this\frame_width( ), *this\frame_height( ) )
                        bar_mdi_resize( *this\parent, 0, 0, *this\parent\container_width( ), *this\parent\container_height( ) )
                     EndIf
                  EndIf
                  ;
               Else
                  If is_integral_( *this )
                     If *this\parent\container_width( ) = *this\parent\inner_width( ) And
                        *this\parent\container_height( ) = *this\parent\inner_height( )
                        ; Debug ""+*this\parent\scroll\v\bar\max +" "+ *this\parent\scroll\v\bar\page\len +" "+ *this\parent\scroll\h\bar\max +" "+ *this\parent\scroll\h\bar\page\len
                        
                        If *this\parent\scroll\v\bar\max > *this\parent\scroll\v\bar\page\len Or
                           *this\parent\scroll\h\bar\max > *this\parent\scroll\h\bar\page\len
                           
                           bar_area_resize( *this\parent )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ; if the integral menu bar
         If *this\menubar
            *this\inner_x( ) = X
            *this\inner_y( ) = Y
            
            ;\\
            If *this\menubar\autosize
               Resize( *this\menubar, 0, 0, *this\inner_width( ), *this\inner_height( ) )
            Else
               If *this\menubar\bar\vertical
                  If *this\fs[1]
                     Resize( *this\menubar, *this\fs, *this\fs, *this\fs[1], *this\inner_height( ) )
                  EndIf
                  If *this\fs[3]
                     Resize( *this\menubar, *this\frame_width( ) - *this\fs[3], *this\fs, *this\fs[3], *this\inner_height( ) )
                  EndIf
               Else
                  If *this\fs[2]
                     Resize( *this\menubar, *this\fs, *this\fs + *this\TitleBarHeight, *this\inner_width( ), *this\MenuBarHeight )
                  EndIf
                  If *this\fs[4]
                     Resize( *this\menubar, *this\fs, *this\frame_height( ) - *this\fs[4], *this\inner_width( ), *this\fs[4] )
                  EndIf
               EndIf
            EndIf
            
            *this\inner_x( ) + *this\fs + *this\fs[1]
            *this\inner_y( ) + *this\fs + *this\fs[2]
         EndIf
         
         ;\\ if the integral tab bar
         If *this\tabbar
            ;If *this\fs[1] Or *this\fs[3]
            *this\inner_x( ) = X
            ;EndIf
            ;If *this\fs[2] Or *this\fs[4]
            *this\inner_y( ) = Y
            ;EndIf
            
            ;\\
            If *this\tabbar\autosize
               Resize( *this\tabbar, 0, 0, *this\inner_width( ), *this\inner_height( ) )
            Else
               If *this\tabbar\bar\vertical
                  If *this\fs[1]
                     Resize( *this\tabbar, *this\fs, *this\fs, *this\fs[1], *this\inner_height( ) )
                  EndIf
                  If *this\fs[3]
                     Resize( *this\tabbar, *this\frame_width( ) - *this\fs[3], *this\fs, *this\fs[3], *this\inner_height( ) )
                  EndIf
               Else
                  If *this\fs[2]
                     Resize( *this\tabbar, *this\fs, *this\fs + *this\TitleBarHeight + *this\MenuBarHeight, *this\inner_width( ), *this\ToolBarHeight ) ;, *this\fs[2] - *this\TitleBarHeight - *this\MenuBarHeight ) ; 
                  EndIf
                  If *this\fs[4]
                     Resize( *this\tabbar, *this\fs, *this\frame_height( ) - *this\fs[4], *this\inner_width( ), *this\fs[4] )
                  EndIf
               EndIf
            EndIf
            
            ;If *this\fs[1] Or *this\fs[3]
            *this\inner_x( ) + *this\fs + *this\fs[1]
            ;EndIf
            ;If *this\fs[2] Or *this\fs[4]
            *this\inner_y( ) + *this\fs + *this\fs[2]
            ;EndIf
         EndIf
         
         ;\\
         If *this\type = #__type_ComboBox
            If *this\stringbar
               *this\combobutton\width = *this\fs[3]
               *this\combobutton\x     = ( *this\screen_x( )+ *this\screen_width( ) ) - *this\fs[3]
            Else
               *this\combobutton\width = *this\frame_width( ) - *this\fs * 2 ; *this\inner_width( )
               *this\combobutton\x     = *this\frame_x( ) + *this\fs
            EndIf
            
            *this\combobutton\y      = *this\inner_y( )
            *this\combobutton\height = *this\inner_height( )
         EndIf
         
         ;\\
         If *this\bar    
            If *this\type = #__type_Splitter   
               bar_Update( *this, 2 )
            Else
               If *this\bar\max
                  bar_Update( *this, 1 )
               EndIf
            EndIf
         EndIf
         
         ;\\
         If *this\type = #__type_Window
            ; чтобы закруглять только у окна с титлебаром
            If *this\fs[2]
               If *this\round
                  *this\caption\round = *this\round
                  *this\round         = 0
               EndIf
            EndIf
            
            ; caption title bar
            If Not *this\caption\hide
               *this\caption\x      = *this\frame_x( ) + *this\fs
               *this\caption\y      = *this\frame_y( ) + *this\fs
               *this\caption\width  = *this\frame_width( ) - *this\fs * 2
               
               *this\caption\height = *this\TitleBarHeight + *this\fs - 1
               If *this\caption\height > *this\frame_height( ) - *this\fs 
                  *this\caption\height = *this\frame_height( ) - *this\fs 
               EndIf
               
               ; caption close button
               If Not *this\CloseButton( )\hide
                  *this\CloseButton( )\x = ( *this\caption\x + *this\caption\width ) - ( *this\CloseButton( )\width + *this\caption\_padding )
                  *this\CloseButton( )\y = *this\frame_y( ) + ( *this\caption\height - *this\CloseButton( )\height ) / 2
               EndIf
               
               ; caption maximize button
               If Not *this\MaximizeButton( )\hide
                  If *this\CloseButton( )\hide
                     *this\MaximizeButton( )\x = ( *this\caption\x + *this\caption\width ) - ( *this\MaximizeButton( )\width + *this\caption\_padding )
                  Else
                     *this\MaximizeButton( )\x = *this\CloseButton( )\x - ( *this\MaximizeButton( )\width + *this\caption\_padding )
                  EndIf
                  *this\MaximizeButton( )\y = *this\frame_y( ) + ( *this\caption\height - *this\MaximizeButton( )\height ) / 2
               EndIf
               
               ; caption minimize button
               If Not *this\MinimizeButton( )\hide
                  If *this\MaximizeButton( )\hide
                     *this\MinimizeButton( )\x = *this\CloseButton( )\x - ( *this\MinimizeButton( )\width + *this\caption\_padding )
                  Else
                     *this\MinimizeButton( )\x = *this\MaximizeButton( )\x - ( *this\MinimizeButton( )\width + *this\caption\_padding )
                  EndIf
                  *this\MinimizeButton( )\y = *this\frame_y( ) + ( *this\caption\height - *this\MinimizeButton( )\height ) / 2
               EndIf
               
               ; caption help button
               If Not *this\HelpButton( )\hide
                  If Not *this\MinimizeButton( )\hide
                     *this\HelpButton( )\x = *this\MinimizeButton( )\x - ( *this\HelpButton( )\width + *this\caption\_padding )
                  ElseIf Not *this\MaximizeButton( )\hide
                     *this\HelpButton( )\x = *this\MaximizeButton( )\x - ( *this\HelpButton( )\width + *this\caption\_padding )
                  Else
                     *this\HelpButton( )\x = *this\CloseButton( )\x - ( *this\HelpButton( )\width + *this\caption\_padding )
                  EndIf
                  *this\HelpButton( )\y = *this\CloseButton( )\y
               EndIf
               
               ; title bar width
               If Not *this\HelpButton( )\hide
                  *this\caption\width = *this\HelpButton( )\x - *this\caption\x - *this\caption\_padding
               ElseIf Not *this\MinimizeButton( )\hide
                  *this\caption\width = *this\MinimizeButton( )\x - *this\caption\x - *this\caption\_padding
               ElseIf Not *this\MaximizeButton( )\hide
                  *this\caption\width = *this\MaximizeButton( )\x - *this\caption\x - *this\caption\_padding
               ElseIf Not *this\CloseButton( )\hide
                  *this\caption\width = *this\CloseButton( )\x - *this\caption\x - *this\caption\_padding
               EndIf
            EndIf
         EndIf
         
         ;\\
         If ( Change_x Or Change_y Or Change_width Or Change_height )
            *this\root\repaint = 1
            
            ;\\
            If *this\type = #__type_ScrollArea
               If IsGadget(*this\scroll\gadget[1])
                  ResizeGadget(*this\scroll\gadget[1], DPIUnScaledX(*this\inner_x( )), DPIUnScaledY(*this\inner_y( )), DPIUnScaledX(*this\inner_width( )), DPIUnScaledY(*this\inner_height( )))
                  CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                     UpdateWindow_(GadgetID(*this\scroll\gadget[1]))
                  CompilerEndIf
               EndIf
            EndIf
            
            
            ;\\ Post Event
            If *this\bindresize ; Or Not __gui\event\queuesmask
               Post( *this, #__event_resize )
            EndIf
         EndIf
         
         ;Debug "resize "+*this\class +" "+  *this\Width ;*this\scroll_width()
         
         ;\\ then move and size parent
         ;\\ resize all children's
         If *this\type <> #__type_Splitter
            If *this\haschildren 
               ;Debug *this\class
               Protected pw, ph
               Protected piw, pih
               
               If StartEnum( *this )
                  If widget( )\parent <> *this
                     ; widget( )\resize\clip = #True
                     Continue
                  EndIf
                  ;
                  If Not is_scrollbars_( widget( ))
                     If widget( )\align
                        ;                            If is_root_( widget( )\parent )
                        ;                               piw = DPIUnScaledX(widget( )\parent\inner_width( ))
                        ;                               pih = DPIUnScaledY(widget( )\parent\inner_height( ))
                        ;                            Else
                        piw = (widget( )\parent\inner_width( ))
                        pih = (widget( )\parent\inner_height( ))
                        ;                            EndIf
                        
                        ;\\
                        If widget( )\parent\align
                           pw = ( piw - widget( )\parent\align\width )
                           ph = ( pih - widget( )\parent\align\height )
                        EndIf
                        
                        ;\\
                        ;\\ horizontal
                        ;\\
                        If widget( )\align\left > 0
                           X = widget( )\align\x
                           If widget( )\align\right < 0
                              If widget( )\align\left = 0
                                 X + pw / 2
                              EndIf
                              Width = (( widget( )\align\x + widget( )\align\width ) + pw / 2 ) - X
                           EndIf
                        EndIf
                        If Not widget( )\align\right
                           Width = widget( )\align\width
                           
                           If Not widget( )\align\left
                              X = widget( )\align\x
                              If widget( )\align\left = 0
                                 X + pw / 2
                              EndIf
                              Width = (( widget( )\align\x + widget( )\align\width ) + pw / 2 ) - X
                           EndIf
                        EndIf
                        If widget( )\align\right > 0
                           X = widget( )\align\x
                           If widget( )\align\left < 0
                              ;\\ ( left = proportional & right = 1 )
                              X     = widget( )\align\x + pw / 2
                              Width = (( widget( )\align\x + widget( )\align\width ) + pw ) - X
                           Else
                              If widget( )\align\left = 0
                                 X + pw
                              EndIf
                              Width = (( widget( )\align\x + widget( )\align\width ) + pw ) - X
                           EndIf
                        EndIf
                        ;\\ horizontal proportional
                        If ( widget( )\align\left < 0 And widget( )\align\right <= 0 ) Or
                           ( widget( )\align\right < 0 And widget( )\align\left <= 0 )
                           Protected ScaleX.d = piw / widget( )\parent\align\width
                           Width = ScaleX * widget( )\align\width
                           ;\\ center proportional
                           If widget( )\align\left < 0 And widget( )\align\right < 0
                              X = ( piw - Width ) / 2
                           ElseIf widget( )\align\left < 0 And widget( )\align\right = 0
                              ;\\ right proportional
                              X = piw - ( widget( )\parent\align\width - widget( )\align\x - widget( )\align\width ) - Width
                           ElseIf ( widget( )\align\right < 0 And widget( )\align\left = 0 )
                              ;\\ left proportional
                              X = widget( )\align\x
                           EndIf
                        EndIf
                        
                        ;\\
                        ;\\ vertical
                        ;\\
                        If widget( )\align\top > 0
                           Y = widget( )\align\y
                           If widget( )\align\bottom < 0
                              If widget( )\align\top = 0
                                 Y + ph / 2
                              EndIf
                              Height = (( widget( )\align\y + widget( )\align\height ) + ph / 2 ) - Y
                           EndIf
                        EndIf
                        If Not widget( )\align\bottom
                           Height = widget( )\align\height
                           
                           If Not widget( )\align\top
                              Y = widget( )\align\y
                              If widget( )\align\top = 0
                                 Y + ph / 2
                              EndIf
                              Height = (( widget( )\align\y + widget( )\align\height ) + ph / 2 ) - Y
                           EndIf
                        EndIf
                        If widget( )\align\bottom > 0
                           Y = widget( )\align\y
                           If widget( )\align\top < 0
                              ;\\ ( top = proportional & bottom = 1 )
                              Y      = widget( )\align\y + ph / 2
                              Height = (( widget( )\align\y + widget( )\align\height ) + ph ) - Y
                           Else
                              If widget( )\align\top = 0
                                 Y + ph
                              EndIf
                              Height = (( widget( )\align\y + widget( )\align\height ) + ph ) - Y
                           EndIf
                        EndIf
                        ;\\ vertical proportional
                        If ( widget( )\align\top < 0 And widget( )\align\bottom <= 0 ) Or
                           ( widget( )\align\bottom < 0 And widget( )\align\top <= 0 )
                           Protected ScaleY.d = pih / widget( )\parent\align\height
                           Height = ScaleY * widget( )\align\height
                           ;\\ center proportional
                           If widget( )\align\top < 0 And widget( )\align\bottom < 0
                              Y = ( pih - Height ) / 2
                           ElseIf widget( )\align\top < 0 And widget( )\align\bottom = 0
                              ;\\ bottom proportional
                              Y = pih - ( widget( )\parent\align\height - widget( )\align\y - widget( )\align\height ) - Height
                           ElseIf ( widget( )\align\bottom < 0 And widget( )\align\top = 0 )
                              ;\\ top proportional
                              Y = widget( )\align\y
                           EndIf
                        EndIf
                        
                        Resize( widget( ), (X), (Y), (Width), (Height), 0 )
                     Else
                        Resize( widget( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                     EndIf
                  EndIf
                  ;
                  StopEnum( )
               EndIf
               
            EndIf
         EndIf
        
         ;
         ProcedureReturn *this\root\repaint
      EndProcedure
      
      Procedure ResizeRootWindow( *this._s_WIDGET, X.l, Y.l, Width.l, Height.l )
         If X = #PB_Ignore
            X = WindowX( *this\root\canvas\window )
         Else
            X = DPIUnScaled( X )
         EndIf
         If Y = #PB_Ignore
            Y = WindowY( *this\root\canvas\window )
         Else
            Y = DPIUnScaled( Y )
         EndIf
         If Width = #PB_Ignore
            Width = WindowWidth( *this\root\canvas\window )
         Else
            Width = DPIUnScaled( Width )
         EndIf
         If Height = #PB_Ignore
            Height = WindowHeight( *this\root\canvas\window )
         Else
            Height = DPIUnScaled( Height )
         EndIf
         ;
         ResizeWindow( *this\root\canvas\window, X, Y, Width, Height )
         ResizeGadget( *this\root\canvas\gadget, #PB_Ignore, #PB_Ignore, Width, Height )
         ; Resize( *this, #PB_Ignore, #PB_Ignore, Width, Height )
      EndProcedure
      
      
      ;-
      Procedure.i GetCanvasGadget( *this._s_WIDGET = #Null ) ; Returns canvas gadget
         Protected.i result = #PB_Default
         If *this
            result = *this\root\canvas\gadget
         Else
            If root( )
               result = root( )\canvas\gadget
            EndIf
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetCanvasWindow( *this._s_WIDGET = #Null ) ; Returns window
         Protected.i result = #PB_Default
         If *this
            If is_root_( *this )
               result = *this\root\canvas\window
            Else
               result = *this\window
            EndIf
         Else
            If root( )
               result = root( )\canvas\window
            EndIf
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetWindow( *this._s_WIDGET ) ; Returns window widget
         ProcedureReturn *this\window
      EndProcedure
      
      Procedure.i GetRoot( *this._s_WIDGET ) ; Returns root widget
         ProcedureReturn *this\root
      EndProcedure
      
      
      Procedure   SetMouseXY( X.l, Y.l )
         If Not X < 0
            
         EndIf
         If Not Y < 0
            
         EndIf
      EndProcedure
      
      ;-
      Procedure.l GetRound( *this._s_WIDGET )
         ProcedureReturn DPIUnScaled(*this\round)
      EndProcedure
      
      Procedure   SetRound( *this._s_WIDGET, round.l )
         *this\round = DPIScaled(round)
      EndProcedure
      
      Procedure.a GetFrame( *this._s_WIDGET, mode.b = 0 )
         ProcedureReturn *this\fs[mode]
      EndProcedure
      
      Procedure SetFrame( *this._s_WIDGET, size.a, mode.b = 0 )
         Protected result
         size = DPIScaled( size )
         If *this\fs <> size
            result   = *this\fs
            *this\bs = size
            *this\fs = size
            
            If *this\anchors
               a_size( *this\anchors\id, *this\anchors\size, *this\anchors\mode )
            EndIf
            
            If mode = - 1 ; auto pos
               Resize( *this, *this\container_x( ) - size, *this\container_y( ) - size, *this\frame_width( ) + size * 2, *this\frame_height( ) + size * 2 )
            ElseIf mode = - 2 ; auto pos
                              ;Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               Resize( *this, *this\container_x( ) - (size - result), *this\container_y( ) - (size - result), #PB_Ignore, #PB_Ignore )
            Else
               Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Procedure.s GetClass( *this._s_WIDGET )
         ProcedureReturn *this\class
      EndProcedure
      
      Procedure SetClass( *this._s_WIDGET, class.s )
         
         If *this\class <> class
            *this\class = class
            ;
            If *this\tabbar
               *this\tabbar\class = ClassFromType( *this\tabbar\type ) +"-"+ *this\class
            EndIf
            ProcedureReturn *this
         EndIf
      EndProcedure
      
      ;-
      Procedure.i GetCursor( *this._s_WIDGET = #PB_All, Type.a = 0 )
         If *this > 0
            ProcedureReturn *this\cursor[Type]
         Else
            ProcedureReturn mouse( )\cursor
         EndIf
      EndProcedure
      
      Procedure.i SetCursor( *this._s_WIDGET, *cursor, Type.a = 0 )
         If *this > 0
            If *this\cursor[Type] <> *cursor
               If test_setcursor
                  Debug "setCURSOR( " + *cursor +" )"
               EndIf
               *this\cursor[Type] = *cursor
               If Type
                  ; *this\cursor[Type] = *cursor
               EndIf
               ProcedureReturn 1
            EndIf
         Else
            mouse( )\cursor = *cursor
         EndIf
      EndProcedure
      
      Procedure.i ChangeCursor( *this._s_WIDGET, *cursor )
         Protected result.i
         Static cursor_change_widget
         ;
         StopDraw( )
         If *cursor 
            cursor_change_widget = *this
         Else
            If cursor_change_widget
               *this = cursor_change_widget
               cursor_change_widget = 0
            EndIf
         EndIf
         ;
         If test_changecursor
            Debug ""+*this\class + "  ChangeCursor( "+ *cursor +" ) " +" reset "+ GetCursor( )
         EndIf
         SetCursor( #PB_All, *cursor )
         ;
         If *cursor
            If *this\bindcursor Or *this\root\canvas\bindcursor 
               result = Post( *this, #__event_Cursor, #PB_All, *cursor )
               If result > 0
                  *cursor = result
               EndIf
            EndIf
         EndIf
         ;
         Cursor::Set( *this\root\canvas\gadget, *cursor ) 
         StartDraw( *this\root )
         ;
         ProcedureReturn *cursor
      EndProcedure
      
      Procedure   DoChangeCursor( *this._s_WIDGET )
         If MouseButtonPress( )
            If mouse( )\drop
               If Not *this\disable
                  If *this\drop And MouseEnter( *this ) And 
                     *this\drop\format = mouse( )\drop\format And
                     *this\drop\actions & mouse( )\drop\actions And
                     ( *this\drop\private = mouse( )\drop\private Or
                       *this\drop\private & mouse( )\drop\private )
                     ;
                     If mouse( )\dragstart <> #PB_Drag_Enter
                        mouse( )\dragstart = #PB_Drag_Enter
                        ; Debug "#PB_Drag_Enter"
                        
                        If GetCursor( ) = cursor::#__cursor_Drag
                           ChangeCursor( Pressed( ), cursor::#__cursor_Drop )
                        EndIf
                     EndIf
                  Else
                     If *this\press
                        If *this\enter
                           If mouse( )\dragstart <> #PB_Drag_Leave
                              mouse( )\dragstart = #PB_Drag_Leave
                              ; Debug "press #PB_Drag_Leave"
                              
                              ;                               Debug *this\RowPressed( )\rindex
                              If *this\row
                                 If *this\RowPressed( )
                                    SetState( *this, *this\RowPressed( )\rindex )
                                 EndIf
                              EndIf
                              
                              If GetCursor( ) = cursor::#__cursor_Drag
                                 ChangeCursor( *this, cursor::#__cursor_Drag )
                              EndIf
                           EndIf
                        EndIf
                     Else
                        If mouse( )\dragstart = #PB_Drag_Enter
                           mouse( )\dragstart = #PB_Drag_Leave
                           ; Debug "#PB_Drag_Leave"
                           
                           If GetCursor( ) = cursor::#__cursor_Drop
                              ChangeCursor( Pressed( ), cursor::#__cursor_Drag )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         Else
            If Not a_index( )
               If Not *this\disable And
                  MouseEnter( *this ) And *this\cursor
                  
                  If GetCursor( ) <> *this\cursor
                     ChangeCursor( *this, *this\cursor )
                  EndIf
               Else
                  If GetCursor( ) <> 0
                     ; Debug "reset cursor"
                     ChangeCursor( *this, 0 )
                  EndIf
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Global igOpaque = RGB(0,0,0) ; RGBA(128,128,0,255)
      Procedure SetLayeredWindow( Window, Color )
         CompilerSelect #PB_Compiler_OS
            CompilerCase #PB_OS_Windows
               SetWindowLongPtr_(WindowID(Window), #GWL_EXSTYLE, GetWindowLongPtr_(WindowID(Window), #GWL_EXSTYLE) | #WS_EX_LAYERED) 
               SetLayeredWindowAttributes_(WindowID(Window), RGBA( Red(Color), Green(Color), Blue(Color), Alpha(color)), 0, #LWA_COLORKEY)
               
            CompilerCase #PB_OS_Linux
               ;XShapeCombineMask_()
               Protected *Widget.GtkWidget
               *Widget = WindowID(Window)
               *Widget = *Widget\object
               ;       Protected *screen.GdkScreen = gtk_widget_get_screen_(*Widget)
               ;       Protected *colormap.GdkColormap = gdk_screen_get_default_colormap_(*screen);gdk_screen_get_rgba_colormap_(gdk_screen_get_default_())
               
               ;       gtk_widget_set_colormap_(*Widget, *colormap)
               ;       gtk_widget_shape_combine_mask_(*Widget, 0,0,0)
               ;                Protected FixedBox = GadgetID(0) ; GtkContainer(GtkWidget(GadgetID(0)));
               ;                
               ;                ;Protected FixedBox = g_list_nth_data_(gtk_container_get_children_(gtk_bin_get_child_(WindowID(Window))), 0) ; виджет привязанный к окну
               ;                Debug FixedBox
               ;                g_signal_connect(FixedBox, "expose-event", @RedrawWidget(), 0)                                              ; обработчик сигнала
               ;                                                                                                                            ; time = g_timeout_add_(60, @movie(), #Null)                                                           ; таймер движение окна
               ;                gtk_widget_set_app_paintable_(FixedBox, #True)                                                              ; разрешаем отрисовку в виджете
               ;                
               ;                
               ;                ; ----- Удалить GdkWindow ресурсы, чтобы иметь возможность изменить цветовую гамму
               ;                gtk_widget_unrealize_(WindowID(Window))
               ;                ;gtk_widget_unrealize_(GtkWidget(GadgetID(0)))
               ;                
               ;                ; ----- Поддержка альфа канала
               ;                Protected Screen = gtk_widget_get_screen_(WindowID(Window))
               ;                Protected Colormap = gdk_screen_get_rgba_colormap(Screen) ; RGBA( Red(Color), Green(Color), Blue(Color), Alpha(Color)) ;
               ;                
               ;                If Colormap
               ;                   gtk_widget_set_colormap_(WindowID(Window), Colormap)
               ;                   ;gtk_widget_set_colormap_(GtkWidget(GadgetID(0)), Colormap)
               ;                Else
               ;                   MessageRequester("Error", "Your current system configuration doesn't support transparency!")
               ;                   End
               ;                EndIf
               ;                
               ;                ;gtk_window_set_opacity(WindowID(Window), 0.3)
               
         CompilerEndSelect
      EndProcedure
      
      Macro add_color( _result_, _address_, _color_type_, _color_, _alpha_, _column_ = )
         _address_\_alpha = alpha
         
         Select _color_type_
            Case #__BackColor
               If _address_\back#_column_ <> _color_
                  _address_\back#_column_ = _color_
                  *this\ChangeColor | 1<<0
                  _result_ = #True
               EndIf
            Case #__FrontColor
               If _address_\front#_column_ <> _color_
                  _address_\front#_column_ = _color_
                  *this\ChangeColor | 1<<2
                  _result_ = #True
               EndIf
            Case #__ForeColor
               If _address_\fore#_column_ <> _color_
                  _address_\fore#_column_ = _color_
                  *this\ChangeColor | 1<<3
                  _result_ = #True
               EndIf
            Case #__FrameColor
               If _address_\frame#_column_ <> _color_
                  _address_\frame#_column_ = _color_
                  *this\ChangeColor | 1<<4
                  _result_ = #True
               EndIf
         EndSelect
         
      EndMacro
      
      Procedure.i GetColor( *this._s_WIDGET, ColorType.l, ColorState.a = 0 )
         Protected result
         
         Select ColorType
            Case #__LineColor  : result = *this\LineColor
            Case #__BackColor  : result = *this\color\back[ColorState]
            Case #__FrontColor : result = *this\color\front[ColorState]
            Case #__FrameColor : result = *this\color\frame[ColorState]
            Case #__ForeColor  : result = *this\color\fore[ColorState]
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l SetColor( *this._s_WIDGET, ColorType.l, color.i, ColorState.b = 0 )
         ;          *this\color\alpha.allocate( COLOR )
         Protected result.l, alpha.a = Alpha( Color )
         
         If ColorState = #PB_All
            SetColor( *this, ColorType, color, 0 )
            SetColor( *this, ColorType, color, 1 )
            SetColor( *this, ColorType, color, 2 )
            SetColor( *this, ColorType, color, 3 )
         Else
            If Not alpha
               Color = Color & $FFFFFF | 255 << 24
               alpha.a = Alpha( Color )
            EndIf
            
            add_color( result, *this\color, ColorType, Color, alpha, [ColorState] )
            If ColorType = #__LineColor
               If *this\LineColor <> Color
                  *this\LineColor = Color
                  result = #True
               EndIf
            EndIf
            
            If *this\scroll
               If ColorType = #__BackColor
                  If *this\scroll\v
                     *this\scroll\v\color\back[ColorState] = color
                  EndIf
                  If *this\scroll\h
                     *this\scroll\h\color\back[ColorState] = color
                  EndIf
               EndIf
            EndIf
            
            If result
               PostRepaint( *this\root )
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l GetItemColor( *this._s_WIDGET, Item.l, ColorType.l, Column.l = 0, ColorState.a = 0 )
         Protected result, *color._s_color
         
         Select *this\type
            Case #__type_Editor, #__type_Tree, #__type_ListIcon
               If SelectItem( *this, Item )
                  *color = *this\__rows( )\color
               EndIf
               
            Default
               *color = *this\bar\button[Item]\color
         EndSelect
         
         Select ColorType
            Case #__BackColor  : result = *color\back[ColorState]
            Case #__FrontColor : result = *color\front[ColorState]
            Case #__FrameColor : result = *color\frame[ColorState]
            Case #__ForeColor  : result = *color\fore[ColorState]
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l SetItemColor( *this._s_WIDGET, Item.l, ColorType.l, color.i, Column.l = 0, ColorState.b = 0 )
         Protected result, alpha.a 
         
         ;
         If *this\row And *this\countitems
            If Item = #PB_All
               PushListPosition( *this\__rows( ))
               ForEach *this\__rows( )
                  add_color( result, *this\__rows( )\color, ColorType, Color, alpha, [Column] )
               Next
               PopListPosition( *this\__rows( ))
               
            Else
               If SelectItem( *this, Item )
                  If ColorState = #PB_All
                     add_color( result, *this\__rows( )\color, ColorType, Color, alpha, [0] )
                     add_color( result, *this\__rows( )\color, ColorType, Color, alpha, [1] )
                     add_color( result, *this\__rows( )\color, ColorType, Color, alpha, [2] )
                     add_color( result, *this\__rows( )\color, ColorType, Color, alpha, [3] )
                  Else
                     If Not alpha
                        Color = Color & $FFFFFF | 255 << 24
                        alpha.a = Alpha( Color )
                     EndIf
                     add_color( result, *this\__rows( )\color, ColorType, Color, alpha, [ColorState] )
                  EndIf
               EndIf
            EndIf
         EndIf
         
         Protected *TabBox._s_WIDGET
         If *this\type = #__type_Panel
            *TabBox = *this\tabbar
         ElseIf *this\type = #__type_ToolBar Or
                *this\type = #__type_PopupBar Or
                *this\type = #__type_MenuBar Or
                *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            *this = *TabBox
            ;
            If Item = #PB_All
               PushListPosition( *this\__tabs( ))
               ForEach *this\__tabs( )
                  add_color( result, *this\__tabs( )\color, ColorType, Color, alpha, [Column] )
               Next
               PopListPosition( *this\__tabs( ))
               
            Else
               If IsItem( *this, Item )
                  If SelectElement( *this\__tabs( ), Item )
                     If ColorState = #PB_All
                        add_color( result, *this\__tabs( )\color, ColorType, Color, alpha, [0] )
                        add_color( result, *this\__tabs( )\color, ColorType, Color, alpha, [1] )
                        add_color( result, *this\__tabs( )\color, ColorType, Color, alpha, [2] )
                     Else
                        add_color( result, *this\__tabs( )\color, ColorType, Color, alpha, [ColorState] )
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure SetBackgroundColor( *this._s_WIDGET, color.i )
         ProcedureReturn SetColor( *this, #__BackColor, color )
      EndProcedure
      
      Procedure   SetFontColor( *this._s_WIDGET, color.i )
         ProcedureReturn SetColor( *this, #__FrontColor, color )
      EndProcedure
      
      Procedure.i GetFontColor( *this._s_WIDGET )
         ProcedureReturn GetColor( *this, #__FrontColor )
      EndProcedure
      
      
      ;-
      Macro add_image( _address_, _img_, _size_ = 0 )
         ;
         If IsImage( _img_ )
            If _size_
               _address_\width  = _size_
               _address_\height = _size_
               ResizeImage( _img_, _size_, _size_, #PB_Image_Raw )
            Else
               _address_\width  = ImageWidth( _img_ )
               _address_\height = ImageHeight( _img_ )
            EndIf
            
            _address_\change  = 1
            _address_\image   = _img_
            _address_\imageID = ImageID( _img_ )
         Else
            _address_\change  = - 1
            _address_\image   = - 1
            _address_\imageID = 0
            _address_\width   = 0
            _address_\height  = 0
         EndIf
      EndMacro
      
      Procedure.i GetImage( *this._s_WIDGET )
         ProcedureReturn *this\picture\image
      EndProcedure
      
      Procedure SetImage( *this._s_WIDGET, img );, mode.a = 0 )
         If *this\stringbar
            *this = *this\stringbar
         EndIf
         
         add_image( *this\picture, img )
         
         If *this\type <> #__type_window
            If IsImage( img )
               *this\picture\x   = *this\padding\x
               *this\picture\y  = *this\padding\y
               
               ; make horizontal scroll max
               If *this\scroll_width( ) <> *this\picture\width + *this\padding\x * 2
                  *this\scroll_width( ) = *this\picture\width + *this\padding\x * 2
               EndIf
               
               ; make vertical scroll max
               If *this\scroll_height( ) <> *this\picture\height + *this\padding\y * 2
                  *this\scroll_height( ) = *this\picture\height + *this\padding\y * 2
               EndIf
               
               ; updatate scrollarea size
               bar_area_update( *this )
            EndIf
         EndIf
         
         ProcedureReturn *this\picture\imageID
      EndProcedure
      
      Procedure   RemoveImage( *this._s_WIDGET, img )
         If *this\picture\imageID And 
            *this\picture\image = img
            SetImage( *this, - 1 )
         EndIf
         If *this\picture[#__image_BackGround]\imageID And 
            *this\picture[#__image_BackGround]\image = img
            SetBackgroundImage( *this, - 1 )
         EndIf
         
         PushMapPosition( roots( ) )
         ForEach roots( )
            If roots( )\picture\image = img
               ProcedureReturn 0
            EndIf
         Next
         PopMapPosition( roots( ) )
         ;
         PushListPosition( widgets( ) )
         ForEach widgets( )
            If widgets( )\picture\image = img
               ProcedureReturn 0
            EndIf
         Next
         PopListPosition( widgets( ) )
         
         If IsImage( img )
            FreeImage( img )
            ProcedureReturn 1
         EndIf
      EndProcedure
      
      Procedure.i GetItemImage( *this._s_WIDGET, Item.l )
         Protected result
         
         If *this\type = #__type_Editor Or
            *this\type = #__type_Properties Or
            *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #PB_Default
            EndIf
            
            result = *this\__rows( )\picture\image
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemImage( *this._s_WIDGET, Item.l, img )
         Protected result
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If SelectItem( *this, Item )
               If *this\__rows( )\picture\image <> img
                  add_image( *this\__rows( )\picture, img, *this\picturesize )
                  *this\WidgetChange( ) = 1
               EndIf
            EndIf
         EndIf
         
         PostRepaint( *this\root )
         ProcedureReturn result
      EndProcedure
      
      Procedure SetBackgroundImage( *this._s_WIDGET, *img )
         add_image( *this\picture[#__image_BackGround], *img )
         ProcedureReturn *this\picture[#__image_BackGround]\imageID
      EndProcedure
      
      ;-
      Procedure.i GetData( *this._s_WIDGET )
         ProcedureReturn *this\data
      EndProcedure
      
      Procedure SetData( *this._s_WIDGET, *data )
         *this\data = *data
      EndProcedure
      
      Procedure.i GetItemData( *this._s_WIDGET, item.l )
         If *this\tabbar
            If SelectElement( *this\tabbar\__tabs( ), item )
               ProcedureReturn *this\tabbar\__tabs( )\data
            Else
               ProcedureReturn #False
            EndIf
         EndIf
         
         If *this\countitems
            If *this\type = #__type_Editor
               If is_no_select_item_( *this\__lines( ), item )
                  ProcedureReturn #False
               EndIf
               
               ProcedureReturn *this\__lines( )\data
            EndIf
            
            If is_no_select_item_( *this\__rows( ), item )
               ProcedureReturn #False
            EndIf
            
            ProcedureReturn *this\__rows( )\data
         EndIf
      EndProcedure
      
      Procedure.i SetItemData( *This._s_WIDGET, item.l, *data )
         If *this\tabbar
            If SelectElement( *this\tabbar\__tabs( ), item )
               *this\tabbar\__tabs( )\data = *data
            EndIf
            ProcedureReturn #False
         EndIf
         
         If *this\countitems
            If *this\type = #__type_Editor
               If is_no_select_item_( *this\__lines( ), item )
                  ProcedureReturn #False
               EndIf
               
               *this\__lines( )\data = *data
               ProcedureReturn 1
            EndIf
            
            If is_no_select_item_( *this\__rows( ), item )
               ProcedureReturn #False
            EndIf
            
            *this\__rows( )\data = *data   
         EndIf
      EndProcedure
      
      ;-
      Procedure.i GetState( *this._s_WIDGET )
         ; This is a universal function which works For almost all gadgets: 
         ; 
         ; - Buttonimage( )  : returns 1 If a #PB_Button_Toggle button is toggled, Else 0. 
         ; - Button( )       : returns 1 If a #PB_Button_Toggle button is toggled, Else 0. 
         ; - Option( )       : returns 1 If activated, 0 otherwise. 
         ; - CheckBox( )     : returns one of the following values:
         ;                           #PB_Checkbox_Checked  : The check mark is set.
         ;                           #PB_Checkbox_Unchecked: The check mark is Not set.
         ;                           #PB_Checkbox_Inbetween: The "in between" state is set. (Only For #PB_CheckBox_ThreeState checkboxes)
         ;
         ; - Calendar( )     : returns the currently selected date. 
         ; - Date( )         : returns the currently selected date/time. If #PB_Date_CheckBox was used, And the checkbox is unchecked, 0 is returned. 
         ;
         ; - Shortcut( )     : returns the currently selected keyboard shortcut. 
         ; - image( )        : returns the imageiD of the currently displayed img. 
         ; - IPAddress( )    : returns the current IP address. 
         ;
         ; - MDI( )          : returns the currently focused child window, -1 If none has the focus. 
         ; - Panel( )        : returns the current panel index, -1 If no panel. 
         ;
         ; - Spin( )         : returns the current value of the SpinGadget. 
         ; - Splitter( )     : returns the current splitter position, in pixels. 
         ; - ProgressBar( )  : returns the current value of the ProgressBar. 
         ; - ScrollBar( )    : returns the current slider position. 
         ; - TrackBar( )     : returns the current position of the TrackBar (value inside the minimum - maximum range). 
         ;
         ; - ListIcon( )     : returns the first selected item index, -1 If none is selected. 
         ; - ComboBox( )     : returns the currently selected item index, -1 If none is selected. 
         ; - ListView( )     : returns the currently selected item index, -1 If none is selected. 
         ; - Tree( )         : returns the currently selected item index, -1 If none is selected.
         ; - ExplorerList( ) : returns the index of the first selected item in the Gadget, -1 If none is selected. 
         ; - ExplorerTree( ) : returns the type of the currently selected item (#PB_Explorer_File Or #PB_Explorer_Directory). 
         
         If *this = 0
            ProcedureReturn 0
         EndIf
         
         ; custom object
         If *this\type = 0
            ProcedureReturn *this\state
         EndIf
         
         ;
         If *this\type = #__type_Window
            If *this\resize\minimize
               ProcedureReturn #PB_Window_Minimize
            EndIf
            If *this\resize\maximize
               ProcedureReturn #PB_Window_Maximize
            EndIf
            ProcedureReturn #PB_Window_Normal
         EndIf
         
         ;
         If *this\type = #__type_ComboBox
            If *this\PopupCombo( )
               ProcedureReturn GetState( *this\PopupCombo( ) )
            EndIf
         EndIf
         
         ;
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If *this\RowPressed( )
               ProcedureReturn *this\RowPressed( )\rindex
            ElseIf *this\RowFocused( )
               ProcedureReturn *this\RowFocused( )\rindex
            Else
               ProcedureReturn - 1 ; *this\RowFocusedIndex( ) ; \TabState( )
            EndIf
         EndIf
         
         ;
         If *this\class = "IPAddress"
            ProcedureReturn *this\LineFocusedIndex( )
         EndIf
         
         ;
         If *this\type = #__type_Editor
            ProcedureReturn *this\LineFocusedIndex( )
         EndIf
         
         ;
         If *this\type = #__type_CheckBox Or
            *this\type = #__type_Option Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_Button
            
            If *this\togglebox
               ProcedureReturn *this\togglebox\checked
            EndIf
         EndIf
         
         ;
         Protected *TabBox._s_WIDGET
         If *this\type = #__type_Panel
            *TabBox = *this\tabbar
         ElseIf *this\type = #__type_ToolBar Or
                *this\type = #__type_PopupBar Or
                *this\type = #__type_MenuBar Or
                *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            ProcedureReturn *TabBox\TabState( )
         EndIf
         
         ;
         If *this\type = #__type_Splitter
            ProcedureReturn DPIUnScaled( *this\bar\thumb\pos )
         ElseIf *this\bar
            ProcedureReturn *this\bar\page\pos
         EndIf
      EndProcedure
      
      Procedure.b SetState( *this._s_WIDGET, state.i )
         ; This is a universal function which works For almost all gadgets: 
         ; 
         ; - Buttonimage( ) : change the current state of a #PB_Button_Toggle gadget (1 = toggled, 0 = normal). 
         ; - Button( )      : change the current state of a #PB_Button_Toggle gadget (1 = toggled, 0 = normal). 
         ; - Option( )      : 1 To activate it, 0 otherwise. 
         ; - CheckBox( )    : Change the state of the checkbox. The following values are possible:
         ;                     #PB_Checkbox_Checked  : Set the check mark.
         ;                     #PB_Checkbox_Unchecked: Remove the check mark.
         ;                     #PB_Checkbox_Inbetween: Set the "in between" state. (Only For #PB_CheckBox_ThreeState checkboxes)
         ;
         ; - Calendar( )    : set the currently selected date. 
         ; - Date( )        : set the currently displayed date/time. If #PB_Date_CheckBox was used, set 'State' To 0 To uncheck the checkbox. 
         ;
         ; - Shortcut( )    : Change the current shortcut. 
         ; - image( )       : change the current img of the gadget. 
         ; - IPAddress( )   : change the current IP address. 
         ;
         ; - Panel( )       : change the current panel. 
         ; - MDI( )         : Change the currently focused childwindow (by giving the related #Window number), Or use one of the following values:
         ;                     #PB_MDI_Cascade         : Cascade the child windows
         ;                     #PB_MDI_TileVertically  : Tile the childwindows vertically
         ;                     #PB_MDI_TileHorizontally: Tile the childwindows horizontally
         ;                     #PB_MDI_Next            : Give focus To the Next childwindow
         ;                     #PB_MDI_Previous        : Give focus To the previous childwindow
         ;                     #PB_MDI_Arrange         : Arrange the iconic (minimized) windows
         ;
         ; - Spin( )        : change the current value. 
         ; - Splitter( )    : change the current splitter position, in pixels. 
         ; - TrackBar( )    : change the current cursor position. 
         ; - ProgressBar( ) : change progress bar value. A value of #PB_Progressbar_Unknown can be used To indicate that the progress is unknown. 
         ; - ScrollBar( )   : change the current slider position. 
         ;
         ; - ListIcon( )    : change the currently selected item. If -1 is specified, all items will be deselected. 
         ; - ComboBox( )    : change the currently selected item. 
         ; - ListView( )    : change the currently selected item. . If -1 is specified, it will remove the selection. 
         ; - Tree( )        : change the currently selected item, -1 selects no item. 
         ; - Web( )         : perform some action on the gadget. See WebGadget For further descriptions.
         
         Protected result
         Protected *row._s_ROWS
         
         ;\\ custom object
         If *this = 0
            Debug "не понятно почему вызывается при открытии примера addfont2 " + #PB_Compiler_Procedure +"()"
            ProcedureReturn #True
         EndIf
         
         If *this\type = 0
            *this\state = state
            ProcedureReturn #True
         EndIf
         
         ;\\ Ok
         If *this\togglebox
            If *this\togglebox\checked <> state
               *this\togglebox\checked = state
               
               If *this\type = #__type_ButtonImage Or
                  *this\type = #__type_Button
                  If state
                     *this\ColorState( ) = #__s_2
                  Else
                     If *this\enter
                        *this\ColorState( ) = #__s_1
                     Else
                        *this\ColorState( ) = #__s_0
                     EndIf
                  EndIf
               EndIf
               
               ;
               If *this\type = #__type_Option Or
                  *this\type = #__type_CheckBox
                  
                  If *this\groupbar And
                     *this\groupbar\groupbar <> *this
                     If *this\groupbar\groupbar
                        *this\groupbar\groupbar\togglebox\checked = #False
                     EndIf
                     *this\groupbar\groupbar = *this
                  EndIf
               EndIf
               
               ; toggle box change
               If Not Post( *this, #__event_Change )
                  PostEventRepaint( *this\root )
               EndIf
               
               ProcedureReturn #True
            EndIf
         EndIf
         
         ;
         If *this\type = #__type_image
            add_image( *this\picture, state )
            
            ; make horizontal scroll max
            If *this\scroll_width( ) <> *this\picture\width + *this\padding\x * 2
               *this\scroll_width( ) = *this\picture\width + *this\padding\x * 2
            EndIf
            
            ; make vertical scroll max
            If *this\scroll_height( ) <> *this\picture\height + *this\padding\y * 2
               *this\scroll_height( ) = *this\picture\height + *this\padding\y * 2
            EndIf
            
            ; updatate scrollarea size
            bar_area_update( *this )
         EndIf
         
         ;\\ - widget::IPaddress_SetState( )
         If *this\class = "IPAddress" ; type = #__type_IPAddress
            If *this\LineFocusedIndex( ) <> State
               *this\LineFocusedIndex( ) = State
               SetText( *this, Str( IPAddressField( State, 0 )) + "." +
                               Str( IPAddressField( State, 1 )) + "." +
                               Str( IPAddressField( State, 2 )) + "." +
                               Str( IPAddressField( State, 3 ) ))
            EndIf
         EndIf
         
         ;\\ - widget::Window_SetState( )
         If *this\type = #__type_Window
            ; restore state
            If state = #PB_Window_Normal
               If *this\resize\minimize Or *this\resize\maximize
                  If Post( *this, #__event_restore )
                     *this\resize\minimize = #False
                     *this\resize\maximize = #False
                     ;
                     If is_root_( *this )
                        SetWindowState( *this\root\canvas\window, #PB_Window_Normal )
                        ResizeGadget( *this\root\canvas\gadget, 
                                      *this\x[#__c_restore],
                                      *this\y[#__c_restore],
                                      *this\width[#__c_restore],
                                      *this\height[#__c_restore] )
                     Else
                        Resize( *this,
                                *this\x[#__c_restore],
                                *this\y[#__c_restore],
                                *this\width[#__c_restore],
                                *this\height[#__c_restore], 0 )
                     EndIf
                     ;
                     result = #True
                  EndIf
               EndIf
            EndIf
            
            ; maximize state
            If state = #PB_Window_Maximize
               If Not *this\resize\maximize
                  If Post( *this, #__event_maximize )
                     *this\resize\maximize = #True
                     ;
                     If Not *this\resize\minimize
                        If *this\parent
                           *this\x[#__c_restore]      = *this\container_x( )
                           *this\y[#__c_restore]      = *this\container_y( )
                           *this\width[#__c_restore]  = *this\container_width( )
                           *this\height[#__c_restore] = *this\container_height( )
                        Else
                           *this\x[#__c_restore]      = #PB_Ignore
                           *this\y[#__c_restore]      = #PB_Ignore
                           *this\width[#__c_restore]  = Width( *this, #__c_frame )
                           *this\height[#__c_restore] = Height( *this, #__c_frame )
                        EndIf
                     EndIf
                     ;
                     Protected X,Y,Width,Height
                     If is_root_( *this )
                        SetWindowState( *this\root\canvas\window, #PB_Window_Maximize )
                        Width = WindowWidth(*this\root\canvas\window)-GadgetX(*this\root\canvas\gadget)*2
                        Height = WindowHeight(*this\root\canvas\window)-GadgetY(*this\root\canvas\gadget)*2
                        If GadgetWidth(*this\root\canvas\gadget) <> Width Or 
                           GadgetHeight(*this\root\canvas\gadget) <> Height
                           ResizeGadget( *this\root\canvas\gadget, #PB_Ignore, #PB_Ignore, Width,Height )
                        EndIf
                     Else
                        X = mouse( )\steps ; *this\bs - *this\fs
                        Y = mouse( )\steps ; *this\bs - *this\fs
                        Width = *this\parent\container_width( ) - *this\bs * 2 - mouse( )\steps
                        Height = *this\parent\container_height( ) - *this\bs * 2 - *this\fs[2] - mouse( )\steps
                        Resize( *this, X, Y, Width, Height, 0 )
                     EndIf
                     ;
                     result = #True
                  EndIf
               EndIf
            EndIf
            
            ; minimize state
            If state = #PB_Window_Minimize
               If Not *this\resize\minimize
                  If Post( *this, #__event_Minimize )
                     *this\resize\minimize = #True
                     ;
                     If Not *this\resize\maximize
                        If *this\parent
                           *this\x[#__c_restore]      = *this\container_x( )
                           *this\y[#__c_restore]      = *this\container_y( )
                           *this\width[#__c_restore]  = *this\container_width( )
                           *this\height[#__c_restore] = *this\container_height( )
                        EndIf
                     EndIf
                     ;
                     If is_root_( *this )
                        SetWindowState( *this\root\canvas\window, #PB_Window_Minimize )
                        ResizeGadget( *this\root\canvas\gadget, 
                                      #PB_Ignore, 
                                      #PB_Ignore,
                                      #PB_Ignore,
                                      #PB_Ignore )
                     Else
                        Resize( *this,
                                #PB_Ignore,
                                *this\parent\container_height( ) - *this\bs * 2 - *this\fs[2],
                                #PB_Ignore,
                                0, 0 )
                     EndIf
                     ;
                     result = #True
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ - widget::Editor_SetState( )
         If *this\type = #__type_Editor
            edit_SetState( *this, state )
         EndIf
         
         ;\\
         If *this\type = #__type_ComboBox
            If *this\PopupCombo( )
               SetState( *this\PopupCombo( ), state )
            EndIf
         EndIf
         
         ;\\ - widget::tree_setState
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If *this\countitems
               ;\\ min\max state
               If State < 0
                  State = - 1
               EndIf
               If State > *this\countitems - 1
                  State = *this\countitems - 1
               EndIf
               
               ;\\
               ;                If *this\TabState( ) <> state 
               ;                   ; Debug "SETSTATE "+*this\class +" ["+ *this\ RowFocusedIndex( ) +" "+ state +"]"
               ;                   *this\TabState( ) = state 
               
               If state = - 1
                  ;\\ reset all selected items
                  If *this\RowFocused( ) And
                     *this\RowFocused( )\_focus
                     *this\RowFocused( )\_focus = 0
                     *this\RowFocused( )\ColorState( ) = #__s_0
                     *this\WidgetChange( ) = 1
                     DoEvents( *this, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ) )
                     *this\RowFocused( ) = #Null
                     ProcedureReturn - 1
                  EndIf
               Else
                  
                  If Not ( *this\RowFocused( ) And *this\RowFocused( )\rindex = state )
                     If SelectElement( *this\__rows( ), State )
                        *row = *this\__rows( )
                     EndIf
                  EndIf
                  
                  If *row
                     ; Debug "SETSTATE "+*this\class +" ["+ *this\ RowFocusedIndex( ) +" "+ state +"]"
                     *this\RowFocusedIndex( ) = state  ; 
                     *this\WidgetChange( ) = 1
                     
                     ;\\ example file "D&D-items"
                     If *this\drop And mouse( )\dragstart
                        If *this\RowPressed( )
                           *this\__rows( )\rindex = State
                           
                           Debug " SETSTATE ---------- *this\RowPressed( )\children's " + *this\RowPressed( )\childrens
                           
                           ;\\
                           PushListPosition( *this\__rows( ))
                           If *this\__rows( )\rindex > *this\RowPressed( )\rindex
                              ;\\ drag up and drop down
                              While PreviousElement( *this\__rows( ))
                                 If *this\__rows( )\rindex > *this\RowPressed( )\rindex
                                    *this\__rows( )\rindex - 1 - *this\RowPressed( )\childrens
                                 EndIf
                              Wend
                           ElseIf *this\__rows( )\rindex < *this\RowPressed( )\rindex
                              ;\\ drag down and drop up
                              While NextElement( *this\__rows( ))
                                 If *this\__rows( )\rindex < *this\RowPressed( )\rindex
                                    *this\__rows( )\rindex + 1 + *this\RowPressed( )\childrens
                                 EndIf
                              Wend
                           EndIf
                           PopListPosition( *this\__rows( ))
                           
                           ;\\
                           PushListPosition( *this\__rows( ))
                           While NextElement( *this\__rows( ))
                              If *this\__rows( )\sublevel = *this\RowPressed( )\sublevel
                                 Break
                              ElseIf *this\__rows( )\sublevel > *this\RowPressed( )\sublevel : State + 1
                                 *this\__rows( )\rindex = State
                              EndIf
                           Wend
                           PopListPosition( *this\__rows( ))
                        EndIf
                     EndIf
                     
                     ;\\
                     If *this\RowFocused( ) <> *row
                        ;\\ scroll to visible
                        *this\row\autoscroll = #True
                        
                        ;
                        If *this\RowFocused( ) And
                           *this\RowFocused( )\_focus
                           *this\RowFocused( )\_focus = 0
                           *this\RowFocused( )\ColorState( ) = #__s_0
                           ;
                           DoEvents( *this, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ) )
                        EndIf
                        
                        ;
                        *this\RowFocused( ) = *row
                        
                        ; click select mode
                        If *this\mode\clickSelect And 
                           *this\RowFocused( )\_focus = 1
                           *this\RowFocused( )\_focus = 0
                        Else
                           *this\RowFocused( )\_focus = 1
                        EndIf
                        
                        ;                         If *this\RowFocused( )\_focus
                        ;                            If *this\focus = 2
                        ;                               If *this\RowFocused( )\ColorState( ) <> #__s_2
                        ;                                  *this\RowFocused( )\ColorState( ) = #__s_2
                        ;                                  result = 2
                        ;                               EndIf
                        ;                            Else
                        ;                               If *this\RowFocused( )\ColorState( ) <> #__s_3
                        ;                                  *this\RowFocused( )\ColorState( ) = #__s_3
                        ;                                  result = 3
                        ;                               EndIf
                        ;                            EndIf
                        ;                         Else
                        ;                            If *this\RowFocused( )\ColorState( ) <> #__s_1
                        ;                               *this\RowFocused( )\ColorState( ) = #__s_1
                        ;                               result = 1
                        ;                            EndIf
                        ;                         EndIf
                        ;                         
                        ;                         ;
                                                If is_integral_( *this ) 
                                                   If *this\parent  
                                                      If *this\parent\parent And *this\parent\parent\type = #__type_ComboBox
                                                         SetText( *this\parent\parent, *this\RowFocused( )\text\string )
                                                         If *this\RowFocused( )\picture\image > - 1
                                                            SetImage( *this\parent\parent, *this\RowFocused( )\picture\image )
                                                         EndIf
                                                         DoEvents( *this\parent\parent, #__event_Change, *this\RowFocused( )\rindex, *this\RowFocused( ))
                                                         If result  
                                                            DoEvents( *this\parent\parent, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ))
                                                         EndIf 
                                                      Else
                                                         If *this\parent\type = #__type_ComboBox
                                                            SetText( *this\parent, *this\RowFocused( )\text\string )
                                                            If *this\RowFocused( )\picture\image > - 1
                                                               SetImage( *this\parent, *this\RowFocused( )\picture\image )
                                                            EndIf
                                                         EndIf 
                                                         DoEvents( *this\parent, #__event_Change, *this\RowFocused( )\rindex, *this\RowFocused( ))
                                                         If result  
                                                            DoEvents( *this\parent, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ))
                                                         EndIf 
                                                      EndIf 
                                                   EndIf 
;                                                 Else
;                                                     DoEvents(*this, #__event_Change, *this\RowFocused( )\rindex, *this\RowFocused( ))
;                                                    If result  
;                                                       DoEvents( *this, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ))
;                                                    EndIf 
                                                EndIf
                        ProcedureReturn 1
                     EndIf
                  EndIf
                  
               EndIf
            EndIf
         EndIf
         
         ;
         Protected *TabBox._s_WIDGET
         If *this\type = #__type_Panel
            *TabBox = *this\tabbar
         ElseIf *this\type = #__type_ToolBar Or
                *this\type = #__type_PopupBar Or
                *this\type = #__type_MenuBar Or
                *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            *this = *TabBox
            
            ; prevent selection of a non-existent tab
            If state < 0
               state = - 1
            EndIf
            If state > *this\countitems - 1
               state = *this\countitems - 1
            EndIf
            
            If *this\TabState( ) <> state
               *this\TabState( ) = state
               
               *this\TabChange( ) = #True
               
               If *this\TabFocused( )
                  *this\TabFocused( )\_focus = 0
                  *this\TabFocused( )       = #Null
               EndIf
               
               If state >= 0
                  ;PushListPosition( *this\__tabs( ) )
                  SelectElement( *this\__tabs( ), state )
                  
                  *this\TabFocused( )       = *this\__tabs( )
                  *this\TabFocused( )\ScrollToActive( - 1 ) ; scroll to active tab
                  
                  ;PopListPosition( *this\__tabs( ) )
               EndIf
               
               If is_integral_( *this )
                  If *this\parent\haschildren
                     If StartEnum( *this\parent )
                        ; hide all children's except those whose parent-item is selected
                        HideState( widgets( ), widgets( )\parent )
                        DisableState( widgets( ), widgets( )\parent )
                        StopEnum( )
                     EndIf
                  EndIf
                  *this = *this\parent
               EndIf
               ;
               ;\\ tab items focus change
               DoEvents( *this, #__event_Change, state, *this\TabFocused( ) )
               result = #True
            EndIf
            
         EndIf
         
         ;\\
         Select *this\type
            Case #__type_Spin ,
                 #__type_Track,
                 #__type_Scroll,
                 #__type_Progress,
                 #__type_Splitter
               
               If *this\type = #__type_splitter
                  If *this\bar\vertical
                     state = DPIScaledX( state )
                  Else
                     state = DPIScaledY( state )
                  EndIf
               EndIf
               
               bar_PageChange( *this, state, 2 ) ; and post change event
               
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l GetItemState( *this._s_WIDGET, Item.l )
         Protected result
         
         ;
         If *this\type = #__type_Editor
            If item = - 1
               ProcedureReturn *this\edit_caret_2( )
            Else
               ProcedureReturn *this\edit_caret_1( )
            EndIf
            
         ElseIf *this\type = #__type_Tree Or 
                *this\type = #__type_ListView Or
                *this\type = #__type_ListIcon Or
                *this\type = #__type_Properties
            
            If SelectItem( *this, Item )
               If *this\__rows( )\_focus ; ColorState( )
                  result | #PB_Tree_Selected
               EndIf
               ;
               If *this\__rows( )\checkbox And 
                  *this\__rows( )\checkbox\checked
                  If *this\__rows( )\checkbox\checked = #PB_Checkbox_Inbetween
                     result | #PB_Tree_Inbetween
                  Else
                     result | #PB_Tree_Checked
                  EndIf
               EndIf
               ;
               If *this\__rows( )\childrens 
                  If *this\__rows( )\buttonbox\checked
                     result | #PB_Tree_Collapsed
                  Else
                     result | #PB_Tree_Expanded
                  EndIf
               EndIf
            EndIf
            
         Else
            ProcedureReturn *this\bar\page\pos
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.b SetItemState( *this._s_WIDGET, Item.l, State.b )
         Protected result
         
         If *this\type = #__type_Editor
            result = edit_SetItemState( *this, Item, state )
         EndIf
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListView Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_Properties
            
            If *this\countitems
               If is_no_select_item_( *this\__rows( ), Item )
                  ProcedureReturn #False
               EndIf
               
               Protected *row._s_ROWS
               *row = *this\__rows( )
               ;
               If State & #PB_Tree_Selected
                  If *row\_focus = 0
                     *row\_focus = 1
                     If *this\focus
                        *row\ColorState( ) = #__s_2
                     Else
                        *row\ColorState( ) = #__s_3
                     EndIf
                  EndIf
               Else
                  If *row\_focus = 1
                     *row\_focus = 0
                     *row\ColorState( ) = #__s_0
                  EndIf
               EndIf
               ;
               If *row\checkbox
                  If State & #PB_Tree_Inbetween 
                     *row\checkbox\checked = #PB_Checkbox_Inbetween
                  ElseIf State & #PB_Tree_Checked
                     *row\checkbox\checked = #PB_Checkbox_Checked
                  Else
                     *row\checkbox\checked = #PB_Checkbox_Unchecked
                  EndIf
               EndIf
               ;
               If *row\childrens 
                  If State & #PB_Tree_Expanded Or State & #PB_Tree_Collapsed 
                     *row\buttonbox\checked = Bool( State & #PB_Tree_Collapsed )
                     *this\WidgetChange( )  = #True
                     ;
                     PushListPosition( *this\__rows( ))
                     While NextElement( *this\__rows( ))
                        If *this\__rows( )\sublevel =< *row\sublevel
                           Break
                        EndIf
                        If *this\__rows( )\RowParent( )
                           *this\__rows( )\hide = Bool( *this\__rows( )\RowParent( )\buttonbox\checked | *this\__rows( )\RowParent( )\hide )
                        EndIf
                     Wend
                     PopListPosition( *this\__rows( ))
                  EndIf
                  ;
                  ProcedureReturn #True
               EndIf
            EndIf
            
         EndIf
         
         If *this\type = #__type_ToolBar Or
            *this\type = #__type_MenuBar Or
            *this\type = #__type_PopupBar Or
            *this\type = #__type_TabBar
            ;
            If State & #PB_Tree_Selected = #PB_Tree_Selected
               If SetState( *this, Item )
                  result = #True
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure   SetTextXY( *this._s_WIDGET, X.l, Y.l )
         If Not X < 0
            *this\text\x = DesktopScaledX(X)
         EndIf
         If Not Y < 0
            *this\text\y = DesktopScaledX(Y)
         EndIf
      EndProcedure
      
      Procedure   GetCaret( *this._s_WIDGET, mode.a = 0 )
         If mode
            ProcedureReturn *this\edit_caret_0( )
         Else
            ProcedureReturn *this\edit_caret_1( )
         EndIf
      EndProcedure
      
      Procedure   SetCaret( *this._s_WIDGET, position.i )
         If *this\edit_caret_1( ) <> position
            *this\edit_caret_1( ) = position
         EndIf
         If *this\edit_caret_2( ) <> position
            *this\edit_caret_2( ) = position
         EndIf
      EndProcedure
      
      Procedure.s GetText( *this._s_WIDGET );, column.l = 0 )
         If *this\type = #__type_Tree
            If *this\RowFocused( )
               ProcedureReturn *this\RowFocused( )\text\string
            EndIf
         EndIf
         
         If *this\type = #__type_Window
            ProcedureReturn *this\TitleText( )\string
         EndIf
         
         If *this\text\pass
            ProcedureReturn *this\text\pass$
         Else
            ProcedureReturn *this\text\string
         EndIf
      EndProcedure
      
      Procedure.s GetItemText( *this._s_WIDGET, Item.l, Column.l = 0 )
         Protected result.s
         
         If *this\type = #__type_combobox
            If *this\PopupCombo( )
               If is_no_select_item_( *this\PopupCombo( )\__rows( ), Item )
                  ProcedureReturn ""
               EndIf
               
               result = *this\PopupCombo( )\__rows( )\text\string
            EndIf
         EndIf
         
         Protected *TabBox._s_WIDGET
         If *this\type = #__type_Panel
            *TabBox = *this\tabbar
         ElseIf *this\type = #__type_ToolBar Or
                *this\type = #__type_PopupBar Or
                *this\type = #__type_MenuBar Or
                *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            *this = *TabBox
            
            If is_no_select_item_( *this\__tabs( ), Item )
               ProcedureReturn ""
            EndIf
            
            result = *this\__tabs( )\text\string
            
         Else
            If *this\countitems ; row count
               If *this\type = #__type_Editor Or
                  *this\type = #__type_string Or
                  *this\type = #__type_text
                  If is_no_select_item_( *this\__lines( ), Item )
                     ProcedureReturn ""
                  EndIf
                  
                  result = *this\__lines( )\text\string
               Else
                  If is_no_select_item_( *this\__rows( ), Item )
                     ProcedureReturn ""
                  EndIf
                  
                  result = *this\__rows( )\text\string
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l SetItemText( *this._s_WIDGET, Item.l, Text.s, Column.l = 0 )
         Protected result
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_Properties
            
            If is_no_select_item_( *this\__rows( ), item )
               ProcedureReturn #False
            EndIf
            
            If *this\__rows( )\text\string <> Text
               *this\__rows( )\text\string = Text
               result                        = #True
            EndIf
            
            If result
               *this\WidgetChange( )              = 1
               ; *this\__rows( )\TextChange( ) = 1
            EndIf
         EndIf
         
         ;
         Protected *TabBox._s_WIDGET
         If *this\type = #__type_Panel
            *TabBox = *this\tabbar
         ElseIf *this\type = #__type_ToolBar Or
                *this\type = #__type_PopupBar Or
                *this\type = #__type_MenuBar Or
                *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            *this = *TabBox
            If is_no_select_item_( *this\__tabs( ), item )
               ProcedureReturn #False
            EndIf
            
            *this\__tabs( )\TextChange( ) = 1
            *this\__tabs( )\text\string = Text.s
            *this\WidgetChange( )       = #True
            *this\TabChange( )          = #True
            result                      = #True
         EndIf
         
         
         ; PostRepaint( *this\root )
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.i GetFont( *this._s_WIDGET )
         ProcedureReturn *this\font
         ProcedureReturn GetFontID( *this ) 
      EndProcedure
      
      Procedure.i SetFont( *this._s_WIDGET, Font.i )
         Protected result, FontID
         
         If IsFont( Font )
            FontID = FontID( Font )
         Else
            FontID = PB_( GetGadgetFont )( #PB_Default )
            Font = - 1
         EndIf
         
         If FontID
            If ChangeFontID( *this, FontID )
               *this\font = Font
               result = #True
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetItemFont( *this._s_WIDGET, Item.l )
         Protected result
         
         If *this\type = #__type_Editor Or
            *this\type = #__type_Properties Or
            *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #False
            EndIf
            
            result = *this\__rows( )\font ; GetFontID( *this\__rows( ) )
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemFont( *this._s_WIDGET, Item.l, Font.i )
         Protected result, FontID
         
         If IsFont( Font )
            FontID = FontID( Font )
            
            Protected *TabBox._s_WIDGET
            If *this\type = #__type_Panel
               *TabBox = *this\tabbar
            ElseIf *this\type = #__type_TabBar
               *TabBox = *this
            EndIf
            
            If *TabBox
               If is_no_select_item_( *TabBox\__tabs( ), Item )
                  ProcedureReturn #False
               EndIf
               ;
               If ChangeFontID( *TabBox\__tabs( ), FontID )
                  *TabBox\__tabs( )\font = Font
                  result = #True
               EndIf
            Else
               If *this\row
                  If is_no_select_item_( *this\__rows( ), Item )
                     ProcedureReturn #False
                  EndIf
                  ;
                  If ChangeFontID( *this\__rows( ), FontID )
                     *this\__rows( )\font = Font
                     result = #True
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.i GetAttribute( *this._s_WIDGET, Attribute.l )
         Protected result.i
         If Not *this
            ProcedureReturn 
         EndIf
         
         If *this\type = #__type_Panel
            Select Attribute
               Case #PB_Panel_ItemWidth : result = DPIUnScaledX(*this\inner_width( ))                           
               Case #PB_Panel_ItemHeight : result = DPIUnScaledY(*this\inner_height( ))                        
               Case #PB_Panel_TabHeight : result = *this\fs[1]+*this\fs[2]+*this\fs[3]+*this\fs[4] 
            EndSelect
         EndIf
         
         ; is_scrollbars_( *this )
         If *this\type = #__type_ScrollArea Or
            *this\type = #__type_MDI
            ;
            Select Attribute
               Case #PB_ScrollArea_X : result = DPIUnScaledX(*this\scroll\h\bar\page\pos)
               Case #PB_ScrollArea_Y : result = DPIUnScaledY(*this\scroll\v\bar\page\pos)
               Case #PB_ScrollArea_InnerWidth : result = DPIUnScaledX(*this\scroll\h\bar\max)
               Case #PB_ScrollArea_InnerHeight : result = DPIUnScaledY(*this\scroll\v\bar\max)
               Case #PB_ScrollArea_ScrollStep : result = *this\scroll\increment
            EndSelect
         EndIf
         
         If *this\type = #__type_Splitter
            Select Attribute
               Case #PB_Splitter_FirstGadget : result = *this\split_1( )
               Case #PB_Splitter_SecondGadget : result = *this\split_2( )
               Case #PB_Splitter_FirstMinimumSize : result = *this\bar\min[1]
               Case #PB_Splitter_SecondMinimumSize : result = *this\bar\min[2]
            EndSelect
         EndIf
         
         ;
         If *this\type = #__type_ToolBar Or
            *this\type = #__type_PopupBar Or
            *this\type = #__type_MenuBar Or
            *this\type = #__type_TabBar Or
            *this\type = #__type_Scroll Or
            *this\type = #__type_Progress Or ; *this\type = #__type_Splitter Or
            *this\type = #__type_Track Or
            *this\type = #__type_Spin
            
            Select Attribute
               Case #__bar_minimum : result = *this\bar\min          
               Case #__bar_maximum : result = *this\bar\max          
               Case #__bar_pagelength : result = *this\bar\page\len  
                  
               Case #__bar_scrollstep : result = *this\scroll\increment 
               Case #__bar_buttonsize : result = *this\bar\button[1]\size
                  
               Case #__bar_direction : result = *this\bar\direction
               Case #__flag_Invert : result = *this\bar\invert
            EndSelect
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetAttribute( *this._s_WIDGET, Attribute.l, *value )
         Protected result.i
         Protected value = *value
         
         If *this\type = #__type_ToolBar Or
            *this\type = #__type_PopupBar Or
            *this\type = #__type_MenuBar Or
            *this\type = #__type_TabBar Or
            *this\type = #__type_Scroll Or
            *this\type = #__type_Progress Or
            *this\type = #__type_Track Or
            *this\type = #__type_Splitter Or
            *this\type = #__type_Spin
            ;
            result = bar_SetAttribute( *this, Attribute, *value )
         EndIf
         
         If *this\type = #__type_Editor 
            If Attribute = #PB_Editor_WordWrap
               If *value > 0
                  *this\text\multiline = - 1
               Else
                  *this\text\multiline = 1
               EndIf
               ;*this\WidgetChange( ) = 1
               *this\TextChange( ) = 1
               
               PostReDraw( *this\root )
            EndIf
         EndIf
         
         If *this\type = #__type_ButtonImage Or
            *this\type = #__type_Button 
            ;
            Select Attribute
               Case #PB_Button_Image
                  ; add_image( *this\picture, *value )
                  SetImage( *this, *value )
                  add_image( *this\picture[#__image_Released], *value )
                  
               Case #PB_Button_PressedImage
                  add_image( *this\picture[#__image_Pressed], *value )
                  
            EndSelect
         EndIf
         
         ;  is_scrollbars_( *this )
         If *this\type = #__type_ScrollArea Or
            *this\type = #__type_MDI
            
            Select Attribute
               Case #PB_ScrollArea_X
                  If bar_PageChange( *this\scroll\h, DPIScaledX(*value), 2 ) ; and post event
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_Y
                  If bar_PageChange( *this\scroll\v, DPIScaledY(*value), 2 ) ; and post event
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_InnerWidth
                  If bar_SetAttribute( *this\scroll\h, #__bar_maximum, DPIScaledX(*value) )
                     If IsGadget(*this\scroll\gadget[2])
                        ResizeGadget(*this\scroll\gadget[2], #PB_Ignore, #PB_Ignore, *value, #PB_Ignore)
                        CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                           UpdateWindow_(GadgetID(*this\scroll\gadget[2]))
                        CompilerEndIf
                     EndIf
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_InnerHeight
                  If bar_SetAttribute( *this\scroll\v, #__bar_maximum, DPIScaledY(*value))
                     If IsGadget(*this\scroll\gadget[2])
                        ResizeGadget(*this\scroll\gadget[2], #PB_Ignore, #PB_Ignore, #PB_Ignore, *value)
                        CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                           UpdateWindow_(GadgetID(*this\scroll\gadget[2]))
                        CompilerEndIf
                     EndIf
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_ScrollStep
                  If *this\scroll
                     If *this\scroll\v
                        *this\scroll\v\scroll\increment = value
                     EndIf
                     If *this\scroll\h
                        *this\scroll\h\scroll\increment = value
                     EndIf
                  EndIf
                  
            EndSelect
         EndIf
         
         If *this\type = #__type_image
            Select Attribute
               Case #__DisplayMode
                  Static Width, Height
                  
                  Select Value
                     Case 0 ; Default
                        *this\picture\align\left = 1
                        *this\picture\align\top = 1
                        *this\picture\align\right = 0
                        *this\picture\align\bottom = 0
                        
                        ;
                        If (Width And Height)
                           ResizeImage( *this\picture\image, Width, Height )
                           Width = 0
                           Height = 0
                        EndIf
                        
                     Case 1 ; Center
                        *this\picture\align\left = 0
                        *this\picture\align\top = 0
                        *this\picture\align\right = 0
                        *this\picture\align\bottom = 0
                        
                     Case 2 ; Mosaic
                        
                        
                     Case 3 ; Stretch
                        If Not (Width And Height)
                           Width = *this\picture\width
                           Height = *this\picture\height
                        EndIf
                        ResizeImage( *this\picture\image, Width*3, Height*3 )
                        
                     Case 4 ; Proportionally
                        If Not (Width And Height)
                           Width = *this\picture\width
                           Height = *this\picture\height
                        EndIf
                        ResizeImage( *this\picture\image, Width*2, Height*2 )
                        
                  EndSelect
                  
                  ;
                  SetState( *this, *this\picture\image )
                  
            EndSelect
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetItemAttribute( *this._s_WIDGET, Item.l, Attribute.l, Column.l = 0 )
         Protected result
         
         If *this\type = #__type_Tree Or *this\type = #__type_ListIcon
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #False
            EndIf
            
            If *this\type = #__type_Tree
               If Attribute = #PB_Tree_SubLevel
                  result = *this\__rows( )\sublevel
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemAttribute( *this._s_WIDGET, Item.l, Attribute.l, *value, Column.l = 0 )
         Protected result
         
         If *this\type = #__type_Window
            
         ElseIf *this\type = #__type_Tree Or *this\type = #__type_ListIcon
            
            Select Attribute
               Case #__flag_optionboxes
                  *this\mode\optionboxes = *value
                  
               Case #PB_Tree_SubLevel
                  If is_no_select_item_( *this\__rows( ), Item )
                     ProcedureReturn #False
                  EndIf
                  
                  *this\__rows( )\sublevel = *value
                  
            EndSelect
            
         ElseIf *this\type = #__type_Editor
            
         ElseIf *this\type = #__type_Panel
            
         Else
         EndIf
         
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.b GetFocus( *this._s_WIDGET )
         ProcedureReturn *this\focus
      EndProcedure
      
      Procedure.b SetFocus( *this._s_WIDGET, state.b = #__s_2 )
         If *this\focus <> state
            If test_focus_set
               If state = #__s_2
                  Debug "DoActivate "+*this\focus +" "+ *this\class
               ElseIf state = #__s_3
                  Debug "DoDeactivate "+*this\focus +" "+ *this\class
               EndIf
            EndIf
            *this\focus = state
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      Macro DoActivate( _this_ )
         If SetFocus( _this_, #__s_2 )
            widget( ) = _this_
            DoEvents( _this_, #__event_Focus )
         EndIf
      EndMacro
      
      Macro DoDeactivate( _this_ )
         If SetFocus( _this_, #__s_3 )
            widget( ) = _this_
            DoEvents( _this_, #__event_LostFocus )
         EndIf
      EndMacro               
      
      Macro DoActivateWindows( _this_ )
         If Not is_root_( _this_ ) And _this_\address And Not _this_\anchors
            PushListPosition( widgets( ) )
            ChangeCurrentElement( widgets( ), _this_\address )
            While PreviousElement( widgets( ) )
               If is_window_( widgets( ) )
                  If IsChild( _this_, widgets( ) )
                     DoActivate( widgets( ) )
                  EndIf
               EndIf
            Wend
            PopListPosition( widgets( ) )
         EndIf
      EndMacro
      
      Macro DoDeactiveWindows( _this_ )
         If Not is_root_( _this_ ) And _this_\address And Not _this_\anchors
            PushListPosition( widgets( ) )
            ChangeCurrentElement( widgets( ), _this_\address )
            While PreviousElement( widgets( ) )
               If is_window_( widgets( ) )
                  If Not IsChild( _this_, widgets( ) )
                     DoDeactivate( widgets( ) )
                  EndIf
               EndIf
            Wend
            PopListPosition( widgets( ) )
         EndIf
      EndMacro
      
      Procedure   SetForeground( *window._s_WIDGET )
         Protected last
         ;
         If Not is_window_( *window )
            If is_root_( *window\window )
               ProcedureReturn 0
            Else
               *window = *window\window
            EndIf
         EndIf
         ;
         If *window\parent
            last = GetPosition( *window\parent, #PB_List_Last )
            ;
            If Sticked( ) = last
               SetPosition( *window, #PB_List_Before, last )
            Else
               SetPosition( *window, #PB_List_After, last )
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i SetActive( *this._s_WIDGET )
         Protected result.i 
         Protected._s_WIDGET *active, *deactive, *deactiveWindow, *deactiveGadget
         
         ;
         If *this
            If is_integral_( *this )
               *active = *this\parent
            Else
               *active = *this
            EndIf
            
            If keyboard( )\active <> *active
               ;
               If *active
                  If *active\parent And 
                     *active\parent\type = #__type_Splitter
                     ;
                     Protected *parent._s_WIDGET = *active\parent
                     While *parent And Not *parent\anchors
                        *parent = *parent\parent
                     Wend
                     ;
                     If *parent And *parent\anchors
                        *active = *parent
                     EndIf
                  EndIf
                  ;
                  If Not *active\anchors
                     If *active\disable 
                        If *active\window And 
                           *active\window\disable 
                           ProcedureReturn 0
                        Else
                           ; 
                           *active = *active\window 
                        EndIf
                     EndIf 
                     
                     ;\\
                     ;                   If *active\focus = #__s_nofocus
                     ;                      *active = *active\parent
                     ;                      If *active And *active\focus = #__s_nofocus 
                     ;                         ProcedureReturn 0
                     ;                      EndIf
                     ;                   EndIf
                  EndIf
                  
                  If Not *active 
                     ProcedureReturn 0
                  EndIf
               EndIf
               ;
               *active\root\active = *active
               ; keyboard( )\widget = *active
               
               ;\\
               ;                If  *active\anchors And 
               ;                    *active\parent And
               ;                   *active\parent\anchors
               ;                  ; keyboard( )\active = *active
               ;                  a_set( *active )
               ;                Else
               keyboard( )\deactive = keyboard( )\active
               
               *deactive = keyboard( )\deactive
               If ActiveWindow( )
                  *deactiveWindow = ActiveWindow( )
                  *deactiveGadget = ActiveGadget( )
               EndIf
               
               If is_Window_( *active )
                  ActiveWindow( ) = *active
               Else
                  ActiveWindow( ) = *active\window
                  If ActiveWindow( ) 
                     If is_gadget_( *active )
                        ActiveGadget( ) = *active
                     EndIf
                  EndIf
               EndIf
               
               ; это чтобы при активации окна, если есть активный гаджет
               ; чтобы он получил фокус клавиатуры
               If ActiveGadget( ) 
                  keyboard( )\active = ActiveGadget( )
               Else
                  keyboard( )\active = *active
               EndIf
               
               ; 
               If *deactive
                  If is_integral_( *deactive )
                     *deactive = *deactive\parent
                  EndIf
                  ;
                  If *deactiveWindow And
                     *deactiveWindow <> *active  
                     
                     ;
                     If Not IsChild( *active, *deactiveWindow )
                        ;\\ set deactive all parents
                        If *deactive\address 
                           PushListPosition( widgets( ) )
                           ChangeCurrentElement( widgets( ), *deactive\address )
                           While PreviousElement( widgets( ) )
                              If is_window_( widgets( ) )
                                 If Not IsChild( *active, widgets( ) )
                                    DoDeactivate( widgets( ) )
                                 EndIf
                              EndIf
                           Wend
                           PopListPosition( widgets( ) )
                        EndIf
                        
                        ;
                        DoDeactivate( *deactiveWindow )
                     EndIf
                     
                     If *deactiveGadget   
                        If *deactiveGadget <> *active
                           DoDeactivate( *deactiveGadget )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;
               If ActiveWindow( )
                  If ActiveWindow( )
                     ;\\ set active all parents
                     DoActivateWindows( *active )
                     DoActivate( ActiveWindow( ) )
                  EndIf
                  
                  If ActiveGadget( )
                     DoActivate( ActiveGadget( ) )
                  EndIf
               EndIf
               ;                EndIf
            Else
               Debug "-------"+ *this\class +" "+ *Active\class +"-------"
                  If *this = *Active
                  ; activate canvas
                  If ActiveWindow( ) 
                     If ActiveWindow( )\root = *active\root
                        DoActivate( ActiveWindow( ) )
                        
                        If *active\address
                           ;\\ set active all parents
                           DoActivateWindows( *active )
                        EndIf
                        
                        If ActiveWindow( )\root
                           DoActivate( ActiveWindow( )\root )
                        EndIf
                        
                        If ActiveGadget( ) 
                           DoActivate( ActiveGadget( ) )
                        EndIf
                     EndIf
                  EndIf
                  
                  DoActivate( *active )
                  
                  ; set active canvas
                  If GetActiveGadget( ) <> *active\root\canvas\gadget
                     SetActiveGadget( *active\root\canvas\gadget )
                  EndIf
               EndIf
               ProcedureReturn 0
            EndIf 
         Else
            ; deactivate canvas
            If keyboard( )\active
               *deactive = keyboard( )\active
               If is_integral_( *deactive )
                  *deactive = *deactive\parent
               EndIf
               ;
               If ActiveWindow( ) 
                  If ActiveWindow( )\root
                     DoDeactivate( ActiveWindow( )\root )
                  EndIf
                  
                  If *deactive\address
                     ;\\ set deactive all parents
                     DoDeactiveWindows( *deactive )
                  EndIf
                  
                  If ActiveWindow( )
                     DoDeactivate( ActiveWindow( ) )
                  EndIf
                  
                  If ActiveGadget( ) 
                     DoDeactivate( ActiveGadget( ) )
                  EndIf
               EndIf
               
               ; reset active canvas
               CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
                  If GetActiveGadget( ) = *deactive\root\canvas\gadget
                     SetActiveGadget( - 1 )
                  EndIf
               CompilerEndIf
               ProcedureReturn 0   
            EndIf
         EndIf
         
         ProcedureReturn #True
      EndProcedure
      
      ;-
      Procedure   GetLast( *this._s_WIDGET, tabindex.l = #PB_Default )
         Protected *last._s_WIDGET = *this\LastWidget( )
         
         While *last\LastWidget( )
            If *last = *last\LastWidget( )
               ; Debug "   -    "+*last\class
               Break
            Else
               *last = *last\LastWidget( )
            EndIf
         Wend
         
         ;          Debug ""+GetClass(*last)
         ;          ;
         ;          If StartEnum( *this )
         ;             *last = widget( )
         ;             StopEnum( )
         ;          EndIf
         ;          Debug "   "+GetClass(*last)
         ;
         ProcedureReturn *last
      EndProcedure
      
      Procedure   RePosition( *this._s_WIDGET, *parent._s_WIDGET, *after._s_WIDGET )
         ;
         If *this\parent 
            If *this\parent\FirstWidget( ) = *this
               *this\parent\FirstWidget( ) = *this\AfterWidget( )
            EndIf
            ;
            If *this\parent\LastWidget( ) = *this
               *this\parent\LastWidget( ) = *this\BeforeWidget( )
            EndIf
         Else
            *this\LastWidget( ) = *this 
         EndIf
         ;
         If *parent
            If *parent\tabbar And *parent\tabbar\type = #__type_TabBar
               If *this\TabIndex( ) = *parent\tabbar\countitems - 1
                  *parent\LastWidget( ) = *this
               EndIf
            Else
               *parent\LastWidget( ) = *this
            EndIf
            ;
            If *this\BeforeWidget( )
               *this\BeforeWidget( )\AfterWidget( ) = *this\AfterWidget( )
            EndIf
            ;
            If *this\AfterWidget( )
               *this\AfterWidget( )\BeforeWidget( ) = *this\BeforeWidget( )
            EndIf
            ;
            If *after
               If *after\parent = *parent
                  If *after\AfterWidget( )
                     *after\AfterWidget( )\BeforeWidget( ) = *this
                  EndIf
                  ;
                  If *this <> *after
                     *this\AfterWidget( ) = *after\AfterWidget( )
                     *this\BeforeWidget( ) = *after
                     *after\AfterWidget( ) = *this
                  EndIf
               Else
                  *this\AfterWidget( ) = *parent\FirstWidget( )
                  If *parent\FirstWidget( )
                     *this\AfterWidget( )\BeforeWidget( ) = *this
                  EndIf
                  ;
                  *this\BeforeWidget( ) = #Null
                  *parent\FirstWidget( ) = *this
               EndIf
            EndIf
            ;
            If *parent\FirstWidget( ) = #Null
               *parent\FirstWidget( ) = *this
            EndIf
         EndIf
         ;
      EndProcedure   
      
      Procedure   ChangePosition( *this._s_WIDGET, position.l, *widget._s_WIDGET )
         ;
         If *this\BeforeWidget( )
            *this\BeforeWidget( )\AfterWidget( ) = *this\AfterWidget( )
         EndIf
         If *this\AfterWidget( )
            *this\AfterWidget( )\BeforeWidget( ) = *this\BeforeWidget( )
         EndIf
         If *this\parent\FirstWidget( ) = *this
            *this\parent\FirstWidget( ) = *this\AfterWidget( )
         EndIf
         If *this\parent\LastWidget( ) = *this
            *this\parent\LastWidget( ) = *this\BeforeWidget( )
         EndIf
         
         ;
         If Position = #PB_List_First Or
            Position = #PB_List_Before
            
            *this\AfterWidget( )    = *widget
            *this\BeforeWidget( )   = *widget\BeforeWidget( )
            *widget\BeforeWidget( ) = *this
            
            If *this\BeforeWidget( )
               *this\BeforeWidget( )\AfterWidget( ) = *this
            Else
               If *this\parent\FirstWidget( )
                  *this\parent\FirstWidget( )\BeforeWidget( ) = *this
               EndIf
               *this\parent\FirstWidget( ) = *this
            EndIf
         EndIf
         
         If Position = #PB_List_Last Or
            Position = #PB_List_After
            
            *this\BeforeWidget( )  = *widget
            *this\AfterWidget( )   = *widget\AfterWidget( )
            *widget\AfterWidget( ) = *this
            
            If *this\AfterWidget( )
               *this\AfterWidget( )\BeforeWidget( ) = *this
            Else
               If *this\parent\LastWidget( )
                  *this\parent\LastWidget( )\AfterWidget( ) = *this
               EndIf
               *this\parent\LastWidget( ) = *this
            EndIf
         EndIf
         
         ;
         If Position = #PB_List_First Or
            Position = #PB_List_Last 
            PushListPosition( widgets( ) )
            ForEach widgets( )
               widgets( )\layer = ListIndex( widgets( ) )
            Next
            PopListPosition( widgets( ) )
         Else
            If *this\AfterWidget( )
               *this\AfterWidget( )\layer = *this\layer + 1 + *this\haschildren
            EndIf
            If *this\BeforeWidget( )
               *this\BeforeWidget( )\layer = *this\layer - 1 - *this\haschildren
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i GetPosition( *this._s_WIDGET, position.l, tabindex.l = #PB_Default )
         Protected._s_WIDGET *first, *last
         
         If tabindex = #PB_Default
            Select position
               Case #PB_List_First    : ProcedureReturn *this\FirstWidget( )
               Case #PB_List_Before   : ProcedureReturn *this\BeforeWidget( )
               Case #PB_List_After    : ProcedureReturn *this\AfterWidget( )
               Case #PB_List_Last     : ProcedureReturn *this\LastWidget( )
            EndSelect
         Else
            If position = #PB_List_First
               *first = *this\FirstWidget( ) 
               ;
               If *this\tabbar 
                  If *this\haschildren
                     If *first And *first\TabIndex( ) < tabindex
                        PushListPosition( widgets( ) )
                        ChangeCurrentElement( widgets( ), *first\address )
                        *first = *this
                        While NextElement( widgets( ) )
                           If widgets( )\parent = *this 
                              If widgets( )\TabIndex( ) >= tabindex
                                 *first = widgets( )
                                 Break
                              EndIf
                           EndIf
                        Wend
                        PopListPosition( widgets( ) )
                     EndIf
                  EndIf
               EndIf
               ;
               ProcedureReturn *first
            EndIf
            
            If position = #PB_List_Last
               *last = *this\LastWidget( ) 
               ;
               If *this\tabbar 
                  If *this\haschildren
                     If *last And *last\TabIndex( ) > tabindex
                        PushListPosition( widgets( ) )
                        ChangeCurrentElement( widgets( ), *last\address )
                        *last = *this
                        While PreviousElement( widgets( ) )
                           If widgets( )\parent = *this 
                              If widgets( )\TabIndex( ) =< tabindex
                                 *last = widgets( )
                                 Break
                              EndIf
                           EndIf
                        Wend
                        PopListPosition( widgets( ) )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ProcedureReturn *last
         EndIf
      EndProcedure
      
      Procedure SetPosition( *this._s_WIDGET, position.l, *widget._s_WIDGET = #Null ) ; Ok
         Protected *last._s_WIDGET
         ;
         If *widget = #Null
            Select Position
               Case #PB_List_Before : *widget = *this\BeforeWidget( )
               Case #PB_List_After  : *widget = *this\AfterWidget( )
               Case #PB_List_First 
                  If *this\parent
                     *widget = GetPosition( *this\parent, Position, *this\TabIndex( ) )
                  EndIf
               Case #PB_List_Last 
                  If *this\parent
                     *widget = GetPosition( *this\parent, Position, *this\TabIndex( ) )
                  EndIf
            EndSelect
         EndIf
         ;
         If *widget
            If is_level_( *this, *widget )
               If Position = #PB_List_First Or
                  Position = #PB_List_Before
                  
                  PushListPosition( widgets( ))
                  ChangeCurrentElement( widgets( ), *this\address )
                  MoveElement( widgets( ), #PB_List_Before, *widget\address )
                  widgets( )\layer = ListIndex( widgets( ) )
                  
                  If *this\haschildren
                     While PreviousElement( widgets( ))
                        If IsChild( widgets( ), *this )
                           MoveElement( widgets( ), #PB_List_After, *widget\address )
                           widgets( )\layer = ListIndex( widgets( ) )
                        EndIf
                     Wend
                     
                     While NextElement( widgets( ))
                        If IsChild( widgets( ), *this )
                           MoveElement( widgets( ), #PB_List_Before, *widget\address )
                           widgets( )\layer = ListIndex( widgets( ) )
                        EndIf
                     Wend
                  EndIf
                  PopListPosition( widgets( ))
               EndIf
               
               If Position = #PB_List_Last Or
                  Position = #PB_List_After
                  
                  *last = GetLast( *widget, *widget\TabIndex( ) )
                  If *last
                     PushListPosition( widgets( ))
                     ChangeCurrentElement( widgets( ), *this\address )
                     MoveElement( widgets( ), #PB_List_After, *last\address )
                     widgets( )\layer = ListIndex( widgets( ) )
                     
                     If *this\haschildren
                        While NextElement( widgets( ))
                           If IsChild( widgets( ), *this )
                              MoveElement( widgets( ), #PB_List_Before, *last\address )
                              widgets( )\layer = ListIndex( widgets( ) )
                           EndIf
                        Wend
                        
                        While PreviousElement( widgets( ))
                           If IsChild( widgets( ), *this )
                              MoveElement( widgets( ), #PB_List_After, *this\address )
                              widgets( )\layer = ListIndex( widgets( ) )
                           EndIf
                        Wend
                     EndIf
                     PopListPosition( widgets( ))
                  EndIf
               EndIf
               
               ChangePosition( *this, position, *widget )
               ProcedureReturn #True
            EndIf
         EndIf
         
      EndProcedure
      
      ;-
      Procedure ReParent( *this._s_WIDGET, *parent._s_WIDGET )
         ;\\
         If Not is_integral_( *this )
            If Not is_root_( *parent )
               *parent\haschildren + 1
            EndIf
         EndIf
        
         ;\\
         If *this\parent
            If Not is_root_( *this\parent )
               *this\parent\haschildren - 1
            EndIf
         Else
            If Not *this\child
               ; If Not is_root_( *parent )
                  *parent\root\haschildren + 1
               ; EndIf
            EndIf
         EndIf
         
         ;\\
         If *parent\root
            *this\root = *parent\root
         Else
            *this\root = *parent
         EndIf
         
         ;\\
         If is_window_( *parent )
            *this\window = *parent
         Else
            *this\window = *parent\window
         EndIf
         
         ;\\
         *this\level  = *parent\level + 1
         *this\parent = *parent
         
         ;\\ is integrall scroll bars
         If *this\scroll
            If *this\scroll\v
               *this\scroll\v\root   = *this\root
               *this\scroll\v\window = *this\window
            EndIf
            If *this\scroll\h
               *this\scroll\h\root   = *this\root
               *this\scroll\h\window = *this\window
            EndIf
         EndIf
         
         ;\\ is integrall tab bar
         If *this\tabbar
            *this\tabbar\root   = *this\root
            *this\tabbar\window = *this\window
         EndIf
         If *this\menubar
            *this\menubar\root   = *this\root
            *this\menubar\window = *this\window
         EndIf
         
         ;\\ is integrall string bar
         If *this\stringbar
            *this\stringbar\root   = *this\root
            *this\stringbar\window = *this\window
         EndIf
         
         ;\\
         If *parent\bounds\children
            SetSizeBounds( *this )
            SetMoveBounds( *this )
         EndIf
      EndProcedure
      
      Procedure.i GetParent( *this._s_WIDGET )
         ProcedureReturn *this\parent
      EndProcedure
      
      Procedure SetParent( *this._s_WIDGET, *parent._s_WIDGET, tabindex.l = #PB_Default )
         Protected parent, ReParent.b, X, Y
         Protected._s_WIDGET *after, *last, *lastParent, NewList *D( ), NewList *C( )
         
         ;\\
         If *this = *parent
            ProcedureReturn 0
         EndIf
         
         If Not *this > 0
            ProcedureReturn 0
         EndIf
         
         If *parent > 0
            If *parent\container = 0 And *parent\child
               Debug "SetParent("
               *parent = *parent\parent
            EndIf
            ;
            If *this\parent = *parent And
               *this\TabIndex( ) = tabindex
               ProcedureReturn #False
            EndIf
            ;
            If tabindex < 0
               If *parent\tabbar And *parent\tabbar\type = #__type_TabBar
                  tabindex = *parent\tabbar\TabIndex( )
               Else
                  tabindex = 0
               EndIf
            EndIf
            
            ;
            ;\\ get the last widget to add it after it
            If *parent\LastWidget( )
               *after = GetPosition( *parent, #PB_List_Last, tabindex )
               If *after = *this
                  *after = *this\beforeWidget( )
               EndIf
               ;
               If *after And *after\parent = *parent
                  *last = GetLast( *after, tabindex )
                  
                  ;                   *last = *after 
                  ;                   If StartEnum( *after )
                  ;                      *last = widgets( )
                  ;                      StopEnum( )
                  ;                   EndIf
                  ;
                  If *this = *after Or IsChild( *last, *this )
                     *last = GetLast( *this\BeforeWidget( ), tabindex )
                     
                     ;                      *last = *this\BeforeWidget( )
                     ;                      If StartEnum( *this\BeforeWidget( ) )
                     ;                        *last = widgets( )
                     ;                        StopEnum( )
                     ;                      EndIf
                     
                  EndIf
               Else
                  *last = *after
               EndIf
               
               ;                If tabindex = 2
               ;                    Debug ""+*this\text\string +" last-"+ *last\class +" after-"+ *after\class
               ;                EndIf
            EndIf
            ;
            If *parent\type = #__type_Splitter
               If tabindex > 0
                  If tabindex % 2
                     *parent\FirstWidget( ) = *this
                     *parent\split_1( )    = *this
                     bar_Update( *parent, #True )
                     If IsGadget( *parent\split_1( ) )
                        ProcedureReturn 0
                     EndIf
                  Else
                     *parent\LastWidget( ) = *this
                     *parent\split_2( )    = *this
                     bar_Update( *parent, #True )
                     If IsGadget( *parent\split_2( ) )
                        ProcedureReturn 0
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            *this\TabIndex( ) = tabindex
            ;
            HideState( *this, *parent )
            DisableState( *this, *parent )
            ;
            ;\\
            PushListPosition( widgets( ) )
            If *this And
               *this\parent
               *lastParent = *this\parent
                  
               ;
               If *this\address
                  ChangeCurrentElement( widgets( ), *this\address )
                  AddElement( *D( ) ) : *D( ) = widgets( )
                  
                  If *this\haschildren
                     PushListPosition( widgets( ) )
                     While NextElement( widgets( ) )
                        If Not IsChild( widgets( ), *this )
                           Break
                        EndIf
                        
                        AddElement( *D( ) )
                        *D( ) = widgets( )
                        
                        ; ChangeParent
                        If *parent\window
                           *D( )\window = *parent\window
                        Else
                           *D( )\window = *parent
                        EndIf
                        If *parent\root
                           *D( )\root = *parent\root
                        Else
                           *D( )\root = *parent
                        EndIf
                        ;; Debug " children's - "+ *D( )\data +" - "+ *this\data
                        
                        ;\\ integrall children's
                        If *D( )\scroll
                           If *D( )\scroll\v
                              *D( )\scroll\v\root   = *D( )\root
                              *D( )\scroll\v\window = *D( )\window
                           EndIf
                           If *D( )\scroll\h
                              *D( )\scroll\h\root   = *D( )\root
                              *D( )\scroll\h\window = *D( )\window
                           EndIf
                        EndIf
                        
                        HideState( *D( ), *D( )\parent )
                        ;Debug *D( )\hide[1]
                        
                     Wend
                     PopListPosition( widgets( ) )
                  EndIf
                  
                  ;\\ move with a parent and his children's
                  If *last
                     PushListPosition( widgets( ) )
                     LastElement( *D( ) )
                     Repeat
                        ChangeCurrentElement( widgets( ), *D( )\address )
                        MoveElement( widgets( ), #PB_List_After, *last\address )
                     Until PreviousElement( *D( ) ) = #False
                     PopListPosition( widgets( ) )
                  EndIf
                  ;
                  ReParent = #True
               EndIf
               ;
            Else
               ;
               If *last
                  ChangeCurrentElement( widgets( ) , *last\address )
               Else
                  LastElement( widgets( ) )
               EndIf
               AddElement( widgets( ) ) : widgets( ) = *this
               *this\layer   = ListIndex( widgets( ) )
               *this\createindex   = ListIndex( widgets( ) )
               *this\address = @widgets( )
            EndIf
            PopListPosition( widgets( ) )
            ;
            ;\\
            RePosition( *this, *parent, *after )
            ;
            ;\\
            ReParent( *this, *parent )
            ;
            ;\\ a_new( )
            If a_anchors( ) And a_main( ) And IsChild( *this, a_main( ))
               If *this\parent\type = #__type_splitter
                  ; Debug ""+*this\class +" "+ *this\parent\class
                  a_free( *this )
               Else
                  If Not *this\autosize
                     If Not *this\anchors
                        If *this\parent\anchors 
                           a_create( *this, #__a_full )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            ;\\
            If ReParent
               ;
               If is_drag_move( )
                  ; *this\resize\clip = #True
                  
                  X = *this\frame_x( ) - *parent\inner_x( )
                  Y = *this\frame_y( ) - *parent\inner_y( )
                  
                  If *this\anchors > 0
                     X + ( X % mouse( )\steps )
                     X = ( X / mouse( )\steps ) * mouse( )\steps
                     
                     Y + ( Y % mouse( )\steps )
                     Y = ( Y / mouse( )\steps ) * mouse( )\steps
                  EndIf
                  
                  *this\container_x( ) = X
                  *this\container_y( ) = Y
               Else
                  ;\\ resize
                  X = *this\container_x( )
                  Y = *this\container_y( )
                  
                  ;\\ for the scrollarea container childrens
                  ;\\ if new parent - scrollarea container
                  If *parent\scroll And
                     *parent\scroll\v And *parent\scroll\h
                     X - *parent\scroll\h\bar\page\pos
                     Y - *parent\scroll\v\bar\page\pos
                  EndIf
                  
                  ;\\ if last parent - scrollarea container
                  If *LastParent\scroll And
                     *LastParent\scroll\v And *LastParent\scroll\h
                     X + *LastParent\scroll\h\bar\page\pos
                     Y + *LastParent\scroll\v\bar\page\pos
                  EndIf
                  
                  Resize( *this, X - *parent\scroll_x( ), Y - *parent\scroll_y( ), #PB_Ignore, #PB_Ignore, 0 )
               EndIf
               
               ;\\
               PostReDraw( *parent\root )
               If *parent\root <> *lastParent\root
                  PostReDraw( *lastParent\root )
               EndIf
            EndIf
         EndIf
         
         widget( ) = *this
         ProcedureReturn *this
      EndProcedure
      
      ;-
      Procedure.i SetAttach( *this._s_WIDGET, *parent._s_WIDGET, mode.a )
         If *parent
            *this\bounds\attach.allocate(BOUNDAttach)
            
            If *this\bounds\attach
               *this\bounds\attach\mode = mode
               
               ; get attach-element first-parent
               *this\bounds\attach\parent = *parent
               While *this\bounds\attach\parent\bounds\attach
                  *this\bounds\attach\parent = *this\bounds\attach\parent\parent
               Wend
               ;
               If *this\bounds\attach\parent\parent
                  *this\bounds\attach\parent = *this\bounds\attach\parent\parent
               Else
                  *this\bounds\attach\parent = *parent
               EndIf
               
               ; AddWidget( *this, *parent )
               SetParent( *this, *parent, #PB_Default )
               
               ProcedureReturn *this\bounds\attach
            EndIf
         EndIf
      EndProcedure
      
      Procedure UpdateAlign( *this._s_WIDGET )
         If *this\parent And *this\parent\align
            ;If Not *this\parent\align\width
            *this\parent\align\x     = *this\parent\container_x( )
            *this\parent\align\width = *this\parent\inner_width( )
            ;EndIf
            ;If Not *this\parent\align\height
            *this\parent\align\y      = *this\parent\container_y( )
            *this\parent\align\height = *this\parent\inner_height( )
            ;EndIf
            
            *this\align\x = *this\container_x( )
            *this\align\y = *this\container_y( )
            ;\\
            If *this\type = #__type_window
               *this\align\width  = *this\inner_width( )
               *this\align\height = *this\inner_height( )
            Else
               *this\align\width  = *this\frame_width( )
               *this\align\height = *this\frame_height( )
            EndIf
         EndIf         
      EndProcedure
      
      Procedure SetAlign( *this._s_WIDGET, mode.q, left.q = 0, top.q = 0, right.q = 0, bottom.q = 0 )
         Protected flag.q
         ;\\
         If Not (( mode & #__align_full = #__align_full ) Or ( mode & #__align_auto = #__align_auto ))
            If mode = 0 And left = 0 And top = 0 And right = 0 And bottom = 0
               left = #__align_auto
               top  = #__align_auto
               mode | #__align_auto
            EndIf
            If mode & #__align_right
               If mode & #__align_center = 0 And mode & #__align_bottom = 0
                  top = 1
                  mode | #__align_auto
               EndIf
               right = #__align_auto
            EndIf
            If mode & #__align_bottom
               If mode & #__align_center = 0 And mode & #__align_right = 0
                  left = 1
                  mode | #__align_auto
               EndIf
               bottom = #__align_auto
            EndIf
            If mode & #__align_left
               If mode & #__align_center = 0
                  top = 1
                  mode | #__align_auto
               EndIf
               left = #__align_auto
            EndIf
            If mode & #__align_top
               If mode & #__align_center = 0
                  left = 1
                  mode | #__align_auto
               EndIf
               top = #__align_auto
            EndIf
            If right = #__align_auto And bottom = #__align_auto
               right  = 1
               bottom = 1
               If mode & #__align_auto = 0
                  ; mode = 0 ;????
               EndIf
            EndIf
         EndIf
         
         ;\\
         If mode & #__align_auto = #__align_auto
            If left = 0 And top = 0 And right = 0 And bottom = 0
               If mode & #__align_left 
                  left = #__align_auto
               EndIf
               If mode & #__align_top 
                  top = #__align_auto
               EndIf
               If mode & #__align_right 
                  right = #__align_auto
               EndIf
               If mode & #__align_bottom 
                  bottom = #__align_auto
               EndIf
               If left = 0 And top = 0 And right = 0 And bottom = 0
                  left   = #__align_auto
                  top    = #__align_auto
                  right  = #__align_auto
                  bottom = #__align_auto
               EndIf
            Else
               If left > 0 : left = 1 : EndIf
               If top > 0 : top = 1 : EndIf
               If right > 0 : right = 1 : EndIf
               If bottom > 0 : bottom = 1 : EndIf
               
               If left > 0 And top = 0 And right = 0 And bottom = 0 : left = #__align_auto : EndIf
               If top > 0 And left = 0 And right = 0 And bottom = 0 : top = #__align_auto : EndIf
               If right > 0 And top = 0 And left = 0 And bottom = 0 : right = #__align_auto : EndIf
               If bottom > 0 And top = 0 And right = 0 And left = 0 : bottom = #__align_auto : EndIf
            EndIf
         EndIf
         
         ;\\
         If mode & #__align_full = #__align_full
            If left = 0 And top = 0 And right = 0 And bottom = 0
               ;                If mode & #__align_left : left = #__align_full
               ;                ElseIf mode & #__align_top : top = #__align_full
               ;                ElseIf mode & #__align_right : right = #__align_full
               ;                ElseIf mode & #__align_bottom : bottom = #__align_full
               ;                Else
               ;                   left   = #__align_full
               ;                   top    = #__align_full
               ;                   right  = #__align_full
               ;                   bottom = #__align_full
               ;                EndIf
               
               If mode & #__align_left 
                  left = #__align_full
               EndIf
               If mode & #__align_top 
                  top = #__align_full
               EndIf
               If mode & #__align_right 
                  right = #__align_full
               EndIf
               If mode & #__align_bottom 
                  bottom = #__align_full
               EndIf
               If left = 0 And top = 0 And right = 0 And bottom = 0
                  left   = #__align_full
                  top    = #__align_full
                  right  = #__align_full
                  bottom = #__align_full
               EndIf
               
            Else
               ;                If left > 0 : left = #__align_full : EndIf
               ;                If top > 0 : top = #__align_full : EndIf
               ;                If right > 0 : right = #__align_full : EndIf
               ;                If bottom > 0 : bottom = #__align_full : EndIf
               If left > 0 : left = #True : EndIf
               If top > 0 : top = #True : EndIf
               If right > 0 : right = #True : EndIf
               If bottom > 0 : bottom = #True : EndIf
               
               If left > 0 And top = 0 And right = 0 And bottom = 0 : left = #__align_full : EndIf
               If top > 0 And left = 0 And right = 0 And bottom = 0 : top = #__align_full : EndIf
               If right > 0 And top = 0 And left = 0 And bottom = 0 : right = #__align_full : EndIf
               If bottom > 0 And top = 0 And right = 0 And left = 0 : bottom = #__align_full : EndIf
            EndIf
         EndIf
         
         ;\\
         If left = #__align_full
            left   = #__align_auto
            top    = 1
            bottom = 1
            flag | #__align_full
         EndIf
         If right = #__align_full
            right  = #__align_auto
            top    = 1
            bottom = 1
            flag | #__align_full
         EndIf
         If top = #__align_full
            top   = #__align_auto
            left  = 1
            right = 1
            flag | #__align_full
         EndIf
         If bottom = #__align_full
            bottom = #__align_auto
            left   = 1
            right  = 1
            flag | #__align_full
         EndIf
         If mode And left > 0 And top > 0 And right > 0 And bottom > 0
            flag | #__align_full
         EndIf
         
         ;\\
         If mode & #__align_proportional
            If left = 0 And right = 0
               left  = #__align_proportional
               right = #__align_proportional
            EndIf
            If top = 0 And bottom = 0
               top    = #__align_proportional
               bottom = #__align_proportional
            EndIf
            ;
            If left And left <> #__align_proportional
               If right = 0
                  left = 0
               EndIf
               right = #__align_proportional
            EndIf
            If top And top <> #__align_proportional
               If bottom = 0
                  top = 0
               EndIf
               bottom = #__align_proportional
            EndIf
            If right And right <> #__align_proportional
               If left = 0
                  right = 0
               EndIf
               left = #__align_proportional
            EndIf
            If bottom And bottom <> #__align_proportional
               If top = 0
                  bottom = 0
               EndIf
               top = #__align_proportional
            EndIf
            ;
            If mode & #__align_right
               left = #__align_proportional
            EndIf
            If mode & #__align_left
               right = #__align_proportional
            EndIf
            If mode & #__align_top
               bottom = #__align_proportional
            EndIf
            If mode & #__align_bottom
               top = #__align_proportional
            EndIf
            ;
            mode = 0
         EndIf
         
         ;\\
         If *this\parent
            If Not *this\parent\align
               *this\parent\align.allocate( ALIGN )
               
               
               ;               ;\\ ?-надо тестировать
               ;                If Not *this\parent\align\width
               *this\parent\align\x     = *this\parent\container_x( )
               *this\parent\align\width = *this\parent\inner_width( )
               ;                EndIf
               ;                If Not *this\parent\align\height
               *this\parent\align\y      = *this\parent\container_y( )
               *this\parent\align\height = *this\parent\inner_height( )
               ;                EndIf
               ;                
               
            EndIf
            
            If Not *this\align
               *this\align.allocate( ALIGN )
            EndIf
            
            ;\\
            If *this\align
               ;\\ horizontal
               If left Or ( Not right And constants::BinaryFlag( Flag, #__align_full ))
                  If left = #__align_proportional ;Or ( left And mode & #__align_proportional = #__align_proportional )
                     *this\align\left = - 1
                  Else
                     *this\align\left = 1
                  EndIf
               Else
                  *this\align\left = 0
               EndIf
               If right Or ( Not left And constants::BinaryFlag( Flag, #__align_full ))
                  If right = #__align_proportional ;Or ( right And mode & #__align_proportional = #__align_proportional )
                     *this\align\right = - 1
                  Else
                     *this\align\right = 1
                  EndIf
               Else
                  *this\align\right = 0
               EndIf
               
               ;\\ vertical
               If top Or ( Not bottom And constants::BinaryFlag( Flag, #__align_full ))
                  If top = #__align_proportional ;Or ( top And mode & #__align_proportional = #__align_proportional )
                     *this\align\top = - 1
                  Else
                     *this\align\top = 1
                  EndIf
               Else
                  *this\align\top = 0
               EndIf
               If bottom Or ( Not top And constants::BinaryFlag( Flag, #__align_full ))
                  If bottom = #__align_proportional ;Or ( bottom And mode & #__align_proportional = #__align_proportional )
                     *this\align\bottom = - 1
                  Else
                     *this\align\bottom = 1
                  EndIf
               Else
                  *this\align\bottom = 0
               EndIf
               
               ;\\
               ; Debug ""+mode +" - "+ left+" "+top+" "+right+" "+bottom
               If mode = 0
                  *this\align\x = *this\container_x( )
                  *this\align\y = *this\container_y( )
                  ;\\
                  If *this\type = #__type_window
                     *this\align\width  = *this\inner_width( )
                     *this\align\height = *this\inner_height( )
                  Else
                     *this\align\width  = *this\frame_width( )
                     *this\align\height = *this\frame_height( )
                  EndIf
                  
               Else
                  ;\\ full horizontal
                  If *this\align\right And *this\align\left
                     *this\align\x     = 0
                     *this\align\width = (*this\parent\align\width)
                     If *this\type = #__type_window
                        *this\align\width - *this\fs * 2
                     EndIf
                  Else
                     *this\align\width = *this\frame_width( )
                     If *this\align\left And Not *this\align\right
                        ; left
                        *this\align\x = 0
                     ElseIf Not *this\align\right And Not *this\align\left
                        ; center
                        *this\align\x = ( *this\parent\align\width - *this\frame_width( ) ) / 2
                     ElseIf *this\align\right And Not *this\align\left
                        ; right
                        *this\align\x = *this\parent\align\width - *this\frame_width( )
                        If *this\type = #__type_window
                           *this\align\x - *this\fs * 2
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ full vertical
                  If *this\align\bottom And *this\align\top
                     *this\align\y      = 0
                     *this\align\height = *this\parent\align\height
                     If *this\type = #__type_window
                        *this\align\height - *this\fs * 2
                     EndIf
                  Else
                     *this\align\height = *this\frame_height( )
                     If *this\align\top And Not *this\align\bottom
                        ; top
                        *this\align\y = 0
                     ElseIf Not *this\align\bottom And Not *this\align\top
                        ; center
                        *this\align\y = ( *this\parent\align\height - *this\frame_height( ) ) / 2
                     ElseIf *this\align\bottom And Not *this\align\top
                        ; bottom
                        *this\align\y = *this\parent\align\height - *this\frame_height( )
                        If *this\type = #__type_window
                           *this\align\y - *this\fs * 2
                        EndIf
                     EndIf
                  EndIf
                  
                  ;
                  ;\\ auto stick change
                  If *this\parent\align
                     If left = #__align_auto And *this\parent\align\autodock\x
                        left = - *this\parent\align\autodock\x
                     Else
                        left = DPIScaled(left)
                     EndIf
                     If right = #__align_auto And *this\parent\align\autodock\width
                        right = - *this\parent\align\autodock\width
                     Else
                        right = DPIScaled(right)
                     EndIf
                     If top = #__align_auto And *this\parent\align\autodock\y
                        top = - *this\parent\align\autodock\y
                     Else
                        top = DPIScaled(top)
                     EndIf
                     If bottom = #__align_auto And *this\parent\align\autodock\height
                        bottom = - *this\parent\align\autodock\height
                     Else
                        bottom = DPIScaled(bottom)
                     EndIf
                     ;
                     If left < 0 Or right < 0
                        If left And right
                           *this\align\x - left
                           *this\align\width - *this\align\x + right
                        Else
                           *this\align\x - left + right
                        EndIf
                     EndIf
                     If top < 0 Or bottom < 0
                        If top And bottom
                           *this\align\y - top
                           *this\align\height - *this\align\y + bottom
                        Else
                           *this\align\y - top + bottom
                        EndIf
                     EndIf
                     
                     ;\\ dock auto stick position
                     If *this\align\left And Not *this\align\right 
                        *this\parent\align\autodock\x = *this\align\x + *this\align\width
                        If *this\type = #__type_window
                           *this\parent\align\autodock\x + *this\fs * 2
                        EndIf
                     EndIf
                     If *this\align\top And Not *this\align\bottom
                        *this\parent\align\autodock\y = *this\align\y + *this\align\height
                        If *this\type = #__type_window
                           *this\parent\align\autodock\y + *this\fs * 2
                        EndIf
                     EndIf
                     If *this\align\right And Not *this\align\left
                        *this\parent\align\autodock\width = *this\parent\inner_width( ) - *this\align\x
                     EndIf
                     If *this\align\bottom And Not *this\align\top
                        *this\parent\align\autodock\height = *this\parent\inner_height( ) - *this\align\y
                     EndIf
                     
                     ;\\ dock auto stick position update
                     If constants::BinaryFlag( Flag, #__align_full )
                        If ( *this\parent\align\autodock\x Or
                             *this\parent\align\autodock\y Or
                             *this\parent\align\autodock\width Or
                             *this\parent\align\autodock\height )
                           
                           ; loop enum widgets
                           If StartEnum( *this\parent )
                              If widget( )\align
                                 If widget( )\align\top And widget( )\align\bottom
                                    widget( )\align\y      = widget( )\parent\align\autodock\y
                                    widget( )\align\height = widget( )\parent\inner_height( ) - ( widget( )\parent\align\autodock\y + widget( )\parent\align\autodock\height )
                                    
                                    If widget( )\align\left And widget( )\align\right
                                       widget( )\align\x     = widget( )\parent\align\autodock\x
                                       widget( )\align\width = (widget( )\parent\inner_width( )) - ( widget( )\parent\align\autodock\x + widget( )\parent\align\autodock\width )
                                       
                                       If widget( )\type = #__type_window
                                          widget( )\align\width - widget( )\fs * 2
                                       EndIf
                                    EndIf
                                    
                                    If widget( )\type = #__type_window
                                       widget( )\align\height - widget( )\fs * 2
                                    EndIf
                                 EndIf
                              EndIf
                              ;
                              StopEnum( )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;                ;\\
               ; update parent children's coordinate
               ;*this\parent\align\update = 1
               Resize( *this\parent, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               ; PostRepaint( *this\root )
            EndIf
         EndIf
      EndProcedure
      
      Procedure SetMoveBounds( *this._s_WIDGET, MinimumX.l = #PB_Ignore, MinimumY.l = #PB_Ignore, MaximumX.l = #PB_Ignore, MaximumY.l = #PB_Ignore )
         ; If the value is set to #PB_Ignore, the current value is not changed.
         ; If the value is set to #PB_Default, the value is reset to the system default (as it was before this command was invoked).
         Protected.l X = #PB_Ignore, Y = #PB_Ignore, Width = #PB_Ignore, Height = #PB_Ignore
         
         *this\bounds\move.allocate(BOUNDMOVE)
         
         If MinimumX = #PB_Ignore
            If Not *this\bounds\move\min\x
               *this\bounds\move\min\x = *this\parent\scroll_x( ) 
            EndIf
         Else
            If MinimumX = #PB_Default
               *this\bounds\move\min\x = *this\container_x( ) 
            Else
               *this\bounds\move\min\x = DPIScaledX(MinimumX)
            EndIf
         EndIf
         If MinimumY = #PB_Ignore
            If Not *this\bounds\move\min\y
               *this\bounds\move\min\y = *this\parent\scroll_y( ) 
            EndIf
         Else
            If MinimumY = #PB_Default
               *this\bounds\move\min\y = *this\container_y( ) 
            Else
               *this\bounds\move\min\y = DPIScaledY(MinimumY)
            EndIf
         EndIf
         If MaximumX = #PB_Ignore
            If Not *this\bounds\move\max\x
               If *this\parent\scroll_width( ) 
                  *this\bounds\move\max\x = *this\parent\scroll_width( ) 
               Else
                  *this\bounds\move\max\x = *this\parent\inner_width( )
               EndIf
            EndIf
         Else
            If MaximumX = #PB_Default
               *this\bounds\move\max\x = *this\container_x( ) + *this\frame_width( ) 
            Else
               *this\bounds\move\max\x = DPIScaledX(MaximumX)
            EndIf
         EndIf
         If MaximumY = #PB_Ignore
            If Not *this\bounds\move\max\y
               If *this\parent\scroll_height( )
                  *this\bounds\move\max\y = *this\parent\scroll_height( ) 
               Else
                  *this\bounds\move\max\y = *this\parent\inner_height( )
               EndIf
            EndIf
         Else
            If MaximumY = #PB_Default
               *this\bounds\move\max\y = *this\container_y( ) + *this\frame_height( )
            Else
               *this\bounds\move\max\y = DPIScaledY(MaximumY) 
            EndIf
         EndIf
         
         ;\\
         If *this\bounds\move\min\x <> #PB_Ignore And
            *this\bounds\move\min\x > *this\frame_x( )
            X = DPIUnScaledX(*this\bounds\move\min\x)
         EndIf
         If *this\bounds\move\max\x <> #PB_Ignore And
            *this\frame_width( ) > *this\bounds\move\max\x - *this\bounds\move\min\x
            Width = DPIUnScaledX( *this\bounds\move\max\x - *this\bounds\move\min\x )
         EndIf
         If *this\bounds\move\min\y <> #PB_Ignore And
            *this\bounds\move\min\y > *this\frame_y( )
            Y = DPIUnScaledY(*this\bounds\move\min\y)
         EndIf 
         If *this\bounds\move\max\y <> #PB_Ignore And
            *this\frame_height( ) > *this\bounds\move\max\y - *this\bounds\move\min\y
            Height = DPIUnScaledY( *this\bounds\move\max\y - *this\bounds\move\min\y)
         EndIf
         
         ProcedureReturn Resize( *this, X, Y, Width, Height )
      EndProcedure
      
      Procedure SetSizeBounds( *this._s_WIDGET, MinimumWidth.l = #PB_Ignore, MinimumHeight.l = #PB_Ignore, MaximumWidth.l = #PB_Ignore, MaximumHeight.l = #PB_Ignore )
         ; If the value is set to #PB_Ignore, the current value is not changed.
         ; If the value is set to #PB_Default, the value is reset to the system default (as it was before this command was invoked).
         Protected.l X = #PB_Ignore, Y = #PB_Ignore, Width = #PB_Ignore, Height = #PB_Ignore
         
         *this\bounds\size.allocate(BOUNDSIZE)
         
         If MinimumWidth = #PB_Ignore
            If Not *this\bounds\size\min\width
               *this\bounds\size\min\width = *this\fs * 2 + *this\fs[1] + *this\fs[3]
            EndIf
         Else
            If MinimumWidth = #PB_Default
               *this\bounds\size\min\width = *this\frame_width( )
            Else
               *this\bounds\size\min\width = DPIScaledX(MinimumWidth)
            EndIf
         EndIf
         If MinimumHeight = #PB_Ignore
            If Not *this\bounds\size\min\height
               *this\bounds\size\min\height = *this\fs * 2 + *this\fs[2] + *this\fs[4]
            EndIf
         Else
            If MinimumHeight = #PB_Default
               *this\bounds\size\min\height = *this\frame_height( )
            Else
               *this\bounds\size\min\height = DPIScaledY(MinimumHeight)
            EndIf
         EndIf
         
         If MaximumWidth = #PB_Ignore
            If Not *this\bounds\size\max\width
               If *this\parent\scroll\h
                  *this\bounds\size\max\width = *this\parent\scroll\h\bar\max
               Else
                  *this\bounds\size\max\width = *this\parent\inner_width( )
               EndIf
            EndIf
         Else
            If MaximumWidth = #PB_Default
               *this\bounds\size\max\width = *this\frame_width( )
            Else
               *this\bounds\size\max\width = DPIScaledX(MaximumWidth)
            EndIf
         EndIf
         If MaximumHeight = #PB_Ignore
            If Not *this\bounds\size\max\height
               If *this\parent\scroll\v
                  *this\bounds\size\max\height = *this\parent\scroll\v\bar\max
               Else
                  *this\bounds\size\max\height = *this\parent\inner_height( )
               EndIf
            EndIf
         Else
            If MaximumHeight = #PB_Default
               *this\bounds\size\max\height = *this\frame_height( )
            Else
               *this\bounds\size\max\height = DPIScaledY(MaximumHeight)
            EndIf
         EndIf
         
         If *this\frame_width( ) < *this\bounds\size\min\width
            Width = DPIUnScaledX( *this\bounds\size\min\width )
         EndIf
         If *this\frame_width( ) > *this\bounds\size\max\width
            Width = DPIUnScaledX( *this\bounds\size\max\width )
         EndIf
         If *this\frame_height( ) < *this\bounds\size\min\height
            Height = DPIUnScaledY( *this\bounds\size\min\height )
         EndIf
         If *this\frame_height( ) > *this\bounds\size\max\height
            Height = DPIUnScaledY( *this\bounds\size\max\height )
         EndIf
         
         ProcedureReturn Resize( *this, X, Y, Width, Height )
      EndProcedure
      
      Procedure SetChildrenBounds( *this._s_WIDGET, state.b )
         *this\bounds\children = state
      EndProcedure
      
      
      ;-
      Procedure.i AddColumn( *this._s_WIDGET, position.l, Text.s, Width.l, img.i = -1 )
         Protected *columns.allocate( COLUMN )
         
         ;\\
         If *columns
            ;\\ Генерируем идентификатор
            If position < 0 Or
               position > ListSize( *this\columns( )) - 1
               ;
               LastElement( *this\columns( ))
               AddElement( *this\columns( ))
               If position < 0
                  position = ListIndex( *this\columns( )) 
               EndIf
            Else
               SelectElement( *this\columns( ), position )
               ;
               InsertElement( *this\columns( ))
            EndIf
            ;
            *this\columns( ) = *columns
            
            ;\\
            *columns\y     = 0
            *columns\text\string.s = Text.s
            *columns\width = DPIScaled( Width )
            
            *columns\x = *this\scroll_width( )
            *this\scroll_width( ) + *columns\width
            
            ;\\
            If *this\type = #__type_listicon
               *columns\height = DPIScaled( 24 )
            EndIf
            
            ; *this\WidgetChange( ) = 1
            
            ProcedureReturn *columns
         EndIf
      EndProcedure
      
      Procedure.i AddItems( *this._s_WIDGET, List *rows._S_ROWS( ), position.l, Text.s, img.i = -1, sublevel.i = 0 )
         Protected last
         Protected *rowLast._s_ROWS 
         Protected *row.allocate(ROWS)
         Protected *rowParent._s_ROWS
         
         If *this
            If *row
               ;{ Генерируем идентификатор
               If position < 0 Or position > ListSize( *rows( )) - 1
                  ResetList( *rows( )) 
                  LastElement( *rows( ))
                  AddElement( *rows( ))
                  ;
                  position = ListIndex( *rows( ))
                  ;
                  *rows( ) = *row
                  *rowLast = *this\RowLast( )
                  *this\RowLast( ) = *row
               Else
                  SelectElement( *rows( ), position )
                  
                  ; for the tree( )
                  If sublevel > *rows( )\sublevel
                     PushListPosition( *rows( ))
                     If PreviousElement( *rows( ))
                        *rowLast = *rows( )
                        ; Else
                        ;   last     = *this\RowLast( )
                        ;   sublevel = *rows( )\sublevel
                     EndIf
                     PopListPosition( *rows( ))
                  Else
                     last     = *this\RowLast( )
                     sublevel = *rows( )\sublevel
                     *rowLast = *rows( )
                  EndIf
                  
                  InsertElement( *rows( ))
                  *rows( ) = *row
                  
                  ;PushListPosition( *rows( ))
                  While NextElement( *rows( ))
                     *rows( )\lindex = ListIndex( *rows( ) )
                  Wend
                  ;PopListPosition(*rows( ))
               EndIf
               ;}
               
               If sublevel < 0
                  sublevel = 0
               EndIf
               ;
               If sublevel > position
                  sublevel = position
               EndIf
               ;
               If *rowLast
                  If sublevel   > *rowLast\sublevel
                     sublevel   = *rowLast\sublevel + 1
                     *rowParent = *rowLast
                     
                  ElseIf *rowLast\RowParent( )
                     If sublevel > *rowLast\RowParent( )\sublevel
                        *rowParent = *rowLast\RowParent( )
                        
                     ElseIf sublevel < *rowLast\sublevel
                        If *rowLast\RowParent( )\RowParent( )
                           *rowParent = *rowLast\RowParent( )\RowParent( )
                           
                           While *rowParent
                              If sublevel >= *rowParent\sublevel
                                 If sublevel = *rowParent\sublevel
                                    *rowParent = *rowParent\RowParent( )
                                 EndIf
                                 Break
                              Else
                                 *rowParent = *rowParent\RowParent( )
                              EndIf
                           Wend
                        EndIf
                        
                        ; for the editor( )
                        If *rowLast\RowParent( )
                           If *rowLast\RowParent( )\sublevel = sublevel
                              ;                     *row\before = *rowLast\RowParent( )
                              ;                     *rowLast\RowParent( )\after = *row
                              
                              If *this\type = #__type_Editor
                                 *rowParent         = *rowLast\RowParent( )
                                 *rowParent\_last   = *row
                                 *this\RowLast( )   = *rowParent
                                 last               = *rowParent
                              EndIf
                              
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;
               If sublevel
                  *row\sublevel = sublevel
               EndIf
               
               ;
               If sublevel = 0
                  If position = 0
                     *this\RowFirstLevelFirst( ) = *row
                  EndIf
                  If *this\RowLast( ) = *row
                     *this\RowFirstLevelLast( ) = *row
                  EndIf
               EndIf
               
               ;
               If *rowParent 
                  ;If Not *this\mode\optionboxes
                  *rowParent\childrens + 1
                  ;EndIf
                  *row\RowParent( ) = *rowParent
                  
                  If *rowParent\sublevel < sublevel
                     If Not last
                        ; for the tree draw line
                        *rowParent\_last = *row
                     EndIf
                     If *this\mode\collapsed  
                        *rowParent\buttonbox\checked = 1
                        *row\hide                    = 1
                     EndIf
                  EndIf
               EndIf
               
               ; properties
               If *this\flag & #__flag_property
                  If *rowParent And Not *rowParent\sublevel And Not GetFontID( *rowParent )
                     *rowParent\color\back     = $FFF9F9F9
                     *rowParent\color\back[1]  = *rowParent\color\back
                     *rowParent\color\back[2]  = *rowParent\color\back
                     *rowParent\color\frame    = *rowParent\color\back
                     *rowParent\color\frame[1] = *rowParent\color\back
                     *rowParent\color\frame[2] = *rowParent\color\back
                     *rowParent\color\front[1] = *rowParent\color\front
                     *rowParent\color\front[2] = *rowParent\color\front
                     SetFontID( *rowParent, FontID( LoadFont( #PB_Any, "Helvetica", 14, #PB_Font_Bold | #PB_Font_Italic )))
                  EndIf
               EndIf
               
               
               ; add lines
               *row\rindex        = position 
               *row\columnindex   = ListIndex( *this\columns( ))
               
               If (*this\mode\CheckBoxes Or *this\mode\OptionBoxes)
                  *row\checkbox.allocate( BOX )
               EndIf
               If *this\mode\lines
                  *row\buttonbox.allocate( BOX )
               EndIf
               If *row\RowParent( ) And 
                  *row\RowParent( )\childrens
                  If Not *row\RowParent( )\buttonbox
                     *row\RowParent( )\buttonbox.allocate( BOX )
                  EndIf
               EndIf
               
               *row\color         = *this\color ; _get_colors_( )
               *row\ColorState( ) = 0
               *row\color\back    = 0
               *row\color\frame   = 0
               
               *row\color\fore[0] = 0
               *row\color\fore[1] = 0
               *row\color\fore[2] = 0
               *row\color\fore[3] = 0
               
               ;
               ;                If *this\RowFirstLevelLast( )
               ;                   If *this\RowFirstLevelLast( )\_type = #__type_Option
               ;                      *row\_groupbar = *this\RowFirstLevelLast( )\_groupbar
               ;                   Else
               ;                      *row\_groupbar = *this\RowFirstLevelLast( )
               ;                   EndIf
               ;                Else
               *row\_groupbar = *row\RowParent( )
               ;                EndIf
               
               
               ; 
               *row\TextChange( ) = 1
               *row\text\string   = Text 
               
               
               ;\\
               If *row\columnindex = 0
                  *this\countitems + 1
                  *this\WidgetChange( ) = 1
                  add_image( *row\picture, img, *this\picturesize )
                  
                  If *this\RowFocused( )
                     ;                      *this\RowFocused( )\_focus = 0
                     ;                      *this\RowFocused( )\ColorState( ) = #__s_0
                     ;                      
                     ;                      *this\RowFocused( )             = *row
                     ;                      *this\RowFocused( )\_focus = 1
                     ;                      *this\RowFocused( )\ColorState( ) = #__s_2 + Bool( *this\focus = 0 )
                     SetState( *this, position )
                  EndIf
                  
                  ;                   ; если был активирован авто скролл 
                  ;                   ; то указываем что нужно скроллить бар 
                  ;                   If *this\row\autoscroll = #PB_All
                  ;                      *this\row\autoscroll = #True
                  ;                   EndIf
                  
                  If test_redraw_items
                     PostReDraw( *this\root )
                  EndIf
               EndIf
            EndIf
         EndIf
         ;EndWith
         
         ProcedureReturn *row
      EndProcedure
      
      Procedure   AddItem( *this._s_WIDGET, Item.l, Text.s, img.i = - 1, flag.q = 0 )
         Protected result
         
         ;          ;          
         ;          ;CompilerIf #PB_Compiler_DPIAware
         If IsImage( img )
            *this\picturesize = DPIScaled(16)
         EndIf
         ;          ;CompilerEndIf
         
         If *this\type = #__type_MDI
            Protected *window._S_WIDGET
            ;
            flag | #PB_Window_SystemMenu | #PB_Window_MaximizeGadget | #PB_Window_MinimizeGadget
            If Not constants::BinaryFlag( Flag, #PB_Window_BorderLess ) 
               flag | #PB_Window_SizeGadget
            EndIf
            ;
            *this\countitems + 1 ;?
            *window = Window( #PB_Ignore, #PB_Ignore, 280, 180, Text, flag | #__flag_child, *this )
            ;
            If IsImage( img )
               If constants::BinaryFlag( Flag, #PB_Window_BorderLess ) 
                  SetBackgroundImage( *window, img )
               Else
                  add_image( *window\picture, img )
               EndIf
            EndIf
            
            ProcedureReturn *window
         EndIf
         
         If *this\type = #__type_Editor
            ProcedureReturn edit_AddItem( *this, item, @text, Len(Text) )
         EndIf
         
         If *this\type = #__type_ListIcon
            Protected String.s
            ForEach *This\Columns( )
               String = StringField( Text, ListIndex( *this\columns( )) + 1, #LF$)
               AddItems( *this, *this\__rows( ), Item, String, img, flag )
            Next
         EndIf
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListView Or *this\type = #__type_Properties
            
            ProcedureReturn AddItems( *this, *this\__rows( ), Item, Text, img, flag )
         EndIf
         
         If *this\type = #__type_combobox
            If Not *this\PopupCombo( )
               *this\PopupCombo( ) = Create( *this, "ComboListView", #__type_tree, 0,0,0,0,"",
                                             #__flag_child | #__flag_nobuttons | #__flag_nolines ) 
               
               *this\PopupCombo( )\fs = 2
               Hide( *this\PopupCombo( ), #True )
               widget( ) = *this
            EndIf
            ;
            If *this\PopupCombo( )
               ProcedureReturn AddItem( *this\PopupCombo( ), Item, Text, img, flag )
            EndIf
         EndIf
         
         Protected *TabBox._s_WIDGET
         If *this\type = #__type_Panel
            *TabBox = *this\tabbar
         ElseIf *this\type = #__type_ToolBar Or
                *this\type = #__type_PopupBar Or
                *this\type = #__type_MenuBar Or
                *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            ; add tabs
            If *TabBox\type = #__type_ToolBar Or
               *TabBox\type = #__type_PopupBar Or
               *TabBox\type = #__type_MenuBar 
               
               LastElement( *TabBox\__tabs( ))
               AddElement( *TabBox\__tabs( ))
               
               *TabBox\__tabs.allocate( ITEMS, ( ))
               *TabBox\__tabs( )\tindex = Item
               
            ElseIf *TabBox\type = #__type_TabBar
               If Item < 0 Or
                  Item > *TabBox\countitems - 1
                  LastElement( *TabBox\__tabs( ))
                  AddElement( *TabBox\__tabs( ))
                  item = ListIndex( *TabBox\__tabs( ))
               Else
                  If SelectElement( *TabBox\__tabs( ), Item )
                     If *TabBox\TabState( ) >= Item
                        *TabBox\TabState( ) + 1
                     EndIf
                     
                     InsertElement( *TabBox\__tabs( ))
                     
                     ; перемещаем индекс детей на один вперед
                     ; (начиная с выбранного индекса)
                     If is_integral_( *TabBox )
                        If StartEnum( *TabBox\parent )
                           If widget( )\parent = *TabBox\parent 
                              If widget( )\TabIndex( ) >= Item
                                 widget( )\TabIndex( ) + 1
                              EndIf
                           EndIf
                           StopEnum( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               *TabBox\__tabs.allocate( ITEMS, ( ))
            EndIf
            
            ;\\ TabBar last opened item
            *TabBox\TabChange( )      = #True
            *TabBox\countitems + 1
            
            ;\\
            *TabBox\__tabs( )\tindex     = item
            *TabBox\__tabs( )\color       = _get_colors_( )
            *TabBox\__tabs( )\text\string = Text.s
            
            ;\\ set default selected tab
            If item = 0 
               If Not *TabBox\TabFocused( )
                  *TabBox\TabState( )         = 0
                  ;
                  If *TabBox\type = #__type_TabBar
                     *TabBox\TabFocused( )       = *TabBox\__tabs( )
                     *TabBox\TabFocused( )\ScrollToActive( - 1 ) ; scroll to active tab
                  EndIf
               EndIf
            EndIf
            
            ;
            add_image( *TabBox\__tabs( )\picture, img, *TabBox\picturesize )
            
            ;         
            If is_integral_( *TabBox )
               If *TabBox\parent = Opened( )
                  If *TabBox\type = #__type_TabBar
                     *TabBox\TabIndex( ) = Item
                  EndIf
               Else
                  OpenList( *TabBox\parent, Item )
               EndIf
            EndIf
            
            ProcedureReturn *TabBox\__tabs( ) 
         EndIf
         
      EndProcedure
      
      ;-
      Procedure.b IsItem( *this._s_WIDGET, Item.l ) 
         ProcedureReturn Bool( Item > #PB_Any And Item < *this\countitems ) 
      EndProcedure
      
      Procedure   ItemID( *this._s_WIDGET, Item.l ) 
         Protected result
         PushItem( *this )
         result = SelectItem( *this, Item )
         PopItem( *this )
         ProcedureReturn result 
      EndProcedure
      
      Procedure   PushItem( *this._s_WIDGET ) 
         PushListPosition( *this\__rows( ))
      EndProcedure
      
      Procedure   PopItem( *this._s_WIDGET ) 
         PopListPosition( *this\__rows( ))
      EndProcedure
      
      Procedure.i SelectItem( *this._s_WIDGET, Item.l ) 
         Protected result
         If Item > #PB_Any And Item < *this\countitems 
            result = SelectElement( *this\__rows( ), Item )
         EndIf
         ProcedureReturn result 
      EndProcedure
      
      Procedure   RemoveItem( *this._s_WIDGET, Item.l )
         Protected result
         
         If *this\type = #__type_Editor
            If item >- 1 And Item < *this\countitems
               Protected String.s = StringField( *this\text\string, 1 + item, #LF$ )
               If String
                  *this\text\string = RemoveString( *this\text\string, String + #LF$ )
                  If StringField( *this\text\string, *this\countitems, #LF$ )
                     *this\text\string = RemoveString( *this\text\string, #LF$ + String )
                  EndIf
                  *this\countitems - 1
                  *this\TextChange( ) = 1
                  *this\WidgetChange( ) = 1
                  ProcedureReturn 1
               EndIf
            EndIf
         EndIf
         
         ; - widget::tree_remove_item( )
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #False
            EndIf
            
            ;\\
            Protected removecount = 1
            Protected *rowFocused._s_ROWS
            Protected *row._s_ROWS = *this\__rows( )
            Protected *rowParent._s_ROWS = *this\__rows( )\RowParent( )
            
            If test_delete
               Debug " "+ Item +" remove ["+ *row\text\string +"]"
            EndIf
            
            ;
            *this\countitems - 1
            *this\WidgetChange( ) = 1
            
            ;
            ; if is last parent item then change to the prev element of his level
            If *rowParent And *rowParent\_last = *row
               PushListPosition( *this\__rows( ))
               While PreviousElement( *this\__rows( ))
                  If *rowParent = *this\__rows( )\RowParent( )
                     *rowParent\_last = *this\__rows( )
                     Break
                  EndIf
               Wend
               PopListPosition( *this\__rows( ))
               
               ; if the remove last parent children's
               If *rowParent\_last = *row
                  *rowParent\childrens = #False
                  *rowParent\_last      = #Null
               Else
                  *rowParent\childrens = #True
               EndIf
            EndIf
            
            ; before deleting a parent, we delete its children's
            If *row\childrens
               PushListPosition( *this\__rows( ))
               While NextElement( *this\__rows( ))
                  If *this\__rows( )\sublevel > *row\sublevel
                     ; 
                     If *this\RowFocused( ) = *this\__rows( )
                        *this\RowFocused( ) = *row
                     EndIf
                     ;
                     DeleteElement( *this\__rows( ))
                     *this\countitems - 1
                     removecount + 1
                  Else
                     Break
                  EndIf
               Wend
               PopListPosition( *this\__rows( ))
            EndIf
            
            ; 
            If *this\RowFirstLevelFirst( ) = *row
               PushListPosition( *this\__rows( ))
               If NextElement( *this\__rows( ))
                  *this\RowFirstLevelFirst( ) = *this\__rows( )
               Else
                  *this\RowFirstLevelFirst( ) = 0
               EndIf
               PopListPosition( *this\__rows( ))
            EndIf
            
            ; 
            If *this\RowFirstLevelLast( ) = *row
               PushListPosition( *this\__rows( ))
               If PreviousElement( *this\__rows( ))
                  If *this\__rows( )\sublevel = *row\sublevel
                     *this\RowFirstLevelLast( ) = *this\__rows( )
                  Else
                     *rowParent = *this\__rows( )\RowParent( )
                     While *rowParent
                        If *rowParent\sublevel = *row\sublevel
                           Break
                        Else
                           *rowParent = *rowParent\RowParent( )
                        EndIf
                     Wend
                     *this\RowFirstLevelLast( ) = *rowParent
                  EndIf
               Else
                  *this\RowFirstLevelLast( ) = 0
               EndIf
               PopListPosition( *this\__rows( ))
            EndIf
            
            ;
            PushListPosition( *this\__rows( ))
            While NextElement( *this\__rows( ))
               *this\__rows( )\lindex - removecount ; = ListIndex( *this\__rows( ) ) 
            Wend
            PopListPosition(*this\__rows( ))
            
            ;
            If *this\RowFocused( ) = *row 
               *this\RowFocused( )\_focus = 0 
               *this\RowFocused( )\ColorState( ) = 0
               
               PushListPosition( *this\__rows( ))
               ; if he is a parent then we find the next item of his level
               While NextElement( *this\__rows( ))
                  If *this\__rows( )\sublevel =< *row\sublevel
                     Break
                  EndIf
               Wend
               
               ; if we remove the last selected then
               If *this\RowFocused( ) = *this\__rows( )
                  PreviousElement( *this\__rows( ))
               EndIf
               ;
               *rowFocused = *this\__rows( )
               
               If *rowFocused
                  If *rowFocused = *row
                     *this\RowFocused( ) = 0
                     *this\RowFocusedIndex( ) = - 1
                     ;
                     DoEvents( *this, #__event_StatusChange, - 1, 0 )
                  Else
                     If *rowFocused\RowParent( ) 
                        If *rowFocused\RowParent( )\buttonbox  
                           If *rowFocused\RowParent( )\buttonbox\checked
                              *rowFocused = *rowFocused\RowParent( )
                           EndIf
                        EndIf
                     EndIf
                     ;
                     *this\RowFocusedIndex( ) = *rowFocused\rindex 
                     *this\RowFocused( ) = *rowFocused
                     *rowFocused\_focus = *this\focus
                     *rowFocused\ColorState( ) = *this\focus
                     ;
                     DoEvents( *this, #__event_StatusChange, *row\rindex, -*row\ColorState( ))
                     DoEvents( *this, #__event_StatusChange, *rowFocused\rindex, -*rowFocused\ColorState( ))
                  EndIf
               EndIf
               PopListPosition( *this\__rows( ))
            EndIf
            
            ;
            DeleteElement( *this\__rows( ))
            
            result = #True
         EndIf
         
         ;
         Protected *TabBox._s_WIDGET
         If *this\type = #__type_Panel
            *TabBox = *this\tabbar
         ElseIf *this\type = #__type_ToolBar Or
                *this\type = #__type_PopupBar Or
                *this\type = #__type_MenuBar Or
                *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            If SelectElement( *TabBox\__tabs( ), item )
               *TabBox\TabChange( ) = #True
               
               DeleteElement( *TabBox\__tabs( ), 1 )
               
               *TabBox\countitems - 1
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l ClearItems( *this._s_WIDGET )
         Protected result
         
         ; - widget::editor_clear_items( )
         If *this\type = #__type_Editor
            If *this\countitems
               *this\countitems       = 0
               *this\text\string      = ""
               ;          
               *this\edit_caret_1( )     = 0
               *this\edit_caret_2( )     = 0
               *this\LinePressedIndex( ) = 0
               ;
               *this\WidgetChange( )   = - 1
               *this\TextChange( )     = - 1
               
               ProcedureReturn 1
            EndIf
         EndIf
         
         ; - widget::tree_clear_items( )
         If *this\type = #__type_ComboBox
            
            If *this\PopupCombo( )
               If *this\stringbar
                  SetText( *this\stringbar, "" )
               EndIf
               If *this\PopupCombo( )\countitems <> 0
                  *this\PopupCombo( )\WidgetChange( ) = 1
                  *this\PopupCombo( )\countitems     = 0
                  
                  If *this\PopupCombo( )\RowFocused( )
                     *this\PopupCombo( )\RowFocused( )\ColorState( ) = 0
                     ClearStructure(*this\PopupCombo( )\RowFocused( ), _s_ROWS)
                     *this\PopupCombo( )\RowFocused( ) = 0
                  EndIf
                  
                  ClearList( *this\PopupCombo( )\__rows( ))
                  PostRepaint( *this\PopupCombo( )\root )
               EndIf
            EndIf
         EndIf
         
         ; - widget::tree_clear_items( )
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If *this\countitems <> 0
               *this\WidgetChange( ) = 1
               *this\countitems     = 0
               
               If *this\RowFocused( )
                  *this\RowFocused( )\ColorState( ) = 0
                  ClearStructure(*this\RowFocused( ), _s_ROWS)
                  *this\RowFocused( ) = 0
               EndIf
               
               ClearList( *this\__rows( ))
               PostRepaint( *this\root )
            EndIf
         EndIf
         
         ; - Panel_ClearItems( )
         Protected *TabBox._s_WIDGET
         If *this\type = #__type_Panel
            *TabBox = *this\tabbar
         ElseIf *this\type = #__type_ToolBar Or
                *this\type = #__type_PopupBar Or
                *this\type = #__type_MenuBar Or
                *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            If *TabBox\countitems <> 0
               
               *TabBox\TabChange( ) = #True
               ClearList( *TabBox\__tabs( ))
               
               *TabBox\countitems = 0
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l CountItems( *this._s_WIDGET )
         If *this\tabbar
            ProcedureReturn *this\tabbar\countitems
         Else
            ProcedureReturn *this\countitems
         EndIf
      EndProcedure
      
      Procedure   CountType( *this._s_WIDGET, mode.b = 0 )
         Protected result
         
         If mode 
            If mode = 2
               result = typeCount( Str( *this\parent + *this\type ) ) - 1
            Else
               ;Debug *this\class
               ; add mode = 1 
               ; remove mode = - 1 
               ;
               If *this\root <> *this\window
                  If *this\root <> *this\parent
                     typeCount( Str( *this\parent + *this\type ) ) + mode
                  EndIf
                  If *this\parent <> *this\window
                     typeCount( Str( *this\window + *this\type ) ) + mode
                  EndIf
               EndIf
               typeCount( Str( *this\root + *this\type ) ) + mode
               
               ;
               If mode > 0
                  *this\class = UCase( *this\class +"_"+ Str( typeCount( ) - 1 ))
               EndIf   
            EndIf
         Else
            result = typeCount( Str( *this\window + *this\type ) ) - 1 
         EndIf
         If result > 0
            ProcedureReturn result
         EndIf
      EndProcedure
      
      ;-
      ;- BARMENU
      ;-
      Procedure   CreateBar( *parent._s_WIDGET, flag.q = #Null, Type.w = #__type_MenuBar )
         Static count
         Protected *menu, *this._s_WIDGET
         
         If Type = #__type_MenuBar
            If flag
               Type = #__type_ToolBar
            EndIf
         EndIf
         
         If Type = #__type_PopupBar
            If is_bar_( *parent )
               *menu = *parent
               *parent = *parent\parent
            EndIf
            
            *this = Create( *parent, "PopupMenu_"+count, #__type_PopupBar,
                            0,0,0,0, #Null$, flag|#__flag_vertical | #__flag_child, 0, 0, 0, 0, 0, 30 ) ; 
            
            count + 1
            *this\menu\parent = *menu
            ;
            SetBackgroundColor( *this, $FFF2F2F2)
            Hide( *this, #True ) 
            
            
         Else
            If Not *parent
               *parent = root( )
            EndIf
            ;
            If constants::BinaryFlag( Flag, #__flag_BarLeft ) Or 
               constants::BinaryFlag( Flag, #__flag_BarRight )
               Flag | #__flag_vertical
            EndIf
            
            ;
            *this = Create( *parent, "["+*parent\class +"]-"+ ClassFromType( Type ), Type,
                            0, 0, 0, 0, #Null$, Flag | #__flag_child, 0, 0, 0, 0, 0, 30 )
            
            If *parent\type = #__type_Panel Or Type = #__type_ToolBar
               *parent\tabbar = *this  
               If *parent\MenuBarHeight
                  Debug "--- "+*parent\MenuBarHeight;*parent\class
               EndIf
               ; *parent\ToolBarHeight = DPIScaled(24)
            Else
               *parent\menubar = *this  
               ;  *parent\MenuBarHeight = DPIScaled(24)
            EndIf
            
            If constants::BinaryFlag( Flag, #__flag_BarLeft ) 
               BarPosition( *this, 1 )
            ElseIf constants::BinaryFlag( Flag, #__flag_BarRight )
               BarPosition( *this, 3 )
            ElseIf constants::BinaryFlag( Flag, #__flag_BarBottom )
               BarPosition( *this, 4 )
            Else
               BarPosition( *this, 2 )
            EndIf
         EndIf
         
         widget( ) = *this ;?
         ProcedureReturn *this
      EndProcedure
      
      Procedure   BarPosition( *this._s_widget, position.i, size.i = #PB_Default )
         Protected fs = 0, *box._s_WIDGET
         
         If *this\type = #__type_Panel
            *box = *this\tabbar  
         Else
            *box = *this
            *this = *this\parent
         EndIf
         
         ; reset position
         *this\fs[1] = 0
         *this\fs[2] = 0
         *this\fs[3] = 0
         *this\fs[4] = 0
         
         
         If  *box
            *box\TabChange( ) = 1
            
            If size = #PB_Default
               If constants::BinaryFlag( *box\flag, #__flag_BarSmall )
                  If *box\type = #__type_TabBar
                     size = 21 + bar_toggle_line_size
                  Else
                     size = 24
                  EndIf
               ElseIf constants::BinaryFlag( *box\flag, #__flag_BarLarge )
                  size = 40
               Else ; If constants::BinaryFlag( *this\flag, #__flag_BarNormal )
                  If *box\type = #__type_MenuBar
                     size = 20
                  Else
                     size = 32
                  EndIf
               EndIf
               
               If position = 1 Or position = 3
                  If constants::BinaryFlag( *box\flag, #__flag_BarInlineText )
                     size = 80
                  Else
                     size = 50; - (1 + fs)
                  EndIf
               EndIf
            EndIf   
            
            size = DPIScaled( size )
            
            If *this  
               If *this\type = #__type_Panel Or *box\Type = #__type_ToolBar
                  *this\ToolBarHeight = size
               Else
                  *this\MenuBarHeight = size
               EndIf
            EndIf
            
            size = *this\TitleBarHeight + *this\MenuBarHeight + *this\ToolBarHeight
            
            If position = 0
               *box\hide = 1
            Else
               *box\hide = 0
            EndIf
            
            If position = 1
               *box\bar\vertical = 1
               *this\fs[1] = size + fs ; #__panel_width
            EndIf
            
            If position = 3
               *box\bar\vertical = 1
               *this\fs[3] = size + fs ; #__panel_width
            EndIf
            
            If position = 2
               *box\bar\vertical = 0
               *this\fs[2] = size + fs ; #__panel_height
            EndIf
            
            If position = 4
               *box\bar\vertical = 0
               *this\fs[4] = size + fs ; #__panel_height
            EndIf
            
            If Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               PostEventRepaint( *this\root )
            EndIf
         EndIf
      EndProcedure
      
      Procedure AddBarItem( *this._s_WIDGET, item, Text.s, img = - 1 )
         If *this
            Protected._s_ROWS  *item, *tab
            ; get the address of the last item
            ; to make it the parent of the current item
            If *this\menu\parent
               *tab = *this\menu\parent\__tabs( )
            EndIf
            ;
            *item = AddItem( *this, item, Text, img ) 
            ;
            If *tab
               *item\sublevel = *tab\sublevel + 1
               *tab\popupbar = *this
               *tab\childrens + 1
            EndIf
         EndIf
         ;
         ProcedureReturn *item
      EndProcedure
      
      Procedure   BarItem( item, Text.s, img = - 1 )
         ProcedureReturn AddBarItem( widget( ), item, Text.s, img )
      EndProcedure
      
      Procedure   BarButton( Button.i, img.i, mode.i = 0, Text.s = #Null$ )
         ProcedureReturn AddItem( widget( ), Button, Text, img, mode )
      EndProcedure
      
      Procedure   BarSeparator( )
         Protected *item._s_ROWS 
         *item = BarButton( #PB_Ignore, - 1, 0, "" )
         *item\sublevel = - 1
      EndProcedure
      
      Procedure   OpenSubBar( Text.s, img = - 1)
         Protected *menu._s_WIDGET = widget( )
         Protected *this._s_WIDGET
         
         If *menu
            AddBarItem( *menu, #PB_Any, Text.s, img )
            *this = CreateBar( *menu, #Null, #__type_PopupBar ) 
            SetClass( *this, Text )
            
            ; Debug ""+*menu\__tabs( )\tindex +" "+  ListIndex(*menu\__tabs( )) +" "+ *menu\class
            *menu\__tabs( )\tindex = ListIndex(*menu\__tabs( ))
            *menu\__tabs( )\popupbar = *this
            
            ProcedureReturn *this
         EndIf
      EndProcedure
      
      Procedure   CloseSubBar( )
         If widget( )\menu\parent
            widget( ) = widget( )\menu\parent
         EndIf
      EndProcedure
      
      Procedure   BarTitle( title.s, img = - 1 )
         CloseSubBar( )
         ProcedureReturn OpenSubBar( title, img )
      EndProcedure
      
      Procedure   DisableBarButton( *this._s_WIDGET, _barbutton_, _state_ )
         ProcedureReturn DisableItem( *this, _barbutton_, _state_ )
      EndProcedure
      
      Procedure   DisableBarItem( *this._s_WIDGET, _baritem_, _state_ )
         PushListPosition( *this\__tabs( ) )
         If *this\type = #__type_toolbar
            ForEach *this\__tabs( )
               If *this\__tabs( )\tindex = _baritem_
                  *this\__tabs( )\disable = _state_
                  *this\WidgetChange( )       = #True
                  *this\TabChange( )          = #True
                  
                  Break
               EndIf
            Next
         EndIf
         If *this\type = #__type_popupbar Or *this\type = #__type_menubar
            ForEach *this\__tabs( )
               If *this\__tabs( )\popupbar
                  ForEach *this\__tabs( )\popupbar\__tabs( )
                     If *this\__tabs( )\popupbar\__tabs( )\tindex = _baritem_
                        *this\__tabs( )\popupbar\__tabs( )\disable = _state_
                        *this\__tabs( )\popupbar\WidgetChange( )       = #True
                        *this\__tabs( )\popupbar\TabChange( )          = #True
                        
                        Break 2
                     EndIf
                  Next
               Else
                  If *this\__tabs( )\tindex = _baritem_
                     *this\__tabs( )\disable = _state_
                     *this\WidgetChange( )       = #True
                     *this\TabChange( )          = #True
                     
                     
                     ; Break
                  EndIf
               EndIf
            Next
            
            ;
            ; UpdateBar( *this )
         EndIf
         PopListPosition( *this\__tabs( ) )
      EndProcedure
      
      Procedure   BarToolTip( *this._s_WIDGET, _barbutton_, _text_.s )
         ProcedureReturn 
      EndProcedure
      
      Procedure UpdateBar( *this._s_WIDGET )
         If PopupBar( )
            If *this\menu\display
               StartDraw( *this\root )
               Draw( *this )
               StopDraw( )
               
               ;
               ResizeRootWindow( *this, #PB_Ignore, #PB_Ignore, *this\scroll_width( ), #PB_Ignore)
            EndIf
         EndIf
      EndProcedure
      
      Procedure.s GetBarTitleText( *this._s_WIDGET, _title_.s )
         ProcedureReturn 
      EndProcedure
      
      Procedure   SetBarTitleText( *this._s_WIDGET, _titleindex_, _text_.s )
         ForEach *this\__tabs( )
            If *this\__tabs( )\tindex = _titleindex_
               SetItemText( *this, ListIndex(*this\__tabs( )), _text_.s )
               Break
            EndIf
         Next
         
         ;
         UpdateBar( *this )
      EndProcedure
      
      Procedure.s GetBarItemText( *this._s_WIDGET, _baritem_ )
         ForEach *this\__tabs( )
            If *this\__tabs( )\tindex = _baritem_
               ProcedureReturn GetItemText( *this, ListIndex(*this\__tabs( )) )
            EndIf
         Next
      EndProcedure
      
      Procedure   SetBarItemText( *this._s_WIDGET, _baritem_, _text_.s )
         If *this\type = #__type_toolbar
            ForEach *this\__tabs( )
               If *this\__tabs( )\tindex = _baritem_
                  ; SetItemText( *this, ListIndex(*this\__tabs( )), _text_.s )
                  
                  *this\__tabs( )\TextChange( ) = #True
                  *this\__tabs( )\text\string = _text_
                  *this\WidgetChange( )       = #True
                  *this\TabChange( )          = #True
                  
                  Break
               EndIf
            Next
         EndIf
         If *this\type = #__type_popupbar Or *this\type = #__type_menubar
            ForEach *this\__tabs( )
               ; Debug ""+*this\__tabs( )\text\string +" "+ *this\__tabs( )\tindex +" "+ *this\__tabs( )\popupbar
               If *this\__tabs( )\popupbar
                  ForEach *this\__tabs( )\popupbar\__tabs( )
                     If *this\__tabs( )\popupbar\__tabs( )\tindex = _baritem_
                        ; Debug ""+*this\__tabs( )\popupbar\__tabs( )\text\string +" "+ *this\__tabs( )\popupbar\__tabs( )\tindex +" "+ *this\__tabs( )\popupbar\__tabs( )\popupbar
                        ; SetItemText( *this\__tabs( )\popupbar, ListIndex(*this\__tabs( )\popupbar\__tabs( )), _text_.s )
                        
                        *this\__tabs( )\popupbar\__tabs( )\TextChange( ) = #True
                        *this\__tabs( )\popupbar\__tabs( )\text\string = _text_
                        *this\__tabs( )\popupbar\WidgetChange( )       = #True
                        *this\__tabs( )\popupbar\TabChange( )          = #True
                        
                        Break 2
                     EndIf
                  Next
               Else
                  If *this\__tabs( )\tindex = _baritem_
                     ; SetItemText( *this, ListIndex(*this\__tabs( )), _text_.s )
                     
                     *this\__tabs( )\TextChange( ) = #True
                     *this\__tabs( )\text\string = _text_
                     *this\WidgetChange( )       = #True
                     *this\TabChange( )          = #True
                     
                     
                     ; Break
                  EndIf
               EndIf
            Next
            
            ;
            UpdateBar( *this )
         EndIf
      EndProcedure
      
      Procedure   SetBarItemState( *this._s_WIDGET, _baritem_, _state_ )
         ForEach *this\__tabs( )
            If *this\__tabs( )\tindex = _baritem_
               ProcedureReturn SetItemState( *this, ListIndex(*this\__tabs( )), _state_ )
            EndIf
         Next
      EndProcedure
      
      Procedure   GetBarItemState( *this._s_WIDGET, _baritem_ )
         ForEach *this\__tabs( )
            If *this\__tabs( )\tindex = _baritem_
               ProcedureReturn GetItemState( *this, ListIndex(*this\__tabs( )) )
            EndIf
         Next
      EndProcedure
      
      Procedure   CreatePopupBar( _flags_ = 0 )
         ProcedureReturn CreateBar( root( ), _flags_, #__type_PopupBar )
      EndProcedure
      
      Procedure   HidePopupBar( *this._s_WIDGET )
         If *this\type = #__type_MenuBar Or
            *this\type = #__type_PopupBar Or
            *this\type = #__type_ToolBar 
            ;
            While *this\menu\display
               If *this\menu\display
                  *this\menu\display = 0
                  ;
                  ; uncomment if you don't need to keep 
                  ; the last selected item highlighted
                  ;
                  ; If *this\TabFocused( ) 
                  ;    *this\TabFocused( )\_focus = 0
                  ;    *this\TabFocused( )\checked = 0
                  ;    *this\TabFocused( ) = 0
                  ; EndIf
                  ;
                  ;
                  Hide( *this, #True )
                  HideWindow( *this\root\canvas\window, #True, #PB_Window_NoActivate )
                  If MouseButtonPress( )
                     If *this\TabFocused( )
                        Post( *this, #__event_LeftClick, *this\TabFocused( )\tindex, *this\TabFocused( ) )
                     EndIf
                  EndIf
               EndIf
               If *this\menu\parent
                  *this = *this\menu\parent
               Else
                  Break
               EndIf 
               If *this\enter
                  ; Debug "e - "+*this\class
                  Break
               Else
                  ; Debug *this\class
                  If *this\TabFocused( ) 
                     *this\TabFocused( )\_focus = 0
                     *this\TabFocused( )\checked = 0
                     *this\TabFocused( ) = 0
                  EndIf
               EndIf
            Wend
            ;
            If PopupBar( ) <> *this
               PopupBar( ) = *this
               ProcedureReturn *this
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i DisplayPopupBar( *this._s_WIDGET, *display._s_WIDGET, X.l = #PB_Ignore, Y.l = #PB_Ignore )
         Protected Width = #PB_Ignore
         Protected Height = #PB_Ignore
         
         Protected Index
         Protected mode = 0
         Protected *displayroot._s_root
         
         ;\\
         If *this
            If Not *display
               ProcedureReturn 0
            EndIf
            
            *display\root\repaint = 1
            
            ;\\
            If *display\TabEntered( )
               DoEvents( *display, #__event_StatusChange )
            EndIf
            
            ;\\ ComboBox
            If *display\type = #__type_ComboBox
               If *display\combobutton
                  If *this\hide
                     *display\combobutton\arrow\direction = 3 
                     ;If *display\combobutton\enter
                     If MouseButtonPress( )
                        *display\combobutton\ColorState( ) = 2
                        *display\ColorState( ) = 2
                     EndIf
                     ;EndIf
                  Else
                     *display\combobutton\arrow\direction = 2
                     If *display\ColorState( ) = 2
                        If *display\combobutton\enter
                           *display\ColorState( ) = 1
                        Else
                           *display\ColorState( ) = 0
                        EndIf
                        *display\combobutton\ColorState( ) = 0
                     EndIf
                  EndIf
               EndIf
               
               ;           ;\\ hide previews popup widget
               ;           If Popup( ) And 
               ;              Popup( ) <> *this
               ;             DisplayPopupBar( Popup( ), Popup( )\root\parent )
               ;           EndIf
               
               ;\\ hide current popup widget
               Hide( *this, *this\hide ! 1 )
               
               ; test_display = 1
               If *this\hide
                  
                  If test_display
                     Debug "comboBar - hide "+*this\class +" "+ *this\hide
                  EndIf
                  ;
                  
                  HideWindow( *this\root\canvas\window, #True, #PB_Window_NoActivate )
                  ;
                  If *this\menu\display
                     If Pressed( ) = *this
                        Pressed( ) = *display
                     EndIf
                  EndIf
                  ;             ;
                  ;             Popup( ) = #Null 
                  ProcedureReturn - 1
               Else
                  If test_display
                     Debug "comboBar - show"
                  EndIf
                  PostRepaint( *this\root )
               EndIf
            Else
               If *this\hide
                  If test_display
                     Debug "menuBar - show "+*this\class
                  EndIf
                  Hide( *this, #False )
               EndIf
            EndIf
            
            ;\\
            If *this\menu\display = 0
               *this\menu\display = 1
               ;
               Protected parentID
               Protected *popup._S_WIDGET = *display
               While *popup\menu\parent
                  *popup = *popup\menu\parent
               Wend
               If *popup
                  parentID = WindowID( *popup\root\canvas\window )
               Else
                  parentID = WindowID( *display\root\canvas\window )
               EndIf
               
               If test_display
                  Debug "displayBar - create " + *this\class +" "+ *this\root ;
               EndIf
               *displayroot = Open( #PB_Any, 0, 0, 1, 1, "", #PB_Window_NoActivate | #PB_Window_NoGadgets | #PB_Window_BorderLess | #PB_Window_Invisible | #PB_Window_Tool,  parentID )
               *displayroot\parent = *display
               *displayroot\class = "["+*this\class+"]"+"-root" ; "root_"+
                                                                ;\\
               Protected Window = GetCanvasWindow( *displayroot )
               Protected WindowID = WindowID( Window )
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  ; var windowLevel: UIWindow.Level { get set } ; stay on top
                  CocoaMessage(0, WindowID, "setLevel:", 3)
                  ; Debug CocoaMessage(0, WindowID, "level")
               CompilerElse
                  StickyWindow( window, #True )
               CompilerEndIf
               
               *displayroot\menubar = *this
               
               ;\\
               If is_integral_( *this )
                  ReParent( *this, *displayroot )
               Else
                  SetParent( *this, *displayroot )
               EndIf
               
               
               *this\autosize = 1
               
               ;
               If StartDraw( *this\root )
                  ;\\ init drawing font
                  draw_font( *this, GetFontID( *this\root ) )
                  ;
                  CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
                     If CurrentFontID( )
                        DrawingFont( CurrentFontID( ) )
                     EndIf
                  CompilerEndIf
                  ;
                  If *this\type = #__type_ToolBar Or
                     *this\type = #__type_PopupBar Or
                     *this\type = #__type_MenuBar Or
                     *this\type = #__type_TabBar 
                     ;
                     bar_Update_DrawTabItems( *this, *this\__tabs( ) )
                  ElseIf *this\row
                     Update_DrawRows( *this, *this\__rows( ) )
                  EndIf
                  ;
                  StopDraw()
               EndIf
               
               ;\\
               Define pheight
               If *this\type = #__type_ToolBar Or
                  *this\type = #__type_PopupBar Or
                  *this\type = #__type_MenuBar 
                  
                  If ListSize( *this\__tabs( ) )
                     pheight = 16
                     Width = 0
                     Height = 1
                     PushListPosition( *this\__tabs( ) ) 
                     If ListSize( *this\__tabs( ) ) > pheight
                        SelectElement( *this\__tabs( ), pheight )
                     Else
                        LastElement( *this\__tabs( ) ) 
                     EndIf
                     Height + ( *this\__tabs( )\y + *this\__tabs( )\height )
                     PopListPosition( *this\__tabs( ) ) 
                  EndIf
                  
               ElseIf *this\row
                  pheight = 9
                  Width = *this\padding\x + 1 ;*this\fs*2
                  Height = *this\padding\y + *this\fs*2
                  PushListPosition( *this\__rows( ) ) 
                  If ListSize( *this\__rows( ) ) > pheight
                     SelectElement( *this\__rows( ), pheight )
                  Else
                     LastElement( *this\__rows( ) ) 
                  EndIf
                  Height + ( *this\__rows( )\y + *this\__rows( )\height )
                  PopListPosition( *this\__rows( ) ) 
               EndIf
               
               
               ;\\
               If *this\scroll And 
                  *this\scroll\v 
                  ;bar_area_update( *this )
                  ;Debug *this\scroll\v\hide
                  ;If Not *this\scroll\v\hide
                  Width + *this\scroll\v\width 
                  ;EndIf
               EndIf
               Width + *this\scroll_width( )
               
               ;\\
               If *display\type = #__type_ComboBox
                  If Width < *display\width 
                     Width = *display\width 
                  EndIf
               EndIf
               
               ;\\
               If *display\round
                  Width - *display\round * 2
               EndIf
               ;
               CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                  If DPIResolutionX( )
                     Width = DPIUnscaledX( Width )
                  EndIf
                  If DPIResolutionY( )
                     Height = DPIUnScaledY( Height )
                  EndIf
               CompilerEndIf
               
            EndIf
            
            ;\\
            If *this\menu\display  
               PopupBar( ) = *this
               
               If mode
                  X = mouse( )\x - Width / 2
                  
                  If ListSize( *this\__rows( ) ) And *this\RowFocused( )\_focus
                     Y = mouse( )\y - row_y_( *this, *this\RowFocused( ) ) - *this\RowFocused( )\height / 2
                  EndIf
                  If ListSize( *this\__tabs( ) ) And *this\TabFocused( )\_focus
                     Y = mouse( )\y - row_y_( *this, *this\TabFocused( ) ) - *this\TabFocused( )\height / 2
                  EndIf
               Else
                  If X = #PB_Ignore
                     If *display\bar And *display\bar\vertical
                        X = ( *display\screen_width( ) ) - DPIScaledX(5)
                     Else
                        If *display\type = #__type_ComboBox
                           X = *display\screen_x( )
                        ElseIf *display\bar And *display\TabEntered( )
                           X = *display\screen_x( ) + *display\TabEntered( )\x
                        Else
                           X = mouse( )\x
                        EndIf
                     EndIf
                     
                     CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                        If DPIResolutionX( )
                           X = DPIUnscaledX(X)
                        EndIf
                     CompilerEndIf
                  EndIf
                  If *display\round
                     X + *display\round
                  EndIf
                  If Y = #PB_Ignore
                     If *display\type = #__type_ComboBox
                        Y = *display\screen_y( ) + *display\screen_height( )
                        
                     ElseIf *display\bar And *display\TabEntered( )
                        Y = *display\screen_y( ) + (*display\TabEntered( )\y + (*display\bar\thumb\pos - *display\bar\thumb\end))
                        ;  Debug ""+*display\scroll_height( )+" "+*display\TabEntered( )\y
                        
                        If Not *display\bar\vertical
                           Y + *display\TabEntered( )\height
                        EndIf
                     Else
                        Y = mouse( )\y
                     EndIf
                     
                     
                     CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                        If DPIResolutionY( )
                           Y = DPIUnscaledY(Y)
                        EndIf
                     CompilerEndIf
                  EndIf
               EndIf
               ;
               X + GadgetX( *display\root\canvas\gadget, #PB_Gadget_ScreenCoordinate )
               Y + GadgetY( *display\root\canvas\gadget, #PB_Gadget_ScreenCoordinate )
               
               ;   
               ResizeWindow( *this\root\canvas\window, X, Y, Width, Height )
               ResizeGadget( *this\root\canvas\gadget, 0, 0, Width, Height )
               
               ;
               HideWindow( *this\root\canvas\window, #False, #PB_Window_NoActivate )
               DisableWindow( *this\root\canvas\window, #False)
               
               PostReDraw( *this\root )
               
               If Not ( root( ) And root( )\canvas\gadget = *display\root\canvas\gadget )
                  ChangeCurrentCanvas( GadgetID( *display\root\canvas\gadget ) )
               EndIf 
               DoEvents( *this, #__event_Focus )
               ProcedureReturn #True
            EndIf
            
         EndIf
      EndProcedure
      
      Procedure   BindBarEvent( *this._s_WIDGET, _baritem_, *callback )
         ProcedureReturn Bind( *this, *callback, -1, _baritem_ )
      EndProcedure
      
      Procedure   UnbindBarEvent( *this._s_WIDGET, _baritem_, *callback )
         ProcedureReturn Unbind( *this, *callback, -1, _baritem_ )
      EndProcedure
      
      ;-
      Procedure.i VBar( *this._s_WIDGET )
         If *this\scroll
            ProcedureReturn *this\scroll\v
         EndIf
      EndProcedure
      
      Procedure.i HBar( *this._s_WIDGET )
         If *this\scroll
            ProcedureReturn *this\scroll\h
         EndIf
      EndProcedure
      
      ;-
      ;-  EDIT STRING
      Procedure$  GetQuote( text$, len, caret ) ; Ok
         Protected i, chr$, start, stop 
         
         For i = caret To 0 Step - 1
            chr$ = Mid( text$, i, 1 )
            If chr$ = ~"\"" 
               start = i
               
               For i = caret + 1 To len 
                  chr$ = Mid( text$, i, 1 )
                  If chr$ = ~"\""
                     stop = i - start + 1
                     Break 2
                  EndIf
               Next i
               
               Break
            EndIf
         Next i
         
         If stop 
            ; Debug #PB_Compiler_Procedure +" ["+ start +" "+ stop +"]"
            ProcedureReturn Mid( text$, start, stop )
         EndIf
      EndProcedure
      Procedure$  GetWord( text$, len, caret ) ; Ok
         Protected i, chr$, start = 0, stop = len
         
         chr$ = GetQuote( text$, len, caret ) 
         If chr$
            ProcedureReturn chr$
         EndIf
         
         For i = caret To 0 Step - 1
            chr$ = Mid( text$, i, 1 )
            If chr$ = " " Or 
               chr$ = "(" Or 
               chr$ = "[" Or 
               chr$ = "{" Or 
               chr$ = ")" Or 
               chr$ = "]" Or 
               chr$ = "}" Or 
               chr$ = "=" Or 
               chr$ = "'" Or ; chr$ = ~"\"" Or 
               chr$ = "+" Or 
               chr$ = "-" Or 
               chr$ = "*" Or 
               chr$ = "/" Or 
               chr$ = "." Or 
               chr$ = ","
               start = i + 1
               Break
            EndIf
         Next i
         
         For i = caret + 1 To len 
            chr$ = Mid( text$, i, 1 )
            If chr$ = " " Or 
               chr$ = ")" Or 
               chr$ = "]" Or 
               chr$ = "}" Or 
               chr$ = "(" Or 
               chr$ = "[" Or 
               chr$ = "{" Or 
               chr$ = "=" Or 
               chr$ = "'" Or ; chr$ = ~"\"" Or
               chr$ = "+" Or 
               chr$ = "-" Or 
               chr$ = "*" Or 
               chr$ = "/" Or 
               chr$ = "." Or 
               chr$ = "," 
               stop = i - start 
               Break
            EndIf
         Next i
         
         If stop
            ; Debug #PB_Compiler_Procedure +" ["+ start +" "+ stop +"]"
            ProcedureReturn Mid( text$, start, stop )
         EndIf
      EndProcedure
      
      ;\\ Macro edit_row_caret_1_( _this_ ): _this_\text\caret\pos[3]: EndMacro
      
      Macro edit_string_x_( _this_, _mode_ )
         ( row_x_( _this_, _this_\__lines( ) ) + _this_\__lines( )\text\edit#_mode_\x )
      EndMacro
      
      Macro edit_string_y_( _this_, _mode_ ) ; пока не используется
         ( row_y_( _this_, _this_\__lines( ) ) + _this_\__lines( )\text\edit#_mode_\y )
      EndMacro
      
      Macro edit_change_text_( _address_, _char_len_ = 0, _position_ = )
         _address_\text\edit#_position_\len + _char_len_
         _address_\text\len      = _address_\text\edit[1]\len + _address_\text\edit[3]\len
         _address_\text\string.s = Left( _address_\text\string.s, _address_\text\edit[1]\len ) + Right( _address_\text\string.s, _address_\text\edit[3]\len )
      EndMacro
      
      ;-
      Macro edit_select_line_( _this_, _address_, _index_ )
         _address_\_focus = 0
         _address_\ColorState( ) = 0
         
         _address_ = SelectElement( _this_\__lines( ), _index_ )
         
         If _address_
            _address_\ColorState( ) = 1
            _address_\_focus = 1
         EndIf
      EndMacro
      
      Macro edit_sel_reset_( _this_ )
         If _this_\text\edit[2]\width <> 0
            ; вызывать если только строки выделени
            If _this_\text\multiLine
               PushListPosition( _this_\__lines( ) )
               ForEach _this_\__lines( )
                  If _this_\__lines( )\text\edit[2]\width <> 0
                     ; Debug " remove - " +" "+ _this_\__lines( )\text\string
                     edit_sel_string_( _this_, _this_\__lines( ), #__sel_to_remove )
                  EndIf
               Next
               PopListPosition( _this_\__lines( ) )
            EndIf
         EndIf
      EndMacro
      
      Macro edit_sel_end_( _char_ )
         Bool(( _char_ >= ' ' And _char_ <= '/' ) Or               ; ! " # $ % & ' ( ) * + , - .
              ( _char_ >= ':' And _char_ <= '@' ) Or               ;   ; < = > ?
              ( _char_ >= '[' And _char_ <= '^' ) Or               ; \ ] ^ _ `
              ( _char_ >= '{' And _char_ <= '~' ) Or _char_ = '`') ; | }
         
      EndMacro
      
      Procedure.i edit_sel_start_word( *this._s_WIDGET, caret, *rowLine._s_ROWS )
         Protected result.i, i.i, char.i
         
         ; | <<<<<< left edge of the word
         char = Asc( Mid( *rowLine\text\string, caret + 1, 1 ))
         If edit_sel_end_( char )
            result = *rowLine\text\pos + caret
         Else
            result = *rowLine\text\pos
            For i = caret To 1 Step - 1
               char = Asc( Mid( *rowLine\text\string, i, 1 ))
               If edit_sel_end_( char )
                  result = *rowLine\text\pos + i
                  Break
               EndIf
            Next
         EndIf
         ;Debug result - *rowLine\text\pos
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i edit_sel_stop_word( *this._s_WIDGET, caret, *rowLine._s_ROWS )
         Protected result.i, i.i, char.i
         
         ; >>>>>> | right edge of the word
         char = Asc( Mid( *rowLine\text\string, caret, 1 ))
         If edit_sel_end_( char )
            result.i = *rowLine\text\pos + caret
         Else
            result.i = *rowLine\text\pos + *rowLine\text\len
            For i = caret + 1 To *rowLine\text\len
               char = Asc( Mid( *rowLine\text\string, i, 1 ))
               If edit_sel_end_( char )
                  result = *rowLine\text\pos + ( i - 1 )
                  Break
               EndIf
            Next
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Macro edit_redraw_font( _this_ )
         CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
            If StartDraw( _this_\root ) 
               If test_edit_text
                  Debug "  ---- root ReDrawing ----  " 
               EndIf
               If CurrentFontID( )
                  DrawingFont(CurrentFontID( ))
               EndIf
            EndIf
         CompilerEndIf
      EndMacro
      
      Procedure edit_sel_string_( *this._s_WIDGET, *rowLine._s_ROWS, mode.l = #__sel_to_line )
         Protected CaretLeftPos, CaretRightPos, lastselectlen = *this\mode\fullselection
         If test_edit_text
            Debug "edit_sel_row_text - " + *rowLine\lindex + " " + mode
         EndIf
         
         ;\\
         edit_redraw_font( *this )
         
         *this\root\repaint = 1
         ;\\ *rowLine\ColorState( ) = #__s_2
         *rowLine\_focus = 1
         *rowLine\selector = 0
         
         If mode = #__sel_to_remove
            
            CaretLeftPos         = 0
            CaretRightPos        = 0
            *rowLine\ColorState( ) = #__s_0
            *rowLine\_focus = 0
            
         ElseIf mode = #__sel_to_set
            
            CaretLeftPos  = 0
            CaretRightPos = *rowLine\text\len
            *rowLine\selector  = lastselectlen
            
         ElseIf mode = #__sel_to_first
            
            CaretLeftPos = 0
            If *rowLine = *this\LinePressed( )
               CaretRightPos = *this\edit_caret_2( ) - *rowLine\text\pos
            Else
               CaretRightPos = *rowLine\text\len
               *rowLine\selector  = lastselectlen
            EndIf
            ;\\ *this\edit_caret_1( ) = *rowLine\text\pos
            
         ElseIf mode = #__sel_to_last
            
            If *rowLine = *this\LinePressed( )
               CaretLeftPos = *this\edit_caret_2( ) - *rowLine\text\pos
            Else
               CaretLeftPos = 0
            EndIf
            CaretRightPos = *rowLine\text\len
            
            If *rowLine\lindex <> *this\countitems - 1
               *rowLine\selector = lastselectlen
            EndIf
            ;\\ *this\edit_caret_1( ) = *rowLine\text\pos + *rowLine\text\len
            
         ElseIf mode = #__sel_to_line
            
            If *this\edit_caret_1( ) >= *this\edit_caret_2( )
               If *rowLine\text\pos <= *this\edit_caret_2( )
                  CaretLeftPos = *this\edit_caret_2( ) - *rowLine\text\pos
               EndIf
               CaretRightPos = *this\edit_caret_1( ) - *rowLine\text\pos
            Else
               CaretLeftPos = *this\edit_caret_1( ) - *rowLine\text\pos
               If *this\edit_caret_2( ) > ( *rowLine\text\pos + *rowLine\text\len )
                  If *rowLine <> *this\LinePressed( )
                     *rowLine\selector = lastselectlen
                  EndIf
                  CaretRightPos = *rowLine\text\len
               Else
                  CaretRightPos = *this\edit_caret_2( ) - *rowLine\text\pos
               EndIf
            EndIf
            
         EndIf
         
         If test_edit_text
            ; Debug "caret change " + CaretLeftPos +" "+ CaretRightPos
         EndIf
         
         *rowLine\text\edit[1]\pos = 0
         *rowLine\text\edit[2]\pos = CaretLeftPos  ; - *rowLine\text\pos
         *rowLine\text\edit[3]\pos = CaretRightPos ; - *rowLine\text\pos
         
         *rowLine\text\edit[1]\len = *rowLine\text\edit[2]\pos
         *rowLine\text\edit[2]\len = *rowLine\text\edit[3]\pos - *rowLine\text\edit[2]\pos
         *rowLine\text\edit[3]\len = *rowLine\text\len - *rowLine\text\edit[3]\pos
         
         ; item left text
         If *rowLine\text\edit[1]\len > 0
            *rowLine\text\edit[1]\string = Left( *rowLine\text\string, *rowLine\text\edit[1]\len )
            *rowLine\text\edit[1]\width  = TextWidth( *rowLine\text\edit[1]\string )
            *rowLine\text\edit[1]\y      = *rowLine\text\y
            *rowLine\text\edit[1]\height = *rowLine\text\height
         Else
            *rowLine\text\edit[1]\string = ""
            *rowLine\text\edit[1]\width  = 0
         EndIf
         ; item right text
         If *rowLine\text\edit[3]\len       > 0
            *rowLine\text\edit[3]\y         = *rowLine\text\y
            *rowLine\text\edit[3]\height    = *rowLine\text\height
            If *rowLine\text\edit[3]\len    = *rowLine\text\len
               *rowLine\text\edit[3]\string = *rowLine\text\string
               *rowLine\text\edit[3]\width  = *rowLine\text\width
            Else
               *rowLine\text\edit[3]\string = Right( *rowLine\text\string, *rowLine\text\edit[3]\len )
               *rowLine\text\edit[3]\width  = TextWidth( *rowLine\text\edit[3]\string )
            EndIf
         Else
            *rowLine\text\edit[3]\string = ""
            *rowLine\text\edit[3]\width  = 0
         EndIf
         ; item edit text
         If *rowLine\text\edit[2]\len       > 0
            If *rowLine\text\edit[2]\len    = *rowLine\text\len
               *rowLine\text\edit[2]\string = *rowLine\text\string
               *rowLine\text\edit[2]\width  = *rowLine\text\width
            Else
               *rowLine\text\edit[2]\string = Mid( *rowLine\text\string, 1 + *rowLine\text\edit[2]\pos, *rowLine\text\edit[2]\len )
               *rowLine\text\edit[2]\width  = *rowLine\text\width - ( *rowLine\text\edit[1]\width + *rowLine\text\edit[3]\width )
            EndIf
            *rowLine\text\edit[2]\y      = *rowLine\text\y
            *rowLine\text\edit[2]\height = *rowLine\text\height
         Else
            *rowLine\text\edit[2]\string = ""
            *rowLine\text\edit[2]\width  = 0
         EndIf
         
         ;
         If *rowLine\selector
            *rowLine\text\edit[2]\width + *rowLine\selector
         EndIf
         
         ; Чтобы знать что строки выделени
         If *rowLine\text\edit[2]\width
            *this\text\edit[2]\width = *rowLine\text\edit[2]\width
         EndIf
         
         ; set text position
         *rowLine\text\edit[1]\x = *rowLine\text\x
         *rowLine\text\edit[2]\x = *rowLine\text\x + *rowLine\text\edit[1]\width
         *rowLine\text\edit[3]\x = *rowLine\text\x + *rowLine\text\edit[1]\width + *rowLine\text\edit[2]\width
         
         ProcedureReturn #True
      EndProcedure
      
      Procedure edit_sel_text_( *this._s_WIDGET, *rowLine._s_ROWS )
         ; edit sel all items
         If *rowLine = #PB_All
            *rowLine                 = *this\LineFocused( )
            *this\LinePressed( )  = #Null
            *this\edit_caret_0( ) = 0
            *this\edit_caret_1( ) = 0
            *this\edit_caret_2( ) = 0
            PushListPosition( *this\__lines( ) )
            ForEach *this\__lines( )
               edit_sel_string_( *this, *this\__lines( ), #__sel_to_last )
            Next
            ;*this\LinePressed( ) = *this\__lines( )
            PopListPosition( *this\__lines( ) )
            *this\edit_caret_1( ) = 0
            *this\edit_caret_2( ) = *this\text\len
            *this\LinePressed( )  = *this\LineFocused( )
         EndIf
         
         If *rowLine
            If *this\edit_caret_1( ) > *this\edit_caret_2( )
               *this\text\edit[2]\pos = *this\edit_caret_2( )
               *this\text\edit[3]\pos = *this\edit_caret_1( )
               *this\text\caret\x     = *rowLine\x + *rowLine\text\edit[3]\x - 1
            Else
               *this\text\edit[2]\pos = *this\edit_caret_1( )
               *this\text\edit[3]\pos = *this\edit_caret_2( )
               *this\text\caret\x     = *rowLine\x + *rowLine\text\edit[2]\x - 1
            EndIf
            
            
            *this\text\caret\height = *rowLine\text\height
            *this\text\caret\y      = *rowLine\y
            
            ;       ;*this\text\caret\x = 13
            ;       ;Debug ""+*this\padding\x +" "+ *this\text\caret\x +" "+ *this\edit_caret_1( ) +" "+ *rowLine\text\edit[1]\string
            ;       ;Debug TextWidth("W")
            
            ;
            *this\text\edit[1]\len = *this\text\edit[2]\pos
            *this\text\edit[3]\len = ( *this\text\len - *this\text\edit[3]\pos )
            
            If *this\text\edit[2]\len <> ( *this\text\edit[3]\pos - *this\text\edit[2]\pos )
               *this\text\edit[2]\len = ( *this\text\edit[3]\pos - *this\text\edit[2]\pos )
            EndIf
            ;;Debug ""+*this\edit_caret_1( ) +" "+ *this\text\edit[3]\pos;*this\text\edit[2]\len;*this\text\edit[2]\string
            
            ; left text
            If *this\text\edit[1]\len > 0
               *this\text\edit[1]\string = Left( *this\text\string.s, *this\text\edit[1]\len )
            Else
               *this\text\edit[1]\string = ""
            EndIf
            ; right text
            If *this\text\edit[3]\len > 0
               *this\text\edit[3]\string = Right( *this\text\string.s, *this\text\edit[3]\len )
            Else
               *this\text\edit[3]\string = ""
            EndIf
            ; edit text
            If *this\text\edit[2]\len > 0
               *this\text\edit[2]\string = Mid( *this\text\string.s, 1 + *this\text\edit[2]\pos, *this\text\edit[2]\len )
            Else
               *this\text\edit[2]\string = ""
            EndIf
            
            ProcedureReturn 1
         EndIf
      EndProcedure
      
      ;-
      Procedure.l edit_make_caret_position( *this._s_WIDGET, *rowLine._s_ROWS )
         ; Get caret position
         Protected i.l, mouse_x.l, caret_x.l, caret.l = - 1
         Protected Distance.d, MinDistance.d = Infinity( )
         
         If *rowLine 
            edit_redraw_font( *this )
            
            mouse_x = mouse( )\x - row_x_( *this, *rowLine ) - *rowLine\text\x - *this\scroll_x( ) - Bool( #PB_Compiler_OS = #PB_OS_MacOS ) ; надо узнать, думаю это связано с DrawRotateText( )
            
            For i = 0 To *rowLine\text\len
               caret_x = TextWidth( Left( *rowLine\text\string, i ))
               Distance = ( mouse_x - caret_x ) * ( mouse_x - caret_x )
               
               If MinDistance >= Distance
                  MinDistance = Distance
                  caret = i
               Else
                  Break
               EndIf
            Next
         EndIf
         
         ProcedureReturn caret
      EndProcedure
      
      Procedure edit_make_text_position( *this._s_WIDGET )
         ;
         bar_area_update( *this )
         
         ; make horizontal scroll x
         make_scrollarea_x( *this, *this\scroll_width( ), *this\text\align )
         
         ; make vertical scroll y
         make_scrollarea_y( *this, *this\scroll_height( ), *this\text\align )
         
         If *this\scroll\v And
            bar_PageChange( *this\scroll\v, - *this\scroll_y( ) )
         EndIf
         
         If *this\scroll\h And
            bar_PageChange( *this\scroll\h, - *this\scroll_x( ) )
         EndIf
      EndProcedure
      
      Procedure.s edit_make_insert_text( *this._s_WIDGET, Text.s )
         Protected String.s, i.i, Len.i
         
         With *this
            If *this\text\numeric And Text.s <> #LF$
               Static Dot, Minus
               Protected Chr.s, Input.i, left.s, count.i
               
               Len = Len( Text.s )
               For i = 1 To Len
                  Chr   = Mid( Text.s, i, 1 )
                  Input = Asc( Chr )
                  
                  Select Input
                     Case '0' To '9', '.', '-'
                     Case 'Ю', 'ю', 'Б', 'б', 44, 47, 60, 62, 63 : Input = '.' : Chr = Chr( Input )
                        
                     Default
                        Input = 0
                  EndSelect
                  
                  If Input
                     If *this\type = #__type_IPAddress
                        left.s = Left( *this\text\string, *this\edit_caret_1( ) )
                        Select CountString( left.s, "." )
                           Case 0 : left.s = StringField( left.s, 1, "." )
                           Case 1 : left.s = StringField( left.s, 2, "." )
                           Case 2 : left.s = StringField( left.s, 3, "." )
                           Case 3 : left.s = StringField( left.s, 4, "." )
                        EndSelect
                        count = Len( left.s + Trim( StringField( Mid( *this\text\string, *this\edit_caret_1( ) + 1 ), 1, "." ), #LF$ ))
                        If count < 3 And ( Val( left.s ) > 25 Or Val( left.s + Chr.s ) > 255 )
                           Continue
                           ;               ElseIf Mid( *this\text\string, *this\edit_caret_1( ) + 1, 1 ) = "."
                           ;                 *this\edit_caret_1( ) + 1 : *this\edit_caret_2( ) = *this\edit_caret_1( )
                        EndIf
                     EndIf
                     
                     If Not Dot And Input = '.' And Mid( *this\text\string, *this\edit_caret_1( ) + 1, 1 ) <> "."
                        Dot = 1
                     ElseIf Input <> '.' And count < 3
                        Dot = 0
                     Else
                        Continue
                     EndIf
                     
                     If Not Minus And Input = '-' And Mid( *this\text\string, *this\edit_caret_1( ) + 1, 1 ) <> "-"
                        Minus = 1
                     ElseIf Input <> '-'
                        Minus = 0
                     Else
                        Continue
                     EndIf
                     
                     String.s + Chr
                  EndIf
               Next
               
            ElseIf *this\text\pass
               Len = Len( Text.s )
               CompilerIf #PB_Compiler_Version =< 546
                  For i = 1 To Len : String.s + "*" : Next
               CompilerElse
                  For i = 1 To Len : String.s + Chr($25CF) : Next ; "•?"
               CompilerEndIf
               
            Else
               Select #True
                  Case *this\text\lower : String.s = LCase( Text.s )
                  Case *this\text\upper : String.s = UCase( Text.s )
                  Default
                     String.s = Text.s
               EndSelect
            EndIf
         EndWith
         
         ProcedureReturn String.s
      EndProcedure
      
      ;-
      Procedure edit_key_change_text( *this._s_WIDGET, Chr.s = "" ) ; Ok
         Protected key = keyboard( )\key
         
         If Not *this\text\editable
            ProcedureReturn 0
         EndIf
         If Not *this\LineFocused( )
            ProcedureReturn 0
         EndIf
         
         If Chr.s
            Chr.s = edit_make_insert_text( *this, Chr.s)
            
            If Chr.s
               If *this\LineFocused( )
                  If *this\edit_caret_1( ) > *this\edit_caret_2( )
                     *this\edit_caret_1( ) = *this\edit_caret_2( )
                  EndIf
                  
                  *this\edit_caret_1( ) + Len( Chr.s )
                  *this\edit_caret_2( ) = *this\edit_caret_1( )
                  
                  If *this\text\edit[2]\len
                     If *this\edit_caret_2( ) > *this\LineFocused( )\text\pos
                        Debug "bug insert "
                        *this\LinePressedIndex( ) - CountString( *this\text\edit[2]\string, #LF$) 
                     EndIf
                  EndIf
                  ;
                  If *this\LineFocusedIndex( ) > *this\LinePressedIndex( )
                     *this\LineFocusedIndex( ) = *this\LinePressedIndex( )
                  EndIf
                  ;                
                  *this\LineFocusedIndex( ) + CountString( Chr.s, #LF$)
                  *this\LinePressedIndex( ) = *this\LineFocusedIndex( )
                  
                  
                  ;  Debug ""+ *this\LineFocusedIndex( ) +" "+ *this\LinePressedIndex( ) +" "+ *this\LineFocused( )\lindex
                  
                  ;                *this\text\edit[2]\len = 0
                  ;                *this\text\edit[2]\string.s = ""
                  
                  ;                *this\text\edit[1]\len + Len( Chr.s )
                  ;                *this\text\edit[1]\string.s + Chr.s
                  ;                               
                  ;                *this\text\len = *this\text\edit[1]\len + *this\text\edit[3]\len
                  ;                *this\text\string.s = *this\text\edit[1]\string + *this\text\edit[3]\string
                  
                  *this\text\string.s = *this\text\edit[1]\string + Chr.s + *this\text\edit[3]\string
                  
                  ;result             = 1
                  
                  *this\TextChange( ) =- 99
                  
                  *this\LineFocused( ) = 0
                  *this\LinePressed( ) = 0
                  *this\LineEntered( ) = 0
                  
                  *this\root\repaint = 1
               EndIf
            Else
               *this\notify = 1
            EndIf
         Else
            If key = #PB_Shortcut_X
               If *this\text\edit[2]\len
                  If *this\edit_caret_1( ) > *this\edit_caret_2( )
                     *this\edit_caret_1( ) = *this\edit_caret_2( )
                  Else
                     *this\edit_caret_2( ) = *this\edit_caret_1( )
                  EndIf
               Else
                  *this\notify = key
               EndIf
            EndIf
            
            ; key_backup
            If key = #PB_Shortcut_Back
               If *this\text\edit[1]\string
                  If *this\edit_caret_1( ) > *this\edit_caret_2( )
                     *this\edit_caret_1( ) = *this\edit_caret_2( )
                  EndIf
                  If Not *this\text\edit[2]\len
                     *this\text\edit[1]\string = Left( *this\text\edit[1]\string, *this\text\edit[1]\len - 1 )
                     *this\edit_caret_1( ) - 1
                  EndIf
                  *this\edit_caret_2( )    = *this\edit_caret_1( )
               Else
                  *this\notify = key
               EndIf
            EndIf
            
            ; key_delete
            If key = #PB_Shortcut_Delete
               If *this\text\edit[3]\string
                  If Not *this\text\edit[2]\len
                     *this\text\edit[3]\string = Right( *this\text\edit[3]\string, *this\text\edit[3]\len - 1 )
                  EndIf
                  ;
                  If *this\edit_caret_1( ) > *this\edit_caret_2( )
                     *this\edit_caret_1( ) = *this\edit_caret_2( )
                  Else
                     *this\edit_caret_2( ) = *this\edit_caret_1( )
                  EndIf
               Else
                  *this\notify = key
               EndIf
            EndIf
            
            If key = #PB_Shortcut_Return
               If *this\text\multiline
                  If *this\edit_caret_1( ) > *this\edit_caret_2( )
                     *this\edit_caret_1( ) = *this\edit_caret_2( )
                  EndIf
                  *this\edit_caret_1( )    + Len( #LF$ )
                  *this\edit_caret_2( )    = *this\edit_caret_1( )
               Else
                  *this\notify = key
               EndIf
            EndIf
            
            ;
            If Not *this\notify
               If key = #PB_Shortcut_Return
                  *this\text\string.s = *this\text\edit[1]\string + #LF$ + *this\text\edit[3]\string
                  ;
                  If *this\LinePressedIndex( ) > *this\LineFocused( )\lindex
                     *this\LinePressedIndex( ) = *this\LineFocused( )\lindex + 1
                  Else
                     *this\LinePressedIndex( ) + 1
                  EndIf
               Else
                  *this\text\string.s = *this\text\edit[1]\string + *this\text\edit[3]\string
                  ;
                  If *this\text\edit[2]\len
                     If *this\LinePressedIndex( ) > *this\LineFocused( )\lindex
                        *this\LinePressedIndex( ) = *this\LineFocused( )\lindex
                     EndIf
                  Else
                     If *this\edit_caret_2( ) < *this\LineFocused( )\text\pos
                        *this\LinePressedIndex( ) - 1
                     EndIf
                  EndIf
               EndIf
               ;
               *this\LineFocusedIndex( ) = *this\LinePressedIndex( )
               ;
               *this\TextChange( ) =- 99
               ;
               *this\LineEntered( ) = 0
               *this\LinePressed( ) = 0
               *this\LineFocused( ) = 0
               
               ProcedureReturn - 1
            EndIf
            
         EndIf  
      EndProcedure
      
      Procedure edit_key_page_up_down_( *this._s_WIDGET, wheel, index_select_row )
         Protected repaint, select_index, page_height
         Protected first_index = 0, last_index = *this\countitems - 1
         
         If wheel = - 1 ; page-up
            If index_select_row
               If index_select_row > 0
                  select_index = *this\RowFirstVisible( )\rindex
               Else
                  select_index = first_index
               EndIf
               If *this\LineFocused( )\lindex <> select_index
                  edit_select_line_( *this, *this\LineFocused( ), select_index )
                  
                  If select_index = first_index
                     *this\edit_caret_1( ) = 0
                  Else
                     ;\\ *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\edit_caret_0( )
                     *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\edit_caret_1( )
                  EndIf
                  
                  page_height = *this\inner_height( )
                  repaint     = 1
               EndIf
            Else
               If *this\edit_caret_1( ) <> *this\LineFocused( )\text\pos
                  *this\edit_caret_1( ) = *this\LineFocused( )\text\pos
                  repaint               = 1
               EndIf
            EndIf
            
         ElseIf wheel = 1 ; page-down
            If index_select_row
               If index_select_row > 0
                  select_index = *this\RowLastVisible( )\rindex
               Else
                  select_index = last_index
               EndIf
               If *this\LineFocused( )\lindex <> select_index
                  edit_select_line_( *this, *this\LineFocused( ), select_index )
                  
                  If select_index = last_index
                     *this\edit_caret_1( ) = *this\text\len
                  Else
                     ;\\ *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\edit_caret_0( )
                     *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\edit_caret_1( )
                  EndIf
                  
                  page_height = *this\inner_height( )
                  repaint     = 1
               EndIf
            Else
               If *this\edit_caret_1( ) <> *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                  *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                  repaint               = 1
               EndIf
            EndIf
         EndIf
         
         If repaint
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            *this\LinePressedIndex( ) = *this\LineFocused( )\lindex
            
            ;             If wheel = - 1
            ;                row_scroll_y_( *this, *this\LineFocused( ), - page_height )
            ;             ElseIf wheel = 1
            ;                row_scroll_y_( *this, *this\LineFocused( ), + page_height )
            ;             EndIf
         EndIf
         
         ProcedureReturn repaint
      EndProcedure
      
      Procedure edit_key_home_( *this._s_WIDGET )
         Protected result
         
         If keyboard( )\key[1] & #PB_Canvas_Control
            If *this\edit_caret_1( ) <> 0
               *this\edit_caret_1( )     = 0
               *this\LinePressedIndex( ) = 0
               
               If test_edit_text
                  Debug "key ctrl home"
               EndIf
               result = 1
            EndIf
         Else
            If *this\edit_caret_1( ) <> *this\LineFocused( )\text\pos
               *this\edit_caret_1( )     = *this\LineFocused( )\text\pos
               *this\LinePressedIndex( ) = *this\LineFocused( )\lindex
               
               If test_edit_text
                  Debug "key home"
               EndIf
               result = 1
            EndIf
         EndIf
         
         If result
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            ;\\ *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
            *this\LineFocused( )\edit_caret_1( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure edit_key_end_( *this._s_WIDGET )
         Protected result
         
         If keyboard( )\key[1] & #PB_Canvas_Control
            If *this\edit_caret_1( ) <> *this\text\len
               *this\edit_caret_1( )     = *this\text\len
               *this\LinePressedIndex( ) = *this\countitems - 1
               
               If test_edit_text
                  Debug "key ctrl end"
               EndIf
               result = 1
            EndIf
         Else
            If *this\edit_caret_1( ) <> *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
               *this\edit_caret_1( )     = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
               *this\LinePressedIndex( ) = *this\LineFocused( )\lindex
               
               If test_edit_text
                  Debug "key end"
               EndIf
               result = 1
            EndIf
         EndIf
         
         If result
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            ;\\ *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
            *this\LineFocused( )\edit_caret_1( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      
      
      ;-
      Procedure edit_AddLine( *this._s_WIDGET, List e_rows._s_ROWS( ), position, *text.Character, string_len, count )
         Protected *rowLine._s_ROWS
         Protected add_index = - 1, add_y, add_pos, add_height
         
         If position < 0 Or position > ListSize( e_rows( )) - 1
            LastElement( e_rows( ))
            *rowLine = AddElement( e_rows( ))
            position = ListIndex( e_rows( ))
         Else
            *rowLine   = SelectElement( e_rows( ), position )
            add_index  = e_rows( )\lindex
            ;             add_y      = e_rows( )\y + Bool( #PB_Compiler_OS = #PB_OS_Windows )
            add_pos    = e_rows( )\text\pos
            ;             add_height = e_rows( )\height + *this\mode\gridlines
            *rowLine   = InsertElement( e_rows( ))
            
            PushListPosition( e_rows( ))
            While NextElement( e_rows( ))
               e_rows( )\lindex = ListIndex( e_rows( ) )
               ;                e_rows( )\y + add_height
               e_rows( )\text\pos + string_len + Len( #LF$ )
            Wend
            PopListPosition(e_rows( ))
         EndIf
         
         ;\\
         e_rows( )\lindex      = position
         e_rows( )\text\len    = string_len
         If *text
            e_rows( )\text\string = PeekS ( *text, string_len )
         EndIf
         
         e_rows( )\height = e_rows( )\text\height
         e_rows( )\width  = *this\inner_width( )
         
         e_rows( )\color  = _get_colors_( )
         
         If add_index >= 0
            e_rows( )\text\pos = add_pos
         Else
            If *this\text\len
               e_rows( )\text\pos = *this\text\len 
               If position > count
                  e_rows( )\text\pos + 1
               EndIf
            EndIf
         EndIf
         
         ;          ; make line position
         ;          If *this\text\vertical
         ;          Else ; horizontal
         ;             If *this\scroll_width( ) < e_rows( )\text\width + *this\padding\x * 2
         ;                *this\scroll_width( ) = e_rows( )\text\width + *this\padding\x * 2
         ;             EndIf
         ;             
         ;             If *this\text\rotate = 0
         ;                If add_index >= 0
         ;                   e_rows( )\y        = add_y - *this\padding\y
         ;                Else
         ;                   e_rows( )\y        = *this\scroll_height( ) - *this\padding\y
         ;                EndIf
         ;             ElseIf *this\text\rotate = 180
         ;                e_rows( )\y = ( *this\inner_height( ) - *this\scroll_height( ) - e_rows( )\text\height ) + *this\padding\y
         ;             EndIf
         ;             
         ;             *this\scroll_height( ) + e_rows( )\height + *this\mode\gridlines
         ;          EndIf
         
         *this\countitems + 1
         *this\text\len + string_len + Len( #LF$ )
      EndProcedure
      
      Procedure edit_AddItem( *this._s_WIDGET, position, *text.Character, string_len )
         ; edit_AddLine(*this, *this\__lines( ), position, *text, string_len, 0);CountString( *this\text\string, #LF$ ) )
         
         Protected add_index = - 1, add_pos
         
         If position < 0 Or position > ListSize( *this\__lines( )) - 1
            LastElement( *this\__lines( ))
            AddElement( *this\__lines( ))
            position = ListIndex( *this\__lines( ))
         Else
            SelectElement( *this\__lines( ), position )
            add_index  = *this\__lines( )\lindex
            add_pos    = *this\__lines( )\text\pos
            InsertElement( *this\__lines( ))
            
            PushListPosition( *this\__lines( ))
            While NextElement( *this\__lines( ))
               *this\__lines( )\lindex = ListIndex( *this\__lines( ) )
               *this\__lines( )\text\pos + string_len + Len( #LF$ )
            Wend
            PopListPosition(*this\__lines( ))
         EndIf
         
         ;\\
         *this\__lines( )\lindex      = position
         *this\__lines( )\text\len    = string_len
         If *text
            *this\__lines( )\text\string = PeekS ( *text, string_len )
         EndIf
         
         If add_index >= 0
            *this\__lines( )\text\pos = add_pos
         Else
            *this\__lines( )\text\pos = *this\text\len 
            If position > 0
               *this\__lines( )\text\pos + 1
            EndIf
         EndIf
         
         *this\countitems + 1
         *this\text\len + string_len + Len( #LF$ )
         
         
         ; Debug ""+*this\__lines( )\lindex +" "+ *this\__lines( )\text\pos
         
         ; insert line 
         If *this\__lines( )\text\pos = 0
            If *this\text\string
               *this\text\string = InsertString( *this\text\string, *this\__lines( )\text\string + #LF$, 1)
            Else
               *this\text\string = InsertString( *this\text\string, *this\__lines( )\text\string, 1)
            EndIf
         Else
            *this\text\string = InsertString( *this\text\string, #LF$ + *this\__lines( )\text\string, *this\__lines( )\text\pos )
         EndIf
         
         ;
         *this\TextChange( )      = 1
         *this\WidgetChange( )    = 1
      EndProcedure
      
      Procedure edit_SetItemState( *this._s_WIDGET, Item.l, State.i )
         If *this\LineFocusedIndex( ) <> Item
            *this\LineFocusedIndex( ) = Item
            
            SelectElement( *this\__lines( ), Item )
            
            If *this\LineFocused( ) <> *this\__lines( )
               If *this\LineFocused( )
                  If *this\LineFocused( )\_focus <> 0
                     *this\LineFocused( )\_focus = 0
                  EndIf
                  
                  ;*this\LineFocused( )\ColorState( ) = #__s_0
               EndIf
               
               *this\LineFocused( ) = *this\__lines( )
               
               If *this\LineFocused( )\_focus = 0
                  *this\LineFocused( )\_focus = 1
               EndIf
               
               ;
               *this\LineFocused( )\ColorState( ) = #__s_2
            EndIf
            
            ;
            If state < 0 Or
               state > *this\LineFocused( )\text\len
               state = *this\LineFocused( )\text\len
            EndIf
            
            *this\edit_caret_0( ) = State
            *this\edit_caret_1( ) = State + *this\LineFocused( )\text\pos
            *this\edit_caret_2( ) = State + *this\LineFocused( )\text\pos
            
            ;
            edit_sel_string_( *this, *this\LineFocused( ) )
            edit_sel_text_( *this, *this\LineFocused( ) )
            row_scroll_y_( *this, *this\LineFocused( ) )
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      Procedure edit_SetState( *this._s_WIDGET, State.i )
         If state < 0 Or
            state > *this\text\len
            state = *this\text\len
         EndIf
         
         If *this\edit_caret_1( ) <> State
            PushListPosition( *this\__lines( ) )
            ForEach *this\__lines( )
               If *this\__lines( )\text\pos <= state And
                  *this\__lines( )\text\pos + *this\__lines( )\text\len >= state
                  
                  If *this\LineFocused( ) <> *this\__lines( )
                     If *this\LineFocused( )
                        If *this\LineFocused( )\_focus <> 0
                           *this\LineFocused( )\_focus = 0
                        EndIf
                        
                        *this\LineFocused( )\ColorState( ) = #__s_0
                     EndIf
                     
                     *this\LineFocused( )      = *this\__lines( )
                     *this\LineFocusedIndex( ) = *this\__lines( )\lindex
                     
                     If *this\LineFocused( )\_focus = 0
                        *this\LineFocused( )\_focus = 1
                     EndIf
                     
                     *this\LineFocused( )\ColorState( ) = #__s_2
                  EndIf
                  Break
               EndIf
            Next
            PopListPosition( *this\__lines( ) )
            
            ;
            *this\edit_caret_1( ) = State
            *this\edit_caret_2( ) = State
            *this\edit_caret_0( ) = State - *this\LineFocused( )\text\pos
            
            ;
            edit_sel_string_( *this, *this\LineFocused( ) )
            edit_sel_text_( *this, *this\LineFocused( ) )
            row_scroll_y_( *this, *this\LineFocused( ) )
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      Procedure.i SetText( *this._s_WIDGET, Text.s )
         Protected result.i, i.i
         
         If *this\type = #__type_Window
            *this\TitleText( )\string = Text
         EndIf
         
         If *this\type = #__type_Tree
            If *this\RowFocused( )
               *this\RowFocused( )\text\string = Text
            EndIf
         EndIf
         
         If *this\type = #__type_ComboBox
            If *this\stringbar
               ProcedureReturn SetText( *this\stringbar, Text )
            Else
               ; ProcedureReturn SetText( *this, Text )
               Text.s = edit_make_insert_text( *this, Text.s )
               If *This\text\string.s <> Text.s
                  *This\text\string.s = Text.s
                  *this\TextChange( ) = #True
                  result              = #True
                  PostRepaint( *this\root )
               EndIf
            EndIf
         EndIf
         
         If *this\type = #__type_Editor Or
            *this\type = #__type_String Or
            *this\type = #__type_text Or
            *this\type = #__type_hyperlink Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_Button
            
            Text.s = ReplaceString( Text.s, #LFCR$, #LF$ )
            Text.s = ReplaceString( Text.s, #CRLF$, #LF$ )
            Text.s = ReplaceString( Text.s, #CR$, #LF$ )
            ;
            If *this\text\multiline = 0
               Text.s = edit_make_insert_text( *this, Text.s )
               Text.s = RemoveString( Text.s, #LF$ )
            EndIf
            
            If *This\text\string.s <> Text.s
               *This\text\string.s = Text.s
               ;
               If *this\text\pass
                  *this\text\pass$ = *this\text\string
               EndIf
               
               ; ;                ;
               ;                *this\scroll_width( )  = *this\padding\x * 2
               ;                *this\scroll_height( ) = *this\padding\y * 2
               ;                
               ;                ;                Protected enter_index = - 1: If *this\LineEntered( ): enter_index = *this\LineEntered( )\lindex: *this\LineEntered( ) = #Null: EndIf
               ;                ;                Protected focus_index = - 1: If *this\LineFocused( ): focus_index = *this\LineFocused( )\lindex: *this\LineFocused( ) = #Null: EndIf
               ;                ;                Protected press_index = - 1: If *this\LinePressed( ): press_index = *this\LinePressed( )\lindex: *this\LinePressed( ) = #Null: EndIf
               ;                
               ;                *this\text\len = 0;Len(Text.s)
               ;                *this\countitems = 0
               ;                ClearList( *this\__lines( ))
               ;                
               ;                Protected String.s = Text.s + #LF$
               ;                Protected *str.Character = @String
               ;                Protected *end.Character = @String
               ;                Protected len = Len( #LF$ )
               ;                
               ;                While *end\c
               ;                   If *end\c = #LF
               ;                      LastElement( *this\__lines( ))
               ;                      AddElement( *this\__lines( ))
               ;                      *this\__lines( )\lindex = ListIndex( *this\__lines( ))
               ;                      *this\__lines( )\text\len  = (*end - *str) >> #PB_Compiler_Unicode
               ;                      *this\__lines( )\text\string = PeekS ( *str, *this\__lines( )\text\len )
               ;                      *this\__lines( )\text\pos = *this\text\len 
               ;                      *this\text\len + *this\__lines( )\text\len + len
               ;                      *this\countitems + 1
               ;                      
               ;                      
               ;                      ;                      ;
               ;                      ;                      If enter_index = *this\__lines( )\lindex: *this\LineEntered( ) = *this\__lines( ): EndIf
               ;                      ;                      If focus_index = *this\__lines( )\lindex: *this\LineFocused( ) = *this\__lines( ): EndIf
               ;                      ;                      If press_index = *this\__lines( )\lindex: *this\LinePressed( ) = *this\__lines( ): EndIf
               ;                      
               ;                      *str = *end + #__sOC
               ;                   EndIf
               ;                   *end + #__sOC
               ;                Wend
               ;                
               ;                ;
               ;                *this\text\len - len
               
               ;; ReDraw(*this\root)
               ;*this\TextChange( )   = 1
               ;*this\WidgetChange( ) = 1
               
               ;edit_redraw_font( *this )
               CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
                  If StartDraw( *this\root ) 
                     If CurrentFontID( )
                        DrawingFont(CurrentFontID( ))
                     EndIf
                  EndIf
               CompilerEndIf
               Update_DrawText( *this, 1 )
               
               If *this\LineFocused( )
                  edit_sel_string_( *this, *this\LineFocused( ) )
                  edit_sel_text_( *this, *this\LineFocused( ) )
               EndIf
               
               ProcedureReturn 1
            EndIf
         Else
            ;         If *this\text\multiline = 0
            ;           Text = RemoveString( Text, #LF$ )
            ;         EndIf
            
            Text = ReplaceString( Text, #LFCR$, #LF$ )
            Text = ReplaceString( Text, #CRLF$, #LF$ )
            Text = ReplaceString( Text, #CR$, #LF$ )
            ;Text + #LF$
            
            If *This\text\string.s <> Text.s
               *This\text\string.s = Text.s
               *this\TextChange( ) = #True
               result              = #True
               PostRepaint( *This\root )
            EndIf
         EndIf
         
         *this\WidgetChange( ) = 1
         
         ProcedureReturn result
      EndProcedure
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      ;-
      Declare tt_close( *this._s_tt )
      
      Procedure tt_Draw_Tree( *tt._s_tt, *color._s_color = 0 )
      EndProcedure
      
      Procedure tt_tree_callBack( )
      EndProcedure
      
      Procedure tt_creare( *this._s_WIDGET, X, Y )
      EndProcedure
      
      Procedure tt_close( *tt._s_tt )
      EndProcedure
      
      
      ;-
      Procedure.q ToPBFlag( Type, Flag.q )
         Protected flags.q = Flag
         
         Select Type
            Case #__type_Container
               If constants::BinaryFlag( Flag, #__flag_BorderLess )
                  flags & ~ #__flag_BorderLess
                  flags | #PB_Container_BorderLess
               EndIf
               If constants::BinaryFlag( Flag, #__flag_BorderFlat )
                  flags & ~ #__flag_BorderFlat
                  flags | #PB_Container_Flat
               EndIf
               If constants::BinaryFlag( Flag, #__flag_BorderSingle )
                  flags & ~ #__flag_BorderSingle
                  flags | #PB_Container_Single
               EndIf
               If constants::BinaryFlag( Flag, #__flag_BorderRaised )
                  flags & ~ #__flag_BorderRaised
                  flags | #PB_Container_Raised
               EndIf
               If constants::BinaryFlag( Flag, #__flag_BorderDouble ) 
                  flags & ~ #__flag_BorderDouble
                  flags | #PB_Container_Double
               EndIf
               
            Case #__type_Button
               If constants::BinaryFlag( Flag, #__flag_TextMultiLine ) 
                  flags & ~ #__flag_TextMultiLine
                  flag | #PB_Button_MultiLine
               EndIf
               If constants::BinaryFlag( Flag, #__flag_TextLeft ) 
                  flags & ~ #__flag_TextLeft
                  flags | #PB_Button_Left
               EndIf
               If constants::BinaryFlag( Flag, #__flag_TextRight ) 
                  flags & ~ #__flag_TextRight
                  flags | #PB_Button_Right
               EndIf
         EndSelect
         
         ProcedureReturn flags
      EndProcedure
      
      Procedure.q FromPBFlag( Type, Flag.q )
         Protected flags.q = Flag
         
         Select Type
            Case #__type_window
               If constants::BinaryFlag( Flag, #PB_Window_BorderLess )
                  flags & ~ #PB_Window_BorderLess
                  flags | #__flag_BorderLess
               EndIf
               ;
            Case #__type_Container
               ;                If constants::BinaryFlag( Flag, #PB_Container_BorderLess ) 
               ;                   flags & ~ #PB_Container_BorderLess
               ;                   flags = #__flag_BorderLess
               ;                EndIf
               If constants::BinaryFlag( Flag, #PB_Container_Flat )
                  flags & ~ #PB_Container_Flat
                  flags | #__flag_BorderFlat
               EndIf
               If constants::BinaryFlag( Flag, #PB_Container_Single )
                  flags & ~ #PB_Container_Single
                  flags | #__flag_BorderSingle
               EndIf
               If constants::BinaryFlag( Flag, #PB_Container_Raised ) 
                  flags & ~ #PB_Container_Raised
                  flags | #__flag_BorderRaised
               EndIf
               If constants::BinaryFlag( Flag, #PB_Container_Double )
                  flags & ~ #PB_Container_Double
                  flags | #__flag_BorderDouble
               EndIf
               ;
            Case #__type_Frame
               ;                If constants::BinaryFlag( Flag, #PB_Frame_BorderLess ) 
               ;                   flags & ~ #PB_Frame_BorderLess
               ;                   flags | #__flag_BorderLess
               ;                EndIf
               If constants::BinaryFlag( Flag, #PB_Frame_Flat )
                  flags & ~ #PB_Frame_Flat
                  flags | #__flag_BorderFlat
               EndIf
               If constants::BinaryFlag( Flag, #PB_Frame_Single )
                  flags & ~ #PB_Frame_Single
                  flags | #__flag_BorderSingle
               EndIf
               ;                If constants::BinaryFlag( Flag, #PB_Frame_Raised ) 
               ;                   flags & ~ #PB_Frame_Raised
               ;                   flags | #__flag_BorderRaised
               ;                EndIf
               If constants::BinaryFlag( Flag, #PB_Frame_Double )
                  flags & ~ #PB_Frame_Double
                  flags | #__flag_BorderDouble
               EndIf
               ;
            Case #__type_MDI
               If constants::BinaryFlag( Flag, #PB_MDI_AutoSize ) 
                  flags & ~ #PB_MDI_AutoSize
                  flags | #__flag_AutoSize
               EndIf
               If constants::BinaryFlag( Flag, #PB_MDI_BorderLess )
                  flags & ~ #PB_MDI_BorderLess
                  flags | #__flag_BorderLess
               EndIf
               ;
            Case #__type_CheckBox
               If constants::BinaryFlag( Flag, #PB_CheckBox_Right )
                  flags & ~ #PB_CheckBox_Right
                  flags | #__flag_TextRight
               EndIf
               If constants::BinaryFlag( Flag, #PB_CheckBox_Center )
                  flags & ~ #PB_CheckBox_Center
                  flags | #__flag_TextCenter
               EndIf
               ;
            Case #__type_Text
               If constants::BinaryFlag( Flag, #PB_Text_Center )
                  flags & ~ #PB_Text_Center
                  flags | #__flag_TextCenter
                  ;flags & ~ #__flag_TextLeft
               EndIf
               If constants::BinaryFlag( Flag, #PB_Text_Right )
                  flags & ~ #PB_Text_Right
                  flags | #__flag_TextRight
               EndIf
               ;
            Case #__type_Button ; ok
               If constants::BinaryFlag( Flag, #PB_Button_MultiLine ) 
                  flags & ~ #PB_Button_MultiLine
                  flags | #__flag_TextMultiLine
               EndIf
               If constants::BinaryFlag( Flag, #PB_Button_Left ) 
                  flags & ~ #PB_Button_Left
                  flags | #__flag_TextLeft
               EndIf
               If constants::BinaryFlag( Flag, #PB_Button_Right ) 
                  flags & ~ #PB_Button_Right
                  flags | #__flag_TextRight
               EndIf
               ;
            Case #__type_ComboBox ; ok
               If constants::BinaryFlag( Flag, #PB_ComboBox_LowerCase )
                  flags & ~ #PB_ComboBox_LowerCase
                  flags | #__flag_Textlowercase
               EndIf
               If constants::BinaryFlag( Flag, #PB_ComboBox_UpperCase ) 
                  flags & ~ #PB_ComboBox_UpperCase
                  flags | #__flag_Textuppercase
               EndIf
               ;
            Case #__type_String ; ok
               If constants::BinaryFlag( Flag, #PB_String_Password ) 
                  flags & ~ #PB_String_Password
                  flags | #__flag_Textpassword
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_LowerCase )
                  flags & ~ #PB_String_LowerCase
                  flags | #__flag_Textlowercase
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_UpperCase ) 
                  flags & ~ #PB_String_UpperCase
                  flags | #__flag_Textuppercase
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_BorderLess )
                  flags & ~ #PB_String_BorderLess
                  flags | #__flag_BorderLess
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_Numeric ) 
                  flags & ~ #PB_String_Numeric
                  flags | #__flag_Textnumeric
               EndIf
               If constants::BinaryFlag( Flag, #PB_String_ReadOnly )
                  flags & ~ #PB_String_ReadOnly
                  flags | #__flag_Textreadonly
               EndIf
               ;
            Case #__type_Editor
               If constants::BinaryFlag( Flag, #PB_Editor_ReadOnly ) 
                  flags & ~ #PB_Editor_ReadOnly
                  flags | #__flag_Textreadonly
               EndIf
               If constants::BinaryFlag( Flag, #PB_Editor_WordWrap ) 
                  flags & ~ #PB_Editor_WordWrap
                  flags | #__flag_Textwordwrap
               EndIf
               ;
            Case #__type_Tree
               If constants::BinaryFlag( Flag, #PB_Tree_AlwaysShowSelection ) 
                  flags & ~ #PB_Tree_AlwaysShowSelection
               EndIf
               If constants::BinaryFlag( Flag, #PB_Tree_CheckBoxes ) 
                  flags & ~ #PB_Tree_CheckBoxes
                  flags | #__flag_checkboxes
               EndIf
               If constants::BinaryFlag( Flag, #PB_Tree_ThreeState ) 
                  flags & ~ #PB_Tree_ThreeState
                  flags | #__flag_threestate
               EndIf
               If constants::BinaryFlag( Flag, #PB_Tree_NoButtons )
                  flags & ~ #PB_Tree_NoButtons
                  flags | #__flag_nobuttons
               EndIf
               If constants::BinaryFlag( Flag, #PB_Tree_NoLines ) 
                  flags & ~ #PB_Tree_NoLines
                  flags | #__flag_nolines
               EndIf
               ;   
            Case #__type_ListView ; Ok
               If constants::BinaryFlag( Flag, #PB_ListView_ClickSelect ) 
                  flags & ~ #PB_ListView_ClickSelect
                  flags | #__flag_RowClickSelect
               EndIf
               If constants::BinaryFlag( Flag, #PB_ListView_MultiSelect ) 
                  flags & ~ #PB_ListView_MultiSelect
                  flags | #__flag_RowMultiSelect
               EndIf
               ;  
            Case #__type_listicon
               If constants::BinaryFlag( Flag, #PB_ListIcon_AlwaysShowSelection ) 
                  flags & ~ #PB_ListIcon_AlwaysShowSelection
               EndIf
               If constants::BinaryFlag( Flag, #PB_ListIcon_CheckBoxes )
                  flags & ~ #PB_ListIcon_CheckBoxes
                  flags | #__flag_checkboxes
               EndIf
               If constants::BinaryFlag( Flag, #PB_ListIcon_ThreeState )
                  flags & ~ #PB_ListIcon_ThreeState
                  flags | #__flag_threestate
               EndIf
               
         EndSelect
         
         ProcedureReturn flags
      EndProcedure
      
      Procedure.q Flag( *this._s_WIDGET, flag.q = #Null, state.b = #PB_Default )
         Protected result.q
         ;
         Protected string_bar = Bool( *this\type = #__type_Text Or
                                      *this\type = #__type_Editor Or
                                      *this\type = #__type_String Or
                                      *this\type = #__type_ButtonImage Or
                                      *this\type = #__type_Button Or
                                      *this\type = #__type_Option Or
                                      *this\type = #__type_Spin Or
                                      *this\type = #__type_Hyperlink Or
                                      *this\type = #__type_ComboBox Or
                                      *this\type = #__type_CheckBox )
         ;
         Protected list_bar = Bool( *this\type = #__type_Tree Or
                                    *this\type = #__type_ListIcon Or
                                    *this\type = #__type_ListView Or
                                    *this\type = #__type_Properties )
         
         Protected Container = Bool( *this\type = #__type_Container Or
                                     *this\type = #__type_Panel Or
                                     *this\type = #__type_ScrollArea Or
                                     *this\type = #__type_Frame )
         Container = Bool(*this\type = #__type_Container)
         ;
         ;\\ get widget flags
         If Not flag
            ;result = *this\flag
            result = ToPBFlag( *this\type, *this\flag )
         Else
            ;\\ replace pb flag
            flag = FromPBFlag( *this\type, flag )
            
            ;\\ is flag on the widget
            If state = #PB_Default
               result = Bool( *this\flag & flag = flag )
            Else
               state = Bool( state )
               
               ;\\ set & remove flags
               If state
                  *this\flag | flag
               Else
                  *this\flag & ~ flag
               EndIf
               
               ;\\ text align
               If string_bar
                  *this\WidgetChange( ) = 1
                  *this\TextChange( ) = 1
                  ; 
                  If constants::BinaryFlag( Flag, #__flag_TextInvert )
                     *this\text\invert = state
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_TextVertical )
                     *this\text\vertical = state
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_Textwordwrap )
                     *this\text\multiline = - state
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_Textmultiline )
                     *this\text\multiline = state
                  EndIf
                  ;
                  If constants::BinaryFlag( Flag, #__flag_TextLeft )
                     *this\text\align\left = state
                     ;
                     If Not *this\text\align\left 
                        If constants::BinaryFlag( *this\flag, #__flag_TextRight )
                           *this\text\align\right = #True
                        EndIf
                     EndIf
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_TextTop )
                     *this\text\align\top = state
                     ;
                     If Not *this\text\align\top 
                        If constants::BinaryFlag( *this\flag, #__flag_TextBottom )
                           *this\text\align\bottom = #True
                        EndIf
                     EndIf
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_TextRight )
                     *this\text\align\right = state
                     ;
                     If Not *this\text\align\right 
                        If constants::BinaryFlag( *this\flag, #__flag_TextLeft )
                           *this\text\align\left = #True
                        EndIf
                     EndIf
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_TextBottom )
                     *this\text\align\bottom = state
                     ;
                     If Not *this\text\align\bottom 
                        If constants::BinaryFlag( *this\flag, #__flag_TextTop )
                           *this\text\align\top = #True
                        EndIf
                     EndIf
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_TextCenter )
                     *this\text\align\left   = #False
                     *this\text\align\top    = #False
                     *this\text\align\right  = #False
                     *this\text\align\bottom = #False
                  EndIf
                  ;
                  ;\\0в ,
                  If *this\type = #__type_ButtonImage Or
                     *this\type = #__type_Button
                     ; set toggle button
                     If constants::BinaryFlag( flag, #PB_Button_Toggle )
                        If constants::BinaryFlag( *this\Flag, #PB_Button_Toggle )
                           If Not *this\togglebox
                              *this\togglebox.allocate( BOX )
                           EndIf
                           ;
                           *this\togglebox\checked = state
                           ;
                           If state
                              *this\ColorState( ) = #__s_2
                           Else
                              *this\ColorState( ) = #__s_0
                           EndIf
                        EndIf
                     Else
                        If *this\togglebox
                           *this\togglebox = #Null
                           *this\ColorState( ) = #__s_0
                        EndIf
                     EndIf
                     
                     ;\\ reset to center vertical
                     If *this\text\align\top = #True And
                        *this\text\align\bottom = #True
                        ;
                        *this\text\align\top    = #False
                        *this\text\align\bottom = #False
                     EndIf
                     
                     ;\\ reset to center horizontal
                     If *this\text\align\left = #True And
                        *this\text\align\right = #True
                        ;
                        *this\text\align\left  = #False
                        *this\text\align\right = #False
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               If list_bar
                  If constants::BinaryFlag( Flag, #__flag_RowClickSelect )
                     *this\mode\clickSelect = 1
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_RowMultiSelect )
                     *this\mode\multiSelect = 1
                  EndIf
                  
                  If constants::BinaryFlag( Flag, #__flag_nolines )
                     *this\mode\Lines = state
                  EndIf
                  
                  If constants::BinaryFlag( Flag, #__flag_nobuttons )
                     *this\mode\Buttons = state
                     
                     If constants::BinaryFlag( *this\flag, #__flag_optionboxes )
                        If *this\countitems
                           PushListPosition( *this\__rows( ))
                           ForEach *this\__rows( )
                              If *this\__rows( )\RowParent( ) And
                                 *this\__rows( )\RowParent( )\childrens
                                 *this\__rows( )\sublevel = state
                              EndIf
                           Next
                           PopListPosition( *this\__rows( ))
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
                  If constants::BinaryFlag( Flag, #__flag_optionboxes )
                     *this\mode\optionboxes = state
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_checkboxes ) 
                     *this\mode\checkboxes = state
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_threestate ) 
                     If *this\mode\checkboxes
                        *this\mode\threestate = state
                     EndIf
                  EndIf
                  
                  ; Debug "flag "+*this\mode\checkboxes +" "+ *this\mode\optionboxes +" "+ *this\mode\threestate
                  
                  ;\\
                  If constants::BinaryFlag( Flag, #__flag_gridLines ) 
                     If state 
                        *this\mode\gridlines = DPIScaled(1)
                        *this\mode\gridlines + Bool( *this\mode\gridlines % 2 )
                        *this\lineColor = $FFC0C0C0
                     Else
                        *this\mode\gridlines = 0
                        *this\lineColor = 0
                     EndIf
                  EndIf
                  If constants::BinaryFlag( Flag, #__flag_collapsed ) 
                     *this\mode\collapsed = state
                     
                     If *this\countitems
                        PushListPosition( *this\__rows( ))
                        ForEach *this\__rows( )
                           If *this\__rows( )\RowParent( )
                              *this\__rows( )\RowParent( )\buttonbox\checked = state
                              *this\__rows( )\hide                           = state
                           EndIf
                        Next
                        PopListPosition( *this\__rows( ))
                     EndIf
                  EndIf
                  
                  
                  If ( *this\mode\lines Or *this\mode\buttons )
                     *this\row\sublevelsize = DPIScaled( #__sublevelsize )
                  Else
                     *this\row\sublevelsize = 0
                  EndIf
                  
                  If *this\countitems
                     *this\WidgetChange( ) = 1
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.s MakeFlagsString( Type ) ; 
         Protected result$
         
         Select Type
            Case #__Type_Window        
               ;{- Ok
               result$ = "#PB_Window_NoGadgets|"+
                         "#PB_Window_NoActivate|"+
                         "#PB_Window_ScreenCentered|"+
                         "#PB_Window_WindowCentered|"+
                         "#PB_Window_SizeGadget|"+
                         "#PB_Window_Tool|"+
                         "#PB_Window_TitleBar|"+
                         "#PB_Window_BorderLess|"+
                         "#PB_Window_SystemMenu|"+
                         "#PB_Window_MaximizeGadget|"+
                         "#PB_Window_MinimizeGadget|"+
                         "#PB_Window_Normal|"+
                         "#PB_Window_Minimize|"+
                         "#PB_Window_Maximize|"+
                         "#PB_Window_Invisible"
               
               ;}
               
            Case #__Type_Button         
               ;{- Ok
               result$ = "#PB_Button_Default|"+
                         "#PB_Button_Toggle|"+
                         "#PB_Button_MultiLine|"+
                         "#PB_Button_Left|"+
                         "#PB_Button_Center|"+
                         "#PB_Button_Right"
               
               
               ;}
               
            Case #__Type_String         
               ;{- Ok
               result$ = "#PB_String_BorderLess|"+
                         "#PB_String_Numeric|"+
                         "#PB_String_Password|"+
                         "#PB_String_ReadOnly|"+
                         "#PB_String_LowerCase|"+
                         "#PB_String_UpperCase"
               
               ;}
               
            Case #__Type_Text           
               ;{- Ok
               result$ = "#PB_Text_Border|"+
                         "#PB_Text_Left|"+
                         "#PB_Text_Center|"+
                         "#PB_Text_Right"
               
               ;}
               
            Case #__Type_CheckBox       
               ;{- Ok
               result$ = "#PB_CheckBox_ThreeState|"+
                         "#PB_CheckBox_Center|"+
                         "#PB_CheckBox_Right"
               
               ;}
               
            Case #__Type_Option         
               result$ = ""
               
            Case #__Type_ListView       
               ;{- Ok
               result$ = "#PB_ListView_Multiselect|"+
                         "#PB_ListView_ClickSelect"
               ;}
               
            Case #__Type_Frame          
               ;{- Ok
               result$ = "#PB_Frame_Single|"+
                         "#PB_Frame_Double|"+
                         "#PB_Frame_Flat"
               ;}
               
            Case #__Type_ComboBox       
               ;{- Ok
               result$ = "#PB_ComboBox_Editable|"+
                         "#PB_ComboBox_LowerCase|"+
                         "#PB_ComboBox_UpperCase|"+
                         "#PB_ComboBox_Image"
               ;}
               
            Case #__type_image          
               ;{- Ok
               result$ = "#PB_image_Border|"+
                         "#PB_image_Raised"
               ;}
               
            Case #__Type_HyperLink      
               ;{- Ok
               result$ = "#PB_Hyperlink_Underline"
               ;}
               
            Case #__Type_Container      
               ;{- Ok
               result$ = "#PB_Container_BorderLess|"+
                         "#PB_Container_Flat|"+
                         "#PB_Container_Raised|"+
                         "#PB_Container_Single|"+
                         "#PB_Container_Double"
               ;}
               
            Case #__Type_ListIcon       
               ;{- Ok
               result$ = "#PB_ListIcon_CheckBoxes|"+
                         "#PB_ListIcon_ThreeState|"+
                         "#PB_ListIcon_MultiSelect|"+
                         "#PB_ListIcon_GridLines|"+
                         "#PB_ListIcon_FullRowSelect|"+
                         "#PB_ListIcon_HeaderDragDrop|"+
                         "#PB_ListIcon_AlwaysShowSelection"
               ;}
               
            Case #__Type_IPAddress      
               result$ = ""
               
            Case #__type_Progress    
               ;{- Ok
               result$ = "#PB_ProgressBar_Smooth|"+
                         "#PB_ProgressBar_Vertical"
               ;}
               
            Case #__type_Scroll      
               ;{- Ok
               result$ = "#PB_ScrollBar_Vertical"
               ;}
               
            Case #__Type_ScrollArea     
               ;{- Ok
               result$ = "#PB_ScrollArea_Flat|"+
                         "#PB_ScrollArea_Raised|"+
                         "#PB_ScrollArea_Single|"+
                         "#PB_ScrollArea_BorderLess|"+
                         "#PB_ScrollArea_Center"
               ;}
               
            Case #__type_Track       
               ;{- Ok
               result$ = "#PB_TrackBar_Ticks|"+
                         "#PB_TrackBar_Vertical"
               ;}
               
            Case #__Type_Web            
               result$ = ""
               
            Case #__Type_ButtonImage    
               ;{- Ok
               result$ = "#PB_Button_Toggle"
               ;}
               
            Case #__Type_Calendar       
               ;{- Ok
               result$ = "#PB_Calendar_Borderless"
               ;}
               
            Case #__Type_Date           
               ;{- Ok
               result$ = "#PB_Date_UpDown"
               ;}
               
            Case #__Type_Editor         
               ;{- Ok
               result$ = "#PB_Editor_ReadOnly|"+
                         "#PB_Editor_WordWrap"
               ;}
               
            Case #__Type_ExplorerList   
               result$ = "#PB_Explorer_BorderLess|"+          ; Создать Гаджет без границ.
                         "#PB_Explorer_AlwaysShowSelection|"+ ; Выделение отображается даже если Гаджет не активирован.
                         "#PB_Explorer_MultiSelect|"+         ; Разрешить множественное выделение элементов в Гаджете.
                         "#PB_Explorer_GridLines|"+           ; Отображать разделительные линии между строками и колонками.
                         "#PB_Explorer_HeaderDragDrop|"+      ; В режиме таблицы заголовки можно перетаскивать (Drag'n'Drop).
                         "#PB_Explorer_FullRowSelect|"+       ; Выделение охватывает всю строку, а не первую колонку.
                         "#PB_Explorer_NoFiles|"+             ; Не показывать файлы.
                         "#PB_Explorer_NoFolders|"+           ; Не показывать каталоги.
                         "#PB_Explorer_NoParentFolder|"+      ; Не показывать ссылку на родительский каталог [..].
                         "#PB_Explorer_NoDirectoryChange|"+   ; Пользователь не может сменить директорию.
                         "#PB_Explorer_NoDriveRequester|"+    ; Не показывать запрос 'пожалуйста, вставьте диск X;'.
                         "#PB_Explorer_NoSort|"+              ; Пользователь не может сортировать содержимое по клику на заголовке колонки.
                         "#PB_Explorer_NoMyDocuments|"+       ; Не показывать каталог 'Мои документы' в виде отдельного элемента.
                         "#PB_Explorer_AutoSort|"+            ; Содержимое автоматически упорядочивается по имени.
                         "#PB_Explorer_HiddenFiles"           ; Будет отображать скрытые файлы (поддерживается только в Linux и OS X).
               
            Case #__Type_ExplorerTree   
               result$ = "#PB_Explorer_BorderLess|"+          ; Создать Гаджет без границ.
                         "#PB_Explorer_AlwaysShowSelection|"+ ; Выделение отображается даже если Гаджет не активирован.
                         "#PB_Explorer_NoLines|"+             ; Скрыть линии, соединяющие узлы дерева.
                         "#PB_Explorer_NoButtons|"+           ; Скрыть кнопки разворачивания узлов в виде символов '+'.
                         "#PB_Explorer_NoFiles|"+             ; Не показывать файлы.
                         "#PB_Explorer_NoDriveRequester|"+    ; Не показывать запрос 'пожалуйста, вставьте диск X:'.
                         "#PB_Explorer_NoMyDocuments|"+       ; Не показывать каталог 'Мои документы' в виде отдельного элемента.
                         "#PB_Explorer_AutoSort"              ; Содержимое автоматически упорядочивается по имени.
               
            Case #__Type_ExplorerCombo  
               result$ = "#PB_Explorer_DrivesOnly|"+          ; Гаджет будет отображать только диски, которые вы можете выбрать.
                         "#PB_Explorer_Editable|"+            ; Гаджет будет доступен для редактирования с функцией автозаполнения.                   С этим флагом он действует точно так же, как тот что в Windows Explorer.
                         "#PB_Explorer_NoMyDocuments"         ; Папка "Мои документы" не будет отображаться как отдельный элемент.
               
            Case #__Type_Spin           
               result$ = ""
               
            Case #__Type_Tree           
               ;{- Ok
               result$ = "#PB_Tree_AlwaysShowSelection|"+
                         "#PB_Tree_NoLines|"+
                         "#PB_Tree_NoButtons|"+
                         "#PB_Tree_CheckBoxes|"+
                         "#PB_Tree_ThreeState"
               ;}
               
            Case #__Type_Panel          
               result$ = ""
               
            Case #__Type_Splitter       
               ;{- Ok
               result$ = "#PB_Splitter_Vertical|"+
                         "#PB_Splitter_Separator|"+
                         "#PB_Splitter_FirstFixed|"+
                         "#PB_Splitter_SecondFixed" 
               ;}
               
               CompilerIf #PB_Compiler_OS = #PB_OS_Windows
               Case #__Type_MDI           
                  result$ = ""
               CompilerEndIf
               
            Case #__Type_Scintilla      
               result$ = ""
               
               ;       Case #__Type_Shortcut       
               ;         result$ = ""
               ;         
               ;       Case #__Type_Canvas 
               ;         ;{- Ok
               ;         result$ = "#PB_Canvas_Border|"+
               ;                   "#PB_Canvas_Container|"+
               ;                   "#PB_Canvas_ClipMouse|"+
               ;                   "#PB_Canvas_Keyboard|"+
               ;                   "#PB_Canvas_DrawFocus"
               
               
         EndSelect
         
         ProcedureReturn result$
      EndProcedure
      
      Procedure$  MakeStringConstants( string$ )
         Protected i, result$, count, str$
         
         If string$
            count = CountString(string$,"|")
            For I = 0 To count
               str$ = Trim(StringField(string$,(I+1),"|"))
               
               Select str$
                  Case "#PB_Compiler_File"      : result$ = #PB_Compiler_File  
                  Case "#PB_Compiler_FilePath"  : result$ = #PB_Compiler_FilePath  
                  Case "#PB_Compiler_Filename"  : result$ = #PB_Compiler_Filename  
                  Case "#PB_Compiler_Home"      : result$ = ReplaceString( #PB_Compiler_Home, "\", "/")   
                  Case "#PB_Compiler_Module"    : result$ = #PB_Compiler_Module  
                  Case "#PB_Compiler_Procedure" : result$ = #PB_Compiler_Procedure  
               EndSelect
               
            Next
         EndIf
         
         ProcedureReturn result$
      EndProcedure
      
      Procedure$  MakeConstantsString( type$, flag.q ) ; 
         Protected result$
         
         If flag
            Select type$
               Case "Font"
                  If flag & #PB_Font_Bold        : result$ + " #PB_Font_Bold |" : EndIf
                  If flag & #PB_Font_Italic      : result$ + " #PB_Font_Italic |" : EndIf
                  If flag & #PB_Font_Underline   : result$ + " #PB_Font_Underline |" : EndIf
                  If flag & #PB_Font_StrikeOut   : result$ + " #PB_Font_StrikeOut |" : EndIf
                  If flag & #PB_Font_HighQuality : result$ + " #PB_Font_HighQuality |" : EndIf
                  
               Case "String"
                  If flag & #PB_String_Password     : result$ + " #PB_String_Password |" : EndIf
                  If flag & #PB_String_Numeric      : result$ + " #PB_String_Numeric |" : EndIf
                  If flag & #PB_String_LowerCase    : result$ + " #PB_String_LowerCase |" : EndIf
                  If flag & #PB_String_UpperCase    : result$ + " #PB_String_UpperCase |" : EndIf
                  If flag & #PB_String_ReadOnly     : result$ + " #PB_String_ReadOnly |" : EndIf
                  If flag & #PB_String_BorderLess   : result$ + " #PB_String_BorderLess |" : EndIf
                  
               Case "Text"
                  If flag & #PB_Text_Center     : result$ + " #PB_Text_Center |" : EndIf
                  If flag & #PB_Text_Right      : result$ + " #PB_Text_Right |" : EndIf
                  If flag & #PB_Text_Border     : result$ + " #PB_Text_Border |" : EndIf
                  
               Case "Button"
                  If flag & #PB_Button_Left      : result$ + " #PB_Button_Left |" : EndIf
                  If flag & #PB_Button_Right     : result$ + " #PB_Button_Right |" : EndIf
                  If flag & #PB_Button_Toggle    : result$ + " #PB_Button_Toggle |" : EndIf
                  If flag & #PB_Button_Default   : result$ + " #PB_Button_Default |" : EndIf
                  If flag & #PB_Button_MultiLine : result$ + " #PB_Button_MultiLine |" : EndIf
                  
               Case "CheckBox"
                  If flag & #PB_CheckBox_Center    : result$ + " #PB_CheckBox_Center |" : EndIf
                  If flag & #PB_CheckBox_Right     : result$ + " #PB_CheckBox_Right |" : EndIf
                  
               Case "Container"
                  If flag & #PB_Container_Flat       : result$ + " #PB_Container_Flat |" : EndIf
                  If flag & #PB_Container_Raised     : result$ + " #PB_Container_Raised |" : EndIf
                  If flag & #PB_Container_Single     : result$ + " #PB_Container_Single |" : EndIf
                  If flag & #PB_Container_BorderLess : result$ + " #PB_Container_BorderLess |" : EndIf
                  
               Case "ScrollArea"
                  If flag & #PB_ScrollArea_Flat       : result$ + " #PB_ScrollArea_Flat |" : EndIf
                  If flag & #PB_ScrollArea_Raised     : result$ + " #PB_ScrollArea_Raised |" : EndIf
                  If flag & #PB_ScrollArea_Single     : result$ + " #PB_ScrollArea_Single |" : EndIf
                  If flag & #PB_ScrollArea_BorderLess : result$ + " #PB_ScrollArea_BorderLess |" : EndIf
                  If flag & #PB_ScrollArea_Center     : result$ + " #PB_ScrollArea_Center |" : EndIf
                  
               Case "Splitter"
                  If flag & #PB_Splitter_Vertical    : result$ + " #PB_Splitter_Vertical |" : EndIf
                  If flag & #PB_Splitter_Separator   : result$ + " #PB_Splitter_Separator |" : EndIf
                  If flag & #PB_Splitter_FirstFixed  : result$ + " #PB_Splitter_FirstFixed |" : EndIf
                  If flag & #PB_Splitter_SecondFixed : result$ + " #PB_Splitter_SecondFixed |" : EndIf
                  
               Case "ComboBox"
                  If flag & #PB_ComboBox_Image       : result$ + " #PB_ComboBox_Image |" : EndIf
                  If flag & #PB_ComboBox_Editable    : result$ + " #PB_ComboBox_Editable |" : EndIf
                  If flag & #PB_ComboBox_LowerCase   : result$ + " #PB_ComboBox_LowerCase |" : EndIf
                  If flag & #PB_ComboBox_UpperCase   : result$ + " #PB_ComboBox_UpperCase |" : EndIf
                  
               Case "Window"
                  If flag & #PB_Window_SystemMenu
                     flag &~ #PB_Window_SystemMenu
                     result$ + " #PB_Window_SystemMenu |"
                  EndIf
                  If flag & #PB_Window_SizeGadget
                     ;flag &~ #PB_Window_SizeGadget
                     result$ + " #PB_Window_SizeGadget |"
                  EndIf
                  If flag & #PB_Window_ScreenCentered
                     result$ + " #PB_Window_ScreenCentered |"
                  EndIf
                  If flag & #PB_Window_Invisible
                     result$ + " #PB_Window_Invisible |"
                  EndIf
                  ;          If flag & #PB_Window_MaximizeGadget
                  ;             ;flag &~ #PB_Window_MaximizeGadget
                  ;             result$ + " #PB_Window_MaximizeGadget |"
                  ;          EndIf
                  ;          If flag & #PB_Window_MinimizeGadget
                  ;             ;flag &~ #PB_Window_MinimizeGadget
                  ;             result$ + " #PB_Window_MinimizeGadget |"
                  ;          EndIf
                  ;          If flag & #PB_Window_NoActivate = #PB_Window_NoActivate
                  ;             result$ + " #PB_Window_NoActivate |"
                  ;          EndIf
                  If flag & #PB_Window_BorderLess
                     result$ + " #PB_Window_BorderLess |"
                  EndIf
                  If flag & #PB_Window_NoGadgets
                     result$ + " #PB_Window_NoGadgets |"
                  EndIf
                  If flag & #PB_Window_TitleBar = #PB_Window_TitleBar
                     result$ + " #PB_Window_TitleBar |"
                  EndIf
                  If flag & #PB_Window_Tool 
                     result$ + " #PB_Window_Tool |" 
                  EndIf
                  If flag & #PB_Window_WindowCentered 
                     result$ + " #PB_Window_WindowCentered |" 
                  EndIf
                  
            EndSelect
            
            If constants::BinaryFlag( flag, #__flag_Transparent )          
               result$ + " #__flag_Transparent |" 
            EndIf
            
            Select type$
               Case "Container", "ScrollArea"
                  If flag & #__flag_BorderFlat = #__flag_BorderFlat     : result$ + " #PB_" + type$ + "_Flat |" : EndIf
                  If flag & #__flag_BorderRaised = #__flag_BorderRaised : result$ + " #PB_" + type$ + "_Raised |" : EndIf
                  If flag & #__flag_BorderSingle = #__flag_BorderSingle : result$ + " #PB_" + type$ + "_Single |" : EndIf
                  If flag & #__flag_BorderLess = #__flag_BorderLess     : result$ + " #PB_" + type$ + "_BorderLess |" : EndIf
                  
                  If type$ = "ScrollArea"
                     If flag & #__flag_Center = #__flag_Center            : result$ + " #PB_ScrollArea_Center |" : EndIf
                  EndIf
                  
               Case "Button", "Text", "CheckBox"
                  If flag & #__align_image = #__align_image
                     If flag & #__flag_ImageLeft = #__flag_ImageLeft           : result$ + " #__flag_ImageLeft |" : EndIf
                     If flag & #__flag_ImageTop = #__flag_ImageTop             : result$ + " #__flag_ImageTop |" : EndIf
                     If flag & #__flag_ImageRight = #__flag_ImageRight         : result$ + " #__flag_ImageRight |" : EndIf
                     If flag & #__flag_ImageBottom = #__flag_ImageBottom       : result$ + " #__flag_ImageBottom |" : EndIf
                  Else
                     If flag & #__align_text 
                        If flag & #__flag_TextLeft = #__flag_TextLeft           : result$ + " #__flag_TextLeft |" : EndIf
                        If flag & #__flag_TextRight = #__flag_TextRight         : result$ + " #__flag_TextRight |" : EndIf
                        If flag & #__flag_TextWordWrap = #__flag_TextWordWrap   : result$ + " #__flag_TextWordWrap |" : EndIf
                        If flag & #__flag_TextMultiLine = #__flag_TextMultiLine : result$ + " #__flag_TextMultiLine |" : EndIf
                        If flag & #__flag_button_Default = #__flag_button_Default : result$ + " #__flag_button_Default |" : EndIf
                     EndIf
                  EndIf
                  
                  
            EndSelect
            
         EndIf
         
         ProcedureReturn Trim( Trim(result$), "|" )
      EndProcedure
      
      Procedure.q MakeConstants( string$ )
         Protected i, Flag.q, count, str$
         
         If string$
            count = CountString(string$,"|")
            For I = 0 To count
               str$ = Trim(StringField(string$,(I+1),"|"))
               
               Select str$
                     ;
                     ;                   Case "PB_" : result$ = #PB_Compiler_File  
                     ;                   Case "PB_" : result$ = #PB_Compiler_FilePath  
                     ;                   Case "PB_" : result$ = #PB_Compiler_Filename  
                     ;                   Case "PB_" : result$ = #PB_Compiler_Home  
                     ;                   Case "PB_" : result$ = #PB_Compiler_Module  
                     ;                   Case "PB_" : result$ = #PB_Compiler_Procedure  
                  Case "#PB_Compiler_DLL"                   : Flag = Flag | #PB_Compiler_DLL  
                  Case "#PB_Compiler_Date"                  : Flag = Flag | #PB_Compiler_Date  
                  Case "#PB_Compiler_Debugger"              : Flag = Flag | #PB_Compiler_Debugger  
                  Case "#PB_Compiler_EnableExplicit"        : Flag = Flag | #PB_Compiler_EnableExplicit  
                  Case "#PB_Compiler_EnumerationValue"      : Flag = Flag | #PB_Compiler_EnumerationValue  
                  Case "#PB_Compiler_Executable"            : Flag = Flag | #PB_Compiler_Executable  
                  Case "#PB_Compiler_ExecutableFormat"      : Flag = Flag | #PB_Compiler_ExecutableFormat  
                  Case "#PB_Compiler_InlineAssembly"        : Flag = Flag | #PB_Compiler_InlineAssembly  
                  Case "#PB_Compiler_IsIncludeFile"         : Flag = Flag | #PB_Compiler_IsIncludeFile  
                  Case "#PB_Compiler_IsMainFile"            : Flag = Flag | #PB_Compiler_IsMainFile  
                  Case "#PB_Compiler_Line"                  : Flag = Flag | #PB_Compiler_Line  
                  Case "#PB_Compiler_LineNumbering"         : Flag = Flag | #PB_Compiler_LineNumbering  
                  Case "#PB_Compiler_OS"                    : Flag = Flag | #PB_Compiler_OS 
                  Case "#PB_Compiler_Processor"             : Flag = Flag | #PB_Compiler_Processor  
                  Case "#PB_Compiler_Thread"                : Flag = Flag | #PB_Compiler_Thread  
                  Case "#PB_Compiler_Unicode"               : Flag = Flag | #PB_Compiler_Unicode 
                  Case "#PB_Compiler_Version"               : Flag = Flag | #PB_Compiler_Version  
                     ;
                  Case "#True"                              : Flag = Flag | #True
                  Case "#False"                             : Flag = Flag | #False
                     ; font
                  Case "#PB_Font_Bold"                      : Flag = Flag | #PB_Font_Bold 
                  Case "#PB_Font_Italic"                    : Flag = Flag | #PB_Font_Italic 
                  Case "#PB_Font_StrikeOut"                 : Flag = Flag | #PB_Font_StrikeOut  
                  Case "#PB_Font_Underline"                 : Flag = Flag | #PB_Font_Underline  
                  Case "#PB_Font_HighQuality"               : Flag = Flag | #PB_Font_HighQuality  
                  Case "#PB_FontRequester_Effects"          : Flag = Flag | #PB_FontRequester_Effects  
                     ; color
                  Case "#PB_Gadget_FrontColor"              : Flag = Flag | #PB_Gadget_FrontColor
                  Case "#PB_Gadget_BackColor"               : Flag = Flag | #PB_Gadget_BackColor 
                  Case "#PB_Gadget_LineColor"               : Flag = Flag | #PB_Gadget_LineColor 
                  Case "#PB_Gadget_TitleFrontColor"         : Flag = Flag | #PB_Gadget_TitleFrontColor
                  Case "#PB_Gadget_TitleBackColor"          : Flag = Flag | #PB_Gadget_TitleBackColor 
                  Case "#PB_Gadget_GrayTextColor"           : Flag = Flag | #PB_Gadget_GrayTextColor 
                     ; window
                  Case "#PB_Window_BorderLess"              : Flag = Flag | #PB_Window_BorderLess
                  Case "#PB_Window_Invisible"               : Flag = Flag | #PB_Window_Invisible
                  Case "#PB_Window_Maximize"                : Flag = Flag | #PB_Window_Maximize
                  Case "#PB_Window_Minimize"                : Flag = Flag | #PB_Window_Minimize
                  Case "#PB_Window_MaximizeGadget"          : Flag = Flag | #PB_Window_MaximizeGadget
                  Case "#PB_Window_MinimizeGadget"          : Flag = Flag | #PB_Window_MinimizeGadget
                  Case "#PB_Window_NoActivate"              : Flag = Flag | #PB_Window_NoActivate
                  Case "#PB_Window_NoGadgets"               : Flag = Flag | #PB_Window_NoGadgets
                  Case "#PB_Window_SizeGadget"              : Flag = Flag | #PB_Window_SizeGadget
                  Case "#PB_Window_SystemMenu"              : Flag = Flag | #PB_Window_SystemMenu
                  Case "#PB_Window_TitleBar"                : Flag = Flag | #PB_Window_TitleBar
                  Case "#PB_Window_Tool"                    : Flag = Flag | #PB_Window_Tool
                  Case "#PB_Window_ScreenCentered"          : Flag = Flag | #PB_Window_ScreenCentered
                  Case "#PB_Window_WindowCentered"          : Flag = Flag | #PB_Window_WindowCentered
                     ; buttonimg 
                  Case "#PB_Button_image"                   : Flag = Flag | #PB_Button_Image
                  Case "#PB_Button_Pressedimage"            : Flag = Flag | #PB_Button_PressedImage
                     ; button  
                  Case "#PB_Button_Default"                 : Flag = Flag | #PB_Button_Default
                  Case "#PB_Button_Left"                    : Flag = Flag | #PB_Button_Left
                  Case "#PB_Button_MultiLine"               : Flag = Flag | #PB_Button_MultiLine
                  Case "#PB_Button_Right"                   : Flag = Flag | #PB_Button_Right
                  Case "#PB_Button_Toggle"                  : Flag = Flag | #PB_Button_Toggle
                     ; string
                  Case "#PB_String_BorderLess"              : Flag = Flag | #PB_String_BorderLess
                  Case "#PB_String_LowerCase"               : Flag = Flag | #PB_String_LowerCase
                  Case "#PB_String_MaximumLength"           : Flag = Flag | #PB_String_MaximumLength
                  Case "#PB_String_Numeric"                 : Flag = Flag | #PB_String_Numeric
                  Case "#PB_String_Password"                : Flag = Flag | #PB_String_Password
                  Case "#PB_String_ReadOnly"                : Flag = Flag | #PB_String_ReadOnly
                  Case "#PB_String_UpperCase"               : Flag = Flag | #PB_String_UpperCase
                     ; text
                  Case "#PB_Text_Border"                    : Flag = Flag | #PB_Text_Border
                  Case "#PB_Text_Center"                    : Flag = Flag | #PB_Text_Center
                  Case "#PB_Text_Right"                     : Flag = Flag | #PB_Text_Right
                     ; option
                     ; checkbox
                  Case "#PB_CheckBox_ThreeState"            : Flag = Flag | #PB_CheckBox_ThreeState
                  Case "#PB_CheckBox_Center"                : Flag = Flag | #PB_CheckBox_Center
                  Case "#PB_CheckBox_Right"                 : Flag = Flag | #PB_CheckBox_Right
                     ; listview
                  Case "#PB_ListView_ClickSelect"           : Flag = Flag | #PB_ListView_ClickSelect
                  Case "#PB_ListView_MultiSelect"           : Flag = Flag | #PB_ListView_MultiSelect
                     ; frame
                  Case "#PB_Frame_Double"                   : Flag = Flag | #PB_Frame_Double
                  Case "#PB_Frame_Flat"                     : Flag = Flag | #PB_Frame_Flat
                  Case "#PB_Frame_Single"                   : Flag = Flag | #PB_Frame_Single
                     ; combobox
                  Case "#PB_ComboBox_Editable"              : Flag = Flag | #PB_ComboBox_Editable
                  Case "#PB_ComboBox_Image"                 : Flag = Flag | #PB_ComboBox_Image
                  Case "#PB_ComboBox_LowerCase"             : Flag = Flag | #PB_ComboBox_LowerCase
                  Case "#PB_ComboBox_UpperCase"             : Flag = Flag | #PB_ComboBox_UpperCase
                     ; img 
                  Case "#PB_image_Border"                   : Flag = Flag | #PB_Image_Border
                  Case "#PB_image_Raised"                   : Flag = Flag | #PB_Image_Raised
                     ; hyperlink 
                  Case "#PB_HyperLink_Underline"            : Flag = Flag | #PB_HyperLink_Underline
                     ; container 
                  Case "#PB_Container_BorderLess"           : Flag = Flag | #PB_Container_BorderLess
                  Case "#PB_Container_Double"               : Flag = Flag | #PB_Container_Double
                  Case "#PB_Container_Flat"                 : Flag = Flag | #PB_Container_Flat
                  Case "#PB_Container_Raised"               : Flag = Flag | #PB_Container_Raised
                  Case "#PB_Container_Single"               : Flag = Flag | #PB_Container_Single
                     ; listicon
                  Case "#PB_ListIcon_AlwaysShowSelection"   : Flag = Flag | #PB_ListIcon_AlwaysShowSelection
                  Case "#PB_ListIcon_CheckBoxes"            : Flag = Flag | #PB_ListIcon_CheckBoxes
                  Case "#PB_ListIcon_ColumnWidth"           : Flag = Flag | #PB_ListIcon_ColumnWidth
                  Case "#PB_ListIcon_DisplayMode"           : Flag = Flag | #PB_ListIcon_DisplayMode
                  Case "#PB_ListIcon_GridLines"             : Flag = Flag | #PB_ListIcon_GridLines
                  Case "#PB_ListIcon_FullRowSelect"         : Flag = Flag | #PB_ListIcon_FullRowSelect
                  Case "#PB_ListIcon_HeaderDragDrop"        : Flag = Flag | #PB_ListIcon_HeaderDragDrop
                  Case "#PB_ListIcon_LargeIcon"             : Flag = Flag | #PB_ListIcon_LargeIcon
                  Case "#PB_ListIcon_List"                  : Flag = Flag | #PB_ListIcon_List
                  Case "#PB_ListIcon_MultiSelect"           : Flag = Flag | #PB_ListIcon_MultiSelect
                  Case "#PB_ListIcon_Report"                : Flag = Flag | #PB_ListIcon_Report
                  Case "#PB_ListIcon_SmallIcon"             : Flag = Flag | #PB_ListIcon_SmallIcon
                  Case "#PB_ListIcon_ThreeState"            : Flag = Flag | #PB_ListIcon_ThreeState
                     ; ipaddress
                     ; progressbar 
                  Case "#PB_ProgressBar_Smooth"             : Flag = Flag | #PB_ProgressBar_Smooth
                  Case "#PB_ProgressBar_Vertical"           : Flag = Flag | #PB_ProgressBar_Vertical
                     ; scrollbar 
                  Case "#PB_ScrollBar_Vertical"             : Flag = Flag | #PB_ScrollBar_Vertical
                     ; scrollarea 
                  Case "#PB_ScrollArea_BorderLess"          : Flag = Flag | #PB_ScrollArea_BorderLess
                  Case "#PB_ScrollArea_Center"              : Flag = Flag | #PB_ScrollArea_Center
                  Case "#PB_ScrollArea_Flat"                : Flag = Flag | #PB_ScrollArea_Flat
                  Case "#PB_ScrollArea_Raised"              : Flag = Flag | #PB_ScrollArea_Raised
                  Case "#PB_ScrollArea_Single"              : Flag = Flag | #PB_ScrollArea_Single
                     ; trackbar
                  Case "#PB_TrackBar_Ticks"                 : Flag = Flag | #PB_TrackBar_Ticks
                  Case "#PB_TrackBar_Vertical"              : Flag = Flag | #PB_TrackBar_Vertical
                     ; web
                     ; calendar
                  Case "#PB_Calendar_Borderless"            : Flag = Flag | #PB_Calendar_Borderless
                     
                     ; date
                  Case "#PB_Date_CheckBox"                  : Flag = Flag | #PB_Date_CheckBox
                  Case "#PB_Date_UpDown"                    : Flag = Flag | #PB_Date_UpDown
                     
                     ; editor
                  Case "#PB_Editor_ReadOnly"                : Flag = Flag | #PB_Editor_ReadOnly
                  Case "#PB_Editor_WordWrap"                : Flag = Flag | #PB_Editor_WordWrap
                     
                     ; explorerlist
                  Case "#PB_Explorer_BorderLess"            : Flag = Flag | #PB_Explorer_BorderLess         
                  Case "#PB_Explorer_AlwaysShowSelection"   : Flag = Flag | #PB_Explorer_AlwaysShowSelection
                  Case "#PB_Explorer_MultiSelect"           : Flag = Flag | #PB_Explorer_MultiSelect
                  Case "#PB_Explorer_GridLines"             : Flag = Flag | #PB_Explorer_GridLines
                  Case "#PB_Explorer_HeaderDragDrop"        : Flag = Flag | #PB_Explorer_HeaderDragDrop
                  Case "#PB_Explorer_FullRowSelect"         : Flag = Flag | #PB_Explorer_FullRowSelect
                  Case "#PB_Explorer_NoFiles"               : Flag = Flag | #PB_Explorer_NoFiles
                  Case "#PB_Explorer_NoFolders"             : Flag = Flag | #PB_Explorer_NoFolders
                  Case "#PB_Explorer_NoParentFolder"        : Flag = Flag | #PB_Explorer_NoParentFolder 
                  Case "#PB_Explorer_NoDirectoryChange"     : Flag = Flag | #PB_Explorer_NoDirectoryChange
                  Case "#PB_Explorer_NoDriveRequester"      : Flag = Flag | #PB_Explorer_NoDriveRequester
                  Case "#PB_Explorer_NoSort"                : Flag = Flag | #PB_Explorer_NoSort
                  Case "#PB_Explorer_AutoSort"              : Flag = Flag | #PB_Explorer_AutoSort
                  Case "#PB_Explorer_HiddenFiles"           : Flag = Flag | #PB_Explorer_HiddenFiles
                  Case "#PB_Explorer_NoMyDocuments"         : Flag = Flag | #PB_Explorer_NoMyDocuments
                     
                     ; explorercombo
                  Case "#PB_Explorer_DrivesOnly"            : Flag = Flag | #PB_Explorer_DrivesOnly
                  Case "#PB_Explorer_Editable"              : Flag = Flag | #PB_Explorer_Editable
                     
                     ; explorertree
                  Case "#PB_Explorer_NoLines"               : Flag = Flag | #PB_Explorer_NoLines
                  Case "#PB_Explorer_NoButtons"             : Flag = Flag | #PB_Explorer_NoButtons
                     
                     ; spin
                  Case "#PB_Spin_Numeric"                   : Flag = Flag | #PB_Spin_Numeric
                  Case "#PB_Spin_ReadOnly"                  : Flag = Flag | #PB_Spin_ReadOnly
                     ; tree
                  Case "#PB_Tree_AlwaysShowSelection"       : Flag = Flag | #PB_Tree_AlwaysShowSelection
                  Case "#PB_Tree_CheckBoxes"                : Flag = Flag | #PB_Tree_CheckBoxes
                  Case "#PB_Tree_NoButtons"                 : Flag = Flag | #PB_Tree_NoButtons
                  Case "#PB_Tree_NoLines"                   : Flag = Flag | #PB_Tree_NoLines
                  Case "#PB_Tree_ThreeState"                : Flag = Flag | #PB_Tree_ThreeState
                     ; panel
                     ; splitter
                  Case "#PB_Splitter_Separator"             : Flag = Flag | #PB_Splitter_Separator
                  Case "#PB_Splitter_Vertical"              : Flag = Flag | #PB_Splitter_Vertical
                  Case "#PB_Splitter_FirstFixed"            : Flag = Flag | #PB_Splitter_FirstFixed
                  Case "#PB_Splitter_SecondFixed"           : Flag = Flag | #PB_Splitter_SecondFixed
                     ; mdi
                  Case "#PB_MDI_AutoSize"                   : Flag = Flag | #PB_MDI_AutoSize
                  Case "#PB_MDI_BorderLess"                 : Flag = Flag | #PB_MDI_BorderLess
                  Case "#PB_MDI_NoScrollBars"               : Flag = Flag | #PB_MDI_NoScrollBars
                     ; scintilla
                     ; shortcut
                     ; canvas
                  Case "#PB_Canvas_Border"                  : Flag = Flag | #PB_Canvas_Border
                  Case "#PB_Canvas_ClipMouse"               : Flag = Flag | #PB_Canvas_ClipMouse
                  Case "#PB_Canvas_Container"               : Flag = Flag | #PB_Canvas_Container
                  Case "#PB_Canvas_DrawFocus"               : Flag = Flag | #PB_Canvas_DrawFocus
                  Case "#PB_Canvas_Keyboard"                : Flag = Flag | #PB_Canvas_Keyboard
                     
                  Default
                     ; widgets
                     Select LCase(str$)
                        Case "#__flag_button_default"              : Flag = Flag | #__flag_button_Default
                        Case "#__flag_collapsed"                   : Flag = Flag | #__flag_Collapsed          
                        Case "#__flag_optionboxes"                 : Flag = Flag | #__flag_OptionBoxes      
                        Case "#__flag_checkboxes"                  : Flag = Flag | #__flag_CheckBoxes         
                        Case "#__flag_threestate"                  : Flag = Flag | #__flag_ThreeState         
                        Case "#__flag_rowclickselect"              : Flag = Flag | #__flag_RowClickSelect  
                        Case "#__flag_rowmultiselect"              : Flag = Flag | #__flag_RowMultiSelect 
                        Case "#__flag_rowfullselect"               : Flag = Flag | #__flag_RowFullSelect   
                        Case "#__flag_gridlines"                   : Flag = Flag | #__flag_GridLines           
                        Case "#__flag_borderraised"               : Flag = Flag | #__flag_BorderRaised   
                        Case "#__flag_borderdouble"               : Flag = Flag | #__flag_BorderDouble   
                        Case "#__flag_bordersingle"               : Flag = Flag | #__flag_BorderSingle   
                        Case "#__flag_borderless"                 : Flag = Flag | #__flag_Borderless       
                        Case "#__flag_borderflat"                 : Flag = Flag | #__flag_BorderFlat       
                        Case "#__flag_child"                       : Flag = Flag | #__flag_Child                   
                        Case "#__flag_invert"                      : Flag = Flag | #__flag_Invert                 
                        Case "#__flag_vertical"                    : Flag = Flag | #__flag_Vertical             
                        Case "#__flag_transparent"                 : Flag = Flag | #__flag_Transparent       
                        Case "#__flag_nofocus"                     : Flag = Flag | #__flag_NoFocus               
                        Case "#__flag_nolines"                     : Flag = Flag | #__flag_NoLines               
                        Case "#__flag_nobuttons"                   : Flag = Flag | #__flag_NoButtons           
                        Case "#__flag_noscrollbars"                : Flag = Flag | #__flag_NoScrollBars     
                        Case "#__flag_textpassword"               : Flag = Flag | #__flag_TextPassword   
                        Case "#__flag_textwordwrap"               : Flag = Flag | #__flag_TextWordWrap   
                        Case "#__flag_textmultiline"              : Flag = Flag | #__flag_TextMultiLine 
                        Case "#__flag_textinline"                 : Flag = Flag | #__flag_TextInLine       
                        Case "#__flag_textnumeric"                : Flag = Flag | #__flag_TextNumeric     
                        Case "#__flag_textreadonly"               : Flag = Flag | #__flag_TextReadonly   
                        Case "#__flag_textlowercase"              : Flag = Flag | #__flag_TextLowerCase 
                        Case "#__flag_textuppercase"              : Flag = Flag | #__flag_TextUpperCase 
                        ; Case "#__flag_modal"                       : Flag = Flag | #__flag_Modal                  
                        Case "#__flag_left"                        : Flag = Flag | #__flag_Left                    
                        Case "#__flag_top"                         : Flag = Flag | #__flag_Top                      
                        Case "#__flag_right"                       : Flag = Flag | #__flag_Right                  
                        Case "#__flag_bottom"                      : Flag = Flag | #__flag_Bottom                
                        Case "#__flag_center"                      : Flag = Flag | #__flag_Center                
                        Case "#__flag_autosize"                    : Flag = Flag | #__flag_AutoSize            
                        Case "#__flag_nogadgets"                   : Flag = Flag | #__flag_NoGadgets      
                           
                        Case "#__align_text"                       : Flag = Flag | #__align_text 
                        Case "#__align_image"                      : Flag = Flag | #__align_image
                        Case "#__align_full"                       : Flag = Flag | #__align_Full   
                        Case "#__align_proportional"               : Flag = Flag | #__align_proportional 
                        Case "#__align_auto"                       : Flag = Flag | #__align_auto         
                           
                        Case "#__flag_top"                        : Flag = Flag | #__flag_Top  
                        Case "#__flag_bottom"                     : Flag = Flag | #__flag_Bottom 
                        Case "#__flag_left"                       : Flag = Flag | #__flag_Left   
                        Case "#__flag_right"                      : Flag = Flag | #__flag_Right  
                        Case "#__flag_center"                     : Flag = Flag | #__flag_Center 
                           
                        Case "#__flag_imageleft"                  : Flag = Flag | #__flag_ImageLeft          
                        Case "#__flag_imagetop"                   : Flag = Flag | #__flag_ImageTop            
                        Case "#__flag_imageright"                 : Flag = Flag | #__flag_ImageRight        
                        Case "#__flag_imagebottom"                : Flag = Flag | #__flag_ImageBottom      
                        Case "#__flag_imagecenter"                : Flag = Flag | #__flag_ImageCenter      
                           
                        Case "#__flag_textleft"                   : Flag = Flag | #__flag_TextLeft          
                        Case "#__flag_texttop"                    : Flag = Flag | #__flag_TextTop            
                        Case "#__flag_textright"                  : Flag = Flag | #__flag_TextRight        
                        Case "#__flag_textbottom"                 : Flag = Flag | #__flag_TextBottom      
                        Case "#__flag_textcenter"                 : Flag = Flag | #__flag_TextCenter      
                           
                        Default
                           ;             Select Asc(String$)
                           ;               Case '0' To '9'
                           Flag = Flag | Val(String$)
                           ;             EndSelect
                     EndSelect
               EndSelect
               
            Next
         EndIf
         
         ProcedureReturn Flag
      EndProcedure
      
      ;-
      Procedure.i TypeFromClass( class.s )
         Protected result.i
         
         Select Trim( LCase( class.s ))
            Case "status"        : result = #__type_StatusBar
            Case "popupmenu"     : result = #__type_PopupBar
            Case "tool"          : result = #__type_ToolBar
            Case "tab"           : result = #__type_TabBar
            Case "menu"          : result = #__type_MenuBar
            Case "window"        : result = #__type_window
               
            Case "unknown"       : result = #__type_Unknown
               
            Case "button"        : result = #__type_Button
            Case "buttonimage"   : result = #__Type_ButtonImage
            Case "calendar"      : result = #__type_Calendar
            Case "checkbox"      : result = #__type_CheckBox
            Case "combobox"      : result = #__type_ComboBox
            Case "container"     : result = #__type_Container
            Case "date"          : result = #__type_Date
            Case "editor"        : result = #__type_Editor
            Case "explorercombo" : result = #__type_ExplorerCombo
            Case "explorerlist"  : result = #__type_ExplorerList
            Case "explorertree"  : result = #__type_ExplorerTree
            Case "frame"         : result = #__type_Frame
            Case "hyperlink"     : result = #__type_HyperLink
            Case "image"         : result = #__type_image
            Case "ipaddress"     : result = #__type_IPAddress
            Case "listicon"      : result = #__type_ListIcon
            Case "listview"      : result = #__type_ListView
            Case "mdi"           : result = #__type_MDI
            Case "option"        : result = #__type_Option
            Case "panel"         : result = #__type_Panel
            Case "progress"      : result = #__type_Progress
            Case "scintilla"     : result = #__type_Scintilla
            Case "scrollarea"    : result = #__type_ScrollArea
            Case "scroll"        : result = #__type_Scroll
            Case "spin"          : result = #__type_Spin
            Case "splitter"      : result = #__type_Splitter
            Case "string"        : result = #__type_String
            Case "text"          : result = #__type_Text
            Case "track"         : result = #__type_Track
            Case "tree"          : result = #__type_Tree
            Case "web"           : result = #__type_Web
               ;case "property"       : result = #__type_Properties
               ;Case "canvas" : result = #__type_Canvas
               ;Case "opengl"    : result = #__type_OpenGL
               ;Case "shortcut" : result = #__type_Shortcut
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.s ClassFromType( Type )
         Protected result.s
         
         Select Type
            Case #__type_StatusBar     : result.s = "Status"
            Case #__type_PopupBar      : result.s = "PopupMenu"
            Case #__type_ToolBar       : result.s = "ToolBar"
            Case #__type_TabBar        : result.s = "Tab"
            Case #__type_MenuBar       : result.s = "Menu"
            Case #__type_Window        : result.s = "Window"
               
            Case #__type_Unknown       : result.s = "Create"
               
            Case #__type_Button        : result.s = "Button"
            Case #__Type_ButtonImage   : result.s = "Buttonimage"
            Case #__type_String        : result.s = "String"
            Case #__type_Text          : result.s = "Text"
            Case #__type_CheckBox      : result.s = "CheckBox"
            Case #__type_Option        : result.s = "Option"
            Case #__type_ListView      : result.s = "ListView"
            Case #__type_Frame         : result.s = "Frame"
            Case #__type_ComboBox      : result.s = "ComboBox"
            Case #__type_image         : result.s = "image"
            Case #__type_HyperLink     : result.s = "HyperLink"
            Case #__type_Container     : result.s = "Container"
            Case #__type_ListIcon      : result.s = "ListIcon"
            Case #__type_IPAddress     : result.s = "IPAddress"
            Case #__type_Progress      : result.s = "Progress"
            Case #__type_Scroll        : result.s = "Scroll"
            Case #__type_ScrollArea    : result.s = "ScrollArea"
            Case #__type_Track         : result.s = "Track"
            Case #__type_Web           : result.s = "Web"
            Case #__type_Calendar      : result.s = "Calendar"
            Case #__type_Date          : result.s = "Date"
            Case #__type_Editor        : result.s = "Editor"
            Case #__type_ExplorerList  : result.s = "ExplorerList"
            Case #__type_ExplorerTree  : result.s = "ExplorerTree"
            Case #__type_ExplorerCombo : result.s = "ExplorerCombo"
            Case #__type_Spin          : result.s = "Spin"
            Case #__type_Tree          : result.s = "Tree"
            Case #__type_Panel         : result.s = "Panel"
            Case #__type_Splitter      : result.s = "Splitter"
            Case #__type_MDI           : result.s = "Mdi"
            Case #__type_Scintilla     : result.s = "Scintilla"
         EndSelect
         
         ProcedureReturn result.s
      EndProcedure
      
      Procedure.s ClassFromEvent( event.i )
         Protected result$
         
         Select event
            Case #__event_Cursor    : result$ = "CursorChange"
            Case #__event_free            : result$ = "Free"
            Case #__event_drop            : result$ = "Drop"
            Case #__event_create          : result$ = "Create"
            Case #__event_Draw            : result$ = "Draw"
               ;Case #__event_SizeItem    : result$ = "SizeItem"
               
            Case #__event_resizeend       : result$ = "ResizeEnd"
            Case #__event_scrollchange    : result$ = "ScrollChange"
               
            Case #__event_close           : result$ = "CloseWindow"
            Case #__event_maximize        : result$ = "MaximizeWindow"
            Case #__event_minimize        : result$ = "MinimizeWindow"
            Case #__event_restore         : result$ = "RestoreWindow"
               
            Case #__event_MouseEnter      : result$ = "MouseEnter"       ; The mouse cursor entered the gadget
            Case #__event_MouseLeave      : result$ = "MouseLeave"       ; The mouse cursor left the gadget
            Case #__event_MouseMove       : result$ = "MouseMove"        ; The mouse cursor moved
            Case #__event_MouseWheel      : result$ = "MouseWheel"       ; The mouse wheel was moved
            Case #__event_LeftDown        : result$ = "LeftButtonDown"   ; The left mouse button was pressed
            Case #__event_LeftUp          : result$ = "LeftButtonUp"     ; The left mouse button was released
            Case #__event_LeftClick       : result$ = "LeftClick"        ; A click With the left mouse button
            Case #__event_Left2Click      : result$ = "Left2Click"       ; A double-click With the left mouse button
            Case #__event_RightDown       : result$ = "RightButtonDown"  ; The right mouse button was pressed
            Case #__event_RightUp         : result$ = "RightButtonUp"    ; The right mouse button was released
            Case #__event_RightClick      : result$ = "RightClick"       ; A click With the right mouse button
            Case #__event_Right2Click     : result$ = "Right2Click"      ; A double-click With the right mouse button
                                                                         ;Case #__event_MiddleDown : result$ = "MiddleButtonDown" ; The middle mouse button was pressed
                                                                         ;Case #__event_MiddleUp : result$ = "MiddleButtonUp"     ; The middle mouse button was released
            Case #__event_Focus           : result$ = "Focus"            ; The gadget gained keyboard focus
            Case #__event_LostFocus       : result$ = "LostFocus"        ; The gadget lost keyboard focus
            Case #__event_KeyDown         : result$ = "KeyDown"          ; A key was pressed
            Case #__event_KeyUp           : result$ = "KeyUp"            ; A key was released
            Case #__event_Input           : result$ = "Input"            ; Text input was generated
            Case #__event_Resize          : result$ = "Resize"           ; The gadget has been resized
            Case #__event_StatusChange    : result$ = "StatusChange"
               ;Case #__event_TitleChange : result$ = "TitleChange"
            Case #__event_Change          : result$ = "Change"
            Case #__event_DragStart       : result$ = "DragStart"
            Case #__event_Return          : result$ = "ReturnKey"
               
            Case #__event_Down            : result$ = "Down"
            Case #__event_Up              : result$ = "Up"
         EndSelect
         
         ProcedureReturn result$
      EndProcedure
      
      
      ;-
      Procedure.i PBEventType( wEvent.i )
         If wEvent = #__event_MouseEnter
            ProcedureReturn #PB_EventType_MouseEnter
         EndIf
         If wEvent = #__event_MouseLeave
            ProcedureReturn #PB_EventType_MouseLeave
         EndIf
         If wEvent = #__event_MouseMove
            ProcedureReturn #PB_EventType_MouseMove
         EndIf
         If wEvent = #__event_Focus
            ProcedureReturn #PB_EventType_Focus
         EndIf
         If wEvent = #__event_LostFocus
            ProcedureReturn #PB_EventType_LostFocus
         EndIf
         
         If wEvent = #__event_Resize
            ProcedureReturn #PB_EventType_Resize
         EndIf
         If wEvent = #__event_Change
            ProcedureReturn #PB_EventType_Change
         EndIf
         If wEvent = #__event_StatusChange
            ProcedureReturn #PB_EventType_StatusChange
         EndIf
         If wEvent = #__event_Down
            ProcedureReturn #PB_EventType_Down
         EndIf
         If wEvent = #__event_Up
            ProcedureReturn #PB_EventType_Up
         EndIf
         
         If wEvent = #__event_DragStart
            ProcedureReturn #PB_EventType_DragStart
         EndIf
         If wEvent = #__event_Input
            ProcedureReturn #PB_EventType_Input
         EndIf
         If wEvent = #__event_KeyDown
            ProcedureReturn #PB_EventType_KeyDown
         EndIf
         If wEvent = #__event_KeyUp
            ProcedureReturn #PB_EventType_KeyUp
         EndIf
         
         If wEvent = #__event_LeftDown
            ProcedureReturn #PB_EventType_LeftButtonDown
         EndIf
         If wEvent = #__event_LeftUp
            ProcedureReturn #PB_EventType_LeftButtonUp
         EndIf
         If wEvent = #__event_LeftClick
            ProcedureReturn #PB_EventType_LeftClick
         EndIf
         If wEvent = #__event_Left2Click
            ProcedureReturn #PB_EventType_LeftDoubleClick
         EndIf
         
         If wEvent = #__event_RightDown
            ProcedureReturn #PB_EventType_RightButtonDown
         EndIf
         If wEvent = #__event_RightUp
            ProcedureReturn #PB_EventType_RightButtonUp
         EndIf
         If wEvent = #__event_RightClick
            ProcedureReturn #PB_EventType_RightClick
         EndIf
         If wEvent = #__event_Right2Click
            ProcedureReturn #PB_EventType_RightDoubleClick
         EndIf
         
         If wEvent = #__event_Draw
            ProcedureReturn #PB_EventType_Repaint
         EndIf
      EndProcedure
      
      Procedure.s PBClassFromEvent( event.i )
         Protected result.s
         
         Select event
            Case #PB_EventType_MouseEnter       : result.s = "MouseEnter"           ; The mouse cursor entered the gadget
            Case #PB_EventType_MouseLeave       : result.s = "MouseLeave"           ; The mouse cursor left the gadget
            Case #PB_EventType_MouseMove        : result.s = "MouseMove"            ; The mouse cursor moved
            Case #PB_EventType_MouseWheel       : result.s = "MouseWheel"           ; The mouse wheel was moved
               
            Case #PB_EventType_LeftButtonDown   : result.s = "LeftButtonDown"   ; The left mouse button was pressed
            Case #PB_EventType_LeftButtonUp     : result.s = "LeftButtonUp"     ; The left mouse button was released
            Case #PB_EventType_LeftClick        : result.s = "LeftClick"        ; A click With the left mouse button
            Case #PB_EventType_LeftDoubleClick  : result.s = "LeftDoubleClick"  ; A double-click With the left mouse button
               
            Case #PB_EventType_RightButtonDown  : result.s = "RightButtonDown" ; The right mouse button was pressed
            Case #PB_EventType_RightButtonUp    : result.s = "RightButtonUp"   ; The right mouse button was released
            Case #PB_EventType_RightClick       : result.s = "RightClick"      ; A click With the right mouse button
            Case #PB_EventType_RightDoubleClick : result.s = "RightDoubleClick"; A double-click With the right mouse button
               
            Case #PB_EventType_MiddleButtonDown : result.s = "MiddleButtonDown" ; The middle mouse button was pressed
            Case #PB_EventType_MiddleButtonUp   : result.s = "MiddleButtonUp"   ; The middle mouse button was released
            Case #PB_EventType_Focus            : result.s = "Focus"            ; The gadget gained keyboard focus
            Case #PB_EventType_LostFocus        : result.s = "LostFocus"        ; The gadget lost keyboard focus
            Case #PB_EventType_KeyDown          : result.s = "KeyDown"          ; A key was pressed
            Case #PB_EventType_KeyUp            : result.s = "KeyUp"            ; A key was released
            Case #PB_EventType_Input            : result.s = "Input"            ; Text input was generated
            Case #PB_EventType_Resize           : result.s = "Resize"           ; The gadget has been resized
            Case #PB_EventType_StatusChange     : result.s = "StatusChange"
            Case #PB_EventType_Change           : result.s = "Change"
            Case #PB_EventType_DragStart        : result.s = "DragStart"
            Case #PB_EventType_TitleChange      : result.s = "TitleChange"
            Case #PB_EventType_CloseItem        : result.s = "CloseItem"
            Case #PB_EventType_SizeItem         : result.s = "SizeItem"
            Case #PB_EventType_Down             : result.s = "Down"
            Case #PB_EventType_Up               : result.s = "Up"
               ;                
               ;             Case #pb_eventtype_cursor : result.s = "Cursor"
               ;             Case #pb_eventtype_free : result.s = "Free"
               ;             Case #pb_eventtype_drop : result.s = "Drop"
               ;             Case #pb_eventtype_create : result.s = "Create"
               ;             Case #pb_eventtype_Draw : result.s = "Draw"
               ;                
               ;             Case #pb_eventtype_repaint : result.s = "Repaint"
               ;             Case #pb_eventtype_resizeend : result.s = "ResizeEnd"
               ;             Case #pb_eventtype_scrollchange : result.s = "ScrollChange"
               ;                
               ;             Case #pb_eventtype_close : result.s = "CloseWindow"
               ;             Case #pb_eventtype_maximize : result.s = "MaximizeWindow"
               ;             Case #pb_eventtype_minimize : result.s = "MinimizeWindow"
               ;             Case #pb_eventtype_restore : result.s = "RestoreWindow"
               ;             Case #pb_eventtype_ReturnKey : result.s = "returnKey"
               ;             Case #pb_eventtype_mousewheelX : result.s = "MouseWheelX"
               ;             Case #pb_eventtype_mousewheelY : result.s = "MouseWheelY"
         EndSelect
         
         ProcedureReturn result.s
      EndProcedure
      
      
      ;-
      Procedure GetAtPoint( *root._s_root, mouse_x, mouse_y, List *List._s_WIDGET( ), *address = #Null )
         Protected i, a_index, Repaint, *this._s_WIDGET, *e._s_WIDGET
         
         ;\\ get at point address
         If *root\haschildren
            If ListSize( *list( ))
               If *address
                  ChangeCurrentElement( *list( ), *address )
                  PreviousElement( *list( ))
               Else
                  LastElement( *list( ))
               EndIf
               ;                If MouseButtons( ) And Not MouseButtonPress( )
               ;                   Debug *root\class
               ;                EndIf
               Repeat
                  If *list( )\address And
                     *list( )\hide = 0 And
                     *list( )\root = *root And 
                     is_atpoint_( *list( ), mouse_x, mouse_y, [#__c_frame] ) And
                     is_atpoint_( *list( ), mouse_x, mouse_y, [#__c_draw] )
                     
                     ;\\ если переместили виджет то его исключаем
                     If mouse( )\dragstart
                        If is_drag_move( )
                           If Pressed( ) = *list( )
                              Continue
                           EndIf
                           Entered( ) = *list( )
                           ProcedureReturn 0
                        EndIf
                     EndIf
                     
                     *this = *list( )
                     Break
                  EndIf
               Until PreviousElement( *list( )) = #False
            EndIf
         EndIf
         ;
         ;\\ root no enumWidget
         If Not *this
            If is_atpoint_( *root, mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *root, mouse_x, mouse_y, [#__c_draw] )
               *this = *root
            EndIf
         EndIf
         ;
         ;\\ is integral
         If *this
            ;\\ is integral string bar
            If *this\stringbar And Not *this\stringbar\hide And
               is_atpoint_( *this\stringbar, mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *this\stringbar, mouse_x, mouse_y, [#__c_draw] )
               *this = *this\stringbar
            EndIf
            ;\\ is integral tab bar
            If *this\tabbar And Not *this\tabbar\hide And
               is_atpoint_( *this\tabbar, mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *this\tabbar, mouse_x, mouse_y, [#__c_draw] )
               *this = *this\tabbar
            EndIf
            ;\\ is integral tab bar
            If *this\menubar And Not *this\menubar\hide And
               is_atpoint_( *this\menubar, mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *this\menubar, mouse_x, mouse_y, [#__c_draw] )
               *this = *this\menubar
            EndIf
            ;\\ is integral scroll bar's
            If *this\scroll
               If *this\scroll\v And Not *this\scroll\v\hide And
                  is_atpoint_( *this\scroll\v, mouse_x, mouse_y, [#__c_frame] ) And
                  is_atpoint_( *this\scroll\v, mouse_x, mouse_y, [#__c_draw] )
                  *this = *this\scroll\v
               EndIf
               If *this\scroll\h And Not *this\scroll\h\hide And
                  is_atpoint_( *this\scroll\h, mouse_x, mouse_y, [#__c_frame] ) And
                  is_atpoint_( *this\scroll\h, mouse_x, mouse_y, [#__c_draw] )
                  *this = *this\scroll\h
               EndIf
            EndIf
         EndIf
         
         If test_atpoint
            Debug ""+*root\class+" "+*root\haschildren ;+" "+ *this\class
         EndIf
         ;
         ;\\ entered anchor index
         If MouseButtonPress( )
            If a_index( ) And 
               a_entered( ) And 
               a_entered( )\anchors\id[a_index( )] And
               a_entered( )\anchors\state
               ;
               If Not mouse( )\dragstart
                  If *this <> a_entered( ) And 
                     *this\root = a_entered( )\root 
                     ;
                     Entered( ) = a_entered( )
                     *this = a_entered( )
                  EndIf
               EndIf
            EndIf
         Else
            If Not a_entered( )
               a_entered( ) = a_focused( )
            EndIf
            ;
            If a_entered( )  
               If Not (*this And a_entered( )\root <> *this\root )
                  ;
                  If a_enter( a_entered( ), 4 )
                     If a_entered( )
                        If ( *this And a_entered( )\layer < *this\layer ) And 
                           a_entered( ) <> a_focused( ) 
                           ;
                           a_index( ) = 0
                        Else
                           *this = a_entered( )
                        EndIf
                        
                        ;Debug "a "+a_index( ) +" "+ *this\enter
                     EndIf
                  Else
                     If a_index( )
                        ; Debug "a out to parent border "+a_entered( )\enter 
                        
                        If MouseEnter( a_entered( ), - 1 )
                           a_entered( )\enter = 0
                        EndIf
                        a_index( ) = 0
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         ;
         ; at point button
         ;\\ reset
         If EnteredButton( )
            If a_index( ) Or ( Entered( ) And
                               Entered( ) <> *this )
               ;
               If EnteredButton( )\_enter
                  EnteredButton( )\_enter = 0
                  
                  If EnteredButton( )\ColorState( ) = #__s_1
                     EnteredButton( )\ColorState( ) = #__s_0
                  EndIf
                  
                  If Entered( )
                     Entered( )\root\repaint = 1
                  Else
                     *this\root\repaint = 1
                  EndIf
                  EnteredButton( ) = #Null
               EndIf
            EndIf
         EndIf
         
         ;\\
         If *this
            If Not a_index( )
               If Not MouseButtonPress( )
                  Protected._s_BUTTONS *EnteredButton, *BB1, *BB2, *BB0
                  
                  ;\\
                  If *this\type = #__type_window
                     *BB0 = *this\CloseButton( )
                     *BB1 = *this\MaximizeButton( )
                     *BB2 = *this\MinimizeButton( )
                  Else
                     ; enter item buttons
                     If *this\row
                        If *this\RowEntered( )
                           *BB1 = *this\RowEntered( )\checkbox
                           If *this\RowEntered( )\childrens
                              *BB2 = *this\RowEntered( )\buttonbox
                           EndIf
                           mouse_x = mouse( )\x - *this\inner_x( ) - *this\RowEntered( )\x - *this\scroll_x( )
                           mouse_y = mouse( )\y - *this\inner_y( ) - *this\RowEntered( )\y - *this\scroll_y( )
                           ;                            If*BB1 And *BB2
                           ;                               Debug ""+""+ is_atpoint_( *BB1, mouse_x, mouse_y ) +" "+ is_atpoint_( *BB2, mouse_x, mouse_y )
                           ;                            EndIf
                        EndIf
                     EndIf
                     
                     If *this\bar
                        *BB0 = *this\bar\button
                        If *this\type <> #__type_splitter
                           *BB1 = *this\bar\button[1]
                           *BB2 = *this\bar\button[2]
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ get at-point-button address
                  If *BB1 And *BB1\hide = 0 And is_atpoint_( *BB1, mouse_x, mouse_y )
                     *EnteredButton = *BB1
                  ElseIf *BB2 And *BB2\hide = 0 And is_atpoint_( *BB2, mouse_x, mouse_y )
                     *EnteredButton = *BB2
                  ElseIf *BB0 And *BB0\hide = 0 And is_atpoint_( *BB0, mouse_x, mouse_y )
                     *EnteredButton = *BB0
                  EndIf
                  
                  ;\\ do buttons events entered & leaved
                  If EnteredButton( ) <> *EnteredButton
                     If EnteredButton( ) 
                        If EnteredButton( )\_enter
                           EnteredButton( )\_enter = 0
                           ;
                           If EnteredButton( )\ColorState( ) = #__s_1
                              EnteredButton( )\ColorState( ) = #__s_0
                           EndIf
                           ;
                           *this\root\repaint = 1
                        EndIf
                     EndIf
                     
                     EnteredButton( ) = *EnteredButton
                     
                     If EnteredButton( ) And 
                        Not EnteredButton( )\disable And
                        Not EnteredButton( )\_enter
                        ;
                        EnteredButton( )\_enter = 1
                        
                        If EnteredButton( )\ColorState( ) = #__s_0
                           EnteredButton( )\ColorState( ) = #__s_1
                        EndIf
                        ;
                        If EnteredButton( ) = *BB0
                           If EnteredButton( )\_enter > 0
                              EnteredButton( )\_enter = - 1
                           EndIf
                        EndIf
                        *this\root\repaint = 1
                     EndIf
                  EndIf
                  
                  ;\\
                  If Not EnteredButton( )
                     If *this\caption
                        *this\caption\interact = is_atpoint_( *this\caption, mouse( )\x, mouse( )\y )
                     EndIf
                     ;                   Else
                     ;                      If *this\row And *this\RowEntered( ) And *this\RowEntered( )\checkbox
                     ;                         Debug ""+ Bool( EnteredButton( ) = *this\RowEntered( )\checkbox ) +" "+ *this\RowEntered( )\checkbox\enter
                     ;                      EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ do events entered & leaved
         If Entered( ) <> *this
            Leaved( ) = Entered( )
            Entered( ) = *this
            Protected *parent._s_WIDGET 
            
            ;
            ;
            If Leaved( ) And Not ( *this And *this\parent = Leaved( ) And is_integral_( *this ) )
               If Leaved( )\enter > 0
                  Leaved( )\enter = 0
                  ;
                  If is_integral_( Leaved( ) )
                     If Leaved( )\parent And
                        Leaved( )\parent\enter
                        
                        If Leaved( )\parent = *this
                           If is_atpoint_( Leaved( )\parent, mouse_x, mouse_y, [#__c_inner] ) And
                              is_atpoint_( Leaved( )\parent, mouse_x, mouse_y, [#__c_draw] )
                              MouseEnter( Leaved( )\parent )
                           Else
                              Leaved( )\parent\enter = 1
                           EndIf
                        Else
                           Leaved( )\parent\enter = 0
                        EndIf
                     EndIf
                  Else
                     If Not a_index( )
                        If Not Leaved( )\anchors
                           If Leaved( )\parent And 
                              Leaved( )\parent\type = #__type_Splitter
                              ;
                              *parent = Leaved( )\parent
                              While *parent And Not *parent\anchors
                                 *parent = *parent\parent
                              Wend
                              ;
                              If *parent 
                                 If *parent\anchors And 
                                    *parent\enter = - 2
                                    *parent\enter = 0
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  ;
                  DoEvents( Leaved( ), #__event_MouseLeave, -1, @"[?+leave]" )
                  ;
                  If is_integral_( Leaved( ) ) 
                     If Leaved( )\parent
                        If Leaved( )\parent\enter = 0
                           DoEvents( Leaved( )\parent, #__event_MouseLeave, -1, @"[?-leave]" )
                        Else
                           If a_index( )
                              Leaved( )\parent\enter = - 1
                              DoEvents( Leaved( )\parent, #__event_MouseLeave, -1, @"[?-a-leave]" )
                           Else
                              ; If MouseButtonPress( )
                              DoChangeCursor( Leaved( )\parent )
                              ; EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
               EndIf
            EndIf
            ;
            ;
            If *this And 
               *this\enter = 0
               ;
               If is_integral_( *this ) 
                  If *this\parent  
                     If *this\parent\enter = 0
                        *this\parent\enter = 1
                        ;
                        If Not MouseButtonPress( )
                           If *this\parent\anchors
                              a_enter( *this\parent, 1 ) 
                              
                              If a_index( )
                                 *this\parent\enter = - 1
                              EndIf
                           EndIf
                        EndIf
                        ;
                        If Not a_index( )
                           DoEvents( *this\parent, #__event_MouseEnter, -1, @"[?-enter]" )
                        EndIf
                        ;
                     ElseIf MouseEnter( *this\parent )
                        *this\parent\enter = 1
                     EndIf
                  EndIf
               Else
                  If Not MouseButtonPress( )
                     If Not a_index( )
                        If *this\anchors
                           a_enter( *this, 1)
                        Else
                           If *this\parent And 
                              *this\parent\type = #__type_Splitter
                              ;
                              *parent = *this\parent
                              While *parent And Not *parent\anchors
                                 *parent = *parent\parent
                              Wend
                              ;
                              If *parent
                                 If *parent\anchors
                                    MouseEnter( *parent, - 1 )
                                    a_enter( *parent, - 1 ) 
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               ;
               If Not a_index( )
                  *this\enter = 1
                  DoEvents( *this, #__event_MouseEnter, -1, @"[?+enter]" )
               EndIf
               
            EndIf
         EndIf
         
         ProcedureReturn *this
      EndProcedure
      
      ;-
      ;- EVENTs
      ;-
      Procedure DoEventTimer_Item( )
         ; Debug "  timer"
         Protected result
         Protected scroll_x, scroll_y
         Protected *this._s_WIDGET = Pressed( )
         
         If *this
            If *this\root <> root( )
               mouse( )\x = GadgetMouseX( *this\root\canvas\gadget )
               mouse( )\y = GadgetMouseY( *this\root\canvas\gadget )
            EndIf
            
            If Not is_inside_( *this\inner_y( ), *this\inner_height( ), mouse( )\y ) And *this\scroll\v
               If mouse( )\y < mouse( )\press_y
                  If Not bar_in_start_( *this\scroll\v\bar )
                     scroll_y = mouse( )\y - ( *this\inner_y( ) )
                     bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos + scroll_y )
                     Update_DrawText( *this, *this\TextChange( ) )
                     Debug "timer scroll v top " + scroll_y + " " + *this\RowFirstVisible( )\rindex
                     
                  Else
                     ; Debug "scroll v stop top"
                  EndIf
               ElseIf mouse( )\y > mouse( )\press_y
                  If Not bar_in_stop_( *this\scroll\v\bar )
                     scroll_y = 400;mouse( )\y - ( *this\inner_y( ) + *this\inner_height( ) )
                                   ;bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos + scroll_y )
                                   ;Update_DrawText( *this, *this\TextChange( ) )
                     
                     Debug "timer scroll v bottom " + scroll_y + " " + *this\RowLastVisible( )\rindex
                     
                     ;               If *this\RowFocused( ) <> *this\RowLastVisible( )
                     ;                 ;                 If *this\RowEntered( )
                     ;                 ;                   *this\RowEntered( )\_enter = 0
                     ;                 ;                   *this\RowEntered( )\ColorState( ) = 0
                     ;                 ;                 EndIf
                     ;                 ;                 *this\RowEntered( ) = *this\RowLastVisible( )
                     ;                 ;                 *this\RowEntered( )\_enter = 1
                     ;                 ;                 *this\RowEntered( )\ColorState( ) = 1
                     ;
                     ;                 If *this\RowFocused( )
                     ;                   ; Debug "scroll v bottom "+ scroll_y +" "+ *this\RowLastVisible( )\rindex +" "+ *this\RowFocused( )\rindex
                     ;                   *this\RowFocused( )\_focus = 0
                     ;                   *this\RowFocused( )\ColorState( ) = 0
                     ;                 EndIf
                     ;
                     ;                 ; edit_sel__( *this, *this\RowLastVisible( ), *this\LinePressed( ), *this\RowFocused( ), 0, *this\RowFocused( )\text\len )
                     ;                 *this\RowFocused( ) = *this\RowLastVisible( )
                     ;                 ;*this\RowFocused( ) = SelectElement( *this\__rows( ), *this\RowLastVisible( )\rindex )
                     ;                 *this\RowFocused( )\_focus = 1
                     ;                 *this\RowFocused( )\ColorState( ) = 1
                     ;                 *this\RowFocused( )\root\repaint = 1
                     ;
                     ;                 Debug *this\RowFocused( )\rindex
                     ;                 edit_set_sel_( *this, *this\RowFocused( ), *this\LinePressed( ) )
                     ;
                     ;                 *this\root\repaint = 1
                     ;               EndIf
                     
                     ;                 result = 1
                  Else
                     ; Debug "scroll v stop bottom"
                  EndIf
               EndIf
            EndIf
            
            If Not is_inside_( *this\inner_x( ), *this\inner_width( ), mouse( )\x ) And *this\scroll\h
               If mouse( )\x < mouse( )\press_x
                  If Not bar_in_start_( *this\scroll\h\bar )
                     scroll_x = mouse( )\x - ( *this\inner_x( ) )
                     Debug "timer scroll h top " + scroll_x
                     bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos + scroll_x )
                     result = 1
                  Else
                     ; Debug "scroll h stop top"
                  EndIf
               ElseIf mouse( )\x > mouse( )\press_x
                  If Not bar_in_stop_( *this\scroll\h\bar )
                     scroll_x = mouse( )\x - ( *this\inner_x( ) + *this\inner_height( ) )
                     Debug "timer scroll h bottom " + scroll_x
                     bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos + scroll_x )
                     result = 1
                  Else
                     ; Debug "scroll h stop bottom"
                  EndIf
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.l DoKeyEvent_Lines( *this._s_WIDGET, List *lines._s_ROWS( ), event.l )
         Static _caret_last_pos_, DoubleClick.i
         Protected i.i, caret.i
         
         Protected Item.i, String.s
         Protected _line_, _step_ = 1, _caret_min_ = 0, _line_first_ = 0, _line_last_ = *this\countitems - 1
         Protected page_height = *this\inner_height( )
         
         With *this
            Select event
               Case #__event_Input ; - Input ( key )
                  If Not keyboard( )\key[1] & #PB_Canvas_Control
                     If keyboard( )\input
                        edit_key_change_text( *this, Chr( keyboard( )\input ))
                     EndIf
                  EndIf
                  
               Case #__event_KeyUp
                  ; Чтобы перерисовать
                  ; рамку вокруг едитора
                  ; reset all errors
                  If *this\notify
                     *this\notify = 0
                     ProcedureReturn - 1
                  EndIf
                  
                  
               Case #__event_KeyDown
                  Select keyboard( )\key
                     Case #PB_Shortcut_Up       ; Ok
                        If *this\LineFocused( ) And *this\edit_caret_1( ) > 0
                           If keyboard( )\key[1] & #PB_Canvas_Shift
                              If *this\LineFocused( ) = *this\LinePressed( )
                                 ;Debug " le top remove - Pressed  " +" "+ *this\LineFocused( )\text\string
                                 edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_first )
                                 edit_sel_text_( *this, *this\LineFocused( ))
                              ElseIf *this\LineFocused( )\lindex > *this\LinePressed( )\lindex
                                 ;Debug "  le top remove - " +" "+ *this\LineFocused( )\text\string
                                 edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_remove )
                                 edit_sel_text_( *this, SelectElement(*lines( ), *this\LineFocused( )\lindex - 1))
                              Else
                                 ;Debug " ^le bottom  set - " +" "+ *this\LineFocused( )\text\string
                                 edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_set )
                                 edit_sel_text_( *this, *this\LineFocused( ))
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Alt
                              *this\edit_caret_1( ) = *this\LineFocused( )\text\pos
                              *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
                           Else
                              If *this\LineFocused( )\lindex > 0
                                 *this\LineFocused( )\ColorState( ) = #__s_0
                                 *this\LineFocused( )             = SelectElement( *lines( ), *this\LineFocused( )\lindex - 1 )
                                 *this\LineFocused( )\ColorState( ) = #__s_1
                                 
                                 If *this\edit_caret_0( ) > *this\LineFocused( )\text\len
                                    *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                 Else
                                    *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\edit_caret_0( )
                                 EndIf
                              Else
                                 *this\edit_caret_1( ) = *this\LineFocused( )\text\pos
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                              edit_sel_reset_( *this )
                              
                              If *this\LinePressed( ) <> *this\LineFocused( )
                                 If *this\LinePressed( ) And
                                    *this\LinePressed( )\press
                                    *this\LinePressed( )\press = #False
                                 EndIf
                                 *this\LinePressed( )       = *this\LineFocused( )
                                 *this\LinePressed( )\press = #True
                              EndIf
                              
                              *this\edit_caret_2( ) = *this\edit_caret_1( )
                           EndIf
                           
                           edit_sel_string_( *this, *this\LineFocused( ) )
                           edit_sel_text_( *this, *this\LineFocused( ) )
                        EndIf
                        
                     Case #PB_Shortcut_Down     ; Ok
                        If *this\LineFocused( ) And *this\edit_caret_1( ) < *this\text\len
                           If keyboard( )\key[1] & #PB_Canvas_Shift
                              If *this\LineFocused( ) = *this\LinePressed( )
                                 ;Debug " le bottom  set - Pressed  " +" "+ *this\LineFocused( )\text\string
                                 edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_last )
                                 edit_sel_text_( *this, *this\LineFocused( ))
                              ElseIf *this\LineFocused( )\lindex < *this\LinePressed( )\lindex
                                 ;Debug "  ^le top remove - " +" "+ *this\LineFocused( )\text\string
                                 edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_remove )
                                 edit_sel_text_( *this, SelectElement( *lines( ), *this\LineFocused( )\lindex + 1))
                              Else
                                 ;Debug " le bottom  set - " +" "+ *this\LineFocused( )\text\string
                                 edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_set )
                                 edit_sel_text_( *this, *this\LineFocused( ))
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Alt
                              *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                              *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
                           Else
                              If *this\LineFocused( )\lindex < ( *this\countitems - 1 )
                                 *this\LineFocused( )\ColorState( ) = #__s_0
                                 *this\LineFocused( )             = SelectElement( *lines( ), *this\LineFocused( )\lindex + 1 )
                                 *this\LineFocused( )\ColorState( ) = #__s_1
                                 
                                 If *this\edit_caret_0( ) > *this\LineFocused( )\text\len
                                    *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                                 Else
                                    *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\edit_caret_0( )
                                 EndIf
                              Else
                                 *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                              edit_sel_reset_( *this )
                              
                              If *this\LinePressed( ) <> *this\LineFocused( )
                                 If *this\LinePressed( ) And
                                    *this\LinePressed( )\press
                                    *this\LinePressed( )\press = #False
                                 EndIf
                                 *this\LinePressed( )       = *this\LineFocused( )
                                 *this\LinePressed( )\press = #True
                              EndIf
                              
                              *this\edit_caret_2( ) = *this\edit_caret_1( )
                           EndIf
                           
                           edit_sel_string_( *this, *this\LineFocused( ) )
                           edit_sel_text_( *this, *this\LineFocused( ) )
                        EndIf
                        
                     Case #PB_Shortcut_Left     ; Ok
                        If *this\LineFocused( ) And *this\edit_caret_1( ) > 0
                           If *this\edit_caret_1( ) > *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                              *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                           EndIf
                           
                           If *this\edit_caret_1( ) = *this\LineFocused( )\text\pos
                              If *this\LineFocused( )\lindex > 0
                                 *this\LineFocused( )\ColorState( ) = #__s_0
                                 *this\LineFocused( )               = SelectElement( *lines( ), *this\LineFocused( )\lindex - 1 )
                                 *this\LineFocused( )\ColorState( ) = #__s_1
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Alt
                              *this\edit_caret_1( ) = edit_sel_start_word( *this, *this\edit_caret_0( ) - 1, *this\LineFocused( ) )
                           Else
                              *this\edit_caret_1( ) - 1
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                              edit_sel_reset_( *this )
                              
                              *this\edit_caret_2( ) = *this\edit_caret_1( )
                           EndIf
                           
                           *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
                           
                           edit_sel_string_( *this, *this\LineFocused( ) )
                           edit_sel_text_( *this, *this\LineFocused( ) )
                        EndIf
                        
                     Case #PB_Shortcut_Right    ; Ok
                        If *this\LineFocused( ) And *this\edit_caret_1( ) < *this\text\len
                           If *this\edit_caret_1( ) > *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                              *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                           EndIf
                           
                           If *this\edit_caret_1( ) = *this\LineFocused( )\text\pos + *this\LineFocused( )\text\len
                              If *this\LineFocused( )\lindex < *this\countitems - 1
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Shift
                                    If *this\LineFocused( ) = *this\LinePressed( )
                                       ;Debug " le bottom  set - Pressed  " +" "+ *this\LineFocused( )\text\string
                                       edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_last )
                                       edit_sel_text_( *this, *this\LineFocused( ))
                                    ElseIf *this\LineFocused( )\lindex < *this\LinePressed( )\lindex
                                       ;Debug "  ^le top remove - " +" "+ *this\LineFocused( )\text\string
                                       edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_remove )
                                       edit_sel_text_( *this, SelectElement( *lines( ), *this\LineFocused( )\lindex + 1))
                                    Else
                                       ;Debug " le bottom  set - " +" "+ *this\LineFocused( )\text\string
                                       edit_sel_string_( *this, *this\LineFocused( ), #__sel_to_set )
                                       edit_sel_text_( *this, *this\LineFocused( ))
                                    EndIf
                                 EndIf
                                 
                                 *this\LineFocused( )\ColorState( ) = #__s_0
                                 *this\LineFocused( )             = SelectElement( *lines( ), *this\LineFocused( )\lindex + 1 )
                                 *this\LineFocused( )\ColorState( ) = #__s_1
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Alt
                              *this\edit_caret_1( ) = edit_sel_stop_word( *this, *this\edit_caret_0( ) + 1, *this\LineFocused( ) )
                           Else
                              *this\edit_caret_1( ) + 1
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                              edit_sel_reset_( *this )
                              
                              *this\edit_caret_2( ) = *this\edit_caret_1( )
                           EndIf
                           
                           *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\LineFocused( )\text\pos
                           
                           edit_sel_string_( *this, *this\LineFocused( ) )
                           edit_sel_text_( *this, *this\LineFocused( ) )
                        EndIf
                        
                     Case #PB_Shortcut_Home
                        edit_key_home_( *this )
                        
                     Case #PB_Shortcut_End
                        edit_key_end_( *this )
                        
                     Case #PB_Shortcut_PageUp 
                        edit_key_page_up_down_( *this, - 1, 1 )
                        
                     Case #PB_Shortcut_PageDown 
                        edit_key_page_up_down_( *this, 1, 1 )
                        
                     Case #PB_Shortcut_Back
                        If Not *this\notify
                           edit_key_change_text( *this )
                        EndIf
                        
                     Case #PB_Shortcut_Delete
                        If Not *this\notify
                           edit_key_change_text( *this )
                        EndIf
                        
                     Case #PB_Shortcut_Return   ; Ok
                        If Not *this\notify
                           edit_key_change_text( *this )
                        EndIf
                        
                        
                     Case #PB_Shortcut_A        ; Ok
                        If keyboard( )\key[1] & #PB_Canvas_Control
                           If *this\text\edit[2]\len <> *this\text\len
                              
                              ; select first and last items
                              *this\LineFocused( )      = SelectElement( *lines( ), 0 )
                              *this\LinePressedIndex( ) = *this\countitems - 1
                              
                              edit_sel_text_( *this, #PB_All )
                           EndIf
                        EndIf
                        
                     Case #PB_Shortcut_C, #PB_Shortcut_X
                        If keyboard( )\key[1] & #PB_Canvas_Control
                           If *this\text\edit[2]\len
                              SetClipboardText( *this\text\edit[2]\string )
                           EndIf
                           
                           If keyboard( )\key = #PB_Shortcut_X
                              edit_key_change_text( *this )
                           EndIf
                        EndIf
                        
                     Case #PB_Shortcut_V
                        If *this\text\editable
                           If keyboard( )\key[1] & #PB_Canvas_Control
                              Protected Text.s = GetClipboardText( )
                              
                              If Not *this\text\multiLine
                                 Text = ReplaceString( Text, #LFCR$, #LF$ )
                                 Text = ReplaceString( Text, #CRLF$, #LF$ )
                                 Text = ReplaceString( Text, #CR$, #LF$ )
                                 Text = RemoveString( Text, #LF$ )
                              EndIf
                              
                              edit_key_change_text( *this, Text )
                           EndIf
                        EndIf
                        
                  EndSelect
                  
                  ;                         Select keyboard( )\key
                  ;                            Case #PB_Shortcut_Home,
                  ;                                 #PB_Shortcut_End,
                  ;                                 #PB_Shortcut_PageUp,
                  ;                                 #PB_Shortcut_PageDown,
                  ;                                 #PB_Shortcut_Up,
                  ;                                 #PB_Shortcut_Down,
                  ;                                 #PB_Shortcut_Left,
                  ;                                 #PB_Shortcut_Right,
                  ;                                 #PB_Shortcut_Delete,
                  ;                                 #PB_Shortcut_Return ;, #PB_Shortcut_back
                  ;                               
                  ;                               If Not Repaint
                  ;                                  *this\notify = - 1
                  ;                                  ProcedureReturn - 1
                  ;                               EndIf
                  ;                               
                  ;                            Case #PB_Shortcut_A,
                  ;                                 #PB_Shortcut_C,
                  ;                                 #PB_Shortcut_X,
                  ;                                 #PB_Shortcut_V
                  ;                               
                  ;                         EndSelect
                  
            EndSelect
         EndWith
         
      EndProcedure
      
      Procedure DoEvent_Lines( *this._s_WIDGET, event.l, mouse_x.l = - 1, mouse_y.l = - 1 )
         Protected dragged 
         Protected repaint, *rowLine._s_ROWS
         mouse_x - *this\inner_x( )
         mouse_y - *this\inner_y( ) - *this\scroll_y( )
         
         If *this\press
            dragged = mouse( )\dragstart
         EndIf
         
         ;
         If *this\row
            ; get at point items
            If ListSize( *this\RowVisibleList( ) )
               If Not ( *this\LineEntered( ) And
                        *this\LineEntered( )\visible And
                        *this\LineEntered( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\LineEntered( ), mouse_x, mouse_y )) Or
                          ( dragged And is_inside_( *this\LineEntered( )\y, *this\LineEntered( )\height, mouse_y )) ))
                  
                  ; search entered item
                  LastElement( *this\RowVisibleList( ))
                  Repeat
                     If *this\RowVisibleList( )\visible And
                        *this\RowVisibleList( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\RowVisibleList( ), mouse_x, mouse_y )) Or
                          ( dragged And is_inside_( *this\RowVisibleList( )\y, *this\RowVisibleList( )\height, mouse_y )) )
                        *rowLine = *this\RowVisibleList( )
                        Break
                     EndIf
                  Until PreviousElement( *this\RowVisibleList( )) = #False
               Else
                  *rowLine = *this\LineEntered( )
               EndIf
            ElseIf ListSize( *this\__lines( ) )
               If Not ( *this\LineEntered( ) And
                        *this\LineEntered( )\visible And
                        *this\LineEntered( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\LineEntered( ), mouse_x, mouse_y )) Or
                          ( dragged And is_inside_( *this\LineEntered( )\y, *this\LineEntered( )\height, mouse_y )) ))
                  
                  ; search entered item
                  LastElement( *this\__lines( ))
                  Repeat
                     If *this\__lines( )\visible And
                        *this\__lines( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\__lines( ), mouse_x, mouse_y )) Or
                          ( dragged And is_inside_( *this\__lines( )\y, *this\__lines( )\height, mouse_y )) )
                        *rowLine = *this\__lines( )
                        Break
                     EndIf
                  Until PreviousElement( *this\__lines( )) = #False
               Else
                  *rowLine = *this\LineEntered( )
               EndIf
            EndIf
            
            ;
            If dragged
               If *rowLine = #Null
                  If mouse( )\y < mouse( )\press_y + *this\inner_y( ) And mouse( )\y <= *this\inner_y( )
                     If *this\RowFirstVisible( ) And Not bar_in_start_( *this\scroll\v\bar )
                        ChangeCurrentElement( *this\__lines( ), *this\RowFirstVisible( ))
                        *rowLine = PreviousElement( *this\__lines( ) )
                        
                        If *rowLine
                           row_scroll_y_( *this, *rowLine )
                        EndIf
                     Else
                        ; *rowLine = *this\RowFirstVisible( )
                     EndIf
                  ElseIf mouse( )\y > mouse( )\press_y + *this\inner_y( ) And mouse( )\y > *this\inner_y( ) + *this\inner_height( )
                     If *this\RowLastVisible( ) And Not bar_in_stop_( *this\scroll\v\bar )
                        ChangeCurrentElement( *this\__lines( ), *this\RowLastVisible( ))
                        *rowLine = NextElement( *this\__lines( ) )
                        
                        If *rowLine
                           row_scroll_y_( *this, *rowLine )
                        EndIf
                     Else
                        ; *rowLine = *this\RowLastVisible( )
                     EndIf
                  EndIf
               EndIf
            Else
               If event = #__event_MouseMove
                  If *this\enter = #False
                     *rowLine = #Null
                  EndIf
               EndIf
            EndIf
            
            ; change enter/leave state
            If *this\LineEntered( ) <> *rowLine 
               ; leave state
               If *this\LineEntered( )
                  If *this\LineEntered( )\_enter
                     *this\LineEntered( )\_enter = #False
                     
                     If *this\LineEntered( )\ColorState( ) = #__s_1
                        *this\LineEntered( )\ColorState( ) = #__s_0
                     EndIf
                     
                     If dragged = #PB_Drag_Update
                        ;Debug "le - "
                        
                        If *this\LineEntered( ) And *this\LinePressed( )
                           If mouse_y > ( *this\LineEntered( )\y + *this\LineEntered( )\height / 2 )
                              If *this\LineEntered( ) = *this\LinePressed( )
                                 If test_edit_text
                                    Debug " le bottom  set - Pressed  " +" "+ *this\LineEntered( )\text\string
                                 EndIf
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_last )
                                 edit_sel_text_( *this, *this\LineEntered( ))
                              ElseIf *this\LineEntered( )\lindex < *this\LinePressed( )\lindex
                                 If test_edit_text
                                    Debug "  ^le top remove - " +" "+ *this\LineEntered( )\text\string
                                 EndIf
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_remove )
                                 edit_sel_text_( *this, SelectElement(*this\__lines( ), *this\LineEntered( )\lindex + 1))
                              Else
                                 If test_edit_text
                                    Debug " le bottom  set - " +" "+ *this\LineEntered( )\text\string
                                 EndIf
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_set )
                                 edit_sel_text_( *this, *this\LineEntered( ))
                              EndIf
                           Else
                              If *this\LineEntered( ) = *this\LinePressed( )
                                 If test_edit_text
                                    Debug " le top remove - Pressed  " +" "+ *this\LineEntered( )\text\string
                                 EndIf
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_first )
                                 edit_sel_text_( *this, *this\LineEntered( ))
                              ElseIf *this\LineEntered( )\lindex > *this\LinePressed( )\lindex
                                 If test_edit_text
                                    Debug "  le top remove - " +" "+ *this\LineEntered( )\text\string
                                 EndIf
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_remove )
                                 edit_sel_text_( *this, SelectElement(*this\__lines( ), *this\LineEntered( )\lindex - 1))
                              Else
                                 If test_edit_text
                                    Debug " ^le bottom  set - " +" "+ *this\LineEntered( )\text\string
                                 EndIf
                                 edit_sel_string_( *this, *this\LineEntered( ), #__sel_to_set )
                                 edit_sel_text_( *this, *this\LineEntered( ))
                              EndIf
                           EndIf
                        EndIf
                        
                     EndIf
                     
                  EndIf
               EndIf
               
               ; Debug "lines "+*rowLine+" "+*this\LineEntered( )
               *this\LineEntered( ) = *rowLine
               
               ; enter state
               If Not a_index( )
                  If *this\enter
                     If *rowLine And 
                        *rowLine\_enter = 0
                        *rowLine\_enter = 1
                        
                        If *rowLine\ColorState( ) = #__s_0
                           *rowLine\ColorState( ) = #__s_1
                        EndIf
                        
                        If dragged = #PB_Drag_Update
                           ; Debug "en - "
                           
                           If *this\LineFocused( ) <> *rowLine
                              *this\LineFocused( ) = *rowLine
                              *this\edit_caret_0( ) = edit_make_caret_position( *this, *rowLine )
                              *this\edit_caret_1( ) = *this\edit_caret_0( ) + *rowLine\text\pos
                              
                              ; это на тот случай если резко выделили строки
                              ; чтобы не пропустить некоторые из них
                              If *this\text\multiLine 
                                 If *this\LinePressed( )
                                    PushListPosition( *this\__lines( ) )
                                    ForEach *this\__lines( ) 
                                       ;If *this\__lines( )\visible
                                       If Bool(( *this\LinePressed( )\lindex <= *this\__lines( )\lindex And *rowLine\lindex >= *this\__lines( )\lindex ) Or ; верх
                                               ( *this\LinePressed( )\lindex >= *this\__lines( )\lindex And *rowLine\lindex <= *this\__lines( )\lindex ))   ; вниз
                                          
                                          If *this\__lines( )\lindex <> *this\LinePressed( )\lindex And
                                             *this\__lines( )\lindex <> *rowLine\lindex
                                          Else
                                             Continue
                                          EndIf
                                          
                                          
                                          Debug ""+*this\__lines( )\lindex +" - "+ Str(*this\__lines( )\text\edit[2]\width-*this\__lines( )\selector) +" "+ *this\__lines( )\text\width
                                          If Not *this\__lines( )\text\edit[2]\width ; -*this\__lines( )\selector <> *this\__lines( )\text\width
                                                                                     ;Debug *this\__lines( )\lindex
                                             edit_sel_string_( *this, *this\__lines( ), #__sel_to_set )
                                             ;  *this\root\repaint = 1
                                          EndIf
                                          
                                       Else
                                          
                                          ;If Not *this\__lines( )\press
                                          If *this\__lines( )\text\edit[2]\width <> 0
                                             edit_sel_string_( *this, *this\__lines( ), #__sel_to_remove )
                                          EndIf
                                          ;EndIf
                                          
                                       EndIf
                                       ;EndIf
                                    Next
                                    PopListPosition( *this\__lines( ) )
                                 EndIf
                              EndIf
                              
                              ;\\ 
                              edit_sel_string_( *this, *rowLine )
                              edit_sel_text_( *this, *rowLine )
                           EndIf 
                        EndIf
                     EndIf
                  EndIf
               EndIf
               ;
            Else
               If dragged = #PB_Drag_Update
                  If *this\LinePressed( ) And *this\LineFocused( ) And *this\LineEntered( )
                     
                     *this\edit_caret_0( ) = edit_make_caret_position( *this, *this\LineEntered( ) )
                     If *this\edit_caret_1( ) <> *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                        *this\edit_caret_1( ) = *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                        edit_sel_string_( *this, *this\LineEntered( ) )
                        edit_sel_text_( *this, *this\LineEntered( ) )
                     EndIf
                  EndIf
                  ;                 Else
                  ;                    If *this\LineEntered( )
                  ;                       *this\edit_caret_0( ) = edit_make_caret_position( *this, *this\LineEntered( ) )
                  ;                       ;Debug *this\edit_caret_0( )
                  ;                       
                  ;                       If *this\edit_caret_1( ) <> *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                  ;                          *this\edit_caret_1( ) = *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                  ;                          *this\edit_caret_2( ) = *this\edit_caret_1( )
                  ;                          
                  ;                          edit_sel_string_( *this, *this\LineEntered( ) )
                  ;                          edit_sel_text_( *this, *this\LineEntered( ) )
                  ;                       EndIf
                  ;                    EndIf  
               EndIf
            EndIf
            
            
            ;
            If event = #__event_Focus
               If *this\text\multiline
                  PushListPosition( *this\__lines( ) )
                  ForEach *this\__lines( )
                     If *this\__lines( )\_focus
                        If *this\__lines( )\ColorState( ) = #__s_3
                           *this\__lines( )\ColorState( ) = #__s_2
                           
                           *this\root\repaint = 1
                        EndIf
                     EndIf
                  Next
                  PopListPosition( *this\__lines( ) )
               Else
                  If Not MouseButtonPress( )
                     
                     *this\LineFocused( )      = SelectElement( *this\__lines( ), 0 )
                     *this\LinePressed( )      = *this\LineFocused( )     
                     *this\LineEntered( )      = *this\LineFocused( )     
                     
                     *this\LineFocusedIndex( ) = 0
                     *this\LinePressedIndex( ) = 0
                     
                     *this\edit_caret_0( ) = 0
                     *this\edit_caret_1( ) = *this\edit_caret_0( )
                     *this\edit_caret_2( ) = *this\edit_caret_0( )
                     
                     ; select first and last items
                     ;*this\LineFocused( )      = SelectElement( *this\__lines( ), 0 )
                     *this\LineFocusedIndex( ) = 0
                     *this\LinePressedIndex( ) = 0
                     
                     edit_sel_text_( *this, #PB_All )
                     
                     ;                   
                     *this\WidgetChange( ) = 1
                     ;
                     *this\TextChange( ) =- 99
                     
                     ;                   *this\LineFocused( )      = 0
                     ;                   *this\LinePressed( )      = *this\LineFocused( )     
                     ;                   *this\LineEntered( )      = *this\LineFocused( )     
                  EndIf
                  
               EndIf
            EndIf
            
            ;
            If event = #__event_LostFocus
               PushListPosition( *this\__lines( ) )
               ForEach *this\__lines( )
                  If *this\__lines( )\_focus
                     If *this\__lines( )\ColorState( ) = #__s_2
                        *this\__lines( )\ColorState( ) = #__s_3
                        
                        *this\root\repaint = 1
                     EndIf
                  EndIf
               Next
               PopListPosition( *this\__lines( ) )
            EndIf
            
            ;
            If event = #__event_Down
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  ; windows type
                  If Not *this\text\multiline
                     If *this\text\len <> *this\text\edit[2]\len
                        *this\LineEntered( )      = SelectElement( *this\__lines( ), 0 )
                     EndIf
                  EndIf
                  
                  If *this\LineEntered( )
                     *this\LinePressed( ) = *this\LineEntered( )
                     
                     If *this\LinePressed( )\press = #False
                        *this\LinePressed( )\press = #True
                     EndIf
                     
                     If *this\LineFocused( ) <> *this\LineEntered( )
                        PushListPosition( *this\__lines( ) )
                        ForEach *this\__lines( )
                           If *this\__lines( )\_focus <> 0
                              *this\__lines( )\_focus = 0
                           EndIf
                           
                           If *this\__lines( )\ColorState( ) <> #__s_0
                              *this\__lines( )\ColorState( ) = #__s_0
                           EndIf
                        Next
                        PopListPosition( *this\__lines( ) )
                        
                        *this\LineFocused( )      = *this\LineEntered( )
                        *this\LineFocusedIndex( ) = *this\LineFocused( )\lindex
                        
                        If *this\LineFocused( )\_focus = 0
                           *this\LineFocused( )\_focus = 1
                        EndIf
                        *this\LineFocused( )\ColorState( ) = #__s_2
                     EndIf
                     
                     
                     If mouse( )\click = 1
                        *this\edit_caret_0( ) = edit_make_caret_position( *this, *this\LineEntered( ) )
                        
                        If *this\edit_caret_1( ) <> *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                           *this\edit_caret_1( ) = *this\edit_caret_0( ) + *this\LineEntered( )\text\pos
                           *this\edit_caret_2( ) = *this\edit_caret_1( )
                           
                           *this\LinePressedIndex( )            = *this\LineEntered( )\lindex ;????
                           *this\LineEntered( )\edit_caret_1( ) = *this\edit_caret_1( ) - *this\LineEntered( )\text\pos
                           
                           ;
                           *this\text\caret\word = GetWord( *this\LineEntered( )\text\string, *this\LineEntered( )\text\len, *this\text\caret\pos )
                           ;
                           edit_sel_reset_( *this )
                           
                           edit_sel_string_( *this, *this\LineEntered( ) )
                           edit_sel_text_( *this, *this\LineEntered( ) )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;
            If event = #__event_Left2Click
               ; Debug "edit - Left2Click"
               If *this\LineEntered( )
                  *this\edit_caret_1( ) = edit_sel_stop_word( *this, *this\edit_caret_0( ), *this\LineEntered( ) )
                  *this\edit_caret_2( ) = edit_sel_start_word( *this, *this\edit_caret_0( ) + 1, *this\LineEntered( ) )
                  ;
                  edit_sel_string_( *this, *this\LineEntered( ) )
                  edit_sel_text_( *this, *this\LineEntered( ) )
               EndIf
            EndIf
            
            ;
            If event = #__event_Left3Click
               ; Debug "edit - Left3Click"
               If *this\LineEntered( )
                  *this\edit_caret_2( ) = *this\LineEntered( )\text\pos
                  *this\edit_caret_1( ) = *this\LineEntered( )\text\pos + *this\LineEntered( )\text\len
                  ;
                  edit_sel_string_( *this, *this\LineEntered( ) )
                  edit_sel_text_( *this, *this\LineEntered( ) )
               EndIf
            EndIf
            
            ;
            If event = #__event_Up
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *this\LinePressed( )
                     If *this\LinePressed( )\press = #True
                        *this\LinePressed( )\press = #False
                        
                        If *this\LinePressed( )\_focus = 0
                           If *this\LinePressed( )\_enter
                              *this\LinePressed( )\ColorState( ) = #__s_1
                           Else
                              *this\LinePressed( )\ColorState( ) = #__s_0
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ edit key events
            If event = #__event_Input Or
               event = #__event_KeyDown Or
               event = #__event_KeyUp
               
               DoKeyEvent_Lines( *this, *this\__lines( ), event )
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.l DoKeyEvent_Rows( *this._s_WIDGET, List  *rows._s_ROWS( ), event.l )
         Protected result, from = - 1
         Static cursor_change, Down, *row_selected._s_ROWS
         
         With *this
            Select event
               Case #__event_KeyDown
                  If *this\text\editable
                     Select keyboard( )\key
                        Case #PB_Shortcut_PageUp
                           If bar_PageChange( *this\scroll\v, 0 )
                              *this\WidgetChange( ) = 1
                              result                = 1
                           EndIf
                           
                        Case #PB_Shortcut_PageDown
                           If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\end )
                              *this\WidgetChange( ) = 1
                              result                = 1
                           EndIf
                           
                        Case #PB_Shortcut_Up,
                             #PB_Shortcut_Home
                           If *this\RowFocused( )
                              If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                                 ( keyboard( )\key[1] & #PB_Canvas_Control )
                                 If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos - DPIScaled(18) )
                                    *this\WidgetChange( ) = 1
                                    result                = 1
                                 EndIf
                                 
                              ElseIf *this\RowFocused( )\rindex > 0
                                 ; select modifiers key
                                 If ( keyboard( )\key = #PB_Shortcut_Home Or
                                      ( keyboard( )\key[1] & #PB_Canvas_Alt ))
                                    SelectElement( *rows( ), 0 )
                                 Else
                                    ; select prev rows
                                    If SelectElement( *rows( ), *this\RowFocused( )\rindex - 1 )
                                       If *rows( )\hide
                                          While PreviousElement( *rows( ) )
                                             If Not *rows( )\hide
                                                Break
                                             EndIf
                                          Wend
                                       EndIf
                                    EndIf
                                 EndIf
                                 
                                 ;
                                 result = SetState( *this, *rows( )\rindex )
                              EndIf
                           EndIf
                           
                        Case #PB_Shortcut_Down,
                             #PB_Shortcut_End
                           If *this\RowFocused( )
                              If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                                 ( keyboard( )\key[1] & #PB_Canvas_Control )
                                 
                                 If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos + DPIScaled(18) )
                                    *this\WidgetChange( ) = 1
                                    result                = 1
                                 EndIf
                                 
                              ElseIf *this\RowFocused( )\rindex < ( *this\countitems - 1 )
                                 ; select modifiers key
                                 If ( keyboard( )\key = #PB_Shortcut_End Or
                                      ( keyboard( )\key[1] & #PB_Canvas_Alt ))
                                    SelectElement( *rows( ), ( *this\countitems - 1 ))
                                 Else
                                    ; select next rows
                                    If SelectElement( *rows( ), *this\RowFocused( )\rindex + 1 )
                                       If *rows( )\hide
                                          While NextElement( *rows( ) )
                                             If Not *rows( )\hide
                                                Break
                                             EndIf
                                          Wend
                                       EndIf
                                    EndIf
                                 EndIf
                                 
                                 ;
                                 result = SetState( *this, *rows( )\rindex )
                              EndIf
                           EndIf
                           
                        Case #PB_Shortcut_Left
                           If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                              ( keyboard( )\key[1] & #PB_Canvas_Control )
                              
                              If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos - ( *this\scroll\h\bar\page\end / DPIScaled(10) ))
                                 *this\WidgetChange( ) = 1
                              EndIf
                              result = 1
                           EndIf
                           
                        Case #PB_Shortcut_Right
                           If ( keyboard( )\key[1] & #PB_Canvas_Alt ) And
                              ( keyboard( )\key[1] & #PB_Canvas_Control )
                              
                              If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos + ( *this\scroll\h\bar\page\end / DPIScaled(10) ))
                                 *this\WidgetChange( ) = 1
                              EndIf
                              result = 1
                           EndIf
                           
                     EndSelect
                     
                  EndIf
                  
            EndSelect
         EndWith
         
         ProcedureReturn result
      EndProcedure
      
      Procedure DoEvent_Rows( *this._s_WIDGET, List *rows._s_ROWS( ), event.l, mouse_x.l = - 1, mouse_y.l = - 1 )
         Protected dragged = Bool( mouse( )\dragstart And *this\press )
         Protected repaint, *row._s_ROWS
         mouse_x - *this\inner_x( ) ; - *this\scroll_x( )
         mouse_y - *this\inner_y( ) - *this\scroll_y( )
         
         ;
         If *this\row
            ;Debug ""+*this\class +" "+ classFromEvent(event)
            
            ;\\ search at point entered items
            If Not mouse( )\drop Or *this\drop
               If MouseEnter( *this )
                  If ListSize( *this\RowVisibleList( ) )
                     If *this\RowEntered( ) And
                        *this\RowEntered( )\visible And
                        Not *this\RowEntered( )\hide And
                        is_atpoint_( *this\RowEntered( ), mouse_x, mouse_y )
                        *row = *this\RowEntered( )
                     Else
                        LastElement( *this\RowVisibleList( ))
                        Repeat
                           If *this\RowVisibleList( )\visible And
                              Not *this\RowVisibleList( )\hide And
                              is_atpoint_( *this\RowVisibleList( ), mouse_x, mouse_y )
                              *row = *this\RowVisibleList( )
                              Break
                           EndIf
                        Until PreviousElement( *this\RowVisibleList( )) = #False
                     EndIf
                     
                  ElseIf ListSize( *rows( ) )
                     If *this\RowEntered( ) And
                        *this\RowEntered( )\visible And
                        Not *this\RowEntered( )\hide And
                        is_atpoint_( *this\RowEntered( ), mouse_x, mouse_y )
                        *row = *this\RowEntered( )
                     Else
                        LastElement( *rows( ))
                        Repeat
                           If *rows( )\visible And
                              Not *rows( )\hide And
                              is_atpoint_( *rows( ), mouse_x, mouse_y )
                              *row = *rows( )
                              Break
                           EndIf
                        Until PreviousElement( *rows( )) = #False
                     EndIf
                  EndIf
                  
               Else
                  
                  If dragged 
                     ;                      If event = #__event_MouseMove
                     ;                         If Not a_index( )
                     ;                            If is_inside_( *this\screen_x( ), *this\screen_width( ), mouse( )\x )
                     ;                               If mouse( )\y <= mouse( )\delta\y + *this\inner_y( ) And mouse( )\y <= *this\inner_y( )
                     ;                                  ;
                     ;                                  If *this\RowFirstVisible( ) And Not bar_in_start_( *this\scroll\v\bar )
                     ;                                     ChangeCurrentElement( *rows( ), *this\RowFirstVisible( ))
                     ;                                     *row = PreviousElement( *rows( ) )
                     ;                                     
                     ;                                     If *row
                     ;                                        row_scroll_y_( *this, *row )
                     ;                                     EndIf
                     ;                                  Else
                     ;                                     *row = *this\RowFirstVisible( )
                     ;                                  EndIf
                     ;                               ElseIf mouse( )\y >= mouse( )\delta\y + *this\inner_y( ) And
                     ;                                      mouse( )\y >= *this\inner_y( ) + *this\inner_height( )
                     ;                                  ;
                     ;                                  If *this\RowLastVisible( ) And Not bar_in_stop_( *this\scroll\v\bar )
                     ;                                     ChangeCurrentElement( *rows( ), *this\RowLastVisible( ))
                     ;                                     NextElement( *rows( ) )
                     ;                                     ;*row = *rows( )
                     ;                                     If *row And *this\scroll\v
                     ;                                        Debug *row\height
                     ; ;                                      row_scroll_y_( *this, *row )
                     ;                                     EndIf
                     ;                                  Else
                     ;                                     *row = *this\RowLastVisible( )
                     ;                                  EndIf
                     ;                               EndIf
                     ;                            EndIf
                     ;                         EndIf
                     ;                      EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ change enter/leave state
            If *this\RowEntered( ) <> *row
               If mouse( )\dragstart And *this\RowFocused( ) And  *this\RowFocused( )\press
                  If Not MouseButtonPress( )
                     ;Debug 555
                     *this\RowFocused( )\press = 0
                  EndIf
                  ProcedureReturn 
               EndIf
               
               Protected *rowleaved._s_ROWS
               If *this\RowEntered( )
                  *rowleaved = *this\RowEntered( )
               EndIf
               ;
               *this\RowLeaved( )  = *this\RowEntered( )
               *this\RowEntered( ) = *row
               ; 
               ;\\ leave state
               ; not mouse button up event
               If Not ( MouseButtons( ) And Not MouseButtonPress( )) ;And Not (MouseButtonPress( ) And Not *row)
                  If *rowleaved And 
                     *rowleaved\_enter
                     *rowleaved\_enter = 0
                     
                     If Not EnteredButton( ) And ( *this\press And Not mouse( )\drop ) And Not *this\mode\multiSelect And Not *this\mode\clickSelect
                        ;
                        If *rowleaved\ColorState( ) = #__s_2
                           If *rowleaved = *this\RowFocused( )
                              *rowleaved\ColorState( ) = #__s_3
                           Else
                              *rowleaved\ColorState( ) = #__s_0
                           EndIf
                        EndIf
                     Else
                        If *rowleaved\ColorState( ) = #__s_1
                           *rowleaved\ColorState( ) = #__s_0
                        EndIf
                        ; 
                        If *rowleaved\_focus
                           If *rowleaved\ColorState( ) <> #__s_2
                              *rowleaved\ColorState( ) = #__s_3
                              *this\root\repaint = 1
                           EndIf
                        EndIf
                     EndIf
                     
                     ; Debug " leave-item status change"
                     DoEvents( *this, #__event_StatusChange, *rowleaved\rindex, -*rowleaved\ColorState( ) )
                  EndIf
               EndIf
               
               ;
               ;\\ enter state
               If *row
                  ;\\
                  If *this\mode\multiSelect
                     If *this\RowPressed( )
                        ;-
                        Macro multi_select_rows_( _this_, _current_row_ )
                           PushListPosition( *this\__rows( ))
                           ForEach *this\__rows( )
                              If *this\__rows( )\visible
                                 If Bool(( *this\RowPressed( )\rindex >= *this\__rows( )\rindex And _current_row_\rindex <= *this\__rows( )\rindex ) Or ; верх
                                         ( *this\RowPressed( )\rindex <= *this\__rows( )\rindex And _current_row_\rindex >= *this\__rows( )\rindex ))   ; вниз
                                    
                                    If *this\__rows( )\ColorState( ) <> #__s_2
                                       *this\__rows( )\ColorState( ) = #__s_2
                                       *this\root\repaint = 1
                                    EndIf
                                    
                                 Else
                                    
                                    If Not *this\__rows( )\press
                                       If *this\__rows( )\ColorState( ) <> #__s_0
                                          *this\__rows( )\ColorState( ) = #__s_0
                                          *this\root\repaint = 1
                                       EndIf
                                    EndIf
                                    
                                 EndIf
                              EndIf
                           Next
                           PopListPosition( *this\__rows( ))
                        EndMacro
                        
                        multi_select_rows_( *this, *row )
                     EndIf
                  EndIf
                  
                  ;\\
                  If *row\_enter = 0
                     *row\_enter = 1
                     
                     If Not EnteredButton( ) And ( *this\press And Not mouse( )\drop ) And ( *this\mode\clickSelect = 0 Or ( *this\mode\clickSelect And *this\mode\multiSelect ))
                        
                        If *row\ColorState( ) <> #__s_2
                           *row\ColorState( ) = #__s_2
                        EndIf
                        
                     Else
                        If *row\ColorState( ) = #__s_0
                           *row\ColorState( ) = #__s_1
                        EndIf
                        ;
                        If *row\_focus
                           If *row\ColorState( ) <> #__s_2
                              *row\ColorState( ) = #__s_1
                           EndIf
                        EndIf
                     EndIf
                     
                     ;\\ update non-focus status
                     If Not ( Not *this\press And *row = *this\RowFocused( ) )
                        DoEvents( *this, #__event_StatusChange, *row\rindex, -*row\ColorState( ) )
                     EndIf
                  EndIf
               EndIf
               ;
            EndIf
            
            ;\\
            If mouse( )\drop
               ; drag & drop state
               If *this\drop
                  If *this\RowEntered( ) And
                     *this\RowEntered( )\_enter
                     
                     If ( mouse_y - *this\RowEntered( )\y ) > *this\RowEntered( )\height / 2
                        If *this\RowEntered( )\_enter <> 1
                           *this\RowEntered( )\_enter = 1
                           ; Debug "-1 (+1)"
                           *this\root\repaint = 1
                        EndIf
                     Else
                        If *this\RowEntered( )\_enter <> - 1
                           *this\RowEntered( )\_enter = - 1
                           ; Debug "+1 (-1)"
                           *this\root\repaint = 1
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;                ;\\
               ;                If Pressed( ) And Pressed( )\row
               ;                   If Pressed( )\RowPressed( )
               ;                      Pressed( )\RowFocusedIndex( ) = Pressed( )\RowPressed( )\rindex
               ;                      
               ;                      If Pressed( )\RowFocused( )
               ;                         Pressed( )\RowFocused( )\_focus = 0
               ;                         Pressed( )\RowFocused( )\ColorState( ) = #__s_0
               ;                      EndIf
               ;                      
               ;                      Pressed( )\RowFocused( )       = Pressed( )\RowPressed( )
               ;                      Pressed( )\RowPressed( )\press = 0
               ;                      Pressed( )\RowPressed( )       = 0
               ;                      
               ;                      If Pressed( )\RowFocused( )
               ;                         Pressed( )\RowFocused( )\_focus = 1
               ;                         Pressed( )\RowFocused( )\ColorState( ) = #__s_2
               ;                      EndIf
               ;                   EndIf
               ;                EndIf
            EndIf
            
            ;\\ ok
            If event = #__event_Focus
               If *this\mode\multiSelect Or *this\mode\clickSelect
                  PushListPosition( *rows( ) )
                  ForEach *rows( )
                     If *rows( ) <> *this\RowFocused( )
                        If *rows( )\ColorState( ) = #__s_3
                           *rows( )\ColorState( ) = #__s_2
                           ;
                           ; status-focus
                           DoEvents( *this, #__event_StatusChange, *rows( )\rindex, -*rows( )\ColorState( ))
                        EndIf
                     EndIf
                  Next
                  PopListPosition( *rows( ) )
               EndIf
               
               ;\\
               If *this\RowFocused( ) And 
                  *this\RowFocused( )\_focus  And
                  *this\RowFocused( )\ColorState( ) = #__s_3
                  *this\RowFocused( )\ColorState( ) = #__s_2
                  ;
                  ; status-focus
                  DoEvents( *this, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ))
               EndIf
            EndIf
            
            ;\\ ok
            If event = #__event_LostFocus
               If *this\mode\multiSelect Or *this\mode\clickSelect
                  PushListPosition( *rows( ) )
                  ForEach *rows( )
                     If *rows( ) <> *this\RowFocused( )
                        If *rows( )\ColorState( ) = #__s_2
                           *rows( )\ColorState( ) = #__s_3
                           ;
                           ; status-lostfocus
                           DoEvents( *this, #__event_StatusChange, *rows( )\rindex, -*rows( )\ColorState( ))
                        EndIf
                     EndIf
                  Next
                  PopListPosition( *rows( ) )
               EndIf
               
               ;\\
               If *this\RowFocused( )
                  If *this\RowFocused( )\ColorState( ) = #__s_2
                     *this\RowFocused( )\ColorState( ) = #__s_3
                     ;
                     ; status-lostfocus
                     DoEvents(*this, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ))
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If event = #__event_Down
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *row 
                     If EnteredButton( )
                        ; change collapsed/expanded button state
                        If *row\buttonbox
                           If *row\buttonbox\_enter
                              If *row\buttonbox\checked
                                 ; развернул список
                                 If SetItemState( *this, *row\rindex, (GetItemState(*this, *row\rindex) &~ #PB_Tree_Collapsed) | #PB_Tree_Expanded )
                                    Post( *this, #__event_StatusChange, *row\rindex, #PB_Tree_Expanded )
                                    Post( *this, #__event_ScrollChange )
                                 EndIf
                              Else
                                 ; свернул список
                                 If SetItemState( *this, *row\rindex, (GetItemState(*this, *row\rindex) &~ #PB_Tree_Expanded) | #PB_Tree_Collapsed )
                                    Post( *this, #__event_StatusChange, *row\rindex, #PB_Tree_Collapsed )
                                    Post( *this, #__event_ScrollChange )
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                        
                        ; change box ( option&check )
                        If *row\checkbox
                           If *row\checkbox\_enter
                              ;
                              ; change option box state
                              If *this\mode\optionboxes
                                 If *row\_groupbar
                                    If *row\RowParent( ) 
                                       If *row\_groupbar\RowParent( ) And
                                          *row\_groupbar\checkbox\checked
                                          *row\_groupbar\checkbox\checked = #PB_Checkbox_Unchecked
                                       EndIf
                                    EndIf
                                    ;
                                    If *row\_groupbar\_groupbar <> *row
                                       If *row\_groupbar\_groupbar
                                          *row\_groupbar\_groupbar\checkbox\checked = #PB_Checkbox_Unchecked
                                       EndIf
                                       *row\_groupbar\_groupbar = *row
                                    EndIf
                                 EndIf
                              EndIf
                              ;
                              ; change checked box state
                              set_check_state_( *row\checkbox\checked, *this\mode\threestate )
                           EndIf
                        EndIf
                     Else
                        ;
                        If *this\mode\clickSelect
                           *row\press ! 1
                        Else
                           *row\press = 1
                           ;
                           If *this\mode\multiSelect
                              PushListPosition( *rows( ) )
                              ForEach *rows( )
                                 If *rows( )\ColorState( ) <> #__s_0
                                    *rows( )\ColorState( ) = #__s_0
                                    
                                    If Not *rows( )\_enter
                                       If *rows( )\_focus <> 0
                                          *rows( )\_focus = 0
                                       EndIf
                                    EndIf
                                 EndIf
                              Next
                              PopListPosition( *rows( ) )
                           EndIf
                        EndIf
                        ;
                        *this\RowPressed( ) = *row
                        ;
                        If *row\press
                           If *row\ColorState( ) <> #__s_2
                              *row\ColorState( ) = #__s_2
                              
                              If *this\RowFocused( ) And *this\RowFocused( ) <> *row  
                                 If *this\RowFocused( )\ColorState( ) = #__s_2
                                    *this\RowFocused( )\ColorState( ) = #__s_3
                                    ;
                                    ; status-lostfocus
                                    DoEvents( *this, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ) )
                                 EndIf
                              EndIf
                              ;
                              ; status-change
                              DoEvents(*this, #__event_StatusChange, *row\rindex, -*row\ColorState( ) )
                           EndIf
                        Else
                           *row\ColorState( ) = #__s_1
                           ; status-change
                           DoEvents(*this, #__event_StatusChange, *row\rindex, -*row\ColorState( ) )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If event = #__event_MouseLeave 
               ; это для того чтобы при покидании 
               ; отобразить информацию выбранного итема
               ; не уверен есть ли в этом польза))
               If *this\RowFocused( )
                  If Not MouseButtonPress( ) 
                     DoEvents( *this, #__event_StatusChange, *this\RowFocused( )\rindex, - 1 )
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If event = #__event_DragStart ; Ok
               If *this\RowEntered( )
                  ; *this\RowFocusedIndex( ) = *this\RowEntered( )\rindex
                  ; SetState( *this, *this\RowPressed( )\rindex ) 
               EndIf
            EndIf
            
            ;\\
            If event = #__event_Drop ; Ok
               If *this\RowEntered( )
                  *this\RowFocusedIndex( ) = *this\RowEntered( )\rindex
               EndIf
               ;           If *this\RowEntered( )
               ;             Debug "drop e - "+*this\RowEntered( ) +" "+ *this\RowEntered( )\text\string +" "+ *this\RowEntered( )\press +" "+ *this\RowEntered( )\_enter +" "+ *this\RowEntered( )\_focus
               ;           endif
               ;           If *this\RowPressed( )
               ;             Debug "drop p - "+*this\RowPressed( ) +" "+ *this\RowPressed( )\text\string +" "+ *this\RowPressed( )\press +" "+ *this\RowPressed( )\_enter +" "+ *this\RowPressed( )\_focus
               ;           endif 
               ;           If *this\RowFocused( )
               ;             Debug "drop f - "+*this\RowFocused( ) +" "+ *this\RowFocused( )\text\string +" "+ *this\RowFocused( )\press +" "+ *this\RowFocused( )\_enter +" "+ *this\RowFocused( )\_focus
               ;           EndIf
            EndIf
            
            ;\\
            If event = #__event_Up
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *this\RowPressed( )
                     If Not *this\mode\clickSelect
                        If *this\RowEntered( )
                           SetState( *this, *this\RowEntered( )\rindex ) 
                        Else
                           ; Debug *this\RowFocused( )\ColorState( ) 
                           If *this\RowFocused( ) And
                              *this\RowFocused( )\ColorState( ) = #__s_3
                              *this\RowFocused( )\ColorState( ) = #__s_2
                              ;
                              ; status-focus
                              DoEvents(*this, #__event_StatusChange, *this\RowFocused( )\rindex, -*this\RowFocused( )\ColorState( ))
                           EndIf
                        EndIf
                        ;
                        *this\RowPressed( )\press = 0
                     EndIf
                     ;
                     *this\RowPressed( ) = 0 
                  EndIf
               EndIf
            EndIf
            
            ;\\ key events
            If event = #__event_Input Or
               event = #__event_KeyDown Or
               event = #__event_KeyUp
               
               If *this\row
                  If *this\type = #__type_listview Or
                     *this\type = #__type_Tree Or
                     *this\type = #__type_ListIcon
                     ;
                     DoKeyEvent_Rows( *this, *this\__rows( ), event )
                  EndIf
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure DoEvent_Bar( *this._s_WIDGET, event.l )
         Protected result.b
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         Protected *tab._s_ROWS, mode_type = 0
         Static *lasttab._s_ROWS
         
         
         If *bar
            *SB  = *bar\button
            *BB1 = *bar\button[1]
            *BB2 = *bar\button[2]
         EndIf
         
         If Not MouseButtonPress( )
            If *this\tab
               If *bar
                  Protected mouse_bar_x = mouse( )\x - *this\bar\button\x
                  Protected mouse_bar_y = mouse( )\y - *this\bar\button\y
                  
                  ;\\ get at point tab 
                  If MouseEnter( *this )
                     If ListSize( *this\__tabs( ) )
                        If *this\TabEntered( ) And
                           *this\TabEntered( )\visible And
                           *this\TabEntered( )\hide = 0 And
                           is_atpoint_( *this\TabEntered( ), mouse_bar_x, mouse_bar_y )
                           
                           *tab = *this\TabEntered( )
                        Else
                           ; search entered item
                           LastElement( *this\__tabs( ))
                           Repeat
                              If *this\__tabs( )\visible And
                                 *this\__tabs( )\hide = 0 And
                                 is_atpoint_( *this\__tabs( ), mouse_bar_x, mouse_bar_y )
                                 *tab = *this\__tabs( )
                                 Break
                              EndIf
                           Until Not PreviousElement( *this\__tabs( ))
                        EndIf
                     EndIf
                  EndIf
                  
                  ; change enter/leave state
                  If *this\TabEntered( ) <> *tab 
                     ;\\ leaved tabs
                     If *this\TabEntered( ) 
                        If *this\TabEntered( )\_enter
                           *this\TabEntered( )\_enter = 0
                           
                           If *this\TabEntered( )\ColorState( ) = #__s_1
                              *this\TabEntered( )\ColorState( ) = #__s_0
                           EndIf
                           ;
                           If *this\type = #__type_PopupBar 
                              If *this\TabEntered( )\checked
                                 *this\TabEntered( )\checked = 0
                              EndIf
                           EndIf
                           ;
                           *this\root\repaint = 1
                        EndIf
                     EndIf
                     ;
                     If *tab And *tab\disable
                        *tab = 0    
                     EndIf  
                     *this\TabEntered( ) = *tab
                     
                     ;
                     If *tab
                        If *this\enter 
                           ;\\ entered tabs
                           If Not *tab\_enter And Not *tab\disable
                              *tab\_enter = 1
                              
                              If *tab\ColorState( ) = #__s_0
                                 *tab\ColorState( ) = #__s_1
                              EndIf
                              ;
                              *this\root\repaint = 1
                              ;
                              ;\\ show popup bar
                              If is_bar_( *this ) 
                                 ;
                                 ;\\ change focused tab
                                 If *this\TabFocused( ) <> *tab
                                    If *this\type = #__type_MenuBar 
                                       If *this\TabFocused( )
                                          *this\TabFocused( )\_focus = 0
                                          *this\TabFocused( ) = *tab
                                          ; Debug " menubar focus change "
                                          *this\TabFocused( )\_focus = 1
                                       EndIf
                                    EndIf
                                    If *this\type = #__type_ToolBar 
                                       If *this\TabFocused( )
                                          ; *this\TabFocused( )\_focus = 0
                                          *this\TabFocused( )\checked = 0
                                          *this\TabFocused( ) = *tab
                                       EndIf
                                       If *tab\childrens  
                                          ; Debug " toolbar focus change "
                                          ; *tab\_focus = 1
                                          *this\TabFocused( ) = *tab
                                          *this\TabFocused( )\checked = 1
                                       EndIf
                                    EndIf
                                    If *this\type = #__type_PopupBar 
                                       If *this\TabFocused( )
                                          ; *this\TabFocused( )\_focus = 0
                                          *this\TabFocused( )\checked = 0
                                       EndIf
                                       ; Debug " popupbar focus change "
                                       *this\TabFocused( ) = *tab
                                       ; *this\TabFocused( )\_focus = 1
                                       *this\TabFocused( )\checked = 1
                                    EndIf
                                 Else
                                    If *this\type = #__type_PopupBar 
                                       If *this\TabFocused( )\checked = 0
                                          *this\TabFocused( )\checked = 1
                                          ; Debug "----- popup enter "
                                       EndIf
                                    EndIf
                                 EndIf
                                 ;
                                 If PopupBar( ) 
                                    If PopupBar( ) <> *this
                                       If PopupBar( ) <> *tab\popupbar
                                          If IsPopupChild( PopupBar( ), *this )
                                             ; Debug " Hide PopupMenuBar - " + PopupBar( )\class +" "+ *this\class
                                             
                                             If test_display
                                                Debug "1?   " + HidePopupBar( PopupBar( ) )
                                             Else
                                                HidePopupBar( PopupBar( ) )
                                             EndIf
                                          ElseIf *Tab\childrens And ( *tab\_focus Or *tab\checked )
                                             If test_display
                                                Debug "2?   "+HidePopupBar( PopupBar( ) )
                                             Else
                                                HidePopupBar( PopupBar( ) )
                                             EndIf
                                             PostReDraw( PopupBar( )\root )
                                          EndIf
                                       EndIf
                                    EndIf
                                 EndIf
                                 ; 
                                 If *tab\popupbar And *tab\popupbar\hide
                                    If *bar\vertical
                                       ; Debug "  show POPUPMENUBARS "+ClassFromEvent(event)
                                       DisplayPopupBar( *tab\popupbar, *this )
                                    ElseIf ( *tab\_focus Or *tab\checked )
                                       ; Debug "  show TOOLBAR "+ClassFromEvent(event)
                                       DisplayPopupBar( *tab\popupbar, *this )
                                    EndIf
                                 EndIf
                                 ;
                              EndIf
                           EndIf
                        EndIf
                        ;
                     Else
                        ; 
                        If *this\type = #__type_ToolBar 
                           If PopupBar( )
                              If *this\TabFocused( )
                                 If *this\TabFocused( )\childrens 
                                    If is_inside_( DesktopScaledY(GadgetY( *this\root\canvas\gadget, #PB_Gadget_ScreenCoordinate )) +*this\y, *this\height + PopupBar()\height , DesktopMouseY( ) ) And
                                       is_inside_( DesktopScaledX(GadgetX( *this\root\canvas\gadget, #PB_Gadget_ScreenCoordinate )) +*this\x, *this\TabFocused( )\x+*this\TabFocused( )\width, DesktopMouseX( ) )
                                    Else
                                       *this\TabFocused( )\_focus = 0
                                       *this\TabFocused( )\checked = 0
                                       *this\TabFocused( ) = 0
                                       If test_display
                                          Debug "3?   "+HidePopupBar( PopupBar( ) )
                                       Else
                                          HidePopupBar( PopupBar( ) )
                                       EndIf
                                       PopupBar( ) = 0
                                    EndIf
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                        ;
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;
         If event = #__event_MouseLeave
            If *this\TabFocused( )
               If *this\TabFocused( )\childrens 
                  If *this\type = #__type_ToolBar
                     If PopupBar( )
                        If is_inside_( DesktopScaledY(GadgetY( *this\root\canvas\gadget, #PB_Gadget_ScreenCoordinate )) +*this\y, *this\height + PopupBar()\height , DesktopMouseY( ) ) And
                           is_inside_( DesktopScaledX(GadgetX( *this\root\canvas\gadget, #PB_Gadget_ScreenCoordinate )) +*this\x, *this\TabFocused( )\x+*this\TabFocused( )\width, DesktopMouseX( ) )
                        Else
                           *this\TabFocused( )\_focus = 0
                           *this\TabFocused( )\checked = 0
                           *this\TabFocused( ) = 0
                           If test_display
                              Debug "4?   "+HidePopupBar( PopupBar( ) )
                           Else
                              HidePopupBar( PopupBar( ) )
                           EndIf
                           PopupBar( ) = 0
                        EndIf
                     EndIf
                  EndIf
               Else
                  If *this\menu\display
                     *this\TabFocused( )\_focus = 0
                     *this\TabFocused( )\checked = 0
                     *this\TabFocused( ) = 0
                  EndIf
               EndIf
            EndIf
         EndIf
         ;
         If event = #__event_LostFocus
            ;                If PopupBar( ) = *this
            ;                   If PopupBar( )\enter = 0 
            ;                      Debug "5?   "+HidePopupBar( PopupBar( ) )
            ;                   EndIf
            ;                   PopupBar( ) = 0
            ;                EndIf
         EndIf
         ;
         If event = #__event_Up
            If MouseButtons( ) & #PB_Canvas_LeftButton
               If Not PopupBar( )
                  If *this\TabEntered( ) And
                     *this\TabEntered( )\childrens 
                     ;
                     If *this\TabFocused( )
                        *this\TabFocused( )\_focus = 0
                        *this\TabFocused( ) = 0
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         ;
         If event = #__event_Down
            If *this\tab
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  *tab = *this\TabEntered( )
                  
                  If PopupBar( ) 
                     If PopupBar( )\menu\display And Not (*this\type = #__type_ToolBar And *tab And *tab\childrens)
                        ;                         If Not IsPopupChild( PopupBar( ), *this )
                        ;                            If PopupBar( )\menu\parent And 
                        ;                               PopupBar( )\menu\parent\TabFocused( )
                        ;                               PopupBar( )\menu\parent\TabFocused( )\_focus = 0
                        ;                               PopupBar( )\menu\parent\TabFocused( )\checked = 0
                        ;                               PopupBar( )\menu\parent\TabFocused( ) = 0
                        ;                               PostReDraw( PopupBar( )\menu\parent\root )
                        ;                            EndIf
                        ;                         EndIf
                        If test_display
                           Debug "6?   " + HidePopupBar( PopupBar( ) )
                        Else
                           HidePopupBar( PopupBar( ) )
                        EndIf
                        PostReDraw( PopupBar( )\root )
                        PopupBar( ) = 0
                     EndIf
                  EndIf
                  
                  If *this\type = #__type_MenuBar
                     If *tab And Not *tab\disable 
                        If Not *this\TabFocused( )
                           If *this\TabFocused( ) <> *tab
                              If *this\TabFocused( )
                                 *this\TabFocused( )\_focus = 0
                                 ; *this\TabFocused( )\checked = 0
                                 *this\TabFocused( ) = 0 
                              EndIf
                              ;
                              *this\TabFocused( ) = *tab
                              *this\TabFocused( )\_focus ! 1
                              ; *this\TabFocused( )\checked ! 1
                           Else
                              ; *this\TabFocused( )\checked = 0
                              *this\TabFocused( )\_focus = 0 
                              *this\TabFocused( ) = 0
                           EndIf
                           ;
                           If *tab\childrens 
                              DisplayPopupBar( *tab\popupbar, *this )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  If Not (*Tab And *Tab\disable And *Tab\childrens )
                     ;\\
                     *this\TabPressed( ) = *tab
                     
                     ;                                              ;
                     If Not ( EnteredButton( ) And 
                              EnteredButton( )\press And 
                              ( EnteredButton( ) = *this\bar\button[1] Or 
                                EnteredButton( ) = *this\bar\button[2] ) )
                        ;
                        If *tab And
                           *tab\press = #False
                           *tab\press = #True
                           
                           *tab\ColorState( ) = #__s_2
                           *this\root\repaint = 1
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If event = #__event_LeftClick
            If *this\type = #__type_TabBar
               If Not ( *this\TabPressed( ) And *this\TabPressed( )\disable )
                  Protected state = bar_tab_GetItemIndex( *this, *this\TabPressed( ) )
                  ;
                  If state >= 0 
                     If SetState( *this, state ) 
                        result = #True
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ bar button event
         If *bar
            If event = #__event_Down
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *bar
                     If EnteredButton( ) And
                        EnteredButton( )\press = #False And
                        EnteredButton( )\disable = #False And
                        EnteredButton( )\ColorState( ) <> #__s_3 ; change the color state of non-disabled buttons
                        
                        PressedButton( )       = EnteredButton( )
                        PressedButton( )\press = #True
                        
                        If Not ( *this\type = #__type_Track Or
                                 ( *this\type = #__type_Splitter And PressedButton( ) <> *SB ))
                           PressedButton( )\ColorState( ) = #__s_2
                        EndIf
                        
                        ; left&top button
                        If ( *BB2\press And *bar\invert ) Or
                           ( *BB1\press And Not *bar\invert )
                           
                           If *this\type = #__type_spin
                              If bar_PageChange( *this, *bar\page\pos - *this\scroll\increment )
                                 result = #True
                              EndIf
                           Else
                              If bar_ThumbChange( *this, *bar\thumb\pos - *this\scroll\increment )
                                 result = #True
                              EndIf
                           EndIf
                           
                           ; right&bottom button
                        ElseIf ( *BB1\press And *bar\invert ) Or
                               ( *BB2\press And Not *bar\invert )
                           
                           If *this\type = #__type_spin
                              If bar_PageChange( *this, *bar\page\pos + *this\scroll\increment )
                                 result = #True
                              EndIf
                           Else
                              If bar_ThumbChange( *this, *bar\thumb\pos + *this\scroll\increment )
                                 result = #True
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            If event = #__event_Up
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If PressedButton( ) And
                     PressedButton( )\press = #True
                     PressedButton( )\press = #False
                     
                     If PressedButton( )\disable = #False And
                        PressedButton( )\ColorState( ) <> #__s_3
                        
                        ; change color state
                        If PressedButton( )\ColorState( ) = #__s_2 And
                           Not ( *this\type = #__type_Track Or
                                 ( *this\type = #__type_Splitter And PressedButton( ) <> *SB ))
                           
                           If PressedButton( )\_enter
                              PressedButton( )\ColorState( ) = #__s_1
                           Else
                              PressedButton( )\ColorState( ) = #__s_0
                           EndIf
                        EndIf
                        
                        result = #True
                     EndIf
                     
                     PressedButton( ) = 0
                  EndIf
                  
                  ;\\
                  If *this\TabPressed( )
                     If *this\TabPressed( )\press = #True
                        *this\TabPressed( )\press = #False
                        
                        If *this\TabPressed( )\_enter
                           *this\TabPressed( )\ColorState( ) = #__s_1
                        Else
                           *this\TabPressed( )\ColorState( ) = #__s_0
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            If event = #__event_MouseMove
               If *SB\press
                  If *bar\vertical
                     If bar_ThumbChange( *this, ( mouse( )\y - mouse( )\press_y ))
                        result = #True
                     EndIf
                  Else
                     If bar_ThumbChange( *this, ( mouse( )\x - mouse( )\press_x ))
                        result = #True
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result 
      EndProcedure
      
      
      Procedure DoEvents( *this._s_WIDGET, event.l, *button = #PB_All, *data = #Null )
         If Not *this
            ProcedureReturn 0
         EndIf
         ;
         ;\\
         If event = #__event_Focus
            If MouseButtonPress( )
               SetForeground( *this )
            EndIf
         EndIf
         ;
         ;\\ combobox button state
         If event = #__event_MouseEnter
            If *this\parent
               If *this\parent\stringbar
                  If *this\parent\combobutton
                     If *this\parent\combobutton\enter = 1
                        *this\parent\combobutton\enter = 0
                        If *this\ColorState( ) = 1
                           *this\ColorState( ) = 0
                        EndIf
                        *this\root\repaint = 1
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         If *this\combobutton
            If is_atpoint_( *this\combobutton, mouse( )\x, mouse( )\y )
               If *this\combobutton\enter = 0
                  *this\combobutton\enter = 1
                  If *this\ColorState( ) = 0
                     *this\ColorState( ) = 1
                  EndIf
                  *this\root\repaint = 1
               EndIf
            Else
               If *this\combobutton\enter = 1
                  *this\combobutton\enter = 0
                  If *this\ColorState( ) = 1
                     *this\ColorState( ) = 0
                  EndIf
                  *this\root\repaint = 1
               EndIf
            EndIf
         EndIf
         
         ;
         ;\\ update [entered position and current cursor] state
         If *this\enter > 0
            If Bool( is_atpoint_( *this, mouse( )\x, mouse( )\y, [#__c_draw] ) And
                     is_atpoint_( *this, mouse( )\x, mouse( )\y, [#__c_inner] ) And
                     Not ( *this\type = #__type_Splitter And is_atpoint_( *this\bar\button, mouse( )\x, mouse( )\y ) = 0 ) And
                     Not ( *this\type = #__type_HyperLink And is_atpoint_( *this, mouse( )\x - *this\frame_x( ), mouse( )\y - *this\frame_y( ), [#__c_Required] ) = 0 ))
               ;
               If *this\enter = 1
                  *this\enter = 2
                  mouse( )\data | #__mouse_update
                  DoChangeCursor( *this )
                  *this\root\repaint = 1
               EndIf
            Else
               If *this\enter = 1
                  If event = #__event_MouseEnter
                     DoChangeCursor( *this )
                  EndIf
               Else
                  *this\enter = 1
                  mouse( )\data | #__mouse_update
                  DoChangeCursor( *this )
                  *this\root\repaint = 1
               EndIf
            EndIf
         EndIf
         If event = #__event_Up 
            If *this\enter
               If a_index( )
                  a_enter( *this, 3 )
               EndIf
               DoChangeCursor( *this )
            Else
               If Entered( )
                  DoChangeCursor( Entered( ) )
               EndIf
            EndIf
         EndIf
         
         ;          
         ;\\ Do anchors events
         a_doevents( *this, event )
         
         ; TEMP
         If event = #__event_Down
            ; Debug " "+ Bool(*this = a_entered( )) +" "+ classFromEvent(event) +" "+ *this\class +" "+ a_index( ) +" "+ *this\press
         EndIf
         
         ;\\ TEMP [before post-widget-events drop]
         If *this\row
            If *this\RowEntered( ) And
               *this\RowEntered( )\_enter
               ;
               If event = #__event_Drop
                  If *this\RowEntered( )\_enter < 0
                     *button = *this\RowEntered( )\rindex
                     *data   = mouse( )\x | mouse( )\y << 16
                  Else
                     *button = *this\RowEntered( )\rindex + 1
                     *data   = mouse( )\x | mouse( )\y << 16
                  EndIf
                  ;
               ElseIf event = #__event_MouseWheel
               ElseIf event = #__event_StatusChange
               Else
                  ;
                  If *this\RowEntered( )
                     *Button = *this\RowEntered( )\rindex
                     
                     If *this\RowEntered( )\buttonbox And 
                        *this\RowEntered( )\buttonbox\_enter
                        *Data   = *this\RowEntered( )\buttonbox\checked
                     Else
                        *Data   = *this\RowEntered( )
                     EndIf
                  EndIf
                  
               EndIf
            EndIf
         EndIf
         
         ;
         ;\\
         If Not (*this\disable And Not *this\anchors)  
            
            ;\\ repaint state
            Select event
               Case #__event_ScrollChange,
                    #__event_StatusChange
                  
                  If *this\row
                     *this\root\repaint = 1
                  EndIf
                  
               Case #__event_Drop,
                    #__event_Focus,
                    #__event_LostFocus, 
                    #__event_MouseEnter,
                    #__event_MouseLeave,
                    #__event_Down,
                    #__event_Up,
                    #__event_LeftDown,
                    #__event_LeftUp,
                    #__event_LeftClick,
                    #__event_Left2Click,
                    #__event_Left3Click,
                    #__event_RightDown,
                    #__event_RightUp,
                    #__event_RightClick,
                    #__event_Right2Click,
                    #__event_Right3Click,
                    #__event_KeyDown,
                    #__event_KeyUp,
                    #__event_DragStart
                  
                  *this\root\repaint = 1
                  
            EndSelect
            
            ;\\ items events
            If *this\type = #__type_Editor Or
               *this\type = #__type_string
               
               DoEvent_Lines( *this, event, mouse( )\x, mouse( )\y )
               
            Else
               If is_items_( *this )
                  DoEvent_Rows( *this, *this\__rows( ), event, mouse( )\x, mouse( )\y )
               EndIf
            EndIf
            If event = #__event_MouseEnter
               If is_integral_( *this )
                  If is_items_( *this\parent )
                     DoEvent_Rows( *this\parent, *this\parent\__rows( ), #__event_MouseLeave, mouse( )\x, mouse( )\y )
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If DoEvent_Bar( *this, event )
               *this\root\repaint = 1
            EndIf
            
            
            ;\\ do widgets events
            Select *this\type
               Case #__type_Window
                  If event = #__event_Focus
                     *this\ColorState( ) = #__s_2
                  EndIf
                  
                  If event = #__event_LostFocus
                     If *this\ColorState( ) = #__s_2
                        *this\ColorState( ) = #__s_0
                     EndIf
                  EndIf
                  
                  If event = #__event_MouseMove
                     If *this\caption\interact And *this\press And Not *this\anchors
                        Resize( *this, mouse( )\x - mouse( )\press_x, mouse( )\y - mouse( )\press_y, #PB_Ignore, #PB_Ignore, 0 )
                     EndIf
                  EndIf
                  
                  If event = #__event_LeftClick
                     Select EnteredButton( )
                           ; close button
                        Case *this\CloseButton( )
                           If is_root_( *this )
                              PostEvent( #PB_Event_CloseWindow, *this\root\canvas\window, *this )
                           Else
                              Post( *this, #__event_close )
                           EndIf
                           
                           ; maximize button
                        Case *this\MaximizeButton( )
                           If Not *this\resize\maximize
                              ProcedureReturn SetState( *this, #PB_Window_Maximize )
                           Else
                              ProcedureReturn SetState( *this, #PB_Window_Normal )
                           EndIf
                           
                           ; minimize button
                        Case *this\MinimizeButton( )
                           If Not *this\resize\minimize
                              ProcedureReturn SetState( *this, #PB_Window_Minimize )
                           Else
                              ProcedureReturn SetState( *this, #PB_Window_Normal )
                           EndIf
                     EndSelect
                  EndIf
                  
                  If event = #__event_Left2Click
                     If *this\caption\interact
                        If Not *this\resize\maximize
                           ProcedureReturn SetState( *this, #PB_Window_Maximize )
                        Else
                           ProcedureReturn SetState( *this, #PB_Window_Normal )
                        EndIf
                     EndIf
                  EndIf
                  
               Case #__type_Button, #__type_ButtonImage
                  If Not ( *this\togglebox And *this\togglebox\checked)
                     Select event
                        Case #__event_MouseEnter
                           If *this\enter 
                              If *this\press
                                 *this\ColorState( ) = #__s_2
                              Else
                                 *this\ColorState( ) = #__s_1
                              EndIf
                           EndIf
                           
                        Case #__event_MouseLeave
                           ; If Not *this\press
                           *this\ColorState( ) = #__s_0
                           ; EndIf
                           
                        Case #__event_Down
                           If *this\enter 
                              If MouseButtons( ) & #PB_Canvas_LeftButton
                                 *this\ColorState( ) = #__s_2
                              EndIf
                              
                              If *this\picture[#__image_Pressed]\imageID
                                 *this\picture = *this\picture[#__image_Pressed]
                              EndIf
                           EndIf
                           
                        Case #__event_Up
                           If MouseButtons( ) & #PB_Canvas_LeftButton
                              If *this\enter
                                 *this\ColorState( ) = #__s_1
                              Else
                                 *this\ColorState( ) = #__s_0
                              EndIf
                           EndIf
                           
                           If *this\picture[#__image_Released]\imageID
                              *this\picture = *this\picture[#__image_Released]
                           EndIf
                           
                     EndSelect
                  EndIf
                  ;
                  If event = #__event_Up
                     If MouseButtons( ) & #PB_Canvas_LeftButton
                        If *this\enter 
                           If *this\togglebox
                              SetState( *this, Bool( *this\togglebox\checked ! 1 ))
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
               Case #__type_Option
                  If event = #__event_LeftClick
                     If SetState( *this, #True )
                        
                     EndIf
                  EndIf
                  
               Case #__type_checkBox
                  If event = #__event_LeftClick
                     If SetState( *this, Bool( *this\togglebox\checked ! 1 ) )
                        
                     EndIf
                  EndIf
                  
               Case #__type_HyperLink
                  If event = #__event_Down
                     If *this\cursor[2]
                        If MouseEnter( *this )
                           ChangeCursor( *this, *this\cursor[2] )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  If event = #__event_MouseMove Or
                     event = #__event_MouseEnter Or
                     event = #__event_MouseLeave
                     
                     If MouseEnter( *this )
                        If *this\ColorState( ) <> #__s_1
                           *this\ColorState( ) = #__s_1
                        EndIf
                        *this\root\repaint = 1
                     Else
                        If *this\ColorState( ) <> #__s_0
                           *this\ColorState( ) = #__s_0
                        EndIf
                     EndIf
                  EndIf
            EndSelect
            
            ;\\
            ; If Popup( )
            If event = #__event_Down
               If MouseButtons( ) & #PB_Canvas_LeftButton
                  If *this\type = #__type_combobox
                     If *this\PopupCombo( )
                        DisplayPopupBar( *this\PopupCombo( ), *this )
                     EndIf
                  Else
                     If *this\root\parent And
                        ( *this\root\parent\type = #__type_ComboBox Or
                          *this\root\parent\type = #__type_MenuBar )
                        ;
                        If IsWindow( *this\root\parent\root\canvas\window )
                           DisableWindow( *this\root\canvas\window, #True )
                           SetActiveWindow( *this\root\parent\root\canvas\window )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            If event = #__event_up
               If *this <> *this\root\parent
                  If *this\root\parent 
                     If *this\root\parent\type = #__type_ComboBox 
                        SetText( *this\root\parent, GetItemText( *this, GetState( *this ) ) )
                        DisplayPopupBar( *this, *this\root\parent )
                        PostRepaint( *this\root\parent\root )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ; EndIf
            
            
            If event = #__event_MouseWheel
               ;\\ mouse wheel verticl
               If MouseWheelDirection( ) > 0
                  ; Debug "wheelY " + *data
                  If Not *this\hide
                     If *this\scroll And *this\scroll\v And Not *this\scroll\v\hide And 
                        bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\pos - *data, 2 )
                        *this\root\repaint = 1
                     ElseIf *this\bar And bar_PageChange( *this, *this\bar\page\pos - *data, 2 )
                        *this\root\repaint = 1
                     EndIf
                  EndIf
                  ;\\ mouse wheel horizontal
               Else
                  ; Debug "wheelX " + *data
                  If Not *this\hide
                     If *this\scroll And *this\scroll\h And Not *this\scroll\h\hide And
                        bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\pos - *data, 2 )
                        *this\root\repaint = 1
                     ElseIf *this\bar And bar_PageChange( *this, *this\bar\page\pos - *data, 2 )
                        *this\root\repaint = 1
                     EndIf
                  EndIf
                  
               EndIf
            EndIf
            
            ;\\ send-widget-events
            If *this\child And *this\parent And *this\parent\tabbar And *this\parent\tabbar\type = #__type_tabbar
               Post( *this\parent, event, *button, *data )
            Else
               If event = #__event_Create
               ElseIf event = #__event_Focus Or
                      event = #__event_LostFocus
                  ;
                  If GetActiveGadget( ) = *this\root\canvas\gadget
                     Post( *this, event, *button, *data )
                  EndIf
               ElseIf event = #__event_Change
                  Post( *this, event, *button, *data )
               Else
                  Post( *this, event, *button, *data )
                  
                  ;                   If a_focused( )
                  ;                      If event = #__event_KeyDown Or
                  ;                         event = #__event_Input Or
                  ;                         event = #__event_KeyUp
                  ;                         ;
                  ;                         If IsChild( a_focused( ), *this )
                  ;                            Post( a_focused( ), event, *button, *data )
                  ;                         EndIf
                  ;                      EndIf
                  ;                   EndIf
                  
                  If event = #__event_Down
                     If *this\type = #__type_Spin
                        If *this\stringbar
                           Post( *this, #__event_Change, *this\stringbar, *this\bar\PageChange( ) )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;
         ;\\ post repaint canvas
         If Not (*this\disable And Not *this\anchors)
            If *this\root And *this\root\repaint > 0 
               ; Debug ""+" ["+*this\ColorState( )+"] "+*this\class +" "+ classFromEvent(event)
               If ( MouseButtonPress( ) And
                    ( event = #__event_Focus Or
                      event = #__event_Drop Or
                      event = #__event_LostFocus )) Or __gui\event\loop
                  ;
                  ReDraw( *this\root )
               Else
                  ; Debug "post redraw "+ *this\class +" "+ classFromEvent(event) +" "+ classFromEvent(*data)
                  PostReDraw( *this\root )
               EndIf
               ;
               *this\root\repaint = 0
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure DoTabFocus( *this._s_WIDGET, recursion.b = 0 )
         If *this\anchors And
            Not *this\anchors\mode & #__a_zoom
            ;
            If a_main( )\AfterWidget( )
               SetActive( a_main( )\AfterWidget( ) )
            Else
               If a_main( )\parent\FirstWidget( )
                  SetActive( a_main( )\parent\FirstWidget( ) )
               EndIf
            EndIf
            ;
         Else
            If *this\FirstWidget( ) And Not recursion
               ; SetActive( *this\FirstWidget( ) )
               SetActive( GetPosition( *this, #PB_List_First, GetState( *this )))
               ;
            Else
               If *this\AfterWidget( ) And 
                  *this\AfterWidget( )\TabIndex( ) = *this\TabIndex( )
                  ;
                  SetActive( *this\AfterWidget( ) )
                  ;
               ElseIf *this\parent
                  If *this\parent\root = *this\root
                     If *this\window = *this\parent
                        If *this\window\gadget
                           DoDeactivate( *this\window\gadget )
                           *this\window\gadget = #Null
                        EndIf
                     EndIf
                     DoTabFocus( *this\parent, #True )
                  Else
                     DoTabFocus( *this\FirstWidget( ), #True )
                  EndIf
                  ;
               Else
                  If *this\root
                     If *this\root\FirstWidget( )
                        If *this\window\gadget
                           DoDeactivate( *this\window\gadget )
                           *this\window\gadget = #Null
                        EndIf
                        SetActive( *this\root\FirstWidget( ) )
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Procedure   Delete( *parent._s_WIDGET, mode = 0 )
         Protected *root._s_ROOT = *parent\root
         
         If LastElement(widgets( ))
            Repeat
               If ( mode And widgets( ) = *parent ) Or 
                  IsChild( widgets( ), *parent )
                  ;
                  If Not Post( widgets( ), #__event_free )
                     If PreviousElement( widgets( ))
                        Continue
                     Else
                        Break
                     EndIf
                  EndIf
                  
                  ;
                  ;
                  If widgets( ) = *parent
                     If *parent\haschildren
                        Break
                     EndIf
                     
                     If *parent\parent
                        If *parent\parent\FirstWidget( ) = *parent
                           *parent\parent\FirstWidget( ) = *parent\AfterWidget( )
                        EndIf
                        
                        If *parent\parent\LastWidget( ) = *parent
                           *parent\parent\LastWidget( ) = *parent\BeforeWidget( )
                        EndIf
                        
                        If Opened( ) = *parent
                           OpenList( *parent\parent )
                        EndIf
                     EndIf
                  EndIf
                  
                  ;
                  ;\\
                  If widgets( )\root\haschildren > 0
                     ; если ребенка не удалили то и родителя не удаляем                   
                     If widgets( )\haschildren
                        Protected result
                        Protected *g._s_WIDGET = widgets( )
                        If *g\address
                           PushListPosition(widgets( ))
                           ChangeCurrentElement( widgets( ), *g\address )
                           While NextElement( widgets( ))
                              If widgets( )\level = *g\level
                                 Break
                              EndIf
                              If widgets( )\parent = *g 
                                 result = 1
                                 Break
                              EndIf
                           Wend
                           PopListPosition(widgets( ))
                           If result
                              If PreviousElement( widgets( ))
                                 Continue
                              Else
                                 Break
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                     
                     ;
                     widgets( )\root\haschildren - 1
                     If widgets( )\parent <> widgets( )\root
                        widgets( )\parent\haschildren - 1
                     EndIf
                     ;
                     If widgets( )\tabbar
                        If widgets( )\tabbar = widgets( )
                           ;                            If test_delete
                           ;                               Debug "   free (tab) " + widgets( )\tabbar\class
                           ;                            EndIf
                           ResetStructure( widgets( )\tabbar, _s_WIDGET ) ; FreeStructure( widgets( )\tabbar )
                           widgets( )\tabbar = 0
                        EndIf
                        widgets( )\tabbar = #Null
                     EndIf
                     ;
                     If widgets( )\scroll
                        If widgets( )\scroll\v
                           ;                            If test_delete
                           ;                               Debug "   free (scroll-v) " + widgets( )\scroll\v\class
                           ;                            EndIf
                           ResetStructure( widgets( )\scroll\v, _s_WIDGET ) ; FreeStructure( widgets( )\scroll\v )
                           widgets( )\scroll\v = 0
                        EndIf
                        If widgets( )\scroll\h
                           ;                            If test_delete
                           ;                               Debug "   free (scroll-h) " + widgets( )\scroll\h\class
                           ;                            EndIf
                           ResetStructure( widgets( )\scroll\h, _s_WIDGET ) ; FreeStructure( widgets( )\scroll\h )
                           widgets( )\scroll\h = 0
                        EndIf
                        ; widgets( )\scroll = #Null
                     EndIf
                     ;
                     If widgets( )\bounds\attach
                        ;Debug " free - attach " +widgets( )\bounds\attach\parent\class
                        widgets( )\bounds\attach\parent = 0
                        FreeStructure( widgets( )\bounds\attach )
                        widgets( )\bounds\attach = #Null
                     EndIf
                     ;
                     If test_delete
                        Debug " free() - " + widgets( )\class
                     EndIf
                     ;
                     ;\\
                     If Pressed( ) = widgets( )
                        Pressed( ) = #Null
                     EndIf
                     If Sticked( ) = widgets( )
                        Sticked( ) = #Null
                     EndIf
                     If a_focused( ) = widgets( )
                        a_focused( ) = #Null
                     EndIf
                     If a_entered( ) = widgets( )
                        a_entered( ) = #Null
                     EndIf
                     ;
                     ;\\
                     If GetActive( )
                        If GetActive( ) = widgets( )
                           GetActive( ) = #Null
                           
                           If Not is_root_( *parent )
                              If *parent\BeforeWidget( )
                                 SetActive( *parent\BeforeWidget( ) )
                              Else
                                 If Not SetActive( *parent\parent )
                                    GetActive( ) = *parent\parent
                                 EndIf
                              EndIf
                           EndIf
                           
                           If test_focus_set
                              If keyboard( )\deactive
                                 Debug "Free active - " + keyboard( )\deactive\class +" "+ *parent\class +" "+ widgets( )\class
                              EndIf
                           EndIf
                        EndIf
                        
                        ;                         If GetActive( ) = *parent
                        ;                            GetActive( ) = *parent\parent
                        ;                         EndIf
                        ;                            If GetActive( ) And
                        ;                               GetActive( )\root = *parent
                        ;                               GetActive( ) = #Null
                        ;                            EndIf
                     EndIf
                     ;
                     ;\\ remove count types
                     CountType( widgets( ), - 1 )
                     ;
                     
                     ; reposition
                     If widgets( )\BeforeWidget( )
                        widgets( )\BeforeWidget( )\AfterWidget( ) = widgets( )\AfterWidget( )
                     EndIf
                     If widgets( )\AfterWidget( )
                        widgets( )\AfterWidget( )\BeforeWidget( ) = widgets( )\BeforeWidget( )
                     EndIf
                     If *parent\FirstWidget( ) = widgets( )
                        *parent\FirstWidget( ) = widgets( )\AfterWidget( )
                     EndIf
;                      If *parent\LastWidget( ) = widgets( )
;                         *parent\LastWidget( ) = widgets( )\BeforeWidget( )
;                      EndIf
;                      If Not *parent\LastWidget( )
;                         *parent\LastWidget( ) = *parent
;                      EndIf
                     If *parent\LastWidget( ) = widgets( )
                        If widgets( )\BeforeWidget( )
                           *parent\LastWidget( ) = widgets( )\BeforeWidget( )
                        Else
                           *parent\LastWidget( ) = *parent
                        EndIf
                     EndIf
                     
                     ;
                     If widgets( )\picture\imageID
                        ;   Removeimage( widgets( ), widgets( )\picture\image )
                     EndIf
                     
                     ;
                     ;\\ unbind events
                     ForEach __gui\event\binds( )
                        If __gui\event\binds( )\widget = widgets( )
                           DeleteElement( __gui\event\binds( ), 1 )
                        EndIf
                     Next
                     
                     ;
                     ;                      ;                      ;
                     ;                      If widgets( )\haschildren
                     ;                         Protected *g._s_WIDGET = widgets( )
                     ;                         PushListPosition(widgets( ))
                     ;                         ForEach widgets( )
                     ;                            If widgets( )\parent = *g
                     ;                               Debug "a "+widgets( )\class +" "+ widgets( )\parent\class
                     ;                               SetParent( widgets( ), *g\parent )
                     ;                            EndIf
                     ;                         Next
                     ;                         PopListPosition(widgets( ))
                     ;                         
                     ; ;                         Protected *g._s_WIDGET = widgets( )
                     ; ;                         If StartEnum( *g )
                     ; ;                            SetParent( widgets( ), *g\parent )
                     ; ;                            StopEnum( )
                     ; ;                         EndIf
                     ;                      EndIf
                     
                     
                     
                     ;                     ;\\
                     ;                      widgets( )\parent  = #Null
                     ;                      widgets( )\address = #Null
                     ;                      ;
                     ResetStructure( widgets( ), _s_WIDGET )
                     ;                      ClearStructure( widgets( ), _s_WIDGET )
                     ;  FreeStructure( widgets( ) )
                     ; Debug widgets( )\root
                     DeleteElement( widgets( ), 1 )
                  EndIf
                  
                  ;\\
                  If *root\haschildren = 0
                     Break
                  EndIf
                  If ListSize( widgets( ) ) = 0
                     Debug "bug "+ #PB_Compiler_Procedure +"( ) haschildren "+*root\haschildren
                     Break
                  EndIf
               ElseIf PreviousElement( widgets( )) = 0
                  Break
               EndIf
            ForEver
         EndIf
      EndProcedure
      
      Procedure   Free( *this.integer ) 
         Protected *g._s_WIDGET
         ;
         If *this > 0
            If *this\i > 0
               *g = *this\i
               *this\i = 0
               ;
               If is_root_( *g )
                  Close( *g )
               Else
                  Delete( *g, #True )
               EndIf
               ;  
            Else
               If IsChildrens( *this )
                  Debug "[" + GetClass(*this ) +"]childrens - free"
                  Delete( *this )
               Else
                  Debug "[" + GetClass(*this )+"] - free"
                  Free( @*this )
               EndIf
            EndIf
            
         ElseIf *this < 0
            Debug "[all] - free"
            ForEach roots( ) 
               Delete( roots( ))
            Next
         EndIf
      EndProcedure
      
      Procedure   Close( *root._s_ROOT )
         Protected result
         Protected window
         Protected canvaswindow = root( )\canvas\window
         Protected canvasgadget = root( )\canvas\gadget
         ;
         ForEach roots( ) 
            window = roots( )\canvas\window
            ;
            If *root = #PB_All
               canvasgadget = roots( )\canvas\gadget
               ;
               ;
               Delete( roots( ))
               If Post( roots( ), #__event_free )
                  DeleteMapElement( roots( ) )
                  If window <> canvaswindow
                     FreeGadget( canvasgadget )
                     CloseWindow( window )
                  EndIf
               EndIf
            Else
               If window = *root\canvas\window 
                  Delete( roots( ))
                  If Post( roots( ), #__event_free )
                     DeleteMapElement( roots( ) )
                     result = MapSize( roots( ) )
                  EndIf
               EndIf
            EndIf
         Next
         ;
         If result
           FreeGadget( canvasgadget )   
           result = CloseWindow( canvaswindow )
           ;
           ; если у окна есть дочернее окно 
           ; в окнах при закрытии главного окна закрывается и дочернее 
           If result
               If MapSize( roots( ) ) > 1
                  ForEach roots( ) 
                     If Not IsWindow( roots()\canvas\window )
                        Delete( roots( ))
                        If Post( roots( ), #__event_free )
                           DeleteMapElement( roots( ) )
                        EndIf
                     EndIf
                  Next 
               EndIf
               ProcedureReturn #True
            EndIf
         Else
            ProcedureReturn #PB_All
         EndIf
      EndProcedure
      
      Procedure EventClose( )
         Protected window = PB(EventWindow)( )
         Protected Canvas = PB(GetWindowData)( window )
         Debug "Close... " + window
         
         If IsGadget(Canvas)
            If ChangeCurrentCanvas( PB(GadgetID)(Canvas) )
               Post( root( ), #__event_Close )
            EndIf
         Else
            Debug "not canvas then close"
         EndIf
         
         ;\\
         If Not MapSize( roots( ))
            If __gui\event\loop
               PostQuit( )
            Else
               Debug "Exit..."
            EndIf
         EndIf
      EndProcedure
      
      Procedure EventRestore( )
         Protected window = PB(EventWindow)( )
         Protected Canvas = PB(GetWindowData)( window )
         Debug "Restore... " + window
         If IsGadget( Canvas )
            ChangeCurrentCanvas( PB(GadgetID)(Canvas) )
            SetState( root( ), #PB_Window_Normal )
         EndIf
      EndProcedure
      
      Procedure EventMaximize( )
         Protected window = PB(EventWindow)( )
         Protected Canvas = PB(GetWindowData)( window )
         Debug "Maximize... " + window
         If IsGadget( Canvas )
            ChangeCurrentCanvas( PB(GadgetID)(Canvas) )
            SetState( root( ), #PB_Window_Maximize )
         EndIf
      EndProcedure
      
      Procedure EventMinimize( )
         Protected window = PB(EventWindow)( )
         Protected Canvas = PB(GetWindowData)( window )
         Debug "Minimize... " + window
         If IsGadget( Canvas )
            ChangeCurrentCanvas( PB(GadgetID)(Canvas) )
            SetState( root( ), #PB_Window_Minimize )
         EndIf
      EndProcedure
      
      Procedure EventResize( )
         Protected Canvas = PB(GetWindowData)( PB(EventWindow)( ))
         ; Debug "Resize..." + Canvas ; PB(WindowWidth)( PB(EventWindow)( ))
         PB(ResizeGadget)( Canvas, #PB_Ignore, #PB_Ignore, PB(WindowWidth)( PB(EventWindow)( )) - PB(GadgetX)( Canvas ) * 2, PB(WindowHeight)( PB(EventWindow)( )) - PB(GadgetY)( Canvas ) * 2 ) ; bug
      EndProcedure
      
      Procedure EventRepaint( )
         If EventData( )
            ; Debug "???? "+MapKey(roots( ))
            
            ; bug PB
            If MapKey(roots( )) = ""
               ResetMap(roots( ))
               NextMapElement(roots( ))
            EndIf
            
            ;PushMapPosition(roots( ))
            If MapSize( roots( ))
               If EventData( ) <> roots( )\canvas\gadgetID
                  ChangeCurrentCanvas( EventData( ), 0 )
                  ; root( ) = roots( )
               EndIf
               
               If roots( )\canvas\repaint = 1
                  roots( )\canvas\repaint = 0
                  
                  If test_draw_repaint
                     Debug "   REPAINT " + roots( )\class ;+" "+ Popup( )\x +" "+ Popup( )\y +" "+ Popup( )\width +" "+ Popup( )\height
                  EndIf
                  
                  ;
                  ReDraw( roots( ) )
               EndIf
            EndIf
            ; PopMapPosition(roots())
         EndIf
      EndProcedure
      
      Procedure EventHandler( eventgadget = - 1, eventtype = - 1, eventdata = 0 )
         Protected *root._s_root, repaint, event, mouse_x , mouse_y
         ;
         ;\\
         ;
         If eventtype = #PB_EventType_Focus
            If GetActive( )
               If Entered( ) And Entered( )\press
                  If Entered( )\root\canvas\gadget = eventgadget
                     If test_focus_set
                        Debug "CANVAS - UpdateFocus " + Entered( )\root\canvas\gadget + " " + eventgadget
                     EndIf
                     SetActive( Entered( ))
                  EndIf
               Else
                  PushMapPosition( roots( ) )
                  ForEach roots( )
                     If roots( )\canvas\gadget = eventgadget
                        If roots( )\active 
                           If test_focus_set
                              Debug "CANVAS - Focus " + GetActive( )\root\canvas\gadget + " " + eventgadget
                           EndIf
                           If keyboard( )\deactive
                              ; Debug "deactive keyboard( ) "+keyboard( )\deactive\class +" "+ roots( )\active\class
                           EndIf
                           ChangeCurrentCanvas( GadgetID(eventgadget) )
                           mouse( )\x = GadgetMouseX( eventgadget )
                           mouse( )\y = GadgetMouseY( eventgadget )
                           SetActive( roots( )\active )
                           ; ReDraw( GetActive( )\root )
                        EndIf
                        Break
                     EndIf
                  Next
                  PopMapPosition( roots( ) )
               EndIf
            EndIf
         EndIf
         
         If eventtype = #PB_EventType_LostFocus
            If GetActive( ) And GetActive( )\root And GetActive( )\root\canvas\gadget = eventgadget
               ; Debug IsWindow(GetActive( )\root\canvas\window)
               If test_focus_set
                  Debug "CANVAS - LostFocus " + GetActive( )\root\class +" "+ GetActive( )\root\canvas\gadget + " " + eventgadget
               EndIf
               SetActive( 0 )
               ; Debug "after LostFocus" 
               ReDraw( GetActive( )\root )
            EndIf
         EndIf
         
         If eventtype = #PB_EventType_Resize 
            ; PB(ResizeGadget)( eventgadget, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
            PushMapPosition( roots( ) )
            ChangeCurrentCanvas( GadgetID( eventgadget ), 0)
            If Resize( roots( ), 0, 0, DPIScaledX(PB(GadgetWidth)( eventgadget )), DPIScaledY(PB(GadgetHeight)( eventgadget )), 0 )
               ; Debug "resize - canvas ["+eventgadget+"]"
               ReDraw( roots( ) )
            EndIf
            PopMapPosition( roots( ) )
            ProcedureReturn #PB_Event_Gadget
         EndIf
         
         If eventtype = #PB_EventType_MouseWheelX
            If Entered( )
               MouseWheelDirection( ) = - 1
               mouse( )\wheeldata = eventdata
               If eventdata < 0
                  mouse( )\data | #__mouse_left
               ElseIf eventdata > 0
                  mouse( )\data | #__mouse_right
               EndIf
               If is_integral_( Entered( ) )
                  DoEvents( Entered( )\parent, #__event_MouseWheel, MouseWheelDirection( ), eventdata )
               Else
                  DoEvents( Entered( ), #__event_MouseWheel, MouseWheelDirection( ), eventdata )
               EndIf
            EndIf
         EndIf
         
         If eventtype = #PB_EventType_MouseWheelY
            If Entered( )
               MouseWheelDirection( ) = 1
               mouse( )\wheeldata = eventdata
               If eventdata < 0
                  mouse( )\data | #__mouse_top
               ElseIf eventdata > 0
                  mouse( )\data | #__mouse_bottom
               EndIf
               If is_integral_( Entered( ) )
                  DoEvents( Entered( )\parent, #__event_MouseWheel, MouseWheelDirection( ), eventdata )
               Else
                  DoEvents( Entered( ), #__event_MouseWheel, MouseWheelDirection( ), eventdata )
               EndIf
            EndIf
         EndIf
         
         If eventtype = #PB_EventType_MouseEnter
            ; Debug " #PB_EventType_MouseEnter "+eventgadget
            If Not ( root( ) And root( )\canvas\gadget = eventgadget )
               ChangeCurrentCanvas( GadgetID( eventgadget ) )
            EndIf
            ;
            mouse( )\data = #__mouse_enter
            mouse( )\data | #__mouse_update
            ;
            mouse( )\x = GadgetMouseX( eventgadget )
            mouse( )\y = GadgetMouseY( eventgadget )
         EndIf
         
         If eventtype = #PB_EventType_MouseLeave
            If Pressed( ) And
               Pressed( )\root <> root( )
               ChangeCurrentCanvas( GadgetID( Pressed( )\root\canvas\gadget ) )
            EndIf
            ;
            mouse( )\data = #__mouse_leave
            mouse( )\x = - 1
            mouse( )\y = - 1
         EndIf
         
         If eventtype = #PB_EventType_LeftButtonDown Or
            eventtype = #PB_EventType_MiddleButtonDown Or
            eventtype = #PB_EventType_RightButtonDown
            ;
            mouse( )\data | #__mouse_press
            ;
            If eventtype = #PB_EventType_LeftButtonDown 
               event            = #__event_LeftDown
               mouse( )\press   = #PB_MouseButton_Left
               mouse( )\buttons | #PB_Canvas_LeftButton 
            EndIf
            If eventtype = #PB_EventType_MiddleButtonDown 
               event            = #__event_MiddleDown 
               mouse( )\press   = #PB_MouseButton_Middle
               mouse( )\buttons | #PB_Canvas_MiddleButton
            EndIf
            If eventtype = #PB_EventType_RightButtonDown 
               event            = #__event_RightDown 
               mouse( )\press   = #PB_MouseButton_Right
               mouse( )\buttons | #PB_Canvas_RightButton
            EndIf
            ;
            ;\\ double click
            ;
            Static ClickTime.q
            Protected ElapsedMilliseconds.q = ElapsedMilliseconds( )
            If DoubleClickTime( ) > ( ElapsedMilliseconds - ClickTime ) ;+ Bool( #PB_Compiler_OS = #PB_OS_Windows ) * 492
               mouse( )\click + 1
            Else
               mouse( )\click = 1
            EndIf
            ClickTime = ElapsedMilliseconds
         EndIf
         
         If eventtype = #PB_EventType_MouseMove
            ;Debug "MOVE"
            
            If root( ) And
               root( )\canvas\gadget = eventgadget
               mouse_x               = GadgetMouseX( eventgadget )
               mouse_y               = GadgetMouseY( eventgadget )
               ;
               If MouseButtonPress( )
                  If Pressed( ) And Pressed( )\anchors
                     If mouse( )\steps
                        mouse_x + ( mouse_x % mouse( )\steps )
                        mouse_x = ( mouse_x / mouse( )\steps ) * mouse( )\steps
                        mouse_y + ( mouse_y % mouse( )\steps )
                        mouse_y = ( mouse_y / mouse( )\steps ) * mouse( )\steps
                     EndIf
                  EndIf
               EndIf
               ;
               If mouse( )\x <> mouse_x : event = #__event_MouseMove
                  If Pressed( )
                     If mouse( )\selector 
                        If mouse( )\press_x > mouse_x
                           ; to left
                           mouse( )\selector\x    = mouse_x
                           If mouse( )\steps > 0
                              mouse( )\selector\x + ( mouse( )\selector\x % mouse( )\steps )
                              mouse( )\selector\x = ( mouse( )\selector\x / mouse( )\steps ) * mouse( )\steps
                              mouse( )\selector\x + ( Pressed( )\inner_x( ) % mouse( )\steps )
                           EndIf
                           mouse( )\selector\width = ( mouse( )\press_x - mouse( )\selector\x )
                        Else
                           ; to right
                           mouse( )\selector\x = mouse( )\press_x
                           mouse( )\selector\width = ( mouse_x - mouse( )\selector\x )
                           If mouse( )\steps > 0
                              mouse( )\selector\width + ( mouse( )\selector\width % mouse( )\steps )
                              mouse( )\selector\width = ( mouse( )\selector\width / mouse( )\steps ) * mouse( )\steps
                           EndIf
                        EndIf
                        ;
                        If mouse( )\steps > 0
                           mouse( )\selector\width + DPIScaledX( 1 ) 
                        EndIf
                        ;
                        root()\repaint = 1
                     EndIf
                  EndIf
                  ;
                  If mouse( )\x < mouse_x
                     mouse( )\data | #__mouse_right
                  ElseIf mouse( )\x > mouse_x
                     mouse( )\data | #__mouse_left
                  EndIf
                  mouse( )\x = mouse_x
               EndIf
               ;
               If mouse( )\y <> mouse_y : event = #__event_MouseMove
                  If Pressed( )
                     If mouse( )\selector 
                        If mouse( )\press_y > mouse_y
                           ; to top
                           mouse( )\selector\y    = mouse_y 
                           If mouse( )\steps > 0
                              mouse( )\selector\y + ( mouse( )\selector\y % mouse( )\steps )
                              mouse( )\selector\y = ( mouse( )\selector\y / mouse( )\steps ) * mouse( )\steps
                              mouse( )\selector\y + ( Pressed( )\inner_y( ) % mouse( )\steps ) 
                           EndIf
                           mouse( )\selector\height = ( mouse( )\press_y - mouse( )\selector\y )
                        Else
                           ; to bottom
                           mouse( )\selector\y = mouse( )\press_y
                           mouse( )\selector\height = ( mouse_y - mouse( )\selector\y )
                           If mouse( )\steps > 0
                              mouse( )\selector\height + ( mouse( )\selector\height % mouse( )\steps )
                              mouse( )\selector\height = ( mouse( )\selector\height / mouse( )\steps ) * mouse( )\steps
                           EndIf
                        EndIf
                        ;
                        If mouse( )\steps > 0
                           mouse( )\selector\height + DPIScaledY( 1 ) 
                        EndIf   
                        ;
                        root()\repaint = 1
                     EndIf
                  EndIf
                  ;
                  If mouse( )\y < mouse_y
                     mouse( )\data | #__mouse_bottom
                  ElseIf mouse( )\y > mouse_y
                     mouse( )\data | #__mouse_top
                  EndIf
                  mouse( )\y = mouse_y
               EndIf
               ;
            EndIf
         EndIf
         
         If eventtype = #PB_EventType_LeftButtonUp Or 
            eventtype = #PB_EventType_MiddleButtonUp Or
            eventtype = #PB_EventType_RightButtonUp
            ;
            If eventtype = #PB_EventType_LeftButtonUp : event = #__event_LeftUp : EndIf
            If eventtype = #PB_EventType_MiddleButtonUp : event = #__event_MiddleUp : EndIf
            If eventtype = #PB_EventType_RightButtonUp : event = #__event_RightUp : EndIf
            ;
            mouse( )\data | #__mouse_release
            If mouse( )\data & #__mouse_press
               mouse( )\data &~ #__mouse_press
            EndIf
            ;
            If root( ) And
               root( )\canvas\gadget = eventgadget
               mouse( )\x            = GadgetMouseX( eventgadget )
               mouse( )\y            = GadgetMouseY( eventgadget )
            EndIf
            mouse( )\press = 0
         EndIf
         
         If eventtype = #PB_EventType_KeyDown Or
            eventtype = #PB_EventType_Input Or
            eventtype = #PB_EventType_KeyUp
            Protected *keywidget._s_WIDGET
            
            *keywidget = GetActive( )
            
            If *keywidget\anchors 
               keyboard( )\widget = a_focused( )
               If a_focused( )
                  *keywidget = a_focused( )
               EndIf
            EndIf
            
            ;\\
            If *keywidget
               ;
               ;\\
               keyboard( )\key[1] = GetGadgetAttribute( *keywidget\root\canvas\gadget, #PB_Canvas_Modifiers )
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  If keyboard( )\key[1] & #PB_Canvas_Command
                     keyboard( )\key[1] & ~ #PB_Canvas_Command
                     keyboard( )\key[1] | #PB_Canvas_Control
                  EndIf
               CompilerEndIf
               
               ;
               ;\\
               If eventtype = #PB_EventType_Input
                  keyboard( )\input = GetGadgetAttribute( *keywidget\root\canvas\gadget, #PB_Canvas_Input )
               Else
                  Protected key = GetGadgetAttribute( *keywidget\root\canvas\gadget, #PB_Canvas_Key )
                  If key
                     keyboard( )\Key = key
                  EndIf
               EndIf
               
               ;{  shortcut to key
               ;                Select keyboard( )\input
               ;                  Case #PB_Shortcut_0 : keyboard( )\key = #PB_Key_0
               ;                  Case #PB_Shortcut_1 : keyboard( )\key = #PB_Key_1
               ;                  Case #PB_Shortcut_2 : keyboard( )\key = #PB_Key_2
               ;                  Case #PB_Shortcut_3 : keyboard( )\key = #PB_Key_3
               ;                  Case #PB_Shortcut_4 : keyboard( )\key = #PB_Key_4
               ;                  Case #PB_Shortcut_5 : keyboard( )\key = #PB_Key_5
               ;                  Case #PB_Shortcut_6 : keyboard( )\key = #PB_Key_6
               ;                  Case #PB_Shortcut_7 : keyboard( )\key = #PB_Key_7
               ;                  Case #PB_Shortcut_8 : keyboard( )\key = #PB_Key_8
               ;                  Case #PB_Shortcut_9 : keyboard( )\key = #PB_Key_9
               ;                  Case #PB_Shortcut_A : keyboard( )\key = #PB_Key_A
               ;                  Case #PB_Shortcut_Add : keyboard( )\key = #PB_Key_Add
               ;                  Case #PB_Shortcut_All : keyboard( )\key = #PB_Key_All
               ;                  ;Case #PB_Shortcut_Alt : keyboard( )\key = #PB_Key_Alt
               ;                  Case #PB_Shortcut_Apps : keyboard( )\key = #PB_Key_Apostrophe        ;
               ;                  Case #PB_Shortcut_B : keyboard( )\key = #PB_Key_B
               ;                  Case #PB_Shortcut_Back : keyboard( )\key = #PB_Key_Back
               ;                  ;Case #PB_Shortcut_BackSlash : keyboard( )\key = #PB_Key_BackSlash
               ;                  Case #PB_Shortcut_C : keyboard( )\key = #PB_Key_C
               ;                  Case #PB_Shortcut_Capital : keyboard( )\key = #PB_Key_Capital
               ;                  ;Case #PB_Shortcut_Clear : keyboard( )\key = #PB_Key_CLear
               ;                  ;Case #PB_Shortcut_Control : keyboard( )\key = #PB_Key_Control
               ;                  Case #PB_Shortcut_Command : keyboard( )\key = #PB_Key_Comma          ;       
               ;                  Case #PB_Shortcut_D : keyboard( )\key = #PB_Key_D
               ;                  Case #PB_Shortcut_Decimal : keyboard( )\key = #PB_Key_Decimal
               ;                  Case #PB_Shortcut_Delete : keyboard( )\key = #PB_Key_Delete
               ;                  Case #PB_Shortcut_Divide : keyboard( )\key = #PB_Key_Divide
               ;                  Case #PB_Shortcut_Down : keyboard( )\key = #PB_Key_Down
               ;                  Case #PB_Shortcut_E : keyboard( )\key = #PB_Key_E
               ;                  Case #PB_Shortcut_End : keyboard( )\key = #PB_Key_End
               ;                  Case #PB_Shortcut_Execute : keyboard( )\key = #PB_Key_Equals         ;
               ;                  Case #PB_Shortcut_Escape : keyboard( )\key = #PB_Key_Escape
               ;                  Case #PB_Shortcut_F : keyboard( )\key = #PB_Key_F
               ;                  Case #PB_Shortcut_F1 : keyboard( )\key = #PB_Key_F1
               ;                  Case #PB_Shortcut_F10 : keyboard( )\key = #PB_Key_F10
               ;                  Case #PB_Shortcut_F12 : keyboard( )\key = #PB_Key_F12
               ; ;                  Case #PB_Shortcut_F13 : keyboard( )\key = #PB_Key_F3
               ; ;                  Case #PB_Shortcut_F14 : keyboard( )\key = #PB_Key_F4
               ; ;                  Case #PB_Shortcut_F15 : keyboard( )\key = #PB_Key_F5
               ; ;                  Case #PB_Shortcut_F16 : keyboard( )\key = #PB_Key_F6
               ; ;                  Case #PB_Shortcut_F17 : keyboard( )\key = #PB_Key_F7
               ; ;                  Case #PB_Shortcut_F18 : keyboard( )\key = #PB_Key_F8
               ; ;                  Case #PB_Shortcut_F19 : keyboard( )\key = #PB_Key_F9
               ;                  Case #PB_Shortcut_F2 : keyboard( )\key = #PB_Key_F2
               ; ;                  Case #PB_Shortcut_F20 : keyboard( )\key = #PB_Key_F2
               ; ;                  Case #PB_Shortcut_F21 : keyboard( )\key = #PB_Key_F2
               ; ;                  Case #PB_Shortcut_F22 : keyboard( )\key = #PB_Key_F2
               ; ;                  Case #PB_Shortcut_F23 : keyboard( )\key = #PB_Key_F2
               ; ;                  Case #PB_Shortcut_F24 : keyboard( )\key = #PB_Key_F2
               ;                  Case #PB_Shortcut_F3 : keyboard( )\key = #PB_Key_F3
               ;                  Case #PB_Shortcut_F4 : keyboard( )\key = #PB_Key_F4
               ;                  Case #PB_Shortcut_F5 : keyboard( )\key = #PB_Key_F5
               ;                  Case #PB_Shortcut_F6 : keyboard( )\key = #PB_Key_F6
               ;                  Case #PB_Shortcut_F7 : keyboard( )\key = #PB_Key_F7
               ;                  Case #PB_Shortcut_F8 : keyboard( )\key = #PB_Key_F8
               ;                  Case #PB_Shortcut_F9 : keyboard( )\key = #PB_Key_F9
               ;                  Case #PB_Shortcut_G : keyboard( )\key = #PB_Key_G
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_Grave
               ;                  Case #PB_Shortcut_H : keyboard( )\key = #PB_Key_H
               ;                  Case #PB_Shortcut_Home : keyboard( )\key = #PB_Key_Home
               ;                  ; Case #PB_Shortcut_Help : keyboard( )\key = #PB_Key_Help
               ;                  Case #PB_Shortcut_I : keyboard( )\key = #PB_Key_I
               ;                  Case #PB_Shortcut_Insert : keyboard( )\key = #PB_Key_Insert
               ;                  Case #PB_Shortcut_J : keyboard( )\key = #PB_Key_J
               ;                  Case #PB_Shortcut_K : keyboard( )\key = #PB_Key_K
               ;                  Case #PB_Shortcut_L : keyboard( )\key = #PB_Key_L
               ;                  Case #PB_Shortcut_Left : keyboard( )\key = #PB_Key_Left
               ;                  ;Case #PB_Shortcut_LeftWindows : keyboard( )\key = #PB_Key_
               ; ;                  Case #PB_Shortcut_0 : keyboard( )\key = #PB_Key_LeftAlt
               ; ;                  Case #PB_Shortcut_0 : keyboard( )\key = #PB_Key_LeftBracket
               ; ;                  Case #PB_Shortcut_0 : keyboard( )\key = #PB_Key_LeftControl
               ; ;                  Case #PB_Shortcut_0 : keyboard( )\key = #PB_Key_LeftShift
               ;                  Case #PB_Shortcut_M : keyboard( )\key = #PB_Key_M
               ;                  Case #PB_Shortcut_Menu : keyboard( )\key = #PB_Key_Minus                ; 
               ;                  Case #PB_Shortcut_Multiply : keyboard( )\key = #PB_Key_Multiply
               ;                  Case #PB_Shortcut_N : keyboard( )\key = #PB_Key_N
               ;                  Case #PB_Shortcut_Numlock : keyboard( )\key = #PB_Key_NumLock
               ;                  Case #PB_Shortcut_O : keyboard( )\key = #PB_Key_O
               ;                  Case #PB_Shortcut_P : keyboard( )\key = #PB_Key_P
               ;                  Case #PB_Shortcut_Pad0 : keyboard( )\key = #PB_Key_Pad0
               ;                  Case #PB_Shortcut_Pad1 : keyboard( )\key = #PB_Key_Pad1
               ;                  Case #PB_Shortcut_Pad2 : keyboard( )\key = #PB_Key_Pad2
               ;                  Case #PB_Shortcut_Pad3 : keyboard( )\key = #PB_Key_Pad3
               ;                  Case #PB_Shortcut_Pad4 : keyboard( )\key = #PB_Key_Pad4
               ;                  Case #PB_Shortcut_Pad5 : keyboard( )\key = #PB_Key_Pad5
               ;                  Case #PB_Shortcut_Pad6 : keyboard( )\key = #PB_Key_Pad6
               ;                  Case #PB_Shortcut_Pad7 : keyboard( )\key = #PB_Key_Pad7
               ;                  Case #PB_Shortcut_Pad8 : keyboard( )\key = #PB_Key_Pad8
               ;                  Case #PB_Shortcut_Pad9 : keyboard( )\key = #PB_Key_Pad9
               ;                  Case #PB_Shortcut_PageDown : keyboard( )\key = #PB_Key_PageDown
               ;                  Case #PB_Shortcut_PageUp : keyboard( )\key = #PB_Key_PageUp
               ;                  Case #PB_Shortcut_Pause : keyboard( )\key = #PB_Key_Pause
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_PadComma
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_PadEnter
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_Period
               ;                  Case #PB_Shortcut_Q : keyboard( )\key = #PB_Key_Q
               ;                  Case #PB_Shortcut_R : keyboard( )\key = #PB_Key_R
               ;                  Case #PB_Shortcut_Return : keyboard( )\key = #PB_Key_Return
               ;                  Case #PB_Shortcut_Right : keyboard( )\key = #PB_Key_Right
               ; ;                  Case #PB_Shortcut_RightWindows : keyboard( )\key = #PB_Key_
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_RightAlt
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_RightBracket
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_RightControl
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_RightShift
               ;                  Case #PB_Shortcut_S : keyboard( )\key = #PB_Key_S
               ;                  Case #PB_Shortcut_Scroll : keyboard( )\key = #PB_Key_Scroll
               ;                  Case #PB_Shortcut_Space : keyboard( )\key = #PB_Key_Space
               ;                  Case #PB_Shortcut_Subtract : keyboard( )\key = #PB_Key_Subtract
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_SemiColon
               ; ;                  Case #PB_Shortcut_ : keyboard( )\key = #PB_Key_Slash
               ; ;                  Case #PB_Shortcut_Select : keyboard( )\key = #PB_Key_
               ; ;                  Case #PB_Shortcut_Separator : keyboard( )\key = #PB_Key_
               ; ;                  Case #PB_Shortcut_Shift : keyboard( )\key = #PB_Key_
               ; ;                  Case #PB_Shortcut_Snapshot : keyboard( )\key = #PB_Key_
               ;                  Case #PB_Shortcut_T : keyboard( )\key = #PB_Key_T
               ;                  Case #PB_Shortcut_Tab : keyboard( )\key = #PB_Key_Tab
               ;                  Case #PB_Shortcut_U : keyboard( )\key = #PB_Key_U
               ;                  Case #PB_Shortcut_Up : keyboard( )\key = #PB_Key_Up
               ;                  Case #PB_Shortcut_V : keyboard( )\key = #PB_Key_V
               ;                  Case #PB_Shortcut_W : keyboard( )\key = #PB_Key_W
               ;                  Case #PB_Shortcut_X : keyboard( )\key = #PB_Key_X
               ;                  Case #PB_Shortcut_Y : keyboard( )\key = #PB_Key_Y
               ;                  Case #PB_Shortcut_Z : keyboard( )\key = #PB_Key_Z
               ;               EndSelect
               ;               
               ; ;                If keyboard( )\key[1] & #PB_Canvas_Alt
               ; ;                   keyboard( )\key = #PB_key_Alt
               ; ;                EndIf
               ;                
               ;}
               
               ;
               ;\\ keyboard events
               If eventtype = #PB_EventType_KeyDown Or
                  eventtype = #PB_EventType_KeyUp
                  ;
                  ;\\ tab focus
                  Select keyboard( )\Key
                     Case #PB_Shortcut_Tab
                        DoTabFocus( *keywidget )
                        ; Debug ""+GetActive( )\class+" - [tab-key]"
                        ;
                  EndSelect
               EndIf
               ;
               If eventtype = #PB_EventType_KeyDown 
                  ;
                  ;\\ anchor key focus
                  If *keywidget\anchors And Not *keywidget\anchors\mode & #__a_zoom
                     If Not keyboard( )\key[1]
                        Select keyboard( )\Key
                           Case #PB_Shortcut_Left
                              If *keywidget\parent
                                 a_set( *keywidget\parent )
                              EndIf
                              
                           Case #PB_Shortcut_Up
                              If *keywidget\BeforeWidget( )
                                 If *keywidget\BeforeWidget( )\TabIndex( ) = *keywidget\TabIndex( )
                                    a_set( *keywidget\BeforeWidget( ) )
                                 EndIf
                              EndIf
                              
                           Case #PB_Shortcut_Down
                              If *keywidget\AfterWidget( )
                                 If *keywidget\AfterWidget( )\TabIndex( ) = *keywidget\TabIndex( )
                                    a_set( *keywidget\AfterWidget( ) )
                                 EndIf
                              EndIf
                              
                           Case #PB_Shortcut_Right
                              If *keywidget\type = #__type_panel
                                 Protected *first._s_WIDGET = GetPosition( *keywidget, #PB_List_First, GetState( *keywidget ))
                                 If *first
                                    a_set( *first )  
                                 EndIf
                              Else
                                 If *keywidget\FirstWidget( )
                                    a_set( *keywidget\FirstWidget( ) )  
                                 EndIf
                              EndIf
                              
                        EndSelect
                     EndIf
                  EndIf
                  
                  DoEvents( *keywidget, #__event_KeyDown )
               EndIf
               If eventtype = #PB_EventType_Input
                  DoEvents( *keywidget, #__event_Input )
                  ; keyboard( )\input = 0
               EndIf
               If eventtype = #PB_EventType_KeyUp
                  DoEvents( *keywidget, #__event_KeyUp )
                  ;
                  keyboard( )\key[1] = 0
                  keyboard( )\Key    = 0
               EndIf
            EndIf
         EndIf
         
         ;
         ;\\ do all events
         ;
         ; mouse drag event start
         If event = #__event_MouseMove
            If Pressed( ) And 
               Pressed( )\press And 
               mouse( )\drag = 0
               ;
               mouse( )\drag = 1 ; ._s_DROP = AllocateStructure( _s_DROP);RAG )
               mouse( )\dragstart = #PB_Drag_Update
               DoEvents( Pressed( ), #__event_DragStart )
            EndIf
         EndIf
         
         ; mouse enter&leave event start
         If MouseData( )
            If root( ) And root( )\canvas\gadget = eventgadget
               If Not PressedButton( )
                  GetAtPoint( root( ), mouse( )\x, mouse( )\y, widgets( ))
               EndIf
               ;
               If event = #__event_LeftDown Or
                  event = #__event_MiddleDown Or
                  event = #__event_RightDown
                  
                  If Entered( ) And Not Entered( )\anchors
                     If Entered( )\picture[#__image_BackGround]\imageID And
                        ImageDepth( Entered( )\picture[#__image_BackGround]\image, #PB_Image_OriginalDepth ) > 31  
                        
                        If StartDrawing( ImageOutput(  Entered( )\picture[#__image_BackGround]\image ) )
                           DrawingMode( #PB_2DDrawing_AlphaChannel )
                           
                           If Not Alpha( Point( mouse( )\x - Entered( )\inner_x( ), mouse( )\y - Entered( )\inner_y( ) ) )
                              GetAtPoint( root( ), mouse( )\x, mouse( )\y, widgets( ), Entered( )\address )
                           EndIf
                           
                           StopDrawing( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
            EndIf
         EndIf
         
         ; mouse move event start
         If event = #__event_MouseMove
            ;\\ mouse-pressed-widget move event
            If mouse( )\dragstart And 
               Pressed( ) And 
               Pressed( ) <> Entered( )
               ;
               If root( ) <> Pressed( )\root
                  mouse( )\x = GadgetMouseX( Pressed( )\root\canvas\gadget )
                  mouse( )\y = GadgetMouseY( Pressed( )\root\canvas\gadget )
               EndIf
               DoEvents( Pressed( ), event )
            EndIf
            
            ;\\ mouse-entered-widget move event
            If Entered( ) And
               Entered( )\enter
               ;
               If Pressed( ) And
                  Pressed( )\root <> root( )
                  mouse( )\x = GadgetMouseX( root( )\canvas\gadget )
                  mouse( )\y = GadgetMouseY( root( )\canvas\gadget )
               EndIf
               DoEvents( Entered( ), event )
            EndIf
         EndIf
         
         ; mouse button down event start
         If event = #__event_LeftDown Or
            event = #__event_MiddleDown Or
            event = #__event_RightDown
            ;
            ;mouse( )\delta.allocate( POINT )
            mouse( )\press_x = mouse( )\x
            mouse( )\press_y = mouse( )\y
            ; 
            If Entered( )
               Pressed( )       = Entered( )
               Pressed( )\press = #True
               ;
               If MouseButtonPress( ) = #PB_MouseButton_Left
                  If Entered( )\anchors
                     ; Чтобы можно было переместить например шелкнув 
                     If Not a_index( ) 
                        If Entered( )\container
                           If Entered( )\caption And 
                              Entered( )\caption\interact
                              ; на загаловке
                              a_index( )  = #__a_moved
                           EndIf
                        Else
                           ; в любом месте кроме контейнера
                           a_index( )  = #__a_moved
                        EndIf
                     EndIf
                     
                     ;
                     If Not Entered( )\autosize 
                        If mouse( )\steps
                           mouse( )\press_x + ( mouse( )\press_x % mouse( )\steps )
                           mouse( )\press_x = ( mouse( )\press_x / mouse( )\steps ) * mouse( )\steps
                           mouse( )\press_y + ( mouse( )\press_y % mouse( )\steps )
                           mouse( )\press_y = ( mouse( )\press_y / mouse( )\steps ) * mouse( )\steps
                           
                           mouse( )\press_x + ( Entered( )\inner_x( ) % mouse( )\steps ) 
                           mouse( )\press_y + ( Entered( )\inner_y( ) % mouse( )\steps ) 
                        EndIf
                     EndIf
                  EndIf
                  ;
                  If EnteredButton( ) > 0
                     If Not Entered( )\anchors 
                        If Entered( )\bar 
                           mouse( )\press_x - Entered( )\bar\thumb\pos
                           mouse( )\press_y - Entered( )\bar\thumb\pos
                        EndIf
                     EndIf
                     
                  ElseIf Entered( )\autosize 
                     If Entered( )\parent
                        mouse( )\press_x - Entered( )\parent\container_x( )
                        mouse( )\press_y - Entered( )\parent\container_y( )
                     EndIf
                     
                  ElseIf Entered( )\anchors And a_index( )
                     ;
                     If Entered( )\anchors\id[a_index( )]
                        ;
                        ;\\ set current transformer index state
                        Entered( )\anchors\state = #__s_2
                        
                        ;\\ set delta pos
                        If Entered( )\parent
                           If Not ( Entered( )\bounds\attach And Entered( )\bounds\attach\mode = 2 )
                              mouse( )\press_x + Entered( )\parent\inner_x( )
                           EndIf
                           If Not ( Entered( )\bounds\attach And Entered( )\bounds\attach\mode = 1 )
                              mouse( )\press_y + Entered( )\parent\inner_y( )
                           EndIf
                           
                           ;\\
                           If Not Entered( )\child 
                              Select a_index( )
                                 Case #__a_left, #__a_left_top, #__a_left_bottom, #__a_moved ; left
                                    mouse( )\press_x + Entered( )\parent\scroll_x( )
                              EndSelect
                              
                              Select a_index( )
                                 Case #__a_top, #__a_left_top, #__a_right_top, #__a_moved ; top
                                    mouse( )\press_y + Entered( )\parent\scroll_y( )
                              EndSelect
                           EndIf
                        EndIf
                        
                        ;\\
                        mouse( )\press_x - Entered( )\anchors\id[a_index( )]\x
                        mouse( )\press_y - Entered( )\anchors\id[a_index( )]\y
                        
                        ;\\ window flag - sizeGadgets
                        If a_index( ) = #__a_moved
                           mouse( )\press_x + ( Entered( )\anchors\id[a_index( )]\x - Entered( )\screen_x( ))
                           mouse( )\press_y + ( Entered( )\anchors\id[a_index( )]\y - Entered( )\screen_y( ) )
                        EndIf
                        
                        ;\\
                        Select a_index( )
                           Case #__a_left_top, #__a_moved
                              mouse( )\press_x - Entered( )\anchors\pos
                              mouse( )\press_y - Entered( )\anchors\pos
                           Case #__a_left
                              mouse( )\press_x - Entered( )\anchors\pos
                           Case #__a_top
                              mouse( )\press_y - Entered( )\anchors\pos
                           Case #__a_right, #__a_right_top
                              mouse( )\press_x + Entered( )\anchors\pos - Entered( )\anchors\size
                              mouse( )\press_y - Entered( )\anchors\pos
                           Case #__a_bottom, #__a_left_bottom
                              mouse( )\press_y + Entered( )\anchors\pos - Entered( )\anchors\size
                              mouse( )\press_x - Entered( )\anchors\pos
                           Case #__a_right_bottom
                              mouse( )\press_x + Entered( )\anchors\pos - Entered( )\anchors\size
                              mouse( )\press_y + Entered( )\anchors\pos - Entered( )\anchors\size
                        EndSelect
                        
                        ;\\
                        If Entered( )\type = #__type_window
                           Select a_index( )
                              Case #__a_right, #__a_right_top
                                 mouse( )\press_x + Entered( )\fs * 2 + Entered( )\fs[1] + Entered( )\fs[3]
                                 
                              Case #__a_bottom, #__a_left_bottom
                                 mouse( )\press_y + Entered( )\fs * 2 + Entered( )\fs[2] + Entered( )\fs[4]
                                 
                              Case #__a_right_bottom
                                 mouse( )\press_x + Entered( )\fs * 2 + Entered( )\fs[1] + Entered( )\fs[3]
                                 mouse( )\press_y + Entered( )\fs * 2 + Entered( )\fs[2] + Entered( )\fs[4]
                                 
                           EndSelect
                        EndIf
                     EndIf
                     
                  Else
                     If Not Entered( )\anchors 
                        mouse( )\press_x - Entered( )\container_x( )
                        mouse( )\press_y - Entered( )\container_y( )
                        ;
                        If Entered( )\parent
                           If Not Entered( )\child
                              mouse( )\press_x - Entered( )\parent\scroll_x( )
                              mouse( )\press_y - Entered( )\parent\scroll_y( )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  ;  
                  ; Это должно сработат только внутри настоящего контейнера
                  ; например (Window;Container;Panel;ScrollArea) а не (Splitter;Frame)
                  If Entered( )\container > 0 And Not a_index( ) And Entered( )\enter = 2
                     mouse( )\selector.allocate( SELECTOR )
                     mouse( )\selector\x = mouse( )\press_x 
                     mouse( )\selector\y = mouse( )\press_y
                     mouse( )\selector\width = 0
                     mouse( )\selector\height = 0
                     mouse( )\selector\dotted = 1
                  Else
                     mouse( )\selector = #Null
                  EndIf
               EndIf
               ;
               ;\\ set active widget
               If event = #__event_LeftDown
                  If GetActive( ) <> Entered( )
                     ; Debug " \\ set active widget"
                     If Entered( )\parent And
                        Entered( )\parent\anchors
                        ;
                        If Entered( )\anchors
                           a_set( Entered( ) )
                        ElseIf is_integral_( Entered( )) 
                           a_set( Entered( )\parent )
                        EndIf
                     Else
                        SetActive( Entered( ))
                     EndIf
                  EndIf
               EndIf
               ;
               DoEvents( Entered( ), #__event_Down )
               ;
               If mouse( )\click = 1
                  DoEvents( Entered( ), event )
               EndIf
            EndIf
         EndIf
         
         ; mouse button up event start
         If event = #__event_LeftUp Or
            event = #__event_MiddleUp Or
            event = #__event_RightUp
            
            ;\\
            If Pressed( )
               ;\\ do up&click events
               If Pressed( )\press
                  
                  ;\\ do drop events
                  If mouse( )\drop
                     If mouse( )\dragstart = #PB_Drag_Enter
                        mouse( )\dragstart = #PB_Drag_Finish
                     EndIf
                     ;
                     If is_drag_move( )
                        If Entered( )\drop
                           Debug "drop - is_drag_move"
                           DoEvents( Entered( ), #__event_Drop )
                        EndIf
                     Else
                        If IsContainer( Pressed( ) ) 
                           If Pressed( )\drop
                              If mouse( )\selector
                                 mouse( )\drop\x = DPIUnScaledX( mouse( )\selector\x - Pressed( )\inner_x( ) - Pressed( )\scroll_x( ) )
                                 mouse( )\drop\y = DPIUnScaledY( mouse( )\selector\y - Pressed( )\inner_y( ) - Pressed( )\scroll_y( ) )
                                 
                                 mouse( )\drop\width  = DPIUnScaledX( mouse( )\selector\width )
                                 mouse( )\drop\height = DPIUnScaledY( mouse( )\selector\height )
                                 
                                 DoEvents( Pressed( ), #__event_Drop )
                              EndIf
                           EndIf
                           
                        ElseIf Entered( )\drop
                           If mouse( )\dragstart = #PB_Drag_Finish
                              mouse( )\drop\x = DPIUnScaledX( mouse( )\x - Entered( )\inner_x( ) - Entered( )\scroll_x( ) )
                              mouse( )\drop\y = DPIUnScaledY( mouse( )\y - Entered( )\inner_y( ) - Entered( )\scroll_y( ) )
                              
                              mouse( )\drop\width  = #PB_Ignore
                              mouse( )\drop\height = #PB_Ignore
                              
                              DoEvents( Entered( ), #__event_Drop )
                           EndIf
                        EndIf
                     EndIf
                     
                     ;\\ reset
                     FreeStructure( mouse( )\drop )
                     mouse( )\drop = #Null
                  EndIf
                  
                  ;\\ do enter&leave events
                  If mouse( )\dragstart
                     If Entered( ) <> Pressed( )
                        GetAtPoint( root( ), mouse( )\x, mouse( )\y, widgets( ) )
                        
                        If Entered( ) <> Pressed( )
                           Entered( ) = Pressed( )
                           GetAtPoint( Pressed( )\root, mouse( )\x, mouse( )\y, widgets( ) )
                        EndIf
                     EndIf
                     mouse( )\dragstart = 0
                  EndIf
                  
                  ;
                  Pressed( )\press = #False
                  ;\\
                  DoEvents( Pressed( ), #__event_Up )
                  
                  ;\\ do up left&right events
                  If mouse( )\click = 1
                     DoEvents( Pressed( ), event )
                  EndIf
                  
                  ;\\ do 1click left&right events
                  If Not mouse( )\drag
                     If Pressed( ) = Entered( )
                        If event = #__event_LeftUp
                           DoEvents( Pressed( ), #__event_LeftClick )
                        EndIf
                        If event = #__event_RightUp
                           DoEvents( Pressed( ), #__event_RightClick )
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ do 2click left&right events
                  If mouse( )\click = 2
                     If event = #__event_LeftUp
                        DoEvents( Pressed( ), #__event_Left2Click )
                     EndIf
                     If event = #__event_RightUp
                        DoEvents( Pressed( ), #__event_Right2Click )
                     EndIf
                     
                     ;\\ do 3click events
                  ElseIf mouse( )\click = 3
                     If event = #__event_LeftUp
                        DoEvents( Pressed( ), #__event_Left3Click )
                     EndIf
                     If event = #__event_RightUp
                        DoEvents( Pressed( ), #__event_Right3Click )
                     EndIf
                     
                  EndIf
               EndIf
               
               ; 
               If Pressed( ) 
                  If Pressed( )\align 
                     UpdateAlign( Pressed( ) )
                  EndIf
               Else
                  Debug " УДАЛЕНО пока было нажато"
               EndIf
               
               ;
               Pressed( ) = 0
            EndIf
            
            ;\\ reset mouse states
            mouse( )\drag = 0
            mouse( )\press_x = 0
            mouse( )\press_y = 0
            mouse( )\buttons = 0
            mouse( )\selector = 0
         EndIf
         
         ;
         ;\\ do reset data
         ;
         If mouse( )\data = #__mouse_leave
            mouse( )\data = 0
         Else
            If mouse( )\data & #__mouse_left
               mouse( )\data &~ #__mouse_left
            EndIf
            If mouse( )\data & #__mouse_top
               mouse( )\data &~ #__mouse_top
            EndIf
            If mouse( )\data & #__mouse_right
               mouse( )\data &~ #__mouse_right
            EndIf
            If mouse( )\data & #__mouse_bottom
               mouse( )\data &~ #__mouse_bottom
            EndIf
            If mouse( )\data & #__mouse_release
               mouse( )\data &~ #__mouse_release
            EndIf
            If mouse( )\data & #__mouse_update
               mouse( )\data &~ #__mouse_update
            EndIf
         EndIf
         
         ProcedureReturn #PB_Event_Gadget
         
      EndProcedure
      
      Procedure CanvasEvents( )
         EventHandler( EventGadget( ), EventType( ), EventData( ) )
      EndProcedure
      
      ;-
      Procedure   ResetEvents( *this._s_WIDGET )
         If ListSize( __gui\event\queues( ) )
            ForEach __gui\event\queues( )
               Define __widget = __gui\event\queues( )\widget
               Define __event  = __gui\event\queues( )\type
               Define __item   = __gui\event\queues( )\item
               Define __data   = __gui\event\queues( )\data
               
               If GetRoot( __widget ) = *this
                  If __gui\event\queuesmask Or 
                     __gui\event\mask & 1<<__event
                     
                     DeleteElement( __gui\event\queues( ) )
                     ;                      If __event = #__event_focus
                     ;                         Debug "SET events "+GetClass(__widget) +" "+ classFromEvent(__event) +" "+ Str(__gui\event\mask & 1<<__event)
                     ;                      EndIf
                     
                     If __event = #__event_Free
                        If IsContainer( __widget )
;                            If IsChildrens( __widget)
;                               Delete( __widget )
;                            EndIf
                           Free( @__widget )
                        EndIf
                     Else
                        Post( __widget, __event, __item, __data )
                     EndIf
                  EndIf
               Else
                  If GetClass( __widget ) = GetClass( *this)
                     DeleteElement( __gui\event\queues( ) )
                     Debug "ERRORS event reset ["+GetClass( __widget ) +" "+ GetClass( *this) +"]"
                     Break
                  EndIf
               EndIf
            Next
         EndIf
      EndProcedure
      
      Procedure   AddEvents( *this._s_root, event.l, *button = #PB_All, *data = #Null )
         If *this > 0
            If event = #__event_free
               If *this\haschildren
                  If StartEnum( *this )
                     AddEvents( widgets( ), #__event_free  ) 
                     StopEnum( )
                  EndIf
               EndIf
            EndIf
            
            ;   
            If test_event_send
               Static test
               Debug ""+*this\class + " - Put event queues( test "+test +" ) "+ ClassFromEvent(event)
               test + 1
            EndIf
            
            ;
            ; Если такое событие уже есть пропускаем
            If ListSize(__gui\event\queues( ))  
               If ListIndex( __gui\event\queues( ) ) >= 0 
                  If __gui\event\queues( )\widget = *this
                     If __gui\event\queues( )\type = event
                        ProcedureReturn __gui\event\queues( )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;
            ; 
            If AddElement( __gui\event\queues( ) )
               __gui\event\queues.allocate( EVENTDATA, ( ) )
               __gui\event\queues( )\widget = *this
               __gui\event\queues( )\type   = event
               __gui\event\queues( )\item   = *button
               __gui\event\queues( )\data   = *data
               
               ;                If event = #__event_focus
               ;                   Debug  "ADD events "+ClassFromEvent( event ) +" "+ *this\class 
               ;                EndIf
               ProcedureReturn __gui\event\queues( )
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i Post( *this._s_root, event.l, *button = #PB_All, *data = #Null )
         Protected result, __widget = #Null, __event = #PB_All, __item = #PB_All, __data = #Null
         
         If *this > 0 
            If Not __gui\event\queuesmask And 
               Not __gui\event\mask & 1<<event
               
               ProcedureReturn AddEvents( *this, event, *button, *data )
            Else
               ;                If event = #__event_focus
               ;                   Debug  " POST events "+ClassFromEvent( event ) +" "+ *this\class 
               ;                EndIf
               
               If is_bar_( *this )
                  ;
                  If event = #__event_LeftClick Or
                     event = #__event_Change
                     If *this\TabEntered( )
                        *button = *this\TabEntered( )\tindex
                     EndIf
                     ; Debug ""+ClassFromEvent(event)+" "+*this\TabEntered( ) +" "+ *Button
                  EndIf
                  ;
                  If *button < 0
                     ProcedureReturn 0
                  EndIf
               EndIf
               
               ;\\ 
               __widget = EventWidget( )
               __event  = WidgetEvent( )
               __item   = WidgetEventItem( )
               __data   = WidgetEventData( )
               
               ;\\
               EventWidget( )     = *this
               WidgetEvent( )     = event
               WidgetEventItem( ) = *button
               WidgetEventData( ) = *data
               
               ;\\ menu send bind event
               If is_bar_( *this ) 
                  If *this\menu\parent
                     While *this\menu\parent
                        *this = *this\menu\parent
                     Wend
                     EventWidget( )     = *this
                  Else
                     If *this\TabEntered( ) And *this\TabEntered( )\childrens
                        ; Чтобы не отправлять события
                        ProcedureReturn 0
                     EndIf
                  EndIf
                  
                  ; Debug ""+ *button +" "+ *this\class +" POSTMENU "
               EndIf
               
               ; Debug "send - "+*this\class +" "+ classFromEvent(event) +" "+ *button +" "+ *data
               result = #True
               
               ; examples bars area
               If event = #__event_MouseMove
                  If widget::__gui\DrawingRoot
                     StopDraw( )
                     widget::__gui\DrawingRoot = 0
                  EndIf
               EndIf    
               
               ;\\
               If Not is_root_( *this )
                  ;\\ 1 call (current-widget) bind event function
                  ForEach __gui\event\binds( )
                     If __gui\event\binds( )\widget = *this 
                        If __gui\event\binds( )\type = event And
                           Not ( __gui\event\binds( )\item >= 0 And __gui\event\binds( )\item <> *button )
                           
                           If __gui\event\binds( )\data
                              WidgetEventData( ) = __gui\event\binds( )\data
                           EndIf
                           
                           result = __gui\event\binds( )\function( )
                           If result = #PB_Ignore
                              Break
                           EndIf
                        EndIf
                     EndIf
                  Next
                  ;
                  
                  ;\\ 2 call (current-widget-window) bind event function
                  If *this\window 
                     If result <> #PB_Ignore
                        If Not is_root_( *this\window )
                           ForEach __gui\event\binds( )
                              If __gui\event\binds( )\widget = *this\window  
                                 If __gui\event\binds( )\type = event And
                                    Not ( __gui\event\binds( )\item >= 0 And __gui\event\binds( )\item <> *button )
                                    result = __gui\event\binds( )\function( )
                                    If result = #PB_Ignore
                                       Break
                                    EndIf
                                 EndIf
                              EndIf
                           Next
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;\\ 3 call (current-widget-root) bind event function
               If *this\root
                  If result <> #PB_Ignore
                     ForEach __gui\event\binds( )
                        If __gui\event\binds( )\widget = *this\root 
                           If __gui\event\binds( )\type = event And
                              Not ( __gui\event\binds( )\item >= 0 And __gui\event\binds( )\item <> *button )
                              result = __gui\event\binds( )\function( )
                              If result = #PB_Ignore
                                 Break
                              EndIf
                           EndIf
                        EndIf
                     Next
                  EndIf
               EndIf
               
               If result = #PB_Ignore
                  result = #True
               EndIf
               
               ;\\
               If event = #__event_Close
                  If result
                     If is_root_( *this )
                        Select result
                           Case #PB_All 
                              Close( #PB_All )
                           Default
                              Close( *this\root )
                        EndSelect
                     Else
                        Select result 
                           Case #PB_All
                              If Not PostQuit( )
                                 ForEach roots( ) 
                                    PostFree( roots( ))
                                 Next
                              EndIf
                           Default
                              PostFree( *this )
                        EndSelect
                     EndIf
                  EndIf
               EndIf
;                If event = #__event_Free
;                   If result
;                      Delete( *this, #True )
;                   EndIf
;                EndIf
               
               ;\\ если это оставить то после вызова функции напр setState( ) получается EventWidget( ) будеть равно #Null
               EventWidget( )       = __widget
               WidgetEvent( )       = __event
               WidgetEventItem( )   = __item
               WidgetEventData( )   = __data
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i Bind( *this._s_WIDGET, *callback, event.l = #PB_All, item.l = #PB_All, *data = 0 )
         ;
         If *this < 0
            PushMapPosition(roots( ))
            ForEach roots( )
               If event = #__event_Cursor
                  roots( )\canvas\bindcursor = 1
               EndIf
               
               Bind( roots( ), *callback, event, item )
            Next
            PopMapPosition(roots( ))
            ProcedureReturn #PB_All
            ;
         Else
            If event < 0 
               Define i
               For i = 0 To #__event - 1
                  If i = #__event_Draw ; And Not is_root_( *this )
                     Continue
                  EndIf
                  If i = #__event_Resize
                     Continue
                  EndIf
                  
                  ; set defaul widget events
                  Bind( *this, *callback, i, item )
               Next
               ;
            Else
               LastElement( __gui\event\binds( ) )
               AddElement(__gui\event\binds( ))
               __gui\event\binds.allocate( HOOK, ( ))
               
               __gui\event\binds( )\function = *callback
               __gui\event\binds( )\widget   = *this
               __gui\event\binds( )\type     = event
               __gui\event\binds( )\item     = item
               __gui\event\binds( )\data     = *data
               
               ; 
               If event = #__event_Draw
                  *this\binddraw = 1
               EndIf
               If event = #__event_Resize
                  *this\bindresize = 1
               EndIf
               If event = #__event_Cursor
                  *this\bindcursor = 1
               EndIf
               
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.i Unbind( *this._s_WIDGET, *callback, event.l = #PB_All, item.l = #PB_All )
         If *this < 0
            PushMapPosition(roots( ))
            ForEach roots( )
               Unbind( roots( ), *callback, event, item )
            Next
            PopMapPosition(roots( ))
            ProcedureReturn #PB_All
            ;
         Else
            If event < 0
               Define i
               For i = 0 To #__event - 1
                  Unbind( *this, *callback, i, item )
               Next
               ;
            Else
               ForEach __gui\event\binds( )
                  ;   Debug ""+__gui\event\binds( )\widget +" "+ __gui\event\binds( )\type +" "+ event +" "+ __gui\event\binds( )\item +" "+ *button
                  If __gui\event\binds( )\widget = *this And 
                     __gui\event\binds( )\type = event And 
                     __gui\event\binds( )\item = item
                     
                     DeleteElement( __gui\event\binds( ), 1 )
                  EndIf
               Next
            EndIf
         EndIf
      EndProcedure
      
      
      Procedure PostQuit( *root._s_root = #Null )
         If __gui\event\loop = #True
            __gui\event\loop = #False
            
;             If *root And *root\parent
;                If IsWindow( *root\canvas\window )
;                   CloseWindow( *root\canvas\window )
;                EndIf
;                If IsGadget( *root\canvas\gadget )
;                   FreeGadget( *root\canvas\gadget )
;                EndIf
;                ;
;                DisableWindow( GetCanvasWindow(*root\parent), #False )
;                CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
;                  SetActiveGadget(GetCanvasGadget(*root\parent) )
;                CompilerEndIf
;                ;ChangeCurrentCanvas( GadgetID(GetCanvasGadget(*root\parent)) )
;                ;SetActive ( *root\parent )
;             EndIf
            
            Debug "  Exit post... [LOOP]"
            
            ;\\ stop main loop
            CompilerSelect #PB_Compiler_OS
               CompilerCase #PB_OS_Linux
                  gtk_main_quit_( )
                  
               CompilerCase #PB_OS_Windows
                  PostQuitMessage_( 0 )
                  
               CompilerCase #PB_OS_MacOS
                  CocoaMessage( 0, CocoaMessage( 0, 0, "NSApplication sharedApplication" ), "stop:", 0 )
                  
            CompilerEndSelect
            
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      Procedure WaitQuit( *root._s_root = #Null )
         If __gui\event\loop = #False
            __gui\event\loop = #True
            
            ; ReDraw( *root )
            
            PushMapPosition( roots( ))
            ForEach roots( )
               ReDraw( roots( ) )
            Next
            PopMapPosition( roots( ))
            
            ; Debug ""+ EventWidget( )  +" "+ WidgetEvent( ) +" "+ WidgetEventItem( ) +" "+ WidgetEventData( )
            
            ;\\ start main loop
            CompilerSelect #PB_Compiler_OS
               CompilerCase #PB_OS_Linux
                  gtk_main_( )
                  
               CompilerCase #PB_OS_Windows
                  Protected msg.MSG
                  
                  While GetMessage_( @msg, #Null, 0, 0 )
                     TranslateMessage_( msg )
                     DispatchMessage_( msg )
                  Wend
                  
               CompilerCase #PB_OS_MacOS
                  ; Define sharedApplication = CocoaMessage( 0, 0, "NSApplication sharedApplication" )
                  ; Define currentEvent = CocoaMessage(0,sharedApplication , "currentEvent") ; var currentEvent: NSEvent? { get }
                  ; Debug " WaitQuit - "+currentEvent
                  CocoaMessage( 0, CocoaMessage( 0, 0, "NSApplication sharedApplication" ), "run" )
                  
            CompilerEndSelect
            
;             If *root
;                If is_root_( *root )
;                   If IsWindow( *root\canvas\window )
;                      CloseWindow( *root\canvas\window )
;                   EndIf
;                   If IsGadget( *root\canvas\gadget )
;                      FreeGadget( *root\canvas\gadget )
;                   EndIf
;                EndIf
;                
;                If *root\parent
;                   ; ChangeCurrentCanvas( GadgetID(GetCanvasGadget(*root\parent)) )
;                   ; DisableWindow( GetCanvasWindow(*root\parent), #False )
;                   ; SetActive ( *root\parent )
;                EndIf
;                ;
;                ; Free( *root )
;             EndIf
            
            Debug "  Exit... [LOOP]"
         EndIf
      EndProcedure
      
      Procedure  WaitClose( *callback = #Null )
         If *callback
            Bind( #PB_All, *callback )
         EndIf
         
         ; Repeat : Until WaitWindowEvent( 1 ) = #PB_Event_CloseWindow
         Repeat 
            If MapSize( roots( ))
               WaitWindowEvent( 1 ) 
            Else
               Break
            EndIf
         ForEver 
      EndProcedure
      
      
      ;-
      ;-  CREATEs
      ;-
      Procedure.i Create( *parent._s_WIDGET, class.s, Type.w, X.l, Y.l, Width.l, Height.l, Text.s = #Null$, flag.q = #Null, *param_1 = #Null, *param_2 = #Null, *param_3 = #Null, size.l = 0, round.l = 0, ScrollStep.d = 1.0 )
         Protected *root._s_root
         If *parent
            *root = *parent\root
         EndIf
         ;
         size = DPIScaled( size )
         
         
         ;
         Protected color, img                 ;, *this.allocate( Widget )
         
         Protected *this._s_WIDGET
         If *root And 
            constants::BinaryFlag( Flag, #__flag_autosize ) And
            Not ListSize( widgets( ) )
            X              = 0
            Y              = 0
            Width          = *root\width
            Height         = *root\height
            *root\autosize = #True
            *this          = *root
         Else
            *this.allocate( widget )
         EndIf
         
         ;\\
         *this\font   = - 1
         *this\create = #True
         *this\color  = _get_colors_( )
         *this\type   = Type
         *this\class  = class
         *this\round  = DPIScaled( round )
         ;
         ;\\ replace pb flag
         flag = FromPBFlag( Type, flag )
         ;
         *this\child  = constants::BinaryFlag( Flag, #__flag_child )
         If constants::BinaryFlag( Flag, #__flag_NoFocus )
            *this\focus = #__s_nofocus
         EndIf
         ;
         ;\\ Flags
         *this\flag = Flag
         If Type = #__type_Button Or
            Type = #__type_ButtonImage Or
            Type = #__type_HyperLink
            
            *this\flag | #__flag_TextCenter
            
         ElseIf Type = #__type_ComboBox 
            
            If constants::BinaryFlag( Flag, #__flag_Center, #False )
               If Not (*this\flag & #__flag_Left Or
                       *this\flag & #__flag_Right Or
                       *this\flag & #__flag_Top Or
                       *this\flag & #__flag_Bottom)
                  *this\flag | #__flag_TextLeft
               EndIf
            EndIf
            If constants::BinaryFlag( Flag, #__align_image )
               *this\flag | #__flag_Center 
            Else
               *this\flag | #__flag_TextCenter 
            EndIf
            
            If constants::BinaryFlag( Flag, #__flag_TextRight )
               *this\flag & ~ #__flag_TextLeft
               *this\flag | #__flag_TextRight
            EndIf
         ElseIf Type = #__type_Spin Or
                Type = #__type_String Or
                Type = #__type_Option Or
                Type = #__type_CheckBox
            
            If constants::BinaryFlag( Flag, #__flag_TextCenter, #False )
               *this\flag | #__flag_TextCenter | #__flag_TextLeft
            EndIf
            
            If constants::BinaryFlag( Flag, #__flag_TextRight )
               *this\flag & ~ #__flag_TextLeft
               *this\flag | #__flag_TextRight
            EndIf
            
         ElseIf Type = #__type_Text
            If constants::BinaryFlag( Flag, #__flag_TextInLine, #False )
               *this\flag | #__flag_Textwordwrap
            EndIf
         EndIf
         
         ;\\
         *this\frame_x( )      = #PB_Ignore
         *this\frame_y( )      = #PB_Ignore
         *this\frame_width( )  = #PB_Ignore
         *this\frame_height( ) = #PB_Ignore
         
         If *this\type = #__type_ButtonImage Or
            *this\type = #__type_Button 
            If constants::BinaryFlag( flag, #PB_Button_Toggle )
               flag &~ #PB_Button_Toggle
               If Not *this\togglebox
                  *this\togglebox.allocate( BOX )
               EndIf
            EndIf
            *this\deffocus = Bool( flag & #PB_Button_Default )
         EndIf
         If *this\type = #__type_CheckBox 
            *this\togglebox.allocate( BOX )
            *this\togglebox\round  = dpi_scale_two
            *this\togglebox\width = size
            *this\togglebox\width  - Bool( Not *this\togglebox\width % 2)
            *this\togglebox\height = *this\togglebox\width
         EndIf
         If *this\type = #__type_Option
            *this\togglebox.allocate( BOX )
            *this\togglebox\round  = size/2
            *this\togglebox\width  = size
            *this\togglebox\width  - Bool( Not *this\togglebox\width % 2)
            *this\togglebox\height = *this\togglebox\width
         EndIf
         
         If *this\togglebox And
            *this\togglebox\width
            *this\padding\x = *this\togglebox\width + DPIScaled(8)
         EndIf
         
         
         
         ;\\ Border & Frame size
         If is_integral_( *this )
            If *this\type = #__type_Scroll
               *this\fs = 0;10
            Else
               *this\fs = 0
            EndIf
         Else
            If constants::BinaryFlag( *this\flag, #__flag_BorderDouble ) Or
               constants::BinaryFlag( *this\flag, #__flag_BorderRaised )
               *this\fs = 2
            ElseIf constants::BinaryFlag( *this\Flag, #__flag_BorderLess )
               *this\fs = 0
            ElseIf constants::BinaryFlag( *this\Flag, #__flag_BorderFlat ) Or
                   constants::BinaryFlag( *this\Flag, #__flag_BorderSingle ) Or
                   *this\type = #__type_Panel Or
                   *this\type = #__type_Spin Or
                   *this\type = #__type_ButtonImage Or
                   *this\type = #__type_Button Or
                   *this\type = #__type_ComboBox Or
                   *this\type = #__type_ExplorerList 
               
               *this\fs = 1
            Else
               If *this\type = #__type_Editor Or
                  *this\type = #__type_String Or
                  *this\type = #__type_ScrollArea Or
                  *this\type = #__type_ListView Or
                  *this\type = #__type_ListIcon Or
                  *this\type = #__type_Tree 
                  *this\fs = 2
               EndIf
            EndIf
         EndIf
         *this\bs = *this\fs
         
         ;\\
         If *parent
            ;\\
            If constants::BinaryFlag( Flag, #__flag_autosize )
               If *parent <> *this
                  If *parent\type <> #__type_Splitter
                     *this\autosize = 1
                     ; set transparent parent
                     *parent\color\back   = - 1
                     *parent\color\_alpha = 0
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If is_integral_( *this )
               *this\createindex   =- 1
               *this\address = *parent\address
               ReParent( *this, *parent )
            Else
               ;*this\text\string = Text
               SetParent( *this, *parent, #PB_Default )
            EndIf
         EndIf
         
         ;
         ;\\ add count types
         CountType( *this, 1 )
         
         ;\\ - Create Texts
         If *this\type = #__type_Text Or
            *this\type = #__type_Editor Or
            *this\type = #__type_String Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_Button Or
            *this\type = #__type_Option Or
            *this\type = #__type_CheckBox Or
            *this\type = #__type_HyperLink
            
            *this\row.allocate( ROW )
            
            *this\edit_caret_0( ) = - 1
            *this\edit_caret_1( ) = - 1
            *this\edit_caret_2( ) = - 1
            *this\LineFocusedIndex( ) = - 1
            
            
            ;\\ - Create String
            If *this\type = #__type_String
               *this\padding\x = DPIScaled(3)
               *this\text\caret\x = *this\padding\x
            EndIf
            
            ;\\ - Create Text
            If *this\type = #__type_Text
               *this\color\fore  = - 1
               *this\color\back  = _get_colors_( )\fore
               *this\color\front = _get_colors_( )\front
               If *this\fs
                  *this\color\frame = _get_colors_( )\frame
               EndIf
               If constants::BinaryFlag( *this\flag, #PB_Text_Border, #False ) 
                  *this\fs = 0
                  *this\bs = 0
               EndIf
               *this\padding\x = DPIScaled(2)
            EndIf
            
            ;\\ - Create Editor
            If *this\type = #__type_Editor
               *this\mode\fullselection = constants::BinaryFlag( *this\flag, #__flag_RowFullSelect, #False ) * DPIScaled(7)
               
               *this\MarginLine( )\hide        = constants::BinaryFlag( *this\flag, #__flag_TextNumeric, #False )
               *this\MarginLine( )\color\front = $C8000000 ; *this\color\back[0]
               *this\MarginLine( )\color\back  = $C8F0F0F0 ; *this\color\back[0]
               
               *this\padding\x = DPIScaled(1)
            EndIf
            
            ;\\ - Create Button
            If *this\type = #__type_ButtonImage Or
               *this\type = #__type_Button
               *this\padding\x = DPIScaled(4)
               *this\padding\y = DPIScaled(4)
            EndIf
            
            If *this\type = #__type_Option
               ;\\
               If *this\BeforeWidget( )
                  If *this\BeforeWidget( )\type = #__type_Option
                     *this\groupbar = *this\BeforeWidget( )\groupbar
                  Else
                     *this\groupbar = *this\BeforeWidget( )
                  EndIf
               Else
                  *this\groupbar = *parent
               EndIf
               
               *this\color\fore  = - 1
               *this\color\back  = _get_colors_( )\fore
               *this\color\front = _get_colors_( )\front
            EndIf
            
            If *this\type = #__type_CheckBox
               *this\mode\threestate = constants::BinaryFlag( Flag, #PB_CheckBox_ThreeState )
               
               *this\color\fore  = - 1
               *this\color\back  = _get_colors_( )\fore
               *this\color\front = _get_colors_( )\front
            EndIf
            
            If *this\type = #__type_HyperLink
               *this\mode\Lines = constants::BinaryFlag( Flag, #PB_HyperLink_Underline )
               
               *this\color\fore[#__s_0]  = - 1
               *this\color\back[#__s_0]  = _get_colors_( )\fore
               *this\color\front[#__s_0] = _get_colors_( )\front
               
               Color = *param_1
               If Color
                  If Not Alpha( Color )
                     Color = Color & $FFFFFF | 255 << 24
                  EndIf
                  *this\color\front[#__s_1] = Color
               EndIf
            EndIf
            
         EndIf
         
         ;\\ - Create Lists
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListView Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ExplorerList Or
            *this\type = #__type_Properties
            
            ;*this\fs[1] = 50
            ;*this\fs[2] = 50
            ;*this\fs[3] = 50
            ;*this\fs[4] = 50
            *this\color\fore    = 0
            *this\color\back[0] = $FFFFFFFF
            
            *this\row.allocate( ROW )
            ;
            *this\TabState( )         = - 1
            *this\RowFocusedIndex( )  = - 1
            *this\LineFocusedIndex( ) = - 1
            
            If Type = #__type_Properties
               If *this\bar
                  *this\bar\page\pos = 60
               EndIf
            EndIf
            
            *this\color\_alpha = 255
            *this\color\fore[#__s_0] = - 1
            *this\color\back[#__s_0] = $ffffffff ; _get_colors_( )\fore
            *this\color\front[#__s_0] = _get_colors_( )\front
            *this\color\frame[#__s_0] = _get_colors_( )\frame
            
            *this\WidgetChange( ) = 1
            *this\TextChange( ) = 1
            
            *this\padding\x  = dpi_scale_two ;  DPIScaled(4)
            
            If constants::BinaryFlag( Flag, #__flag_nolines )
               flag & ~ #__flag_nolines
            Else
               flag | #__flag_nolines
            EndIf
            
            If constants::BinaryFlag( Flag, #__flag_NoButtons ) 
               flag & ~ #__flag_NoButtons
            Else
               flag | #__flag_NoButtons
            EndIf
            
            If flag
               Flag( *this, flag, #True )
            EndIf
         EndIf
         
         ;\\ - Create Containers
         If *this\type = #__type_Container Or
            *this\type = #__type_ScrollArea Or
            *this\type = #__type_Panel Or
            *this\type = #__type_MDI Or
            *this\type = #__type_Frame
            
            If *this\type = #__type_Frame
               *this\container = - 1
            ElseIf *this\type = #__type_Panel
               *this\container = 3
            ElseIf *this\type = #__type_MDI
               *this\container = 4
            Else
               *this\container = 5
               *this\bindresize = #True
            EndIf
            *this\color\back = $FFF9F9F9
            
            ;
            If *this\type = #__type_ScrollArea
               Protected val = *param_3
               *this\scroll\increment = val
            EndIf
            
            ;\\
            If *this\type = #__type_Frame
               *this\color\back = $96D8D8D8
               
               If Text
                  *this\fs[2] = 8
               EndIf
            EndIf
            
            ;\\
            If *this\type = #__type_Panel
               CreateBar( *this, #__flag_BarSmall, #__type_TabBar ) 
               If constants::BinaryFlag( Flag, #__flag_Vertical ) 
                  BarPosition(*this\tabbar, 1);, 100 )
               EndIf
               If constants::BinaryFlag( Flag, #__flag_nobuttons ) 
                  If constants::BinaryFlag( Flag, #__flag_Vertical ) 
                     *this\fs[1] = 0
                  Else
                     *this\fs[2] = 0
                  EndIf
               EndIf
            EndIf
            
            ;\\ Open gadget list
            If *this\container > 0 
               If constants::BinaryFlag( *this\flag, #__flag_NoGadgets, #False )
                  OpenList( *this )
               EndIf
            EndIf
         EndIf
         
         ;\\ - Create ComboBox
         If *this\type = #__type_ComboBox
            *this\combobutton.allocate( BUTTONS )
            *this\combobutton\color           = _get_colors_( )
            *this\combobutton\arrow\type      = #__arrow_type
            *this\combobutton\arrow\size      = DPIScaled( #__arrow_size )
            *this\combobutton\arrow\direction = 2
            
            ;\\
            If constants::BinaryFlag( *this\flag, #PB_ComboBox_Editable )
               *this\stringbar = Create( *this, "ComboString", #__type_String,
                                         0, 0, 0, 0, #Null$, #__flag_child | #__flag_Borderless|*this\flag )
            Else
               *this\padding\x = DPIScaled(4)
               *this\padding\y = DPIScaled(4)
            EndIf
            
            *this\fs[3] = size
            *this\fs[3] + Bool( Not *this\fs[3] % 2)
         EndIf
         
         ;\\ - Create Bars
         If *this\type = #__type_MenuBar Or
            *this\type = #__type_PopupBar Or
            *this\type = #__type_ToolBar Or
            *this\type = #__type_TabBar Or
            *this\type = #__type_Scroll Or
            *this\type = #__type_Progress Or
            *this\type = #__type_Track Or
            *this\type = #__type_Splitter Or
            *this\type = #__type_Spin
            
            *this\bar.allocate( BAR )
            *this\bar\button.allocate( BUTTONS )
            *this\bar\button.allocate( BUTTONS, [1] )
            *this\bar\button.allocate( BUTTONS, [2] )
            
            *this\scroll\increment  = ScrollStep
            Protected._s_BUTTONS *BB1, *BB2, *SB
            *SB  = *this\bar\button
            *BB1 = *this\bar\button[1]
            *BB2 = *this\bar\button[2]
            
            ; - Create Scroll
            If *this\type = #__type_Scroll
               *this\color\back  = $FFF9F9F9 ; - 1
               *this\color\front = $FFFFFFFF
               
               *this\bar\invert   = constants::BinaryFlag( Flag, #__flag_Invert )
               *this\bar\vertical = Bool( constants::BinaryFlag( Flag, #__flag_Vertical ) Or constants::BinaryFlag( Flag, #PB_ScrollBar_Vertical ))
               
               If is_integral_( *this )
                  If *this\bar\vertical
                     *this\class = class + "-v"
                  Else
                     *this\class = class + "-h"
                  EndIf
               EndIf
               
               *BB1\color = _get_colors_( )
               *BB2\color = _get_colors_( )
               *SB\color  = _get_colors_( )
               
               ;
               If Not constants::BinaryFlag( Flag, #__flag_nobuttons ) 
                  *BB1\size = - 1
                  *BB2\size = - 1
               EndIf
               *SB\size = size
               
               *BB1\round = *this\round
               *BB2\round = *this\round
               *SB\round  = *this\round
               
               *BB1\arrow\type = #__arrow_type 
               *BB2\arrow\type = *BB1\arrow\type 
               
               *BB1\arrow\size = DPIScaled( #__arrow_size )
               *BB2\arrow\size = DPIScaled( #__arrow_size )
               *SB\arrow\size  = DPIScaled( 3 )
            EndIf
            
            ;- Create Spin
            If *this\type = #__type_Spin
               *this\bar\PageChange( ) = 1
               
               *this\color\back   = - 1
               *this\color\_alpha = 255
               *this\color\back   = $FFFFFFFF
               
               *BB1\color = _get_colors_( )
               *BB2\color = _get_colors_( )
               
               ;
               *this\bar\invert = constants::BinaryFlag( Flag, #__flag_Invert )
               
               *this\bar\mirror = constants::BinaryFlag( Flag, #__spin_mirror )
               
               If *this\flag & #__spin_Plus
                  If constants::BinaryFlag( Flag, #__flag_Vertical ) Or 
                     constants::BinaryFlag( Flag, #PB_Splitter_Vertical )
                     *this\bar\vertical = #True
                  EndIf
                  *this\flag = flag | #__flag_TextCenter
               Else
                  If Not Bool( constants::BinaryFlag( Flag, #__flag_Vertical ) Or 
                               constants::BinaryFlag( Flag, #PB_Splitter_Vertical ))
                     *this\bar\vertical = #True
                  EndIf
                  
                  *BB1\arrow\size = DPIScaled( #__arrow_size )
                  *BB2\arrow\size = DPIScaled( #__arrow_size )
                  
                  *BB1\arrow\type = #__arrow_type
                  *BB2\arrow\type = *BB1\arrow\type
               EndIf
               
               ;\\
               *this\stringbar = Create( *this, "SpinString",
                                         #__type_String, 0, 0, 0, 0, #Null$,
                                         #__flag_child | #__flag_Textnumeric | #__flag_Borderless | *this\flag&~(#__flag_invert|#__flag_vertical) )
               
               
            EndIf
            
            ; - Create Track
            If *this\type = #__type_Track
               *this\color\back = - 1
               *BB1\color       = _get_colors_( )
               *BB2\color       = *BB1\color
               *SB\color        = *BB1\color
               
               *this\bar\vertical = Bool( constants::BinaryFlag( Flag, #__flag_Vertical ) Or
                                          constants::BinaryFlag( Flag, #PB_TrackBar_Vertical ))
               
               If *this\bar\vertical
                  *this\bar\invert = Bool( Not constants::BinaryFlag( Flag, #__flag_Invert ) )
               Else
                  *this\bar\invert = constants::BinaryFlag( Flag, #__flag_Invert )
               EndIf
               
               ;             If constants::BinaryFlag( Flag, #PB_Trackbar_Ticks )
               ;               *this\flag | #PB_Trackbar_Ticks
               ;             EndIf
               
               *SB\arrow\size = DPIScaled( #__arrow_size )
               *SB\arrow\type = #__arrow_type
               
               *BB1\round = dpi_scale_two
               *BB2\round = *BB1\round
               *SB\round  = *this\round
               
               If *this\round < DPIScaled(7)
                  *SB\size = DPIScaled(9)
               Else
                  *SB\size = size
                  *SB\size - Bool( Not *SB\size % 2)
               EndIf
               
               ; button draw color
               *SB\ColorState( ) = #__s_2
               
               If Not constants::BinaryFlag( *this\flag, #PB_TrackBar_Ticks )
                  If *this\bar\invert
                     *BB2\ColorState( ) = #__s_2
                  Else
                     *BB1\ColorState( ) = #__s_2
                  EndIf
               EndIf
            EndIf
            
            ; - Create Tab
            If *this\type = #__type_MenuBar Or
               *this\type = #__type_PopupBar Or
               *this\type = #__type_ToolBar Or
               *this\type = #__type_TabBar 
               ;
               ;;*this\TextChange( ) = 1
               *this\color\back = - 1
               *BB1\color       = _get_colors_( )
               *BB2\color       = _get_colors_( )
               ;*SB\color = _get_colors_( )
               
               *this\bar\invert   = constants::BinaryFlag( Flag, #__flag_Invert )
               *this\bar\vertical = constants::BinaryFlag( Flag, #__flag_Vertical )
               
               If constants::BinaryFlag( Flag, #__bar_buttonsize, #False )
                  *SB\size  = size
                  *BB1\size = DPIScaled( #__bar_button_size )
                  *BB1\size - Bool( Not *BB1\size % 2) 
                  *BB2\size = *BB1\size
               EndIf
               
               *BB1\round = *BB1\size/2
               *BB2\round = *BB1\round
               *SB\round  = *this\round
               
               *BB1\arrow\type = 2 ; #__arrow_type 
               *BB2\arrow\type = 2 ; #__arrow_type 
               
               *BB1\arrow\size = DPIScaled( #__arrow_size )
               *BB2\arrow\size = DPIScaled( #__arrow_size )
               ;*SB\arrow\size = DPIScaled( 3 )
            EndIf
            
            ; - Create Progress
            If *this\type = #__type_Progress
               *this\bar\vertical = Bool( constants::BinaryFlag( Flag, #__flag_Vertical ) Or
                                          constants::BinaryFlag( Flag, #PB_ProgressBar_Vertical ))
               
               *this\bar\invert = constants::BinaryFlag( Flag, #__flag_Invert )
               
               
               *this\color         = _get_colors_( )
               *this\TextChange( ) = #True
               *this\text\invert = *this\bar\invert
               *this\text\vertical = *this\bar\vertical
            EndIf
            
            ; - Create Splitter
            If *this\type = #__type_Splitter
               *this\container  = - 1
               *this\color\back = - 1
               
               *this\bar\invert   = constants::BinaryFlag( Flag, #__flag_Invert )
               *this\bar\vertical = Bool( Not constants::BinaryFlag( Flag, #__flag_Vertical ) And 
                                          Not constants::BinaryFlag( Flag, #PB_Splitter_Vertical ))
               ;
               If constants::BinaryFlag( Flag, #PB_Splitter_FirstFixed )
                  *this\bar\fixed = 1
               ElseIf constants::BinaryFlag( Flag, #PB_Splitter_SecondFixed )
                  *this\bar\fixed = 2
               EndIf
               
               ;\\
               *this\split_1( ) = *param_1
               *this\split_2( ) = *param_2
               
               *this\bar\button[1]\hide = Bool( IsGadget( *this\split_1( ) ) Or *this\split_1( ) > 0 )
               *this\bar\button[2]\hide = Bool( IsGadget( *this\split_2( ) ) Or *this\split_2( ) > 0 )
               
               *SB\size                 = bar_splitter_size 
               *SB\round                = dpi_scale_two
               
               ;\\
               ; If *this\type = #__type_Splitter
               If IsGadget( *this\split_1( ) )
                  Debug "bar_is_first_gadget_ " + IsGadget( *this\split_1( ) )
                  parent::set( *this\split_1( ), *this\root\canvas\GadgetID )
               ElseIf *this\split_1( ) > 65535
                  SetParent( *this\split_1( ), *this )
               Else
                  *this\split_1( ) = 0
               EndIf
               
               If IsGadget( *this\split_2( ) )
                  Debug "bar_is_second_gadget_ " + IsGadget( *this\split_2( ) )
                  parent::set( *this\split_2( ), *this\root\canvas\GadgetID )
               ElseIf *this\split_2( ) > 65535
                  SetParent( *this\split_2( ), *this )
               Else
                  *this\split_2( ) = 0
               EndIf
               ; EndIf
            EndIf
            
         EndIf
         
         If constants::BinaryFlag( *this\flag, #__flag_Transparent )
            *this\color\back =- 1
         EndIf
         
         ;\\
         Post( *this, #__event_create )
         
         ;\\ Set Attribute
         If *this\type = #__type_ToolBar Or
            *this\type = #__type_PopupBar Or
            *this\type = #__type_MenuBar Or
            *this\type = #__type_TabBar Or
            *this\type = #__type_Scroll Or
            *this\type = #__type_Progress Or
            *this\type = #__type_Track Or
            *this\type = #__type_Spin
            
            If *this\type = #__type_Spin
               bar_SetAttribute( *this, #__bar_buttonsize, Size + 5 )
            EndIf
            
            If *param_1 ; > 0 ; в окнах работает так
               SetAttribute( *this, #__bar_minimum, *param_1 )
            EndIf
            If *param_2
               SetAttribute( *this, #__bar_maximum, *param_2 )
            EndIf
            If *param_3
               SetAttribute( *this, #__bar_pageLength, *param_3 )
            EndIf
         EndIf
         
         ;-\\ CURSOR init
         If *this\type = #__type_Splitter
            If *this\bar\vertical
               *this\cursor[1] = cursor::#__cursor_SplitUpDown
               *this\cursor[2] = cursor::#__cursor_SplitUp
               *this\cursor[3] = cursor::#__cursor_SplitDown
            Else
               *this\cursor[1] = cursor::#__cursor_SplitLeftRight
               *this\cursor[2] = cursor::#__cursor_SplitLeft
               *this\cursor[3] = cursor::#__cursor_SplitRight
            EndIf
         ElseIf *this\type = #__type_HyperLink
            *this\cursor[1] = cursor::#__cursor_Hand
            *this\cursor[2] = cursor::#__cursor_IBeam
         ElseIf *this\type = #__type_Editor Or
                *this\type = #__type_String
            *this\cursor[1] = cursor::#__cursor_IBeam
         EndIf
         If *this\cursor[1]
            *this\cursor[0] = *this\cursor[1]
         EndIf
         
         ;\\ COLUMN
         If *this\row
            ;  If *this\type = #__type_ListIcon
            AddColumn( *this, 0, Text, *param_1 )
            ; EndIf
         EndIf
         
         ;\\ RESIZE
         If is_integral_( *this )
            If *this\type = #__type_Scroll
               If *this\parent
                  If *this\bar\vertical
                     *this\parent\scroll\v = *this
                     If *this\parent\type <> #__type_string
                        Resize( *this, *this\parent\container_width( ) - Width, Y, Width, *this\parent\container_height( ) - Width + Bool(*this\Round) * (Width / 4) )
                     EndIf
                  Else
                     *this\parent\scroll\h = *this
                     If *this\parent\type <> #__type_string
                        Resize( *this, X, *this\parent\container_height( ) - Height, *this\parent\container_width( ) - Height + Bool(*this\Round) * (Height / 4), Height )
                     EndIf
                  EndIf
               EndIf
            EndIf
         Else
            If *this\root And 
               Width And Height And 
               Not *this\root\width And 
               Not *this\root\height
               *this\autosize = 1
               Debug " canvas gadget resize"
               ResizeGadget( *this\root\canvas\gadget, X, Y, Width, Height )
            Else
               ;If X Or Y Or Width Or Height
               Resize( *this, X, Y, Width, Height )
               ;EndIf
            EndIf
         EndIf
         
         
         ;\\ Set img
         If *this\type = #__type_ComboBox
            ;If constants::BinaryFlag( *this\flag, #__align_image )
               set_align_content( *this\picture, *this\flag )
            ;EndIf
            If constants::BinaryFlag( *this\flag, #__align_Text )
               set_align_content( *this\text, *this\flag )
            EndIf
            set_text_flag( *this, Text, *this\flag )
         EndIf
         If *this\type = #__type_Progress
            ;If constants::BinaryFlag( *this\flag, #__align_image )
               set_align_content( *this\picture, *this\flag )
            ;EndIf
            If constants::BinaryFlag( *this\flag, #__align_Text )
               set_align_content( *this\text, *this\flag )
            EndIf
            set_text_flag( *this, Text, *this\flag )
         EndIf
         If *this\type = #__type_image
            SetState( *this, *param_1 )
            set_align_content( *this\picture, *this\flag )
         EndIf
         If *this\type = #__type_ButtonImage Or 
            *this\type = #__type_Button
            ;
            SetAttribute( *this, #PB_Button_Image, *param_1 )
            set_align_content( *this\picture, *this\flag )
         EndIf
         ;\\ text flag
         If *this\type = #__type_Text Or
            *this\type = #__type_Editor Or
            *this\type = #__type_String Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_Button Or 
            *this\type = #__type_Option Or
            *this\type = #__type_CheckBox Or
            *this\type = #__type_HyperLink
            
            If Not ( constants::BinaryFlag( *this\flag, #__align_image ) And 
                        constants::BinaryFlag( *this\flag, #__align_Text ))
                  set_align_content( *this\text, *this\flag )
            EndIf
            
            set_text_flag( *this, Text, *this\flag )
         EndIf
         If *this\type = #__type_Frame
            set_text_flag( *this, Text, *this\flag, 12, - *this\fs[2] - 1 )
         EndIf
         
            
         ;\\ Scroll bars
         If constants::BinaryFlag( Flag, #__flag_NoScrollBars, #False )
            If *this\type = #__type_String
               
               bar_area_create( *this, 1, 0, 0, *this\inner_width( ), *this\inner_height( ), #__bar_button_size, 0)
               
               *this\scroll\v\hide  = 1
               *this\scroll\h\hide  = 1
               *this\scroll\v\width = 0
               *this\scroll\h\height = 0
               ;                *this\scroll\v\bar\button[0]\size = 1
               ;                *this\scroll\v\bar\button[1]\size = 1
               ;                *this\scroll\v\bar\button[2]\size = 1
               ;                *this\scroll\h\bar\button[0]\size = 1
               ;                *this\scroll\h\bar\button[1]\size = 1
               ;                *this\scroll\h\bar\button[2]\size = 1
               
            ElseIf *this\type = #__type_Editor Or
                   *this\type = #__type_Tree Or
                   *this\type = #__type_ListView Or
                   *this\type = #__type_ListIcon Or
                   *this\type = #__type_ExplorerList Or
                   *this\type = #__type_Properties
               
               bar_area_create( *this, 1, 0, 0, *this\inner_width( ), *this\inner_height( ), #__bar_button_size )
            ElseIf *this\type = #__type_MDI Or
                   *this\type = #__type_ScrollArea
               
               bar_area_create( *this, 1, DPIScaledX( *param_1 ), DPIScaledY( *param_2 ), *this\inner_width( ), *this\inner_height( ), #__bar_button_size )
            ElseIf *this\type = #__type_image
               
               bar_area_create( *this, 1, *this\picture\width, *this\picture\height, *this\inner_width( ), *this\inner_height( ), #__bar_button_size )
            EndIf
         EndIf
         
         widget( ) = *this
         ProcedureReturn *this
      EndProcedure
      
      Procedure.i Scroll( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, PageLength.l, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Scroll, X, Y, Width, Height, #Null$, flag, min, max, pagelength, #__bar_button_size, round, 1 )
      EndProcedure
      
      Procedure.i Track( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, scrollstep.d = 1.0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Track, X, Y, Width, Height, #Null$, flag, min, max, 0, #__bar_button_size, #__ButtonRound, scrollstep )
      EndProcedure
      
      Procedure.i Progress( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Progress, X, Y, Width, Height, #Null$, flag, min, max, 0, 0, round, 1 )
      EndProcedure
      
      Procedure.i Splitter( X.l, Y.l, Width.l, Height.l, First.i, Second.i, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Splitter, X, Y, Width, Height, #Null$, flag, First, Second, 0, 0, 0, 1 )
      EndProcedure
      
      Procedure.i Spin( X.l, Y.l, Width.l, Height.l, Min.l, Max.l, flag.q = 0, round.l = 0, Increment.d = 1.0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Spin, X, Y, Width, Height, #Null$, flag, min, max, 0, #__bar_button_size, round, Increment )
      EndProcedure
      
      Procedure.i Tab( X.l, Y.l, Width.l, Height.l, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_TabBar, X, Y, Width, Height, #Null$, flag, 0, 0, 0, 40, round, 40 )
      EndProcedure
      
      Procedure.i Tree( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Tree, X, Y, Width, Height, "", Flag )
      EndProcedure
      
      Procedure.i ListView( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ListView, X, Y, Width, Height, "", Flag | #__flag_nobuttons | #__flag_nolines )
      EndProcedure
      
      Procedure.i ListIcon( X.l, Y.l, Width.l, Height.l, ColumnTitle.s, ColumnWidth.i, flag.q = 0 )
         ;  ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_tree, x, y, width, height, "", Flag ); #__type_ListIcon
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ListIcon, X, Y, Width, Height, ColumnTitle, Flag, ColumnWidth ); #__type_ListIcon
      EndProcedure
      
      Procedure.i ExplorerList( X.l, Y.l, Width.l, Height.l, Directory.s, flag.q = 0 )
         ;Protected *this._s_WIDGET = Create( Opened( ), #PB_Compiler_Procedure, #__type_ExplorerList, x, y, width, height, "", Flag | #__flag_nobuttons | #__flag_nolines )
         Protected *this._s_WIDGET = Create( Opened( ), #PB_Compiler_Procedure, #__type_ListIcon, X, Y, Width, Height, "", Flag | #__flag_nobuttons | #__flag_nolines )
         
         ;\\
         AddColumn(*this, 0, "Name", 200)
         AddColumn(*this, 0, "Size", 100)
         AddColumn(*this, 0, "Type", 100)
         AddColumn(*this, 0, "Modified", 100)
         
         ;\\
         If Directory.s = ""
            Directory.s = GetHomeDirectory() ; Lists all files and folder in the home directory
         EndIf
         Protected Size$, Type$, Modified$
         
         If ExamineDirectory(0, Directory.s, "*.*")  
            
            While NextDirectoryEntry(0)
               If DirectoryEntryType(0) = #PB_DirectoryEntry_Directory
                  Type$ = "[Directory] "
                  Size$ = "" ; A directory doesn't have a size
                  Modified$ = FormatDate("%mm/%dd/%yyyy", DirectoryEntryDate(0, #PB_Date_Modified))
                  AddItem(*this, -1, DirectoryEntryName(0) +#LF$+ Size$ +#LF$+ Type$ +#LF$+ Modified$)
               EndIf
            Wend
            FinishDirectory(0)
         EndIf
         
         If ExamineDirectory(0, Directory.s, "*.*")  
            While NextDirectoryEntry(0)
               If DirectoryEntryType(0) = #PB_DirectoryEntry_File
                  Type$ = "[File] "
                  Size$ = " (Size: " + DirectoryEntrySize(0) + ")"
                  Modified$ = FormatDate("%mm/%dd/%yyyy", DirectoryEntryDate(0, #PB_Date_Modified))
                  AddItem(*this, -1, DirectoryEntryName(0) +#LF$+ Size$ +#LF$+ Type$ +#LF$+ Modified$)
               EndIf
            Wend
            
            FinishDirectory(0)
         EndIf
         ProcedureReturn *this
      EndProcedure
      
      Procedure.i Properties( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Properties, X, Y, Width, Height, "", Flag )
      EndProcedure
      
      Procedure.i Editor( X.l, Y.l, Width.l, Height.l, flag.q = 0, round.i = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Editor, X, Y, Width, Height, "", flag, 0, 0, 0, 0, round, 0 )
      EndProcedure
      
      Procedure.i String( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_String, X, Y, Width, Height, Text, flag, 0, 0, 0, 0, round, 0 )
      EndProcedure
      
      Procedure.i Text( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Text, X, Y, Width, Height, Text, flag, 0, 0, 0, 0, round, 0 )
      EndProcedure
      
      Procedure.i Button( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Button, X, Y, Width, Height, Text, flag, (-1), 0, 0, 0, round )
      EndProcedure
      
      Procedure.i ButtonImage( X.l, Y.l, Width.l, Height.l, img.i = -1 , flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ButtonImage, X, Y, Width, Height, "", flag, (img), 0, 0, 0, round )
      EndProcedure
      
      Procedure.i HyperLink( X.l, Y.l, Width.l, Height.l, Text.s, Color.i, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_HyperLink, X, Y, Width, Height, Text, flag, Color, 0, 0, 0, 0, 0 )
      EndProcedure
      
      Procedure.i Option( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Option, X, Y, Width, Height, Text, flag, 0, 0, 0, #__bar_button_size, 0, 0 )
      EndProcedure
      
      Procedure.i CheckBox( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_CheckBox, X, Y, Width, Height, Text, flag, 0, 0, 0, #__bar_button_size, 0, 0 )
      EndProcedure
      
      Procedure.i ComboBox( X.l, Y.l, Width.l, Height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ComboBox, X, Y, Width, Height, "", flag, 0, 0, 0, #__bar_button_size, 0, 0 )
      EndProcedure
      
      Procedure.i MDI( X.l, Y.l, Width.l, Height.l, flag.q = 0 ) ; , Menu.i, SubMenu.l, FirstMenuItem.l )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_MDI, X, Y, Width, Height, #Null$, flag | #__flag_nogadgets, 0, 0, 0, #__bar_button_size, 0, 1 )
      EndProcedure
      
      Procedure.i Panel( X.l, Y.l, Width.l, Height.l, flag.q = #__flag_BorderFlat )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Panel, X, Y, Width, Height, #Null$, flag | #__flag_noscrollbars, 0, 0, 0, #__bar_button_size, 0, 0 )
      EndProcedure
      
      Procedure.i Container( X.l, Y.l, Width.l, Height.l, flag.q = #__flag_BorderFlat )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Container, X, Y, Width, Height, #Null$, flag | #__flag_noscrollbars, 0, 0, 0, #__bar_button_size, 0, 0 )
      EndProcedure
      
      Procedure.i ScrollArea( X.l, Y.l, Width.l, Height.l, ScrollAreaWidth.l, ScrollAreaHeight.l, ScrollStep.l = 1, flag.q = #__flag_BorderFlat )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ScrollArea, X, Y, Width, Height, #Null$, flag, ScrollAreaWidth, ScrollAreaHeight, ScrollStep, #__bar_button_size, 0, ScrollStep )
      EndProcedure
      
      Procedure.i Frame( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = #__flag_nogadgets )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Frame, X, Y, Width, Height, Text, flag, 0, 0, 0, 0, 7 )
      EndProcedure
      
      Procedure.i Image( X.l, Y.l, Width.l, Height.l, img.i, flag.q = 0 ) ; , Menu.i, SubMenu.l, FirstMenuItem.l )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_image, X, Y, Width, Height, #Null$, flag, img, 0, 0, #__bar_button_size, 0, 1 )
      EndProcedure
      
      ;-
      Procedure.i CloseList( )
         Protected *open._s_WIDGET
         
         ;\\ 1-test splitter
         If Opened( ) And
            Opened( )\type = #__type_Splitter
            
            Opened( )\split_1( ) = Opened( )\FirstWidget( )
            Opened( )\split_2( ) = Opened( )\LastWidget( )
            
            bar_Update( Opened( ), #True )
         EndIf
         
         If Opened( ) And
            Opened( )\parent
            
            If Opened( )\parent\type = #__type_MDI
               *open = Opened( )\parent\parent
            Else
               If Opened( )\Lastroot( )
                  *open                 = Opened( )\Lastroot( )
                  Opened( )\Lastroot( ) = #Null
               Else
                  If Opened( ) = Opened( )\root
                     *open = Opened( )\root\Beforeroot( )
                  Else
                     *open = Opened( )\parent
                  EndIf
               EndIf
            EndIf
         Else
            *open = root( )
         EndIf
         
         If *open = Opened( )
            If *open\root\Beforeroot( )
               UseGadgetList( WindowID(*open\root\Beforeroot( )\canvas\window))
               ; Debug ""+*open\root\Beforeroot( )\canvas\window +" "+Opened( )\root\canvas\window
               *open = *open\root\Beforeroot( )
            EndIf
         EndIf
         
         If *open And
            Opened( ) <> *open
            Opened( ) = *open
            ; OpenList( *open )
         EndIf
      EndProcedure
      
      Procedure.i OpenList( *this._s_WIDGET, item.l = 0 )
         Protected result.i = Opened( )
         
         If *this And *this\type = #__type_Unknown
            *this = Opened( )
         EndIf
         
         ; Debug "OpenList "+*this\class +" - "+ Opened( )\class
         
         If *this = Opened( )
            If Not( *this\tabbar And *this\tabbar\type = #__type_TabBar And *this\tabbar\TabIndex( ) <> item )
               ProcedureReturn result
            EndIf
         EndIf
         
         If *this
            If *this\parent <> Opened( )
               *this\Lastroot( ) = Opened( )
            EndIf
            
            If *this\root
               If *this\root <> root( )
                  If Opened( )\root
                     Opened( )\root\Afterroot( ) = *this\root
                  EndIf
                  *this\root\Beforeroot( ) = Opened( )\root
                  
                  If is_root_( *this )
                     ChangeCurrentCanvas( GadgetID( *this\root\canvas\gadget ) )
                  EndIf
               EndIf
            EndIf
            
            ; add 
            If *this\tabbar And 
               *this\tabbar\type = #__type_TabBar
               
               ; tab\index.c так как не принимает минусавое значение
               If Item < 0
                  Item = 0
               EndIf
               *this\tabbar\TabIndex( ) = Item
            EndIf
            
            Opened( ) = *this
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure Open( window, X.l = 0, Y.l = 0, Width.l = #PB_Ignore, Height.l = #PB_Ignore, title$ = #Null$, flag.q = #Null, *parentID = #Null, Canvas = #PB_Any )
         Protected result, w, g, canvasflag = #PB_Canvas_Keyboard, UseGadgetList, *root._s_root 
         
         ; init
         If Not MapSize( roots( ) )
            Events::SetCallback( @EventHandler( ) )
         EndIf
         
         If PB(IsWindow)( Window )
            w = WindowID( Window )
            ;
            ;             If constants::BinaryFlag( Flag, #pb_window_NoGadgets )
            ;                flag &~ #pb_window_NoGadgets
            ;             EndIf
            If constants::BinaryFlag( Flag, #PB_Canvas_Container ) 
               flag &~ #PB_Canvas_Container
               canvasflag | #PB_Canvas_Container
            EndIf
            If Width = #PB_Ignore And 
               Height = #PB_Ignore
               canvasflag | #PB_Canvas_Container
            EndIf
            
            Protected IsWindow
            If Not constants::BinaryFlag( Flag, #PB_Window_BorderLess ) 
               If Width = #PB_Ignore
               Else
                  ;Width + #__window_FrameSize*2
                  IsWindow = 1
               EndIf
               If Height = #PB_Ignore
               Else
                  ; пример align(autosize).pb
                  ;Height + #__window_FrameSize*2 + #__window_CaptionHeight
                  IsWindow = 1
               EndIf
            EndIf
         Else
            If constants::BinaryFlag( Flag, #PB_Window_NoGadgets ) 
               flag &~ #PB_Window_NoGadgets
            Else
               canvasflag | #PB_Canvas_Container
            EndIf
            ;
            ; then bug in windows
            If Window = #PB_Any
               Window = 300 + MapSize( roots( ) )
            EndIf
            ;
            w = OpenWindow( Window, X, Y, Width, Height, title$, flag, *parentID )
            If Window = #PB_Any 
               Window = w 
               w = WindowID( Window ) 
            EndIf
            ;
            If constants::BinaryFlag( Flag, #PB_Window_BorderLess )
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  If CocoaMessage(0, w, "hasShadow") = 0
                     CocoaMessage(0, w, "setHasShadow:", 1)
                  EndIf
                  ; https://www.purebasic.fr/english/viewtopic.php?p=393084#p393084
                  CocoaMessage(0, w, "setStyleMask:", CocoaMessage(0, w, "styleMask")&~#NSTitledWindowMask)
               CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
                  If GetClassLongPtr_( w, #GCL_STYLE ) & #CS_DROPSHADOW = 0
                     SetClassLongPtr_( w, #GCL_STYLE, #CS_DROPSHADOW )
                  EndIf
                  SetWindowLongPtr_(w,#GWL_STYLE,GetWindowLongPtr_(w,#GWL_STYLE)&~#WS_BORDER) 
                  SetWindowLongPtr_(w,#GWL_STYLE,GetWindowLongPtr_(w,#GWL_STYLE)&~#WS_CAPTION) 
                  SetWindowLongPtr_(w,#GWL_EXSTYLE,GetWindowLongPtr_(w,#GWL_EXSTYLE)|#WS_EX_NOPARENTNOTIFY) 
               CompilerElse
                  ;  
               CompilerEndIf
            EndIf
            ;
            X = 0
            Y = 0
         EndIf
         
         ;\\ get a handle from the previous usage list
         If w
            UseGadgetList = UseGadgetList( w )
         EndIf
         ;
         If X = #PB_Ignore : X = 0 : EndIf
         If Y = #PB_Ignore : Y = 0 : EndIf
         ;
         If Width = #PB_Ignore
            Width = WindowWidth( Window, #PB_Window_InnerCoordinate )
            If X <> #PB_Ignore
               If X > 0 And X < 50 
                  Width - X * 2
               EndIf
            EndIf
         EndIf
         ;
         If Height = #PB_Ignore
            Height = WindowHeight( Window, #PB_Window_InnerCoordinate )
            If Y <> #PB_Ignore
               If Y > 0 And Y < 50 
                  Height - Y * 2
               EndIf
            EndIf
         EndIf
         ;
         If PB(IsGadget)(Canvas)
            g = GadgetID( Canvas )
            
            ; UnbindEvent( #PB_Event_SizeWindow, @EventResize( ), window )
         Else
            If test_focus_draw = 1
               canvasflag|#PB_Canvas_DrawFocus
            EndIf
            
            g = CanvasGadget( Canvas, X, Y, Width, Height, canvasflag )
            If Canvas = - 1 : Canvas = g : g = PB(GadgetID)(Canvas) : EndIf
            
            If constants::BinaryFlag( canvasflag, #PB_Canvas_Container )
               ; BindEvent( #PB_Event_SizeWindow, @EventResize( ), Window )
            EndIf
         EndIf
         ;
         If UseGadgetList And w <> UseGadgetList
            UseGadgetList( UseGadgetList )
         EndIf
         
         ;
         If Not FindMapElement( roots( ), Str( g ) ) ; ChangeCurrentCanvas(g)
            result     = AddMapElement( roots( ), Str( g ) )
            roots( )   = AllocateStructure( _s_root )
            root( )    = roots( )
            *root      = roots( )
            
            ;
            ;*root\address   = result
            *root\type      = #__type_Root
            *root\container = 1
            *root\class     = "root"
            ;
            ; *root\parent   = Opened( )
            *root\root      = *root
            *root\window    = *root ; если это убрать то функцию set active надо изменить
                                    ;
            *root\canvas\GadgetID = g
            *root\canvas\window   = Window
            *root\canvas\gadget   = Canvas
            
            ;
            *root\color       = _get_colors_( )
            If constants::BinaryFlag( Flag, #__flag_Transparent )
               *root\color\back  = - 1
            EndIf
            ;
            SetFont( *root, #PB_Default )
            ; Setimage( *root, #PB_Default )
            *root\picture\image = - 1
            
            ;\\
            If Width Or Height
               Resize( *root, #PB_Ignore, #PB_Ignore, Width, Height )
            EndIf
            
            ;\\
            If Not constants::BinaryFlag( Flag, #PB_Window_NoGadgets ) 
               *root\Beforeroot( ) = Opened( )
               If *root\Beforeroot( )
                  *root\Beforeroot( )\Afterroot( ) = *root
               EndIf
               Opened( ) = *root
               ;
               ; OpenList( *root)
            EndIf
            
            ;\\
            If constants::BinaryFlag( Flag, #PB_Window_NoActivate )
               *root\focus = #__s_nofocus
            Else
               SetActive( *root )
               SetActiveGadget( *root\canvas\gadget )
            EndIf
            
            ;\\
            PostEvent( #PB_Event_SizeWindow, window, Canvas ) ; Bug PB
            Post( *root, #__event_create )
            PostReDraw( *root )
         EndIf
         
         ;;;;;;;;;;;
         If IsWindow = 1
            ; Window( 0,0, Width - #__window_FrameSize*2, Height - #__window_FrameSize*2 - #__window_CaptionHeight, title$, flag )
         EndIf
         
         If g
            SetWindowData( Window, Canvas )
            
            ;\\ Bug fixed in the windows mouse-(enter&leave)
            CompilerIf #PB_Compiler_OS = #PB_OS_Windows
               Events::BindGadget( Canvas, @EventHandler( ))
            CompilerElse
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_Focus )
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_LostFocus )
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MouseEnter )
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MouseLeave )
               BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MouseMove )
            CompilerEndIf
            ;
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_Resize )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_LeftButtonDown )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_LeftButtonUp )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_RightButtonDown )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_RightButtonUp )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MiddleButtonDown )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_MiddleButtonUp )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_Input )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_KeyDown )
            BindGadgetEvent( Canvas, @CanvasEvents( ), #PB_EventType_KeyUp )
            ;
            ; BindGadgetEvent( Canvas, @CanvasEvents( ))
            ; BindEvent( #PB_Event_Gadget, @CanvasEvents( ), Window, Canvas )
            ;
            BindEvent( #PB_Event_CloseWindow, @EventClose( ), Window )
            BindEvent( #PB_Event_RestoreWindow, @EventRestore( ), Window )
            BindEvent( #PB_Event_MaximizeWindow, @EventMaximize( ), Window )
            BindEvent( #PB_Event_MinimizeWindow, @EventMinimize( ), Window )
            BindEvent( #PB_Event_Repaint, @EventRepaint( ), Window )
            If constants::BinaryFlag( flag, #PB_Window_SizeGadget )
               BindEvent( #PB_Event_SizeWindow, @EventResize( ), Window )
            EndIf
            
            ;\\ z - order
            CompilerIf #PB_Compiler_OS = #PB_OS_Windows
               ;SetWindowLongPtr_( g, #GWL_STYLE, GetWindowLongPtr_( g, #GWL_STYLE ) | #WS_CLIPCHILDREN )
               SetWindowLongPtr_( g, #GWL_STYLE, GetWindowLongPtr_( g, #GWL_STYLE ) | #WS_CLIPSIBLINGS )
               SetWindowPos_( g, #GW_HWNDFIRST, 0, 0, 0, 0, #SWP_NOMOVE | #SWP_NOSIZE )
               
               ; RedrawWindow_(WindowID(a), 0, 0, #RDW_ERASE | #RDW_FRAME | #RDW_INVALIDATE | #RDW_ALLCHILDREN)
               
               RemoveKeyboardShortcut( Window, #PB_Shortcut_Tab )
               
               ;                ; transparent canvas
               ;                SetWindowLongPtr_(g, #GWL_EXSTYLE, #WS_EX_LAYERED) 
               ;                SetLayeredWindowAttributes_(g, RGB( Red(#White), Green(#White), Blue(#White)), 0, #LWA_COLORKEY)
               ;                ; SetLayeredWindowAttributes_(g, RGB( Red(#Black), Green(#Black), Blue(#Black)), 0, #LWA_COLORKEY)
            CompilerEndIf
            
            ;\\
            CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
               ; CocoaMessage(0, g, "setBoxType:", #NSBoxCustom)
               ; CocoaMessage(0, g, "setBorderType:", #NSLineBorder)
               ; CocoaMessage(0, g, "setBorderType:", #NSGrooveBorder)
               ; CocoaMessage(0, g, "setBorderType:", #NSBezelBorder)
               ; CocoaMessage(0, g, "setBorderType:", #NSNoBorder)
               
               ;;;CocoaMessage(0, w, "makeFirstResponder:", g)
               
               ; CocoaMessage(0, GadgetID(0), "setFillColor:", CocoaMessage(0, 0, "NSColor colorWithPatternimg:", imageiD(0)))
               ; CocoaMessage(0, WindowID(w), "setBackgroundColor:", CocoaMessage(0, 0, "NSColor colorWithPatternimg:", imageiD(0)))
               ; CocoaMessage(0, g,"setFocusRingType:",1)
            CompilerEndIf
         EndIf
         
         widget( ) = *root
         ProcedureReturn *root
      EndProcedure
      
      Procedure.i Window( X.l, Y.l, Width.l, Height.l, Text.s, flag.q = 0, *parent._s_WIDGET = 0 )
         Protected fs = (#__window_FrameSize)
         Protected barHeight = ( #__window_CaptionHeight )
         Protected fs1 = DPIScaled(fs)
         Protected barHeight1 = DPIScaled( barHeight )
         
         ;Protected *this.allocate( Widget )
         If Opened( )
            Protected *root._s_root = Opened( )\root
         EndIf
         
         Protected *this._s_WIDGET
         If MapSize( roots( ) )
            If Not ListSize( widgets( ) ) And
               constants::BinaryFlag( Flag, #__flag_autosize ) 
               
               X              = 0
               Y              = 0
               Width          = *root\width
               Height         = *root\height
               *root\autosize = #True
               *this          = *root
               
               ;                   Protected w = WindowID(*root\canvas\window )
               ;                   
               ;                   CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
               ;                   CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
               ;                      SetWindowLongPtr_(w,#GWL_STYLE,GetWindowLongPtr_(w,#GWL_STYLE)&~#WS_BORDER) 
               ;                      SetWindowLongPtr_(w,#GWL_STYLE,GetWindowLongPtr_(w,#GWL_STYLE)&~#WS_CAPTION) 
               ;                      SetWindowLongPtr_(w,#GWL_STYLE,GetWindowLongPtr_(w,#GWL_STYLE)&~#WS_SIZEBOX) 
               ;                      SetWindowLongPtr_(w,#GWL_EXSTYLE,GetWindowLongPtr_(w,#GWL_EXSTYLE) | #WS_EX_TOOLWINDOW)
               ;                   CompilerElse
               ;                      ;  
               ;                   CompilerEndIf
            Else
               *this.allocate( widget )
            EndIf
            ;\\ open root list
         Else
            *this = Open( #PB_Any, X, Y, Width + fs * 2, Height + fs * 2 + barHeight, Text,  #PB_Window_BorderLess, *parent )
            X     = 0
            Y     = 0
            Protected autosize = #True
         EndIf
         
         ;\\
         If X = #PB_Ignore
            X = window_pos_x + mouse( )\steps
         EndIf
         If Y = #PB_Ignore
            Y = window_pos_y + mouse( )\steps
         EndIf
         window_pos_x = X + fs
         window_pos_y = Y + fs + barHeight
         
         ;\\
         If constants::BinaryFlag( Flag, #__flag_child )
            If *parent And *parent\type = #__type_MDI
               *this\child =- 1
            Else
               *this\child = 1
            EndIf
         EndIf
         
         If *parent
            If *root = *parent
               *root\parent = *this
            EndIf
            
         Else
            *parent = *root
         EndIf
         
         
         ;\\
         *this\font     = - 1
         *this\type            = #__type_window
         *this\frame_x( )      = #PB_Ignore
         *this\frame_y( )      = #PB_Ignore
         *this\frame_width( )  = #PB_Ignore
         *this\frame_height( ) = #PB_Ignore
         
         ;\\ replace pb flag
         flag = FromPBFlag( *this\type, flag )
         
         Static count
         *this\flag      = flag
         *this\create    = #True
         *this\class     = #PB_Compiler_Procedure ;+""+ count
         *this\container = 2
         count + 1
         
         ;
         ;       *this\round = round
         ;
         *this\color      = _get_colors_( )
         *this\color\back = $FFF9F9F9
         If constants::BinaryFlag( Flag, #__flag_Transparent ) 
            *this\color\back = - 1
         EndIf
         
         *this\caption\_padding = 4
         *this\caption\color    = _get_colors_( )
         
         ; border frame size
         *this\fs = constants::BinaryFlag( *this\flag, #__flag_Borderless, #False ) * fs1
         
         
         ;
         *this\CloseButton( )\hide    = constants::BinaryFlag( *this\flag, #PB_Window_SystemMenu, #False )
         *this\MaximizeButton( )\hide = constants::BinaryFlag( *this\flag, #PB_Window_MaximizeGadget, #False )
         *this\MinimizeButton( )\hide = constants::BinaryFlag( *this\flag, #PB_Window_MinimizeGadget, #False )
         *this\HelpButton( )\hide     = 1
         
         
         If *this\MaximizeButton( )\hide = 0 Or
            *this\MinimizeButton( )\hide = 0 Or
            *this\CloseButton( )\hide = 0
            *this\caption\hide = 0
         Else
            *this\caption\hide = constants::BinaryFlag( *this\flag, #PB_Window_TitleBar, #False )
         EndIf
         
         If *this\caption\hide
            *this\TitleBarHeight = 0
            *this\fs[2] = 0
         Else
            *this\fs[2] = constants::BinaryFlag( *this\flag, #__flag_Borderless, #False ) * barHeight1
            *this\TitleBarHeight = *this\fs[2]
            
            *this\padding\x = 5
            *this\TitleText( )\string    = Text
         EndIf
         
         *this\CloseButton( )\color    = colors::*this\red
         *this\MaximizeButton( )\color = colors::*this\blue
         *this\MinimizeButton( )\color = colors::*this\green
         
         *this\CloseButton( )\ColorState( )    = 1
         *this\MaximizeButton( )\ColorState( ) = 1
         *this\MinimizeButton( )\ColorState( ) = 1
         
         
         *this\CloseButton( )\width    = DPIScaled( #__bar_button_size - 2 )
         *this\CloseButton( )\height   = *this\CloseButton( )\width
         *this\CloseButton( )\round    = *this\CloseButton( )\width / 2
         
         *this\MaximizeButton( )\width  = *this\CloseButton( )\width
         *this\MaximizeButton( )\height = *this\CloseButton( )\height
         *this\MaximizeButton( )\round = *this\CloseButton( )\round
         
         *this\MinimizeButton( )\width  = *this\CloseButton( )\width
         *this\MinimizeButton( )\height = *this\CloseButton( )\height
         *this\MinimizeButton( )\round = *this\CloseButton( )\round
         
         *this\HelpButton( )\width  = *this\CloseButton( )\width * 2
         *this\HelpButton( )\height = *this\CloseButton( )\height
         *this\HelpButton( )\round     = *this\CloseButton( )\round
         
         
         
         
         ; Background img
         *this\picture\image = - 1
         
         ;
         *this\bs = *this\fs
         
         
         ;\\
         If *parent
            If constants::BinaryFlag( *this\flag, #PB_Window_WindowCentered )
               X = *parent\inner_x( ) + ( *parent\inner_width( ) - Width - *this\fs * 2 - *this\fs[1] - *this\fs[3] ) / 2
               Y = *parent\inner_y( ) + ( *parent\inner_height( ) - Height - *this\fs * 2 - *this\fs[2] - *this\fs[4] ) / 2
            EndIf
            
            If is_integral_( *this ) Or *parent\type <> #__type_window
               SetParent( *this, *parent, #PB_Default )
            Else
               
               If Not *parent\autosize And SetAttach( *this, *parent, 0 )
                  X - DPIUnscaled(*parent\container_x( )) - DPIUnscaled((*parent\fs + (*parent\fs[1] + *parent\fs[3])))
                  Y - DPIUnScaled(*parent\container_y( )) - DPIUnscaled((*parent\fs + (*parent\fs[2] + *parent\fs[4])))
                  
               Else
                  ; Debug "888888 "+ *parent +" "+ root( )+" "+Opened( )
                  SetParent( *this, *parent, #PB_Default )
               EndIf
            EndIf
         EndIf
         
         ;
         ;\\ add count types
         CountType( *this, 1 )
         
         ;\\
         If Not autosize
            Post( *this, #__event_create )
         EndIf
         
         ;\\
         If constants::BinaryFlag( *this\flag, #PB_Window_SizeGadget&~#PB_Window_TitleBar )
            If Not *this\anchors
               a_create( *this, #__a_full | #__a_nodraw | #__a_zoom )
            EndIf
         EndIf
         
         If Not constants::BinaryFlag( *this\flag, #PB_Window_NoGadgets )
            OpenList( *this )
         EndIf
         
         If constants::BinaryFlag( *this\flag, #PB_Window_NoActivate )
            *this\focus = #__s_nofocus
         Else
            If Not ( *this\parent And *this\parent\anchors )
               SetActive( *this )
            EndIf
         EndIf
         
         ;\\
         Resize( *this, X, Y, Width, Height )
         
         widget( ) = *this
         ProcedureReturn *this
      EndProcedure
      
      Procedure.i Gadget( Type.w, Gadget.i, X.l, Y.l, Width.l, Height.l, Text.s = "", *param1 = #Null, *param2 = #Null, *param3 = #Null, flag.q = #Null )
         Protected *this, g, Window = ID::Window( UseGadgetList( 0 ) )
         Flag = FromPBFlag( Type, Flag ) | #__flag_autosize
         
         ;          If MapSize( roots( ) )
         ;             Protected Canvas = root( )\canvas\gadget
         ;          EndIf
         ;
         Open( Window, X, Y, Width, Height, "", #PB_Canvas_Container|#PB_Window_BorderLess, #Null, Gadget )
         ;
         Select Type
            Case #__type_Tree      : *this = Tree( 0, 0, Width, Height, flag )
            Case #__type_Text      : *this = Text( 0, 0, Width, Height, Text, flag )
            Case #__type_Button    : *this = Button( 0, 0, Width, Height, Text, flag )
            Case #__type_Option    : *this = Option( 0, 0, Width, Height, Text, flag )
            Case #__type_CheckBox  : *this = CheckBox( 0, 0, Width, Height, Text, flag )
            Case #__type_HyperLink : *this = HyperLink( 0, 0, Width, Height, Text, *param1, flag )
            Case #__type_Splitter  : *this = Splitter( 0, 0, Width, Height, *param1, *param2, flag )
         EndSelect
         ;
         CloseGadgetList( )
         ;
         If Gadget = - 1
            Gadget = GetCanvasGadget( root( ))
            g      = Gadget
         Else
            g = GadgetID( Gadget )
         EndIf
         
         ;          Static count
         ;          SetClass( *this, GetClass(*this)+"_"+count); Index(*this))
         ;          count + 1
         
         ;          ;SetGadgetData( Gadget, *this )
         widget::gadgets(Str(Gadget)) = *this
         
         ;          If IsGadget(Canvas)
         ;             ; CloseList( )
         ;             ;Debug ""+Gadget+" "+canvas
         ;             ChangeCurrentCanvas( GadgetID(Canvas) )
         ;             ; OpenList( root( ) )
         ;          EndIf
         
         ProcedureReturn g
      EndProcedure
      
      ;-
      ;- UPDATEs
      ;-
      Procedure Update_DrawText( *this._s_WIDGET, textchange.b )
         With *this
            
            Protected *str.Character
            Protected *end.Character
            Protected textHeight = *this\text\height
            Protected String.s, String1.s, CountString
            Protected IT, len.l, Position.l, Width
            Protected ColorFont = *this\color\front[\ColorState( )]
            
            ; *this\max
            If *this\text\vertical
               If *this\scroll_height( ) > *this\inner_height( )
                  textchange = 1
               EndIf
               Width = *this\inner_height( ) - *this\padding\x * 2
               
            Else
               If *this\scroll_width( ) > *this\inner_width( )
                  textchange = 1
               EndIf
               
               Width = *this\inner_width( ) - *this\padding\x * 2
            EndIf
            
            If *this\text\multiLine
               ; make multiline text
               Protected text$ = *this\text\string.s + #LF$
               
               ;     text$ = ReplaceString( text$, #LFCR$, #LF$ )
               ;     text$ = ReplaceString( text$, #CRLF$, #LF$ )
               ;     text$ = ReplaceString( text$, #CR$, #LF$ )
               
               If *this\text\multiLine > 0
                  String = text$
               Else
                  ; <http://www.purebasic.fr/english/viewtopic.php?f = 12&t = 53800>
                  Protected.i i, start, found, length
                  Protected$ line$, DelimList$ = " " + Chr( 9 ), nl$ = #LF$
                  
                  *str.Character = @text$
                  *end.Character = @text$
                  
                  ; make word wrap
                  While *end\c
                     If *end\c = #LF
                        start  = ( *end - *str ) >> #PB_Compiler_Unicode
                        line$  = PeekS ( *str, start )
                        length = start
                        
                        ; Get text len
                        While length > 1
                           If Width > TextWidth( RTrim( Left( line$, length ) ))
                              Break 
                           Else
                              length - 1
                           EndIf
                        Wend
                        
                        While start > length
                           For found = length To 1 Step - 1
                              If FindString( " ", Mid( line$, found, 1 ))
                                 If Width - *this\padding\x * 2 < TextWidth( RTrim( Left( line$, found )))
                                    *this\countitems = 0
                                 EndIf
                                 start = found
                                 Break
                              EndIf
                           Next
                           
                           If Not found
                              start = length
                           EndIf
                           
                           String + Left( line$, start ) + nl$
                           line$ = LTrim( Mid( line$, start + 1 ))
                           start = Len( line$ )
                           
                           ; If length <> start
                           length = start
                           
                           ; Get text len
                           While length > 1
                              If Width > TextWidth( RTrim( Left( line$, length ) ))
                                 Break
                              Else
                                 length - 1
                              EndIf
                           Wend
                           ; EndIf
                        Wend
                        
                        String + line$ + nl$
                        *str = *end + #__sOC
                     EndIf
                     
                     *end + #__sOC
                  Wend
               EndIf
               
               CountString = CountString( String, #LF$ )
            Else
               String.s    = RemoveString( *this\text\string, #LF$ ) + #LF$
               CountString = 1
            EndIf
            
            ;
            If *this\countitems <> CountString
               *this\countitems = CountString
               textchange = 1
            EndIf
            
            If textchange
               *str.Character = @String
               *end.Character = @String
               
               *this\text\pos = 0
               *this\text\len = Len( *this\text\string )
               
               ;\\
               ClearList( *this\__lines( ))
               *this\scroll_width( )  = *this\padding\x * 2 
               *this\scroll_height( ) =  *this\padding\y * 2 
               
               ;
               If Not *this\text\vertical And *this\picture\width And *this\text\string = ""
                  *this\scroll_width( )  = *this\picture\width + *this\padding\x * 2 
               EndIf
               
               ;
               While *end\c
                  If *end\c = #LF
                     AddElement( *this\__lines( ))
                     *this\__lines( )\text\len    = ( *end - *str ) >> #PB_Compiler_Unicode
                     *this\__lines( )\text\string = PeekS ( *str, *this\__lines( )\text\len )
                     
                     ; drawing item font
                     draw_font( *this\__lines( ));, GetFontID( *this ) )
                     
                     ;; editor
                     *this\__lines( )\lindex = ListIndex( *this\__lines( ))
                     ;
                     If *this\LineFocusedIndex( ) = *this\__lines( )\lindex
                        *this\LineFocused( ) = *this\__lines( )
                     EndIf
                     ;
                     *this\__lines( )\height = *this\__lines( )\text\height
                     *this\__lines( )\width  = *this\inner_width( )
                     *this\__lines( )\color  = _get_colors_( )
                     
                     
                     ; make line position
                     If *this\text\vertical
                        If *this\scroll_height( ) < *this\__lines( )\text\width + *this\padding\y * 2 ;+ *this\mode\fullselection
                           *this\scroll_height( ) = *this\__lines( )\text\width + *this\padding\y * 2 ;+ *this\mode\fullselection
                        EndIf
                        
                        If *this\text\rotate = 90
                           *this\__lines( )\x = *this\scroll_width( ) - *this\padding\x
                        ElseIf *this\text\rotate = 270
                           *this\__lines( )\x = ( *this\inner_width( ) - *this\scroll_width( ) - *this\__lines( )\text\width ) + *this\padding\x
                        EndIf
                        
                        *this\scroll_width( ) + textHeight + Bool( *this\__lines( )\lindex <> *this\countitems - 1 ) * *this\mode\gridlines
                     Else ; horizontal
                        If *this\scroll_width( ) < *this\__lines( )\text\width + *this\padding\x * 2 ;+ *this\mode\fullselection
                           *this\scroll_width( ) = *this\__lines( )\text\width + *this\padding\x * 2 ;+ *this\mode\fullselection
                        EndIf
                        
                        If *this\text\rotate = 0
                           *this\__lines( )\y = *this\scroll_height( ) - *this\padding\y
                        ElseIf *this\text\rotate = 180
                           *this\__lines( )\y = ( *this\inner_height( ) - *this\scroll_height( ) - *this\__lines( )\text\height ) + *this\padding\y
                        EndIf
                        
                        *this\scroll_height( ) + textHeight + Bool( *this\__lines( )\lindex <> *this\countitems - 1 ) * *this\mode\gridlines
                     EndIf
                     
                     *str = *end + #__sOC
                  EndIf
                  
                  *end + #__sOC
               Wend
               
               ;
               ForEach *this\__lines( )
                  *this\__lines( )\text\pos = *this\text\pos
                  *this\text\pos + *this\__lines( )\text\len + 1 ; Len( #LF$ )
                  
                  If *this\text\vertical
                     If *this\text\rotate = 270
                        *this\__lines( )\x - ( *this\inner_width( ) - *this\scroll_width( ) )
                     EndIf
                     
                     ; changed
                     If *this\text\rotate = 0
                        *this\__lines( )\text\x = 0
                     ElseIf *this\text\rotate = 270
                        *this\__lines( )\text\x = Bool( #PB_Compiler_OS = #PB_OS_MacOS ) * 2 + Bool( #PB_Compiler_OS = #PB_OS_Linux ) + *this\__lines( )\text\width
                     Else
                        *this\__lines( )\text\x = - Bool( #PB_Compiler_OS = #PB_OS_MacOS )
                     EndIf
                     
                     ; align text y
                     change_align_vertical( *this\__lines( )\text, *this\scroll_height( ), *this\__lines( )\text\width, *this\text\rotate, *this\text\align, *this\padding\y )
                  
                  Else ; horizontal
                     If *this\text\rotate = 180
                        *this\__lines( )\y - ( *this\inner_height( ) - *this\scroll_height( ) )
                     EndIf
                     
                     ; changed
                     If *this\text\rotate = 90
                        *this\__lines( )\text\y = 0
                     ElseIf *this\text\rotate = 180
                        *this\__lines( )\text\y = Bool( #PB_Compiler_OS = #PB_OS_MacOS ) * 2 + Bool( #PB_Compiler_OS = #PB_OS_Linux ) + *this\__lines( )\text\height
                     Else
                        *this\__lines( )\text\y = - Bool( #PB_Compiler_OS = #PB_OS_MacOS ) - Bool( #PB_Compiler_OS = #PB_OS_Windows )*2
                     EndIf
                     
                     ; align text x
                     change_align_horizontal( *this\__lines( )\text, *this\scroll_width( ), *this\__lines( )\text\width, *this\text\rotate, *this\text\align, *this\padding\x )
                  EndIf
                  
                  ; align img 
                  If *this\picture\align
                     If *this\picture\align\left
                        If *this\picture\width
                           *this\__lines( )\text\x + img_indent + *this\picture\width
                        EndIf
                     EndIf
                     If *this\picture\align\top
                        If *this\picture\height
                           *this\__lines( )\text\y + *this\picture\height + img_indent
                        EndIf
                     EndIf
                  EndIf
                  
                  ;
                  ;                   If *this\__lines( )\TextChange( ) <> 0
                  ;                      ; edit_sel_update_( *this )
                  ;                      
                  ;                      *this\__lines( )\TextChange( ) = 0
                  ;                   EndIf
               Next
            EndIf
            
            ; align img
            If *this\text\string.s
               If *this\picture\align
                  ; If *this\flag & #__flag_Center 
                  If *this\picture\align\left Or *this\picture\align\right
                     If *this\picture\width
                        *this\scroll_width( ) + img_indent + *this\picture\width
                     EndIf
                  EndIf
                  If *this\picture\align\top Or *this\picture\align\bottom 
                     If *this\picture\height
                        *this\scroll_height( ) + *this\picture\height + img_indent
                     EndIf
                  EndIf
                  ; EndIf
               EndIf
            EndIf
            
            
            ;\\
            bar_area_update( *this )
            
            ; make horizontal scroll x
            make_scrollarea_x( *this, *this\scroll_width( ), *this\text\align )
            
            ; make vertical scroll y
            make_scrollarea_y( *this, *this\scroll_height( ), *this\text\align )
            
            
            ;             ; vertical bar one before displaying
            ;             If *this\scroll\v And Not *this\scroll\v\bar\ThumbChange( ) ;And Not *this\show
            ;                If *this\scroll\v\bar\max > *this\scroll\v\bar\page\len
            ;                   If *this\text\align\bottom
            ;                      If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\end )
            ;                      EndIf
            ;                      
            ;                   ElseIf Not *this\text\align\top
            ;                      If bar_PageChange( *this\scroll\v, *this\scroll\v\bar\page\end / 2 )
            ;                      EndIf
            ;                   EndIf
            ;                EndIf
            ;             EndIf
            ;             
            ;             ; horizontal bar one before displaying
            ;             If *this\scroll\h And Not *this\scroll\h\bar\ThumbChange( ) ;And Not *this\show
            ;                If *this\scroll\h\bar\max > *this\scroll\h\bar\page\len
            ;                   If *this\text\align\right
            ;                      If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\end )
            ;                      EndIf
            ;                      
            ;                   ElseIf Not *this\text\align\left
            ;                      If bar_PageChange( *this\scroll\h, *this\scroll\h\bar\page\end / 2 )
            ;                      EndIf
            ;                   EndIf
            ;                EndIf
            ;             EndIf
            
         EndWith
      EndProcedure
      
      Procedure.l Update_DrawRows( *this._s_WIDGET, List *rows._s_ROWS( ), _change_ = 1 )
         Protected state.b, X.l, Y.l
         
         With *this
            If Not *this\hide
               ;\\ update coordinate
               If _change_ > 0
                  ; Debug "   " + #PB_Compiler_Procedure + "( )"
                  
                  ;\\ if the item list has changed
                  If ListSize( *this\columns( ) )
                     *this\scroll_height( ) = *this\columns( )\height
                  Else
                     *this\scroll_width( ) = 0
                     *this\scroll_height( ) = 0
                  EndIf
                  
                  ; reset item z - order
                  If *this\mode\Buttons Or (*this\mode\CheckBoxes Or *this\mode\OptionBoxes)
                     Protected buttonpos = DPIScaled(6)
                     Protected buttonsize = DPIScaled(9)
                  EndIf
                  Protected boxpos = DPIScaled(4)
                  Protected boxsize = DPIScaled(13)
                  Protected bs = Bool( *this\fs )
                  Protected scroll_width
                  
                  ;\\
                  PushListPosition( *rows( ))
                  ForEach *rows( )
                     ;*this\__rows( )\rindex = ListIndex( *rows( ))
                     
                     If *rows( )\hide
                        *rows( )\visible = 0
                        Continue
                     EndIf
                     
                     ;\\ init drawing item font
                     draw_font( *rows( ), GetFontID( *this ) )
                     
                     ;\\ draw items height
                     CompilerSelect #PB_Compiler_OS
                        CompilerCase #PB_OS_MacOS
                           *rows( )\height = *rows( )\text\height + 4
                        CompilerCase #PB_OS_Linux
                           CompilerIf Subsystem("qt")
                              *rows( )\height = *rows( )\text\height - 1
                           CompilerElse
                              *rows( )\height = *rows( )\text\height + 3
                           CompilerEndIf
                        CompilerCase #PB_OS_Windows
                           If *this\type = #__type_ListView
                              *rows( )\height = *rows( )\text\height
                           Else
                              *rows( )\height = *rows( )\text\height + 2
                           EndIf
                     CompilerEndSelect
                     
                     *rows( )\y = *this\scroll_height( )
                     
                     If *rows( )\columnindex = 0
                        ;\\ sublevel position
                        *this\row\sublevelpos = *rows( )\sublevel * *this\row\sublevelsize 
                        
                        ;\\ expanded & collapsed box coordinate
                        If *this\mode\Buttons
                           If *rows( )\buttonbox 
                              *this\row\sublevelpos + (buttonpos+buttonsize) 
                              *rows( )\buttonbox\width  = buttonsize
                              *rows( )\buttonbox\height = buttonsize
                              *rows( )\buttonbox\x = *this\row\sublevelpos - *rows( )\buttonbox\width - 5
                              *rows( )\buttonbox\y = *rows( )\height - ( *rows( )\height + *rows( )\buttonbox\height ) / 2
                           EndIf
                        EndIf
                        
                        ;\\ check & option box position & size
                        If *this\mode\CheckBoxes Or *this\mode\OptionBoxes
                           If *rows( )\checkbox
                              *this\row\sublevelpos + (boxpos+boxsize)
                              *rows( )\checkbox\width  = boxsize
                              *rows( )\checkbox\height = boxsize
                              *rows( )\checkbox\x = *this\row\sublevelpos - *rows( )\checkbox\width - 2
                              *rows( )\checkbox\y = *rows( )\height - ( *rows( )\height + *rows( )\checkbox\height ) / 2
                           EndIf
                        EndIf
                        
                        ;\\ img position
                        If *rows( )\picture\imageID
                           *rows( )\picture\x = *this\row\sublevelpos + *this\padding\x
                           *rows( )\picture\y = ( *rows( )\height - *rows( )\picture\height ) / 2
                        EndIf
                     EndIf
                     
                     ;\\ text position
                     If *rows( )\text\string
                        *rows( )\text\x = *this\padding\x
                        *rows( )\text\y = (*rows( )\height - *rows( )\text\height) / 2
                        ;
                        If *rows( )\columnindex = 0
                           *rows( )\text\x + *this\row\sublevelpos
                           ;
                           If *this\picturesize
                              *rows( )\text\x + *this\picturesize + *this\padding\x 
                           EndIf
                        EndIf
                     EndIf
                     
                     If *rows( )\columnindex = 0
                        *rows( )\x = 0   
                     Else
                        *rows( )\x = *this\columns( )\x + (*this\picturesize+*this\row\sublevelpos+*this\MarginLine( )\width)
                     EndIf
                     
                     ;\\ vertical scroll max value
                     *this\scroll_height( ) + *rows( )\height + Bool(*this\__rows( )\rindex <> *this\countitems - 1) * *this\mode\GridLines
                     
                     ;\\ horizontal scroll max value
                     If *this\type = #__type_ListIcon
                        *rows( )\picture\x - DPIScaled(8)
                        If *rows( )\checkbox
                           *rows( )\checkbox\x - boxsize
                        EndIf
                        scroll_width = ( *this\columns( )\x + *this\columns( )\width + *this\row\sublevelpos + *this\padding\x + *this\MarginLine( )\width )
                     Else
                        scroll_width = ( *rows( )\x + *rows( )\text\x + *rows( )\text\width + *this\mode\fullSelection + *this\padding\x * 2 ) ; - *this\inner_x( )
                     EndIf
                     If *this\scroll_width( ) < scroll_width 
                        *this\scroll_width( ) = scroll_width
                     EndIf
                     
                     ;                      If *rows( )\columnindex = 0
                     ;                         If *this\columns( )\width
                     ;                            *rows( )\width = *this\columns( )\width + (*this\picturesize+*this\row\sublevelpos+*this\MarginLine( )\width)
                     ;                         Else
                     ;                            If *this\scroll_width( ) > *this\inner_width( )
                     ;                               *rows( )\width = *this\inner_width( )
                     ;                            Else
                     ;                               *rows( )\width = *this\scroll_width( )
                     ;                            EndIf
                     ;                         EndIf
                     ;                      Else
                     ;                         *rows( )\width = *this\columns( )\width
                     ;                      EndIf
                  Next
                  PopListPosition( *rows( ))
                  
                  If *this\scroll_height( ) <  *this\inner_height( )
                     If bar_PageChange( *this\scroll\v, 0 )
                        Update_DrawRows( *this, *rows( ) )
                     EndIf
                  EndIf
                  
                  ; Debug  ""+*this\scroll_height( ) +" "+  *this\height
                  ;\\
                  If *this\mode\gridlines
                     ; *this\scroll_height( ) - *this\mode\gridlines
                  EndIf
               EndIf
            EndIf
         EndWith
         
      EndProcedure
      
      Procedure.l Update_DrawVisibleRows( *this._s_WIDGET, List *rows._s_ROWS( ), visible_height.l = 0 )
         Protected result, scroll_y = *this\scroll\v\bar\page\pos
         Protected visible_y.l = 0
         
         PushListPosition( *rows( ))
         
         If Not visible_y
            visible_y = 0;*this\inner_y( ) ; *this\draw_y( ) ;
         EndIf
         If Not visible_height
            If *this\draw_height( ) > *this\inner_height( )
               visible_height = *this\inner_height( ) ;
            Else
               visible_height = *this\draw_height( )
            EndIf
         EndIf
         
         ForEach *rows( )
            *rows( )\visible = Bool( Not *rows( )\hide And
                                     (( *rows( )\y - scroll_y ) < visible_y + visible_height ) And
                                     ( *rows( )\y + *rows( )\height - scroll_y ) > visible_y )
            
            ;;Debug ""+*this\class +" "+ visible_height  +" "+ *rows( )\height
            
            If *this\__rows( )\rindex % 2 = 0
               If *rows( )\color\back = 0
                  *rows( )\color\back = $FFF3F3F3;*rows( )\color\back[1] ; *this\color\back & $FFFFFF | *this\AlphaState24( )
               EndIf
            EndIf
            
            
            ;\\ add new draw list
            If *rows( )\visible And
               AddElement( *this\RowVisibleList( ))
               *this\RowVisibleList( ) = *rows( )
               
               ;\\
               If *rows( )\columnindex = 0
                  If ListSize( *This\Columns( ) ) = 1
                     *this\columns( )\width = *this\inner_width( ) - *this\columns( )\x
                     *rows( )\width  = *this\columns( )\width
                  Else
                     *rows( )\width = *this\columns( )\width + (*this\picturesize+*this\row\sublevelpos+*this\MarginLine( )\width)
                  EndIf
               Else
                  ;\\
                  If *rows( )\width <> *this\columns( )\width
                     *rows( )\width = *this\columns( )\width
                  EndIf
               EndIf
               
               ;                If constants::BinaryFlag( *this\flag, #__flag_RowFullSelect )
               ;                   If *this\scroll_width( ) > *this\inner_width( )
               ;                      *rows( )\width = *this\inner_width( )
               ;                   Else
               ;                      *rows( )\width = *this\scroll_width( )
               ;                   EndIf
               ;                Else
               ;                   If *rows( )\columnindex = 0
               ;                      If *this\columns( )\width
               ;                         *rows( )\width = *this\columns( )\width + (*this\picturesize+*this\row\sublevelpos+*this\MarginLine( )\width)
               ;                      Else
               ;                         If *this\scroll_width( ) > *this\inner_width( )
               ;                            *rows( )\width = *this\inner_width( )
               ;                         Else
               ;                            *rows( )\width = *this\scroll_width( )
               ;                         EndIf
               ;                      EndIf
               ;                   Else
               ;                      *rows( )\width = *this\columns( )\width
               ;                   EndIf
               ;                EndIf
               
               ;\\
               If Not *this\RowFirstVisible( )
                  *this\RowFirstVisible( ) = *rows( )
                  ; Debug ""+*this\RowFirstVisible( )\x+" "+*this\RowFirstVisible( )\y
               EndIf
               *this\RowLastVisible( ) = *rows( )
               
               ; Debug ""+*this\RowLastVisible( )\rindex +" "+ *this\RowLastVisible( )\y
               result = 1
            EndIf
         Next
         
         PopListPosition( *rows( ))
         ProcedureReturn result
      EndProcedure
      
      ;-
      ;-  DRAWINGs
      ;-
      Macro Draw_focus_frame( _address_, _color_ )
         draw_roundbox_( _address_\inner_x( ), _address_\inner_y( ), _address_\inner_width( ), _address_\inner_height( ), _address_\round, _address_\round, _color_ )
         draw_roundbox_( _address_\inner_x( )+1, _address_\inner_y( )+1, _address_\inner_width( )-2, _address_\inner_height( )-2, _address_\round, _address_\round, _color_ )
         draw_roundbox_( _address_\inner_x( )+2, _address_\inner_y( )+2, _address_\inner_width( )-4, _address_\inner_height( )-4, _address_\round, _address_\round, _color_ )
         ;draw_roundbox_( _address_\frame_x( ), _address_\frame_y( ), _address_\frame_width( ), _address_\frame_height( ), _address_\round, _address_\round, _color_ )
         ;draw_roundbox_( _address_\frame_x( ) + 1, _address_\frame_y( ) + 1, _address_\frame_width( ) - 2, _address_\frame_height( ) - 2, _address_\round, _address_\round, _color_ )
         ; draw_roundbox_( _address_\frame_x( ) + 2, _address_\frame_y( ) + 2, _address_\frame_width( ) - 4, _address_\frame_height( ) - 4, _address_\round, _address_\round, _color_ )
      EndMacro
      
      Procedure.b Draw_Arrow( direction.a, X.l, Y.l, size.a, mode.b = 1, framesize.a = 0, Color = $ff000000 )
         Protected i.w, j.w, thickness.a
         X + size/2
         Y + size/2
         
         If mode
            If mode = - 1
               
               thickness.a = 2 + size/4
               
               ;       x - thickness + 1
               ;       y - thickness + 1 
               
               If framesize
                  X + framesize*2
                  Y + framesize*2
                  
                  Color = $ffffffff
                  For i = - (size+framesize)/2 To (size+framesize)/2
                     If direction = 0 ; left
                        If i > 0
                           Box( X + i + framesize, Y + i * 1, - (thickness+framesize*2), 1, Color )
                        Else
                           Box( X - i + framesize, Y + i * 1, - (thickness+framesize*2), 1, Color )
                        EndIf
                     EndIf
                     If direction = 2 ; right
                        If i < 0
                           Box( X + i - framesize, Y + i * 1, (thickness+framesize*2), 1, Color )
                        Else
                           Box( X - i - framesize, Y + i * 1, (thickness+framesize*2), 1, Color )
                        EndIf
                     EndIf
                     If direction = 1 ; up
                        If i > 0
                           Box( X + i * 1, Y + i + framesize, 1, - (thickness+framesize*2), Color )
                        Else
                           Box( X + i * 1, Y - i + framesize, 1, - (thickness+framesize*2), Color )
                        EndIf
                     EndIf
                     If direction = 3 ; down
                        If i < 0
                           Box( X + i * 1, Y + i - framesize, 1, (thickness+framesize*2), Color )
                        Else
                           Box( X + i * 1, Y - i - framesize, 1, (thickness+framesize*2), Color )
                        EndIf
                     EndIf
                  Next
                  Color = $ff000000
               EndIf
               
               For i = - size/2 To size/2
                  If direction = 0 ; left
                     If i > 0
                        Box( X + i, Y + i * 1, - (thickness), 1, Color )
                     Else
                        Box( X - i, Y + i * 1, - (thickness), 1, Color )
                     EndIf
                  EndIf
                  If direction = 2 ; right
                     If i < 0
                        Box( X + i, Y + i * 1, (thickness), 1, Color )
                     Else
                        Box( X - i, Y + i * 1, (thickness), 1, Color )
                     EndIf
                  EndIf
                  If direction = 1 ; up
                     If i > 0
                        Box( X + i * 1, Y + i, 1, - (thickness), Color )
                     Else
                        Box( X + i * 1, Y - i, 1, - (thickness), Color )
                     EndIf
                  EndIf
                  If direction = 3 ; down
                     If i < 0
                        Box( X + i * 1, Y + i, 1, (thickness), Color )
                     Else
                        Box( X + i * 1, Y - i, 1, (thickness), Color )
                     EndIf
                  EndIf
               Next
               
            Else
               
               If framesize
                  Color = $ffffffff
                  For i = - framesize/2 To size 
                     For j = i - framesize To size - i + framesize
                        If direction = 0 ; left
                           Box( X - i * mode + framesize, Y + j-size/2, mode, 1, Color )
                        EndIf
                        If direction = 1 ; up
                           Box( X + j-size/2, Y - i * mode + framesize, 1, mode, Color )
                        EndIf
                        If direction = 2 ; right
                           Box( X + i * mode - framesize, Y + j-size/2, mode, 1, Color )
                        EndIf
                        If direction = 3 ; down
                           Box( X + j-size/2, Y + i * mode - framesize, 1, mode, Color )
                        EndIf
                     Next 
                  Next
                  Color = $ff000000
               EndIf
               
               For i = 0 To size
                  For j = i To size - i 
                     If direction = 0 ; left
                        Box( X - i * mode + framesize, Y + j-size/2, mode, 1, Color )
                     EndIf
                     If direction = 1 ; up
                        Box( X + j-size/2, Y - i * mode + framesize, 1, mode, Color )
                     EndIf
                     If direction = 2 ; right
                        Box( X + i * mode - framesize, Y + j-size/2, mode, 1, Color )
                     EndIf
                     If direction = 3 ; down
                        Box( X + j-size/2, Y + i * mode - framesize, 1, mode, Color )
                     EndIf
                  Next 
               Next
               
            EndIf
         EndIf
      EndProcedure
      
      Procedure Draw_BackGround( *this._s_WIDGET, state )
         ;\\ draw background
         If *this\picture[#__image_BackGround]\imageID
            clip_output_( *this, [#__c_idraw] )
            draw_image_( *this, *this\inner_x( ), *this\Inner_y( ), [#__image_BackGround] )
            clip_output_( *this, [#__c_draw] )
         Else
            If *this\color\back <> - 1
               If *this\color\fore <> - 1
                  draw_mode_alpha_( #PB_2DDrawing_Gradient )
                  __draw_gradient( *this\text\vertical, *this, 0,0, state, 0, 0, [#__c_frame] )
               Else
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  __draw_box( *this, color\back, [#__c_frame])
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      Procedure Draw_Content( *this._s_WIDGET, state )
         Protected img_indent_x, img_indent_y 
         
         ;\\ draw update
         If *this\TextChange( ) Or 
            *this\picture\change
            ;
            If *this\picture And *this\picture\imageID 
               If *this\text And *this\text\string 
                  img_indent_x = img_indent ; DPIScaled(6)
                  img_indent_y = img_indent ; DPIScaled(3)
               EndIf
            EndIf
            ;
            If test_align = 1
               Debug "content "+*this\picture\align\left +" "+ *this\text\align\left +"  "+ *this\picture\align\top +" "+ *this\text\align\top +"  "+ *this\picture\align\right +" "+ *this\text\align\right +"  "+ *this\picture\align\bottom +" "+ *this\text\align\bottom +" "+ *this\text\string
            EndIf
            
            ; make_scrollarea_size
            If *this\text\vertical
               If *this\text\string
                  *this\scroll_width( ) = *this\text\height + *this\padding\x * 2
               Else
                  *this\scroll_width( ) = *this\padding\x * 2
               EndIf
               *this\scroll_height( ) = *this\text\width + *this\padding\y * 2
            Else
               *this\scroll_width( ) = *this\text\width + *this\padding\x * 2
               If *this\text\string
                  *this\scroll_height( ) = *this\text\height + *this\padding\y * 2
               Else
                  *this\scroll_height( ) = *this\padding\y * 2
               EndIf
            EndIf
            ;
            ; make_scrollarea_width
            If *this\picture\width
               If *this\picture\align\left Or *this\picture\align\right 
                  *this\scroll_width( ) + *this\picture\width + img_indent_x
               Else
                  If *this\scroll_width( ) < *this\picture\width + *this\padding\x * 2
                     *this\scroll_width( ) = *this\picture\width + *this\padding\x * 2
                  EndIf
               EndIf
            EndIf
            ;
            ; make_scrollarea_height
            If *this\picture\height
               If *this\picture\align\top Or *this\picture\align\bottom 
                  *this\scroll_height( ) + *this\picture\height + img_indent_y
               Else
                  If *this\scroll_height( ) < *this\picture\height + *this\padding\y * 2
                     *this\scroll_height( ) = *this\picture\height + *this\padding\y * 2
                  EndIf
               EndIf
            EndIf
            ;
            ; make_scrollarea_pos
            make_scrollarea_x( *this, *this\scroll_width( ), *this\text\align )
            make_scrollarea_y( *this, *this\scroll_height( ), *this\text\align )
            ;
            ;
            If *this\picture\change
               change_align_horizontal( *this\picture, *this\inner_width( ), *this\picture\width, *this\picture\rotate, *this\picture\align, *this\padding\x )
               change_align_vertical( *this\picture, *this\inner_height( ), *this\picture\height, *this\picture\rotate, *this\picture\align, *this\padding\y )
               
               If *this\picture\align\left
                  If Not *this\text\align\left
                     *this\picture\x + *this\scroll_x( ) ;+ *this\padding\x
                  EndIf
               EndIf
               If *this\picture\align\top
                  If Not *this\text\align\top
                     *this\picture\y + *this\scroll_y( ) ;+ *this\padding\y
                  EndIf
               EndIf
               If *this\picture\align\right
                  If Not *this\text\align\right
                     *this\picture\x - *this\scroll_x( ) ;+ *this\scroll_width( ) - *this\picture\width - *this\padding\x
                  EndIf
               EndIf
               If *this\picture\align\bottom
                  If Not *this\text\align\bottom
                     *this\picture\y - *this\scroll_y( ) ;+ *this\scroll_height( ) - *this\picture\height - *this\padding\y
                  EndIf
               EndIf
               
            EndIf
            
            If *this\TextChange( )
               If *this\text\vertical
                  change_align_horizontal( *this\text, *this\inner_width( ), *this\text\height, *this\text\rotate, *this\text\align, *this\padding\x )
                  change_align_vertical( *this\text, *this\inner_height( ), *this\text\width, *this\text\rotate, *this\text\align, *this\padding\y )
               Else
                  change_align_horizontal( *this\text, *this\inner_width( ), *this\text\width, *this\text\rotate, *this\text\align, *this\padding\x )
                  change_align_vertical( *this\text, *this\inner_height( ), *this\text\height, *this\text\rotate, *this\text\align, *this\padding\y )
               EndIf
               
               ; align img left & top
               If *this\picture\align
                  If *this\picture\width
                     If *this\picture\align\left
                        If *this\text\align\left
                           *this\text\x + ( *this\picture\width + img_indent_x )
                        Else
                           *this\text\x + ( *this\picture\width + img_indent_x ) / 2
                        EndIf
                     EndIf
                     If *this\picture\align\right
                        If *this\text\align\right
                           *this\text\x - ( *this\picture\width + img_indent_x )
                        Else
                           *this\text\x - ( *this\picture\width + img_indent_x ) / 2
                        EndIf
                     EndIf
                  EndIf
                  If *this\picture\height
                     If *this\picture\align\top
                        If *this\picture\align\top
                           If *this\text\align\top
                              *this\text\y + ( *this\picture\height + img_indent_y )
                           Else
                              *this\text\y + ( *this\picture\height + img_indent_y ) / 2
                           EndIf
                        EndIf
                     EndIf
                     If *this\picture\align\bottom
                        If *this\picture\align\bottom
                           If *this\text\align\bottom
                              *this\text\y - ( *this\picture\height + img_indent_y )
                           Else
                              *this\text\y - ( *this\picture\height + img_indent_y ) / 2
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
            EndIf
         EndIf
         
         ;\\ draw picture
         If *this\picture And *this\picture\imageID 
            draw_mode_alpha_( #PB_2DDrawing_Transparent )
            DrawAlphaImage( *this\picture\imageID, *this\inner_x( ) + *this\picture\x, *this\inner_y( ) + *this\picture\y, *this\color\ialpha )
         EndIf
         
         ;\\ draw text
         If *this\text And *this\text\string 
            If *this\screen_height( ) > *this\text\height
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawRotatedText( *this\inner_x( ) + *this\text\x, *this\inner_y( ) + *this\text\y, *this\text\string, *this\text\rotate, *this\color\front[state] )
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure Draw_Frames( *this._s_WIDGET )
         If *this\type = #__type_Window
            ; чтобы закруглять только у окна с титлебаром
            Protected gradient = 1
            Protected r = DPIScaled(13)
            ; 
            If Not *this\round
               If gradient
                  draw_mode_alpha_( #PB_2DDrawing_Gradient )
                  BackColor( *this\color\fore[*this\ColorState( )] & $FFFFFF | 255 << 24 )
                  FrontColor( *this\color\frame[*this\ColorState( )] & $FFFFFF | 255 << 24 )
               EndIf
               
               ; Draw caption frame
               If *this\fs[2]
                  Protected ch = *this\fs[2]
                  If Not *this\round
                     ch = *this\fs[2] - 1             ; (*this\fs+*this\fs[2])/2
                  EndIf
                  
                  ; top
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\fs, *this\frame_y( ), *this\frame_x( ) + *this\fs, *this\frame_y( ) + (*this\fs[2] + *this\fs) * 2)
                  EndIf
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + *this\fs, r, r, *this\color\frame[*this\ColorState( )] )
                  
                  If *this\fs[2]
                     draw_mode_alpha_( #PB_2DDrawing_Outlined )
                     draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + *this\fs, r, r, *this\color\frame[*this\ColorState( )] )
                  EndIf
                  
                  If gradient
                     draw_mode_alpha_( #PB_2DDrawing_Gradient )
                     BackColor( *this\color\fore[*this\ColorState( )] & $FFFFFF | 255 << 24 )
                     FrontColor( *this\color\frame[*this\ColorState( )] & $FFFFFF | 255 << 24 )
                     LinearGradient( *this\frame_x( ) + *this\fs, *this\frame_y( ), *this\frame_x( ) + *this\fs, *this\frame_y( ) + (*this\fs[2] + *this\fs) * 2)
                  EndIf
                  draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\fs[2] - r, *this\frame_width( ), r + *this\fs, *this\color\frame[*this\ColorState( )] )
               EndIf
               
               ; Draw frame
               If *this\fs > 0
                  If Not gradient
                     draw_mode_alpha_( #PB_2DDrawing_Default )
                  EndIf
                  If *this\fs = 1
                     gradient = 0
                  EndIf
                  
                  If Not *this\fs[2]; top
                     If gradient
                        LinearGradient( *this\frame_x( ), *this\frame_y( ) + *this\fs * 2, *this\frame_x( ), *this\frame_y( ) - *this\fs )
                     EndIf
                     draw_box_( *this\frame_x( ) + *this\fs, *this\frame_y( ), *this\frame_width( ) - *this\fs * 2, *this\fs, *this\color\frame[*this\ColorState( )] )
                     ; left&top
                     If gradient
                        BoxedGradient(*this\frame_x( ), *this\frame_y( ), *this\fs * 2, *this\fs * 2)
                     EndIf
                     draw_box_( *this\frame_x( ), *this\frame_y( ), *this\fs, *this\fs, *this\color\frame[*this\ColorState( )] )
                     
                     ; right&top
                     If gradient
                        BoxedGradient(*this\frame_x( ) + *this\frame_width( ) - *this\fs * 2, *this\frame_y( ), *this\fs * 2, *this\fs * 2)
                     EndIf
                     draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs, *this\frame_y( ), *this\fs, *this\fs, *this\color\frame[*this\ColorState( )] )
                  EndIf
                  
                  ; left
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\fs * 2, *this\frame_y( ) + *this\fs + ch, *this\frame_x( ) - *this\fs, *this\frame_y( ) + *this\fs + ch )
                  EndIf
                  draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\fs + ch, *this\fs, *this\frame_height( ) - *this\fs * 2 - ch, *this\color\frame[*this\ColorState( )] )
                  ; right
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\frame_width( ) - *this\fs * 2, *this\frame_y( ) + *this\fs + ch, *this\frame_x( ) + *this\frame_width( ) + *this\fs, *this\frame_y( ) + *this\fs + ch )
                  EndIf
                  draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs, *this\frame_y( ) + *this\fs + ch, *this\fs, *this\frame_height( ) - *this\fs * 2 - ch, *this\color\frame[*this\ColorState( )] )
                  ; bottom
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\fs, *this\frame_y( ) + *this\frame_height( ) - *this\fs * 2, *this\frame_x( ) + *this\fs, *this\frame_y( ) + *this\frame_height( ) + *this\fs )
                  EndIf
                  draw_box_( *this\frame_x( ) + *this\fs, *this\frame_y( ) + *this\frame_height( ) - *this\fs, *this\frame_width( ) - *this\fs * 2, *this\fs, *this\color\frame[*this\ColorState( )] )
                  
                  ; left&bottom
                  If gradient
                     BoxedGradient(*this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs * 2, *this\fs * 2, *this\fs * 2)
                  EndIf
                  draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs, *this\fs, *this\fs, *this\color\frame[*this\ColorState( )] )
                  
                  ; right&bottom
                  If gradient
                     BoxedGradient(*this\frame_x( ) + *this\frame_width( ) - *this\fs * 2, *this\frame_y( ) + *this\frame_height( ) - *this\fs * 2, *this\fs * 2, *this\fs * 2)
                  EndIf
                  draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs, *this\frame_y( ) + *this\frame_height( ) - *this\fs, *this\fs, *this\fs, *this\color\frame[*this\ColorState( )] )
                  
               EndIf
            EndIf
            
            If *this\fs[2] Or ( *this\round And *this\fs > *this\round / 3 ) Or Not *this\round
               If *this\fs
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  ; inner top
                  Line( *this\frame_x( ) + *this\fs + *this\fs[1], *this\frame_y( ) + *this\fs + *this\fs[2] - 1, *this\frame_width( ) - *this\fs[1] - *this\fs[3] - *this\fs * 2, 1, *this\color\frame[*this\ColorState( )] )
                  ; inner left
                  Line( *this\frame_x( ) + *this\fs + *this\fs[1] - 1, *this\frame_y( ) + *this\fs + *this\fs[2] - 1, 1, *this\frame_height( ) - *this\fs[2] - *this\fs[4] - *this\fs * 2 + 1, *this\color\frame[*this\ColorState( )] )
                  ; inner right
                  Line( *this\frame_x( ) + *this\frame_width( ) - *this\fs[3] - *this\fs, *this\frame_y( ) + *this\fs + *this\fs[2] - 1, 1, *this\frame_height( ) - *this\fs[2] - *this\fs[4] - *this\fs * 2 + 1, *this\color\frame[*this\ColorState( )] )
                  ; inner bottom
                  Line( *this\frame_x( ) + *this\fs + *this\fs[1], *this\frame_y( ) + *this\frame_height( ) - *this\fs[4] - *this\fs, *this\frame_width( ) - *this\fs[1] - *this\fs[3] - *this\fs * 2, 1, *this\color\frame[*this\ColorState( )] )
               EndIf
               
               If Not *this\round
                  If *this\fs
                     If Not *this\fs[2]
                        ; frame top
                        Line( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), 1, *this\color\frame[*this\ColorState( )] )
                     EndIf
                     ; frame bottom
                     Line( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - 1, *this\frame_width( ), 1, *this\color\frame[*this\ColorState( )] )
                     ; frame left
                     Line( *this\frame_x( ), *this\frame_y( ) + *this\fs[2] - r, 1, *this\frame_height( ) - *this\fs[2] + r, *this\color\frame[*this\ColorState( )] )
                     ; frame right
                     Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ) + *this\fs[2] - r, 1, *this\frame_height( ) - *this\fs[2] + r, *this\color\frame[*this\ColorState( )] )
                  ElseIf *this\fs[2]
                     ; frame left
                     Line( *this\frame_x( ), *this\frame_y( ) + *this\fs[2] - r, 1, r + *this\fs, *this\color\frame[*this\ColorState( )] )
                     ; frame right
                     Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ) + *this\fs[2] - r, 1, r + *this\fs, *this\color\frame[*this\ColorState( )] )
                  EndIf
               EndIf
            Else
               If *this\round
                  draw_mode_alpha_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\caption\color\back[*this\ColorState( )] )
               EndIf
            EndIf
            
            ; then caption
            If *this\fs[2]
               PB(ClipOutput)( *this\draw_x( ) + *this\fs, *this\draw_y( ) + *this\fs, *this\draw_width( ) - *this\fs*2, *this\draw_height( ) - *this\fs*2 )
               
               ; buttins background
               draw_mode_alpha_( #PB_2DDrawing_Default )
               __draw_box( *this\CloseButton( ), color\back )
               __draw_box( *this\MaximizeButton( ), color\back )
               __draw_box( *this\MinimizeButton( ), color\back )
               __draw_box( *this\HelpButton( ), color\back )
               
               ; buttons img
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               __draw_close_button( *this\CloseButton( ), DPIScaled(6) )
               __draw_maximize_button( *this\MaximizeButton( ), DPIScaled(4) )
               __draw_minimize_button( *this\MinimizeButton( ), DPIScaled(4) )
               __draw_help_button( *this\HelpButton( ), DPIScaled(4) )
               
               ; Draw img
               If *this\picture\imageID
                  draw_mode_alpha_( #PB_2DDrawing_Transparent )
                  ;                   DrawAlphaimage( *this\picture\imageID,
                  ;                                   *this\frame_x( ) + *this\bs + *this\scroll_x( ) + *this\picture\x,
                  ;                                   *this\frame_y( ) + *this\bs + *this\scroll_y( ) + *this\picture\y - 2, *this\color\ialpha )
                  draw_image_( *this, *this\inner_x( ), *this\inner_y( ) - (*this\picture\height+*this\fs[2])/2 )
               EndIf
               
               If *this\TitleText( )\string
                  If *this\inner_height( )
                     PB(ClipOutput)( *this\draw_x( ) + *this\fs, *this\draw_y( ) + *this\fs, *this\caption\width, *this\draw_height( ) - *this\fs*2 )
                  EndIf
                  
                  ; Draw string
                  If *this\ResizeChange( )
                     If *this\picture\imageID
                        *this\TitleText( )\x = *this\caption\x + *this\padding\x + *this\picture\width + 10
                     Else
                        *this\TitleText( )\x = *this\caption\x + *this\padding\x
                     EndIf
                     *this\TitleText( )\y = *this\caption\y + ( *this\caption\height - *this\fs * 2 - TextHeight( "A" )) / 2
                  EndIf
                  
                  draw_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawText( *this\TitleText( )\x, *this\TitleText( )\y, *this\TitleText( )\string, *this\color\front[*this\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
                  
                  ;                               draw_mode_alpha_( #PB_2DDrawing_Outlined )
                  ;                               draw_roundbox_( *this\caption\x, *this\caption\y, *this\caption\width, *this\caption\height - *this\fs * 2, *this\round, *this\round, $FF000000 )
               EndIf
            EndIf
            
         Else
            ;\\ draw frame
            If *this\fs
               If Not constants::BinaryFlag( *this\flag, #__flag_BorderLess )
                  draw_mode_alpha_( #PB_2DDrawing_Outlined )
                  ;                Debug " - "+ *this\inner_x( ) +" "+ *this\inner_y( ) +" "+ *this\inner_width( ) +" "+ *this\inner_height( ) ;+ 
                  ;                Debug "   - "+ *this\frame_x( ) +" "+ *this\frame_y( ) +" "+ *this\frame_width( ) +" "+ *this\frame_height( )
                  
                  ;draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame )
                  ;               If *this\fs[1] Or
                  ;                  *this\fs[2] Or
                  ;                  *this\fs[3] Or
                  ;                  *this\fs[4] 
                  ;                  ;
                  ;                 If *this\inner_width( ) And 
                  ;                    *this\inner_height( ) 
                  ;                   draw_roundbox_( *this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, *this\color\frame )
                  ;                 EndIf
                  ;               EndIf
                  
                  If constants::BinaryFlag( *this\flag, #__flag_BorderFlat )
                     ;                   If *this\inner_width( ) And 
                     ;                      *this\inner_height( ) 
                     ;                      ;If *this\type <> #__type_Panel
                     ;                         draw_roundbox_( *this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3], *this\frame_height( )-*this\fs[2]-*this\fs[4], *this\round, *this\round, $fff00fff);*this\color\frame )
                     ;                      ;EndIf
                     ;                   EndIf
                     ;                   If *this\type = #__type_Container
                     If Not ( *this\fs[1] Or *this\fs[2] Or *this\fs[3] Or *this\fs[4] )
                        draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame )
                     EndIf
                     ;                   EndIf
                     
                  ElseIf constants::BinaryFlag( *this\flag, #__flag_BorderSingle ) Or
                         constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                     Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FFAAAAAA)
                     Line(*this\frame_x( ), *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FFAAAAAA)
                     Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+*this\frame_height( )-1, *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FFFFFFFF)
                     Line(*this\frame_x( )+*this\frame_width( )-1, *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FFFFFFFF)
                     ;                 draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                     ;                 draw_roundbox_(*this\inner_x( ) - 2, *this\inner_y( ) - 2, *this\inner_width( ) + 3, *this\inner_height( ) + 3, *this\round, *this\round, $FFFFFFFF )
                     
                  ElseIf constants::BinaryFlag( *this\flag, #__flag_BorderRaised )
                     Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FFFFFFFF)
                     Line(*this\frame_x( ), *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FFFFFFFF)
                     Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\frame_height( )-1, *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FF838383)
                     Line(*this\frame_x( )+*this\frame_width( )-1, *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FF838383)
                     
                     Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2]+1, *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FFFFFFFF)
                     Line(*this\frame_x( )+1, *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FFFFFFFF)
                     Line(*this\frame_x( )+*this\fs[1]+1, *this\frame_y( )+*this\frame_height( )-2, *this\frame_width( )-*this\fs[1]-*this\fs[3]-2, 1, $FFAAAAAA)
                     Line(*this\frame_x( )+*this\frame_width( )-2, *this\frame_y( )+*this\fs[2]+1, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-2, $FFAAAAAA)
                  Else
                     draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame )
                  EndIf
                  
                  If constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                     ;                 Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2]+1, *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FF838383)
                     ;                 Line(*this\frame_x( )+*this\fs[1]+1, *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FF838383)
                     ;                 Line(*this\frame_x( )+*this\fs[1]+1, *this\frame_y( )+*this\frame_height( )-2, *this\frame_width( )-*this\fs[1]-*this\fs[3]-2, 1, $FFE7E7E7)
                     ;                 Line(*this\frame_x( )+*this\frame_width( )-2, *this\frame_y( )+*this\fs[2]+1, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-2, $FFE7E7E7)
                     
                     Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+1+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FF838383)
                     Line(*this\frame_x( )+1, *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FF838383)
                     Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+*this\frame_height( )-2, *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FFE7E7E7)
                     Line(*this\frame_x( )+*this\frame_width( )-2, *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FFE7E7E7)
                  EndIf
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      Procedure   Draw_TreeRows( *this._s_WIDGET, List *rows._s_ROWS( ) )
         Protected state.b, X.l, Y.l, xs.l, ys.l, _box_x_.l, _box_y_.l, minus.l = 7
         Protected bs = Bool( *this\fs )
         Protected _scroll_x_ = *this\scroll\h\bar\page\pos
         Protected _scroll_y_ = *this\scroll\v\bar\page\pos
         
         ;
         clip_output_( *this, [#__c_idraw] )
         PushListPosition( *rows( ))
         ForEach *rows( )
            If *rows( )\columnindex <> ListIndex( *this\columns( ))
               Continue
            EndIf
            If Not *rows( )\visible
               Continue
            EndIf
            
            ;\\ init real drawing font
            draw_font( *rows( ) )
            
            If ListSize( *this\columns( )) = 1
               Define property; = *this\row\sublevelsize
            EndIf
            
            ;\\
            state = *rows( )\ColorState( )
            X     = row_x_( *this, *rows( ) )
            Y     = row_y_( *this, *rows( ) )
            Xs    = X - _scroll_x_ + property
            Ys    = Y - _scroll_y_
            
            ;\\ Draw selector back
            If *rows( )\color\back[state] <> - 1
               ;                If ListSize( *this\columns( )) = 1
               draw_mode_alpha_( #PB_2DDrawing_Default )
               ; ;                   If constants::BinaryFlag( *this\flag, #__flag_RowFullSelect )
               ; ;                      draw_roundbox_( *this\inner_x( ), ys, *this\inner_width( ), *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\back[state] )
               ; ;                   Else
               draw_roundbox_( xs, ys, *rows( )\width, *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\back[state] )
               ; ;                   EndIf
               ;                Else
               ;                   If *rows( ) = *this\RowEntered( )
               ;                      draw_roundbox_( xs, ys, *rows( )\width, *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\back[state] )
               ;                   ;   draw_roundbox_( X, Y, *rows( )\width, *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\back[state] )
               ;                   EndIf
               ;                EndIf
            EndIf
            
            ;\\ Draw items img
            If *rows( )\picture\imageID
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *rows( )\picture\imageID, xs + *rows( )\picture\x - property, ys + *rows( )\picture\y, *rows( )\color\ialpha )
            EndIf
            
            ;\\ Draw items text
            If *rows( )\text\string.s
               draw_mode_( #PB_2DDrawing_Transparent )
               If *rows( )\text\x > *this\row\sublevelsize
                  DrawRotatedText( xs + *rows( )\text\x - property, ys + *rows( )\text\y, *rows( )\text\string.s, *this\text\rotate, *rows( )\color\front[state] )
               Else
                  DrawRotatedText( xs + *rows( )\text\x, ys + *rows( )\text\y, *rows( )\text\string.s, *this\text\rotate, *rows( )\color\front[state] )
               EndIf
            EndIf
            
            ;\\ Draw selector frame
            If *rows( )\color\frame[state]
               draw_mode_( #PB_2DDrawing_Outlined )
               ;                If constants::BinaryFlag( *this\flag, #__flag_RowFullSelect )
               ;                ;   draw_roundbox_( *this\inner_x( ), ys, *this\inner_width( ), *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\frame[state] )
               ;                Else
               draw_roundbox_( xs, ys, *rows( )\width, *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\frame[state] )
               ;                EndIf
            EndIf
            
            ;\\ Horizontal line
            If *this\mode\GridLines
               draw_mode_alpha_( #PB_2DDrawing_Default )
               ;If *this\LineColor <> *rows( )\color\back
               draw_box_( X, ys + *rows( )\height, *rows( )\width, *this\mode\GridLines, *this\LineColor )
               ;EndIf
               If property
                  draw_box_( X, ys, *this\row\sublevelsize, *rows( )\height, *this\LineColor )
               EndIf
            EndIf
         Next
         
         
         ;           draw_mode_alpha_( #PB_2DDrawing_Default ); | #PB_2DDrawing_AlphaBlend )
         ;          draw_box_( *this\inner_x( ), *this\inner_y( ), *this\row\sublevelsize, *this\inner_height( ), *this\__rows( )\RowParent( )\color\back )
         
         If ListIndex( *this\columns( )) = 0
            ;         SelectElement( *this\columns( ), 0 )
            ;         *rows( ) = *this\__rows( )
            Protected *buttonBox._s_buttons
            
            ; - Draw plots line
            If *this\mode\Lines
               draw_mode_alpha_( #PB_2DDrawing_Default )
               ; draw_mode_( #PB_2DDrawing_CustomFilter ) : CustomFilterCallback( @Draw_Plot( ))
               
               ForEach *this\__rows( )
                  If Not *this\__rows( )\buttonbox
                     Break 
                  EndIf
                  ; Debug " 9999 "+*this\__rows( )\columnindex+" "+ListIndex( *this\columns( ))+" "+*this\__rows( )\text\string
                  If *this\__rows( )\columnindex <> ListIndex( *this\columns( ))
                     Continue
                  EndIf
                  
                  If *this\__rows( )\_last
                     *buttonBox = *this\__rows( )\_last\buttonbox
                  EndIf
                  
                  Xs         = row_x_( *this, *this\__rows( ) ) - _scroll_x_ 
                  Ys         = row_y_( *this, *this\__rows( ) ) - _scroll_y_
                  
                  If display_mode_linux
                     If *this\__rows( )\sublevel Or  *this\__rows( )\childrens
                        Xs - *this\row\sublevelsize
                     EndIf
                  EndIf
                  
                  ; for the tree vertical line
                  If *this\__rows( )\_last And Not *this\__rows( )\_last\hide And *this\__rows( )\_last\sublevel
                     Define iy = (Ys + *this\__rows( )\height / 2 )
                     Define iheight = (*this\__rows( )\_last\y - *this\__rows( )\y) ; - display_mode_linux * *this\__rows( )\_last\height / 2
                     
                     If iy < *this\inner_y( )
                        iheight + ( iy - *this\inner_y( ) )
                        iy = *this\inner_y( )
                     EndIf
                     If iheight > (*this\inner_y( ) + *this\inner_height( )) - iy
                        iheight = (*this\inner_y( ) + *this\inner_height( )) - iy
                     EndIf
                     If iheight < 0 
                        iheight = 0
                     EndIf
                     
                     ;                         If *this\__rows( )\_last\text\string = "text_7"
                     ;                            Debug "text_7 "+iheight
                     ;                         EndIf
                     ;                         If *this\__rows( )\_last\text\string = "text_3"
                     ;                            Debug iy
                     ;                            Debug "text_3 "+iheight
                     ;                         EndIf
                     ;                         If *this\__rows( )\_last\text\string = "panel_0"
                     ;                            Debug "panel_0 "+iheight
                     ;                         EndIf
                     
                     If *buttonBox
                        Line((xs + *buttonBox\x + *buttonBox\width / 2), iy, 1, iheight, *this\LineColor )
                     EndIf
                  EndIf
                  
                  ; for the tree horizontal line
                  If *this\__rows( )\visible And Not *this\__rows( )\hide And Not ( *this\__rows( )\childrens And Not *this\__rows( )\sublevel)
                     Line((xs + *this\__rows( )\buttonbox\x + *this\__rows( )\buttonbox\width / 2), (ys + *this\__rows( )\height / 2), DPIScaled(7), 1, *this\LineColor )
                  EndIf
               Next
               
               ; for the tree item first vertical line
               If *this\RowFirstLevelFirst( ) And *this\RowFirstLevelLast( ) And *this\RowFirstLevelFirst( )\buttonbox
                  Line((*this\inner_x( ) + *this\padding\x + *this\RowFirstLevelFirst( )\buttonbox\x + *this\RowFirstLevelFirst( )\buttonbox\width / 2) - _scroll_x_, (row_y_( *this, *this\RowFirstLevelFirst( ) ) + *this\RowFirstLevelFirst( )\height / 2) - _scroll_y_, 1, (*this\RowFirstLevelLast( )\y - *this\RowFirstLevelFirst( )\y), *this\LineColor )
               EndIf
            EndIf
            
            ;\\ Draw buttons
            If *this\mode\Buttons Or *this\mode\CheckBoxes Or *this\mode\OptionBoxes
               ;\\ Draw boxs ( check&option )
               ForEach *rows( )
                  If *rows( )\columnindex <> ListIndex( *this\columns( ))
                     Continue
                  EndIf
                  If *rows( )\visible And *rows( )\checkbox And (*this\mode\CheckBoxes Or *this\mode\OptionBoxes)
                     X = row_x_( *this, *rows( ) ) - _scroll_x_
                     Y = row_y_( *this, *rows( ) ) - _scroll_y_
                     
                     If *rows( )\RowParent( ) And *this\mode\optionboxes
                        ; option box
                        __draw_checkbox( 1, *rows( )\checkbox, X,Y, *rows( )\checkbox\width )
                     Else
                        ; check box
                        __draw_checkbox( 3, *rows( )\checkbox, X,Y, DPIScaled(2) )
                     EndIf
                  EndIf
               Next
               
               ;\\ Draw buttons ( expanded&collapsed )
               ForEach *rows( )
                  If *rows( )\columnindex <> ListIndex( *this\columns( ))
                     Continue
                  EndIf
                  If *rows( )\visible And Not *rows( )\hide
                     If *this\mode\Buttons And *rows( )\childrens 
                        
                        ;If Not ( *this\mode\optionboxes )
                        
                        X = row_x_( *this, *rows( ) ) - _scroll_x_
                        Y = row_y_( *this, *rows( ) ) - _scroll_y_
                        
                        If *rows( )\buttonbox
                           X + *rows( )\buttonbox\x
                           Y + *rows( )\buttonbox\y
                           
                           If Bool(DPIResolution( ) > 1)
                              If *rows( )\ColorState( ) = 1
                                 Draw_Arrow(3 - Bool(*rows( )\buttonbox\checked), X-1-Bool(*rows( )\buttonbox\checked), Y-1-Bool(*rows( )\buttonbox\checked=0), DPIScaled(10), 1 )
                              ElseIf *rows( )\ColorState( ) = 2
                                 Draw_Arrow(3 - Bool(*rows( )\buttonbox\checked), X-Bool(*rows( )\buttonbox\checked=0)*DPIScaled(1), Y-DPIScaled(1), DPIScaled(11), 1, 2 )
                                 ;   Draw_Arrow(3 - Bool(*rows( )\buttonbox\checked), x-1-Bool(*rows( )\buttonbox\checked), y-1-Bool(*rows( )\buttonbox\checked=0), DPIScaled(10), 1, 0, $ffffffff )
                              Else
                                 Draw_Arrow(3 - Bool(*rows( )\buttonbox\checked), X+DPIScaled(1), Y+DPIScaled(1), DPIScaled(6)+DPIScaled(Bool(DPIResolution( )>1)), 1)
                              EndIf
                           Else
                              If *rows( )\ColorState( ) = 1
                                 Draw_Arrow(3 - Bool(*rows( )\buttonbox\checked), X, Y-Bool(*rows( )\buttonbox\checked=0), 8, 1 )
                              ElseIf *rows( )\ColorState( ) = 2
                                 Draw_Arrow(3 - Bool(*rows( )\buttonbox\checked), X+Bool(*rows( )\buttonbox\checked)*2, Y+Bool(*rows( )\buttonbox\checked=0), 8, 1, 2 )
                              Else
                                 Draw_Arrow(3 - Bool(*rows( )\buttonbox\checked), X+2, Y+2, 4, 1)
                              EndIf
                           EndIf
                        EndIf
                        
                        ;EndIf
                     EndIf
                  EndIf
               Next
            EndIf
         EndIf
         ;
         PopListPosition( *rows( )) 
         clip_output_( *this, [#__c_draw] )
         
      EndProcedure
      
      Procedure   Draw_Tree( *this._s_WIDGET )
         Protected state.b, X.l, Y.l, scroll_x, scroll_y
         
         If Not *this\hide
            If *this\WidgetChange( ) Or *this\ResizeChange( )
               Update_DrawRows( *this, *this\__rows( ), *this\WidgetChange( ) )
               
               bar_area_update( *this )
               
               ; reset draw list
               ClearList( *this\RowVisibleList( ))
               *this\RowFirstVisible( ) = 0
               *this\RowLastVisible( )  = 0
               
               Update_DrawVisibleRows( *this, *this\__rows( ) )
               
               *this\WidgetChange( ) = 0
            EndIf
            
            ;\\ Draw background
            If *this\AlphaState( )
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back )
            EndIf
            
            ;\\ Draw background img
            If *this\picture\imageID
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *this\picture\imageID, *this\picture\x, *this\picture\y, *this\color\ialpha )
            EndIf
            
            ;\\
            Draw_TreeRows( *this, *this\RowVisibleList( ) )
            
            ;\\ draw frames
            If *this\bs
               draw_mode_( #PB_2DDrawing_Outlined )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame[*this\ColorState( )] )
               If *this\round : draw_roundbox_( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), *this\frame_height( ) + 2, *this\round, *this\round, *this\color\front[*this\ColorState( )] ) : EndIf  ; Сглаживание краев ) ))
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure   Draw_EditorItems( *this._s_WIDGET, List e_rows._s_ROWS( ) )
         Protected Y, Text_x, Text_y, visible_y, visible_height
         
         
         If Not visible_y
            visible_y = 0;*this\inner_y( ) ; *this\draw_y( ) ;
         EndIf
         If Not visible_height
            If *this\draw_height( ) > *this\inner_height( )
               visible_height = *this\inner_height( ) ;
            Else
               visible_height = *this\draw_height( )
            EndIf
         EndIf
         
         ;
         clip_output_( *this, [#__c_idraw] )
         PushListPosition( e_rows( ))
         ForEach e_rows( )
            ; update visible lines 
            e_rows( )\visible = Bool( Not e_rows( )\hide And
                                      (( e_rows( )\y + *this\scroll_y( ) ) < visible_y + visible_height ) And
                                      ( e_rows( )\y + e_rows( )\height + *this\scroll_y( ) ) > visible_y )
            
            
            ; Draw selections
            If e_rows( )\visible
               If Not *this\RowFirstVisible( )
                  *this\RowFirstVisible( ) = e_rows( )
               EndIf
               *this\RowLastVisible( ) = e_rows( )
               
               
               ;\\
               If *this\focus > 1
                  *this\ColorState( ) = *this\focus
               EndIf
               
               Y      = row_y_( *this, e_rows( ) ) + *this\scroll_y( )
               Text_x = row_x_( *this, e_rows( ) ) + *this\scroll_x( ) + e_rows( )\text\x
               Text_Y = Y + e_rows( )\text\y
               
               Protected sel_text_x1 = edit_string_x_( *this, [1] ) + *this\scroll_x( )
               Protected sel_text_x2 = edit_string_x_( *this, [2] ) + *this\scroll_x( )
               Protected sel_text_x3 = edit_string_x_( *this, [3] ) + *this\scroll_x( )
               
               Protected sel_x = *this\inner_x( ) + *this\text\x
               Protected sel_width = *this\inner_width( ) - *this\text\y * 2
               Protected text_sel_width = e_rows( )\text\edit[2]\width
               
               ; Draw lines
               ; Если для итема установили задный
               ; фон отличный от заднего фона едитора
               If e_rows( )\color\back
                  ;                     draw_mode_alpha_( #PB_2DDrawing_Default )
                  ;                     draw_roundbox_( sel_x,Y,sel_width ,e_rows( )\height, e_rows( )\round,e_rows( )\round, e_rows( )\color\back[0] )
                  
                  If *this\color\back And
                     *this\color\back <> e_rows( )\color\back
                     ; Draw margin back color
                     If *this\MarginLine( )\width > 0
                        ; то рисуем вертикальную линию на границе поля нумерации и начало итема
                        draw_mode_alpha_( #PB_2DDrawing_Default )
                        draw_box_( *this\MarginLine( )\x, e_rows( )\y, *this\MarginLine( )\width, e_rows( )\height, *this\MarginLine( )\color\back )
                        Line( *this\inner_x( ) + *this\MarginLine( )\width, e_rows( )\y, 1, e_rows( )\height, *this\color\back ) ; $FF000000 );
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               If *this\focus = 2
                  If e_rows( ) = *this\LinePressed( ) Or 
                     e_rows( ) = *this\LineFocused( )
                     
                     draw_mode_alpha_( #PB_2DDrawing_Default )
                     draw_roundbox_( Text_x, Y, e_rows( )\text\width, e_rows( )\height, e_rows( )\round, e_rows( )\round, e_rows( )\color\back[1] )
                  EndIf
               EndIf
               
               ; Draw text string
               draw_mode_alpha_( #PB_2DDrawing_Default )
               If e_rows( )\color\front[2] = *this\color\front 
                  If text_sel_width
                     draw_box_( sel_text_x2, Y, text_sel_width, e_rows( )\height, e_rows( )\color\back[*this\ColorState( )] )
                  EndIf
               EndIf 
               
               If e_rows( )\text\string.s
                  ;                   CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                  ;                      ; GetDC_(*this\root\canvas\gadgetID)
                  ;                      SetBkMode_(DrawingDC, #TRANSPARENT)
                  ;                      SetTextColor_(DrawingDC, e_rows( )\color\front & $FFFFFF | e_rows( )\AlphaColor24( ) )
                  ;                      TextOut_(DrawingDC, Text_x, Text_Y, e_rows( )\text\string.s,Len(e_rows( )\text\string.s))
                  ;                   CompilerElse
                  DrawRotatedText( Text_x, Text_Y, e_rows( )\text\string.s, *this\text\rotate, e_rows( )\color\front )
                  ;                   CompilerEndIf
               EndIf
               
               If e_rows( )\color\front[2] <> *this\color\front
                  If text_sel_width
                     draw_box_( sel_text_x2, Y, text_sel_width, e_rows( )\height, e_rows( )\color\back[*this\ColorState( )] )
                     
                     If *this\press And #PB_Compiler_OS = #PB_OS_MacOS
                        
                        ; to right select
                        If ( ( *this\LineEntered( ) And *this\LinePressed( ) And *this\LineEntered( )\lindex > *this\LinePressed( )\lindex ) Or
                             ( *this\LineEntered( ) = *this\LinePressed( ) And *this\edit_caret_1( ) > *this\edit_caret_2( ) ))
                           
                           If e_rows( )\text\edit[2]\string.s
                              DrawRotatedText( sel_text_x2, Text_Y, e_rows( )\text\edit[2]\string.s, *this\text\rotate, e_rows( )\color\front[*this\ColorState( )] )
                           EndIf
                           
                           ; to left select
                        Else
                           If e_rows( )\text\edit[2]\string.s
                              DrawRotatedText( Text_x, Text_Y, e_rows( )\text\edit[1]\string.s + e_rows( )\text\edit[2]\string.s, *this\text\rotate, e_rows( )\color\front[*this\ColorState( )] )
                           EndIf
                           
                           If e_rows( )\_enter
                              If e_rows( )\text\edit[1]\width
                                 draw_box_( Text_x, Text_Y+2, e_rows( )\text\edit[1]\width, e_rows( )\text\height-2, e_rows( )\color\back[1] )
                              EndIf
                           EndIf
                           
                           If e_rows( )\text\edit[1]\string.s
                              DrawRotatedText( Text_x, Text_Y, e_rows( )\text\edit[1]\string.s, *this\text\rotate, e_rows( )\color\front )
                           EndIf
                        EndIf
                        
                     Else
                        If e_rows( )\text\edit[2]\string.s
                           DrawRotatedText( sel_text_x2, Text_Y, e_rows( )\text\edit[2]\string.s, *this\text\rotate, e_rows( )\color\front[*this\ColorState( )] )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;                ;\\
               ;                If e_rows( ) = *this\LineEntered( ) 
               ;                   ;draw_mode_alpha_( #PB_2DDrawing_XOr | #PB_2DDrawing_Outlined )
               ;                   draw_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                   draw_roundbox_( Mouse()\x, Y, 20, e_rows( )\height, e_rows( )\round, e_rows( )\round, e_rows( )\color\frame[1] )
               ; ;                   draw_roundbox_( Text_x-2, Y, e_rows( )\text\width+2 + 7, e_rows( )\height, e_rows( )\round, e_rows( )\round, e_rows( )\color\frame[1] )
               ; ;                   draw_roundbox_( Text_x-1, Y+1, e_rows( )\text\width + 7 , e_rows( )\height-2, e_rows( )\round, e_rows( )\round, $ffffffff )
               ; ;                   draw_roundbox_( Text_x, Y+2, e_rows( )\text\width-2 + 7 , e_rows( )\height-4, e_rows( )\round, e_rows( )\round, e_rows( )\color\frame[1] )
               ;                EndIf
               
               ; Draw margin text
               If *this\MarginLine( )\width > 0
                  draw_mode_( #PB_2DDrawing_Transparent )
                  DrawRotatedText( e_rows( )\margin\x + Bool( *this\text\vertical ) * *this\scroll_x( ),
                                   e_rows( )\margin\y + Bool( Not *this\text\vertical ) * *this\scroll_y( ),
                                   e_rows( )\margin\string, *this\text\rotate, *this\MarginLine( )\color\front )
               EndIf
               
               ; Horizontal line
               If *this\mode\GridLines And
                  *this\LineColor And *this\LineColor <> e_rows( )\color\back
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  draw_box_( row_x_( *this, e_rows( ) ), Y + e_rows( )\height, e_rows( )\width, *this\mode\GridLines, *this\LineColor )
               EndIf
            EndIf
         Next
         PopListPosition( e_rows( )) ;
         clip_output_( *this, [#__c_draw] )
      EndProcedure
      
      Procedure   Draw_Editor( *this._s_WIDGET )
         Protected String.s, StringWidth
         Protected IT, Text_Y, Text_x, X, Y, Width, Drawing
         
         If Not *this\hide
            
            With *this
               ; Make output multi line text
               If *this\TextChange( ) Or ( *this\ResizeChange( ) And *this\text\multiline = - 1 )
                  ;
                  Update_DrawText( *this, *this\TextChange( ) )
                  ;
                  ;;;;;;;;;;;;;;;;;;;;
                  If *this\create = 1
                     *this\create = - 1
                     edit_make_text_position( *this )
                  EndIf
               EndIf
               
               ; Debug ""+*this\text\editable +" "+ *this\LinePressedIndex( ) +" "+ *this\TextChange( )
               ;
               ; then change text update cursor pos
               If *this\text\editable And *this\TextChange( ) =- 99 And *this\LineFocusedIndex( ) >= 0
                  Update_DrawText( *this, #True )
                  
                  If *this\LineFocused( )
                     ;                      *this\LineEntered( ) = *this\LineFocused( )
                     ;                      *this\LinePressed( ) = *this\LineFocused( )
                     
                     If test_edit_text
                        Debug "----- " + *this\text\string
                        Debug "    key - change caret pos " + ListSize( *this\__lines( ) ) + " " + *this\LineFocused( )\lindex + " " + *this\LinePressedIndex( )
                     EndIf
                     
                     ;
                     If *this\scroll\v And Not *this\scroll\v\hide
                        If *this\scroll_y( ) + *this\text\caret\y < 0 Or
                           *this\scroll_y( ) + *this\text\caret\y + *this\text\caret\height > *this\inner_height( )
                           
                           If test_edit_text
                              If *this\scroll_y( ) + *this\text\caret\y < 0
                                 Debug "       key - scroll UP"
                              ElseIf *this\scroll_y( ) + *this\text\caret\y + *this\text\caret\height > *this\inner_height( )
                                 Debug "       key - scroll DOWN"
                              EndIf
                           EndIf
                           
                           make_scrollarea_pos( *this\scroll\v, *this\text\caret\y, *this\text\caret\height ) ; ok
                        EndIf
                     EndIf
                     
                     ;
                     If *this\scroll\h And Not *this\scroll\h\hide
                        If *this\scroll_x( ) + *this\text\caret\x < 0 Or
                           *this\scroll_x( ) + *this\text\caret\x + *this\text\caret\width  > *this\inner_width( )
                           
                           If test_edit_text
                              If *this\scroll_x( ) + *this\text\caret\x < 0
                                 Debug "       key - scroll LEFT"
                              ElseIf *this\scroll_x( ) + *this\text\caret\x + *this\text\caret\width > *this\inner_width( )
                                 Debug "       key - scroll RIGHT"
                              EndIf
                           EndIf
                           
                           Debug "scroll ??????? "+*this\scroll\h\bar\page\pos
                           make_scrollarea_pos( *this\scroll\h, *this\text\caret\x, *this\text\caret\width ) ; ok
                        EndIf
                     EndIf
                     ;
                     ; text change
                     *this\text\caret\word = GetWord( *this\LineFocused( )\text\string, *this\LineFocused( )\text\len, *this\text\caret\pos[1]-*this\LineFocused( )\text\pos )
                     DoEvents( *this, #__event_Change, *this\LineFocused( )\lindex, *this\LineFocused( ))
                     
                     ;                      If *this\edit_caret_1( ) > *this\edit_caret_2( )
                     ;                         *this\edit_caret_1( ) = *this\edit_caret_2( )
                     ;                      EndIf
                     ;                      If keyboard( )\key = #PB_Shortcut_Back
                     ;                         If Not *this\text\edit[2]\len
                     ;                            *this\edit_caret_1( ) - 1
                     ;                         EndIf
                     ;                      Else
                     ;                         If *this\text\edit\string
                     ;                            *this\edit_caret_1( ) + Len( *this\text\edit\string )
                     ;                            *this\text\edit\string = ""
                     ;                         EndIf
                     ;                      EndIf
                     ;                      *this\edit_caret_2( ) = *this\edit_caret_1( )
                     
                     edit_sel_string_( *this, *this\LineFocused( ) )
                     edit_sel_text_( *this, *this\LineFocused( ) )
                  EndIf
               EndIf
               
               ; Draw back color
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back )
               
               ; Draw margin back color
               If *this\MarginLine( )\width > 0
                  If *this\TextChange( ) Or *this\ResizeChange( )
                     *this\MarginLine( )\x      = *this\inner_x( )
                     *this\MarginLine( )\y      = *this\inner_y( )
                     *this\MarginLine( )\height = *this\inner_height( )
                  EndIf
                  
                  ; Draw margin
                  draw_mode_alpha_( #PB_2DDrawing_Default ); | #PB_2DDrawing_AlphaBlend )
                  draw_box_( *this\MarginLine( )\x, *this\MarginLine( )\y, *this\MarginLine( )\width, *this\MarginLine( )\height, *this\MarginLine( )\color\back )
               EndIf
               
               ; Draw Lines text
               If *this\countitems
                  *this\RowFirstVisible( ) = 0
                  *this\RowLastVisible( )  = 0
                  
                  ;\\
                  Draw_EditorItems( *this, *this\__lines( ) )
               EndIf
               
               ; Draw caret
               ;If *this\text\editable 
               If *this\focus = 2
                  ; If *this\edit_caret_0( ) >= 0
                  draw_mode_( #PB_2DDrawing_XOr )
                  draw_box_( *this\inner_x( ) + *this\text\caret\x + *this\scroll_x( ), *this\inner_y( ) + *this\text\caret\y + *this\scroll_y( ), *this\text\caret\width, *this\text\caret\height, $FFFFFFFF )
                  ; EndIf
               EndIf
               ;EndIf
               
               ; Draw frames
               If *this\notify
                  draw_mode_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, $FF0000FF )
                  If *this\round : draw_roundbox_( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), *this\frame_height( ) + 2, *this\round, *this\round, $FF0000FF ) : EndIf  ; Сглаживание краев ) ))
               ElseIf *this\bs
                  draw_mode_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame[*this\ColorState( )] )
                  If *this\round : draw_roundbox_( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), *this\frame_height( ) + 2, *this\round, *this\round, *this\color\front[*this\ColorState( )] ) : EndIf  ; Сглаживание краев ) ))
               EndIf
               
               If *this\TextChange( ) : *this\TextChange( ) = 0 : EndIf
               If *this\WidgetChange( ) : *this\WidgetChange( ) = 0 : EndIf
            EndWith
         EndIf
         
      EndProcedure
      
      Procedure   Draw_ListIcon( *this._s_WIDGET )
         Protected state.b, X.l, Y.l, scroll_x, scroll_y
         
         If Not *this\hide
            If *this\WidgetChange( ) Or *this\ResizeChange( )
               ForEach *this\columns( )
                  Update_DrawRows( *this, *this\__rows( ), *this\WidgetChange( ) )
               Next
               
               ;\\
               bar_area_update( *this )
               
               ;\\ reset draw list
               ClearList( *this\RowVisibleList( ))
               *this\RowFirstVisible( ) = 0
               *this\RowLastVisible( )  = 0
               
               ForEach *this\columns( )
                  Update_DrawVisibleRows( *this, *this\__rows( ) )
               Next
               
               *this\WidgetChange( ) = 0
            EndIf
            
            ;\\ Draw background
            If *this\AlphaState( )
               draw_mode_alpha_( #PB_2DDrawing_Default )
               draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back);[*this\ColorState( )] )
            EndIf
            
            ;\\ Draw background img
            If *this\picture\imageID
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *this\picture\imageID, *this\picture\x, *this\picture\y, *this\color\ialpha )
            EndIf
            
            Protected sublevelwidth = (*this\picturesize+*this\row\sublevelpos+*this\MarginLine( )\width)
            ;\\
            ForEach *this\columns( )
               Y                           = *this\frame_y( ) + *this\fs + *this\columns( )\y
               X                           = *this\frame_x( ) + *this\fs + *this\columns( )\x + *this\scroll_x( ) 
               X                           + sublevelwidth
               ;
               *this\columns( )\text\height = *this\text\height
               *this\columns( )\text\y      = (*this\columns( )\height - *this\columns( )\text\height) / 2
               *this\columns( )\text\x      = *this\padding\x
               
               ;\\
               Draw_TreeRows( *this, *this\RowVisibleList( ) )
               
               ;\\ Draw selector back
               If *this\color\back
                  draw_mode_alpha_( #PB_2DDrawing_Default )
                  If ListIndex( *this\columns( ) ) = 0
                     draw_roundbox_( X - sublevelwidth, Y, *this\columns( )\width + sublevelwidth, *this\columns( )\height, *this\round, *this\round, *this\color\frame )
                  Else
                     draw_roundbox_( X, Y, *this\columns( )\width, *this\columns( )\height, *this\round, *this\round, *this\color\frame )
                  EndIf
               EndIf
               
               ;\\ Draw items img
               If *this\columns( )\picture\imageID
                  draw_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawAlphaImage( *this\columns( )\picture\imageID, X + *this\columns( )\picture\x, Y + *this\columns( )\picture\y, *this\color\ialpha )
               EndIf
               
               ;\\ Draw items text
               If *this\columns( )\text\string.s
                  draw_mode_( #PB_2DDrawing_Transparent )
                  DrawRotatedText( X + *this\columns( )\text\x, Y + *this\columns( )\text\y, *this\columns( )\text\string.s, *this\text\rotate, *this\color\front )
               EndIf
               
               If *this\mode\GridLines
                  If ListIndex( *this\columns( ) ) = 0
                     draw_box_( X, *this\inner_y( ), *this\mode\GridLines, *this\scroll_height( ), *this\LIneColor )
                  EndIf
                  draw_box_( X + *this\columns( )\width - 1, *this\inner_y( ), *this\mode\GridLines, *this\scroll_height( ), *this\LIneColor )
               EndIf
            Next
            
            ;             ;\\ horizontal lines
            ;             draw_mode_alpha_( #PB_2DDrawing_Default )
            ;             X = *this\frame_x( ) + *this\fs + *this\scroll_x( ) ;+ *this\row\sublevelpos + *this\MarginLine( )\width
            ;             ForEach *this\columns( )
            ;                If ListIndex( *this\columns( )) = 0
            ;                   ;; draw_box_( x + *this\columns( )\x, *this\frame_y( ), *this\mode\GridLines, *this\columns( )\height + *this\fs, *this\LIneColor )
            ;                  ; draw_box_( X + *this\columns( )\x, *this\frame_y( ), *this\mode\GridLines, *this\frame_height( ), *this\LIneColor )
            ;                EndIf
            ;                ;draw_box_( X + *this\columns( )\x + *this\columns( )\width - 1, *this\frame_y( ), *this\mode\GridLines, *this\frame_height( ), *this\LIneColor )
            ;                draw_box_( X + *this\columns( )\x + *this\columns( )\width - 1, *this\frame_y( ), *this\mode\GridLines, *this\frame_height( ), *this\LIneColor )
            ;             Next
         EndIf
         
      EndProcedure
      
      Procedure   Draw_Button( *this._s_WIDGET )
         Protected X, Y
         
         With *this
            Protected state
            If *this\type = #__type_Button 
               state = *this\ColorState( )
               If *this\togglebox And *this\togglebox\checked
                  state = #__s_2
               EndIf
            EndIf
            
            ; update text
            If *this\WidgetChange( ) Or *this\ResizeChange( )
               Update_DrawText( *this, *this\TextChange( ) )
            EndIf
            
            ;             ;\\
            If *this\picture\change
               If *this\text\string = ""
                  ;                   *this\scroll_x( ) = 0
                  ;                   *this\scroll_y( ) = 0
                  ;                   
                  ;                   change_align_image( *this )
                  
                  
                  ; make horizontal scroll x
                  make_scrollarea_x( *this, *this\scroll_width( ), *this\picture\align )
                  
                  ; make vertical scroll y
                  make_scrollarea_y( *this, *this\scroll_height( ), *this\picture\align )
                  
               Else
                  ;*this\picture\x = *this\padding\x
                  ;*this\picture\y = *this\padding\y
                  change_align_horizontal( *this\picture, *this\scroll_width( ), *this\picture\width, 0, *this\picture\align, *this\padding\y )
                  change_align_vertical( *this\picture, *this\scroll_height( ), *this\picture\height, 0, *this\picture\align, *this\padding\y )
               EndIf
               
               If test_align = 1
                  Debug "button "+*this\picture\align\left +" "+ *this\text\align\left +"  "+ *this\picture\align\top +" "+ *this\text\align\top +"  "+ *this\picture\align\right +" "+ *this\text\align\right +"  "+ *this\picture\align\bottom +" "+ *this\text\align\bottom +" "+ *this\text\string
               EndIf
            EndIf
            
            ;\\ origin position
            X = *this\inner_x( ) + *this\scroll_x( )
            Y = *this\inner_y( ) + *this\scroll_y( )
            
            ;\\ draw background
            If *this\picture[#__image_BackGround]\imageID
               draw_image_( *this, X, Y, [#__image_BackGround] )
            Else
               If *this\color\back <> - 1
                  If *this\color\fore <> - 1
                     draw_mode_alpha_( #PB_2DDrawing_Gradient )
                     __draw_gradient( *this\text\vertical, *this, 0,0, state, 0, 0, [#__c_frame] )
                  Else
                     draw_mode_alpha_( #PB_2DDrawing_Default )
                     __draw_box( *this, color\back, [#__c_frame])
                  EndIf
               EndIf
            EndIf
            
            ;\\ draw text items
            If *this\text\string.s
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               ForEach *this\__lines( )
                  DrawRotatedText( X + *this\__lines( )\x + *this\__lines( )\text\x, Y + *this\__lines( )\y + *this\__lines( )\text\y,
                                   *this\__lines( )\text\String.s, *this\text\rotate, *this\color\front[state] ) ; *this\__lines( )\color\font )
                  
                  If *this\mode\Lines
                     Protected i, count = Bool( func::GetFontSize( GetFontID( *this\__lines( ) ) ) > 13 )
                     For i = 0 To count
                        Line( X + *this\__lines( )\x + *this\__lines( )\text\x, Y + *this\__lines( )\y + *this\__lines( )\text\y + *this\__lines( )\text\height - count + i - 1, *this\__lines( )\text\width, 1, *this\color\front[state] )
                     Next
                  EndIf
               Next
            EndIf
            
            ;\\ draw box
            Protected _box_type_, _box_x_, _box_y_
            ; update widget ( option&checkbox ) position
            If *this\togglebox And *this\togglebox\width And *this\WidgetChange( ) 
               *this\togglebox\y = *this\inner_y( ) + ( *this\inner_height( ) - *this\togglebox\height ) / 2
               
               If *this\text\align\right
                  *this\togglebox\x = *this\inner_x( ) + ( *this\inner_width( ) - *this\togglebox\height - 3 )
               ElseIf Not *this\text\align\left
                  *this\togglebox\x = *this\inner_x( ) + ( *this\inner_width( ) - *this\togglebox\width ) / 2
                  
                  If Not *this\text\align\top
                     If *this\text\rotate = 0
                        *this\togglebox\y = *this\inner_y( ) + *this\scroll_y( ) - *this\togglebox\height
                     Else
                        *this\togglebox\y = *this\inner_y( ) + *this\scroll_y( ) + *this\scroll_height( )
                     EndIf
                  EndIf
               Else
                  *this\togglebox\x = *this\inner_x( ) + 3
               EndIf
            EndIf
            
            
            If #__type_Option = *this\type
               _box_type_ = 1
            EndIf
            If #__type_CheckBox = *this\type
               _box_type_ = 3
            EndIf
            If _box_type_
               __draw_checkbox( _box_type_, *this\togglebox, 0,0, *this\togglebox\round )
            EndIf
            
            ;\\ draw img
            If *this\picture\imageID 
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *this\picture\imageID, X + *this\picture\x, Y + *this\picture\y, *this\color\ialpha )
            EndIf
            
            ;\\ Draw frames
            If *this\fs
               draw_mode_( #PB_2DDrawing_Outlined )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ),
                               *this\round, *this\round, *this\color\frame[state] & $FFFFFF | *this\AlphaState24( ) )
            EndIf
            
            ;\\ draw frame defaul focus widget
            If *this\type = #__type_Button
               If *this\deffocus 
                  draw_mode_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ),
                                  *this\round, *this\round, *this\color\frame[1] & $FFFFFF | *this\AlphaState24( ) )
                  If *this\round
                     draw_roundbox_( *this\inner_x( ) - 1, *this\inner_y( ), *this\inner_width( ) + 2, *this\inner_height( ),
                                     *this\round, *this\round, *this\color\frame[1] & $FFFFFF | *this\AlphaState24( ) )
                  EndIf
                  draw_roundbox_( *this\screen_x( ), *this\screen_y( ), *this\screen_width( ), *this\screen_height( ),
                                  *this\round, *this\round, *this\color\frame[1] & $FFFFFF | *this\AlphaState24( ) )
               EndIf
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure   Draw_ComboBox( *this._s_WIDGET )
         
         Protected state = *this\ColorState( )
         If state = #__s_3
            state = 0
         EndIf
         
            
         ; gradient draw
         draw_mode_alpha_( #PB_2DDrawing_Gradient )
         If *this\stringbar
            __draw_gradient( 0, *this\combobutton, 0,0, state )
         Else
            __draw_gradient( 0, *this, 0,0, state, 0,0, [#__c_frame] )
         EndIf
         
         ;
         Draw_Content( *this, state )
         
         ; arrow draw
         draw_mode_alpha_( #PB_2DDrawing_Default )
         Draw_Arrow( *this\combobutton\arrow\direction,
                     *this\combobutton\x + ( *this\combobutton\width - *this\combobutton\arrow\size * 2 ) - *this\combobutton\arrow\size / 2,
                     *this\combobutton\y + ( *this\combobutton\height - *this\combobutton\arrow\size ) / 2,
                     *this\combobutton\arrow\size, 
                     *this\combobutton\arrow\type, 0,
                     *this\combobutton\color\front[state] & $FFFFFF | *this\combobutton\AlphaState24( ))
         
         ; frame draw
         If *this\fs
            draw_mode_( #PB_2DDrawing_Outlined )
            draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame[state] )
         EndIf
      EndProcedure
      
      Procedure   Draw_Container( *this._s_WIDGET )
         Protected i,X,Y
         
         With *this
            If *this\fs
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               If constants::BinaryFlag( *this\flag, #__flag_BorderSingle ) Or 
                  constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                  draw_roundbox_(*this\frame_x( ), *this\frame_y( ), *this\round*2, *this\round*2, *this\round, *this\round, $FFAAAAAA )
                  draw_roundbox_(*this\frame_x( )+*this\frame_width( )-*this\round*2, *this\frame_y( ), *this\round*2, *this\round*2, *this\round, *this\round, $FFFFFFFF )
                  draw_roundbox_(*this\frame_x( ), *this\frame_y( )+*this\frame_height( )-*this\round*2, *this\round*2, *this\round*2, *this\round, *this\round, $FFAAAAAA )
                  draw_roundbox_(*this\frame_x( )+*this\frame_width( )-*this\round*2, *this\frame_y( )+*this\frame_height( )-*this\round*2, *this\round*2, *this\round*2, *this\round, *this\round, $FFFFFFFF )
               EndIf
               If constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                  draw_roundbox_(*this\frame_x( )+1, *this\frame_y( )+1, *this\round*2, *this\round*2, *this\round, *this\round, $FFAAAAAA )
                  draw_roundbox_(*this\frame_x( )+1+*this\frame_width( )-*this\round*2, *this\frame_y( )+1, *this\round*2, *this\round*2, *this\round, *this\round, $FFFFFFFF )
                  draw_roundbox_(*this\frame_x( )+1, *this\frame_y( )-1+*this\frame_height( )-*this\round*2, *this\round*2, *this\round*2, *this\round, *this\round, $FFAAAAAA )
                  draw_roundbox_(*this\frame_x( )-1+*this\frame_width( )-*this\round*2, *this\frame_y( )-1+*this\frame_height( )-*this\round*2, *this\round*2, *this\round*2, *this\round, *this\round, $FFFFFFFF )
               EndIf
               
               ;                If *this\type <> #__type_panel And *this\type <> #__type_Frame
               ;                   draw_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                   For i = 0 To *this\fs - 1
               ;                      draw_roundbox_( *this\frame_x( ) + i, *this\frame_y( ) + i, *this\frame_width( ) - i * 2, *this\frame_height( ) - i * 2, *this\round, *this\round, *this\color\frame[*this\ColorState( )] )
               ;                      If *this\round
               ;                         draw_roundbox_( *this\frame_x( ) + i, *this\frame_y( ) + i + 1, *this\frame_width( ) - i * 2, *this\frame_height( ) - i * 2 - 2, *this\round, *this\round, *this\color\frame[*this\ColorState( )] )
               ;                      EndIf
               ;                   Next
               ;                EndIf
            EndIf
            
            
            
            ;\\ backcolor
            If *this\color\back <> - 1
               draw_mode_alpha_( #PB_2DDrawing_Default )
               ;                If *this\fs
               draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back);[*this\ColorState( )] )
                                                                                                                                                           ;                Else
                                                                                                                                                           ;                   draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back);[*this\ColorState( )] )
                                                                                                                                                           ;                EndIf
            EndIf
            
            ;
            If *this\picture\change
               ; change_align_image( *this  )
               
               
               ; make horizontal scroll x
               make_scrollarea_x( *this, *this\scroll_width( ), *this\picture\align )
               
               ; make vertical scroll y
               make_scrollarea_y( *this, *this\scroll_height( ), *this\picture\align )
            EndIf
            
            
            ;\\ origin position
            X = *this\inner_x( ) + *this\scroll_x( )
            Y = *this\inner_y( ) + *this\scroll_y( )
            
            ;\\
            If *this\picture\imageID Or
               *this\picture[#__image_BackGround]\imageID
               
               draw_mode_alpha_( #PB_2DDrawing_Default )
            EndIf
            
            ;\\ background img draw
            If *this\picture[#__image_BackGround]\imageID
               draw_image_( *this, *this\inner_x( ), *this\inner_y( ), [#__image_BackGround] )
            EndIf
            
            ;\\ scroll img draw
            If *this\picture\imageID 
               DrawAlphaImage( *this\picture\imageID, X + *this\picture\x, Y + *this\picture\y, *this\color\ialpha )
            EndIf
            
            ;\\
            If *this\text\string
               draw_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawText( X + *this\text\x, Y + *this\text\y, *this\text\string, *this\color\front[*this\ColorState( )] & $FFFFFF | *this\AlphaState24( ) )
            EndIf
            
            
            If *this\fs
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                Debug " - "+ *this\inner_x( ) +" "+ *this\inner_y( ) +" "+ *this\inner_width( ) +" "+ *this\inner_height( ) ;+ 
               ;                Debug "   - "+ *this\frame_x( ) +" "+ *this\frame_y( ) +" "+ *this\frame_width( ) +" "+ *this\frame_height( )
               
               ;draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame )
               ;               If *this\fs[1] Or
               ;                  *this\fs[2] Or
               ;                  *this\fs[3] Or
               ;                  *this\fs[4] 
               ;                  ;
               ;                 If *this\inner_width( ) And 
               ;                    *this\inner_height( ) 
               ;                   draw_roundbox_( *this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, *this\color\frame )
               ;                 EndIf
               ;               EndIf
               
               If constants::BinaryFlag( *this\flag, #__flag_BorderFlat )
                  ;                   If *this\inner_width( ) And 
                  ;                      *this\inner_height( ) 
                  ;                      ;If *this\type <> #__type_Panel
                  ;                         draw_roundbox_( *this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3], *this\frame_height( )-*this\fs[2]-*this\fs[4], *this\round, *this\round, $fff00fff);*this\color\frame )
                  ;                      ;EndIf
                  ;                   EndIf
                  ;                   If *this\type = #__type_Container
                  If Not ( *this\fs[1] Or *this\fs[2] Or *this\fs[3] Or *this\fs[4] )
                     draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame )
                  EndIf
                  ;                   EndIf
                  
               ElseIf constants::BinaryFlag( *this\flag, #__flag_BorderSingle ) Or
                      constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                  Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FFAAAAAA)
                  Line(*this\frame_x( ), *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FFAAAAAA)
                  Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+*this\frame_height( )-1, *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FFFFFFFF)
                  Line(*this\frame_x( )+*this\frame_width( )-1, *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FFFFFFFF)
                  ;                 draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                  ;                 draw_roundbox_(*this\inner_x( ) - 2, *this\inner_y( ) - 2, *this\inner_width( ) + 3, *this\inner_height( ) + 3, *this\round, *this\round, $FFFFFFFF )
                  
               ElseIf constants::BinaryFlag( *this\flag, #__flag_BorderRaised )
                  Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FFFFFFFF)
                  Line(*this\frame_x( ), *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FFFFFFFF)
                  Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\frame_height( )-1, *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FF838383)
                  Line(*this\frame_x( )+*this\frame_width( )-1, *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FF838383)
                  
                  Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2]+1, *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FFFFFFFF)
                  Line(*this\frame_x( )+1, *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FFFFFFFF)
                  Line(*this\frame_x( )+*this\fs[1]+1, *this\frame_y( )+*this\frame_height( )-2, *this\frame_width( )-*this\fs[1]-*this\fs[3]-2, 1, $FFAAAAAA)
                  Line(*this\frame_x( )+*this\frame_width( )-2, *this\frame_y( )+*this\fs[2]+1, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-2, $FFAAAAAA)
               EndIf
               
               If constants::BinaryFlag( *this\flag, #__flag_BorderDouble )
                  ;                 Line(*this\frame_x( )+*this\fs[1], *this\frame_y( )+*this\fs[2]+1, *this\frame_width( )-*this\fs[1]-*this\fs[3], 1, $FF838383)
                  ;                 Line(*this\frame_x( )+*this\fs[1]+1, *this\frame_y( )+*this\fs[2], 1, *this\frame_height( )-*this\fs[2]-*this\fs[4], $FF838383)
                  ;                 Line(*this\frame_x( )+*this\fs[1]+1, *this\frame_y( )+*this\frame_height( )-2, *this\frame_width( )-*this\fs[1]-*this\fs[3]-2, 1, $FFE7E7E7)
                  ;                 Line(*this\frame_x( )+*this\frame_width( )-2, *this\frame_y( )+*this\fs[2]+1, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-2, $FFE7E7E7)
                  
                  Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+1+*this\fs[2], *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FF838383)
                  Line(*this\frame_x( )+1, *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FF838383)
                  Line(*this\frame_x( )+*this\fs[1]+*this\round, *this\frame_y( )+*this\frame_height( )-2, *this\frame_width( )-*this\fs[1]-*this\fs[3]-*this\round*2, 1, $FFE7E7E7)
                  Line(*this\frame_x( )+*this\frame_width( )-2, *this\frame_y( )+*this\fs[2]+*this\round, 1, *this\frame_height( )-*this\fs[2]-*this\fs[4]-*this\round*2, $FFE7E7E7)
               EndIf
               
            EndIf
            
            
            
         EndWith
      EndProcedure
      
      Procedure.b Draw( *this._s_WIDGET )
         Protected arrow_right
         
         With *this
            ;
            If *this\align And 
               *this\align\update = 1
               *this\align\update = 0
               Resize(*this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore)
            EndIf
            
            ;\\ draw belowe drawing
            If *this\hide
               
               If *this\row
                  If *this\TextChange( )
                     If *this\text\string 
                        If Not ( *this\text\width And *this\text\height )
                           draw_font( *this, GetFontID( *this ) )
                           Update_DrawText( *this, 1 )
                           make_scrollarea_x( *this, *this\frame_width( ), *this\text\align )
                           make_scrollarea_y( *this, *this\frame_height( ), *this\text\align )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
            Else
               ; Debug "DRAW( "+*this\class +" "+ *this\enter
               ;
               ;\\ draw clip out transform widgets frame
               If *this\root\drawmode & 1<<2
                  If ( *this\anchors And Not *this\anchors\mode & #__a_zoom ) Or test_clip
                     ;If Not ( *this\draw_width( ) > 0 And *this\draw_height( ) > 0 )
                     UnclipOutput( )
                     draw_mode_alpha_( #PB_2DDrawing_Outlined )
                     draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, $ff00ffff )
                     draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, $ff00ffff )
                     ;EndIf
                  EndIf
               EndIf
               
               ;\\
               If *this\draw_width( ) > 0 And
                  *this\draw_height( ) > 0
                  
                  If *this\root\drawmode & 1<<2
                     ;\\ init drawing font
                     draw_font( *this, GetFontID( *this\root ) )
                     ;
                     CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
                        If CurrentFontID( )
                           DrawingFont( CurrentFontID( ) )
                        EndIf
                     CompilerEndIf
                     ;
                     ;\\ limit drawing boundaries
                     clip_output_( *this, [#__c_draw] )
                     ;
                     ;\\ draw widgets
                     Select *this\type
                        Case #__type_Window     
                           Draw_BackGround( *this, 0 )
                           ; Draw_Content( *this, *this\ColorState( ))
                           Draw_Frames( *this )
            
                           
                        Case #__type_Root       : Draw_Container( *this )
                        Case #__type_MDI        : Draw_Container( *this )
                        Case #__type_Container  : Draw_Container( *this )
                        Case #__type_ScrollArea : Draw_Container( *this )
                        Case #__type_image      : Draw_Container( *this )
                        Case #__type_Panel      : Draw_Container( *this )
                           
                        Case #__type_ComboBox   : Draw_ComboBox( *this )
                        Case #__type_ButtonImage
                           Draw_BackGround( *this, *this\ColorState( ))
                           Draw_Content( *this, *this\ColorState( ))
                           Draw_Frames( *this )
                           
                           
                           ;Case #__type_String : Draw_Button( *this )
                        Case #__type_String     : Draw_Editor( *this )
                        Case #__type_Editor     : Draw_Editor( *this )
                           
                        Case #__type_Tree       : Draw_Tree( *this )
                        Case #__type_Properties : Draw_Tree( *this )
                        Case #__type_ListView   : Draw_Tree( *this )
                        Case #__type_ListIcon   : Draw_ListIcon( *this )
                           
                        Case #__type_Text       : Draw_Button( *this )
                        Case #__type_Button     : Draw_Button( *this )
                        Case #__type_Option     : Draw_Button( *this )
                        Case #__type_CheckBox   : Draw_Button( *this )
                        Case #__type_HyperLink  : Draw_Button( *this )
                           
                        Case #__type_Scroll     : bar_draw_scroll( *this )
                        Case #__type_Track      : bar_draw_track( *this )
                        Case #__type_Splitter   : bar_draw_splitter( *this )
                        Case #__type_Progress   : bar_draw_progress( *this )
                        Case #__type_Spin       : bar_draw_spin( *this )
                           
                           ; Draw frames
                        Case #__type_Frame
                           ;                         If *this\fs
                           ;                            
                           ;                            draw_mode_alpha_( #PB_2DDrawing_Outlined )
                           ;                            If *this\flag = #PB_Frame_Single
                           ;                               draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                           ;                               
                           ;                               draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ) + 1, *this\inner_height( ) + 1, *this\round, *this\round, $FFF5F5F5 )
                           ;                            ElseIf *this\flag = #PB_Frame_Double
                           ;                               draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                           ;                               
                           ;                               draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ) + 1, *this\inner_height( ) + 1, *this\round, *this\round, $FFF5F5F5 )
                           ;                               
                           ;                               draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, $FFAFAFAF )
                           ;                            ElseIf *this\flag = #PB_Frame_Flat
                           ;                               draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                           ;                            Else
                           ;                               draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, *this\color\frame )
                           ;                            EndIf
                           ;                            
                           ;                            draw_mode_alpha_( #PB_2DDrawing_Default )
                           ;                            draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back )
                           ;                            
                           ;                         EndIf
                           Draw_Container( *this )
                           If *this\text\string
                              ;
                              draw_mode_alpha_( #PB_2DDrawing_Default )
                              draw_roundbox_(*this\inner_x( ) + *this\scroll_x( ) + *this\text\x - 6,
                                             *this\inner_y( ) + *this\scroll_y( ) + *this\text\y + 1, *this\text\width + 12, *this\text\height, *this\round, *this\round, $BEEFEFEF )
                              
                              ;
                              draw_mode_alpha_( #PB_2DDrawing_Outlined )
                              draw_roundbox_(*this\inner_x( ) + *this\scroll_x( ) + *this\text\x - 6,
                                             *this\inner_y( ) + *this\scroll_y( ) + *this\text\y + 1, *this\text\width + 12, *this\text\height, *this\round, *this\round, *this\color\frame )
                              
                              ;
                              draw_mode_alpha_( #PB_2DDrawing_Transparent )
                              DrawText( *this\inner_x( ) + *this\scroll_x( ) + *this\text\x,
                                        *this\inner_y( ) + *this\scroll_y( ) + *this\text\y,
                                        *this\text\string, *this\color\front & $FFFFFF | *this\AlphaState24( ) )
                           EndIf
                           
                     EndSelect
                     
                     If *this\type = #__type_ToolBar Or
                        *this\type = #__type_PopupBar Or
                        *this\type = #__type_MenuBar Or
                        *this\type = #__type_TabBar
                        ;
                        bar_draw_tab( *this )
                     EndIf
                     
                     ;\\
                     ;               If *this\tabbar And
                     ;                  *this\tabbar\countitems
                     ;                 bar_draw_tab( *this\tabbar )
                     ;                 ; clip_output_( *this, [#__c_draw] )
                     ;               EndIf
                     If *this\tabbar And
                        *this\tabbar\countitems
                        ;
                        If *this\tabbar\type = #__type_ToolBar Or
                           *this\tabbar\type = #__type_PopupBar Or
                           *this\tabbar\type = #__type_MenuBar Or
                           *this\tabbar\type = #__type_TabBar
                           ;
                           bar_draw_tab( *this\tabbar )
                        Else 
                           Draw( *this\tabbar ) ; clip_output_( *this, [#__c_draw] )
                        EndIf
                     EndIf
                     
                     If *this\menubar And
                        *this\menubar\countitems
                        ;
                        If *this\menubar\type = #__type_ToolBar Or
                           *this\menubar\type = #__type_PopupBar Or
                           *this\menubar\type = #__type_MenuBar Or
                           *this\menubar\type = #__type_TabBar
                           ;
                           bar_draw_tab( *this\menubar )
                        Else 
                           Draw( *this\menubar ) ; clip_output_( *this, [#__c_draw] )
                        EndIf
                     EndIf
                     
                     ;\\
                     If *this\stringbar
                        Draw( *this\stringbar )
                        clip_output_( *this, [#__c_draw] )
                     EndIf
                     
                     ;\\ draw area scrollbars
                     If *this\scroll And ( *this\scroll\v Or *this\scroll\h )
                        bar_area_draw( *this )
                        ; clip_output_( *this, [#__c_draw] )
                     EndIf
                     
                     ;\\ draw disable state
                     If *this\disable
                        draw_mode_alpha_( #PB_2DDrawing_Default )
                        draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $AAE4E4E4 )
                     EndIf
                     
                     ;\\ draw focus state TEMP
                     If test_focus_draw = 2
                        If *this\focus = 2 And Not (is_window_(*this) And Not *this\parent )
                           UnclipOutput( )
                           draw_mode_alpha_( #PB_2DDrawing_Outlined )
                           draw_box_( *this\frame_x( )+1, *this\frame_y( )+1, *this\frame_width( )-2, *this\frame_height( )-2, $fffff0000 )
                           draw_box_( *this\frame_x( )+2, *this\frame_y( )+2, *this\frame_width( )-4, *this\frame_height( )-4, $fffff0000 )
                           draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $fffff0000 )
                           draw_box_( *this\frame_x( )-1, *this\frame_y( )-1, *this\frame_width( )+2, *this\frame_height( )+2, $fffff0000 )
                           draw_box_( *this\frame_x( )-2, *this\frame_y( )-2, *this\frame_width( )+4, *this\frame_height( )+4, $fffff0000 )
                           clip_output_( *this )
                        EndIf
                     EndIf
                  EndIf
                  
                  If *this\root\drawmode & 1<<1 
                  EndIf
                  ;
                  ; post event re draw
                  If *this\binddraw
                     If __gui\event\queuesmask 
                        If *this\root\drawmode & 1<<1
                           SaveVectorState( )
                           TranslateCoordinates( *this\x[#__c_frame], *this\y[#__c_frame] )
                           
                           CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                              VectorSourceColor( GetSysColor_( #COLOR_BTNFACE ) & $FFFFFF | 255 << 24 )
                           CompilerEndIf
                           
                           ; FillVectorOutput()
                        EndIf
                        Post( *this, #__event_Draw )
                        If *this\root\drawmode & 1<<1
                           RestoreVectorState( )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;
                  If *this\root\drawmode & 1<<2
                     ;\\
                     If test_focus_draw = 1
                        If *this\focus = 2
                           draw_mode_(#PB_2DDrawing_Outlined)
                           If Not *this\haschildren 
                              If *this = GetActive( )
                                 draw_focus_frame( *this, $ff0000ff) ; $ffff0000
                              Else
                                 draw_focus_frame( *this, $ff00ff00)
                              EndIf
                           EndIf
                        ElseIf *this\focus = 3
                           draw_mode_(#PB_2DDrawing_Outlined)
                           draw_focus_frame( *this, $FFBFBFC3)
                        EndIf
                     EndIf
                     
                     
                     If *this\anchors
                        If *this\anchors\group\show
                           a_draw( *this, *this\anchors\state )
                        EndIf
                     EndIf  
                     
                     ;\\
                     If *this\enter
                        ;\\ draw entered anchors
                        If Not *this\haschildren 
                           If *this\anchors And *this\anchors\mode
                              a_draw( *this, *this\anchors\state )
                           EndIf
                        EndIf
                        
                        ;\\ draw drag & drop
                        If Not *this\disable
                           If Not mouse( )\selector  
                              DropDraw( *this )
                           EndIf
                        EndIf
                     EndIf
                     ;
                     
                     If test_clip 
                        If *this\parent
                           draw_mode_alpha_( #PB_2DDrawing_Outlined )
                           ;   draw_box_( *this\parent\draw_x( ), *this\parent\draw_y( ), *this\parent\draw_width( ), *this\parent\draw_height( ), $ff000000 )
                           draw_box_( *this\draw_x( ), *this\draw_y( ), *this\draw_width( ), *this\draw_height( ), $ff000000 )
                        EndIf
                     EndIf
                  EndIf
               EndIf   
            EndIf
            
            
            ;\\ draw scroll area frames
            If test_draw_area
               draw_mode_alpha_( #PB_2DDrawing_Outlined )
               
               ;\\ Scroll area coordinate
               draw_box_( *this\inner_x( ) + *this\scroll_x( ), *this\inner_y( ) + *this\scroll_y( ), *this\scroll_width( ), *this\scroll_height( ), $FF0000FF )
               draw_box_( *this\inner_x( ) + *this\scroll_x( ) + *this\padding\x, *this\inner_y( ) + *this\scroll_y( ) + *this\padding\y, *this\scroll_width( ) - *this\padding\x * 2, *this\scroll_height( ) - *this\padding\y * 2, $FFFF0000 )
               
               If *this\scroll\v And *this\scroll\h
                  ;\\ page coordinate
                  draw_box_( *this\scroll\h\frame_x( ), *this\scroll\v\frame_y( ), *this\scroll\h\bar\page\len, *this\scroll\v\bar\page\len, $FF00FF00 )
               EndIf
            EndIf
            
            ;\\ reset values
            If *this\WidgetChange( ) <> 0
               If Not *this\hide
                  *this\WidgetChange( ) = 0
               EndIf
            EndIf
            If *this\TextChange( ) <> 0
               *this\TextChange( ) = 0
            EndIf
            
            If *this\picture\change <> 0
               *this\picture\change = 0
            EndIf
            
            If *this\resize\x <> 0
               *this\resize\x = 0
            EndIf
            If *this\resize\y <> 0
               *this\resize\y = 0
            EndIf
            If *this\resize\width <> 0
               *this\resize\width = 0
            EndIf
            If *this\resize\height <> 0
               *this\resize\height = 0
            EndIf
            
            If *this\ResizeChange( ) <> 0
               *this\ResizeChange( ) = 0
            EndIf
         EndWith
      EndProcedure
      
      Procedure   Drawing( )
         Protected *root._s_root = __gui\DrawingRoot
         
         ;          ClearDebugOutput( )
         ;          ;\\
         If *root
            ; ;             Define pb_color.l = GetWindowColor( *root\canvas\window ) 
            ; ;             If Not pb_color = - 1 
            ; ;                If *root\color\back <> pb_color
            ; ;                   *root\color\back = pb_color
            ; ;                EndIf
            ; ;             EndIf
            ;
            ; Debug *root\color\back&$ffffff
            ;If *root\color\back & $ffffff = - 1 ; test example anchor(b5)
            If *root\drawmode & 1<<1 And Not *root\drawmode & 1<<2
               VectorSourceColor($FFF0F0F0)
               FillVectorOutput( )
            EndIf
            ;\\
            If *root\drawmode & 1<<2
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  ; good transparent canvas
                  FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ))
               CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
                  ; Debug ""+IsWindow( *root\canvas\window ) +" "+ *root\canvas\window +" "+ MapSize(roots()) +" "+ *root\class
                  If GetWindowColor( *root\canvas\window ) = - 1
                     FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), GetSysColor_(#COLOR_BTNFACE) )
                  Else
                     ; FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), GetWindowColor( *root\canvas\window ) )
                     Box( 0,0, OutputWidth( ), OutputHeight( ), GetWindowColor( *root\canvas\window ))
                  EndIf
               CompilerElse
                  ;               Protected *style.GtkStyle, *color.GdkColor
                  ;               *style = gtk_widget_get_style_(WindowID(*root\canvas\window))
                  ;               *color = *style\bg[0]                       ; 0=#GtkStateNormal
                  ;               FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), RGB(*color\red >> 8, *color\green >> 8, *color\blue >> 8) )
                  FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), $f0 )
               CompilerEndIf
               ; FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), GetWindowColor(*root\canvas\window))
            EndIf
            ;EndIf
            
            ;\\
            Draw( *root )
            
            ;\\
            If Not ( *root\autosize And *root\haschildren = 0 )
               
               ;\\
               If StartEnum( *root )
                  ;
                  If test_focus_draw = 1
                     ;\\ draw active containers frame
                     If GetActive( )
                        If GetActive( )\focus = 2 And 
                           GetActive( )\haschildren 
                           ;
                           If GetActive( )\AfterWidget( ) = widgets( )  
                              clip_output_( GetActive( ), [#__c_draw] )
                              draw_mode_(#PB_2DDrawing_Outlined)
                              draw_focus_frame( GetActive( ), $ff0000ff) ; $ffff0000)
                           EndIf
                        EndIf
                        ;
                        ;\\ draw active parent frame
                        If ActiveWindow( )  
                           If ActiveWindow( )\focus = 2 And 
                              ActiveWindow( )\haschildren And  
                              ActiveWindow( ) <> GetActive( )
                              ;
                              If ActiveWindow( )\AfterWidget( ) = widgets( )  
                                 clip_output_( ActiveWindow( ), [#__c_draw] )
                                 draw_mode_(#PB_2DDrawing_Outlined)
                                 draw_focus_frame( ActiveWindow( ), $ff00ff00)
                              EndIf
                           EndIf
                           ;
                           ;\\ draw active child frame
                           If ActiveGadget( ) And
                              ActiveGadget( )\focus = 2 And 
                              ActiveGadget( )\haschildren And  
                              ActiveGadget( ) <> GetActive( ) 
                              
                              If ActiveGadget( )\AfterWidget( ) = widgets( )  
                                 clip_output_( ActiveGadget( ), [#__c_draw] )
                                 draw_mode_(#PB_2DDrawing_Outlined)
                                 draw_focus_frame( ActiveGadget( ), $ff00ff00)
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;
                  ;\\ draw entered widget anchors
                  If Not MouseButtonPress( )
                     If a_entered( ) And
                        a_entered( )\enter And 
                        a_entered( )\haschildren And
                        a_entered( ) <> a_focused( ) ; Not ( a_anchors( ) And a_focused( ) = a_entered( ) )
                                                     ;
                        If a_entered( )\AfterWidget( ) = widgets( )  
                           clip_output_( a_entered( ), [#__c_draw] )
                           a_draw( a_entered( ), a_entered( )\anchors\state )
                        EndIf
                     EndIf
                  EndIf
                  ;
                  Draw( widgets( ))
                  
                  ; 
                  If test_focus_draw = 1
                     ;\\ draw active containers frame
                     If GetActive( ) 
                        If GetActive( )\focus = 2 And 
                           GetActive( )\haschildren 
                           ;
                           If Not GetActive( )\AfterWidget( ) 
                              If widgets( ) = GetLast( GetActive( ) )
                                 clip_output_( GetActive( ), [#__c_draw] )
                                 draw_mode_(#PB_2DDrawing_Outlined)
                                 draw_focus_frame( GetActive( ), $ff0000ff) ; $ffff0000)
                              EndIf
                           EndIf
                        EndIf
                        ;
                        ;\\ draw active parent frame
                        If ActiveWindow( )  
                           If ActiveWindow( )\focus = 2 And 
                              ActiveWindow( )\haschildren And  
                              ActiveWindow( ) <> GetActive( ) 
                              ;
                              If Not ActiveWindow( )\AfterWidget( ) 
                                 If widgets( ) = GetLast( ActiveWindow( ) )
                                    clip_output_( ActiveWindow( ), [#__c_draw] )
                                    draw_mode_(#PB_2DDrawing_Outlined)
                                    draw_focus_frame( ActiveWindow( ), $ff00ff00)
                                 EndIf
                              EndIf
                           EndIf
                           ; 
                           ;\\ draw active child frame
                           If ActiveGadget( ) And
                              ActiveGadget( )\focus = 2 And 
                              ActiveGadget( )\haschildren And  
                              ActiveGadget( ) <> GetActive( ) 
                              
                              If Not ActiveGadget( )\AfterWidget( ) 
                                 If widgets( ) = GetLast( ActiveGadget( ) )
                                    clip_output_( ActiveGadget( ), [#__c_draw] )
                                    draw_mode_(#PB_2DDrawing_Outlined)
                                    draw_focus_frame( ActiveGadget( ), $ff00ff00)
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  ;
                  ;
                  ;\\ draw entered parent anchors
                  If Not MouseButtonPress( )
                     If a_entered( ) And 
                        a_entered( )\enter And 
                        a_entered( )\haschildren And
                        a_entered( ) <> a_focused( ) ; Not ( a_anchors( ) And a_focused( ) = a_entered( ) )
                        
                        If Not a_entered( )\AfterWidget( ) 
                           If widgets( ) = GetLast( a_entered( ) )
                              ; Debug ""+widgets( )\parent\class +" "+ widgets( )\class +" "+ a_entered( )\class +" ("+ widgets( )\text\string +") "+ IsChild( widgets( ), a_entered( ) )
                              
                              ; If IsChild( widgets( ), a_entered( ) )
                              clip_output_( a_entered( ), [#__c_draw] )
                              a_draw( a_entered( ), a_entered( )\anchors\state )
                              ; EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  
                  ;                       
                  StopEnum( )
               EndIf
               ;
            EndIf
            
            ;
            ;\\ draw anchors (movable & sizable)
            If *root\drawmode & 1<<2
               If a_anchors( ) 
                  ;\\
                  If a_focused( ) And
                     a_focused( )\hide = 0 And
                     a_focused( )\anchors And
                     a_focused( )\anchors\mode And
                     a_focused( )\root = *root
                     
                     ; draw key-focused-widget anchors
                     If a_main( ) 
                        clip_output_( a_main( ), [#__c_idraw] )
                     EndIf
                     ;
                     a_draw( a_focused( ), a_focused( )\anchors\state )
                  EndIf
                  
                  ;\\
                  If a_main( ) And
                     a_main( )\root = *root
                     ;
                     If mouse( )\selector
                        ;\\ draw mouse selector
                        Protected selector_backcolor = mouse( )\selector\backcolor & $FFFFFF | 80 << 24
                        Protected selector_framecolor = mouse( )\selector\framecolor & $FFFFFF | 255 << 24
                        Protected selector_frontcolor = mouse( )\selector\fontcolor & $FFFFFF | 255 << 24
                        
                        ;
                        ;\\ draw selector back
                        If selector_backcolor
                           draw_mode_alpha_( #PB_2DDrawing_Default )
                           draw_box_( mouse( )\selector\x, mouse( )\selector\y, mouse( )\selector\width, mouse( )\selector\height, selector_backcolor )
                        EndIf
                        ;
                        If Not mouse( )\selector\dotted
                           CompilerIf #PB_Compiler_OS <> #PB_OS_MacOS
                              If CurrentFontID( )
                                 DrawingFont( CurrentFontID( ) )
                              EndIf
                           CompilerEndIf
                           Protected selector_text.s = Str( mouse( )\selector\width ) + "x" + Str( mouse( )\selector\height )
                           DrawText( mouse( )\selector\x + (mouse( )\selector\width - TextWidth(selector_text))/2, 
                                     mouse( )\selector\y + (mouse( )\selector\height - TextHeight(selector_text))/2, 
                                     selector_text, selector_frontcolor, selector_backcolor )
                        EndIf
                        ;
                        ;\\ draw selector frame
                        If selector_framecolor
                           If mouse( )\selector\dotted
                              draw_mode_alpha_( #PB_2DDrawing_CustomFilter | #PB_2DDrawing_Outlined )
                              CustomFilterCallback( @Draw_Datted( ))
                           Else
                              draw_mode_alpha_( #PB_2DDrawing_Outlined )
                           EndIf
                           draw_box_( mouse( )\selector\x, mouse( )\selector\y, mouse( )\selector\width, mouse( )\selector\height, selector_framecolor )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            ;         ;\\ draw current-popup-widget
            ;         If Popup( )
            ;           If Popup( )\root = *root
            ;             ;Debug "popup - draw " + *root\class
            ;             
            ;             Draw( Popup( ) )
            ;           EndIf
            ;         EndIf
            
            ;\\ TEMP
            If *root\drawmode & 1<<2
               ;                If mouse( )\selector
               ;                   DrawingMode(#PB_2DDrawing_Outlined)
               ;                   Box( mouse( )\selector\x, mouse( )\selector\y, mouse( )\selector\width, mouse( )\selector\height, $ff0000ff )
               ;                EndIf
               
               If test_buttons_draw
                  If EnteredButton( ) And
                     a_entered( ) And
                     a_entered( )\bar And
                     a_entered( )\enter And
                     a_entered( )\root = *root And
                     ( a_entered( )\bar\button = EnteredButton( ) Or
                       a_entered( )\bar\button[1] = EnteredButton( ) Or
                       a_entered( )\bar\button[2] = EnteredButton( ) )
                     
                     UnclipOutput( )
                     ;Debug ""+EnteredButton( ) +" "+ EnteredButton( )\x +" "+ EnteredButton( )\y +" "+ EnteredButton( )\width +" "+ EnteredButton( )\height
                     draw_mode_alpha_( #PB_2DDrawing_Outlined )
                     If EnteredButton( )\disable
                        draw_box_( EnteredButton( )\x, EnteredButton( )\y, EnteredButton( )\width, EnteredButton( )\height, $ff0000ff )
                     Else
                        draw_box_( EnteredButton( )\x, EnteredButton( )\y, EnteredButton( )\width, EnteredButton( )\height, $ffff0000 )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            
            If a_anchors( ) And
               a_anchors( )\group\show
               DrawingMode(#PB_2DDrawing_Outlined)
               Box( a_anchors( )\group\x, a_anchors( )\group\y, a_anchors( )\group\width, a_anchors( )\group\height, $ff0000ff )
            EndIf
            ;             ; TEST ROW
            ;             If Entered( ) And Entered( )\root = *root And Entered( )\row And Entered( )\RowEntered( )
            ;                draw_mode_( #PB_2DDrawing_Outlined )
            ;                draw_box_( Entered( )\inner_x( )+Entered( )\RowEntered( )\x, Entered( )\inner_y( )+Entered( )\RowEntered( )\y, Entered( )\RowEntered( )\width, Entered( )\RowEntered( )\height, $ffff0000 )
            ;             EndIf
            
         EndIf
         
         ProcedureReturn *root
      EndProcedure
      
      Procedure   ReDraw( *this._s_ROOT )
         __gui\event\queuesmask = 1
         
         ;\\ reset events
         ResetEvents( *this )
         
         ;\\
         If Not IsGadget( *this\canvas\gadget )
            ProcedureReturn 0
         EndIf
         widget::StartDraw( *this )
         widget::Drawing( )
         widget::StopDraw( )
         
         ;\\ if not is root refresh widget
         If Not is_root_( *this )
            Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
         EndIf
      EndProcedure
      
      ;-
      ;- DIALOGs
      ;-
      Procedure MessageEvents( )
         Protected *message._s_ROOT
         
         Select WidgetEvent( )
            Case #__event_Create
               ; Debug " do create " + EventWidget( )\class
               
            Case #__event_Free
               ; Debug " do free " + EventWidget( )\class
               If EventWidget( ) = *message
                  StickyWindow( *message\canvas\window, #False )
                  Unbind( *message, @MessageEvents( ))
               EndIf
               
            Case #__event_KeyDown
               If keyboard( )\key = #PB_Shortcut_Return
                  ; Debug "key - message"
                  *message = GetWindow( EventWidget( ) )
               EndIf
               
            Case #__event_LeftClick
               *message = GetWindow( EventWidget( ) )
               
         EndSelect
         
         If *message
            If #__type_Button = Type( EventWidget( ) )
               Select GetText( EventWidget( ) )
                  Case "No"     : SetData( *message, #__message_No )     ; no
                  Case "Yes"    : SetData( *message, #__message_Yes )    ; yes
                  Case "Cancel" : SetData( *message, #__message_Cancel ) ; cancel
               EndSelect
               
               ;\\
               PostQuit( *message )
            EndIf
         EndIf
         
         ProcedureReturn #PB_Ignore
      EndProcedure
      
      Procedure Message( Title.s, Text.s, flag.q = #Null, ParentID = #Null )
         ; -1 стандартный динамик 
         ; MB_ICONASTERISK 
         ; MB_ICONEXCLAMATION  
         ; MB_ICONHAND 
         ; MB_ICONQUESTION 
         ; MB_OK 
         ; MessageBeep_(#MB_ICONHAND)
         ;
         
         Protected result, X, Y, Width = 400, Height = 120
         Protected img = - 1, f1 = - 1, f2 = 8
         Protected bw = 85, bh = 25, iw = Height - bh - f1 - f2 * 4 - 2 - 1
         
         Protected._s_root *root, *message
         Protected._s_WIDGET *ok, *no, *cancel, *widget
         
         *widget = EventWidget( )
         
         ;\\
         If *widget
            *root = *widget\root
         Else
            *root = root( )
         EndIf
         
         
         ;          ;\\ 1)
         ;          x = ( *root\width - width )/2
         ;          y = ( *root\height - height )/2 - #__window_CaptionHeight
         ;          *message = Window( x, y, width, height, Title, #pb_window_TitleBar, *root)
         ; ;
         ; ; ;          ;\\ 2)
         ; ; ;          ; *message = Window( x, y, width, height, Title, #pb_window_TitleBar | #pb_window_WindowCentered, *root)
         ;
         ;\\ 3)
         Define newflag = #PB_Window_TitleBar | #PB_Window_Invisible | #PB_Window_NoActivate
         If constants::BinaryFlag( Flag, #__message_ScreenCentered )
            newflag | #PB_Window_ScreenCentered
         Else
            newflag | #PB_Window_WindowCentered
         EndIf
         ;newflag = #PB_Window_ScreenCentered |#PB_Window_BorderLess
         *message = Open( #PB_Any, X, Y, Width, Height, Title, newflag, WindowID( *root\canvas\window ))
         SetClass( *message, #PB_Compiler_Procedure+"_"+Str( *Message\canvas\window )) 
         *message\parent = *root
         mouse( )\x = GadgetMouseX( *message\canvas\gadget )
         mouse( )\y = GadgetMouseY( *message\canvas\gadget )
         GetAtPoint( *message, mouse( )\x, mouse( )\y, widgets( ))
         ;
         ;\\
         If constants::BinaryFlag( Flag, #__message_Info )
            img = CatchImage( #PB_Any, ?img_info, ?end_img_info - ?img_info )
            CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'APPL'")
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'caut'")
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'note'")
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'stop'")
            CompilerEndIf
            DataSection
               img_info: ; size : 1404 bytes
               Data.q $0A1A0A0D474E5089, $524448490D000000, $2800000028000000, $B8FE8C0000000608, $474B62060000006D
               Data.q $A0FF00FF00FF0044, $493105000093A7BD, $5F98CD8558544144, $3B3BBFC71C47144C, $54C0F03D7F7BB707
               Data.q $14DA0D5AD0348C10, $7C1A6360A90B6D6D, $6D03CAADF49898D3, $D1A87D7AD262545F, $B69B5F469AA9349A
               Data.q $680D82AB6C37D269, $A6220B47FA51A890, $DECFEE38E105102A, $053FB87D333B772E, $CCDD3CF850EE114A
               Data.q $0766FDFE767ECCDC, $F476DC569948E258, $5BCA94AD89227ADA, $3C10B9638C15E085, $7A59504C89240017
               Data.q $8055B371E2774802, $2E678FEAA9A17AFC, $06961711C3AC7F58, $EF905DD4CA91A322, $A159B0EAD38F5EA2
               Data.q $4D30000CA9417358, $1A3033484098DD06, $2C671601A343EB08, $EDD3F547A138B820, $DAFB560A82C89ABE
               Data.q $2E1D2C863E5562A8, $3CD50AAB359173CC, $8D8C00262FCE6397, $83FB0DA43FD7D187, $DDAAFF5D74F85C02
               Data.q $B3A477582D666357, $45754E5D9B42C73C, $16732AAEDD894565, $41FBABA3A6B0899B, $3FAB16311F45A424
               Data.q $8FDB82C66F4B707F, $1595D6EF9001DD5F, $69B32B24BD2B2529, $EA0DEEB7E6181FDC, $9D9F369A5BBB6326
               Data.q $A94FBDAEC7BBE0B7, $A732EAE5951BF5F4, $5C114204D2DD216D, $6B9C344C651BD9B9, $5F8FDB82CE66FAAA
               Data.q $5F57EDFEF90841DD, $8469F486ECB61D52, $C2634777AE971D35, $2A9E9FF5E072D5DC, $8DE85A9CB3A47758
               Data.q $4DCF559EDB963737, $0D1DD74741182C67, $C9DDD550E5F86C71, $E68DAFB555E65365, $79E522B2BAF36858
               Data.q $B2DAC765C78001C9, $8DAFB573522C2B62, $8F9455C8929B2E4E, $77B1059330B54E5C, $D579F26E672AD4E3
               Data.q $AC8D0E0F2BD2BD5F, $9F9532F8021F1304, $C910838758FEB56E, $816E0DF732515957, $DAAF81036D5F2CA9
               Data.q $C2E305A5E54F66D7, $73EED922E79850D2, $88B9E6F02BB0E0D9, $2241697952FB2AA2, $B51C5D50B8ACB1A3
               Data.q $69322368555B297F, $A654FC089009A54C, $1E34DD1B45EE65EE, $5F9F7579224403B7, $416D440905240B59
               Data.q $244059B47C668BBE, $56F2A644DDF22B00, $1EBC77E473482920, $E3DCB126CD5175A7, $E720A4816B952854
               Data.q $AA1C1F8C97DBB0A8, $3CE0A0A481CA0015, $2829A74C5DCDCD5F, $0F5481799C981CD6, $9356B8BCB2A56E0A
               Data.q $0B4C0AC3821950B0, $6188962AC4914B75, $8326E2692ED8B632, $32112C58C9006044, $ECE858E5B0989D1A
               Data.q $743677B1BE616735, $07BA4027E44A0623, $6C80F60B188E13D1, $829201DC00066B09, $8C96858E8E2EC9A6
               Data.q $805AC633A82068E1, $371FE43AD04336D4, $3E017C48017AE2C5, $292045C9C672091A, $FE17193FA6FF7E78
               Data.q $24BB170DC670F1B1, $228215E7B04759EC, $8381081FD341E657, $105A57F6BD342FFB, $B487FAFAA7631800
               Data.q $02CD8258AB7E1B4C, $7FAFA533BF1272D8, $0B4E95227E4D3348, $C2283FB0F4FD51EA, $448A12D9E3719E9A
               Data.q $A9D39441710FE231, $C02226AFBB60B4BC, $BE71A320F3D6FF0F, $B80C4880C5A02FD4, $EAE80059B3FE70FC
               Data.q $BFD96D3E2109AFBE, $33433E3653923D3E, $6181FDEF7925044E, $40CCA2BCC151695B, $BFB32F995BDBE050
               Data.q $4BD80C6A38598607, $EED1229FCE4E4FFB, $37BADFD58B1931AB, $9AC9DFBE734207A8, $31180DF76E30F1B1
               Data.q $484A73B9DC7FEBCE, $D7A5B83F9D2F4FFB, $F3E8DECDC7776C64, $77EFE7474D218F98, $BEA6C0F5ABB1CE75
               Data.q $E6D34B630E33E5E9, $D1DDEBF686899CB3, $30F1B1C9EBB3E0B1, $707F829A8EE8DF2E, $EB33FE99E7EAA9A1
               Data.q $92547BE745F7507E, $CF3D5948A6BB587F, $BB773989021B3939, $EE4FFEBB1CE0C06F, $17B5C8FDB00082A9
               Data.q $0D85E5765D9A9161, $D2CFBB3D8776A515, $B091079EAE8A2450, $58699FAF38C60FA6, $AAAC44AE240825E7
               Data.q $524EF9BCCF8048DA, $7CE63B71E6C2BC56, $B1F0FBBCC0BA9B3D, $B389F106710FE236, $E0B19105F4D4FFA4
               Data.q $4964FB2AA2BB5124, $96EF9053D965946A, $5542B5438A9C7B97, $AA218C9B953A9172, $F504091819AC204F
               Data.q $19C68C085CE323C7, $0AFC1667EBA1393B, $9132FEBD1DB62678, $0A88495AE54CAD78, $974C713C10AF0B93
               Data.q $C7A92409E9132188, $DA1DCE5A182B5934, $00FF3496B3E99DD4, $C5E52BD0901E71B2, $444E454900000000
               Data.b $AE, $42, $60, $82
               end_img_info:
            EndDataSection
         EndIf
         If constants::BinaryFlag( Flag, #__message_Error )
            img = CatchImage( #PB_Any, ?img_error, ?end_img_error - ?img_error )
            
            DataSection
               img_error: ; size : 1642 bytes
               Data.q $0A1A0A0D474E5089, $524448490D000000, $3000000030000000, $F902570000000608, $474B620600000087
               Data.q $A0FF00FF00FF0044, $491F06000093A7BD, $41D9ED8168544144, $CCEFF1C71DC7546C, $F6A06C4218C6ED7A
               Data.q $E448A410E515497A, $2070C40BB121A4E0, $46DC512B241A4E54, $124BD29004AB2039, $5150F4DA060B2630
               Data.q $52894889E9734815, $42B01552AB888955, $0A9535535581A8E4, $A69B1B838C151352, $0F5F9BEDFAF1DAF1
               Data.q $1B16F7DEBB3635DE, $DBF3D5DEB2E7A873, $8599BCFFBCCDEFCF, $8B999BBFFED0B685, $D94DFC3235B5A893
               Data.q $2AD241A8331E9177, $A24A50090AA21D50, $F4E23494382E38DF, $CDC2449B1FD5A692, $67C9F4601567BBF6
               Data.q $EA910FC176C73A56, $FB3E2C820C026811, $90FA231C4D0CFD92, $77E7A6B4722EFB8E, $3975B5B8601AF37D
               Data.q $E795079E6401C8E9, $718909C7B3E02570, $139E92E751637E23, $67B6C9EA403CB783, $16621CEA8257EE71
               Data.q $51DA72431163C9F8, $ED40125BADFBB67D, $B69198EA40D4D1ED, $E1CFD7F08E620A6A, $649A76066FAEE378
               Data.q $1CAF696A00B39BD2, $F8A5BF1E82DFA931, $B68B1E9F7E92E7EC, $10366C83462792C6, $9B483C679D1EDEDF
               Data.q $E5ADFDD3DFC7CA2B, $679B1D481A900EB3, $FD5FC5A1C6FDEE7C, $789EA5087457C832, $DF27E036FC740DB6
               Data.q $2EDEA7739A99E91B, $7D63573D4FD7C039, $091E176ECB121FEF, $3D92C5F7739E6BA1, $E3F8C8438CEC4B05
               Data.q $E338639DC7E0C287, $93E731F8D0BBE631, $A883C20B9CF064CA, $C03059C99BECC32E, $8A2A927678B696E8
               Data.q $6773962BC31DF31F, $5E32A40D35BC1ED7, $61AE34C8F7C47E20, $B482B75C33F7CFE9, $BD6DC8C3B3E18BF3
               Data.q $F3CE00E87774D0D6, $C8C73B8EC3301077, $1EAA53FC3F1397B7, $A3ED685DBED88879, $889BEB3C515EF88C
               Data.q $FBB987C6E2C3DC1F, $4F437B575A305FF5, $D8C99E55CF67C74C, $B432B0912802A16D, $0BD967DF31F98D05
               Data.q $2244C006A9AB295B, $95211F6B425F3AC4, $131BB7DFAF88CCC9, $17F2C3565D100089, $60D9F045FBE631B7
               Data.q $0C030246B6B523F0, $1BA0F14E30F0BF9F, $EF9127DDBFE58A36, $7DED884489AFFE4F, $0078CCC4F5CBAD05
               Data.q $A1A89BAF79FF3EF9, $AF17ABFAEFE27E38, $B54C2C7A40060436, $9FD33FDED83596F9, $D82EC4FA885E59F8
               Data.q $D0F7C463C6548EB0, $7ABDF473BC7CC6DA, $3F0026054BD3D308, $C1803039A9C479F1, $CC32DA5654B6183D
               Data.q $843D34389FD11F87, $875C6CC25F3AC4B5, $EFC7C8EAEF1236D6, $86D6458670FE883D, $6F207AF2E72123C2
               Data.q $EE229FADFBFAF81E, $E35C19F88FCEA52F, $89B8CABF4FF7EA1A, $F8B374EBF5EC6161, $5A3FDFED5BFB10EC
               Data.q $524EA5751007B45D, $7B2B97B0FD822695, $BC3B99AC09EB4E0F, $A8050B7237754E04, $6194D2B63B9F052A
               Data.q $FCB800F3AFA5E83E, $D12A27E1D9A4A295, $FA6EE7C74A0110E2, $3343761C4CC77B89, $A4788CCDAA213002
               Data.q $66EA532260530BFC, $3698EAEF136AB9F0, $377FBE21937FAE6C, $F026FF1923335366, $598BE240181C3102
               Data.q $3270DA691B56A7E1, $666A6EC0EAEF12D6, $08BE902F11299324, $7D1CEF04E7174011, $C4AF2272F4B8079D
               Data.q $9181BE3CC1EC0FC6, $C085D20F121D8CEC, $B0DECF8273F38800, $621F92BD2E59CCE6, $A6A48DE6EC4EC1E5
               Data.q $181F3A4E3C00A70C, $F4D5891F61D388C0, $FF7BBCB9F7DE3E68, $9675385AC3B9B564, $5373410C15F6BBCB
               Data.q $ECEB025E38B489F6, $8C7F569A4B00C0E9, $4B1CE3220F0C5CB8, $4FE0BA3BE3E5365B, $7F45AC8B952B4C1F
               Data.q $2DEA844889EFC9EC, $AA5D23C40BBE782D, $091207B8325CECFD, $630A823C3166F487, $4543837863E1F7F9
               Data.q $19E4E8B5A54439F1, $CBEF0864EAFCBD2E, $4131B94C3B5E0641, $2D1D5E40D37B9078, $4D6E25BF5A1CA4B8
               Data.q $EEB9F085E5489FE6, $FC565ABAD19F3B4E, $A7A63EFBBDAE05E4, $6E687C654A927037, $E61DAF030B4B7AA2
               Data.q $3330F5B7215D7F8E, $DF6577BFDC7F695E, $FAD5F0000A84AF5F, $73E133C7EE175E27, $6A27DF318E73D6A5
               Data.q $EF9E3E769954FD08, $47491E3068863728, $99CE42CECBFF3FEA, $D060C40EE915C4D7, $1E3436B2A80CBC02
               Data.q $1F8B0DAC8B0C0A89, $CEE0189ADA5B5132, $7C316769C9AF2793, $336A9850616065F1, $19C98BB16DA138F5
               Data.q $ED9F556C6E8B7D37, $3A0F0BB71BC70B7E, $03198A7793FCFF1A, $E71DB45BAAEEE677, $EFB1DD41BC6F9DDE
               Data.q $B7736A17C8317D2C, $077E9A22B2A5A1BF, $E37DE9DE572F3CD8, $B9BF6727F58E9E45, $86F6AD189E4B100B
               Data.q $B13618F9EBF4207E, $F1370F06153E967B, $E8769E1B43D0C703, $DA14BFE31CD96208, $607AA16C6FE6341E
               Data.q $630AEDEA7739AB6A, $7C039E94863A4956, $152AAF8DE711D25A, $E681F06F91FCB30F, $65624DA80766477A
               Data.q $DDC7F71DC8CBF889, $35C804BCEC3342D1, $388C1EF7C0FABD81, $AA70FBA106B9CB35, $887D7214F8B2AA07
               Data.q $FB5D3D9D6F3A4E8B, $B6859B67A164B9D9, $FEEC7FED695A16D0, $00006B709A860323, $42AE444E45490000
               Data.b $60, $82
               end_img_error:
            EndDataSection
         EndIf
         If constants::BinaryFlag( Flag, #__message_Warning )
            img = CatchImage( #PB_Any, ?img_warning, ?end_img_warning - ?img_warning )
            
            DataSection
               img_warning: ; size : 1015 bytes
               Data.q $0A1A0A0D474E5089, $524448490D000000, $2800000028000000, $B8FE8C0000000608, $474B62060000006D
               Data.q $A0FF00FF00FF0044, $49AC03000093A7BD, $DD98ED8558544144, $67339F8718551C6B, $6BA934DBB3B3B267
               Data.q $60255624DDDB3493, $785E2A42F0458295, $068C4AF69BDA17E3, $030B4150FDBB362A, $D9AC514B49409622
               Data.q $86FF825726F0546E, $2968A4290537B482, $7B79EF7CD1F26F42, $CCECECDD9B68DDB1, $3DE7337B07E4DE84
               Data.q $CE73DE666FECFBEF, $BE4895C549A28EC0, $D18003BEE526913D, $1BC8E3E7C60FAABF, $9FECC2827EF8A00B
               Data.q $A661997980015464, $5B7351EBFBE505F3, $47813B9850001351, $53C3D570C7AAE19E, $B23A91C71FB3F205
               Data.q $DEADAC5DE7CBF283, $8B8B83D4866AB9E2, $A3501A8AC0BD75C0, $F5C1DD1FC946EE17, $A401C06F62B271D5
               Data.q $FA6A26F924D8AC80, $7E5A30F4E54A0E48, $5560C8F125D550E7, $EF525E4622D61FC1, $09839A235B0F5C4F
               Data.q $6801C1363A672499, $22528E5162499C81, $1C849B7E9D4CA034, $9B0B11E8E79A47A4, $D4275B0ADE94A961
               Data.q $86766961DF69962D, $ACF075B2DD97A5A7, $D5E5ADCCBFD61B82, $E0E70AD6ED2BCBC9, $01C25A643259C2E2
               Data.q $267D976692740A74, $BDB1C9941DB6A94C, $00648F1BCF26FAD8, $B2C7BE9AE0658040, $5EA769DE2F46A039
               Data.q $1126BD12FA3A0EFB, $4936293C09200E18, $A54A016D72DDA26B, $768E93EC9BC50878, $2E521BC80E33910B
               Data.q $141140605A676E1D, $A093744937932ADA, $8281A48D7ED62F67, $15A3F82459547171, $403871C753A9C1DC
               Data.q $06470A2CF737C256, $804094E82C78A9F8, $D268304CD1725D32, $92EA1CB5051ED691, $7565900D8BC67CFC
               Data.q $D18BC6D5D9712E8E, $117CC62E3760194C, $10E54E54A025BC24, $2A40E3FD026F2319, $6858AA64C64A1498
               Data.q $61F477CD41DADA15, $27D00E40F641C4E3, $8096E855B9759636, $67D2AF1465F163F2, $8B1B13EAEAE0D8EC
               Data.q $535855B2BD295223, $321995650B7DF140, $C60B95CDEEFB4C6E, $B8D66D1F4CB2AB43, $D29243E17FBD28B6
               Data.q $084F4AD2B684774F, $4859A46E52C3D2B8, $3D5D0669FAB94043, $435D5C1B6F49A0CF, $B3ACF95CB8C88D26
               Data.q $D9AFD513076370D1, $EC1E3B578FDB0E23, $4DE1A355F6B926C1, $FEC232053D2E5280, $8171BCABDB194E87
               Data.q $9B43A3CCF63AB911, $1D8D8BF4930EEB37, $1B03C18628DF29A2, $2381EFADB70E37E8, $5E94A941C87A1FFF
               Data.q $4653A34D7B30E2C3, $57BCFD90E834E96B, $37AF4AA6517A9634, $506499A04FDF1404, $4BE860F68ADAA152
               Data.q $7B4EB6B20E173A18, $DF46D1F2B907EA58, $CA9492773F250FFD, $BBF30895BD7115D2, $BF527F49C6E93C04
               Data.q $2DC126EA5CA400A4, $73BAB8046E349A0E, $A6B8292C73E17BD5, $BB85E8D406B15816, $05103AFB551D0735
               Data.q $DA95C00E05160EAE, $1B16FD43CE570957, $DA5DBF1B621FD38E, $EA54075063860747, $5917BB61884A7336
               Data.q $FBD40FF52823CC02, $FE37EB4DCBBCBAE0, $9BF9A436D938F722, $8ED1D8C6E3DEF555, $2EE409553D03EE00
               Data.q $4900000000FAB21F
               Data.b $45, $4E, $44, $AE, $42, $60, $82
               end_img_warning:
            EndDataSection
         EndIf
         ;
         ;\\
         Container( f1, f1, Width - f1 * 2, Height - bh - f1 - f2 * 2 - 1 )
         SetClass( widget( ), "message_CONT" )
         If IsImage( img )
            Image( f2, f2, iw, iw, img, #__flag_ImageCenter | #__flag_Borderflat | #__flag_transparent )
            SetClass( widget( ), "message_IMAGE" )
            Text( f2 + iw + f2, f2, Width - iw - f2 * 3, iw, Text, #__flag_TextCenter | #__flag_TextLeft | #__flag_transparent );| #__flag_Borderless )
         Else
            Text( f2, f2, Width - f2 * 2, iw, Text, #__flag_TextCenter | #__flag_TextLeft | #__flag_transparent );| #__flag_Borderless )
         EndIf
         SetClass( widget( ), "message_INFO" )
         CloseList( )
         
         ;\\
         *ok = Button( Width - bw - f2, Height - bh - f2, bw, bh, "Ok", #PB_Button_Default )
         SetClass( *ok, "message_YES" )
         If constants::BinaryFlag( Flag, #__message_YesNo ) Or
            constants::BinaryFlag( Flag, #__message_YesNoCancel )
            *no = Button( Width - ( bw + f2 ) * 2 - f2, Height - bh - f2, bw, bh, "No" )
            SetClass( *no, "message_NO" )
            SetText( *ok, "Yes" )
         EndIf
         If constants::BinaryFlag( Flag, #__message_YesNoCancel )
            *cancel = Button( Width - ( bw + f2 ) * 3 - f2 * 2, Height - bh - f2, bw, bh, "Cancel" )
            SetClass( *cancel, "message_CANCEL" )
         EndIf
         
         ;\\
         HideWindow( *message\canvas\window, #False )
         StickyWindow( *message\canvas\window, #True )
         SetActiveGadget( *Message\canvas\gadget )
         Bind( *message, @MessageEvents( ))
         SetActive( *ok )
         
         ;\\
;          SetLayeredWindow( *message\canvas\window, igOpaque )
;          ;          If StartDrawing( CanvasOutput( *message\canvas\gadget ))
;          ;             Box( 0, 0, OutputWidth( ), OutputHeight( ), igOpaque )
;          ;             StopDrawing( )
;          ;          EndIf
;          SetBackgroundColor( *message, igOpaque )
         
         ;\\
         DisableWindow( *root\canvas\window, #True )
         WaitQuit( )
         DisableWindow( *root\canvas\window, #False )
         
         ;\\
         result = GetData( *message )
         Free( @*message )
         If IsImage( img )
            FreeImage( img )
         EndIf
         
         ;\\
         SetActive( *root )  
         ChangeCurrentCanvas( *root\canvas\gadgetID )
         mouse( )\x = GadgetMouseX( *root\canvas\gadget )
         mouse( )\y = GadgetMouseY( *root\canvas\gadget )
         GetAtPoint( *root, mouse( )\x, mouse( )\y, widgets( ))
         ; 
         EventWidget( ) = *widget
         ProcedureReturn result
      EndProcedure
      
   EndModule
CompilerEndIf

;- <<<
;-
Macro UseWidgets( )
   UseModule widget
   UseModule constants
   UseModule structures
EndMacro

;-
;-\\ EXAMPLE
CompilerIf #PB_Compiler_IsMainFile
   EnableExplicit
   UseWidgets( )
   test_align = 1
   test_draw_area = 1
   
   If Not LoadImage(1, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Paste.png")
      End
   EndIf
   If DesktopResolutionX() > 1
      ResizeImage(1, DesktopScaledX(ImageWidth(1)),DesktopScaledY(ImageHeight(1)))
   EndIf
   
   Define Image = 1
   Define i, Width = 250
   
   Procedure ComboButton( X,Y,Width,Height, Text.s, flags)
      Protected *g._s_WIDGET
      *g = ComboBox( X,Y,Width,Height, flags)
      AddItem( *g, -1, Text,1 )
      SetState( *g, 0 )
   EndProcedure
   
   
   
   If Open(0, 0, 0, Width+20, 760, "test alignment Image", #PB_Window_SizeGadget | #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
      ComboButton(10,  10, Width/2-5, 65, "left&top"                    , #__flag_BorderFlat|#__flag_Left |#__flag_Top   )
      ComboButton(10+Width/2+5,  10, Width/2-5, 65, "right&top"         , #__flag_BorderFlat|#__flag_Right|#__flag_Top   )
      ComboButton(10,  10+65+10, Width/2-5, 65, "left&bottom"           , #__flag_BorderFlat|#__flag_Left |#__flag_Bottom)
      ComboButton(10+Width/2+5,  10+65+10, Width/2-5, 65, "right&bottom", #__flag_BorderFlat|#__flag_Right|#__flag_Bottom)
      
      ComboButton(10, 160, Width/2-5, 65, "left"                        , #__flag_BorderFlat|#__flag_Left  )
      ComboButton(10+Width/2+5, 160, Width/2-5, 65, "right"             , #__flag_BorderFlat|#__flag_Right )
      ComboButton(10, 160+65+10, Width/2-5, 65, "top"                   , #__flag_BorderFlat|#__flag_Top   )
      ComboButton(10+Width/2+5, 160+65+10, Width/2-5, 65, "bottom"      , #__flag_BorderFlat|#__flag_Bottom)
      
      ComboButton(10, 310, Width, 65, "left&center"                     , #__flag_BorderFlat|#__flag_ImageLeft  )
      ComboButton(10, 310+65+10, Width, 65, "right&center"              , #__flag_BorderFlat|#__flag_ImageRight )
      ComboButton(10, 460, Width, 65, "top&center"                      , #__flag_BorderFlat|#__flag_ImageTop   )
      ComboButton(10, 460+65+10, Width, 65, "bottom&center"             , #__flag_BorderFlat|#__flag_ImageBottom)
      
       ComboButton(10, 610, Width, 140, "default"                         , #__flag_BorderFlat);|#__flag_ImageCenter)
      
      
      Repeat
         Define Event = WaitWindowEvent()
      Until Event = #PB_Event_CloseWindow
   EndIf
CompilerEndIf

CompilerIf #PB_Compiler_IsMainFile = 99
  UseWidgets( )
  EnableExplicit
  test_clip = 1
  test_draw_area = 1
  
  Define a,i, Height=60
  
  UsePNGImageDecoder()
  LoadImage(0, #PB_Compiler_Home + "examples/sources/Data/world.png")
  LoadImage(1, #PB_Compiler_Home + "examples/sources/Data/Geebee2.bmp")
  LoadImage(2, #PB_Compiler_Home + "examples/sources/Data/PureBasic.bmp")
  CopyImage(1,3)
  CopyImage(2,4)
  ResizeImage(3, 32, 32)
  
  CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
    Define ImageSize.NSSize
    ImageSize\width = 16
    ImageSize\height = 16
    CocoaMessage(0, ImageID(4), "setSize:@", @ImageSize)
  CompilerElse
    ResizeImage(4, 16, 16)
  CompilerEndIf

  
  Procedure events_gadgets()
    Protected ComboBox.s
    ClearDebugOutput()
    
    Select EventType()
      Case #PB_EventType_Focus
        ComboBox.s = "focus "+EventGadget()+" "+EventType()
      Case #PB_EventType_LostFocus
        ComboBox.s = "lostfocus "+EventGadget()+" "+EventType()
      Case #PB_EventType_Change
        ComboBox.s = "change "+EventGadget()+" "+EventType()
    EndSelect
    
    If EventType() = #PB_EventType_Focus
      Debug ComboBox.s +" - gadget" +" get text - "+ GetGadgetText(EventGadget()) ; Bug in mac os
    Else
      Debug ComboBox.s +" - gadget"
    EndIf
  EndProcedure
  
  Procedure events_widgets()
    Protected ComboBox.s
    Protected eventtype = WidgetEvent( )
    If eventtype = #__event_Draw Or eventtype = #__event_MouseMove
      ProcedureReturn 
    EndIf
    If EventWidget( ) = EventWidget( )\root
      ProcedureReturn 
    EndIf
    
    ;ClearDebugOutput()
    
    Select eventtype
      Case #__event_Focus
        ComboBox.s = "focus "+Str(EventWidget( )\index)+" "+eventtype
      Case #__event_LostFocus
        ComboBox.s = "lostfocus "+Str(EventWidget( )\index)+" "+eventtype
      Case #__event_Change
        ComboBox.s = "change "+Str(EventWidget( )\index)+" "+eventtype
    EndSelect
    
    If eventtype = #__event_Focus
      Debug ComboBox.s +" - widget" +" get text - "+ GetText(EventWidget( ))
    Else
      If ComboBox.s <> "" 
        Debug ComboBox.s +" - widget " + EventWidget( )\class
        ComboBox.s = ""
      EndIf
    EndIf
    
  EndProcedure
  
  
  If Open(0, 0, 0, 615, 190, "ComboBox on the canvas", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ;\\
    ComboBoxGadget(0, 10, 10, 250, 50, #PB_ComboBox_Editable|#PB_ComboBox_UpperCase|#PB_ComboBox_Image)
    For a = 1 To 31 ; xp=31 ;linux-qt=11 ; mac = 5
      AddGadgetItem(0, -1,"ComboBox editable... " + Str(a), ImageID(2))
    Next
    
    ComboBoxGadget(1, 10, 70, 250, 50, #PB_ComboBox_LowerCase|#PB_ComboBox_Image)
    AddGadgetItem(1, -1, "ComboBox item with image1", ImageID(0))
    AddGadgetItem(1, -1, "ComboBox item with image2", ImageID(1))
    AddGadgetItem(1, -1, "ComboBox item with image3", ImageID(2))
    
    ComboBoxGadget(2, 10, 130, 250, 50)
    AddGadgetItem(2, -1, "ComboBox item 1")
    AddGadgetItem(2, -1, "ComboBox item 2")
    AddGadgetItem(2, -1, "ComboBox item 3")
    
    SetGadgetState(0, 2)
    SetGadgetState(1, 1)
    SetGadgetState(2, 0)    ; set (beginning with 0) the third item as active one
    
    
    For i = 0 To 2
      BindGadgetEvent(i, @events_gadgets())
    Next
    
    ;\\
    ComboBox(305+10, 10, 250, 50, #PB_ComboBox_Editable|#PB_ComboBox_UpperCase);|#PB_ComboBox_Image)
    For a = 1 To 31
      AddItem(ID(0), -1,"ComboBox editable... " + Str(a), (2))
    Next
    
    ComboBox(305+10, 70, 250, 50, #PB_ComboBox_LowerCase);|#PB_ComboBox_Image)
    AddItem(ID(1), -1, "ComboBox item with image1", (0))
    AddItem(ID(1), -1, "ComboBox item with image2", (1))
    AddItem(ID(1), -1, "ComboBox item with image3", (2))
    
    ComboBox(305+10, 130, 250, 50)
    AddItem(ID(2), -1, "ComboBox item 1")
    AddItem(ID(2), -1, "ComboBox item 2")
    AddItem(ID(2), -1, "ComboBox item 3")
    
    SetState(ID(0), 2)
    SetState(ID(1), 1)
    SetState(ID(2), 0)    ; set (beginning with 0) the third item as active one
    
    For i = 0 To 2
      Bind(ID(i), @events_widgets())
    Next
    
    WaitClose( ) 
  EndIf
CompilerEndIf

CompilerIf #PB_Compiler_IsMainFile = 99
   UseWidgets( )
   
   If Open( 0, 0, 0, 300, 260, "ComboBox Upper&Lower case test", #PB_Window_SystemMenu | #PB_Window_ScreenCentered )
      SetBackColor( widget(), - 1 )
      
      ComboBox( 10, 10, 280, 50, #PB_ComboBox_UpperCase )
      AddItem( widget(), - 1, "comboBOX"+" (UPPER)" )
      SetState( widget(), 0 )
      
      ComboBox( 10, 70, 280, 50, #PB_ComboBox_LowerCase )
      AddItem( widget(), - 1, "COMBObox"+" (lower)" )
      SetState( widget(), 0 )
      
      ComboBox( 10, 130, 280, 50, #PB_ComboBox_Editable|#PB_ComboBox_UpperCase )
      AddItem( widget(), - 1, "comboBOX"+" (UPPER)" )
      SetState( widget(), 0 )
      
      ComboBox( 10, 190, 280, 50, #PB_ComboBox_Editable|#PB_ComboBox_LowerCase )
      AddItem( widget(), - 1, "COMBObox"+" (lower)" )
      SetState( widget(), 0 )
      
      WaitClose( ) 
   EndIf
CompilerEndIf

CompilerIf #PB_Compiler_IsMainFile = 99
   UseWidgets( )
   
   Global Button_0, Button_1, Button_2, Button_3, Button_4, Button_5, Splitter_0, Splitter_1, Splitter_2, Splitter_3, Splitter_4
   
   If Open(0, 0, 0, 470, 280, "SplitterGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
      
      Button_0 = 0;Button(0,0,0,0, "Button 0") ; as they will be sized automatically
      Button_1 = 0;Button(0,0,0,0, "Button 1") ; as they will be sized automatically
      
      ;Button_2 = 0;MDI(0, 0, 0, 0) ; as they will be sized automatically
      Button_2 = 0;Button(0,0,0,0, "Button 2") ; No need to specify size or coordinates
      Button_3 = 0;Button(0,0,0,0, "Button 3") ; as they will be sized automatically
      Button_4 = 0;Button(0,0,0,0, "Button 4") ; No need to specify size or coordinates
      Button_5 = 0;Button(0,0,0,0, "Button 5") ; as they will be sized automatically
      
      Splitter_0 = Splitter(0,0,0,0, Button_0, Button_1, #PB_Splitter_Vertical|#PB_Splitter_FirstFixed)
      Splitter_1 = 0;Splitter(0,0,0,0, Button_3, Button_4, #PB_Splitter_Vertical|#PB_Splitter_SecondFixed)
;       SetAttribute(Splitter_1, #PB_Splitter_FirstMinimumSize, 40)
;       SetAttribute(Splitter_1, #PB_Splitter_SecondMinimumSize, 40)
      Splitter_2 = 0;Splitter(0,0,0,0, Splitter_1, Button_5)
      Splitter_3 = 0;Splitter(0,0,0,0, Button_2, Splitter_2)
      Splitter_4 = Splitter(30,30, 410, 210, Splitter_0, Splitter_3, #PB_Splitter_Vertical)
      
      SetState(Splitter_4, 20)
      
      widget()=Splitter_0
      Debug widget()\bar\thumb\pos
      
     
      WaitClose( )
   EndIf
   
CompilerEndIf

;- SPLITTER FOCUS DEMO
CompilerIf #PB_Compiler_IsMainFile = 99
  UseWidgets( )
  
  Global Container_0, Container_1, Container_2, Container_3, Container_4, Container_5, Splitter_0, Splitter_1, Splitter_2, Splitter_3, Splitter_4
  
  If OpenWindow(0, 0, 0, 470, 280, "tab focus demo", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    If Open(0);, 425, 40)
       Container_0 = Container(0, 0, 0, 0)
       Container(10,10,50,30)
       Button( 10,10,50,30, "Container 0") ; as they will be sized automatically
       CloseList( )
       CloseList( )
       Container_1 = Container(0, 0, 0, 0)
       Container(10,10,50,30)
       Container(10,10,50,30)
       Button( 10,10,50,30, "Container 1") ; as they will be sized automatically
       CloseList( )
       CloseList( )
       CloseList( )
       
       Container_2 = Container(0, 0, 0, 0)
       Container(10,10,50,30)
       Button( 10,10,50,30, "Container 2") ; No need to specify size or coordinates
       CloseList( )
       CloseList( )
       Container_3 = Container(0, 0, 0, 0)
       Container(10,10,50,30)
       Button( 10,10,50,30, "Container 3") ; as they will be sized automatically
       CloseList( )
       CloseList( )
       Container_4 = Container(0, 0, 0, 0)
       Container(10,10,50,30)
       Button( 10,10,50,30, "Container 4") ; No need to specify size or coordinates
       CloseList( )
       CloseList( )
       Container_5 = Container(0, 0, 0, 0)
       Container(10,10,50,30)
       Button( 10,10,50,30, "Container 5") ; as they will be sized automatically
       CloseList( )
       CloseList( )
       
;       Hide(Container_0, 1 ) 
;       Hide(Container_1, 1 ) 
;       Hide(Container_2, 1 ) 
;       Hide(Container_3, 1 ) 
;       Hide(Container_4, 1 ) 
;       Hide(Container_5, 1 ) 

;       Container_0 = 0
;       Container_1 = 0
;       Container_2 = 0
;       Container_3 = 0
;       Container_4 = 0
;       Container_5 = 0
      
      Splitter_0 = Splitter(0, 0, 0, 0, Container_0, Container_1, #PB_Splitter_FirstFixed) ; #PB_Splitter_Vertical|
      Splitter_1 = Splitter(0, 0, 0, 0, Container_3, Container_4, #PB_Splitter_Vertical|#PB_Splitter_SecondFixed)
      SetAttribute(Splitter_1, #PB_Splitter_FirstMinimumSize, 40)
      SetAttribute(Splitter_1, #PB_Splitter_SecondMinimumSize, 40)
      Splitter_2 = Splitter(0, 0, 0, 0, Splitter_1, Container_5)
      Splitter_3 = Splitter(0, 0, 0, 0, Container_2, Splitter_2)
      Splitter_4 = Splitter(30, 30, 410, 210, Splitter_0, Splitter_3, #PB_Splitter_Vertical)
      
      SetText(Splitter_0, "0")
      SetText(Splitter_1, "1")
      SetText(Splitter_2, "2")
      SetText(Splitter_3, "3")
      SetText(Splitter_4, "4")
      
      SetState(Splitter_1, 20)
      ;SetState(Splitter_1, 410-20)
    EndIf
    
    Repeat : Until WaitWindowEvent() = #PB_Event_CloseWindow
  EndIf
  
CompilerEndIf

;- MULTI SELECT WIDGETS
CompilerIf #PB_Compiler_IsMainFile = 99  
   UseWidgets( )
   
   Enumeration 
      #_tb_group_select = 1
      
      #_tb_group_left = 3
      #_tb_group_right
      #_tb_group_top
      #_tb_group_bottom
      #_tb_group_width
      #_tb_group_height
      
      #_tb_widget_delete
      #_tb_widget_copy
      #_tb_widget_cut
      #_tb_widget_paste
      
      #_tb_LNG
      #_tb_lng_ENG
      #_tb_lng_RUS
      #_tb_lng_FRENCH
      #_tb_lng_GERMAN
   EndEnumeration
   
   Global ide_toolbar, ide_popup_lenguage, *g1._s_WIDGET, *g2._s_WIDGET
   
   Procedure DisableBarButtons( *this._s_WIDGET, state )
      DisableBarButton( *this, #_tb_group_left, state )
      DisableBarButton( *this, #_tb_group_right, state )
      DisableBarButton( *this, #_tb_group_top, state )
      DisableBarButton( *this, #_tb_group_bottom, state )
      DisableBarButton( *this, #_tb_group_height, state )
      DisableBarButton( *this, #_tb_group_width, state )
   EndProcedure
   
   Procedure Copy( *g._s_WIDGET )
      PushListPosition( widgets( ) )
      SelectElement( widgets( ), 2 )
      AddElement( widgets( ) )
      widgets( )  = @*g
      PopListPosition( widgets( ) )
   EndProcedure
   
   
   
   Procedure ide_toolbar_events( )
      Protected *g._s_WIDGET = EventWidget( )
      
      Select WidgetEventItem( )
         Case #_tb_group_select
            If a_anchors( )\group\show
               a_focused( ) = 0
            EndIf
            
         Case #_tb_group_left
            a_align( a_focused( ), 1 )
         Case #_tb_group_right 
            a_align( a_focused( ), 3 )
         Case #_tb_group_top 
            a_align( a_focused( ), 2 )
         Case #_tb_group_bottom
            a_align( a_focused( ), 4 )
         Case #_tb_group_width 
            a_align( a_focused( ), 5 )
         Case #_tb_group_height
            a_align( a_focused( ), 6 )
            
            
            
         Case #_tb_widget_copy
         Case #_tb_widget_paste
            ;             If StartEnum( *g0 )
            ;                If widgets( )\anchors\group\show 
            ;                   
            ;                   Debug "paste "+widgets( )\class
            ;                   Copy( widgets( ) )
            ;                EndIf
            ;                StopEnum( )
            ;             EndIf
            
         Case #_tb_widget_cut
         Case #_tb_widget_delete
            
      EndSelect
      
   EndProcedure
   
   Procedure ide_events( )
      Protected *g._s_WIDGET = EventWidget( )
      If WidgetEvent( ) = #__event_Up
         If a_anchors( )\group\show
            DisableBarButtons( ide_toolbar, 0 )
         Else
            DisableBarButtons( ide_toolbar, 1 )
         EndIf
      Else
         Debug ""+#PB_Compiler_Procedure +" "+ ClassFromEvent( WidgetEvent( )) +" "+ *g\class
      EndIf
   EndProcedure
   
   If Open(0, 0, 0, 700, 320, "MDI", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
      ide_toolbar = CreateBar( root( ), #PB_ToolBar_Small )
      SetClass( ide_toolbar, "ide_toolbar")
      
      If ide_toolbar
         BarSeparator( )
         BarButton( #_tb_group_select, CatchImage( #PB_Any,?image_group ), #PB_ToolBar_Toggle ) 
         ;
         ;    SetItemAttribute( widget( ), #_tb_group_select, #PB_Button_Image, CatchImage( #PB_Any,?image_group_un ) )
         ;    SetItemAttribute( widget( ), #_tb_group_select, #PB_Button_PressedImage, CatchImage( #PB_Any,?image_group ) )
         ;
         BarSeparator( )
         BarButton( #_tb_group_left, CatchImage( #PB_Any,?image_group_left ) )
         BarButton( #_tb_group_right, CatchImage( #PB_Any,?image_group_right ) )
         BarSeparator( )
         BarButton( #_tb_group_top, CatchImage( #PB_Any,?image_group_top ) )
         BarButton( #_tb_group_bottom, CatchImage( #PB_Any,?image_group_bottom ) )
         BarSeparator( )
         BarButton( #_tb_group_width, CatchImage( #PB_Any,?image_group_width ) )
         BarButton( #_tb_group_height, CatchImage( #PB_Any,?image_group_height ) )
         BarSeparator( )
         BarSeparator( )
         BarButton( #_tb_widget_copy, CatchImage( #PB_Any,?image_new_widget_copy ) )
         BarButton( #_tb_widget_cut, CatchImage( #PB_Any,?image_new_widget_cut ) )
         BarButton( #_tb_widget_paste, CatchImage( #PB_Any,?image_new_widget_paste ) )
         BarSeparator( )
         BarButton( #_tb_widget_delete, CatchImage( #PB_Any,?image_new_widget_delete ) )
         BarSeparator( )
         BarSeparator( )
         
         ide_popup_lenguage = OpenSubBar("[LENGUAGE]")
         If ide_popup_lenguage
            BarItem(#_tb_lng_ENG, "ENG")
            BarItem(#_tb_lng_RUS, "RUS")
            BarItem(#_tb_lng_FRENCH, "FRENCH")
            BarItem(#_tb_lng_GERMAN, "GERMAN")
         EndIf
         CloseSubBar( )
         CloseList( ) 
         
         DisableBarButtons( ide_toolbar, 1 )
         Bind( ide_toolbar, @ide_toolbar_events( ) )
      EndIf
      
      
      Define i,*t1,*t2
      *t1=Tree( 15,15,80,120 )
      For i=0 To 100
         AddItem( *t1, -1, Str(i)+"item")
      Next
      *t2=Tree( 15,140,80,120 )
      For i=0 To 100
         AddItem( *t2, -1, Str(i)+"item")
      Next
      SetState( *t1, 3)
      ;SetItemState( *t1, 3, #PB_Tree_Selected )
      ;SetActive( *t1)
      
      Define MDI = MDI(100, 10, 680, 275) ;, #PB_MDI_AutoSize) ; as they will be sized automatically
      a_init( MDI )                       ;, 0 )
      
      ; FORM_1
      *g1 = AddItem( MDI, -1, "form_0" )
      Button( 15,35,100,20,"button_0" )
      Button( 30,65,100,30,"button_1" )
      Disable(Button( 45,100,100,40,"button_2" ),1)
      
      Button( 175,35,100,20,"button_3" )
      Button( 160,65,100,30,"button_4" )
      Button( 150,100,100,40,"button_5" )
      
      ; FORM2
      *g2 = AddItem( MDI, -1, "form_0" )
      Button( 15,35,100,20,"button_0" )
      Button( 30,65,100,30,"button_1" )
      Disable(Button( 45,100,100,40,"button_2" ),1)
      
      Button( 175,35,100,20,"button_3" )
      Button( 160,65,100,30,"button_4" )
      Button( 150,100,100,40,"button_5" )
      ; Resize( *g2, X(*g1)+Width(*g1), #PB_Ignore, #PB_Ignore, #PB_Ignore) ; BUG
      Resize( *g2, X(*g1, #__c_container)+Width(*g1, #__c_frame), Y(*g1, #__c_container), #PB_Ignore, #PB_Ignore )
      
      ;;test_focus_set = 1
      Debug "-"
      SetActive( MDI )
      a_set(*g2)
      Debug "--"
      
      Bind( root(), @ide_events( ), #__event_focus )
      Bind( root(), @ide_events( ), #__event_lostfocus )
      Bind( root(), @ide_events( ), #__event_Up )
      
      Repeat : Until WaitWindowEvent( ) = #PB_Event_CloseWindow
      
      ;\\ include images
      DataSection   
         IncludePath "ide/include/images"
         
         image_new_widget_delete:    : IncludeBinary "16/delete.png"
         image_new_widget_paste:     : IncludeBinary "16/paste.png"
         image_new_widget_copy:      : IncludeBinary "16/copy.png"
         image_new_widget_cut:       : IncludeBinary "16/cut.png"
         
         image_group:            : IncludeBinary "group/group.png"
         image_group_un:         : IncludeBinary "group/group_un.png"
         image_group_top:        : IncludeBinary "group/group_top.png"
         image_group_left:       : IncludeBinary "group/group_left.png"
         image_group_right:      : IncludeBinary "group/group_right.png"
         image_group_bottom:     : IncludeBinary "group/group_bottom.png"
         image_group_width:      : IncludeBinary "group/group_width.png"
         image_group_height:     : IncludeBinary "group/group_height.png"
      EndDataSection
   EndIf
   
CompilerEndIf


;- DEMO
CompilerIf #PB_Compiler_IsMainFile = 99
   
   EnableExplicit
   UseWidgets( )
   
   Enumeration
      #window_0
      #window_1
   EndEnumeration
   
   CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
      LoadFont(6, "Arial", 21)
      
   CompilerElse
      LoadFont(6, "Arial", 17)
      
   CompilerEndIf
   
   Global view, size_value, pos_value, grid_value, back_color, frame_color, size_text, pos_text, grid_text
   Define i
   Define *w._s_WIDGET, *g._s_WIDGET, editable.q = #__flag_BorderFlat
   
   Procedure anchor_events( )
      Protected change
      Protected *this._s_widget = EventWidget( )
      
      Select WidgetEvent( )
         Case #__event_Free
            ProcedureReturn #True
            
         Case #__event_Close
            ProcedureReturn #True
            
         Case #__event_LeftClick
            Select *this
               Case frame_color
                  
               Case back_color
                  
            EndSelect
            
         Case #__event_Focus
            If *this\anchors
               Debug "a_FocusStatusChange"
               If size_value
                  SetState(size_value, a_getsize(*this) )
               EndIf
               
               If pos_value
                  SetState(pos_value, a_getpos(*this) )
               EndIf
               
               If grid_value
                  SetState(grid_value, DPIUnScaled(mouse( )\steps) )
               EndIf
               
               change = 1
            EndIf
            
         Case #__event_Change
            Select *this
               Case size_value
                  If GetState(*this) <> a_getsize(a_focused( ))
                     a_set( a_focused( ), #__a_full, GetState(*this), a_getpos(a_focused( )) )
                  EndIf
                  
               Case pos_value
                  If GetState(*this) <> a_getpos(a_focused( ))
                     a_set( a_focused( ), #__a_full, a_getsize(a_focused( )), GetState(*this))
                  EndIf
                  
               Case grid_value
                  mouse( )\steps = DPIScaled(GetState(grid_value))
                  
            EndSelect
            
            change = 1
            
      EndSelect
      
      If change
         If a_focused( )
            ; SetState(grid_value, DPIUnScaled(mouse( )\steps))
            ; SetState(size_value, a_getsize(a_focused( )) )
            ; SetState(pos_value, a_getpos(a_focused( )) )
            
            SetText(grid_text, Str(GetState(grid_value)) )
            SetText(size_text, Str(GetState(size_value)) )
            SetText(pos_text, Str(GetState(pos_value)) )
         EndIf
      EndIf
      
   EndProcedure
   
   ;-\\ OPENWINDOW_0
   OpenWindow(#window_0, 0, 0, 424, 352+21+21, "AnchorsGadget", #PB_Window_SystemMenu )
   Define *root._s_WIDGET = Open(#window_0, 0, 0, 424): *root\class = "root": SetText(*root, "root")
   
   
   
   Define *toolbar = CreateBar( *root, #PB_ToolBar_Small )
   
   If *toolbar
      BarButton(0, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/New.png"))
      BarButton(1, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Open.png"), #__flag_BarNormal, "open")
      BarButton(2, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Save.png"));, #__flag_BarNormal, "save")
      
      BarSeparator( )
      
      BarButton(3, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Cut.png"))
      ; ToolTip(*toolbar, 3, "Cut")
      
      BarButton(4, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Copy.png"))
      ; ToolTip(*toolbar, 4, "Copy")
      
      BarButton(5, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Paste.png"))
      ; ToolTip(*toolbar, 5, "Paste")
      
      BarSeparator( )
      
      BarButton(6, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Find.png"))
      ; ToolTip(*toolbar, 6, "Find a document")
   EndIf
   
   ;BindWidgetEvent( *root, @HandlerEvents( ) )
   view = Container(10, 10, 406, 238, #PB_Container_Flat)
   SetBackgroundColor(view, RGB(213, 213, 213))
   
   Procedure ToolBarEvents( )
      Debug WidgetEventItem( )
   EndProcedure
   
   Define *toolbar = CreateBar( view, #__flag_BarSmall|#__flag_BarInlineText )
   
   If *toolbar
      OpenSubBar("Menu")
      BarItem(11, "Open")
      BarItem(12, "Save")
      ; BarItem(13, "Save as...")
      OpenSubBar("Save as...")
      BarItem(15, "Save as BMP")
      BarItem(16, "Save as PNG")
      BarItem(17, "Save as JPG")
      CloseSubBar( )
      BarSeparator( )
      BarItem(14, "Quit")
      CloseSubBar( )
      
      OpenSubBar("-Menu-")
      CloseSubBar( )
      
      OpenSubBar("2Menu")
      BarItem(21, "2Open")
      BarItem(22, "2Save")
      BarItem(23, "2Save as...")
      BarSeparator( )
      BarItem(24, "2Quit")
      CloseSubBar( )
      
      BarSeparator( )
      ;BarButton(10, Loadimage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/New.png"), #__flag_BarNormal, "New") ;: Debug widget( )\class
      BarButton(1, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Open.png"), #__flag_BarNormal, "Open")
      ;BarButton(2, Loadimage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Save.png"), #__flag_BarNormal, "Save")
      BarSeparator( )
      
      BarButton(5, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Paste.png"))
      BarToolTip(*toolbar, 5, "Paste")
      
      BarButton(4, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Copy.png"))
      BarToolTip(*toolbar, 4, "Copy")
      
      BarButton(3, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Cut.png"))
      BarToolTip(*toolbar, 3, "Cut")
      
      BarSeparator( )
      
      BarButton(6, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Find.png"))
      BarToolTip(*toolbar, 6, "Find a document")
      
      OpenSubBar("3Menu")
      BarItem(31, "3Open")
      BarItem(32, "3Save")
      BarItem(33, "3Save as...")
      BarSeparator( )
      BarItem(34, "3Quit")
      CloseSubBar( )
      
      DisableBarButton(*toolbar, 2, 1) ; Disable the button '2'
      Bind( *toolbar, @ToolBarEvents( ) )
   EndIf
   
   a_init( view, 10 )
   Define *a0._s_WIDGET = Button( 10, 10, 60, 60, "Button" )
   Define *a1._s_WIDGET = Panel( 5 + 170, 5 + 140, 160, 160, #__flag_nogadgets )
   ;Define *a2._s_WIDGET = Container( 50,45,135,95, #__flag_nogadgets )
   Define *a2._s_WIDGET = ScrollArea( 50, 45, 135, 95, 300, 300, 1, #__flag_nogadgets )
   Define *a3._s_WIDGET = Image( 150, 110, 60, 60, -1 )
   
   a_set( *a0, -1, (10))
   a_set( *a3, -1, (10))
   
   CloseList( )
   size_value  = Track(56, 262, 240, 26, 0, 30, #PB_TrackBar_Ticks)
   pos_value   = Track(56, 292, 240, 26, 0, 30, #PB_TrackBar_Ticks)
   grid_value  = Track(56, 320, 240, 26, 5, 15, #PB_TrackBar_Ticks)
   back_color  = Button(304, 264, 112, 32, "BackColor")
   frame_color = Button(304, 304, 112, 32, "FrameColor")
   size_text   = Text(8, 256, 40, 24, "0")
   pos_text    = Text(8, 288, 40, 24, "0")
   grid_text   = Text(8, 320, 40, 24, "0")
   
   If a_focused( )
      SetState(grid_value, DPIUnScaled(mouse( )\steps) )
      SetState(size_value, a_getsize(a_focused( )) )
      SetState(pos_value, a_getpos(a_focused( )) )
   EndIf
   
   
   Bind( root( ), @anchor_events( ) )
   
   ;\\Close( )
   
   
   ;-\\ OPENWINDOW_1
   OpenWindow(#window_1, 0, 0, 800, 600, "PanelGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered, WindowID(#window_0))
   
   ;\\ Open root0
   Define *root0._s_WIDGET = Open(#window_1, 10, 10, 300 - 20, 300 - 20): *root0\class = "root0": SetText(*root0, "root0")
   ;BindWidgetEvent( *root2, @HandlerEvents( ) )
   Procedure TestHandler()
      Debug "Test menu event"
   EndProcedure
   
   Procedure QuitHandler()
      Debug "Quit menu event"
      ; End
   EndProcedure
   
   Global *menu = CreateBar( *root0 ) : SetClass(*menu, "*root_MenuBar" )
   If *menu
      SetBackgroundColor( *menu, $FFC8F0EC )
      
      BarTitle("Title-1")
      BarItem(1, "title-1-item-1")
      BarSeparator( )   
      ;
      OpenSubBar("title-1-sub-item")
      BarItem(3, "title-1-item")
      BarSeparator( )
      ;
      OpenSubBar("title-2-sub-item")   
      BarItem(13, "title-2-item")
      BarSeparator( )
      ;
      OpenSubBar("title-3-sub-item")   
      BarItem(23, "title-3-item")
      CloseSubBar( ) 
      ;
      BarSeparator( )
      BarItem(14, "title-2-item")
      CloseSubBar( ) 
      ;
      BarSeparator( )
      BarItem(4, "title-1-item")
      CloseSubBar( ) 
      ;
      BarSeparator( )
      BarItem(2, "title-1-item-2")
      
      BarTitle("Title-2")
      ;    BarItem(5, "title-2-item-1")
      ;    BarItem(6, "title-2-item-2")
      
      BarTitle("Title-event-test")
      BarItem(7, "test")
      BarSeparator( )
      BarItem(8, "quit")
      
      BarTitle("Title-4")
      BarItem(9, "title-4-item-1")
      BarItem(10, "title-4-item-2")
      
      Bind(*menu, @TestHandler(), -1, 7)
      Bind(*menu, @QuitHandler(), -1, 8)
   EndIf
   
   *toolbar = CreateBar( *root0, #__flag_BarSmall|#__flag_BarText |#__flag_BarInlineText)
   If *toolbar
      SetBackgroundColor( *toolbar, $FFC8ECF0 )
      
      BarButton(0, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/New.png"))
      BarButton(1, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Open.png"), #__flag_BarNormal, "open")
      BarButton(2, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Save.png"));, #__flag_BarNormal, "save")
      
      BarSeparator( )
      
      BarButton(3, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Cut.png"))
      ; ToolTip(*toolbar, 3, "Cut")
      
      BarButton(4, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Copy.png"))
      ; ToolTip(*toolbar, 4, "Copy")
      
      BarButton(5, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Paste.png"))
      ; ToolTip(*toolbar, 5, "Paste")
      
      BarSeparator( )
      
      BarButton(6, LoadImage(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/ToolBar/Find.png"))
      ; ToolTip(*toolbar, 6, "Find a document")
      
   EndIf
   
   Global *popupmenu = CreatePopupBar( )
   If *popupmenu                  ; creation of the pop-up menu begins...
      BarItem(1, "Open")          ; You can use all commands for creating a menu
      BarItem(2, "Save")          ; just like in a normal menu...
      BarItem(3, "Save as")
      BarItem(4, "event-Quit")
      BarSeparator( )
      OpenSubBar("Recent files")
      BarItem(5, "PureBasic.exe")
      BarItem(6, "event-Test")
      CloseSubBar( )
   EndIf
   
   Bind(*popupmenu, @TestHandler(), #__event_LeftClick, 6)
   Bind(*popupmenu, @QuitHandler(), #__event_LeftClick, 4)
   
   
   ;\\
   Global *button_panel = Panel(10, 10, 200 + 60, 180)
   Define Text.s, m.s   = #LF$, a
   AddItem(*button_panel, -1, "1")
   *g = Editor(0, 0, 0, 0, #__flag_gridlines | #__flag_autosize)
   ;*g                 = Editor(10, 10, 200 + 60, 200, #__flag_gridlines);, #__flag_autosize)
   ;    Text.s = "This is a long line." + m.s +
   ;             "Who should show." + m.s +
   ;             m.s +
   ;             m.s +
   ;             m.s +
   ;             "I have to write the text in the box or not." + m.s +
   ;             m.s +
   ;             m.s +
   ;             m.s +
   ;             "The string must be very long." + m.s +
   ;             "Otherwise it will not work."
   ;    
   ;    SetText(*g, Text.s)
   ;    For a = 0 To 2
   ;       AddItem(*g, a, Str(a) + " Line " + Str(a))
   ;    Next
   ;    AddItem(*g, 7 + a, "_")
   ;    For a = 4 To 6
   ;       AddItem(*g, a, Str(a) + " Line " + Str(a))
   ;    Next
   Define Text.s, m.s=#LF$
   
   Text.s = "This is a long line." + m.s +
            "Who should show." + m.s +
            m.s +
            m.s +
            "I have to write the text in the box or not." + m.s +
            m.s +
            m.s +
            "The string must be very long." + m.s +
            "Otherwise it will not work."
   SetText(*g, Text.s)
   AddItem(*g, 0, "add line first")
   AddItem(*g, 4, "add line "+Str(4))
   AddItem(*g, 8, "add line "+Str(8))
   AddItem(*g, -1, "add line last")
   
   ;\\
   AddItem(*button_panel, -1, "2")
   *g = Tree(0, 0, 0, 0, #__flag_gridlines | #__flag_autosize)
   a  = - 1
   AddItem(*g, a, "This is a long row.")
   AddItem(*g, a, "Who should show.")
   AddItem(*g, a, "")
   AddItem(*g, a, "")
   ; AddItem(*g, a, "")
   AddItem(*g, a, "I have to write the text in the box or not.")
   ; AddItem(*g, a, "")
   AddItem(*g, a, "")
   AddItem(*g, a, "")
   AddItem(*g, a, "The string must be very long.")
   AddItem(*g, a, "Otherwise it will not work.")
   ;    For a = 0 To 2
   ;       AddItem(*g, a, Str(a) + " Row " + Str(a))
   ;    Next
   ;    AddItem(*g, 7 + a, "_")
   ;    For a = 4 To 6
   ;       AddItem(*g, a, Str(a) + " Row " + Str(a))
   ;    Next
   AddItem(*g, 0, "add row first")
   AddItem(*g, 4, "add row "+Str(4))
   AddItem(*g, 8, "add row "+Str(8))
   AddItem(*g, -1, "add row last")
   
   ;\\
   AddItem(*button_panel, -1, "3")
   *g = ListIcon(0, 0, 0, 0, "Column_1", 90, #__flag_autosize | #__flag_RowFullSelect | #__Flag_GridLines | #__Flag_CheckBoxes) ;: *g = GetGadgetData(g)
   For a = 1 To 2
      AddColumn(*g, a, "Column_" + Str(a + 1), 90)
   Next
   For a = 0 To 15
      AddItem(*g, a, Str(a) + "_Column_1" + #LF$ + Str(a) + "_Column_2" + #LF$ + Str(a) + "_Column_3" + #LF$ + Str(a) + "_Column_4", 0)
   Next
   
   SetState(*button_panel, 2)
   CloseList( ) ; close panel lists
   
   *g = String(10, 200, 200, 50, "string gadget text text 1234567890 text text long long very long", #__flag_Textpassword | #__flag_TextRight)
   
   ;\\
   Global *button_item1, *button_item2, *button_menu
   Procedure button_tab_events( )
      Select GetText( EventWidget( ) )
         Case "popup menu"
            DisplayPopupBar( *popupmenu, EventWidget( ) );, CanvasMouseX( ), CanvasMouseY( ) )
            
         Case "1"
            SetState(*button_panel, 0)
            SetState(*button_item2, 0)
         Case "2"
            SetState(*button_panel, 1)
            SetState(*button_item1, 0)
      EndSelect
   EndProcedure 
   
   *button_menu = Button( 120, 5, 150, 25, "popup menu")
   Bind(*button_menu, @button_tab_events( ), #__event_Down )
   *button_item1 = Button( 220, 200, 25, 50, "1", #PB_Button_Toggle)
   *button_item2 = Button( 220 + 25, 200, 25, 50, "2", #PB_Button_Toggle)
   Bind(*button_item1, @button_tab_events( ), #__event_Down )
   Bind(*button_item2, @button_tab_events( ), #__event_Down )
   ;\\Close( )
   
   ;-\\ ROOT1
   Define *root1._s_WIDGET = Open(#window_1, 300, 10, 300 - 20, 300 - 20): *root1\class = "root1": SetText(*root1, "root1")
   ;BindWidgetEvent( *root1, @HandlerEvents( ) )
   Define *ToolBar = CreateBar( *root1, #__flag_BarSmall )
   If *toolbar
      OpenSubBar("Title-1")
      BarItem(1, "title-1-item-1")
      BarSeparator( )   
      OpenSubBar("title-1-sub-item")
      BarItem(3, "title-1-item")
      BarSeparator( )
      OpenSubBar("title-2-sub-item")   
      BarItem(13, "title-2-item")
      BarSeparator( )
      OpenSubBar("title-3-sub-item")   
      BarItem(23, "title-3-item")
      CloseSubBar( ) 
      BarSeparator( )
      BarItem(14, "title-2-item")
      CloseSubBar( ) 
      BarSeparator( )
      BarItem(4, "title-1-item")
      CloseSubBar( ) 
      BarSeparator( )
      BarItem(2, "title-1-item-2")
      CloseSubBar( )
      
      ;
      BarSeparator( )
      OpenSubBar("Title-2")
      CloseSubBar( )
      BarSeparator( )
      
      ;
      OpenSubBar("Title-event-test")
      BarItem(7, "test")
      BarSeparator( )
      BarItem(8, "quit")
      CloseSubBar( )
      
      ;
      OpenSubBar("Title-4")
      BarItem(9, "title-4-item-1")
      BarItem(10, "title-4-item-2")
      CloseSubBar( )
      
      Bind(*ToolBar, @TestHandler(), -1, 7)
      Bind(*ToolBar, @QuitHandler(), -1, 8)
   EndIf
   
   ;\\Close( )
   
   ;-\\ ROOT2
   Define *root2._s_WIDGET = Open(#window_1, 10, 300, 300 - 20, 300 - 20): *root2\class = "root2": SetText(*root2, "root2")
   ;BindWidgetEvent( *root2, @HandlerEvents( ) )
   
   HyperLink( 10, 10, 80, 30, "HyperLink", RGB(105, 245, 44) )
   String( 60, 20, 60, 30, "String" )
   *w = ComboBox( 108, 30, 152, 30, #PB_ComboBox_Editable )
   For i = 1 To 100;0000
      AddItem(*w, i, "text-" + Str(i))
   Next
   SetState( *w, 3 )
   ;\\Close( )
   
   
   ;-\\ ROOT3
   Define *root3._s_WIDGET = Open(#window_1, 300, 300, 300 - 20, 300 - 20): *root3\class = "root3": SetText(*root3, "root3")
   ;BindWidgetEvent( *root3, @HandlerEvents( ) )
   ;\\Close( )
   
   ;-\\ ROOT4
   Define *root4._s_WIDGET = Open(#window_1, 590, 10, 200, 600 - 20): *root4\class = "root4": SetText(*root4, "root4")
   ;BindWidgetEvent( *root4, @HandlerEvents( ) )
   ;\\Close( )
   
   
   
   Define count = 2;0000
   #st          = 1
   Global mx    = #st, my = #st
   
   Define time = ElapsedMilliseconds( )
   
   Global *c, *p, *panel._s_WIDGET
   Procedure hide_show_panel_events( )
      Select WidgetEvent( )
         Case #__event_LeftClick
            
            Select GetText( EventWidget( ) )
               Case "hide_children"
                  Hide(*p, 1)
                  ; Disable(*c, 1)
                  
               Case "show_children"
                  Hide(*p, 0)
                  
               Case "hide_parent"
                  Hide(*c, GetState( EventWidget( ) ))
                  
            EndSelect
            
            ;         ;Case #__event_LeftUp
            ;         ClearDebugOutput( )
            ;         If StartEnum(*panel);root( ))
            ;           If Not Hide(widget( )) ;And GetParent(widget( )) = *panel
            ;             Debug " class - " + widget( )\class ;+" ("+ widget( )\item +" - parent_item)"
            ;           EndIf
            ;           StopEnum( )
            ;         EndIf
            
            
      EndSelect
   EndProcedure
   
   ;-\\ OPENROOT1
   OpenList( *root1 )
   *panel = Panel(20, 20, 180 + 40, 180 + 60, editable) : SetText(*panel, "1")
   AddItem( *panel, -1, "item_1" )
   ;Button( 20,20, 80,80, "item_1")
   *g = Editor(0, 0, 0, 0, #__flag_autosize|#__flag_Borderless|#__flag_Textwordwrap)
   ;    For a = 0 To 2
   ;       AddItem(*g, a, "Line " + Str(a))
   ;    Next
   ;    AddItem(*g, 3 + a, "")
   ;    AddItem(*g, 4 + a, ~"define W_0 = Window( 282, \"Window_0\" )")
   ;    AddItem(*g, 5 + a, "")
   ;    For a = 6 To 8
   ;       AddItem(*g, a, "Line " + Str(a))
   ;    Next
   
   Define Text.s, m.s=#LF$
   
   Text.s = "This is a long line." + m.s +
            "Who should show." + m.s +
            m.s +
            m.s +
            "I have to write the text in the box or not." + m.s +
            m.s +
            m.s +
            "The string must be very long." + m.s +
            "Otherwise it will not work."
   SetText(*g, Text.s)
   AddItem(*g, 0, "add line first")
   AddItem(*g, 4, "add line "+Str(4))
   AddItem(*g, 8, "add line "+Str(8))
   AddItem(*g, -1, "add line last")
   
   AddItem( *panel, -1, "(hide&show)-test" )
   ; Button( 10,10, 80,80, "item_2")
   Bind(CheckBox( 5, 5, 95, 22, "hide_parent"), @hide_show_panel_events( ))
   Bind(Option( 5, 30, 95, 22, "hide_children"), @hide_show_panel_events( ))
   Bind(Option( 5, 55, 95, 22, "show_children", #PB_Button_Toggle ), @hide_show_panel_events( ))
   ;SetState(widget( ), 1)
   
   *c = Panel(110, 5, 150, 155)
   AddItem(*c, -1, "0")
   *p = Panel(10, 5, 150, 65)
   AddItem(*p, -1, "item-1")
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Button(10, 5, 50, 25, "butt1")
   CloseList( )
   CloseList( )
   AddItem(*p, -1, "item-2")
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Button(10, 5, 50, 25, "butt2")
   CloseList( )
   CloseList( )
   AddItem(*c, -1, "1")
   CloseList( )
   
   Container(10, 75, 150, 55, #PB_Container_Flat)
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Button(10, 5, 50, 45, "butt1")
   CloseList( )
   CloseList( )
   CloseList( )
   CloseList( )
   
   AddItem( *panel, -1, "(enter&leave)-test" ) : SetItemFont(*panel, 2, 6)
   
   Procedure enter_leave_containers_events( )
      Protected.b repaint
      Protected.l colorback = colors::*this\blue\fore,
               colorframe = colors::*this\blue\frame,
               colorback1 = $ff00ff00,
               colorframe1 = $ff0000ff
      
      Select WidgetEvent( )
         Case #__event_MouseEnter,
              #__event_MouseLeave,
              #__event_MouseMove
            
            ;          Case #__event_StatusChange
            ;                Debug 77
            If EventWidget( ) <> root( )
               If EventWidget( )\enter
                  If EventWidget( )\color\frame <> colorframe1
                     repaint                    = 1
                     EventWidget( )\color\frame = colorframe1
                  EndIf
                  If EventWidget( )\color\back <> colorback1
                     repaint                   = 1
                     EventWidget( )\color\back = colorback1
                  EndIf
               Else
                  If EventWidget( )\color\back = colorback1
                     repaint                   = 1
                     EventWidget( )\color\back = colorback
                  EndIf
                  If EventWidget( )\color\frame = colorframe1
                     repaint                    = 1
                     EventWidget( )\color\frame = colorframe
                  EndIf
               EndIf
            EndIf
            
      EndSelect
      
      If repaint
         ; Debug "change state"
      EndIf
   EndProcedure
   
   SetText(ScrollArea(5, 5, 210, 210, 500, 500, 1, editable), "4")
   SetText(Container(70, 10, 70, 180, #__Flag_NoGadgets | editable), "5")
   SetText(Container(40, 20, 180, 180, editable), "6")
   Define seven = Container(20, 20, 180, 180, editable)
   SetText(seven, "      7")
   
   SetText(Container(5, 30, 180, 30, #__Flag_NoGadgets | editable), "     8")
   SetText(Container(5, 45, 180, 30, #__Flag_NoGadgets | editable), "     9")
   SetText(Container(5, 60, 180, 30, #__Flag_NoGadgets | editable), "     10")
   
   CloseList( ) ; 7
   CloseList( ) ; 6
   SetText(Container(10, 45, 70, 180, editable), "11")
   SetText(Container(10, 10, 70, 30, #__Flag_NoGadgets | editable), "12")
   SetText(Container(10, 20, 70, 30, #__Flag_NoGadgets | editable), "13")
   SetText(Container(10, 30, 170, 130, #__Flag_NoGadgets | editable), "14")
   
   SetText(Container(10, 45, 70, 180, editable), "15")
   SetText(Container(10, 5, 70, 180, editable), "16")
   SetText(Container(10, 5, 70, 180, editable), "17")
   SetText(Container(10, 10, 70, 30, #__Flag_NoGadgets | editable), "18")
   CloseList( ) ; 17
   CloseList( ) ; 16
   CloseList( ) ; 15
   CloseList( ) ; 11
   CloseList( ) ; 1
   
   ;\\
   OpenList( seven )
   ;   Define split_1 = Container(0,0,0,0, #__Flag_NoGadgets|editable)
   ;   Define split_2 = Container(0,0,0,0, #__Flag_NoGadgets|editable)
   ;   Define split_3 = Splitter(5, 80, 180, 50,split_1,split_2,editable)
   ;   Define split_4 = Container(0,0,0,0, #__Flag_NoGadgets|editable)
   ;   SetText(Splitter(5, 80, 180, 50,split_3,split_4,#PB_Splitter_Vertical|editable), "10-1")
   SetText(Container( - 5, 80, 180, 50, #__Flag_NoGadgets | editable), "container-7")
   CloseList( ) ; 7
   
   ;\\
   If *panel\root
      If StartEnum( *panel, 2 )
         ;Bind(widget( ), @enter_leave_containers_events( ), #__event_StatusChange)
         Bind(widget( ), @enter_leave_containers_events( ), #__event_MouseEnter)
         Bind(widget( ), @enter_leave_containers_events( ), #__event_MouseMove)
         Bind(widget( ), @enter_leave_containers_events( ), #__event_MouseLeave)
         StopEnum( )
      EndIf
   EndIf
   
   ;\\
   ;OpenList( *panel )
   AddItem( *panel, -1, "item_4" )
   Button( 30, 30, 80, 80, "item_4")
   AddItem( *panel, -1, "item_5" )
   Button( 40, 40, 80, 80, "item_5")
   CloseList( ) ; *panel
   CloseList( ) ; *root1
   
   ; SetState( *panel, 2 )
   
   ;-\\ OPENROOT2
   OpenList( *root2 )
   SetText(*root2, "*root2" )
   
   Global Button_0, Button_1, Button_2, Button_3, Button_4, Button_5, Splitter_0, Splitter_1, Splitter_2, Splitter_3, Splitter_4, Splitter_5
   ;   Button_0 = Button(0, 0, 0, 0, "Button 0") ; as they will be sized automatically
   ;   Button_1 = Button(0, 0, 0, 0, "Button 1") ; as they will be sized automatically
   Splitter_0 = Progress(0, 0, 0, 0, 0, 100, #__flag_Vertical) : SetState(Splitter_0, 50);widget::Splitter(0, 0, 0, 0, Button_0, Button_1, #PB_Splitter_Vertical|#PB_Splitter_FirstFixed)
   
   
   Button_2 = ComboBox( 20, 20, 150, 40)
   For i = 1 To 100;0000
      AddItem(Button_2, i, "text-" + Str(i))
   Next
   SetState( Button_2, 3 )
   
   ;Button_2 = Button(0, 0, 0, 0, "Button 2") ; No need to specify size or coordinates
   Button_3   = Button(0, 0, 0, 0, "Button 3") ; as they will be sized automatically
   Splitter_1 = widget::Splitter(0, 0, 0, 0, Button_2, Button_3, #PB_Splitter_Vertical | #PB_Splitter_SecondFixed)
   widget::SetAttribute(Splitter_1, #PB_Splitter_FirstMinimumSize, 40)
   widget::SetAttribute(Splitter_1, #PB_Splitter_SecondMinimumSize, 40)
   ;Button_4 = Button(0, 0, 0, 0, "Button 4") ; No need to specify size or coordinates
   Button_4   = Progress(0, 0, 0, 0, 0, 100, #__flag_Invert) : SetState(Button_4, 50) ; No need to specify size or coordinates
   Splitter_2 = widget::Splitter(0, 0, 0, 0, Splitter_1, Button_4)
   Button_5   = Progress(0, 0, 0, 0, 0, 100) : SetState(Button_5, 50) ; as they will be sized automatically
   Splitter_3 = widget::Splitter(0, 0, 0, 0, Button_5, Splitter_2)
   Splitter_4 = widget::Splitter(0, 0, 0, 0, Splitter_0, Splitter_3, #PB_Splitter_Vertical)
   Button_0 = Progress(0, 0, 0, 0, 0, 100, #__flag_Invert|#__flag_Vertical) : SetState(Button_0, 50)
   Splitter_5 = widget::Splitter(10, 70, 250, 120, Button_0, Splitter_4, #PB_Splitter_Vertical)
   SetState(Splitter_5, 50)
   SetState(Splitter_4, 50)
   SetState(Splitter_3, 40)
   SetState(Splitter_1, 50)
   
   Spin(10, 195, 80, 25, 5, 30, #__flag_TextLeft )
   Spin(10, 225, 80, 25, 5, 30, #__flag_TextCenter|#__spin_mirror)
   Spin(10, 255, 80, 25, 5, 30, #__flag_TextRight|#__flag_invert)
   
   Spin(95, 195, 80, 25, 5, 30, #__flag_TextLeft|#__spin_Plus )
   Spin(95, 225, 80, 25, 5, 30, #__flag_TextCenter|#__spin_Plus|#__spin_mirror)
   Spin(95, 255, 80, 25, 5, 30, #__flag_TextRight|#__spin_Plus|#__flag_invert)
   
   Spin(180, 195, 80, 25, 5, 30, #__spin_vertical|#__flag_TextRight )
   Spin(180, 225, 80, 25, 5, 30, #__spin_vertical|#__flag_TextCenter|#__spin_mirror)
   Spin(180, 255, 80, 25, 5, 30, #__spin_vertical|#__flag_TextRight|#__flag_invert)
   
   ;-\\ OPENROOT3
   OpenList( *root3 )
   Define *tree = Tree( 10, 20, 150, 200, #__flag_checkboxes)
   For i = 1 To 100;0000
      AddItem(*tree, i, "text-" + Str(i))
   Next
   SetState(*tree, 5 - 1)
   Container( 70, 180, 80, 80, #PB_Container_Single ): CloseList( )
   SetItemFont(*tree, 1, 6)
   SetItemFont(*tree, 4, 6)
   
   ;\\
   *w = Tree( 100, 30, 100, 260 - 20 + 300, #__flag_Borderless | #__flag_RowMultiSelect) ; |#__flag_gridlines
   SetBackgroundColor( *w, $FF07EAF6 )
   For i = 1 To 10;00000
      AddItem(*w, i, "text-" + Str(i))
   Next
   SetState(*w, i - 1 )
   SetItemFont(*w, 4, 6)
   SetItemFont(*w, 5, 6)
   
   ;\\
   *w = Tree( 180, 40, 100, 260 - 20 + 300, #__flag_checkboxes|#__flag_RowClickSelect )
   For i = 1 To 100;0000
      If (i & 5)
         AddItem(*w, i, "text-" + Str(i), -1, 1 )
      Else
         AddItem(*w, i, "text-" + Str(i))
      EndIf
   Next
   SetFont(*w, 6)
   
   Debug "--------  time --------- " + Str(ElapsedMilliseconds( ) - time)
   
   
   ;-\\ OPENROOT4
   Define *window._s_WIDGET
   Define i, Y = 5
   OpenList( *root4 )
   For i = 1 To 4
      Window(5, Y, 150, 95 + 2, "Window_" + Trim(Str(i)), #PB_Window_SystemMenu | #PB_Window_MaximizeGadget)
      ;Container(5, y, 150, 95 + 2)
      If i = 2
         Disable( widget( ), 1)
      EndIf
      Container(5, 5, 120 + 2, 85 + 2) ;, #PB_Container_Flat)
      If i = 3
         CheckBox(10, 10, 100, 30, "CheckBox_" + Trim(Str(i + 10)))
         SetState( widget( ), 1 )
      ElseIf i = 4
         Option(10, 10, 100, 30, "Option_" + Trim(Str(i + 10)))
      Else
         Button(10, 10, 100, 30, "Button_" + Trim(Str(i + 10)))
      EndIf
      If i = 3
         Disable( widget( ), 1)
      EndIf
      If i = 4 Or i = 3
         Option(10, 45, 100, 30, "Option_" + Trim(Str(i + 20)))
         SetState( widget( ), 1 )
      Else
         Button(10, 45, 100, 30, "Button_" + Trim(Str(i + 20)))
      EndIf
      If i = 3
         Disable( widget( ), 1)
      EndIf
      CloseList( )
      ;CloseList( )
      Y + 130
   Next
   
   WaitClose( )
   
CompilerEndIf
; IDE Options = PureBasic 6.21 (Windows - x64)
; CursorPosition = 24794
; FirstLine = 23342
; Folding = -----------------------------------Hsff---++----fv8--+-------------------------------4------------0--8-8------08----------br----+------------------------------------
; EnableXP
; DPIAware
; Executable = widgets-.app.exe