;  ^^
; (oo)\__________
; (__)\          )\/\
;      ||------w||
;      ||       ||
; 43025500559246
; Regex Trim(Arguments)
; https://regex101.com/r/zxBLgG/2
; ~"((?:(?:\".*?\")|(?:\\(.*?\\))|[^,])+)"
; ~"(?:\"(?:.*?)\"|(?:\\w*)\\s*\\((?:(?>[^( )]+|(?R))*)\\)|[\\^\\;\\/\\|\\!\\*\\w\\s\\.\\-\\+\\~\\#\\&\\$\\\\])+"
; #Button_0, ReadPreferenceLong("x", WindowWidth(#Window_0)/WindowWidth(#Window_0)+20), 20, WindowWidth(#Window_0)-(390-155), WindowHeight(#Window_0) - 180 * 2, GetWindowTitle(#Window_0) + Space( 1 ) +"("+ "Button" + "_" + Str(1)+")"

; Regex Trim(Captions)
; https://regex101.com/r/3TwOgS/1
; ~"((?:\"(.*?)\"|\\((.*?)\\)|[^+\\s])+)"
; ~"(?:(\\w*)\\s*\\(((?>[^( )\"]+|(?R))+)\\))|\"(.*?)\"|[^+\\s]+"
; ~"(?:\"(.*?)\"|(\\w*)\\s*\\(((?>[^( )\"]+|(?R))+)\\))|([\\d]+)|(\b[\\w]+)|([\\#\\w]+)|([\\/])|([\\*])|([\\-])|([\\+])"
; ~"(?:(?:\"(.*?)\"|(\\w*)\\s*\\(((?>[^( )\"]+|(?R))*)\\))|([\\d]+)|(\b[\\w]+)|([\\#\\w]+)|([\\*\\w]+)|[\\.]([\\w]+)|([\\\\w]+)|([\\/])|([\\*])|([\\-])|([\\+]))"
; Str(ListIndex(List( )))+"Число между"+Chr(10)+"это 2!"+
; ListIndex(List( )) ; вот так не работает

; ; https://regex101.com/r/RFubVd/14
; ; #Эта часть нужна для поиска переменных
; ; #Например, "Window" в выражении "Window=OpenWindow(#PB_Any...)"
; ; (?:(\b[^:\n\s]+)\s*=\s*)?
; ;
; ; #Эта часть для поиска процедур
; ; (?:\".*\"|(\w+)\s*\(((?>(?R)|[^)(])*)\))
; ;
; ; #После выполнения:
; ; # - В группе \1 будет находиться название переменной
; ; # - В группе \2 - название процедуры
; ; # - В группе \3 - перечень всех аргументов найденной процедуры
; ; ~"(?:(\\b[^:\\n\\s]+)\\s*=\\s*)?(?:\".*\"|(\\w+)\\s*\\(((?>(?R)|[^)(])*)\\))"
#RegEx_Pattern_FindFunction = ~"(?P<Comments>;).*|(?:(?P<Handle>\\b[^:\\n\\s]+)\\s*=\\s*)?(?:\".*\"|(?P<Function>\\w+)\\s*\\((?P<Arguments>(?>(?R)|[^)(])*)\\))" ; "(;).*|\b(?:.*(=)\s*\w*\(.*\)|([A-Za-z0-9_.]*)\b[^:\n\(]*\s*\((?>[^)(]|(?R))*\))"

; Найти
; https://regex101.com/r/u60Wqt/1
; https://regex101.com/r/rQCwws/3
; https://regex101.com/r/RFubVd/22
; https://regex101.com/r/D4Jxuh/24
; https://regex101.com/r/mBkJTA/29

#RegEx_Pattern_Find = "" +
                      ; https://regex101.com/r/oIDfrI/2
"(?P<Comments>;).* |" +
; #Эта часть нужна для поиска переменных
; #Например, "Window" в выражении "Window=OpenWindow(#PB_Any...)"
"(?:(?P<Handle>[^:\n\s]+)\s*=\s*)?" +
"(?P<FuncString>" +
~"\".*\" |" +
; #Эта часть для поиска функций
"\b(?P<FuncName>\w+)\s*" +
; #Эта часть для поиска аргументов функции
"(?:\((?P<FuncArguments>(?>(?R)|[^()])*)\))" +
") |" +
; #Эта часть для поиска процедур
"(?P<StartPracedure>\bProcedure[.A-Za-z]* \s*" +
; #Эта часть для поиска имени процедуры
"(?P<PracName>\w*) \s*" +
; #Эта часть для поиска аргументов процедуры
"(?:\((?P<ProcArguments>(?>(?R)|[^()])*)\))) |" +
; #Эта часть для поиска конец процедуры
"(?P<StopProcedure>\bEndProcedure\b)"
;
; #После выполнения:
; # - В группе (Comments) будет находиться комментария
; # - В группе (Handle) будет находиться название переменной
; # - В группе (FunctionName) - название Функции
; # - В группе (FuncArguments) - перечень всех аргументов найденной Функции
; # - В группе (ProcedureName) - название процедуры
; # - В группе (ProcArguments) - перечень всех аргументов найденной процедуры


; ver: 3.0.0.1 ;
CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
   #path = "";/Users/As/Documents/GitHub/widget/"
CompilerElseIf #PB_Compiler_OS = #PB_OS_Linux
   #path = ""
CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
   #path = "";Z:\Documents\GitHub\Widget\"
CompilerEndIf

IncludePath #path

CompilerIf Not Defined( constants, #PB_Module )
   XIncludeFile "include/constants.pbi"
CompilerEndIf

CompilerIf Not Defined( structures, #PB_Module )
   XIncludeFile "include/structures.pbi"
CompilerEndIf

CompilerIf Not Defined( func, #PB_Module )
   XIncludeFile "include/func.pbi"
CompilerEndIf

CompilerIf Not Defined( colors, #PB_Module )
   XIncludeFile "include/colors.pbi"
CompilerEndIf

; fix all pb bug's
CompilerIf Not Defined( fix, #PB_Module )
   XIncludeFile "include/fix.pbi"
CompilerEndIf

;-  >>>
CompilerIf Not Defined( Widget, #PB_Module )
   DeclareModule Widget
      Global test_scrollbars_resize = 0
      Global test_scrollbars_reclip = 0
      Global test_scrollbars_draw   = 0
      Global test_startdrawing      = 0
      Global test_clip              = 0
      Global test_buttons_draw      = 0
      
      EnableExplicit
      UseModule constants
      UseModule structures
      
      CompilerIf Defined( fix, #PB_Module )
         UseModule fix
      CompilerElse
         Macro PB(Function)
            Function
         EndMacro
         
         Macro PB_(Function)
            Function
         EndMacro
      CompilerEndIf
      
      UseModule events
      
      ;-  ----------------
      ;-   DECLARE_macros
      ;-  ----------------
      Macro Debugger( _text_ = "" )
         CompilerIf #PB_Compiler_Debugger  ; Only enable assert in debug mode
            Debug " " + _macro_call_count_ + _text_ + "   ( debug >> " + #PB_Compiler_Procedure + " ( " + #PB_Compiler_Line + " ))"
            _macro_call_count_ + 1
         CompilerEndIf
      EndMacro
      
      ;- demo text
      Macro debug_position( _root_, _text_ = "" )
         Debug " " + _text_ + " - "
         ForEach _root_\children( )
            If _root_\children( ) <> _root_\children( )\root
               If _root_\children( )\BeforeWidget( ) And _root_\children( )\AfterWidget( )
                  Debug " - " + Str(ListIndex( _root_\children( ))) + " " + _root_\children( )\index + " ( " + _root_\children( )\BeforeWidget( )\class + " " + _root_\children( )\class + " " + _root_\children( )\AfterWidget( )\class + " )"
               ElseIf _root_\children( )\AfterWidget( )
                  Debug " - " + Str(ListIndex( _root_\children( ))) + " " + _root_\children( )\index + " ( -- " + _root_\children( )\class + " " + _root_\children( )\AfterWidget( )\class + " )"
               ElseIf _root_\children( )\BeforeWidget( )
                  Debug " - " + Str(ListIndex( _root_\children( ))) + " " + _root_\children( )\index + " ( " + _root_\children( )\BeforeWidget( )\class + " " + _root_\children( )\class + " -- )"
               Else
                  Debug " - " + Str(ListIndex( _root_\children( ))) + " " + _root_\children( )\index + " ( -- " + _root_\children( )\class + " -- ) "
               EndIf
               
               ;           If _root_\children( )\BeforeWidget( ) And _root_\children( )\AfterWidget( )
               ;             Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\index +" "+ _root_\children( )\BeforeWidget( )\class +"-"+ _root_\children( )\BeforeWidget( )\position +" "+ _root_\children( )\class +"-"+ _root_\children( )\position +" "+ _root_\children( )\AfterWidget( )\class +"-"+ _root_\children( )\AfterWidget( )\position
               ;           ElseIf _root_\children( )\AfterWidget( )
               ;             Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\index +" none "+ _root_\children( )\class +"-"+ _root_\children( )\position +" "+ _root_\children( )\AfterWidget( )\class +"-"+ _root_\children( )\AfterWidget( )\position
               ;           ElseIf _root_\children( )\BeforeWidget( )
               ;             Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\index +" "+ _root_\children( )\BeforeWidget( )\class +"-"+ _root_\children( )\BeforeWidget( )\position +" "+ _root_\children( )\class +"-"+ _root_\children( )\position +" none"
               ;           Else
               ;             Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\index +" none "+ _root_\children( )\class +"-"+ _root_\children( )\position + " none "
               ;           EndIf
               ;
               ;           ;         If _root_\children( )\BeforeWidget( ) And _root_\children( )\AfterWidget( )
               ;           ;           Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\index +" "+ _root_\children( )\BeforeWidget( )\class +" "+ _root_\children( )\class +" "+ _root_\children( )\AfterWidget( )\class
               ;           ;         ElseIf _root_\children( )\AfterWidget( )
               ;           ;           Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\index +" none "+ _root_\children( )\class +" "+ _root_\children( )\AfterWidget( )\class
               ;           ;         ElseIf _root_\children( )\BeforeWidget( )
               ;           ;           Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\index +" "+ _root_\children( )\BeforeWidget( )\class +" "+ _root_\children( )\class +" none"
               ;           ;         Else
               ;           ;           Debug " - "+ Str(ListIndex( _root_\children( ))) +" "+ _root_\children( )\index +" none "+ _root_\children( )\class + " none "
               ;           ;         EndIf
            EndIf
         Next
         Debug ""
      EndMacro
      
      
      ;-  Drag & Drop
      Macro EventDropX( ): DropX( ): EndMacro
      Macro EventDropY( ): DropY( ): EndMacro
      Macro EventDropWidth( ): DropWidth( ): EndMacro
      Macro EventDropHeight( ): DropHeight( ): EndMacro
      
      Macro EventDropType( ): DropType( ): EndMacro
      Macro EventDropAction( ): DropAction( ): EndMacro
      Macro EventDropPrivate( ): DropPrivate( ): EndMacro
      Macro EventDropFiles( ): DropFiles( ): EndMacro
      Macro EventDropText( ): DropText( ): EndMacro
      Macro EventDropImage( Image = - 1, Depth = 24 ): DropImage( Image, Depth ): EndMacro
      
      Macro DragType( )
         WidgetEvent( )\widget\dragstart
      EndMacro
      Macro DragText( Text, Actions = #PB_Drag_Copy ): DragText_( Text, Actions ): EndMacro
      Macro DragImage( Image, Actions = #PB_Drag_Copy ): DragImage_( Image, Actions ): EndMacro
      Macro DragFiles( Files, Actions = #PB_Drag_Copy ): DragFiles_( Files, Actions ): EndMacro
      Macro DragPrivate( PrivateType, Actions = #PB_Drag_Copy ): DragPrivate_( PrivateType, Actions ): EndMacro
      
      Macro EnableDrop( Widget, Format, Actions, PrivateType = 0 ) : DropEnable( Widget, Format, Actions, PrivateType ) : EndMacro
      Macro EnableGadgetDrop( Gadget, Format, Actions, PrivateType = 0 ) : DropEnable( Gadget, Format, Actions, PrivateType ) : EndMacro
      Macro EnableWindowDrop( Window, Format, Actions, PrivateType = 0 ) : DropEnable( Window, Format, Actions, PrivateType ) : EndMacro
      
      Declare.l DropX( )
      Declare.l DropY( )
      Declare.l DropWidth( )
      Declare.l DropHeight( )
      
      Declare.s DropFiles( )
      Declare.s DropText( )
      Declare.i DropType( )
      Declare.i DropAction( )
      Declare.i DropPrivate( )
      Declare.i DropImage( Image.i = -1, Depth.i = 24 )
      
      Declare.i DragText_( Text.S, Actions.b = #PB_Drag_Copy )
      Declare.i DragImage_( Image.i, Actions.b = #PB_Drag_Copy )
      Declare.i DragPrivate_( Type.i, Actions.b = #PB_Drag_Copy )
      Declare.i DragFiles_( Files.s, Actions.b = #PB_Drag_Copy )
      
      Declare.i DropEnable( *this, Format.l, Actions.b, PrivateType.i = 0 )
      
      
      ;-
      Macro allocate( _struct_name_, _struct_type_ = )
         _s_#_struct_name_#_struct_type_ = AllocateStructure( _s_#_struct_name_ )
      EndMacro
      
      ;- \\
      Macro __tabs( ): bar\_s( ): EndMacro
      ;Macro __rows( ): row\_s( ): EndMacro
      Macro __rows( ): columns( )\items( ): EndMacro
      
      Macro __events( ): widget::__gui\events( ): EndMacro
      Macro __roots( ): widget::__gui\roots( ): EndMacro
      Macro __widgets( ): __gui\children( ): EndMacro
      
      
      ;-\\
      Macro Root( ): widget::__gui\root: EndMacro
      ; Macro FirstRoot( ): first\root: EndMacro
      Macro LastRoot( ): last\root: EndMacro
      Macro AfterRoot( ): after\root: EndMacro
      Macro BeforeRoot( ): before\root: EndMacro
      Macro ChangeCurrentCanvas( _canvas_ )
         FindMapElement( widget::__roots( ), Str( _canvas_ ) )
         widget::Root( ) = widget::__roots( )
      EndMacro
      Macro PostEventRepaint( _root_ )
         If _root_
            If __gui\loop
               If Not Send( _root_, #__event_Repaint )
                  ; Debug "PostEventRepaint - ReDraw"
                  Redraw( _root_ )
               EndIf
            Else
               If _root_\canvas\repaint = 0
                  _root_\canvas\repaint = 1
                  If Not Send( _root_, #__event_Repaint )
                     PostEvent( #PB_Event_Repaint, _root_\canvas\window, #PB_All, #PB_All, _root_\canvas\gadgetID )
                  EndIf
               EndIf
            EndIf
         EndIf
      EndMacro
      Macro PostRepaint( _root_ )
         ;Debug #PB_Compiler_Procedure
         PostEventRepaint( _root_ )
      EndMacro
      
      ;-
      Macro Mouse( ): widget::__gui\mouse: EndMacro
      Macro Keyboard( ): widget::__gui\keyboard: EndMacro
      Macro Opened( ): widget::__gui\opened: EndMacro ; list opened widget
                                                      ;-
      Macro Popup( ): widget::__gui\sticky\box: EndMacro
      Macro PopupWindow( ): widget::__gui\sticky\window: EndMacro
      
      ;-
      Macro StatusBox( ): statusbox: EndMacro
      Macro CheckedBox( ): checkbox: EndMacro
      Macro ButtonBox( ): buttonbox: EndMacro
      
      ;
      Macro StringBox( ): stringbox: EndMacro
      Macro GroupBox( ): groupbox: EndMacro
      Macro TabBox( ): tab\widget: EndMacro
      ;-
      Macro EnteredTab( ): tab\entered: EndMacro         ; Returns mouse entered tab
      Macro PressedTab( ): tab\pressed: EndMacro         ; Returns mouse focused tab
      Macro FocusedTab( ): tab\focused: EndMacro         ; Returns mouse focused tab
      Macro OpenedTabIndex( ): index[1]: EndMacro        ;
      Macro FocusedTabIndex( ): index[2]: EndMacro       ;
      Macro AddedTabIndex( ): index[3]: EndMacro         ;
      
      ;-
      Macro TextChange( ): text\change: EndMacro   ; temp
      Macro ImageChange( ): image\change: EndMacro ; temp
      Macro AreaChange( ): area\change: EndMacro   ; temp
      Macro PageChange( ): page\change: EndMacro   ; temp
      Macro ThumbChange( ): thumb\change: EndMacro ; temp
      Macro WidgetChange( ): change: EndMacro      ; temp
      Macro TabChange( ): change: EndMacro         ; tab\change
      
      ;-
      Macro split_1( ) : gadget[1] : EndMacro ; temp
      Macro split_2( ) : gadget[2] : EndMacro ; temp
      Macro split_1_is( ): index[1]: EndMacro ; temp
      Macro split_2_is( ): index[2]: EndMacro ; temp
      
      ;-
      Macro MarginLine( ): row\margin: EndMacro ; temp
      Macro EnteredLine( ): row\entered: EndMacro; Returns mouse entered widget
      Macro PressedLine( ): row\pressed: EndMacro; Returns key focus item address
      Macro FocusedLine( ): row\focused: EndMacro; Returns key focus item address
      
      Macro EnteredLineIndex( ): index[1]: EndMacro ; *this\ Returns mouse entered row  ; 31 count
      Macro FocusedLineIndex( ): index[2]: EndMacro ; *this\ Returns key focused row    ; 11 count
      Macro PressedLineIndex( ): index[3]: EndMacro ; *this\ Returns mouse pressed line ; 23 count
      
      ;-
      Macro FocusedRowIndex( ): row\index: EndMacro
      Macro ParentRow( ): parent: EndMacro
      Macro LeavedRow( ): row\leaved: EndMacro  ; Returns mouse entered widget
      Macro EnteredRow( ): row\entered: EndMacro; Returns mouse entered widget
      Macro PressedRow( ): row\pressed: EndMacro; Returns key focus item address
      Macro FocusedRow( ): row\focused: EndMacro; Returns key focus item address
      
      Macro FirstRow( ): row\first: EndMacro
      Macro LastRow( ): row\last: EndMacro
      Macro LastAddRow( ): row\added: EndMacro
      Macro ToolTipRow( ): row\tt: EndMacro
      
      Macro VisibleRows( ): row\visible\_s( ): EndMacro
      Macro VisibleFirstRow( ): row\visible\first: EndMacro
      Macro VisibleLastRow( ): row\visible\last: EndMacro
      
      ;-
      Macro EnteredButton( ): mouse( )\entered\button: EndMacro
      Macro PressedButton( ): mouse( )\pressed\button: EndMacro
      
      ;-
      Macro FirstWidget( ): first\widget: EndMacro
      Macro LastWidget( ): last\widget: EndMacro
      Macro AfterWidget( ): after\widget: EndMacro
      Macro BeforeWidget( ): before\widget: EndMacro
      
      Macro EnteredWidget( ): mouse( )\entered\widget: EndMacro ; Returns mouse entered widget
      Macro LeavedWidget( ): mouse( )\leaved\widget: EndMacro   ; Returns mouse leaved widget
      Macro PressedWidget( ): mouse( )\pressed\widget: EndMacro
      
      Macro ActiveWindow( ): Keyboard( )\window: EndMacro   ; Returns activeed window
      Macro ActiveGadget( ): ActiveWindow( )\gadget: EndMacro   ; Returns activeed window
      Macro GetActive( ): Keyboard( )\widget: EndMacro          ; Returns activeed window
      
      ;-
      Macro GetMouseX( _mode_ = #__c_screen ): mouse( )\x[_mode_]: EndMacro ; Returns mouse x
      Macro GetMouseY( _mode_ = #__c_screen ): mouse( )\y[_mode_]: EndMacro ; Returns mouse y
      Macro CanvasMouseX( _canvas_ )
         ; GetGadgetAttribute( _canvas_, #PB_Canvas_MouseX )
         DesktopMouseX( ) - GadgetX( _canvas_, #PB_Gadget_ScreenCoordinate )
         ; WindowMouseX( window ) - GadgetX( _canvas_, #PB_Gadget_WindowCoordinate )
      EndMacro
      Macro CanvasMouseY( _canvas_ )
         ; GetGadgetAttribute( _canvas_, #PB_Canvas_MouseY )
         DesktopMouseY( ) - GadgetY( _canvas_, #PB_Gadget_ScreenCoordinate )
         ; WindowMouseY( window ) - GadgetY( _canvas_, #PB_Gadget_WindowCoordinate )
      EndMacro
      
      ;-
      ;Macro EventIndex( ): EventWidget( )\index: EndMacro
      Macro EventWidget( ): WidgetEvent( )\widget: EndMacro
      Macro WidgetEvent( ): widget::__gui\event: EndMacro
      Macro WidgetEventWidget( ): WidgetEvent( )\widget: EndMacro
      Macro WidgetEventType( ): WidgetEvent( )\type: EndMacro
      Macro WidgetEventData( ): WidgetEvent( )\data: EndMacro
      Macro WidgetEventItem( ): WidgetEvent( )\item: EndMacro
      Macro WidgetEventMenu( ): WidgetEvent( )\item: EndMacro
      
      ;-
      Macro WindowEvent( )
         events::WaitEvent( PB(WindowEvent)( ) )
      EndMacro
      Macro WaitWindowEvent( _waittime_ = )
         events::WaitEvent( PB(WaitWindowEvent)( _waittime_ ) )
      EndMacro
      Macro WaitEvent( _callback_, _eventtype_ = #PB_All )
         widget::Bind( #PB_All, _callback_, _eventtype_ )
         widget::WaitClose( )
      EndMacro
      
      
      ;-
      Macro draw_x( ): x[#__c_draw]: EndMacro
      Macro draw_y( ): y[#__c_draw]: EndMacro
      Macro draw_width( ): width[#__c_draw]: EndMacro
      Macro draw_height( ): height[#__c_draw]: EndMacro
      
      ;-
      Macro screen_x( ): x[#__c_screen]: EndMacro
      Macro screen_y( ): y[#__c_screen]: EndMacro
      Macro screen_width( ): width[#__c_screen]: EndMacro
      Macro screen_height( ): height[#__c_screen]: EndMacro
      
      ;-
      Macro inner_x( ): x[#__c_inner]: EndMacro
      Macro inner_y( ): y[#__c_inner]: EndMacro
      Macro inner_width( ): width[#__c_inner]: EndMacro
      Macro inner_height( ): height[#__c_inner]: EndMacro
      Macro inner_enter( ): enter = 2: EndMacro
      
      ;-
      Macro frame_x( ): x[#__c_frame]: EndMacro
      Macro frame_y( ): y[#__c_frame]: EndMacro
      Macro frame_width( ): width[#__c_frame]: EndMacro
      Macro frame_height( ): height[#__c_frame]: EndMacro
      Macro frame_enter( ): enter =- 1: EndMacro
      
      ;-
      Macro container_x( ): x[#__c_container]: EndMacro
      Macro container_y( ): y[#__c_container]: EndMacro
      Macro container_width( ): width[#__c_container]: EndMacro
      Macro container_height( ): height[#__c_container]: EndMacro
      
      ;-
      Macro scroll_x( ): x[#__c_required]: EndMacro
      Macro scroll_y( ): y[#__c_required]: EndMacro
      Macro scroll_width( ): width[#__c_required]: EndMacro
      Macro scroll_height( ): height[#__c_required]: EndMacro
      
      ;- TEMP
      Macro scroll_inner_width( ): width[#__c_inner]: EndMacro
      Macro scroll_inner_height( ): height[#__c_inner]: EndMacro
      Macro caption_inner_width( ): caption\width[#__c_inner]: EndMacro
      
      Macro widget( ): __gui\widget: EndMacro ; Returns current-root last added widget
      
      ;-
      Macro StartEnumerate( _parent_, _item_ = #PB_All )
         Bool( _parent_\haschildren )
         
         If _parent_\address
            ChangeCurrentElement( __widgets( ), _parent_\address )
         Else
            ResetList( __widgets( ) )
         EndIf
         
         ;\\
         If _item_ > 0
            While NextElement( __widgets( ) )
               If _item_ = __widgets( )\AddedTabIndex( )
                  PreviousElement( __widgets( ) )
                  Break
               EndIf
            Wend
         EndIf
         
         ;\\
         While NextElement( __widgets( ))
            If IsChild( __widgets( ), _parent_ )
               widget( ) = __widgets( )
               If _item_ >= 0
                  If _item_ + 1 = __widgets( )\AddedTabIndex( )
                     Break
                  EndIf
               EndIf
            EndMacro
            
            Macro AbortEnumerate( )
               Break
            EndMacro
            
            Macro StopEnumerate( )
            Else
               Break
            EndIf
         Wend
      EndMacro
      
      
      ;-
      Macro _get_colors_( ) : colors::*this\blue : EndMacro
      
      ;-
      Macro is_item_( _this_, _item_ ) : Bool( _item_ >= 0 And _item_ < _this_\count\items ) : EndMacro
      Macro is_root_(_this_ ) : Bool( _this_ >= 65536 And _this_\main ): EndMacro
      ;Macro is_root_(_this_ ) : Bool( _this_ >= 65536 And _this_ = _this_\root ): EndMacro
      Macro is_widget_( _this_ ) : Bool( _this_ >= 65536 And _this_\address ) : EndMacro
      ; Macro is_gadget_( _this_ ) : Bool( is_widget_( _this_ ) And _this_\type > 0 ) : EndMacro
      Macro is_window_( _this_ ) : Bool( is_widget_( _this_ ) And _this_\type = constants::#__type_window ) : EndMacro
      
      Macro is_child_( _this_, _parent_ )
         Bool( _this_\parent = _parent_ And Not ( _parent_\TabBox( ) And _this_\AddedTabIndex( ) <> _parent_\TabBox( )\FocusedTabIndex( ) ))
      EndMacro
      Macro is_level_( _address_1, _address_2 )
         Bool( _address_1 <> _address_2 And _address_1\parent = _address_2\parent And _address_1\AddedTabIndex( ) = _address_2\AddedTabIndex( ) )
      EndMacro
      
      Macro is_scrollbars_( _this_ )
         Bool( _this_\parent And _this_\parent\scroll And ( _this_\parent\scroll\v = _this_ Or _this_\parent\scroll\h = _this_ ))
      EndMacro
      
      Macro is_integral_( _this_ ) ; It is an integral part
         Bool( _this_\parent And _this_\child > 0 )
      EndMacro
      
      Macro is_inside_( _position_, _size_, _mouse_ ) ;
         Bool( _mouse_ > _position_ And _mouse_ <= ( _position_ + _size_ ) And ( _position_ + _size_ ) > 0 )
      EndMacro
      
      Macro is_insidebox_( _position_x_, _position_y_, _size_width_, _size_height_, _mouse_x_, _mouse_y_ )
         Bool( is_inside_( _position_x_, _size_width_, _mouse_x_ ) And
               is_inside_( _position_y_, _size_height_, _mouse_y_ ) )
      EndMacro
      
      Macro is_insidecircle_( _position_x_, _position_y_, _mouse_x_, _mouse_y_, _circle_radius_ )
         Bool( Sqr( Pow((( _position_x_ + _circle_radius_ ) - _mouse_x_ ), 2 ) + Pow((( _position_y_ + _circle_radius_ ) - _mouse_y_ ), 2 )) <= _circle_radius_ )
      EndMacro
      
      Macro is_innerside_( _this_, _mouse_x_, _mouse_y_ )
         Bool( is_atpoint_( _this_, _mouse_x_, _mouse_y_, [#__c_draw] ) And
               is_atpoint_( _this_, _mouse_x_, _mouse_y_, [#__c_inner] ) And
               Not ( _this_\type = #__type_Splitter And is_atpoint_( _this_\bar\button, _mouse_x_, _mouse_y_ ) = 0 ) And
               Not ( _this_\type = #__type_HyperLink And is_atpoint_( _this_, _mouse_x_ - _this_\frame_x( ), _mouse_y_ - _this_\frame_y( ), [#__c_Required] ) = 0 ))
      EndMacro
      
      Macro is_atpoint_( _address_, _mouse_x_, _mouse_y_, _mode_ = )
         Bool( is_inside_( _address_\x#_mode_, _address_\width#_mode_, _mouse_x_ ) And
               is_inside_( _address_\y#_mode_, _address_\height#_mode_, _mouse_y_ ) )
      EndMacro
      
      Macro is_interrect_( _address_1_x_, _address_1_y_, _address_1_width_, _address_1_height_,
                           _address_2_x_, _address_2_y_, _address_2_width_, _address_2_height_ )
         
         Bool(( _address_1_x_ + _address_1_width_ ) > _address_2_x_ And _address_1_x_ < ( _address_2_x_ + _address_2_width_ ) And
              ( _address_1_y_ + _address_1_height_ ) > _address_2_y_ And _address_1_y_ < ( _address_2_y_ + _address_2_height_ ))
      EndMacro
      
      Macro is_intersect_( _address_1_, _address_2_, _address_1_mode_ = )
         Bool(( _address_1_\x#_address_1_mode_ + _address_1_\width#_address_1_mode_ ) > _address_2_\x And _address_1_\x#_address_1_mode_ < ( _address_2_\x + _address_2_\width ) And
              ( _address_1_\y#_address_1_mode_ + _address_1_\height#_address_1_mode_ ) > _address_2_\y And _address_1_\y#_address_1_mode_ < ( _address_2_\y + _address_2_\height ))
      EndMacro
      
      Macro is_resize_( _this_ )
         Bool( _this_\resize & #__resize_x Or
               _this_\resize & #__resize_y Or
               _this_\resize & #__resize_width Or
               _this_\resize & #__resize_height )
      EndMacro
      
      ;-
      Macro is_text_gadget_( _this_ )
         Bool( _this_\type = #__type_Editor Or
               _this_\type = #__type_HyperLink Or
               _this_\type = #__type_IPAddress Or
               _this_\type = #__type_CheckBox Or
               _this_\type = #__type_Option Or
               _this_\type = #__type_Button Or
               _this_\type = #__type_String Or
               _this_\type = #__type_Text )
      EndMacro
      
      Macro is_list_gadget_( _this_ )
         Bool( _this_\type = #__type_Tree Or
               _this_\type = #__type_ListView Or
               _this_\type = #__type_ListIcon Or
               _this_\type = #__type_ExplorerTree Or
               _this_\type = #__type_ExplorerList )
      EndMacro
      
      Macro is_interact_row_( _this_ )
         Bool( _this_\type = #__type_TabBar Or
               _this_\type = #__type_Splitter Or
               _this_\type = #__type_Editor Or
               _this_\type = #__type_IPAddress Or
               _this_\type = #__type_String Or
               _this_\type = #__type_Button Or
               _this_\type = #__type_Tree Or
               _this_\type = #__type_ListView Or
               _this_\type = #__type_ListIcon Or
               _this_\type = #__type_ExplorerTree Or
               _this_\type = #__type_ExplorerList )
      EndMacro
      
      Macro is_no_select_item_( _list_, _item_ )
         Bool( _item_ < 0 Or _item_ >= ListSize( _list_ ) Or (ListIndex( _list_ ) <> _item_ And Not SelectElement( _list_, _item_ ) ))
         ; Bool( _item_ >= 0 And ListIndex( _list_ ) <> _item_ And Not SelectElement( _list_, _item_ ))
      EndMacro
      
      ;-
      Macro _select_prev_item_( _address_, _index_ )
         SelectElement( _address_, _index_ - 1 )
         
         If _address_\hide
            While PreviousElement( _address_ )
               If Not _address_\hide
                  Break
               EndIf
            Wend
         EndIf
      EndMacro
      
      Macro _select_next_item_( _address_, _index_ )
         SelectElement( _address_, _index_ + 1 )
         
         If _address_\hide
            While NextElement( _address_ )
               If Not _address_\hide
                  Break
               EndIf
            Wend
         EndIf
      EndMacro
      
      Macro _check_expression_( _result_, _address_, _key_ )
         Bool( ListSize( _address_ ))
         _result_ = #False
         ForEach _address_
            If _address_#_key_
               _result_ = #True
               Break
            EndIf
         Next
      EndMacro
      
      Macro text_rotate_( _address_ )
         _address_\rotate = Bool( Not _address_\invert ) * ( Bool( _address_\vertical ) * 90 ) + Bool( _address_\invert ) * ( Bool( _address_\vertical ) * 270 + Bool( Not _address_\vertical ) * 180 )
      EndMacro
      
      Macro get_image_width( _image_id_ )
         func::GetImageWidth( _image_id_ )
      EndMacro
      
      Macro get_image_height( _image_id_ )
         func::GetImageHeight( _image_id_ )
      EndMacro
      
      Macro resize_image( _image_id_, _width_, _height_ )
         func::SetImageWidth( _image_id_, _width_ )
         func::SetImageHeight( _image_id_, _height_ )
      EndMacro
      
      
      ;-
      Declare a_init( *this, grid_size.a = 7, grid_type.b = 0 )
      Declare a_set( *this, mode.i = #PB_Default, size.l = #PB_Default, position.l = #PB_Default )
      Declare a_update( *parent )
      Declare a_free( *this )
      Declare a_object( x.l, y.l, width.l, height.l, text.s, Color.l, flag.q = #Null, framesize = 1 )
      ;
      Macro a_transform( )
         mouse( )\anchors\transform
      EndMacro
      Macro a_selector( _index_ = )
         a_transform( )\id#_index_
      EndMacro
      ;
      Macro a_main( )
         mouse( )\anchors\transform\main
      EndMacro
      Macro a_focused( )
         mouse( )\anchors\transform\focused
      EndMacro
      Macro a_index( )
         mouse( )\anchors\index
      EndMacro
      Macro a_entered( )
         mouse( )\anchors\widget  ;EnteredWidget( ) ; 
      EndMacro
      Macro a_group( )
         a_transform( )\group( )
      EndMacro
      
      
      
      ;-
      Macro MidF(_string_, _start_pos_, _length_ = -1)
         func::MidFast(_string_, _start_pos_, _length_)
      EndMacro
      
      Macro ICase( String ) ; sTRinG = StrINg
         func::InvertCase( String )
      EndMacro
      
      Macro ULCase( String ) ; sTRinG = String
         InsertString( UCase( Left( String, 1 )), LCase( Right( String, Len( String ) - 1 )), 2 )
      EndMacro
      
      
      ;-
      Macro GetTitle( window ): widget::GetText( window ): EndMacro
      Macro Title( ): text: EndMacro
      Macro CloseButton( ): caption\button[#__wb_close]: EndMacro
      Macro MaximizeButton( ): caption\button[#__wb_maxi]: EndMacro
      Macro MinimizeButton( ): caption\button[#__wb_mini]: EndMacro
      Macro HelpButton( ): caption\button[#__wb_help]: EndMacro
      
      ;-
      Macro Drawing( ): widget::__gui\drawing: EndMacro
      Macro ReDrawing( _this_, _item_ = 0 )
         If Not Drawing( )
            If _this_\root
               Drawing( ) = Bool( StartDrawing( Output( _this_\root )))
            EndIf
            
            If _item_ > 0
               draw_font_item_( _this_, _item_, 1 ) ;_this_\EnteredLine( )\TextChange( ) )EndIf
               
               CompilerIf #PB_Compiler_OS = #PB_OS_Windows
                  If _item_\text\fontID
                     DrawingFont( _item_\text\fontID )
                  EndIf
               CompilerEndIf
            ElseIf _item_ = - 1
               draw_font_( _this_ )
            EndIf
            
            If test_startdrawing
               Debug "  ReDrawing( " + #PB_Compiler_Procedure + " ( )) " + Drawing( ) + " " + _this_\class
            EndIf
         EndIf
      EndMacro
      Macro DrawingStart( _canvas_ )
         If Drawing( )
            StopDrawing( )
            
            If _canvas_ = #PB_Default
               Drawing( ) = 0
               If test_startdrawing
                  Debug "     DrawingStop( " + #PB_Compiler_Procedure + " ( )) " + Drawing( )
               EndIf
            EndIf
         EndIf
         If _canvas_ >= 0
            Drawing( ) = Bool( StartDrawing( CanvasOutput( _canvas_ )))
            If test_startdrawing
               Debug "     DrawingStart( " + #PB_Compiler_Procedure + " ( )) " + Drawing( )
            EndIf
         EndIf
      EndMacro
      Macro DrawingStop( )
         DrawingStart( #PB_Default )
      EndMacro
      Macro Output( _root_ ) : CanvasOutput( _root_\canvas\gadget ) : EndMacro
      
      ;-
      Macro draw_box_( _x_, _y_, _width_, _height_, _color_ = $ffffffff )
         Box( _x_, _y_, _width_, _height_, _color_ )
      EndMacro
      
      Macro draw_roundbox_( _x_, _y_, _width_, _height_, _round_x_, _round_y_, _color_ = $ffffffff )
         If _round_x_ Or _round_y_
            RoundBox( _x_, _y_, _width_, _height_, _round_x_, _round_y_, _color_ ) ; bug _round_y_ = 0
         Else
            draw_box_( _x_, _y_, _width_, _height_, _color_ )
         EndIf
      EndMacro
      
      Macro drawing_mode_( _mode_ )
         DrawingMode( _mode_ )
      EndMacro
      
      Macro drawing_mode_alpha_( _mode_ )
         drawing_mode_( _mode_ | #PB_2DDrawing_AlphaBlend )
      EndMacro
      
      Macro draw_font_( _this_ )
         ; drawing font
         If _this_\root
            If _this_\text\fontID = #Null
               If _this_\root\text\fontID
                  _this_\text\fontID   = _this_\root\text\fontID
                  _this_\TextChange( ) = #True
               EndIf
            EndIf
            
            If _this_\text\fontID And (( _this_\root\canvas\fontID <> _this_\text\fontID ) Or ( _this_ = _this_\root And _this_\root\canvas\fontID ))
               _this_\root\canvas\fontID = _this_\text\fontID
               
               ;; Debug "draw current font - " + #PB_Compiler_Procedure  + " " +  _this_ + " fontID - "+ _this_\text\fontID
               DrawingFont( _this_\text\fontID )
               _this_\TextChange( ) = #True
            EndIf
         EndIf
         
         If _this_\TextChange( )
            If _this_\text\string
               _this_\text\width = TextWidth( _this_\text\string )
            EndIf
            
            _this_\text\height = TextHeight( "A" ); - Bool( #PB_Compiler_OS <> #PB_OS_Windows ) * 2
            _this_\text\rotate = Bool( _this_\text\invert ) * 180 + Bool( _this_\text\vertical ) * 90
         EndIf
      EndMacro
      
      Macro draw_font_item_( _this_, _item_, _change_ )
         If _this_\root
            If _item_\text\fontID = #Null
               If _this_\text\fontID = #Null
                  If is_integral_( _this_ )
                     _this_\text\fontID = _this_\parent\text\fontID
                     _this_\text\height = _this_\parent\text\height
                  Else
                     _this_\text\fontID = _this_\root\text\fontID
                     _this_\text\height = _this_\root\text\height
                  EndIf
               EndIf
               
               _item_\text\fontID   = _this_\text\fontID
               _item_\text\height   = _this_\text\height
               _item_\TextChange( ) = #True
            EndIf
            ;Debug ""+_this_\root\canvas\fontID +" "+ _item_\text\fontID
            
            ;\\ drawing item font
            If _item_\text\fontID And _this_\root\canvas\fontID <> _item_\text\fontID
               ;;Debug " item fontID - "+ _item_\text\fontID
               _this_\root\canvas\fontID = _item_\text\fontID
               
               Debug "draw current item font - " + #PB_Compiler_Procedure + " " + _this_ + " " + _item_\index + " fontID - " + _item_\text\fontID
               DrawingFont( _item_\text\fontID )
               _item_\text\height   = TextHeight( "A" )
               _item_\TextChange( ) = #True
            EndIf
         EndIf
         
         ;\\ Получаем один раз после изменения текста
         If _item_\TextChange( )
            If _item_\text\string
               _item_\text\width = TextWidth( _item_\text\string )
            EndIf
            
            _item_\TextChange( ) = #False
         EndIf
      EndMacro
      
      ;-
      Macro draw_up_(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ;
         ;                                                                                                                                                      ;
         Line(_x_ + 7, _y_, 2, 1, _frame_color_)                                                                                                                  ; 0,0,0,0,0,0,0,0,0,0
         Plot(_x_ + 6, _y_ + 1, _frame_color_ ) : Line(_x_ + 7, _y_ + 1, 2, 1, _back_color_) : Plot(_x_ + 9, _y_ + 1, _frame_color_ )                             ; 0,0,0,0,1,1,0,0,0,0
         Plot(_x_ + 5, _y_ + 2, _frame_color_ ) : Line(_x_ + 6, _y_ + 2, 4, 1, _back_color_) : Plot(_x_ + 10, _y_ + 2, _frame_color_ )                            ; 0,0,0,1,1,1,1,0,0,0
         Plot(_x_ + 4, _y_ + 3, _frame_color_ ) : Line(_x_ + 5, _y_ + 3, 6, 1, _back_color_) : Plot(_x_ + 11, _y_ + 3, _frame_color_ )                            ; 0,0,1,1,1,1,1,1,0,0
         Line(_x_ + 3, _y_ + 4, _size_ / 3 - 1, 1, _frame_color_) : Line(_x_ + 7, _y_ + 4, 2, 1, _back_color_) : Line(_x_ + _size_ / 2 + 1, _y_ + 4, _size_ / 3 - 1 , 1, _frame_color_) ; 0,0,0,0,1,1,0,0,0,0
         Plot(_x_ + _size_ / 2 - 2, _y_ + 5, _frame_color_ ) : Line(_x_ + 7, _y_ + 5, 2, 1, _back_color_) : Plot(_x_ + _size_ / 2 + 1, _y_ + 5, _frame_color_ )                         ; 0,0,0,0,1,1,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ;
                                                                                                                                                                                        ;                                                                                                                                                      ;
      EndMacro
      Macro draw_down_(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ;
         ;                                                                                                                                                      ;
         Plot(_x_ + _size_ / 2 - 2, _y_ + 4, _frame_color_ ) : Line(_x_ + 7, _y_ + 4, 2, 1, _back_color_) : Plot(_x_ + _size_ / 2 + 1, _y_ + 4, _frame_color_ )                     ; 0,0,0,0,1,1,0,0,0,0
         Line(_x_ + 3, _y_ + 5, _size_ / 3 - 1, 1, _frame_color_) : Line(_x_ + 7, _y_ + 5, 2, 1, _back_color_) : Line(_x_ + _size_ / 2 + 1, _y_ + 5, _size_ / 3 - 1, 1, _frame_color_)  ; 0,0,0,0,1,1,0,0,0,0
         Plot(_x_ + 4, _y_ + 6, _frame_color_ ) : Line(_x_ + 5, _y_ + 6, 6, 1, _back_color_) : Plot(_x_ + 11, _y_ + 6, _frame_color_ )                                                  ; 0,0,1,1,1,1,1,1,0,0
         Plot(_x_ + 5, _y_ + 7, _frame_color_ ) : Line(_x_ + 6, _y_ + 7, 4, 1, _back_color_) : Plot(_x_ + 10, _y_ + 7, _frame_color_ )                                                  ; 0,0,0,1,1,1,1,0,0,0
         Plot(_x_ + 6, _y_ + 8, _frame_color_ ) : Line(_x_ + 7, _y_ + 8, 2, 1, _back_color_) : Plot(_x_ + 9, _y_ + 8, _frame_color_ )                                                   ; 0,0,0,0,1,1,0,0,0,0
         Line(_x_ + 7, _y_ + 9, 2, 1, _frame_color_)                                                                                                                                    ; 0,0,0,0,0,0,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ;
                                                                                                                                                                                        ;                                                                                                                                                      ;
      EndMacro
      Macro draw_left_(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         Line(_x_, _y_ + 7, 1, 2, _frame_color_)                                                                                                                  ; 0,0,1,0,0,0
         Plot(_x_ + 1, _y_ + 6, _frame_color_ ) : Line(_x_ + 1, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 1, _y_ + 9, _frame_color_ )                             ; 0,0,1,1,0,0
         Plot(_x_ + 2, _y_ + 5, _frame_color_ ) : Line(_x_ + 2, _y_ + 6, 1, 4, _back_color_) : Plot(_x_ + 2, _y_ + 10, _frame_color_ )                            ; 1,1,1,1,1,0
         Plot(_x_ + 3, _y_ + 4, _frame_color_ ) : Line(_x_ + 3, _y_ + 5, 1, 6, _back_color_) : Plot(_x_ + 3, _y_ + 11, _frame_color_ )                            ; 1,1,1,1,1,0
         Line(_x_ + 4, _y_ + 3, 1, _size_ / 3 - 1, _frame_color_) : Line(_x_ + 4, _y_ + 7, 1, 2, _back_color_) : Line(_x_ + 4, _y_ + _size_ / 2 + 1, 1, _size_ / 3 - 1, _frame_color_)  ; 0,0,1,1,0,0
         Plot(_x_ + 5, _y_ + _size_ / 2 - 2, _frame_color_ ) : Line(_x_ + 5, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 5, _y_ + _size_ / 2 + 1, _frame_color_ )                         ; 0,0,1,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
      EndMacro
      Macro draw_right_(_x_, _y_, _size_, _back_color_, _frame_color_)
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         ;                                                                                                                                                      ; 0,0,0,0,0,0
         Plot(_x_ + 4, _y_ + _size_ / 2 - 2, _frame_color_ ) : Line(_x_ + 4, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 4, _y_ + _size_ / 2 + 1, _frame_color_ )                     ; 0,0,0,1,0,0
         Line(_x_ + 5, _y_ + 3, 1, _size_ / 3 - 1, _frame_color_) : Line(_x_ + 5, _y_ + 7, 1, 2, _back_color_) : Line(_x_ + 5, _y_ + _size_ / 2 + 1, 1, _size_ / 3 - 1, _frame_color_)  ; 0,0,1,1,0,0
         Plot(_x_ + 6, _y_ + 4, _frame_color_ ) : Line(_x_ + 6, _y_ + 5, 1, 6, _back_color_) : Plot(_x_ + 6, _y_ + 11, _frame_color_ )                                                  ; 0,1,1,1,1,1
         Plot(_x_ + 7, _y_ + 5, _frame_color_ ) : Line(_x_ + 7, _y_ + 6, 1, 4, _back_color_) : Plot(_x_ + 7, _y_ + 10, _frame_color_ )                                                  ; 0,1,1,1,1,1
         Plot(_x_ + 8, _y_ + 6, _frame_color_ ) : Line(_x_ + 8, _y_ + 7, 1, 2, _back_color_) : Plot(_x_ + 8, _y_ + 9, _frame_color_ )                                                   ; 0,0,1,1,0,0
         Line(_x_ + 9, _y_ + 7, 1, 2, _frame_color_)                                                                                                                                    ; 0,0,0,1,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
                                                                                                                                                                                        ;                                                                                                                                                      ; 0,0,0,0,0,0
      EndMacro
      
      Macro draw_size_all_(_x_, _y_, _size_, _back_color_, _frame_color_)
      EndMacro
      
      Macro draw_plus_( _address_, _plus_, _size_ = 5 )
         Line(_address_\x + (_address_\width - _size_) / 2, _address_\y + (_address_\height - 1) / 2, _size_, 1, _address_\color\front[_address_\color\state])
         If _plus_
            Line(_address_\x + (_address_\width - 1) / 2, _address_\y + (_address_\height - _size_) / 2, 1, _size_, _address_\color\front[_address_\color\state])
         EndIf
      EndMacro
      
      Macro draw_arrows_( _address_, _type_ )
         Arrow( _address_\x + ( _address_\width - _address_\arrow\size ) / 2,
                _address_\y + ( _address_\height - _address_\arrow\size ) / 2, _address_\arrow\size, _type_,
                _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24, _address_\arrow\type )
      EndMacro
      
      Macro draw_gradient_( _vertical_, _address_, _color_fore_, _color_back_, _mode_ = )
         BackColor( _color_fore_ & $FFFFFF | _address_\color\_alpha << 24 )
         FrontColor( _color_back_ & $FFFFFF | _address_\color\_alpha << 24 )
         
         If _vertical_  ; _address_\vertical
            LinearGradient( _address_\x#_mode_, _address_\y#_mode_, ( _address_\x#_mode_ + _address_\width#_mode_ ), _address_\y#_mode_ )
         Else
            LinearGradient( _address_\x#_mode_, _address_\y#_mode_, _address_\x#_mode_, ( _address_\y#_mode_ + _address_\height#_mode_ ))
         EndIf
         
         draw_roundbox_( _address_\x#_mode_, _address_\y#_mode_, _address_\width#_mode_, _address_\height#_mode_, _address_\round, _address_\round )
         
         BackColor( #PB_Default )
         FrontColor( #PB_Default ) ; bug
      EndMacro
      
      Macro draw_gradient_box_( _vertical_, _x_, _y_, _width_, _height_, _color_1_, _color_2_, _round_ = 0, _alpha_ = 255 )
         BackColor( _color_1_ & $FFFFFF | _alpha_ << 24 )
         FrontColor( _color_2_ & $FFFFFF | _alpha_ << 24 )
         
         If _vertical_
            LinearGradient( _x_, _y_, ( _x_ + _width_ ), _y_ )
         Else
            LinearGradient( _x_, _y_, _x_, ( _y_ + _height_ ))
         EndIf
         
         draw_roundbox_( _x_, _y_, _width_, _height_, _round_, _round_ )
         
         BackColor( #PB_Default ) : FrontColor( #PB_Default ) ; bug
      EndMacro
      
      Macro draw_box( _address_, _color_type_, _mode_ = )
         draw_roundbox_( _address_\x#_mode_, _address_\y#_mode_, _address_\width#_mode_, _address_\height#_mode_,
                         _address_\round, _address_\round, _address_\_color_type_[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
      EndMacro
      
      Macro draw_box_button_( _address_, _color_type_ )
         If Not _address_\hide
            draw_roundbox_( _address_\x, _address_\y, _address_\width, _address_\height, _address_\round, _address_\round, _address_\_color_type_[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
            draw_roundbox_( _address_\x, _address_\y + 1, _address_\width, _address_\height - 2, _address_\round, _address_\round, _address_\_color_type_[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
            draw_roundbox_( _address_\x + 1, _address_\y, _address_\width - 2, _address_\height, _address_\round, _address_\round, _address_\_color_type_[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
         EndIf
      EndMacro
      
      Macro draw_close_button_( _address_, _size_ )
         ; close button
         If Not _address_\hide
            If _address_\color\state
               Line( _address_\x + 1 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
               Line( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
               
               Line( _address_\x - 1 + _size_ + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
               Line( _address_\x + _size_ + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
            EndIf
            
            draw_box_button_( _address_, color\frame )
         EndIf
      EndMacro
      
      Macro draw_maximize_button_( _address_, _size_ )
         If Not _address_\hide
            If _address_\color\state
               Line( _address_\x + 2 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
               Line( _address_\x + 1 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
               
               Line( _address_\x + 1 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
               Line( _address_\x + 2 + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
            EndIf
            
            draw_box_button_( _address_, color\frame )
         EndIf
      EndMacro
      
      Macro draw_minimize_button_( _address_, _size_ )
         If Not _address_\hide
            If _address_\color\state
               Line( _address_\x + 1 + ( _address_\width ) / 2 - _size_, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
               Line( _address_\x + 0 + ( _address_\width ) / 2 - _size_, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
               
               Line( _address_\x - 1 + ( _address_\width ) / 2 + _size_, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
               Line( _address_\x - 2 + ( _address_\width ) / 2 + _size_, _address_\y + ( _address_\height - _size_ ) / 2, - _size_, _size_, _address_\color\front[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
            EndIf
            
            draw_box_button_( _address_, color\frame )
         EndIf
      EndMacro
      
      Macro draw_help_button_( _address_, _size_ )
         If Not _address_\hide
            draw_roundbox_( _address_\x, _address_\y, _address_\width, _address_\height,
                            _address_\round, _address_\round, _address_\color\frame[_address_\color\state] & $FFFFFF | _address_\color\_alpha << 24 )
         EndIf
      EndMacro
      
      Macro draw_option_button_( _address_, _size_, _color_ )
         If _address_\round > 2
            If _address_\width % 2
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_ + 1, _size_ + 1, _size_ + 1, _size_ + 1, _color_ )
            Else
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_, _size_, _size_, _size_, _color_ )
            EndIf
         Else
            If _address_\width % 2
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_ + 1, _size_ + 1, 1, 1, _color_ )
            Else
               draw_roundbox_( _address_\x + ( _address_\width - _size_ ) / 2, _address_\y + ( _address_\height - _size_ ) / 2, _size_ + 1, _size_ + 1, 1, 1, _color_ )
            EndIf
         EndIf
      EndMacro
      
      Macro draw_check_button_( _address_, _size_, _color_ )
         If _address_\state
            LineXY(( _address_\x + 0 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 4 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 1 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 5 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; Левая линия
            LineXY(( _address_\x + 0 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 5 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 1 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 6 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; Левая линия
            
            LineXY(( _address_\x + 5 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 0 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 2 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 6 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; правая линия
            LineXY(( _address_\x + 6 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 0 + ( _address_\height - _size_ ) / 2 ), ( _address_\x + 3 + ( _address_\width - _size_ ) / 2 ), ( _address_\y + 6 + ( _address_\height - _size_ ) / 2 ), _color_ ) ; правая линия
         EndIf
      EndMacro
      
      Macro draw_button_( _type_, _x_, _y_, _width_, _height_, _checked_, _round_, _color_fore_ = $FFFFFFFF, _color_fore2_ = $FFE9BA81, _color_back_ = $80E2E2E2, _color_back2_ = $FFE89C3D, _color_frame_ = $80C8C8C8, _color_frame2_ = $FFDC9338, _alpha_ = 255 )
         drawing_mode_alpha_( #PB_2DDrawing_Gradient )
         LinearGradient( _x_, _y_, _x_, ( _y_ + _height_ ))
         
         If _checked_
            BackColor( _color_fore2_ & $FFFFFF | _alpha_ << 24 )
            FrontColor( _color_back2_ & $FFFFFF | _alpha_ << 24 )
         Else
            BackColor( _color_fore_ & $FFFFFF | _alpha_ << 24 )
            FrontColor( _color_back_ & $FFFFFF | _alpha_ << 24 )
         EndIf
         
         draw_roundbox_( _x_, _y_, _width_, _height_, _round_, _round_ )
         
         If _type_ = 4
            FrontColor( $ff000000 & $FFFFFF | _alpha_ << 24 )
            BackColor( $ff000000 & $FFFFFF | _alpha_ << 24 )
            
            Line( _x_ + 1 + ( _width_ - 6 ) / 2, _y_ + ( _height_ - 6 ) / 2, 6, 6 )
            Line( _x_ + ( _width_ - 6 ) / 2, _y_ + ( _height_ - 6 ) / 2, 6, 6 )
            
            Line( _x_ - 1 + 6 + ( _width_ - 6 ) / 2, _y_ + ( _height_ - 6 ) / 2, - 6, 6 )
            Line( _x_ + 6 + ( _width_ - 6 ) / 2, _y_ + ( _height_ - 6 ) / 2, - 6, 6 )
         Else
            FrontColor( _color_fore_ & $FFFFFF | _alpha_ << 24 )
            BackColor( _color_fore_ & $FFFFFF | _alpha_ << 24 )
            
            If _checked_
               If _type_ = 1
                  If _width_ % 2
                     draw_roundbox_( _x_ + ( _width_ - 4 ) / 2, _y_ + ( _height_ - 4 ) / 2, 5, 5, 5, 5 )
                  Else
                     draw_roundbox_( _x_ + ( _width_ - 4 ) / 2, _y_ + ( _height_ - 4 ) / 2, 4, 4, 4, 4 )
                  EndIf
               Else
                  If _checked_ = - 1
                     If _width_ % 2
                        draw_box_( _x_ + ( _width_ - 4 ) / 2, _y_ + ( _height_ - 4 ) / 2, 5, 5 )
                     Else
                        draw_box_( _x_ + ( _width_ - 4 ) / 2, _y_ + ( _height_ - 4 ) / 2, 4, 4 )
                     EndIf
                  Else
                     _box_x_ = _width_ / 2 - 4
                     _box_y_ = _box_x_ + Bool( _width_ % 2 )
                     
                     LineXY(( _x_ + 1 + _box_x_ ), ( _y_ + 4 + _box_y_ ), ( _x_ + 2 + _box_x_ ), ( _y_ + 5 + _box_y_ )) ; Левая линия
                     LineXY(( _x_ + 1 + _box_x_ ), ( _y_ + 5 + _box_y_ ), ( _x_ + 2 + _box_x_ ), ( _y_ + 6 + _box_y_ )) ; Левая линия
                     
                     LineXY(( _x_ + 6 + _box_x_ ), ( _y_ + 0 + _box_y_ ), ( _x_ + 3 + _box_x_ ), ( _y_ + 6 + _box_y_ )) ; правая линия
                     LineXY(( _x_ + 7 + _box_x_ ), ( _y_ + 0 + _box_y_ ), ( _x_ + 4 + _box_x_ ), ( _y_ + 6 + _box_y_ )) ; правая линия
                  EndIf
               EndIf
            EndIf
            
         EndIf
         
         drawing_mode_alpha_( #PB_2DDrawing_Outlined )
         
         If _checked_
            FrontColor( _color_frame2_ & $FFFFFF | _alpha_ << 24 )
         Else
            FrontColor( _color_frame_ & $FFFFFF | _alpha_ << 24 )
         EndIf
         
         draw_roundbox_( _x_, _y_, _width_, _height_, _round_, _round_, _color_frame_ & $FFFFFF | _alpha_ << 24 )
      EndMacro
      
      Macro draw_background_image_( _this_, _x_, _y_, _mode_ = );
                                                                ; drawing_mode_alpha_( #PB_2DDrawing_Transparent )
         DrawAlphaImage( _this_\image#_mode_\id, _x_ + _this_\image#_mode_\x + _this_\scroll_x( ), _y_ + _this_\image#_mode_\y + _this_\scroll_y( ), _this_\color\_alpha )
      EndMacro
      
      ;     Macro Close( )
      ;       PB(CloseGadgetList)( )
      ;     EndMacro
      
      ;-  -----------------
      ;-   DECLARE_globals
      ;-  -----------------
      Global _macro_call_count_
      Global __gui._s_STRUCT
      ;Global NewMap *roots._s_ROOT( )
      ;Global NewList *events._s_EVENTDATA( )
      
      ;-  -------------------
      ;-   DECLARE_functions
      ;-  -------------------
      ;{
      ; Requester
      Global resize_one
      Declare Close( *window )
      Declare Button_Draw( *this )
      Declare GetBar( *this, type.b, index.b = 0 )
      Declare GetAtPoint( *root, mouse_x, mouse_y )
      
      Declare.w ChangeValue( *this )
      Declare.i ToPBEventType( event.i )
      Declare.i TypeFromClass( class.s )
      Declare.s ClassFromType( type.i )
      Declare.s ClassFromEvent( event.i )
      Declare SetBackgroundColor( *this, color.l )
      
      
      Declare EventHandler( event = - 1, canvas.i = - 1, eventtype.i = - 1, eventdata = 0 )
      Declare PostQuit( *root = #Null )
      Declare WaitQuit( *root = #Null )
      Declare WaitClose( *root = #Null, waittime.l = 0 )
      Declare Message( Title.s, Text.s, flag.q = #Null )
      
      Declare.i Tree_properties( x.l, y.l, width.l, height.l, flag.q = 0 )
      
      Declare.b IsContainer( *this )
      
      Declare.b Draw( *this )
      Declare ReDraw( *root )
      
      Declare.l x( *this, mode.l = #__c_frame )
      Declare.l Y( *this, mode.l = #__c_frame )
      Declare.l Width( *this, mode.l = #__c_frame )
      Declare.l Height( *this, mode.l = #__c_frame )
      
      Declare.b Hide( *this, State.b = #PB_Default )
      Declare.b Disable( *this, State.b = #PB_Default )
      Declare.i Sticky( *window = #PB_Default, state.b = #PB_Default )
      Declare.i DisplayPopup( *this, *display, x.l = #PB_Ignore, y.l = #PB_Ignore )
      Declare.l MouseButtons( )
      
      Declare.b Update( *this )
      Declare IsChild( *this, *parent )
      Declare.q Flag( *this, flag.q = #Null, state.b = #PB_Default )
      Declare.b Resize( *this, ix.l, iy.l, iwidth.l, iheight.l )
      Declare.i SetAlignment( *this, mode.q, left.q = 0, top.q = 0, right.q = 0, bottom.q = 0 )
      Declare.i SetAttachment( *this, *parent, mode.a )
      
      Declare ChildrenBounds( *this )
      Declare MoveBounds( *this, MinimumX.l = #PB_Ignore, MinimumY.l = #PB_Ignore, MaximumX.l = #PB_Ignore, MaximumY.l = #PB_Ignore )
      Declare SizeBounds( *this, MinimumWidth.l = #PB_Ignore, MinimumHeight.l = #PB_Ignore, MaximumWidth.l = #PB_Ignore, MaximumHeight.l = #PB_Ignore )
      
      Declare.l CountItems( *this )
      Declare.l ClearItems( *this )
      Declare RemoveItem( *this, Item.l )
      
      Declare.l Index( *this )
      Declare.l GetDeltaX( *this )
      Declare.l GetDeltaY( *this )
      Declare.l GetLevel( *this )
      
      Declare.l GetCount( *this, mode.b = #False )
      Declare.i GetItem( *this, parent_sublevel.l = - 1 )
      Declare.i GetRoot( *this )
      Declare.i GetGadget( *this = #Null )
      Declare.i GetWindow( *this = #Null )
      
      Declare.l Type( *this )
      Declare.i WidgetID( index )
      
      Declare GetLast( *last, tabindex.l )
      
      Declare.i GetAddress( *this )
      
      Declare.i SetActive( *this )
      
      Declare.a GetFrame( *this, mode.b = 0 )
      Declare SetFrame( *this, size.a, mode.b = 0 )
      
      Declare.s GetClass( *this )
      Declare SetClass( *this, class.s )
      
      Declare.s GetText( *this )
      Declare SetText( *this, Text.s )
      
      Declare.i GetData( *this )
      Declare.i SetData( *this, *data )
      
      Declare.i GetFont( *this )
      Declare.i SetFont( *this, FontID.i )
      
      Declare.f GetState( *this )
      Declare.b SetState( *this, state.f )
      
      Declare.i GetParent( *this )
      Declare SetParent( *this, *parent, tabindex.l = #PB_Default )
      
      Declare GetPosition( *this, position.l )
      Declare SetPosition( *this, position.l, *widget = #Null )
      
      Declare.l GetColor( *this, ColorType.l )
      Declare.l SetColor( *this, ColorType.l, Color.l, Column.l = 0 )
      
      Declare.i GetAttribute( *this, Attribute.l )
      Declare.i SetAttribute( *this, Attribute.l, *value )
      
      
      ;
      Declare.l GetItemState( *this, Item.l )
      Declare.b SetItemState( *this, Item.l, State.b )
      
      Declare.i GetItemData( *this, item.l )
      Declare.i SetItemData( *this, item.l, *data )
      
      Declare.s GetItemText( *this, Item.l, Column.l = 0 )
      Declare.l SetItemText( *this, Item.l, Text.s, Column.l = 0 )
      
      Declare.i GetItemImage( *this, Item.l )
      Declare.i SetItemImage( *this, Item.l, Image.i )
      
      Declare.i GetItemFont( *this, Item.l )
      Declare.i SetItemFont( *this, Item.l, Font.i )
      
      Declare.l GetItemColor( *this, Item.l, ColorType.l, Column.l = 0 )
      Declare.l SetItemColor( *this, Item.l, ColorType.l, Color.l, Column.l = 0 )
      
      Declare.i GetItemAttribute( *this, Item.l, Attribute.l, Column.l = 0 )
      Declare.i SetItemAttribute( *this, Item.l, Attribute.l, *value, Column.l = 0 )
      
      Declare.i GetCursor( *this = #Null )
      Declare SetCursor( *this, *cursor )
      Declare ChangeCursor( *this, *cursor )
      
      Declare SetImage( *this, *image )
      Declare SetBackgroundImage( *this, *image )
      
       Declare  GetPositionAfter( *this, tabindex.l )
      Declare  GetPositionLast( *this, tabindex.l )
     
      Declare.i Create( *parent, class.s, type.l, x.l, y.l, width.l, height.l, Text.s = #Null$, flag.q = #Null, *param_1 = #Null, *param_2 = #Null, *param_3 = #Null, size.l = 0, round.l = 0, ScrollStep.f = 1.0 )
      
      ; button
      Declare.i Text( x.l, y.l, width.l, height.l, Text.s, flag.q = 0, round.l = 0 )
      Declare.i String( x.l, y.l, width.l, height.l, Text.s, flag.q = 0, round.l = 0 )
      Declare.i Button( x.l, y.l, width.l, height.l, Text.s, flag.q = 0, Image.i = -1, round.l = 0 )
      Declare.i Option( x.l, y.l, width.l, height.l, Text.s, flag.q = 0 )
      Declare.i Checkbox( x.l, y.l, width.l, height.l, Text.s, flag.q = 0 )
      Declare.i HyperLink( x.l, y.l, width.l, height.l, Text.s, Color.i, flag.q = 0 )
      Declare.i ComboBox( x.l, y.l, width.l, height.l, flag.q = 0 )
      
      ; bar
      Declare.i Spin( x.l, y.l, width.l, height.l, Min.l, Max.l, flag.q = 0, round.l = 0, increment.f = 1.0 )
      Declare.i Tab( x.l, y.l, width.l, height.l, flag.q = 0, round.l = 0 )
      Declare.i Scroll( x.l, y.l, width.l, height.l, Min.l, Max.l, PageLength.l, flag.q = 0, round.l = 0 )
      Declare.i Track( x.l, y.l, width.l, height.l, Min.l, Max.l, flag.q = 0, round.l = 7 )
      Declare.i Progress( x.l, y.l, width.l, height.l, Min.l, Max.l, flag.q = 0, round.l = 0 )
      Declare.i Splitter( x.l, y.l, width.l, height.l, First.i, Second.i, flag.q = 0 )
      
      ; list
      Declare.i Tree( x.l, y.l, width.l, height.l, flag.q = 0 )
      Declare.i ListView( x.l, y.l, width.l, height.l, flag.q = 0 )
      Declare.i Editor( x.l, Y.l, width.l, height.l, flag.q = 0, round.i = 0 )
      Declare.i ListIcon( x.l, y.l, width.l, height.l, ColumnTitle.s, ColumnWidth.i, flag.q = 0 )
      
      Declare.i ExplorerList( x.l, y.l, width.l, height.l, Directory.s, flag.q = 0 )
      
      Declare.i Image( x.l, y.l, width.l, height.l, image.i, flag.q = 0 )
      Declare.i ButtonImage( x.l, y.l, width.l, height.l, Image.i = -1, flag.q = 0, round.l = 0 )
      
      ; container
      Declare.i Panel( x.l, y.l, width.l, height.l, flag.q = 0 )
      Declare.i Container( x.l, y.l, width.l, height.l, flag.q = 0 )
      Declare.i Frame( x.l, y.l, width.l, height.l, Text.s, flag.q = #__flag_nogadgets )
      Declare.i Window( x.l, y.l, width.l, height.l, Text.s, flag.q = 0, *parent = 0 )
      Declare.i ScrollArea( x.l, y.l, width.l, height.l, ScrollAreaWidth.l, ScrollAreaHeight.l, ScrollStep.l = 1, flag.q = 0 )
      Declare.i MDI( x.l, y.l, width.l, height.l, flag.q = 0 )
      
      ; menu
      Declare ToolBar( *parent, flag.q = #PB_ToolBar_Small )
      ;     Declare   Menus( *parent, flag.q )
      ;     Declare   PopupMenu( *parent, flag.q )
      
      Declare.l bar_setAttribute( *this, Attribute.l, *value )
      Declare.i bar_tab_SetState( *this, item.l )
      Declare bar_mdi_resize( *this, x.l, y.l, width.l, height.l )
      Declare bar_mdi_update( *this, x.l, y.l, width.l, height.l )
      Declare bar_area_resize( *this, x.l, y.l, width.l, height.l )
      Declare.b bar_Change( *this, ScrollPos.l )
      Declare.b bar_Update( *this, mode.b = 1 )
      
      Declare AddItem( *this, Item.l, Text.s, Image.i = -1, flag.q = 0 )
      Declare AddColumn( *this, Position.l, Text.s, Width.l, Image.i = - 1 )
      
      Declare.b Arrow( x.l, Y.l, Size.l, Direction.l, Color.l, Style.b = 1, Length.l = 1 )
      
      Declare.i Send( *this, eventtype.l, *button = #PB_All, *data = #Null )
      Declare.i Post( *this, eventtype.l, *button = #PB_All, *data = #Null )
      Declare.i Bind( *this, *callback, eventtype.l = #PB_All, item.l = #PB_All )
      Declare.i Unbind( *this, *callback, eventtype.l = #PB_All, item.l = #PB_All )
      
      ;
      Declare.i CloseList( )
      Declare.i OpenList( *this, item.l = 0 )
      ;
      Declare DoEvents( *this, eventtype.l, *button = #PB_All, *data = #Null ) ;, mouse_x.l, mouse_y.l
      Declare Open( Window, x.l = 0, y.l = 0, width.l = #PB_Ignore, height.l = #PB_Ignore, title$ = #Null$, flag.q = #Null, *parentID = #Null, canvas = #PB_Any )
      Declare.i Gadget( Type.l, Gadget.i, x.l, Y.l, width.l, height.l, Text.s = "", *param1 = #Null, *param2 = #Null, *param3 = #Null, flag.q = #Null )
      Declare Free( *this )
      ;}
   EndDeclareModule
   
   Module Widget
      ;-
      ;-\\ DECLARE PRIVATEs
      ;-
      Declare Repost( )
      Declare DoEvent_Lines( *this, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
      Declare DoEvent_Items( *this, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
      Declare DoEvent_Button( *this, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
      Declare DoEvent_Tab( *this, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
      Declare DoFocus( *this, eventtype.l, *button = #PB_All, *data = #Null )
      
      Declare.b bar_tab_draw( *this )
      Declare.b bar_SetState( *this, state.l )
      
      Declare.l update_visible_items_( *this._s_WIDGET, visible_items_height.l = 0 )
      Declare.l draw_items_( *this._s_WIDGET, List *rows._s_ROWS( ), _scroll_x_, _scroll_y_ )
      Declare Text_Update( *this._s_WIDGET )
      
      Declare SetForeground( *this._s_WIDGET )
      ;\\
      Macro Leaved( _address_ )
         Bool( _address_\enter = #True )
         If _address_\enter = #True
            _address_\enter = #False
            
            If _address_\color\state = #__s_1
               _address_\color\state = #__s_0
            EndIf
         EndIf
      EndMacro
      Macro Entered( _address_ )
         Bool( _address_\enter = #False )
         If _address_\enter = #False
            _address_\enter = #True
            
            If _address_\color\state = #__s_0
               _address_\color\state = #__s_1
            EndIf
         EndIf
      EndMacro
      
      ;
      Macro row_x_( _this_, _address_ )
         ( _this_\inner_x( ) + _address_\x )  ; + _this_\scroll_x( )
      EndMacro
      
      Macro row_y_( _this_, _address_ )
         ( _this_\inner_y( ) + _address_\y )
      EndMacro
      
      Macro row_scroll_y_( _this_, _row_, _page_height_ = )
         bar_scroll_pos_( _this_\scroll\v, ( row_y_( _this_, _row_ ) _page_height_ ) - _this_\scroll\v\y, _row_\height )
      EndMacro
      
      ;-
      Macro make_scrollarea_x( _this_, _address_ )
         ; make horizontal scroll x
         If _address_\align\right
            _this_\scroll_x( ) = ( _this_\inner_width( ) - _this_\scroll_width( ) )
         ElseIf Not _address_\align\left ; horizontal center
            _this_\scroll_x( ) = ( _this_\inner_width( ) - _this_\scroll_width( )) / 2
         Else
            If _this_\scroll\h
               _this_\scroll_x( ) = - ( _this_\scroll\h\bar\page\pos - _this_\scroll\h\bar\min )
            Else
               _this_\scroll_x( ) = 0
            EndIf
         EndIf
      EndMacro
      
      Macro make_scrollarea_y( _this_, _address_, _rotate_ = 0 )
         ; make vertical scroll y
         If _address_\align\bottom
            _this_\scroll_y( ) = ( _this_\inner_height( ) - _this_\scroll_height( ) )
         ElseIf Not _address_\align\top ; vertical center
            _this_\scroll_y( ) = ( _this_\inner_height( ) - _this_\scroll_height( ) ) / 2
         Else
            If _this_\scroll\v
               _this_\scroll_y( ) = - ( _this_\scroll\v\bar\page\pos - _this_\scroll\v\bar\min )
            Else
               _this_\scroll_y( ) = 0
            EndIf
         EndIf
      EndMacro
      
      
      ;-
      Macro set_align_x_( _this_, _address_, _width_, _rotate_ )
         If _rotate_ = 180
            If _this_\align\right
               _address_\x = _width_ - _this_\padding\x
            ElseIf Not _this_\align\left
               _address_\x = ( _width_ + _address_\width ) / 2
            Else
               _address_\x = _address_\width + _this_\padding\x
            EndIf
         EndIf
         
         If _rotate_ = 0
            If _this_\align\right
               _address_\x = ( _width_ - _address_\width ) - _this_\padding\x
            ElseIf Not _this_\align\left
               _address_\x = ( _width_ - _address_\width ) / 2
            Else
               _address_\x = _this_\padding\x
            EndIf
         EndIf
      EndMacro
      
      Macro set_align_y_( _this_, _address_, _height_, _rotate_ )
         If _height_ < 0
            If _rotate_ = 90
               _address_\y = 0
            ElseIf _rotate_ = 180
               _address_\y = Bool( #PB_Compiler_OS = #PB_OS_MacOS ) * 2 + Bool( #PB_Compiler_OS = #PB_OS_Linux ) + _address_\height
            Else
               _address_\y = - Bool( #PB_Compiler_OS = #PB_OS_MacOS )
            EndIf
         EndIf
         
         If _height_ >= 0
            If _rotate_ = 90
               If _this_\align\bottom
                  _address_\y = _height_ - _this_\padding\y
               ElseIf Not _this_\align\top
                  _address_\y = ( _height_ + _address_\width ) / 2
               Else
                  _address_\y = _address_\width + _this_\padding\y
               EndIf
            EndIf
            
            If _rotate_ = 270
               If _this_\align\bottom
                  _address_\y = ( _height_ - _address_\width ) - _this_\padding\y
               ElseIf Not _this_\align\top
                  _address_\y = ( _height_ - _address_\width ) / 2
               Else
                  _address_\y = _this_\padding\y
               EndIf
            EndIf
         EndIf
      EndMacro
      
      ;-
      Macro set_image_( _this_, _address_, _image_ )
         If IsImage( _image_ )
            _address_\change = 1
            _address_\img    = _image_
            _address_\id     = ImageID( _image_ )
            
            ;         CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
            ;           If _address_\size
            ;             resize_image( _address_\id,
            ;                          _address_\size,
            ;                          _address_\size )
            ;
            ;             _address_\width = _address_\size
            ;             _address_\height = _address_\size
            ;           Else
            ;             _address_\width = get_image_width( _address_\id )
            ;             _address_\height = get_image_height( _address_\id )
            ;           EndIf
            ;         CompilerElse
            If _address_\size
               ResizeImage( _image_,
                            _address_\size,
                            _address_\size )
               
               _address_\width  = _address_\size
               _address_\height = _address_\size
            Else
               _address_\width  = ImageWidth( _image_ )
               _address_\height = ImageHeight( _image_ )
            EndIf
            ;         CompilerEndIf
            
            _address_\depth = ImageDepth( _image_, #PB_Image_OriginalDepth )
            
            If _this_\row
               _this_\MarginLine( )\width = _address_\padding\x +
                                            _address_\width + 2
            EndIf
         Else
            _address_\change = - 1
            _address_\img    = - 1
            _address_\id     = 0
            _address_\width  = 0
            _address_\height = 0
         EndIf
      EndMacro
      
      Macro set_text_flag_( _this_, _text_, _flag_, _x_ = 0, _y_ = 0 )
         ;     If Not _this_\text
         ;       _this_\text.allocate( TEXT )
         ;     EndIf
         
         If _this_\text
            _this_\TextChange( ) = 1
            _this_\text\x        = _x_
            _this_\text\y        = _y_
            
            _this_\text\editable = Bool( Not constants::_check_( _flag_, #__text_readonly ))
            _this_\text\lower    = constants::_check_( _flag_, #__text_lowercase )
            _this_\text\upper    = constants::_check_( _flag_, #__text_uppercase )
            _this_\text\pass     = constants::_check_( _flag_, #__text_password )
            _this_\text\invert   = constants::_check_( _flag_, #__text_invert )
            _this_\text\vertical = constants::_check_( _flag_, #__text_vertical )
            
            ;
            _this_\text\align\left  = constants::_check_( _flag_, #__text_left )
            _this_\text\align\right = constants::_check_( _flag_, #__text_right )
            
            _this_\text\align\top    = constants::_check_( _flag_, #__text_top )
            _this_\text\align\bottom = constants::_check_( _flag_, #__text_bottom )
            
            If Not _this_\text\align\top And
               Not _this_\text\align\left And
               Not _this_\text\align\right And
               Not _this_\text\align\bottom And
               Not constants::_check_( _flag_, #__text_center )
               
               If Not _this_\text\align\right
                  _this_\flag | #__text_left
                  _this_\text\align\left = #True
               EndIf
               If Not _this_\text\align\bottom
                  _this_\flag | #__text_top
                  _this_\text\align\top = #True
               EndIf
            EndIf
            
            
            If constants::_check_( _flag_, #__text_wordwrap )
               _this_\text\multiLine = - 1
            ElseIf constants::_check_( _flag_, #__text_multiline )
               _this_\text\multiLine = 1
            Else
               _this_\text\multiLine = 0
            EndIf
            
            ;\\
            text_rotate_( _this_\text )
            
            ;\\
            If _this_\type = #__type_Editor Or
               _this_\type = #__type_String
               
               _this_\color\fore = 0
               
               If _this_\text\editable
                  _this_\text\caret\width = 1
                  _this_\color\back[0]    = $FFFFFFFF
               Else
                  _this_\color\back[0] = $FFF0F0F0
               EndIf
               
               ;\\
               If _this_\type = #__type_Editor
                  If Not _this_\text\multiLine
                     _this_\text\multiLine = 1
                  EndIf
                  ;           Else
                  ;             _this_\text\multiline = constants::_check_( _this_\flag, #__text_multiline )
               EndIf
            EndIf
            
            ;\\
            If _this_\type = #__type_Option Or
               _this_\type = #__type_CheckBox Or
               _this_\type = #__type_HyperLink
               
               _this_\text\multiline = - CountString( _text_, #LF$ )
            EndIf
            
            If _this_\type = #__type_String
               If _this_\text\multiline
                  _this_\MarginLine( )\hide        = 0
                  _this_\MarginLine( )\color\front = $C8000000 ; \color\back[0]
                  _this_\MarginLine( )\color\back  = $C8F0F0F0 ; \color\back[0]
               Else
                  _this_\MarginLine( )\hide = 1
                  _this_\text\numeric       = Bool( _flag_ & #__text_numeric )
               EndIf
            EndIf
            
            If _text_
               SetText( _this_, _text_ )
            EndIf
         EndIf
         
      EndMacro
      
      Macro set_check_state_( _address_, _three_state_ )
         ; change checkbox state
         Select _address_\state
            Case #PB_Checkbox_Unchecked
               If _three_state_
                  _address_\state = #PB_Checkbox_Inbetween
               Else
                  _address_\state = #PB_Checkbox_Checked
               EndIf
            Case #PB_Checkbox_Checked : _address_\state = #PB_Checkbox_Unchecked
            Case #PB_Checkbox_Inbetween : _address_\state = #PB_Checkbox_Checked
         EndSelect
      EndMacro
      
      Macro set_color_( _result_, _address_, _color_type_, _color_, _alpha_, _column_ = )
         If Not _address_\alpha And _alpha_
            _address_\alpha.allocate( COLOR )
         EndIf
         
         Select _color_type_
            Case #__color_line
               If _address_\line#_column_ <> _color_
                  _address_\line#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\line#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
            Case #__color_back
               If _address_\back#_column_ <> _color_
                  _address_\back#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\back#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
            Case #__color_fore
               If _address_\fore#_column_ <> _color_
                  _address_\fore#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\fore#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
            Case #__color_front
               If _address_\front#_column_ <> _color_
                  _address_\front#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\front#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
            Case #__color_frame
               If _address_\frame#_column_ <> _color_
                  _address_\frame#_column_ = _color_
                  If _address_\alpha
                     _address_\alpha\frame#_column_ = _alpha_
                  EndIf
                  _result_ = #True
               EndIf
         EndSelect
         
      EndMacro
      
      ;-
      Macro do_cursor_( _this_, _cursor_, _data_ )
         If mouse( )\cursor <> _cursor_
            mouse( )\cursor = _cursor_
            
            DoEvents( _this_, #__event_cursor, #PB_All, _data_ )
         EndIf
      EndMacro
      
      Procedure DoFocus( *this._s_WIDGET, eventtype.l, *button = #PB_All, *data = #Null )
         ; Debug "---   "+*this\text\string
         ;Debug "DoFocusEvents - "+ ClassFromEvent( eventtype )
         
         ;\\
         If __gui\repost = 1
            If eventtype = #__event_Focus
               If GetActiveGadget( ) <> *this\root\canvas\gadget
                  SetActiveGadget( *this\root\canvas\gadget )
                  
                  CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                     ; Debug " - makeFirstResponder "+*this\root\canvas\gadget
                     CocoaMessage(0, WindowID(*this\root\canvas\window), "makeFirstResponder:", GadgetID(*this\root\canvas\gadget))
                  CompilerEndIf
               EndIf
            EndIf
            
            ;\\
            If *this\root <> Root( )
               ChangeCurrentCanvas( *this\root\canvas\gadgetID )
            EndIf
            
            ;\\
            If Not Send( *this, eventtype )
               DoEvents( *this, eventtype )
            EndIf
            
            ;\\
            If EnteredWidget( ) And
               EnteredWidget( )\root <> Root( )
               ChangeCurrentCanvas( EnteredWidget( )\root\canvas\gadgetID )
            EndIf
            
         Else
            Post( *this, eventtype )
         EndIf
         
      EndProcedure
      
      ;-
      CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
         ;     Macro OSX_NSColorToRGB( _color_ )
         ;       _color_
         ;     EndMacro
         ;     Macro BlendColor_(Color1, Color2, Scale=50)
         ;       Color1
         ;     EndMacro
         
         Procedure.i BlendColor_(Color1.i, Color2.i, Scale.i = 50)
            Define.i R1, G1, B1, R2, G2, B2
            Define.f Blend = Scale / 100
            
            R1 = Red(Color1): G1 = Green(Color1): B1 = Blue(Color1)
            R2 = Red(Color2): G2 = Green(Color2): B2 = Blue(Color2)
            
            ProcedureReturn RGB((R1*Blend) + (R2 * (1 - Blend)), (G1*Blend) + (G2 * (1 - Blend)), (B1*Blend) + (B2 * (1 - Blend)))
         EndProcedure
         
         Procedure OSX_NSColorToRGBA(NSColor)
            Protected.cgfloat red, green, blue, alpha
            Protected nscolorspace, rgba
            nscolorspace = CocoaMessage(0, nscolor, "colorUsingColorSpaceName:$", @"NSCalibratedRGBColorSpace")
            If nscolorspace
               CocoaMessage(@red, nscolorspace, "redComponent")
               CocoaMessage(@green, nscolorspace, "greenComponent")
               CocoaMessage(@blue, nscolorspace, "blueComponent")
               CocoaMessage(@alpha, nscolorspace, "alphaComponent")
               rgba = RGBA(red * 255.9, green * 255.9, blue * 255.9, alpha * 255.)
               ProcedureReturn rgba
            EndIf
         EndProcedure
         
         Procedure OSX_NSColorToRGB(NSColor)
            Protected.cgfloat red, green, blue
            Protected r, g, b, a
            Protected nscolorspace, rgb
            nscolorspace = CocoaMessage(0, nscolor, "colorUsingColorSpaceName:$", @"NSCalibratedRGBColorSpace")
            If nscolorspace
               CocoaMessage(@red, nscolorspace, "redComponent")
               CocoaMessage(@green, nscolorspace, "greenComponent")
               CocoaMessage(@blue, nscolorspace, "blueComponent")
               rgb = RGB(red * 255.0, green * 255.0, blue * 255.0)
               ProcedureReturn rgb
            EndIf
         EndProcedure
      CompilerEndIf
      
      ;     CompilerSelect #PB_Compiler_OS ;{ Color
      ;       CompilerCase #PB_OS_Windows
      ;         _get_colors_( )\Front         = GetSysColor_(#COLOR_WINDOWTEXT)
      ;         _get_colors_( )\Back          = GetSysColor_(#COLOR_WINDOW)
      ;         _get_colors_( )\focus         = GetSysColor_(#COLOR_HIGHLIGHT)
      ;         _get_colors_( )\Gadget        = GetSysColor_(#COLOR_mENU)
      ;         _get_colors_( )\Button        = GetSysColor_(#COLOR_3DLIGHT)
      ;         _get_colors_( )\Border        = GetSysColor_(#COLOR_WINDOWFRAME)
      ;         _get_colors_( )\WordColor     = GetSysColor_(#COLOR_HOTLIGHT)
      ;         _get_colors_( )\Highlight     = GetSysColor_(#COLOR_HIGHLIGHT)
      ;         _get_colors_( )\HighlightText = GetSysColor_(#COLOR_HIGHLIGHTTEXT)
      ;
      ;       CompilerCase #PB_OS_MacOS
      ;         _get_colors_( )\Front         = OSX_NSColorToRGBa(CocoaMessage(0, 0, "NSColor textColor"))
      ;         ;_get_colors_( )\Back          = BlendColor_(OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor textBackgroundColor")), $FFFFFF, 80)
      ;         ;_get_colors_( )\back[2]      = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor keyboardFocusIndicatorColor"))
      ;         ;_get_colors_( )\Back         = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor windowBackgroundColor"))
      ;         _get_colors_( )\Back         = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor controlBackgroundColor"))
      ;         _get_colors_( )\frame         = OSX_NSColorToRGBa(CocoaMessage(0, 0, "NSColor grayColor"))
      ;         ;_get_colors_( )\back[2]       = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor selectedTextBackgroundColor"))
      ;         ;_get_colors_( )\front[2]      = OSX_NSColorToRGB(CocoaMessage(0, 0, "NSColor selectedTextColor"))
      ;       CompilerCase #PB_OS_Linux
      ;
      ;     CompilerEndSelect ;}
      
      Procedure CreateIcon( img.l, type.l )
         Protected x, y, Pixel, size = 8, index.i
         
         index = CreateImage( img, size, size )
         If img = - 1 : img = index : EndIf
         
         If StartDrawing( ImageOutput( img ))
            draw_box_( 0, 0, size, size, $fff0f0f0 );GetSysColor_( #COLOR_bTNFACE ))
            
            If type = 1
               Restore img_arrow_down
               For y = 0 To size - 1
                  For x = 0 To size - 1
                     Read.b Pixel
                     
                     If Pixel
                        Plot( x, y, $000000 )
                     EndIf
                  Next x
               Next y
               
            ElseIf type = 2
               Restore img_arrow_down
               For y = size - 1 To 0 Step - 1
                  For x = 0 To size - 1
                     Read.b Pixel
                     
                     If Pixel
                        Plot( x, y, $000000 )
                     EndIf
                  Next x
               Next y
            EndIf
            StopDrawing( )
         EndIf
         
         DataSection
            
            img_arrow_down:
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            Data.b 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            
            
            ;       img_arrow_>:
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,1,1,1,0,0,0,0
            ;       Data.b 0,0,1,1,1,0,0,0
            ;       Data.b 0,0,0,1,1,1,0,0
            ;       Data.b 0,0,1,1,1,0,0,0
            ;       Data.b 0,1,1,1,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            
            ;       img_arrow_v:
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,1,0,0,0,1,0,0
            ;       Data.b 0,1,1,0,1,1,0,0
            ;       Data.b 0,1,1,1,1,1,0,0
            ;       Data.b 0,0,1,1,1,0,0,0
            ;       Data.b 0,0,0,1,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,0,0,0,0,0,0,0
            ;
            ;       img_close
            ;       Data.b 0,0,0,0,0,0,0,0
            ;       Data.b 0,1,1,0,0,1,1,0
            ;       Data.b 0,1,1,1,1,1,1,0
            ;       Data.b 0,0,1,1,1,1,0,0
            ;       Data.b 0,0,1,1,1,1,0,0
            ;       Data.b 0,1,1,1,1,1,1,0
            ;       Data.b 0,1,1,0,0,1,1,0
            ;       Data.b 0,0,0,0,0,0,0,0
            
         EndDataSection
      EndProcedure
      
      Macro DrawArrow2( _x_, _y_, _direction_, _frame_color_ = $ffffffff, _back_color_ = $ff000000)
         If _direction_ = 0 ; left
            If _frame_color_ <> _back_color_
               Line(_x_ + 8, _y_ - 2, 1, 11, _frame_color_)                                                                                                           ; 0,0,0,0,0,0,0,0,0,0,0
               Plot(_x_ + 7, _y_ - 1, _frame_color_ ) : Plot(_x_ + 7, _y_ + 7, _frame_color_ )
               Plot(_x_ + 6, _y_ + 0, _frame_color_ ) : Plot(_x_ + 6, _y_ + 6, _frame_color_ )
               Plot(_x_ + 5, _y_ + 1, _frame_color_ ) : Plot(_x_ + 5, _y_ + 5, _frame_color_ )
               Plot(_x_ + 4, _y_ + 2, _frame_color_ ) : Plot(_x_ + 4, _y_ + 4, _frame_color_ )
               Plot(_x_ + 3, _y_ + 3, _frame_color_)
            EndIf
            Line(_x_ + 7, _y_ + 0, 1, 7, _back_color_)
            Line(_x_ + 6, _y_ + 1, 1, 5, _back_color_)
            Line(_x_ + 5, _y_ + 2, 1, 3, _back_color_)
            Plot(_x_ + 4, _y_ + 3, _back_color_)
         ElseIf _direction_ = 1 ; up
            If _frame_color_ <> _back_color_
               Line(_x_ - 1, _y_ + 7, 11, 1, _frame_color_)                                                                                                           ; 0,0,0,0,0,0,0,0,0,0,0
               Plot(_x_ + 0, _y_ + 6, _frame_color_ ) : Plot(_x_ + 8, _y_ + 6, _frame_color_ )
               Plot(_x_ + 1, _y_ + 5, _frame_color_ ) : Plot(_x_ + 7, _y_ + 5, _frame_color_ )
               Plot(_x_ + 2, _y_ + 4, _frame_color_ ) : Plot(_x_ + 6, _y_ + 4, _frame_color_ )
               Plot(_x_ + 3, _y_ + 3, _frame_color_ ) : Plot(_x_ + 5, _y_ + 3, _frame_color_ )
               Plot(_x_ + 4, _y_ + 2, _frame_color_)
            EndIf
            Line(_x_ + 1, _y_ + 6, 7, 1, _back_color_)
            Line(_x_ + 2, _y_ + 5, 5, 1, _back_color_)
            Line(_x_ + 3, _y_ + 4, 3, 1, _back_color_)
            Plot(_x_ + 4, _y_ + 3, _back_color_)
         ElseIf _direction_ = 2 ; right
            If _frame_color_ <> _back_color_
               Line(_x_ + 3, _y_ - 2, 1, 11, _frame_color_)                                                                                                           ; 0,0,0,0,0,0,0,0,0,0,0
               Plot(_x_ + 4, _y_ - 1, _frame_color_ ) : Plot(_x_ + 4, _y_ + 7, _frame_color_ )
               Plot(_x_ + 5, _y_ + 0, _frame_color_ ) : Plot(_x_ + 5, _y_ + 6, _frame_color_ )
               Plot(_x_ + 6, _y_ + 1, _frame_color_ ) : Plot(_x_ + 6, _y_ + 5, _frame_color_ )
               Plot(_x_ + 7, _y_ + 2, _frame_color_ ) : Plot(_x_ + 7, _y_ + 4, _frame_color_ )
               Plot(_x_ + 8, _y_ + 3, _frame_color_)
            EndIf
            Line(_x_ + 4, _y_ + 0, 1, 7, _back_color_)
            Line(_x_ + 5, _y_ + 1, 1, 5, _back_color_)
            Line(_x_ + 6, _y_ + 2, 1, 3, _back_color_)
            Plot(_x_ + 7, _y_ + 3, _back_color_)
         ElseIf _direction_ = 3 ; down
            If _frame_color_ <> _back_color_
               Line(_x_ - 1, _y_ + 2, 11, 1, _frame_color_)                                                                                                           ; 0,0,0,0,0,0,0,0,0,0,0
               Plot(_x_ + 0, _y_ + 3, _frame_color_ ) : Plot(_x_ + 8, _y_ + 3, _frame_color_ )
               Plot(_x_ + 1, _y_ + 4, _frame_color_ ) : Plot(_x_ + 7, _y_ + 4, _frame_color_ )
               Plot(_x_ + 2, _y_ + 5, _frame_color_ ) : Plot(_x_ + 6, _y_ + 5, _frame_color_ )
               Plot(_x_ + 3, _y_ + 6, _frame_color_ ) : Plot(_x_ + 5, _y_ + 6, _frame_color_ )
               Plot(_x_ + 4, _y_ + 7, _frame_color_)
            EndIf
            Line(_x_ + 1, _y_ + 3, 7, 1, _back_color_)
            Line(_x_ + 2, _y_ + 4, 5, 1, _back_color_)
            Line(_x_ + 3, _y_ + 5, 3, 1, _back_color_)
            Plot(_x_ + 4, _y_ + 6, _back_color_)
         EndIf
      EndMacro
      
      Procedure DrawArrow( x.l, y.l, Direction.l, color.l )
         If Direction = 0
            ; left                                                                                  ; 0,0,0,0,0,0,0,0
            Plot( x + 3, y + 1, color ) : Plot( x + 4, y + 1, color ) : Plot( x + 5, y + 1, color ) ; 0,0,0,1,1,1,0,0
            Plot( x + 2, y + 2, color ) : Plot( x + 3, y + 2, color ) : Plot( x + 4, y + 2, color ) ; 0,0,1,1,1,0,0,0
            Plot( x + 1, y + 3, color ) : Plot( x + 2, y + 3, color ) : Plot( x + 3, y + 3, color ) ; 0,1,1,1,0,0,0,0
            Plot( x + 3, y + 4, color ) : Plot( x + 2, y + 4, color ) : Plot( x + 4, y + 4, color ) ; 0,0,1,1,1,0,0,0
            Plot( x + 3, y + 5, color ) : Plot( x + 4, y + 5, color ) : Plot( x + 5, y + 5, color ) ; 0,0,0,1,1,1,0,0
                                                                                                    ; 0,0,0,0,0,0,0,0
         EndIf
         If Direction = 2
            ; right                                                                                  ; 0,0,0,0,0,0,0,0
            Plot( x + 1, y + 1, color ) : Plot( x + 2, y + 1, color ) : Plot( x + 3, y + 1, color )  ; 0,0,1,1,1,0,0,0
            Plot( x + 2, y + 2, color ) : Plot( x + 3, y + 2, color ) : Plot( x + 4, y + 2, color )  ; 0,0,0,1,1,1,0,0
            Plot( x + 3, y + 3, color ) : Plot( x + 4, y + 3, color ) : Plot( x + 5, y + 3, color )  ; 0,0,0,0,1,1,1,0
            Plot( x + 2, y + 4, color ) : Plot( x + 3, y + 4, color ) : Plot( x + 4, y + 4, color )  ; 0,0,0,1,1,1,0,0
            Plot( x + 1, y + 5, color ) : Plot( x + 2, y + 5, color ) : Plot( x + 3, y + 5, color )  ; 0,0,1,1,1,0,0,0
                                                                                                     ; 0,0,0,0,0,0,0,0
         EndIf
         
         If Direction = 1
            ; up                                                                                                                                                  ; 0,0,0,0,0,0,0
            : Plot( x + 3, y + 1, color )                                                             ; 0,0,0,1,0,0,0
            : Plot( x + 2, y + 2, color ) : Plot( x + 3, y + 2, color ) : Plot( x + 4, y + 2, color ) ; 0,0,1,1,1,0,0
            Plot( x + 1, y + 3, color ) : Plot( x + 2, y + 3, color ) : Plot( x + 3, y + 3, color ) : Plot( x + 4, y + 3, color ) : Plot( x + 5, y + 3, color ) ; 0,1,1,1,1,1,0
            Plot( x + 1, y + 4, color ) : Plot( x + 2, y + 4, color ) : Plot( x + 4, y + 4, color ) : Plot( x + 5, y + 4, color )                               ; 0,1,1,0,1,1,0
            Plot( x + 1, y + 5, color ) : Plot( x + 5, y + 5, color )                                                                                           ; 0,1,0,0,0,1,0
                                                                                                                                                                ; 0,0,0,0,0,0,0
                                                                                                                                                                ; 0,0,0,0,0,0,0
         EndIf
         If Direction = 3
            ; down                                                                                                                                                ; 0,0,0,0,0,0,0
            Plot( x + 1, y + 1, color ) : Plot( x + 5, y + 1, color )   ; 0,1,0,0,0,1,0
            Plot( x + 1, y + 2, color ) : Plot( x + 2, y + 2, color ) : Plot( x + 4, y + 2, color ) : Plot( x + 5, y + 2, color )   ; 0,1,1,0,1,1,0
            Plot( x + 1, y + 3, color ) : Plot( x + 2, y + 3, color ) : Plot( x + 3, y + 3, color ) : Plot( x + 4, y + 3, color ) : Plot( x + 5, y + 3, color )   ; 0,1,1,1,1,1,0
            : Plot( x + 2, y + 4, color ) : Plot( x + 3, y + 4, color ) : Plot( x + 4, y + 4, color )                                                             ; 0,0,1,1,1,0,0
            : Plot( x + 3, y + 5, color )                                                                                                                         ; 0,0,0,1,0,0,0
                                                                                                                                                                  ; 0,0,0,0,0,0,0
         EndIf
         
         If Direction = 11
            ; select_bottom
            ; 0,0,0,0,0,1,0,0,0,0,0
            ; 0,0,0,0,1,1,1,0,0,0,0
            ; 0,0,0,1,1,0,1,1,0,0,0
            ; 0,0,1,1,0,0,0,1,1,0,0
            ; 0,1,1,0,0,0,0,0,1,1,0
            ; 1,1,0,0,0,0,0,0,0,1,1
            
            : Plot( x + 5, y, color )
            : Plot( x + 4, y + 1, color ) : Plot( x + 5, y + 1, color ) : Plot( x + 6, y + 1, color )
            : Plot( x + 3, y + 2, color ) : Plot( x + 4, y + 2, color ) : Plot( x + 6, y + 2, color ) : Plot( x + 7, y + 2, color )
            : Plot( x + 2, y + 3, color ) : Plot( x + 3, y + 3, color ) : Plot( x + 7, y + 3, color ) : Plot( x + 8, y + 3, color )
            : Plot( x + 1, y + 4, color ) : Plot( x + 2, y + 4, color ) : Plot( x + 8, y + 4, color ) : Plot( x + 9, y + 4, color )
            : Plot( x, y + 5, color ) : Plot( x + 1, y + 5, color ) : Plot( x + 9, y + 5, color ) : Plot( x + 10, y + 5, color )
            
            :
         EndIf
         
         If Direction = 33
            ; select_bottom
            ; 1,1,0,0,0,0,0,0,0,1,1
            ; 0,1,1,0,0,0,0,0,1,1,0
            ; 0,0,1,1,0,0,0,1,1,0,0
            ; 0,0,0,1,1,0,1,1,0,0,0
            ; 0,0,0,0,1,1,1,0,0,0,0
            ; 0,0,0,0,0,1,0,0,0,0,0
            
            : Plot( x, y, color ) : Plot( x + 1, y, color ) : Plot( x + 9, y, color ) : Plot( x + 10, y, color )
            : Plot( x + 1, y + 1, color ) : Plot( x + 2, y + 1, color ) : Plot( x + 8, y + 1, color ) : Plot( x + 9, y + 1, color )
            : Plot( x + 2, y + 2, color ) : Plot( x + 3, y + 2, color ) : Plot( x + 7, y + 2, color ) : Plot( x + 8, y + 2, color )
            : Plot( x + 3, y + 3, color ) : Plot( x + 4, y + 3, color ) : Plot( x + 6, y + 3, color ) : Plot( x + 7, y + 3, color )
            : Plot( x + 4, y + 4, color ) : Plot( x + 5, y + 4, color ) : Plot( x + 6, y + 4, color )
            : Plot( x + 5, y + 5, color )
            
            :
         EndIf
         
      EndProcedure
      
      Procedure.b Arrow( x.l, Y.l, Size.l, Direction.l, Color.l, Style.b = 1, Length.l = 1 )
         ; ProcedureReturn DrawArrow( x,y, Direction, Color )
         
         Protected I
         ;Size - 2
         
         If Not Length
            Style = - 1
         EndIf
         Length = ( Size + 2 ) / 2
         
         
         If Direction = 1 ; top
            If Style > 0 : x - 1 : y + 2
               Size / 2
               For i = 0 To Size
                  LineXY(( x + 1 + i ) + Size, ( Y + i - 1 ) - ( Style ), ( x + 1 + i ) + Size, ( Y + i - 1 ) + ( Style ), Color )         ; Левая линия
                  LineXY(( ( x + 1 + ( Size )) - i ), ( Y + i - 1 ) - ( Style ), (( x + 1 + ( Size )) - i ), ( Y + i - 1 ) + ( Style ), Color ) ; правая линия
               Next
            Else : x - 1 : y - 1
               For i = 1 To Length
                  If Style = - 1
                     LineXY( x + i, ( Size + y ), x + Length, y, Color )
                     LineXY( x + Length * 2 - i, ( Size + y ), x + Length, y, Color )
                  Else
                     LineXY( x + i, ( Size + y ) - i / 2, x + Length, y, Color )
                     LineXY( x + Length * 2 - i, ( Size + y ) - i / 2, x + Length, y, Color )
                  EndIf
               Next
               i                                              = Bool( Style = - 1 )
               LineXY( x, ( Size + y ) + Bool( i              = 0 ), x + Length, y + 1, Color )
               LineXY( x + Length * 2, ( Size + y ) + Bool( i = 0 ), x + Length, y + 1, Color ) ; bug
            EndIf
         ElseIf Direction = 3 ; bottom
            If Style > 0 : x - 1 : y + 1;2
               Size / 2
               For i = 0 To Size
                  LineXY(( x + 1 + i ), ( Y + i ) - ( Style ), ( x + 1 + i ), ( Y + i ) + ( Style ), Color ) ; Левая линия
                  LineXY(( ( x + 1 + ( Size * 2 )) - i ), ( Y + i ) - ( Style ), (( x + 1 + ( Size * 2 )) - i ), ( Y + i ) + ( Style ), Color ) ; правая линия
               Next
            Else : x - 1 : y + 1
               For i = 0 To Length
                  If Style = - 1
                     LineXY( x + i, y, x + Length, ( Size + y ), Color )
                     LineXY( x + Length * 2 - i, y, x + Length, ( Size + y ), Color )
                  Else
                     LineXY( x + i, y + i / 2 - Bool( i              = 0 ), x + Length, ( Size + y ), Color )
                     LineXY( x + Length * 2 - i, y + i / 2 - Bool( i = 0 ), x + Length, ( Size + y ), Color )
                  EndIf
               Next
            EndIf
         ElseIf Direction = 0 ; в лево
            If Style > 0 : y - 1
               Size / 2
               For i = 0 To Size
                  ; в лево
                  LineXY(( ( x + 1 ) + i ) - ( Style ), (( ( Y + 1 ) + ( Size )) - i ), (( x + 1 ) + i ) + ( Style ), (( ( Y + 1 ) + ( Size )) - i ), Color ) ; правая линия
                  LineXY(( ( x + 1 ) + i ) - ( Style ), (( Y + 1 ) + i ) + Size, (( x + 1 ) + i ) + ( Style ), (( Y + 1 ) + i ) + Size, Color )               ; Левая линия
               Next
            Else : x - 1 : y - 1
               For i = 1 To Length
                  If Style = - 1
                     LineXY(( Size + x ), y + i, x, y + Length, Color )
                     LineXY(( Size + x ), y + Length * 2 - i, x, y + Length, Color )
                  Else
                     LineXY(( Size + x ) - i / 2, y + i, x, y + Length, Color )
                     LineXY(( Size + x ) - i / 2, y + Length * 2 - i, x, y + Length, Color )
                  EndIf
               Next
               i                             = Bool( Style = - 1 )
               LineXY(( Size + x ) + Bool( i = 0 ), y, x + 1, y + Length, Color )
               LineXY(( Size + x ) + Bool( i = 0 ), y + Length * 2, x + 1, y + Length, Color )
            EndIf
         ElseIf Direction = 2 ; в право
            If Style > 0 : y - 1 ;: x + 1
               Size / 2
               For i = 0 To Size
                  ; в право
                  LineXY(( ( x + 1 ) + i ) - ( Style ), (( Y + 1 ) + i ), (( x + 1 ) + i ) + ( Style ), (( Y + 1 ) + i ), Color ) ; Левая линия
                  LineXY(( ( x + 1 ) + i ) - ( Style ), (( ( Y + 1 ) + ( Size * 2 )) - i ), (( x + 1 ) + i ) + ( Style ), (( ( Y + 1 ) + ( Size * 2 )) - i ), Color ) ; правая линия
               Next
            Else : y - 1 : x + 1
               For i = 0 To Length
                  If Style = - 1
                     LineXY( x, y + i, Size + x, y + Length, Color )
                     LineXY( x, y + Length * 2 - i, Size + x, y + Length, Color )
                  Else
                     LineXY( x + i / 2 - Bool( i = 0 ), y + i, Size + x, y + Length, Color )
                     LineXY( x + i / 2 - Bool( i = 0 ), y + Length * 2 - i, Size + x, y + Length, Color )
                  EndIf
               Next
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.i Match( *value, Grid.i, Max.i = $7FFFFFFF )
         If Grid
            *value = Round(( *value / Grid ), #PB_Round_Nearest ) * Grid
            
            If *value > Max
               *value = Max
            EndIf
         EndIf
         
         ProcedureReturn *value
         ;   Procedure.i Match( *value.i, Grid.i, Max.i = $7FFFFFFF )
         ;     ProcedureReturn (( Bool( *value>Max ) * Max ) + ( Bool( Grid And *value<Max ) * ( Round(( *value/Grid ), #PB_round_nearest ) * Grid ) ))
      EndProcedure
      
      Procedure Draw_Datted( x, Y, SourceColor, TargetColor )
         Static Len.b
         Protected Color,
                   Dot = a_transform( )\dot_ted,
                   Space.b = a_transform( )\dot_space,
                   line.b = a_transform( )\dot_line
         
         ;             Dot = 1
         ;             Space = 4
         ;             line = 8
         
         If Len <= Bool(Dot) * (space + 1) + Space + line
            If Len <= Bool(Dot) * (space + 1) + Space
               If Len = Space
                  Color = SourceColor
               Else
                  Color = TargetColor
               EndIf
            Else
               Color = SourceColor
            EndIf
         Else
            If Space
               Color = TargetColor
            Else
               Color = SourceColor
            EndIf
            Len = 0
         EndIf
         
         Len + 1
         ProcedureReturn Color
      EndProcedure
      
      Procedure Draw_Plot( x, Y, SourceColor, TargetColor )
         Protected Color
         
         If (y % 2 And Not x % 2) Or
            (x % 2 And Not y % 2)
            
            Color = SourceColor
         Else
            Color = TargetColor
         EndIf
         
         ProcedureReturn Color
      EndProcedure
      
      Procedure GetMainParent( *this._s_WIDGET )
         Protected result
         Protected *parent._s_WIDGET
         
         If *this\parent
            *parent = *this\parent
            
            ;\\ get main parent
            While *parent
               If IsChild( *this, *parent )
                  If *parent\parent And
                     Not *parent\parent\parent
                     ; Debug "*parent "+*parent\class
                     result = *parent
                  EndIf
                  *parent = *parent\parent
               EndIf
            Wend
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-\\ DD
      Procedure DropDraw( *this._s_WIDGET )
         Protected jj = 2, ss = 7, tt = 3
         Protected j = 5, s = 3, t = 1
         
         ;\\ if you drag to the widget-dropped
         If mouse( )\drag
            If is_scrollbars_( *this )
               *this = *this\parent
            EndIf
            
            ;\\ first draw backgraund color
            drawing_mode_alpha_( #PB_2DDrawing_Default )
            If *this\drop
               If *this\inner_enter( )
                  If mouse( )\drag\state = #PB_Drag_Enter
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $1000ff00 )
                     
                     If *this\row
                        If *this\FocusedRow( ) And *this\FocusedRow( )\enter
                           If *this\FocusedRow( )\enter < 0
                              draw_box_( row_x_( *this, *this\FocusedRow( ) ) + jj, row_y_( *this, *this\FocusedRow( ) ) - tt, *this\FocusedRow( )\width - jj * 2, ss, $2000ff00 )
                           Else
                              draw_box_( row_x_( *this, *this\FocusedRow( ) ) + jj, row_y_( *this, *this\FocusedRow( ) ) + *this\FocusedRow( )\height - tt, *this\FocusedRow( )\width - jj * 2, ss, $2000ff00 )
                           EndIf
                        Else
                           If *this\count\items And *this\VisibleLastRow( )
                              draw_box_(row_x_( *this, *this\VisibleLastRow( ) ) + jj, row_y_( *this, *this\VisibleLastRow( ) ) + *this\VisibleLastRow( )\height - tt, *this\VisibleLastRow( )\width - jj * 2, ss, $2000ff00 )
                           Else
                              draw_box_( *this\inner_x( ) + jj, *this\inner_y( ) - tt, *this\inner_width( ) - jj * 2, ss, $2000ff00 )
                           EndIf
                        EndIf
                     EndIf
                  Else
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $10ff0000 )
                  EndIf
               Else
                  ; draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $10ff0000 )
               EndIf
            Else
               If *this\inner_enter( )
                  If *this\dragstart
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $10ff00ff )
                  Else
                     ; draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $100000ff )
                  EndIf
               Else
                  ; draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $100000ff )
               EndIf
            EndIf
            
            ;\\ second draw frame color
            drawing_mode_( #PB_2DDrawing_Outlined )
            If *this\drop
               If *this\inner_enter( )
                  If mouse( )\drag\state = #PB_Drag_Enter
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ff00ff00 )
                     
                     If *this\row
                        If *this\FocusedRow( ) And *this\FocusedRow( )\enter
                           If *this\FocusedRow( )\enter < 0
                              draw_box_( row_x_( *this, *this\FocusedRow( ) ) + j, row_y_( *this, *this\FocusedRow( ) ) - t, *this\FocusedRow( )\width - j * 2, s, $ff00ff00 )
                           Else
                              draw_box_( row_x_( *this, *this\FocusedRow( ) ) + j, row_y_( *this, *this\FocusedRow( ) ) + *this\FocusedRow( )\height - t, *this\FocusedRow( )\width - j * 2, s, $ff00ff00 )
                           EndIf
                        Else
                           If *this\count\items And *this\VisibleLastRow( )
                              draw_box_(row_x_( *this, *this\VisibleLastRow( ) ) + j, row_y_( *this, *this\VisibleLastRow( ) ) + *this\VisibleLastRow( )\height - t, *this\VisibleLastRow( )\width - j * 2, s, $ff00ff00 )
                           Else
                              draw_box_( *this\inner_x( ) + j, *this\inner_y( ) - t, *this\inner_width( ) - j * 2, s, $ff00ff00 )
                           EndIf
                        EndIf
                     EndIf
                  Else
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ffff0000 )
                  EndIf
               Else
                  ; draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $ffff0000 )
               EndIf
            Else
               If *this\inner_enter( )
                  If *this\dragstart
                     draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ffff00ff )
                  Else
                     ; draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), $ff0000ff )
                  EndIf
               Else
                  ; draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $ff0000ff )
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.l DropX( )
         ProcedureReturn mouse( )\drag\x
      EndProcedure
      
      Procedure.l DropY( )
         ProcedureReturn mouse( )\drag\y
      EndProcedure
      
      Procedure.l DropWidth( )
         ProcedureReturn mouse( )\drag\width
      EndProcedure
      
      Procedure.l DropHeight( )
         ProcedureReturn mouse( )\drag\height
      EndProcedure
      
      Procedure.i DropType( )
         ; эта функция возвращает формат отброшенных данных.
         ; после того, как произошло событие #__event_Drop
         ProcedureReturn mouse( )\drag\format
      EndProcedure
      
      Procedure.i DropAction( )
         ; эта функция возвращает действие, которое следует выполнить с данными.
         ; после того, как произошло событие #__event_Drop
         ProcedureReturn mouse( )\drag\actions
      EndProcedure
      
      Procedure.i DropPrivate( )
         ; эта функция возвращает 'PrivateType', который был сброшен.
         ; после того, как произошло событие #__event_Drop с форматом #PB_Drop_Private (формат можно получить с помощью EventDropType( ))
         ProcedureReturn mouse( )\drag\private
      EndProcedure
      
      Procedure.s DropFiles( )
         ; эта функция возвращает имена файлов, который был сброшен.
         ; после того, как произошло событие #__event_Drop с форматом #PB_Drop_Files (формат можно получить с помощью EventDropType( ))
         ; ProcedureReturn mouse( )\drag\files\s
      EndProcedure
      
      Procedure.s DropText( )
         ; эта функция возвращает текст, который был сброшен.
         ; после того, как произошло событие #__event_Drop с форматом #PB_Drop_Text (формат можно получить с помощью EventDropType( ))
         ProcedureReturn mouse( )\drag\string
      EndProcedure
      
      Procedure.i DropImage( Image.i = - 1, Depth.i = 24 )
         ; эта функция возвращает изображения, который был сброшен.
         ; после того, как произошло событие #__event_Drop с форматом #PB_Drop_Image (формат можно получить с помощью EventDropType( ))
         If mouse( )\drag\imageID
            If Image = - 1
               Image = CreateImage( #PB_Any, DropWidth( ), DropHeight( ) )
            EndIf
            
            If IsImage( Image ) And
               StartDrawing( ImageOutput( Image ))
               If Depth = 32
                  DrawAlphaImage( mouse( )\drag\imageID, 0, 0 )
               Else
                  DrawImage( mouse( )\drag\imageID, 0, 0 )
               EndIf
               StopDrawing( )
               
               ProcedureReturn 1
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i DropEnable( *this._s_WIDGET, Format.l, Actions.b, PrivateType.i = 0 )
         ;                        ; windows ;    macos   ; linux ;
         ; = Format
         ; #PB_Drop_Text          ; = 1     ; 1413830740 ; -1    ; Accept text on this widget
         ; #PB_Drop_Image         ; = 8     ; 1346978644 ; -2    ; Accept images on this widget
         ; #PB_Drop_Files         ; = 15    ; 1751544608 ; -3    ; Accept filenames on this widget
         ; #PB_Drop_Private       ; = 512   ; 1885499492 ; -4    ; Accept a "private" Drag & Drop on this gadgetProtected Result.i
         
         ; & Actions
         ; #PB_Drag_None          ; = 0     ; 0          ; 0     ; The Data format will Not be accepted on the widget
         ; #PB_Drag_Copy          ; = 1     ; 1          ; 2     ; The Data can be copied
         ; #PB_Drag_Move          ; = 2     ; 16         ; 4     ; The Data can be moved
         ; #PB_Drag_Link          ; = 4     ; 2          ; 8     ; The Data can be linked
         
         ; SetDragCallback( )
         ; 'State' specifies the current state of the Drag & Drop operation and is one of the following values:
         ; #PB_Drag_Enter         ; = 1     ; 1          ; 1     ; The mouse entered the (gadget Or window)
         ; #PB_Drag_Update        ; = 2     ; 2          ; 2     ; The mouse was moved inside the (gadget Or window), Or the intended action changed
         ; #PB_Drag_Leave         ; = 3     ; 3          ; 3     : The mouse left the (gadget Or window) (Format, Action, x, y are 0 here)
         ; #PB_Drag_Finish        ; = 4     ; 4          ; 4     : The Drag & Drop finished
         ;
         
         If IsGadget(*this)
            ProcedureReturn PB(EnableGadgetDrop)(*this, Format, Actions, PrivateType )
         EndIf
         
         If Not *this\drop
            ;Debug "Enable dropped - " + *this\class
            *this\drop.allocate( DROP )
         EndIf
         
         *this\drop\format  = Format
         *this\drop\actions = Actions
         *this\drop\private = PrivateType
      EndProcedure
      
      Procedure.i DragText_( Text.s, Actions.b = #PB_Drag_Copy )
         ;Debug "  drag text - " + Text
         
         If Not mouse( )\drag
            mouse( )\drag.allocate( DRAG )
         EndIf
         mouse( )\drag\format  = #PB_Drop_Text
         mouse( )\drag\actions = Actions
         mouse( )\drag\string  = Text
         
         ProcedureReturn mouse( )\drag
      EndProcedure
      
      Procedure.i DragImage_( Image.i, Actions.b = #PB_Drag_Copy )
         ;Debug "  drag image - " + Image
         
         If Not mouse( )\drag
            mouse( )\drag.allocate( DRAG )
         EndIf
         mouse( )\drag\format  = #PB_Drop_Image
         mouse( )\drag\actions = Actions
         
         If IsImage( Image )
            mouse( )\drag\imageID = ImageID( Image )
            mouse( )\drag\width   = ImageWidth( Image )
            mouse( )\drag\height  = ImageHeight( Image )
         EndIf
         
         ProcedureReturn mouse( )\drag
      EndProcedure
      
      Procedure.i DragFiles_( Files.s, Actions.b = #PB_Drag_Copy )
         ;         ;Debug "  drag files - " + Files
         ;
         ;         If Not mouse( )\drag
         ;           mouse( )\drag.allocate( DRAG )
         ;         EndIf
         ;         mouse( )\drag\format  = #PB_Drop_Files
         ;         mouse( )\drag\actions = Actions
         ;         mouse( )\drag\files  = Files
         
         ProcedureReturn mouse( )\drag
      EndProcedure
      
      Procedure.i DragPrivate_( PrivateType.i, Actions.b = #PB_Drag_Copy )
         ; Debug "  drag PrivateType - " + PrivateType +" - Actions - "+ Actions
         
         If Not mouse( )\drag
            mouse( )\drag.allocate( DRAG )
         EndIf
         mouse( )\drag\format  = #PB_Drop_Private
         mouse( )\drag\actions = Actions
         mouse( )\drag\private = PrivateType
         
         ProcedureReturn mouse( )\drag
      EndProcedure
      
      ;-
      ;-\\  ANCHORs
      Structure _s_DATA_TRANSFORM_CURSOR
         cursor.i[#__a_count + 1]
      EndStructure
      
      DataSection
         DATA_TRANSFORM_CURSOR:
         Data.i cursor::#__cursor_Default          ; 0
         Data.i cursor::#__cursor_Left             ; 1=#__a_left
         Data.i cursor::#__cursor_Up               ; 2=#__a_top
         Data.i cursor::#__cursor_Right            ; 3=#__a_right
         Data.i cursor::#__cursor_Down             ; 4=#__a_bottom
         Data.i cursor::#__cursor_LeftUp           ; 5=#__a_left_top
         Data.i cursor::#__cursor_RightUp          ; 6=#__a_right_top
         Data.i cursor::#__cursor_RightDown        ; 7=#__a_right_bottom
         Data.i cursor::#__cursor_LeftDown         ; 8=#__a_left_bottom
         Data.i cursor::#__cursor_Arrows           ; 9=#__a_moved
      EndDataSection
      
      Global *Data_Transform_Cursor._s_DATA_TRANSFORM_CURSOR = ?DATA_TRANSFORM_CURSOR
      
      Procedure integral_parent_( *this._s_WIDGET )
         Protected result = *this\parent
         While Not is_integral_( *this )
            *this = *this\parent
         Wend
         ProcedureReturn result
      EndProcedure
      
      Macro a_transformer( _this_ )
         Bool( _this_\anchors Or ( is_integral_( _this_ ) And _this_\parent\anchors ) )
      EndMacro
      
      Macro a_draw( _this_ )
         If Not _this_\anchors\mode & #__a_novisible ; 
            drawing_mode_alpha_( #PB_2DDrawing_Outlined )
            
            If _this_\anchors\id[0] 
               draw_box_( _this_\anchors\id[0]\x, _this_\anchors\id[0]\y, _this_\anchors\id[0]\width, _this_\anchors\id[0]\height , a_transform( )\framecolor[_this_\anchors\id[a_index( )]\state] ) 
            EndIf
            
            If _this_ = a_focused( )
               ;\\ left line
               If a_selector([#__a_line_left])
                  If Not ( _this_\anchors\id[#__a_moved] And a_selector([#__a_line_left])\y = _this_\frame_y( ) And a_selector([#__a_line_left])\height = _this_\frame_height( ))
                     draw_box_( a_selector([#__a_line_left])\x, a_selector([#__a_line_left])\y, a_selector([#__a_line_left])\width, a_selector([#__a_line_left])\height , a_transform( )\framecolor[a_selector([#__a_line_left])\state] )
                  EndIf
               EndIf
               
               ;\\ top line
               If a_selector([#__a_line_top])
                  If Not ( _this_\anchors\id[#__a_moved] And a_selector([#__a_line_top])\y = _this_\frame_y( ) And a_selector([#__a_line_top])\height = _this_\frame_height( ))
                     draw_box_( a_selector([#__a_line_top])\x, a_selector([#__a_line_top])\y, a_selector([#__a_line_top])\width, a_selector([#__a_line_top])\height , a_transform( )\framecolor[a_selector([#__a_line_top])\state] )
                  EndIf
               EndIf
               
               ;\\ right line
               If a_selector([#__a_line_right])
                  If Not ( _this_\anchors\id[#__a_moved] And a_selector([#__a_line_right])\x = _this_\frame_x( ) And a_selector([#__a_line_right])\width = _this_\frame_width( ))
                     draw_box_( a_selector([#__a_line_right])\x, a_selector([#__a_line_right])\y, a_selector([#__a_line_right])\width, a_selector([#__a_line_right])\height , a_transform( )\framecolor[a_selector([#__a_line_right])\state] )
                  EndIf
               EndIf
               
               ;\\ bottom line
               If a_selector([#__a_line_bottom])
                  If Not ( _this_\anchors\id[#__a_moved] And a_selector([#__a_line_bottom])\x = _this_\frame_x( ) And a_selector([#__a_line_bottom])\width = _this_\frame_width( ))
                     draw_box_( a_selector([#__a_line_bottom])\x, a_selector([#__a_line_bottom])\y, a_selector([#__a_line_bottom])\width, a_selector([#__a_line_bottom])\height , a_transform( )\framecolor[a_selector([#__a_line_bottom])\state] )
                  EndIf
               EndIf
            EndIf
            ;
            If _this_\anchors\id[#__a_moved] And ( _this_\anchors\id[#__a_moved]\width <> _this_\anchors\id[0]\width And _this_\anchors\id[#__a_moved]\height <> _this_\anchors\id[0]\height )
               draw_box_( _this_\anchors\id[#__a_moved]\x, _this_\anchors\id[#__a_moved]\y, _this_\anchors\id[#__a_moved]\width, _this_\anchors\id[#__a_moved]\height, a_transform( )\framecolor[_this_\anchors\id[#__a_moved]\state] )
            EndIf
            
            drawing_mode_alpha_( #PB_2DDrawing_Default )
            
            ;\\ draw background anchors
            If _this_\anchors\id[#__a_left] :draw_box_( _this_\anchors\id[#__a_left]\x, _this_\anchors\id[#__a_left]\y, _this_\anchors\id[#__a_left]\width, _this_\anchors\id[#__a_left]\height , a_transform( )\backcolor[_this_\anchors\id[#__a_left]\state] ) : EndIf
            If _this_\anchors\id[#__a_top] :draw_box_( _this_\anchors\id[#__a_top]\x, _this_\anchors\id[#__a_top]\y, _this_\anchors\id[#__a_top]\width, _this_\anchors\id[#__a_top]\height , a_transform( )\backcolor[_this_\anchors\id[#__a_top]\state] ) : EndIf
            If _this_\anchors\id[#__a_right] :draw_box_( _this_\anchors\id[#__a_right]\x, _this_\anchors\id[#__a_right]\y, _this_\anchors\id[#__a_right]\width, _this_\anchors\id[#__a_right]\height , a_transform( )\backcolor[_this_\anchors\id[#__a_right]\state] ) : EndIf
            If _this_\anchors\id[#__a_bottom] :draw_box_( _this_\anchors\id[#__a_bottom]\x, _this_\anchors\id[#__a_bottom]\y, _this_\anchors\id[#__a_bottom]\width, _this_\anchors\id[#__a_bottom]\height , a_transform( )\backcolor[_this_\anchors\id[#__a_bottom]\state] ) : EndIf
            If _this_\anchors\id[#__a_left_top] :draw_box_( _this_\anchors\id[#__a_left_top]\x, _this_\anchors\id[#__a_left_top]\y, _this_\anchors\id[#__a_left_top]\width, _this_\anchors\id[#__a_left_top]\height , a_transform( )\backcolor[_this_\anchors\id[#__a_left_top]\state] ) : EndIf
            If _this_\anchors\id[#__a_right_top] :draw_box_( _this_\anchors\id[#__a_right_top]\x, _this_\anchors\id[#__a_right_top]\y, _this_\anchors\id[#__a_right_top]\width, _this_\anchors\id[#__a_right_top]\height , a_transform( )\backcolor[_this_\anchors\id[#__a_right_top]\state] ) : EndIf
            If _this_\anchors\id[#__a_right_bottom] :draw_box_( _this_\anchors\id[#__a_right_bottom]\x, _this_\anchors\id[#__a_right_bottom]\y, _this_\anchors\id[#__a_right_bottom]\width, _this_\anchors\id[#__a_right_bottom]\height , a_transform( )\backcolor[_this_\anchors\id[#__a_right_bottom]\state] ) : EndIf
            If _this_\anchors\id[#__a_left_bottom] :draw_box_( _this_\anchors\id[#__a_left_bottom]\x, _this_\anchors\id[#__a_left_bottom]\y, _this_\anchors\id[#__a_left_bottom]\width, _this_\anchors\id[#__a_left_bottom]\height , a_transform( )\backcolor[_this_\anchors\id[#__a_left_bottom]\state] ) : EndIf
            
            drawing_mode_alpha_( #PB_2DDrawing_Outlined )
            
            ;\\ draw frame anchors
            If _this_\anchors\id[#__a_left] :draw_box_( _this_\anchors\id[#__a_left]\x, _this_\anchors\id[#__a_left]\y, _this_\anchors\id[#__a_left]\width, _this_\anchors\id[#__a_left]\height, a_transform( )\framecolor[_this_\anchors\id[#__a_left]\state] ) : EndIf
            If _this_\anchors\id[#__a_top] :draw_box_( _this_\anchors\id[#__a_top]\x, _this_\anchors\id[#__a_top]\y, _this_\anchors\id[#__a_top]\width, _this_\anchors\id[#__a_top]\height, a_transform( )\framecolor[_this_\anchors\id[#__a_top]\state] ) : EndIf
            If _this_\anchors\id[#__a_right] :draw_box_( _this_\anchors\id[#__a_right]\x, _this_\anchors\id[#__a_right]\y, _this_\anchors\id[#__a_right]\width, _this_\anchors\id[#__a_right]\height, a_transform( )\framecolor[_this_\anchors\id[#__a_right]\state] ) : EndIf
            If _this_\anchors\id[#__a_bottom] :draw_box_( _this_\anchors\id[#__a_bottom]\x, _this_\anchors\id[#__a_bottom]\y, _this_\anchors\id[#__a_bottom]\width, _this_\anchors\id[#__a_bottom]\height, a_transform( )\framecolor[_this_\anchors\id[#__a_bottom]\state] ) : EndIf
            If _this_\anchors\id[#__a_left_top] :draw_box_( _this_\anchors\id[#__a_left_top]\x, _this_\anchors\id[#__a_left_top]\y, _this_\anchors\id[#__a_left_top]\width, _this_\anchors\id[#__a_left_top]\height, a_transform( )\framecolor[_this_\anchors\id[#__a_left_top]\state] ) : EndIf
            If _this_\anchors\id[#__a_right_top] :draw_box_( _this_\anchors\id[#__a_right_top]\x, _this_\anchors\id[#__a_right_top]\y, _this_\anchors\id[#__a_right_top]\width, _this_\anchors\id[#__a_right_top]\height, a_transform( )\framecolor[_this_\anchors\id[#__a_right_top]\state] ) : EndIf
            If _this_\anchors\id[#__a_right_bottom] :draw_box_( _this_\anchors\id[#__a_right_bottom]\x, _this_\anchors\id[#__a_right_bottom]\y, _this_\anchors\id[#__a_right_bottom]\width, _this_\anchors\id[#__a_right_bottom]\height, a_transform( )\framecolor[_this_\anchors\id[#__a_right_bottom]\state] ) : EndIf
            If _this_\anchors\id[#__a_left_bottom] :draw_box_( _this_\anchors\id[#__a_left_bottom]\x, _this_\anchors\id[#__a_left_bottom]\y, _this_\anchors\id[#__a_left_bottom]\width, _this_\anchors\id[#__a_left_bottom]\height, a_transform( )\framecolor[_this_\anchors\id[#__a_left_bottom]\state] ) : EndIf
         EndIf
      EndMacro
      
      Procedure a_grid_image( Steps = 5, line = 0, Color = 0, startx = 0, starty = 0 )
         
         ;\\
         DrawingStop( )
         
         Macro a_grid_change( _this_ )
            If a_transform( )\grid_widget <> _this_
               If mouse( )\steps > 1 And a_transform( )\grid_widget
                  SetBackgroundImage( a_transform( )\grid_widget, #PB_Default )
               EndIf
               a_transform( )\grid_widget = _this_
               
               If mouse( )\steps > 1 And a_transform( )\grid_widget
                  SetBackgroundImage( a_transform( )\grid_widget, a_transform( )\grid_image )
               EndIf
            EndIf
         EndMacro
         
         Static ID
         Protected hDC, x, y
         startx = 0
         starty = 0
         If Not ID
            ;Steps - 1
            
            ExamineDesktops( )
            Protected width = DesktopWidth( 0 )
            Protected height = DesktopHeight( 0 )
            ID = CreateImage( #PB_Any, width, height, 32, #PB_Image_Transparent )
            
            If Color = 0 : Color = $ff808080 : EndIf
            
            If StartDrawing( ImageOutput( ID ))
               drawing_mode_( #PB_2DDrawing_AllChannels )
               ;Box( 0, 0, width, height, BoxColor )
               
               For x = startx To width - 1
                  
                  For y = starty To height - 1
                     
                     If line
                        Line( x, 0, 1, height, Color )
                        Line( 0, y, width, 1, Color )
                     Else
                        Line( x, y, 1, 1, Color )
                     EndIf
                     
                     y + Steps
                  Next
                  
                  
                  x + Steps
               Next
               
               StopDrawing( )
            EndIf
         EndIf
         
         ProcedureReturn ID
      EndProcedure
      
      Macro a_size( _this_, _address_, _size_ )
         If _address_[#__a_left] ; left
            _address_[#__a_left]\width  = _size_
            _address_[#__a_left]\height = _size_
         EndIf
         If _address_[#__a_top] ; top
            _address_[#__a_top]\width  = _size_
            _address_[#__a_top]\height = _size_
         EndIf
         If _address_[#__a_right] ; right
            _address_[#__a_right]\width  = _size_
            _address_[#__a_right]\height = _size_
         EndIf
         If _address_[#__a_bottom] ; bottom
            _address_[#__a_bottom]\width  = _size_
            _address_[#__a_bottom]\height = _size_
         EndIf
         
         If _address_ <> a_selector( )
            If _this_\anchors\mode & #__a_zoom 
               If _address_[#__a_left_top] ; left&top
                  _address_[#__a_left_top]\width  = _size_ * 2
                  _address_[#__a_left_top]\height = _size_ * 2
               EndIf
               If _address_[#__a_right_top] ; right&top
                  _address_[#__a_right_top]\width  = _size_ * 2
                  _address_[#__a_right_top]\height = _size_ * 2
               EndIf
               If _address_[#__a_right_bottom] ; right&bottom
                  _address_[#__a_right_bottom]\width  = _size_ * 2
                  _address_[#__a_right_bottom]\height = _size_ * 2
               EndIf
               If _address_[#__a_left_bottom] ; left&bottom
                  _address_[#__a_left_bottom]\width  = _size_ * 2
                  _address_[#__a_left_bottom]\height = _size_ * 2
               EndIf
            Else
               If _address_[#__a_left_top] ; left&top
                  _address_[#__a_left_top]\width  = _size_
                  _address_[#__a_left_top]\height = _size_
               EndIf
               If _address_[#__a_right_top] ; right&top
                  _address_[#__a_right_top]\width  = _size_
                  _address_[#__a_right_top]\height = _size_
               EndIf
               If _address_[#__a_right_bottom] ; right&bottom
                  _address_[#__a_right_bottom]\width  = _size_
                  _address_[#__a_right_bottom]\height = _size_
               EndIf
               If _address_[#__a_left_bottom] ; left&bottom
                  _address_[#__a_left_bottom]\width  = _size_
                  _address_[#__a_left_bottom]\height = _size_
               EndIf
            EndIf
         EndIf
      EndMacro
      
      Macro a_move( _this_, _address_, _x_, _y_, _width_, _height_ )
         If _address_ And _this_ ; frame
            _address_\x      = _x_ + _this_\anchors\pos
            _address_\y      = _y_ + _this_\anchors\pos
            _address_\width  = _width_ - _this_\anchors\pos * 2
            _address_\height = _height_ - _this_\anchors\pos * 2
         EndIf
         
         If _address_ <> a_selector( )
            If _this_
               If _this_\anchors\mode & #__a_zoom ; _this_\type = #__type_window
                  If _address_[#__a_moved]        ; moved
                     _address_[#__a_moved]\x      = _x_ + _address_[#__a_left]\width
                     _address_[#__a_moved]\y      = _y_ + _address_[#__a_top]\height
                     _address_[#__a_moved]\width  = _width_ - ( _address_[#__a_left]\width + _address_[#__a_right]\width )
                     _address_[#__a_moved]\height = ( _this_\fs + _this_\fs[2] ) - _address_[#__a_top]\height / 2
                  EndIf
               Else
                  If _address_[#__a_moved] ; moved
                     _address_[#__a_moved]\x      = _x_
                     _address_[#__a_moved]\y      = _y_
                     _address_[#__a_moved]\width  = _this_\anchors\size * 2
                     _address_[#__a_moved]\height = _this_\anchors\size * 2
                  EndIf
               EndIf
            EndIf
            
            If _this_ And _this_\anchors\mode & #__a_zoom ; _this_\type = #__type_window
               If _address_[#__a_left]                    ; left
                  _address_[#__a_left]\x      = _x_
                  _address_[#__a_left]\y      = _y_ + _address_[#__a_left_top]\height
                  _address_[#__a_left]\height = _this_\height - ( _address_[#__a_left_top]\height + _address_[#__a_left_bottom]\height )
               EndIf
               If _address_[#__a_top] ; top
                  _address_[#__a_top]\x     = _x_ + _address_[#__a_left_top]\width
                  _address_[#__a_top]\y     = _y_
                  _address_[#__a_top]\width = _this_\width - ( _address_[#__a_left_top]\width + _address_[#__a_right_top]\width )
               EndIf
               If _address_[#__a_right] ; right
                  _address_[#__a_right]\x      = _x_ + _width_ - _address_[#__a_right]\width
                  _address_[#__a_right]\y      = _y_ + _address_[#__a_right_top]\height
                  _address_[#__a_right]\height = _this_\height - ( _address_[#__a_right_top]\height + _address_[#__a_right_bottom]\height )
               EndIf
               If _address_[#__a_bottom] ; bottom
                  _address_[#__a_bottom]\x     = _x_ + _address_[#__a_left_bottom]\width
                  _address_[#__a_bottom]\y     = _y_ + _height_ - _address_[#__a_bottom]\height
                  _address_[#__a_bottom]\width = _this_\width - ( _address_[#__a_left_bottom]\width + _address_[#__a_right_bottom]\width )
               EndIf
            Else
               If _address_[#__a_left] ; left
                  _address_[#__a_left]\x = _x_
                  _address_[#__a_left]\y = _y_ + ( _height_ - _address_[#__a_left]\height ) / 2
               EndIf
               If _address_[#__a_top] ; top
                  _address_[#__a_top]\x = _x_ + ( _width_ - _address_[#__a_top]\width ) / 2
                  _address_[#__a_top]\y = _y_
               EndIf
               If _address_[#__a_right] ; right
                  _address_[#__a_right]\x = _x_ + _width_ - _address_[#__a_right]\width
                  _address_[#__a_right]\y = _y_ + ( _height_ - _address_[#__a_right]\height ) / 2
               EndIf
               If _address_[#__a_bottom] ; bottom
                  _address_[#__a_bottom]\x = _x_ + ( _width_ - _address_[#__a_bottom]\width ) / 2
                  _address_[#__a_bottom]\y = _y_ + _height_ - _address_[#__a_bottom]\height
               EndIf
            EndIf
            
            If _address_[#__a_left_top] ; left&top
               _address_[#__a_left_top]\x = _x_
               _address_[#__a_left_top]\y = _y_
            EndIf
            If _address_[#__a_right_top] ; right&top
               _address_[#__a_right_top]\x = _x_ + _width_ - _address_[#__a_right_top]\width
               _address_[#__a_right_top]\y = _y_
            EndIf
            If _address_[#__a_left_bottom] ; left&bottom
               _address_[#__a_left_bottom]\x = _x_
               _address_[#__a_left_bottom]\y = _y_ + _height_ - _address_[#__a_left_bottom]\height
            EndIf
            If _address_[#__a_right_bottom] ; right&bottom
               _address_[#__a_right_bottom]\x = _x_ + _width_ - _address_[#__a_right_bottom]\width
               _address_[#__a_right_bottom]\y = _y_ + _height_ - _address_[#__a_right_bottom]\height
            EndIf
         EndIf
         
         If a_transform( ) And a_focused( ) And 
            a_selector([#__a_line_left]) And
            a_selector([#__a_line_right]) And
            a_selector([#__a_line_top]) And
            a_selector([#__a_line_bottom])
            
            a_selector([#__a_line_left])\state   = 0
            a_selector([#__a_line_right])\state  = 0
            a_selector([#__a_line_top])\state    = 0
            a_selector([#__a_line_bottom])\state = 0
            
            ;\\ line default size&pos
            a_selector([#__a_line_left])\width  = 1
            a_selector([#__a_line_left])\height = a_focused( )\frame_height( )
            a_selector([#__a_line_left])\x      = a_focused( )\frame_x( )
            a_selector([#__a_line_left])\y      = a_focused( )\frame_y( )
            
            a_selector([#__a_line_right])\height = 1
            a_selector([#__a_line_right])\width  = a_focused( )\frame_width( )
            a_selector([#__a_line_right])\x      = a_focused( )\frame_x( )
            a_selector([#__a_line_right])\y      = a_focused( )\frame_y( )
            
            a_selector([#__a_line_top])\width  = 1
            a_selector([#__a_line_top])\height = a_focused( )\frame_height( )
            a_selector([#__a_line_top])\x      = ( a_focused( )\frame_x( ) + a_focused( )\frame_width( ) ) - a_selector([#__a_line_top])\width
            a_selector([#__a_line_top])\y      = a_focused( )\frame_y( )
            
            a_selector([#__a_line_bottom])\height = 1
            a_selector([#__a_line_bottom])\width  = a_focused( )\frame_width( )
            a_selector([#__a_line_bottom])\x      = a_focused( )\frame_x( )
            a_selector([#__a_line_bottom])\y      = ( a_focused( )\frame_y( ) + a_focused( )\frame_height( ) ) - a_selector([#__a_line_bottom])\height
            
            ;\\
            If a_focused( )\root And ListSize( __widgets( ))
               PushListPosition( __widgets( ))
               ForEach __widgets( )
                  If __widgets( )\anchors And Not __widgets( )\hide And __widgets( ) <> a_focused( )
                     If is_level_( __widgets( ), a_focused( ) )
                        
                        ;\\ left-line
                        If a_focused( )\frame_x( ) = __widgets( )\frame_x( )
                           If a_selector([#__a_line_left])\y > __widgets( )\frame_y( )
                              a_selector([#__a_line_left])\y = __widgets( )\frame_y( )
                           EndIf
                           If a_focused( )\frame_y( ) + a_focused( )\frame_height( ) < __widgets( )\frame_y( ) + __widgets( )\frame_height( )
                              a_selector([#__a_line_left])\height = ( __widgets( )\frame_y( ) + __widgets( )\frame_height( ) ) - a_selector([#__a_line_left])\y
                           Else
                              a_selector([#__a_line_left])\height = ( a_focused( )\frame_y( ) + a_focused( )\frame_height( ) ) - a_selector([#__a_line_left])\y
                           EndIf
                           
                           a_selector([#__a_line_left])\state = 2
                        EndIf
                        
                        ;\\ right-line
                        If a_focused( )\frame_x( ) + a_focused( )\frame_width( ) = __widgets( )\frame_x( ) + __widgets( )\frame_width( )
                           If a_selector([#__a_line_top])\y > __widgets( )\frame_y( )
                              a_selector([#__a_line_top])\y = __widgets( )\frame_y( )
                           EndIf
                           If a_focused( )\frame_y( ) + a_focused( )\frame_height( ) < __widgets( )\frame_y( ) + __widgets( )\frame_height( )
                              a_selector([#__a_line_top])\height = ( __widgets( )\frame_y( ) + __widgets( )\frame_height( )) - a_selector([#__a_line_top])\y
                           Else
                              a_selector([#__a_line_top])\height = (a_focused( )\frame_y( ) + a_focused( )\frame_height( )) - a_selector([#__a_line_top])\y
                           EndIf
                           
                           a_selector([#__a_line_top])\state = 2
                        EndIf
                        
                        ;\\ top-line
                        If a_focused( )\frame_y( ) = __widgets( )\frame_y( )
                           If a_selector([#__a_line_right])\x > __widgets( )\frame_x( )
                              a_selector([#__a_line_right])\x = __widgets( )\frame_x( )
                           EndIf
                           If a_focused( )\frame_x( ) + a_focused( )\frame_width( ) < __widgets( )\frame_x( ) + __widgets( )\frame_width( )
                              a_selector([#__a_line_right])\width = ( __widgets( )\frame_x( ) + __widgets( )\frame_width( )) - a_selector([#__a_line_right])\x
                           Else
                              a_selector([#__a_line_right])\width = (a_focused( )\frame_x( ) + a_focused( )\frame_width( )) - a_selector([#__a_line_right])\x
                           EndIf
                           
                           a_selector([#__a_line_right])\state = 1
                        EndIf
                        
                        ;\\ bottom-line
                        If a_focused( )\frame_y( ) + a_focused( )\frame_height( ) = __widgets( )\frame_y( ) + __widgets( )\frame_height( )
                           If a_selector([#__a_line_bottom])\x > __widgets( )\frame_x( )
                              a_selector([#__a_line_bottom])\x = __widgets( )\frame_x( )
                           EndIf
                           If a_focused( )\frame_x( ) + a_focused( )\frame_width( ) < __widgets( )\frame_x( ) + __widgets( )\frame_width( )
                              a_selector([#__a_line_bottom])\width = ( __widgets( )\frame_x( ) + __widgets( )\frame_width( )) - a_selector([#__a_line_bottom])\x
                           Else
                              a_selector([#__a_line_bottom])\width = (a_focused( )\frame_x( ) + a_focused( )\frame_width( )) - a_selector([#__a_line_bottom])\x
                           EndIf
                           
                           a_selector([#__a_line_bottom])\state = 1
                        EndIf
                     EndIf
                  EndIf
               Next
               PopListPosition( __widgets( ))
            EndIf
         EndIf
         
      EndMacro
      
      Procedure a_remove( *this._s_WIDGET )
         Protected i
         For i = 0 To #__a_count
            If *this\anchors\id[i]
               FreeStructure( *this\anchors\id[i] )
               *this\anchors\id[i] = #Null
            EndIf
         Next i
      EndProcedure
      
      Procedure a_enter( *this._s_WIDGET, *data )
         Protected i, result, a_index
         ;
         ; atpoint
         If is_atpoint_( *this, mouse( )\x, mouse( )\y, [#__c_draw] ) 
            For i = 1 To #__a_count  
               If *this\anchors\id[i] And
                  is_atpoint_( *this\anchors\id[i], mouse( )\x, mouse( )\y )
                  ;
                  a_index = i
                  Break
               EndIf
            Next
         EndIf
         ;
         i = 0
         ;
         If a_transform( ) And
            a_focused( ) And 
            a_focused( ) <> a_entered( )
            ;
            For i = 1 To #__a_count  
               If a_focused( )\anchors\id[i] And
                  is_atpoint_( a_focused( )\anchors\id[i], mouse( )\x, mouse( )\y )
                  ;
                  If a_entered( )
                     If a_entered( )\enter > 0
                        ; Debug "7777777777777 "+a_entered( )\enter
                        a_entered( )\enter = 0
                        DoEvents( a_entered( ), #__event_MouseLeave )
                     Else
                        ; Debug "8888888888888 "+a_entered( )\enter
                        a_entered( )\enter = 0
                     EndIf
                  EndIf
                  ;
                  *this   = a_focused( )
                  a_index = i
                  Break
               EndIf
            Next
         EndIf
         ;
         i = 0
         ;
         ; reset last entered anchors index state
         If a_entered( ) And 
            a_entered( )\anchors  
            ;
            For i = 1 To #__a_count
               If i <> a_index
                  If a_entered( )\anchors\id[i] And ;???
                     a_entered( )\anchors\id[i]\state <> #__s_0
                     a_entered( )\anchors\id[i]\state = #__s_0
                     a_entered( )\root\repaint = #True
                  EndIf
               EndIf
            Next 
         EndIf
         ;
         a_index( ) = 0
         a_entered( ) = *this
         ;
         ; set new entered anchors index state
         If a_index
            a_index( ) = a_index
            ;
            If *this\anchors\id[a_index]\state <> #__s_1
               *this\anchors\id[a_index]\state = #__s_1
               ;
               *this\root\repaint = #True
               ;
               do_cursor_( *this, mouse( )\anchors\cursor[a_index], *data )
            EndIf
            ;
            If *this\enter > 0
               If *data
                  DoEvents( *this, #__event_MouseLeave )
               EndIf
            EndIf
            ;
            *this\frame_enter( )
            result = *this
         EndIf
         ;
         ProcedureReturn result
      EndProcedure
      
      Procedure a_delta( *this._s_WIDGET )
         ;\\
         If a_index( ) And
            *this And
            *this\anchors\id[a_index( )]
            ;
            ;\\ set current transformer index state
            *this\anchors\id[a_index( )]\state = #__s_2
            
            ;\\ set delta pos
            ;\\ not multi group transformer
            ;If Not *this\anchors\multi
            ;\\
            If *this\parent
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 2 )
                  mouse( )\delta\x + *this\parent\inner_x( )
               EndIf
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 1 )
                  mouse( )\delta\y + *this\parent\inner_y( )
               EndIf
               
               ;\\
               If *this\child <= 0
                  Select a_index( )
                     Case #__a_left, #__a_left_top, #__a_left_bottom, #__a_moved ; left
                        mouse( )\delta\x + *this\parent\scroll_x( )
                  EndSelect
                  
                  Select a_index( )
                     Case #__a_top, #__a_left_top, #__a_right_top, #__a_moved ; top
                        mouse( )\delta\y + *this\parent\scroll_y( )
                  EndSelect
               EndIf
            EndIf
            
            ;\\
            mouse( )\delta\x - *this\anchors\id[a_index( )]\x
            mouse( )\delta\y - *this\anchors\id[a_index( )]\y
            
            ;\\ window flag - sizeGadgets
            If a_index( ) = #__a_moved
               mouse( )\delta\x + ( *this\anchors\id[a_index( )]\x - *this\x )
               mouse( )\delta\y + ( *this\anchors\id[a_index( )]\y - *this\y )
            EndIf
            
            ;\\
            Select a_index( )
               Case #__a_left_top, #__a_moved
                  mouse( )\delta\x - *this\anchors\pos
                  mouse( )\delta\y - *this\anchors\pos
               Case #__a_left
                  mouse( )\delta\x - *this\anchors\pos
               Case #__a_top
                  mouse( )\delta\y - *this\anchors\pos
               Case #__a_right, #__a_right_top
                  mouse( )\delta\x + *this\anchors\pos - *this\anchors\size
                  mouse( )\delta\y - *this\anchors\pos
               Case #__a_bottom, #__a_left_bottom
                  mouse( )\delta\y + *this\anchors\pos - *this\anchors\size
                  mouse( )\delta\x - *this\anchors\pos
               Case #__a_right_bottom
                  mouse( )\delta\x + *this\anchors\pos - *this\anchors\size
                  mouse( )\delta\y + *this\anchors\pos - *this\anchors\size
            EndSelect
            
            ;\\
            If *this\type = #__type_window
               Select a_index( )
                  Case #__a_right, #__a_right_top
                     mouse( )\delta\x + *this\fs * 2 + *this\fs[1] + *this\fs[3]
                     
                  Case #__a_bottom, #__a_left_bottom
                     mouse( )\delta\y + *this\fs * 2 + *this\fs[2] + *this\fs[4]
                     
                  Case #__a_right_bottom
                     mouse( )\delta\x + *this\fs * 2 + *this\fs[1] + *this\fs[3]
                     mouse( )\delta\y + *this\fs * 2 + *this\fs[2] + *this\fs[4]
                     
               EndSelect
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure a_show( *this._s_WIDGET )
         Protected a_index
         
         ;\\
         If is_integral_( *this )
            *this = integral_parent_( *this ) 
            *this\enter = - 1
         Else
            If *this\parent And
               *this\parent\type = #__type_splitter
               ;Debug ""+*this\class +" "+ *this\parent\class
               
               ;\\ get main parent
               Protected *parent._s_WIDGET = *this\parent
               While *parent
                  If IsChild( *this, *parent )
                     If *parent\parent
                        If *parent\parent\type <> #__type_splitter
                           ;Debug "*parent "+*parent\class
                           *this = *parent
                           Break
                        EndIf
                     EndIf
                     *parent = *parent\parent
                  EndIf
               Wend
               
               *this\enter = - 1
               ;Debug "*parent "+*this\class
            EndIf
         EndIf
         ;
         If a_entered( ) And
            a_entered( )\anchors And
            a_entered( )\anchors\mode And
            a_entered( ) <> *this And
            Not ( a_transform( ) And a_entered( ) = a_focused( ) )
            ;Debug "remove "+a_entered( )\class
            a_remove( a_entered( ) )
            a_entered( ) = 0
         EndIf
         ;
         ; Debug "a_show "+a_entered( )\class +" "+ *this\class +" "+ a_index() +" "+ *this\enter
         ;
         If *this\anchors And *this\anchors\mode
            If a_entered( ) <> *this
               ; Debug "a_show_add "+*this\class
               ;\\ add anchors on the widget
               If Not a_index( )
                  For a_index = 0 To #__a_count
                     If *this\anchors\mode & #__a_height = 0 And
                        *this\anchors\mode & #__a_width = 0
                        If a_index = #__a_left Or
                           a_index = #__a_top Or
                           a_index = #__a_right Or
                           a_index = #__a_bottom
                           Continue
                        EndIf
                     Else
                        If *this\anchors\mode & #__a_height = 0
                           If a_index = #__a_top Or
                              a_index = #__a_bottom
                              Continue
                           EndIf
                        EndIf
                        If *this\anchors\mode & #__a_width = 0
                           If a_index = #__a_left Or
                              a_index = #__a_right
                              Continue
                           EndIf
                        EndIf
                     EndIf
                     ;
                     If *this\anchors\mode & #__a_corner = 0
                        If a_index = #__a_left_top Or
                           a_index = #__a_right_top Or
                           a_index = #__a_right_bottom Or
                           a_index = #__a_left_bottom
                           Continue
                        EndIf
                     EndIf
                     ;
                     If *this\anchors\mode & #__a_position = 0
                        If a_index = #__a_moved
                           Continue
                        EndIf
                     EndIf
                     ;
                     If Not *this\anchors\id[a_index]
                        *this\anchors\id.allocate( A_BUTTONS, [a_index] )
                     EndIf
                     ;
                     mouse( )\anchors\cursor[a_index] = *Data_Transform_Cursor\cursor[a_index]
                  Next a_index
               EndIf
               ;
               ;\\
               a_size( *this, *this\anchors\id, *this\anchors\size )
               a_move( *this,
                       *this\anchors\id,
                       *this\screen_x( ),
                       *this\screen_y( ),
                       *this\screen_width( ),
                       *this\screen_height( ) )
               ;
               a_enter( *this, - 1 )
               ;
               ProcedureReturn *this
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.i a_set( *this._s_WIDGET, mode.i = #PB_Default, size.l = #PB_Default, position.l = #PB_Default )
         Protected result
         
         If *this
            If a_transform( ) 
               If a_focused( ) <> *this
                  If a_focused( )
                     ; Debug "remove "+a_focused( )\class
                     a_remove( a_focused( ) )
                  EndIf
                  ; Debug "a_set " + *this\class +" "+ *this\enter
                  
                  ;\\
                  If mode >= 0
                     *this\anchors\mode = mode
                  EndIf
                  ;
                  If size >= 0
                     If *this\anchors\size <> size
                        *this\anchors\size = size
                        *this\bs - *this\anchors\pos
                        *this\anchors\pos = size / 2
                        *this\bs + *this\anchors\pos  ; + *this\fs
                                                      ;a_entered( ) = 0
                     EndIf
                  EndIf
                  ;
                  If position >= 0
                     If *this\anchors\pos <> position
                        *this\bs - *this\anchors\pos
                        *this\anchors\pos = position
                        *this\bs + *this\anchors\pos  ; + *this\fs
                                                      ;a_entered( ) = 0
                     EndIf
                  EndIf
                  ;
                  If *this\screen_x( ) <> *this\frame_x( ) - ( *this\bs - *this\fs )
                     *this\screen_x( ) = *this\frame_x( ) - ( *this\bs - *this\fs )
                  EndIf
                  If *this\screen_y( ) <> *this\frame_y( ) - ( *this\bs - *this\fs )
                     *this\screen_y( ) = *this\frame_y( ) - ( *this\bs - *this\fs )
                  EndIf
                  If *this\screen_width( ) <> *this\frame_width( ) + ( *this\bs * 2 - *this\fs * 2 )
                     *this\screen_width( ) = *this\frame_width( ) + ( *this\bs * 2 - *this\fs * 2 )
                  EndIf
                  If *this\screen_height( ) <> *this\frame_height( ) + ( *this\bs * 2 - *this\fs * 2 )
                     *this\screen_height( ) = *this\frame_height( ) + ( *this\bs * 2 - *this\fs * 2 )
                  EndIf
                  
                  ;\\
                  result = *this
                  a_focused( ) = *this
                  GetActive( ) = *this
                  ;
                  If a_entered( ) = *this
                     a_size( *this, *this\anchors\id, *this\anchors\size )
                     a_move( *this,
                             *this\anchors\id,
                             *this\screen_x( ),
                             *this\screen_y( ),
                             *this\screen_width( ),
                             *this\screen_height( ) )
                     
                     a_enter( *this, - 1 )
                  Else
                     ; Debug "a_set_add " + *this\class
                     a_show( *this )
                  EndIf
                  ;
                  *this\root\repaint = 1
                  ;
                  DoFocus( *this, #__event_Focus, a_index( ), *this\data )
               EndIf
            EndIf
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.i a_init( *this._s_WIDGET, grid_size.a = 7, grid_type.b = 0 )
         Protected i
         ;
         If Not *this\anchors
            *this\anchors.allocate( ANCHORS )
         EndIf
         ;
         If Not a_transform( ) 
            a_transform( ).allocate( TRANSFORMDATA )
         EndIf
         ;
         a_main( ) = *this
         ;
         a_transform( )\grid_type = grid_type
         mouse( )\steps = grid_size + 1
         ;
         If IsImage( a_transform( )\grid_image )
            FreeImage( a_transform( )\grid_image )
         EndIf
         ;
         a_transform( )\grid_image = a_grid_image( mouse( )\steps - 1, a_transform( )\grid_type, $FF000000, *this\fs, *this\fs )
         ;
         a_transform( )\framecolor[#__s_0] = $ff000000
         a_transform( )\framecolor[#__s_1] = $ffFF0000
         a_transform( )\framecolor[#__s_2] = $ff0000FF
         
         a_transform( )\backcolor[#__s_0] = $ffFFFFFF
         a_transform( )\backcolor[#__s_1] = $80FF0000
         a_transform( )\backcolor[#__s_2] = $800000FF
         ;
         
      EndProcedure
      
      Procedure a_free( *this._s_WIDGET )
         a_set( *this\parent )
         a_remove( *this )
         FreeStructure( *this\anchors\id )
         FreeStructure( *this\anchors )
         *this\anchors\id = 0
         *this\anchors    = 0
      EndProcedure
      
      Procedure a_update( *parent._s_WIDGET )
         If *parent\anchors ;= 1 ; Not ListSize( a_group( ))
            
            ; check transform group
            ForEach __widgets( )
               If __widgets( ) <> *parent And
                  is_child_( __widgets( ), *parent ) And
                  is_intersect_( __widgets( ), a_selector( ), [#__c_frame] )
                  
                  ;             ;             __widgets( )\anchors = 2
                  ;             ;             __widgets( )\root\anchors =- 1
                  ;             ;             __widgets( )\parent\anchors =- 1
                  ;             a_set_state( __widgets( ), 2 )
                  ;             a_set_state( __widgets( )\root, - 1 )
                  ;             a_set_state( __widgets( )\parent, - 1 )
               EndIf
            Next
            
            ; reset
            a_selector( )\x      = 0
            a_selector( )\y      = 0
            a_selector( )\width  = 0
            a_selector( )\height = 0
            ;ClearList( a_group( ))
            
            ; init group pos
            ForEach __widgets( )
               If __widgets( )\anchors = 2
                  If a_selector( )\x = 0 Or
                     a_selector( )\x > __widgets( )\frame_x( )
                     a_selector( )\x = __widgets( )\frame_x( )
                  EndIf
                  If a_selector( )\y = 0 Or
                     a_selector( )\y > __widgets( )\frame_y( )
                     a_selector( )\y = __widgets( )\frame_y( )
                  EndIf
               EndIf
            Next
            
            ; init group size
            ForEach __widgets( )
               If __widgets( )\anchors = 2
                  If a_selector( )\x + a_selector( )\width < __widgets( )\frame_x( ) + __widgets( )\frame_width( )
                     a_selector( )\width = ( __widgets( )\frame_x( ) - a_selector( )\x ) + __widgets( )\frame_width( )
                  EndIf
                  If a_selector( )\y + a_selector( )\height < __widgets( )\frame_y( ) + __widgets( )\frame_height( )
                     a_selector( )\height = ( __widgets( )\frame_y( ) - a_selector( )\y ) + __widgets( )\frame_height( )
                  EndIf
               EndIf
            Next
            
            ; init group list ( & delta size )
            ForEach __widgets( )
               If __widgets( )\anchors = 2
                  If AddElement( a_group( ))
                     a_transform( )\group.allocate( A_GROUP, ( ))
                     ;a_group( )\widget.allocate( WIDGET )
                     
                     a_group( )\widget = __widgets( )
                     a_group( )\x      = a_group( )\widget\frame_x( ) - a_selector( )\x
                     a_group( )\y      = a_group( )\widget\frame_y( ) - a_selector( )\y
                     
                     a_group( )\width  = a_selector( )\width - a_group( )\widget\frame_width( )
                     a_group( )\height = a_selector( )\height - a_group( )\widget\frame_height( )
                  EndIf
               EndIf
            Next
            
         Else
            ; update group pos
            ForEach a_group( )
               If a_selector( )\x = 0 Or
                  a_selector( )\x > a_group( )\widget\frame_x( )
                  a_selector( )\x = a_group( )\widget\frame_x( )
               EndIf
               If a_selector( )\y = 0 Or
                  a_selector( )\y > a_group( )\widget\frame_y( )
                  a_selector( )\y = a_group( )\widget\frame_y( )
               EndIf
            Next
            
            ; update group size
            ForEach a_group( )
               If a_selector( )\x + a_selector( )\width < a_group( )\widget\frame_x( ) + a_group( )\widget\frame_width( )
                  a_selector( )\width = ( a_group( )\widget\frame_x( ) - a_selector( )\x ) + a_group( )\widget\frame_width( )
               EndIf
               If a_selector( )\y + a_selector( )\height < a_group( )\widget\frame_y( ) + a_group( )\widget\frame_height( )
                  a_selector( )\height = ( a_group( )\widget\frame_y( ) - a_selector( )\y ) + a_group( )\widget\frame_height( )
               EndIf
            Next
            
            ; update delta size
            ForEach a_group( )
               a_group( )\x = a_group( )\widget\frame_x( ) - a_selector( )\x
               a_group( )\y = a_group( )\widget\frame_y( ) - a_selector( )\y
               
               a_group( )\width  = a_selector( )\width - a_group( )\widget\frame_width( )
               a_group( )\height = a_selector( )\height - a_group( )\widget\frame_height( )
            Next
         EndIf
         
         ;
         ;If a_focused( ) And a_focused( )\anchors
         a_size( a_entered( ), a_selector( ), 7);a_transform( )\size )
         a_move( a_entered( ),
                 a_selector( ),
                 a_selector( )\x - 3, ;a_transform( )\pos,
                 a_selector( )\y - 3, ;a_transform( )\pos,
                 a_selector( )\width + 6, ;a_transform( )\pos * 2,
                 a_selector( )\height + 6);a_transform( )\pos * 2 )
                                          ;EndIf
      EndProcedure
      
      Procedure a_object( x.l, y.l, width.l, height.l, text.s, Color.l, flag.q = #Null, framesize = 1 )
         Protected *this._s_WIDGET
         If Not Alpha(Color)
            Color = Color & $FFFFFF | 255 << 24
         EndIf
         ;
         *this._s_WIDGET = Container(x, y, width, height, #__flag_nogadgets)
         ;;*this\type = 0
         If text
            SetText( *this, text)
         EndIf
         ;
         SetFrame( *this, framesize)
         ;
         SetColor( *this, #__color_back, Color)
         ;
         If framesize
            SetColor( *this, #__color_frame, Color & $FFFFFF | 255 << 24)
         EndIf
         ;
         a_set( *this, #__a_full )
         ;
         ProcedureReturn *this
      EndProcedure
      
      Procedure a_events( *this._s_WIDGET, eventtype.l, *button, *data )
         Static *pressed._s_WIDGET
         Protected mouse_x.l = mouse( )\x
         Protected mouse_y.l = mouse( )\y
         
         Static move_x, move_y, resize_x, resize_y, *after
         Protected i
         Protected.l mx, my, mw, mh
         Protected.l Px, Py, IsGrid = Bool( mouse( )\steps > 1 )
         
         Protected text.s
         
         ;\\
         If eventtype = #__event_Focus
            If a_transform( )
               a_grid_change( *this\parent )
               
               
               ;\\ reset multi group
               If ListSize( a_group( ))
                  ForEach a_group( )
                     ;             a_set_state( a_group( )\widget, 1 )
                     ;             a_set_state( a_group( )\widget\root, 1 )
                     ;             a_set_state( a_group( )\widget\parent, 1 )
                  Next
                  
                  a_selector( )\x      = 0
                  a_selector( )\y      = 0
                  a_selector( )\width  = 0
                  a_selector( )\height = 0
                  ClearList( a_group( ))
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_MouseEnter
            ;Debug "        e "+*this\class
         EndIf
         
         ;\\
         If eventtype = #__event_MouseLeave
            ;Debug "        l "+*this\class +" "+ *this\enter
            If Not Mouse( )\press
               If Not *this\enter 
                  If Not ( a_transform( ) And *this = a_focused( ) )
                     ;
                     If Not a_index( )
                        If *this\parent And
                           *this\parent\anchors And
                           *this\parent\anchors\mode And *this\parent\frame_enter( ) And 
                           Not ( is_atpoint_( *this\parent, mouse( )\x, mouse( )\y, [#__c_frame] ) And
                                 is_atpoint_( *this\parent, mouse( )\x, mouse( )\y, [#__c_draw] ) )
                           ;
                           *this\parent\enter        = 0
                           *this = *this\parent
                        EndIf
                        
                        If *this\anchors And *this\anchors\mode 
                           If a_entered( ) = *this
                              ;Debug " a_hide "+ *this\class +" "+ *this\enter 
                              ;If Not ( EnteredWidget( ) And is_integral_( EnteredWidget( ) ) And EnteredWidget( )\parent = *this )
                              a_remove( *this )
                              a_entered( )       = a_focused( )
                              *this\root\repaint = #True
                              ; EndIf
                           EndIf
                        EndIf
                     EndIf
                     ;
                     If Not ( a_entered( ) And
                              is_atpoint_( a_entered( ), mouse( )\x, mouse( )\y, [#__c_frame] ) And
                              is_atpoint_( a_entered( ), mouse( )\x, mouse( )\y, [#__c_draw] ) )
                        If Not a_index( )
                           a_entered( ) = #Null
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf   
         
         ;
         If eventtype = #__event_down
            If mouse( )\buttons & #PB_Canvas_LeftButton
               ;\\ set current
               ; transform widget
               If a_entered( )
                  If a_transform( ) And 
                     Not a_entered( )\anchors\mode & #__a_novisible
                     ;
                     a_set( a_entered( ) )
                  EndIf
                  a_delta( a_entered( ) )
                  *pressed = a_entered( )
               EndIf
               ;
               If a_transform( ) 
                  If *this = a_main( )
                     If a_focused( )
                        ; Debug "remove "+a_focused( )\class
                        a_remove( a_focused( ) )
                        a_focused( ) = #Null
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;
         If eventtype = #__event_Up
            If mouse( )\buttons & #PB_Canvas_LeftButton
               If *pressed 
                  If *pressed\anchors\id[a_index( )]
                     If is_atpoint_( *pressed\anchors\id[a_index( )], mouse_x, mouse_y )
                        *pressed\anchors\id[a_index( )]\state = #__s_1
                     Else
                        *pressed\anchors\id[a_index( )]\state = #__s_0
                     EndIf
                     ;
                     *pressed\root\repaint = #True
                  EndIf
                  ; 
                  ;               ; if not a_set
                  ;               If *pressed\anchors And
                  ;                  Not *pressed\anchors\mode
                  ;                 a_focused( ) = #Null
                  ;               EndIf
                  ;
                  ; init multi group selector
                  If a_transform( ) And a_transform( )\grab And a_transform( )\type = 0
                     a_update( *pressed )
                  EndIf
                  ;
                  *pressed = #Null
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_DragStart
            ;\\ change frame color
            If a_transform( ) 
               If a_transform( )\type = 0
                  a_transform( )\dot_ted   = 1
                  a_transform( )\dot_space = 3
                  a_transform( )\dot_line  = 5
                  
                  a_transform( )\selectorbackcolor  = $80DFE2E2
                  a_transform( )\selectorframecolor = $BA161616
               Else
                  a_transform( )\selectorbackcolor  = $9F646565
                  a_transform( )\selectorframecolor = $BA161616
                  ;a_selector( )\color\front = $ffffffff
               EndIf
            EndIf
            
            ;\\
            If *this\container > 0 And
               *this\inner_enter( )
               
               If Not a_index( )
                  a_grid_change( *this )
                  
                  ReDraw( *this\root )
                  
                  If *this\root
                     If StartDrawing( Output( *this\root ))
                        a_transform( )\grab = GrabDrawingImage( #PB_Any, 0, 0, *this\root\width, *this\root\height )
                        StopDrawing( )
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;
         If eventtype = #__event_MouseMove
            If Not ( a_transform( ) And a_transform( )\grab )
               If mouse( )\press And *pressed And *pressed\press
                  If a_index( ) And *pressed\anchors\id[a_index( )] And *pressed\anchors\id[a_index( )]\state = #__s_2
                     mouse_x - mouse( )\delta\x
                     mouse_y - mouse( )\delta\y
                     
                     ;\\
                     If mouse( )\steps > 0
                        mouse_x + ( mouse_x % mouse( )\steps )
                        mouse_x = ( mouse_x / mouse( )\steps ) * mouse( )\steps
                        mouse_y + ( mouse_y % mouse( )\steps )
                        mouse_y = ( mouse_y / mouse( )\steps ) * mouse( )\steps
                     EndIf
                     
                     ;\\
                     If resize_x <> mouse_x Or
                        resize_y <> mouse_y
                        resize_x = mouse_x
                        resize_y = mouse_y
                        
                        If *pressed\anchors ;= 1
                           mw = #PB_Ignore
                           mh = #PB_Ignore
                           
                           If a_index( ) <> #__a_moved
                              ;\\ horizontal
                              Select a_index( )
                                 Case #__a_left, #__a_left_top, #__a_left_bottom ; left
                                    mw = (( *pressed\container_x( ) - mouse_x ) + *pressed\container_width( )) - *pressed\parent\scroll_x( )
                                    If mw <= 0
                                       mouse_x = ( *pressed\container_x( ) + *pressed\container_width( )) - *pressed\parent\scroll_x( )
                                       mw      = 0
                                    EndIf
                                    If *pressed\fs
                                       If *pressed\type <> #__type_window
                                          mw + *pressed\fs * 2 + *pressed\fs[1] + *pressed\fs[3] ; ( *pressed\frame_width( ) - *pressed\inner_width( ) )
                                       EndIf
                                    EndIf
                                    
                                 Case #__a_right, #__a_right_top, #__a_right_bottom ; right
                                    mw = ( mouse_x - *pressed\container_x( ) ) + IsGrid
                              EndSelect
                              
                              ;\\ vertical
                              Select a_index( )
                                 Case #__a_top, #__a_left_top, #__a_right_top ; top
                                    mh = (( *pressed\container_y( ) - mouse_y ) + *pressed\container_height( )) - *pressed\parent\scroll_y( )
                                    If mh <= 0
                                       mouse_y = ( *pressed\container_y( ) + *pressed\container_height( )) - *pressed\parent\scroll_y( )
                                       mh      = 0
                                    EndIf
                                    If *pressed\fs
                                       If *pressed\type <> #__type_window
                                          mh + *pressed\fs * 2 + *pressed\fs[2] + *pressed\fs[4] ; ( *pressed\frame_height( ) - *pressed\inner_height( ) )
                                       EndIf
                                    EndIf
                                    
                                 Case #__a_bottom, #__a_left_bottom, #__a_right_bottom ; bottom
                                    mh = ( mouse_y - *pressed\container_y( ) ) + IsGrid
                              EndSelect
                              
                              ;\\
                              If a_index( ) <> #__a_left_top
                                 If a_index( ) <> #__a_left And a_index( ) <> #__a_left_bottom
                                    mouse_x = #PB_Ignore
                                 EndIf
                                 If a_index( ) <> #__a_top And a_index( ) <> #__a_right_top
                                    mouse_y = #PB_Ignore
                                 EndIf
                              EndIf
                           EndIf
                           
                           ;Debug " " + mw + " " + mh
                           Resize( *pressed, mouse_x, mouse_y, mw, mh )
                           
                        Else
                           If a_main( )
                              mouse_x + a_main( )\container_x( )
                              mouse_y + a_main( )\container_y( )
                           EndIf
                           
                           ; horizontal
                           Select a_index( )
                              Case #__a_left, #__a_left_top, #__a_left_bottom, #__a_moved ; left
                                 If a_index( ) <> #__a_moved
                                    a_selector( )\width = ( a_selector( )\x - mouse_x ) + a_selector( )\width
                                 EndIf
                                 a_selector( )\x = mouse_x
                                 
                              Case #__a_right, #__a_right_top, #__a_right_bottom ; right
                                 a_selector( )\width = ( mouse_x - a_selector( )\x ) + IsGrid
                           EndSelect
                           
                           ; vertical
                           Select a_index( )
                              Case #__a_top, #__a_left_top, #__a_right_top, #__a_moved ; top
                                 If a_index( ) <> #__a_moved
                                    a_selector( )\height = ( a_selector( )\y - mouse_y ) + a_selector( )\height
                                 EndIf
                                 a_selector( )\y = mouse_y
                                 
                              Case #__a_bottom, #__a_left_bottom, #__a_right_bottom ; bottom
                                 a_selector( )\height = ( mouse_y - a_selector( )\y ) + IsGrid
                           EndSelect
                           
                           ;
                           ;\\\ multi resize
                           ;
                           
                           ;                   a_selector( )\x = _x_
                           ;                   a_selector( )\y = _y_
                           ;
                           ;                   a_selector( )\width = _width_
                           ;                   a_selector( )\height = _height_
                           
                           a_move( a_entered( ),
                                   a_selector( ),
                                   a_selector( )\x - 0, ;a_transform( )\pos,
                                   a_selector( )\y - 0, ;a_transform( )\pos,
                                   a_selector( )\width + 0, ;a_transform( )\pos * 2,
                                   a_selector( )\height + 0);a_transform( )\pos * 2)
                           
                           Select a_index( )
                              Case #__a_left, #__a_left_top, #__a_left_bottom, #__a_moved ; left
                                 ForEach a_group( )
                                    Resize( a_group( )\widget,
                                            ( a_selector( )\x - *pressed\inner_x( ) ) + a_group( )\x,
                                            #PB_Ignore, a_selector( )\width - a_group( )\width, #PB_Ignore )
                                 Next
                                 
                              Case #__a_right, #__a_right_top, #__a_right_bottom ; right
                                 ForEach a_group( )
                                    Resize( a_group( )\widget, #PB_Ignore, #PB_Ignore, a_selector( )\width - a_group( )\width, #PB_Ignore )
                                 Next
                           EndSelect
                           
                           Select a_index( )
                              Case #__a_top, #__a_left_top, #__a_right_top, #__a_moved ; top
                                 ForEach a_group( )
                                    Resize( a_group( )\widget, #PB_Ignore,
                                            ( a_selector( )\y - *pressed\inner_y( ) ) + a_group( )\y,
                                            #PB_Ignore, a_selector( )\height - a_group( )\height )
                                 Next
                                 
                              Case #__a_bottom, #__a_left_bottom, #__a_right_bottom ; bottom
                                 ForEach a_group( )
                                    Resize( a_group( )\widget, #PB_Ignore, #PB_Ignore, #PB_Ignore, a_selector( )\height - a_group( )\height )
                                 Next
                           EndSelect
                           
                        EndIf
                        
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ; change selector coordinate
            If a_transform( ) And a_transform( )\grab
               
               If mouse( )\steps > 0
                  ;mouse_x + ( mouse_x % mouse( )\steps )
                  mouse_x = ( mouse_x / mouse( )\steps ) * mouse( )\steps
                  ;mouse_y + ( mouse_y % mouse( )\steps )
                  mouse_y = ( mouse_y / mouse( )\steps ) * mouse( )\steps
               EndIf
               
               ;\\
               If move_x <> mouse_x
                  ; to left
                  If mouse( )\delta\x > mouse_x
                     a_selector( )\x     = mouse_x + mouse( )\steps
                     a_selector( )\width = mouse( )\delta\x - mouse_x
                  Else
                     a_selector( )\x     = mouse( )\delta\x
                     a_selector( )\width = mouse_x - mouse( )\delta\x
                  EndIf
                  
                  a_selector( )\x + a_main( )\container_x( )
                  If mouse( )\steps > 0
                     a_selector( )\width + 1
                  EndIf
                  *this\root\repaint = #True
                  move_x             = mouse_x
               EndIf
               
               ;\\
               If move_y <> mouse_y
                  ; to top
                  If mouse( )\delta\y > mouse_y
                     a_selector( )\y      = mouse_y + mouse( )\steps
                     a_selector( )\height = mouse( )\delta\y - mouse_y
                  Else
                     a_selector( )\y      = mouse( )\delta\y
                     a_selector( )\height = mouse_y - mouse( )\delta\y
                  EndIf
                  
                  a_selector( )\y + a_main( )\container_y( )
                  If mouse( )\steps > 0
                     a_selector( )\height + 1
                  EndIf
                  *this\root\repaint = #True
                  move_y             = mouse_y
               EndIf
               
            EndIf
         EndIf
         
         ;-\\ widget::a_key_events
         If eventtype = #__event_KeyDown
            If a_focused( )
               If a_focused( )\anchors ;= 1
                  mx = a_focused( )\container_x( )
                  my = a_focused( )\container_y( )
                  mw = a_focused( )\frame_width( )
                  mh = a_focused( )\frame_height( )
               Else
                  mx = a_selector( )\x
                  my = a_selector( )\y
                  mw = a_selector( )\width
                  mh = a_selector( )\height
               EndIf
               
               Select Keyboard( )\Key[1]
                  Case (#PB_Canvas_Alt | #PB_Canvas_Control), #PB_Canvas_Shift
                     Select Keyboard( )\Key
                        Case #PB_Shortcut_Left : mw - mouse( )\steps : a_index( ) = #__a_right
                        Case #PB_Shortcut_Right : mw + mouse( )\steps : a_index( ) = #__a_right
                           
                        Case #PB_Shortcut_Up : mh - mouse( )\steps : a_index( ) = #__a_bottom
                        Case #PB_Shortcut_Down : mh + mouse( )\steps : a_index( ) = #__a_bottom
                     EndSelect
                     
                     Resize( a_focused( ), mx, my, mw, mh )
                     
                  Case (#PB_Canvas_Shift | #PB_Canvas_Control), #PB_Canvas_Alt ;, #PB_Canvas_Control, #PB_Canvas_Command, #PB_Canvas_Control | #PB_Canvas_Command
                     Select Keyboard( )\Key
                        Case #PB_Shortcut_Left : mx - mouse( )\steps : a_index( ) = #__a_moved
                        Case #PB_Shortcut_Right : mx + mouse( )\steps : a_index( ) = #__a_moved
                           
                        Case #PB_Shortcut_Up : my - mouse( )\steps : a_index( ) = #__a_moved
                        Case #PB_Shortcut_Down : my + mouse( )\steps : a_index( ) = #__a_moved
                     EndSelect
                     
                     Resize( a_focused( ), mx, my, mw, mh )
                     
                  Default
                     ;\\ tab focus
                     Select Keyboard( )\Key
                        Case #PB_Shortcut_Tab
                           
                        Case #PB_Shortcut_Left
                           If a_focused( )\parent
                              If a_focused( )\parent\parent And
                                 a_focused( )\parent\parent\anchors
                                 a_set( a_focused( )\parent )
                              Else
                                 If a_focused( )\parent\FirstWidget( )
                                    a_set( a_focused( )\parent\FirstWidget( ) )
                                 Else
                                    If a_main( )\FirstWidget( )
                                       a_set( a_main( )\FirstWidget( ) )
                                    EndIf
                                 EndIf
                              EndIf
                           EndIf
                           
                        Case #PB_Shortcut_Up
                           If a_focused( )\BeforeWidget( )
                              a_set( a_focused( )\BeforeWidget( ) )
                           EndIf
                           
                        Case #PB_Shortcut_Down
                           If a_focused( )\AfterWidget( )
                              a_set( a_focused( )\AfterWidget( ) )
                           EndIf
                           
                        Case #PB_Shortcut_Right
                           If a_focused( )\FirstWidget( )
                              a_set( a_focused( )\FirstWidget( ) )
                           EndIf
                           
                           
                     EndSelect
                     
               EndSelect
            EndIf
         EndIf
         
         If eventtype = #__event_Up
            If mouse( )\buttons & #PB_Canvas_LeftButton
               If a_transform( )
                  a_transform( )\grab = 0
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn *this\root\repaint
      EndProcedure
      
      
      ;-
      Procedure.l X( *this._s_WIDGET, mode.l = #__c_frame )
         ProcedureReturn ( Bool( Not *this\hide ) * *this\x[mode] )
      EndProcedure
      
      Procedure.l Y( *this._s_WIDGET, mode.l = #__c_frame )
         ProcedureReturn ( Bool( Not *this\hide ) * *this\y[mode] )
      EndProcedure
      
      Procedure.l Width( *this._s_WIDGET, mode.l = #__c_frame )
         ProcedureReturn ( Bool( Not *this\hide ) * *this\width[mode] )
      EndProcedure
      
      Procedure.l Height( *this._s_WIDGET, mode.l = #__c_frame )
         ProcedureReturn ( Bool( Not *this\hide ) * *this\height[mode] )
      EndProcedure
      
      Procedure.l Index( *this._s_WIDGET )
         ProcedureReturn *this\index
      EndProcedure
      
      Procedure.l Type( *this._s_WIDGET ) ; Returns created widget type
         ProcedureReturn *this\type
      EndProcedure
      
      Procedure.b IsContainer( *this._s_WIDGET )
         ProcedureReturn *this\container
      EndProcedure
      
      Procedure.l MouseButtons( )
         ProcedureReturn mouse( )\buttons
      EndProcedure
      
      Procedure.w ChangeValue( *this._s_widget ) ; -32768 to +32767
         If *this\bar
            ProcedureReturn *this\bar\page\change
         EndIf
      EndProcedure
      
      Procedure IsChild( *this._s_WIDGET, *parent._s_WIDGET )
         ; ProcedureReturn Bool( Not ( *parent\AfterWidget( ) And *parent\AfterWidget( ) = *this )) ;
         Protected result
         
         If *this And
            ; *this <> *parent And
            *parent\haschildren
            
            Repeat
               If *parent = *this\parent
                  result = *this
                  Break
               EndIf
               
               *this = *this\parent
               If Not *this
                  result = 0
                  Break
               EndIf
            Until is_root_( *this )
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i WidgetID( index )
         Protected.i result
         If index >= 0
            PushListPosition( __widgets( ) )
            ForEach __widgets( )
               If __widgets( )\index = index
                  result = __widgets( )
                  Break
               EndIf
            Next
            PopListPosition( __widgets( ) )
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.i Sticky( *window._s_WIDGET = #PB_Default, state.b = #PB_Default )
         Protected result = PopupWindow( )
         
         If state <> #PB_Default
            If is_window_( *window )
               If state
                  PopupWindow( ) = *window
               Else
                  PopupWindow( ) = #Null
               EndIf
               
               SetForeground( *window )
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Macro HideState( _this_ )
         Bool( _this_\hidden Or
               _this_\parent\hide Or
               ( _this_\parent\TabBox( ) And
                 _this_\parent\TabBox( )\FocusedTabIndex( ) <> _this_\AddedTabIndex( ) ))
         
         
         ; Чтобы обновить границы отоброжения (clip-coordinate)
         _this_\resize | #__reclip
      EndMacro
      
      
      Procedure Childrens( *this._s_WIDGET, *mode = 0, *result.Integer = 0 )
         If *this\address ; *this\haschildren
            PushListPosition( __widgets( ) )
            ChangeCurrentElement( __widgets( ), *this\address )
            While NextElement( __widgets( ) )
               If Not IsChild( __widgets( ), *this )
                  Break
               EndIf
               If *mode > 255
                  If IsChild( __widgets( ), *mode )
                     Break
                  EndIf
               Else
                  If *mode = 1
                     ; hide all children's except those whose parent-item is selected
                     __widgets( )\hide = HideState( __widgets( ) )
                  EndIf
                  If *mode = 2
                     ; disable all children's except those whose parent-item is selected
                     If *this\disable
                        __widgets( )\disable = - 1
                     Else
                        __widgets( )\disable = 0
                     EndIf
                     
                     If __widgets( )\TabBox( )
                        If __widgets( )\disable
                           __widgets( )\TabBox( )\disable = - 1
                        Else
                           __widgets( )\TabBox( )\disable = 0
                        EndIf
                     EndIf
                     If __widgets( )\StringBox( )
                        If __widgets( )\disable
                           __widgets( )\StringBox( )\disable = - 1
                        Else
                           __widgets( )\StringBox( )\disable = 0
                        EndIf
                     EndIf
                     If __widgets( )\scroll
                        If __widgets( )\scroll\v
                           If __widgets( )\disable
                              __widgets( )\scroll\v\disable = - 1
                           Else
                              __widgets( )\scroll\v\disable = 0
                           EndIf
                        EndIf
                        If __widgets( )\scroll\h
                           If __widgets( )\disable
                              __widgets( )\scroll\h\disable = - 1
                           Else
                              __widgets( )\scroll\h\disable = 0
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               If *result
                  *result\i = __widgets( )
               EndIf
            Wend
            PopListPosition( __widgets( ) )
         EndIf
      EndProcedure
      
      Procedure.b Hide( *this._s_WIDGET, state.b = #PB_Default )
         If State = #PB_Default : ProcedureReturn *this\hide : EndIf
         
         If *this\hidden <> state
            *this\hidden = state
            
            *this\hide = HideState( *this )
            
            If *this\haschildren
               Childrens( *this, 1 )
            EndIf
         EndIf
      EndProcedure
      
      ;
      Procedure.b Disable( *this._s_WIDGET, State.b = #PB_Default )
         Protected result.b = *this\disable
         
         If State >= 0 And
            *this\disable <> State
            ;Debug " DISABLE - " + *this\class + " " + State
            ;         ;
            ;         If *this\disable =- 1
            ;           If *this\haschildren
            ;             PushListPosition(widget( ))
            ;             If StartEnumerate( *this )
            ;               ; Debug "enable "+widget( )\text\string
            ;               widget( )\disable = 0
            ;               StopEnumerate( )
            ;             EndIf
            ;             PopListPosition(widget( ))
            ;           EndIf
            ;         EndIf
            
            *this\disable = State
            
            If *this\TabBox( )
               If *this\disable
                  *this\TabBox( )\disable = - 1
               Else
                  *this\TabBox( )\disable = 0
               EndIf
            EndIf
            If *this\StringBox( )
               If *this\disable
                  *this\StringBox( )\disable = - 1
               Else
                  *this\StringBox( )\disable = 0
               EndIf
            EndIf
            If *this\scroll
               If *this\scroll\v
                  If *this\disable
                     *this\scroll\v\disable = - 1
                  Else
                     *this\scroll\v\disable = 0
                  EndIf
               EndIf
               If *this\scroll\h
                  If *this\disable
                     *this\scroll\h\disable = - 1
                  Else
                     *this\scroll\h\disable = 0
                  EndIf
               EndIf
            EndIf
            
            If *this\haschildren
               Childrens( *this._s_WIDGET, 2 )
            EndIf
            
            PostRepaint( *this\root )
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Macro clip_output_( _address_, _mode_ = [#__c_draw] )
         CompilerIf Not ( #PB_Compiler_OS = #PB_OS_MacOS And Not Defined( draw, #PB_Module ))
            ClipOutput( _address_\x#_mode_, _address_\y#_mode_, _address_\width#_mode_, _address_\height#_mode_ )
         CompilerEndIf
      EndMacro
      
      Procedure ClipPut( *this._s_WIDGET, x, y, width, height )
         Protected clip_x, clip_y, clip_w, clip_h
         
         ; clip inner coordinate
         If *this\draw_x( ) < x
            clip_x = x
         Else
            clip_x = *this\draw_x( )
         EndIf
         
         If *this\draw_y( ) < y
            clip_y = y
         Else
            clip_y = *this\draw_y( )
         EndIf
         
         If *this\draw_width( ) > width
            clip_w = width
         Else
            clip_w = *this\draw_width( )
         EndIf
         
         If *this\draw_height( ) > height
            clip_h = height
         Else
            clip_h = *this\draw_height( )
         EndIf
         
         PB(ClipOutput)( clip_x, clip_y, clip_w, clip_h )
      EndProcedure
      
      Procedure Reclip( *this._s_WIDGET )
         Macro clip_width_( _address_, _parent_, _x_width_, _parent_ix_iwidth_, _mode_ = )
            If _parent_ And
               (_parent_\x#_mode_ + _parent_\width#_mode_) > 0 And
               (_parent_\x#_mode_ + _parent_\width#_mode_) < (_x_width_) And
               (_parent_ix_iwidth_) > (_parent_\x#_mode_ + _parent_\width#_mode_)
               
               _address_\width#_mode_ = (_parent_\x#_mode_ + _parent_\width#_mode_) - _address_\x#_mode_
            ElseIf _parent_ And (_parent_ix_iwidth_) > 0 And (_parent_ix_iwidth_) < (_x_width_)
               
               _address_\width#_mode_ = (_parent_ix_iwidth_) - _address_\x#_mode_
            Else
               _address_\width#_mode_ = (_x_width_) - _address_\x#_mode_
            EndIf
            
            If _address_\width#_mode_ < 0
               _address_\width#_mode_ = 0
            EndIf
         EndMacro
         
         Macro clip_height_( _address_, _parent_, _y_height_, _parent_iy_iheight_, _mode_ = )
            If _parent_ And
               (_parent_\y#_mode_ + _parent_\height#_mode_) > 0 And
               (_parent_\y#_mode_ + _parent_\height#_mode_) < (_y_height_) And
               (_parent_iy_iheight_) > (_parent_\y#_mode_ + _parent_\height#_mode_)
               
               _address_\height#_mode_ = (_parent_\y#_mode_ + _parent_\height#_mode_) - _address_\y#_mode_
            ElseIf _parent_ And (_parent_iy_iheight_) > 0 And (_parent_iy_iheight_) < (_y_height_)
               
               _address_\height#_mode_ = (_parent_iy_iheight_) - _address_\y#_mode_
            Else
               _address_\height#_mode_ = (_y_height_) - _address_\y#_mode_
            EndIf
            
            If _address_\height#_mode_ < 0
               _address_\height#_mode_ = 0
            EndIf
         EndMacro
         
         ; then move and size parent set clip coordinate
         Protected _p_x2_
         Protected _p_y2_
         Protected *parent._s_WIDGET
         
         If *this\bounds\attach
            *parent = *this\bounds\attach\parent
         Else
            *parent = *this\parent
         EndIf
         
         If test_scrollbars_reclip
            If *parent
               Debug "   reClip - " + *this\class + " * " + *parent\inner_width( ) + " " + *parent\inner_height( )
            EndIf
         EndIf
         
         If is_root_( *this )
            If *this\draw_width( ) <> *this\width
               *this\draw_width( )     = *this\width
               *this\width[#__c_draw2] = *this\width
            EndIf
            If *this\draw_height( ) <> *this\height
               *this\draw_height( )     = *this\height
               *this\height[#__c_draw2] = *this\height
            EndIf
         Else
            If *parent
               _p_x2_ = *parent\inner_x( ) + *parent\inner_width( )
               _p_y2_ = *parent\inner_y( ) + *parent\inner_height( )
               
               ; for the splitter children's
               If *parent\type = #__type_Splitter
                  If *parent\split_1( ) = *this
                     _p_x2_ = *parent\bar\button[1]\x + *parent\bar\button[1]\width
                     _p_y2_ = *parent\bar\button[1]\y + *parent\bar\button[1]\height
                  EndIf
                  If *parent\split_2( ) = *this
                     _p_x2_ = *parent\bar\button[2]\x + *parent\bar\button[2]\width
                     _p_y2_ = *parent\bar\button[2]\y + *parent\bar\button[2]\height
                  EndIf
               EndIf
               
               If *this\child And Not *this\bounds\attach
                  If *this\type = #__type_TabBar Or
                     *this\type = #__type_ToolBar Or
                     *this\type = #__type_ScrollBar
                     _p_x2_ = *parent\inner_x( ) + *parent\container_width( )
                     _p_y2_ = *parent\inner_y( ) + *parent\container_height( )
                  EndIf
                  
                  ; for the scrollarea children's except scrollbars
               Else
                  If *parent\scroll_width( ) And
                     _p_x2_ > *parent\inner_x( ) + *parent\scroll_x( ) + *parent\scroll_width( )
                     _p_x2_ = *parent\inner_x( ) + *parent\scroll_x( ) + *parent\scroll_width( )
                  EndIf
                  If *parent\scroll_height( ) And
                     _p_y2_ > *parent\inner_y( ) + *parent\scroll_y( ) + *parent\scroll_height( )
                     _p_y2_ = *parent\inner_y( ) + *parent\scroll_y( ) + *parent\scroll_height( )
                  EndIf
               EndIf
            EndIf
            
            ; then move and size parent set clip coordinate
            ;\\ x&y - clip screen coordinate
            If *parent And
               *parent\inner_x( ) > *this\screen_x( ) And
               *parent\inner_x( ) > *parent\draw_x( )
               *this\draw_x( ) = *parent\inner_x( )
            ElseIf *parent And *parent\draw_x( ) > *this\screen_x( )
               *this\draw_x( ) = *parent\draw_x( )
            Else
               *this\draw_x( ) = *this\screen_x( )
            EndIf
            If *parent And
               *parent\inner_y( ) > *this\screen_y( ) And
               *parent\inner_y( ) > *parent\draw_y( )
               *this\draw_y( ) = *parent\inner_y( )
            ElseIf *parent And *parent\draw_y( ) > *this\screen_y( )
               *this\draw_y( ) = *parent\draw_y( )
            Else
               *this\draw_y( ) = *this\screen_y( )
            EndIf
            If *this\draw_x( ) < 0 : *this\draw_x( ) = 0 : EndIf
            If *this\draw_y( ) < 0 : *this\draw_y( ) = 0 : EndIf
            
            ;\\ width&height - clip coordinate
            clip_width_( *this, *parent, *this\screen_x( ) + *this\screen_width( ), _p_x2_, [#__c_draw] )
            clip_height_( *this, *parent, *this\screen_y( ) + *this\screen_height( ), _p_y2_, [#__c_draw] )
            
            
            ;\\ x&y - clip inner coordinate
            If *this\draw_x( ) < *this\inner_x( )
               *this\x[#__c_draw2] = *this\inner_x( )
            Else
               *this\x[#__c_draw2] = *this\draw_x( )
            EndIf
            If *this\draw_y( ) < *this\inner_y( )
               *this\y[#__c_draw2] = *this\inner_y( )
            Else
               *this\y[#__c_draw2] = *this\draw_y( )
            EndIf
            
            ;\\ width&height - clip inner coordinate
            If *parent
               ;           If *this\scroll_width( ) And *this\scroll_width( ) < *this\inner_width( )
               ;             clip_width_( *this, *parent, *this\inner_x( ) + *this\scroll_width( ), _p_x2_, [#__c_draw2] )
               ;           Else
               clip_width_( *this, *parent, *this\inner_x( ) + *this\inner_width( ), _p_x2_, [#__c_draw2] )
               ;           EndIf
               ;           If *this\scroll_height( ) And *this\scroll_height( ) < *this\inner_height( )
               ;             clip_height_( *this, *parent, *this\inner_y( ) + *this\scroll_height( ), _p_y2_, [#__c_draw2] )
               ;           Else
               clip_height_( *this, *parent, *this\inner_y( ) + *this\inner_height( ), _p_y2_, [#__c_draw2] )
               ;           EndIf
            EndIf
         EndIf
         
         ;
         ; clip child bar
         If *this\TabBox( )
            *this\TabBox( )\draw_x( )      = *this\draw_x( )
            *this\TabBox( )\draw_y( )      = *this\draw_y( )
            *this\TabBox( )\draw_width( )  = *this\draw_width( )
            *this\TabBox( )\draw_height( ) = *this\draw_height( )
         EndIf
         If *this\StringBox( )
            *this\StringBox( )\draw_x( )      = *this\draw_x( )
            *this\StringBox( )\draw_y( )      = *this\draw_y( )
            *this\StringBox( )\draw_width( )  = *this\draw_width( )
            *this\StringBox( )\draw_height( ) = *this\draw_height( )
         EndIf
         If *this\scroll
            If *this\scroll\v
               *this\scroll\v\draw_x( )      = *this\draw_x( )
               *this\scroll\v\draw_y( )      = *this\draw_y( )
               *this\scroll\v\draw_width( )  = *this\draw_width( )
               *this\scroll\v\draw_height( ) = *this\draw_height( )
            EndIf
            If *this\scroll\h
               *this\scroll\h\draw_x( )      = *this\draw_x( )
               *this\scroll\h\draw_y( )      = *this\draw_y( )
               *this\scroll\h\draw_width( )  = *this\draw_width( )
               *this\scroll\h\draw_height( ) = *this\draw_height( )
            EndIf
         EndIf
         
         ProcedureReturn Bool( *this\draw_width( ) > 0 And *this\draw_height( ) > 0 )
      EndProcedure
      
      Procedure.b Resize( *this._s_WIDGET, x.l, y.l, width.l, height.l )
         Protected.b result
         Protected.l ix, iy, iwidth, iheight, Change_x, Change_y, Change_width, Change_height
         ;Debug " resize - "+*this\class +" "+x +" "+ y +" "+ width +" "+ height
         
         ;\\
         If *this\anchors
            If *this\bs < *this\fs + *this\anchors\pos
               *this\bs = *this\fs + *this\anchors\pos
            EndIf
         Else
            If *this\bs < *this\fs
               *this\bs = *this\fs
            EndIf
         EndIf
         
         ;          If *this\barHeight
         ;             Debug "" + *this\class + " " + *this\barHeight + " " + *this\MenuBarHeight + " " + *this\ToolBarHeight
         ;          EndIf
         
         ;\\
         If *this\type = #__type_Window Or
            *this\type = #__type_Container
            If *this\fs[2] <> *this\barHeight + *this\MenuBarHeight + *this\ToolBarHeight
               *this\fs[2] = *this\barHeight + *this\MenuBarHeight + *this\ToolBarHeight
            EndIf
         EndIf
         
         ;
         ;          If *this\root\canvas\container
         ;             ResizeWindow( *this\root\canvas\window, #PB_Ignore, #PB_Ignore, width, height )
         ;             PB(ResizeGadget)( *this\root\canvas\gadget, #PB_Ignore, #PB_Ignore, width, height )
         ;             x = ( *this\bs * 2 - *this\fs * 2 )
         ;             y = ( *this\bs * 2 - *this\fs * 2 )
         ;             width - ( *this\bs * 2 - *this\fs * 2 ) * 2
         ;             height - ( *this\bs * 2 - *this\fs * 2 ) * 2
         ;
         ;             *this\frame_x( ) = #PB_Ignore
         ;             *this\frame_y( ) = #PB_Ignore
         ;             ;           *this\frame_width( ) = #PB_Ignore
         ;             ;           *this\frame_height( ) = #PB_Ignore
         ;          Else
         If *this\autosize
            If *this\parent
               If *this <> *this\parent
                  x      = *this\parent\inner_x( )
                  Y      = *this\parent\inner_y( )
                  width  = *this\parent\inner_width( )
                  height = *this\parent\inner_height( )
               EndIf
            EndIf
            
         Else
            ;\\
            If mouse( )\steps > 1 And 
               *this\anchors And
               *this\anchors\mode
               ;
               If x <> #PB_Ignore
                  x + ( x % mouse( )\steps )
                  x = ( x / mouse( )\steps ) * mouse( )\steps
               EndIf
               If y <> #PB_Ignore
                  y + ( y % mouse( )\steps )
                  y = ( y / mouse( )\steps ) * mouse( )\steps
               EndIf
               If width <> #PB_Ignore
                  width + ( width % mouse( )\steps )
                  width = (( width / mouse( )\steps ) * mouse( )\steps ) + 1
               EndIf
               If height <> #PB_Ignore
                  height + ( height % mouse( )\steps )
                  height = (( height / mouse( )\steps ) * mouse( )\steps ) + 1
               EndIf
            EndIf
            
            ;\\ move boundaries
            If *this\bounds\move
               If x <> #PB_Ignore
                  If *this\bounds\move\min\x <> #PB_Ignore And
                     x < *this\bounds\move\min\x
                     If width <> #PB_Ignore
                        width - ( *this\bounds\move\min\x - x )
                     EndIf
                     x = *this\bounds\move\min\x
                  EndIf
                  If *this\bounds\move\max\x <> #PB_Ignore
                     If width <> #PB_Ignore
                        If x > *this\bounds\move\max\x - width
                           x = *this\bounds\move\max\x - width
                        EndIf
                     Else
                        If x > *this\bounds\move\max\x - *this\frame_width( )
                           x = *this\bounds\move\max\x - *this\frame_width( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               If y <> #PB_Ignore
                  If *this\bounds\move\min\y <> #PB_Ignore And
                     y < *this\bounds\move\min\y
                     If height <> #PB_Ignore
                        height - ( *this\bounds\move\min\y - y )
                     EndIf
                     y = *this\bounds\move\min\y
                  EndIf
                  If *this\bounds\move\max\y <> #PB_Ignore
                     If height <> #PB_Ignore
                        If y > *this\bounds\move\max\y - height
                           y = *this\bounds\move\max\y - height
                        EndIf
                     Else
                        If y > *this\bounds\move\max\y - *this\frame_height( )
                           y = *this\bounds\move\max\y - *this\frame_height( )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ size boundaries
            If *this\bounds\size
               If *this\type = #__type_window
                  Protected h_frame = *this\fs * 2 + *this\fs[1] + *this\fs[3]
                  Protected v_frame = *this\fs * 2 + *this\fs[2] + *this\fs[4]
               EndIf
               
               If width <> #PB_Ignore
                  If #PB_Ignore <> *this\bounds\size\min\width And
                     width < *this\bounds\size\min\width - h_frame
                     If x <> #PB_Ignore
                        x + ( width - *this\bounds\size\min\width ) + h_frame
                     EndIf
                     width = *this\bounds\size\min\width - h_frame
                  EndIf
                  If #PB_Ignore <> *this\bounds\size\max\width And
                     width > *this\bounds\size\max\width - h_frame
                     If x <> #PB_Ignore
                        x + ( width - *this\bounds\size\max\width ) + h_frame
                     EndIf
                     width = *this\bounds\size\max\width - h_frame
                  EndIf
                  
                  ;\\
                  If *this\bounds\move
                     If x <> #PB_Ignore
                        If width > *this\bounds\size\max\width - ( x - *this\bounds\move\min\x ) - h_frame
                           width = *this\bounds\size\max\width - ( x - *this\bounds\move\min\x ) - h_frame
                        EndIf
                     Else
                        If width > *this\bounds\size\max\width - ( *this\container_x( ) - *this\bounds\move\min\x ) - h_frame
                           width = *this\bounds\size\max\width - ( *this\container_x( ) - *this\bounds\move\min\x ) - h_frame
                        EndIf
                     EndIf
                  EndIf
               EndIf
               If height <> #PB_Ignore
                  If #PB_Ignore <> *this\bounds\size\min\height And
                     height < *this\bounds\size\min\height - v_frame
                     If y <> #PB_Ignore
                        y + ( height - *this\bounds\size\min\height ) + v_frame
                     EndIf
                     height = *this\bounds\size\min\height - v_frame
                  EndIf
                  If #PB_Ignore <> *this\bounds\size\max\height And
                     height > *this\bounds\size\max\height - v_frame
                     If y <> #PB_Ignore
                        y + ( height - *this\bounds\size\max\height ) + v_frame
                     EndIf
                     height = *this\bounds\size\max\height - v_frame
                  EndIf
                  
                  ;\\
                  If *this\bounds\move
                     If y <> #PB_Ignore
                        If height > *this\bounds\size\max\height - ( y - *this\bounds\move\min\y ) - v_frame
                           height = *this\bounds\size\max\height - ( y - *this\bounds\move\min\y ) - v_frame
                        EndIf
                     Else
                        If height > *this\bounds\size\max\height - ( *this\container_y( ) - *this\bounds\move\min\y ) - v_frame
                           height = *this\bounds\size\max\height - ( *this\container_y( ) - *this\bounds\move\min\y ) - v_frame
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If x = #PB_Ignore
               x = *this\container_x( )
            Else
               If *this\parent
                  If Not *this\child
                     x + *this\parent\scroll_x( )
                  EndIf
                  *this\container_x( ) = x
               EndIf
            EndIf
            If y = #PB_Ignore
               y = *this\container_y( )
            Else
               If *this\parent
                  If Not *this\child
                     y + *this\parent\scroll_y( )
                  EndIf
                  *this\container_y( ) = y
               EndIf
            EndIf
            
            ;\\
            If width = #PB_Ignore
               If *this\type = #__type_window
                  width = *this\container_width( )
               Else
                  width = *this\frame_width( )
               EndIf
            EndIf
            If height = #PB_Ignore
               If *this\type = #__type_window
                  height = *this\container_height( )
               Else
                  height = *this\frame_height( )
               EndIf
            EndIf
            
            ;\\
            If width < 0
               width = 0
            EndIf
            If Height < 0
               Height = 0
            EndIf
            
            ;\\
            If *this\parent And *this <> *this\parent And Not is_root_( *this )
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 2 )
                  x + *this\parent\inner_x( )
               EndIf
               If Not ( *this\bounds\attach And *this\bounds\attach\mode = 1 )
                  y + *this\parent\inner_y( )
               EndIf
            EndIf
            
            ;\\ потому что окну задаются внутренные размеры
            If *this\type = #__type_window
               width + *this\fs * 2 + ( *this\fs[1] + *this\fs[3] )
               Height + *this\fs * 2 + ( *this\fs[2] + *this\fs[4] )
            EndIf
         EndIf
         
         ;\\ inner x&y position
         ix      = ( x + *this\fs + *this\fs[1] )
         iy      = ( y + *this\fs + *this\fs[2] )
         iwidth  = width - *this\fs * 2 - ( *this\fs[1] + *this\fs[3] )
         iheight = height - *this\fs * 2 - ( *this\fs[2] + *this\fs[4] )
         
         ;\\
         If *this\frame_x( ) <> x : Change_x = x - *this\frame_x( ) : EndIf
         If *this\frame_y( ) <> y : Change_y = y - *this\frame_y( ) : EndIf
         If *this\frame_width( ) <> width : Change_width = width - *this\frame_width( ) : EndIf
         If *this\frame_height( ) <> height : Change_height = height - *this\frame_height( ) : EndIf
         
         If *this\inner_x( ) <> ix : Change_x = ix - *this\inner_x( ) : EndIf
         If *this\inner_y( ) <> iy : Change_y = iy - *this\inner_y( ) : EndIf
         If *this\container_width( ) <> iwidth : Change_width = iwidth - *this\container_width( ) : EndIf
         If *this\container_height( ) <> iheight : Change_height = iheight - *this\container_height( ) : EndIf
         
         ;\\
         If Change_x
            *this\resize | #__resize_x
            *this\frame_x( )  = x
            *this\inner_x( )  = ix
            *this\screen_x( ) = x - ( *this\bs - *this\fs )
            If *this\window
               *this\x[#__c_window] = x - *this\window\inner_x( )
            EndIf
         EndIf
         If Change_y
            *this\resize | #__resize_y
            *this\frame_y( )  = y
            *this\inner_y( )  = iy
            *this\screen_y( ) = y - ( *this\bs - *this\fs )
            If *this\window
               *this\y[#__c_window] = y - *this\window\inner_y( )
            EndIf
         EndIf
         If Change_width
            *this\resize | #__resize_width
            *this\frame_width( )     = width
            *this\container_width( ) = iwidth
            *this\screen_width( )    = width + ( *this\bs * 2 - *this\fs * 2 )
            If *this\container_width( ) < 0
               *this\container_width( ) = 0
            EndIf
            *this\inner_width( ) = *this\container_width( )
         EndIf
         If Change_height
            *this\resize | #__resize_height
            *this\frame_height( )     = height
            *this\container_height( ) = iheight
            *this\screen_height( )    = height + ( *this\bs * 2 - *this\fs * 2 )
            If *this\container_height( ) < 0
               *this\container_height( ) = 0
            EndIf
            *this\inner_height( ) = *this\container_height( )
         EndIf
         
         ;\\
         If ( Change_x Or Change_y Or Change_width Or Change_height )
            *this\resize | #__reclip
            *this\root\repaint = #True
            
            ;\\
            If *this\anchors 
               a_move( *this,
                       *this\anchors\id,
                       *this\screen_x( ),
                       *this\screen_y( ),
                       *this\screen_width( ),
                       *this\screen_height( ) )
            EndIf
            
            ;\\
            If ( Change_width Or Change_height )
               If *this\type = #__type_Image Or
                  *this\type = #__type_ButtonImage
                  *this\ImageChange( ) = 1
               EndIf
            EndIf
            
            If test_scrollbars_resize And Not is_root_(*this)
               Debug " resize - " + *this\class + " " + *this\x + " " + *this\y + " " + *this\width + " " + *this\height
            EndIf
            
            ;\\ if the widgets is composite
            If *this\StringBox( )
               Resize( *this\StringBox( ), 0, 0, *this\inner_width( ), *this\inner_height( ) )
            EndIf
            
            ;\\ resize vertical&horizontal scrollbars
            If *this\scroll And
               *this\scroll\v And
               *this\scroll\h
               
               ;\\ if the integral scroll bars
               If *this\type <> #__type_MDI
                  bar_area_resize( *this, 0, 0, *this\container_width( ), *this\container_height( ) )
               EndIf
               
               ;\\
               If *this\type = #__type_MDI
                  ;\\
                  ;If Change_x Or Change_y
                  Resize( *this\scroll\v, *this\container_width( ) - *this\scroll\v\width, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                  Resize( *this\scroll\h, #PB_Ignore, *this\container_height( ) - *this\scroll\h\height, #PB_Ignore, #PB_Ignore )
                  ;EndIf
                  
                  If Change_width Or Change_height
                     ;If *this\haschildren
                     bar_mdi_update( *this, 0, 0, 0, 0 )
                     bar_mdi_resize( *this, 0, 0, *this\container_width( ), *this\container_height( ) )
                     ;EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If *this\parent And
               *this\parent\scroll And
               *this\parent\scroll\v And
               *this\parent\scroll\h
               
               
               ;\\
               If *this\parent\type <> #__type_MDI
                  If *this\child > 0
                     If *this\parent\container_width( ) = *this\parent\inner_width( ) And
                        *this\parent\container_height( ) = *this\parent\inner_height( )
                        ; Debug ""+*this\parent\scroll\v\bar\max +" "+ *this\parent\scroll\v\bar\page\len +" "+ *this\parent\scroll\h\bar\max +" "+ *this\parent\scroll\h\bar\page\len
                        
                        If *this\parent\scroll\v\bar\max > *this\parent\scroll\v\bar\page\len Or
                           *this\parent\scroll\h\bar\max > *this\parent\scroll\h\bar\page\len
                           
                           bar_area_resize( *this\parent, 0, 0, *this\parent\container_width( ), *this\parent\container_height( ) )
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;\\ parent mdi
               If *this\parent\type = #__type_MDI
                  If *this\child < 0
                     If *this\parent\scroll\v <> *this And
                        *this\parent\scroll\h <> *this And
                        *this\parent\scroll\v\bar\PageChange( ) = 0 And
                        *this\parent\scroll\h\bar\PageChange( ) = 0
                        
                        bar_mdi_update( *this\parent, *this\container_x( ), *this\container_y( ), *this\frame_width( ), *this\frame_height( ) )
                        bar_mdi_resize( *this\parent, 0, 0, *this\parent\container_width( ), *this\parent\container_height( ) )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            
            ;\\ if the integral tab bar
            If *this\TabBox( )
               *this\inner_x( ) = x ; - *this\fs - *this\fs[1]
               *this\inner_y( ) = y ; - *this\fs - *this\fs[2]
               
               ;\\
               If *this\type = #__type_Panel
                  If *this\TabBox( )\bar\vertical
                     If *this\fs[1]
                        Resize( *this\TabBox( ), *this\fs, *this\fs, *this\fs[1], *this\inner_height( ) )
                     EndIf
                     If *this\fs[3]
                        Resize( *this\TabBox( ), *this\inner_width( ), *this\fs, *this\fs[3], *this\inner_height( ) )
                     EndIf
                  Else
                     If *this\fs[2]
                        Resize( *this\TabBox( ), *this\fs, *this\fs, *this\inner_width( ), *this\fs[2])
                     EndIf
                     If *this\fs[4]
                        Resize( *this\TabBox( ), *this\fs, *this\inner_height( ), *this\inner_width( ), *this\fs[4])
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               If *this\type = #__type_window
                  Resize( *this\TabBox( ), *this\fs, (*this\fs + *this\fs[2]) - *this\ToolBarHeight , *this\frame_width( ), *this\ToolBarHeight )
               EndIf
               
               *this\inner_x( ) + *this\fs + *this\fs[1]
               *this\inner_y( ) + *this\fs + *this\fs[2]
            EndIf
            
            ;\\
            If *this\type = #__type_Window
               result = Update( *this )
            EndIf
            
            ;\\
            If *this\type = #__type_ComboBox
               If *this\StringBox( )
                  *this\combobox\width = *this\fs[3]
                  *this\combobox\x     = ( *this\x + *this\width ) - *this\fs[3]
               Else
                  *this\combobox\width = *this\inner_width( )
                  *this\combobox\x     = *this\inner_x( )
               EndIf
               
               *this\combobox\y      = *this\inner_y( )
               *this\combobox\height = *this\inner_height( )
            EndIf
            
            ;\\
            If *this\bar
               ; ???
               If ( Change_width Or Change_height )
                  *this\TabChange( ) = - 1
               EndIf
               
               ; Debug "-- bar_Update -- "+" "+ *this\class
               bar_Update( *this, Bool( Change_width Or Change_height ) )
            EndIf
            
            ;
            ;\\ Post Event
            ;
            
            If *this\child <= 0
               If mouse( )\press
                  ;If *this\press
                  If Not *this\resize & #__resize_change
                     ; Debug "start-resize "+*this\class
                     *this\resize | #__resize_change
                     Send( *this, #__event_ResizeBegin )
                  EndIf
                  ;EndIf
               EndIf
               Send( *this, #__event_resize )
            EndIf
         Else
            If test_scrollbars_resize = - 1
               Debug "------ " + *this\class + x + " " + y + " " + width + " " + height
            EndIf
         EndIf
         
         
         
         ;-\\ children's resize
         ;\\ then move and size parent
         ;\\ resize all children's
         If *this\resize
            If *this\haschildren
               ; If Not mouse( )\press
               Protected pw, ph
               
               If *this\root
                  PushListPosition( __widgets( ))
                  If StartEnumerate( *this )
                     If Not is_scrollbars_( widget( ))
                        If widget( )\align
                           ;\\
                           If widget( )\parent\align
                              pw = ( widget( )\parent\inner_width( ) - widget( )\parent\align\width )
                              ph = ( widget( )\parent\inner_height( ) - widget( )\parent\align\height )
                           EndIf
                           
                           ;\\
                           ;\\ horizontal
                           ;\\
                           If widget( )\align\left > 0
                              x = widget( )\align\x
                              If widget( )\align\right < 0
                                 If widget( )\align\left = 0
                                    x + pw / 2
                                 EndIf
                                 width = (( widget( )\align\x + widget( )\align\width ) + pw / 2 ) - x
                              EndIf
                           EndIf
                           If Not widget( )\align\right
                              width = widget( )\align\width
                              
                              If Not widget( )\align\left
                                 x = widget( )\align\x
                                 If widget( )\align\left = 0
                                    x + pw / 2
                                 EndIf
                                 width = (( widget( )\align\x + widget( )\align\width ) + pw / 2 ) - x
                              EndIf
                           EndIf
                           If widget( )\align\right > 0
                              x = widget( )\align\x
                              If widget( )\align\left < 0
                                 ;\\ ( left = proportional & right = 1 )
                                 x     = widget( )\align\x + pw / 2
                                 width = (( widget( )\align\x + widget( )\align\width ) + pw ) - x
                              Else
                                 If widget( )\align\left = 0
                                    x + pw
                                 EndIf
                                 width = (( widget( )\align\x + widget( )\align\width ) + pw ) - x
                              EndIf
                           EndIf
                           ;\\ horizontal proportional
                           If ( widget( )\align\left < 0 And widget( )\align\right <= 0 ) Or
                              ( widget( )\align\right < 0 And widget( )\align\left <= 0 )
                              Protected ScaleX.f = widget( )\parent\inner_width( ) / widget( )\parent\align\width
                              width = ScaleX * widget( )\align\width
                              ;\\ center proportional
                              If widget( )\align\left < 0 And widget( )\align\right < 0
                                 x = ( widget( )\parent\inner_width( ) - width ) / 2
                              ElseIf widget( )\align\left < 0 And widget( )\align\right = 0
                                 ;\\ right proportional
                                 x = widget( )\parent\inner_width( ) - ( widget( )\parent\align\width - widget( )\align\x - widget( )\align\width ) - width
                              ElseIf ( widget( )\align\right < 0 And widget( )\align\left = 0 )
                                 ;\\ left proportional
                                 x = widget( )\align\x
                              EndIf
                           EndIf
                           
                           ;\\
                           ;\\ vertical
                           ;\\
                           If widget( )\align\top > 0
                              y = widget( )\align\y
                              If widget( )\align\bottom < 0
                                 If widget( )\align\top = 0
                                    y + ph / 2
                                 EndIf
                                 height = (( widget( )\align\y + widget( )\align\height ) + ph / 2 ) - y
                              EndIf
                           EndIf
                           If Not widget( )\align\bottom
                              height = widget( )\align\height
                              
                              If Not widget( )\align\top
                                 y = widget( )\align\y
                                 If widget( )\align\top = 0
                                    y + ph / 2
                                 EndIf
                                 height = (( widget( )\align\y + widget( )\align\height ) + ph / 2 ) - y
                              EndIf
                           EndIf
                           If widget( )\align\bottom > 0
                              y = widget( )\align\y
                              If widget( )\align\top < 0
                                 ;\\ ( top = proportional & bottom = 1 )
                                 y      = widget( )\align\y + ph / 2
                                 height = (( widget( )\align\y + widget( )\align\height ) + ph ) - y
                              Else
                                 If widget( )\align\top = 0
                                    y + ph
                                 EndIf
                                 height = (( widget( )\align\y + widget( )\align\height ) + ph ) - y
                              EndIf
                           EndIf
                           ;\\ vertical proportional
                           If ( widget( )\align\top < 0 And widget( )\align\bottom <= 0 ) Or
                              ( widget( )\align\bottom < 0 And widget( )\align\top <= 0 )
                              Protected ScaleY.f = widget( )\parent\inner_height( ) / widget( )\parent\align\height
                              height = ScaleY * widget( )\align\height
                              ;\\ center proportional
                              If widget( )\align\top < 0 And widget( )\align\bottom < 0
                                 y = ( widget( )\parent\inner_height( ) - height ) / 2
                              ElseIf widget( )\align\top < 0 And widget( )\align\bottom = 0
                                 ;\\ bottom proportional
                                 y = widget( )\parent\inner_height( ) - ( widget( )\parent\align\height - widget( )\align\y - widget( )\align\height ) - height
                              ElseIf ( widget( )\align\bottom < 0 And widget( )\align\top = 0 )
                                 ;\\ top proportional
                                 y = widget( )\align\y
                              EndIf
                           EndIf
                           
                           
                           Resize( widget( ), x, y, width, height )
                        Else
                           If (*this\resize & #__resize_x Or *this\resize & #__resize_y)
                              Resize( widget( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                           Else
                              If widget( )\autosize
                                 Resize( widget( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
                              Else
                                 widget( )\resize | #__reclip
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                     
                     ;Next
                     StopEnumerate( )
                  EndIf
                  PopListPosition( __widgets( ))
               EndIf
               
            EndIf
         EndIf
         
         ;\\
         If *this = Popup( )
            If Popup( )\widget
               Resize( Popup( )\widget, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               ; Resize( Popup( )\widget, *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ) )
            EndIf
         EndIf
         
         ;
         PostRepaint( *this\root )
         ProcedureReturn *this\root\repaint
      EndProcedure
      
      ;-
      ;-  BARs
      ; Farbaddition
      Procedure.i TabBarGadget_ColorPlus(Color.i, Plus.i) ; Code OK
         
         If Color & $FF + Plus & $FF < $FF
            Color + Plus & $FF
         Else
            Color | $FF
         EndIf
         If Color & $FF00 + Plus & $FF00 < $FF00
            Color + Plus & $FF00
         Else
            Color | $FF00
         EndIf
         If Color & $FF0000 + Plus & $FF0000 < $FF0000
            Color + Plus & $FF0000
         Else
            Color | $FF0000
         EndIf
         
         ProcedureReturn Color
         
      EndProcedure
      
      ; Farbsubtraktion
      Procedure.i TabBarGadget_ColorMinus(Color.i, Minus.i) ; Code OK
         
         If Color & $FF - Minus & $FF > 0
            Color - Minus & $FF
         Else
            Color & $FFFFFF00
         EndIf
         If Color & $FF00 - Minus & $FF00 > 0
            Color - Minus & $FF00
         Else
            Color & $FFFF00FF
         EndIf
         If Color & $FF0000 - Minus & $FF0000 > 0
            Color - Minus & $FF0000
         Else
            Color & $FF00FFFF
         EndIf
         
         ProcedureReturn Color
         
      EndProcedure
      
      
      
      ;{
      Macro bar_in_stop_( _bar_ )
         Bool( _bar_\thumb\pos >= _bar_\area\end ) ; _bar_\page\pos >= _bar_\page\end - _bar_\min[2] ) ;
      EndMacro
      
      Macro bar_in_start_( _bar_ )
         Bool( _bar_\thumb\pos <= _bar_\area\pos ) ; _bar_\page\pos <= _bar_\min + _bar_\min[1] ) ;
                                                   ;Debug ""+_bar_\page\pos +" "+ _bar_\min +" "+ _bar_\min[1]
      EndMacro
      
      Macro bar_page_in_stop_( _bar_ )
         Bool( _bar_\page\pos >= _bar_\page\end - _bar_\min[2] ) ;
      EndMacro
      
      Macro bar_page_in_start_( _bar_ )
         Bool( _bar_\page\pos <= _bar_\min + _bar_\min[1] ) ;
      EndMacro
      
      Macro bar_page_pos_( _bar_, _thumb_pos_ )
         ( _bar_\min + Round(((( _thumb_pos_ ) + _bar_\min[2] ) - _bar_\area\pos ) / _bar_\percent, #PB_Round_Nearest ))
      EndMacro
      
      Macro bar_thumb_pos_( _bar_, _scroll_pos_ )
         Round((( _scroll_pos_ ) - _bar_\min - _bar_\min[1] ) * _bar_\percent, #PB_Round_Nearest )
      EndMacro
      
      Macro bar_scroll_pos_( _this_, _pos_, _len_ )
         Bool( Bool(((( _pos_ ) + _this_\bar\min ) - _this_\bar\page\pos ) < 0 And bar_SetState( _this_, (( _pos_ ) + _this_\bar\min ) )) Or
               Bool(((( _pos_ ) + _this_\bar\min ) - _this_\bar\page\pos ) > ( _this_\bar\page\len - ( _len_ )) And bar_SetState( _this_, (( _pos_ ) + _this_\bar\min ) - ( _this_\bar\page\len - ( _len_ ) ))) )
      EndMacro
      
      Macro bar_invert_page_pos_( _bar_, _scroll_pos_ )
         ( Bool( Not _bar_\invert ) * ( _scroll_pos_ ) +
           Bool( _bar_\invert ) * ( _bar_\page\end - ( _scroll_pos_ - _bar_\min )) )
      EndMacro
      
      Macro bar_invert_thumb_pos_( _bar_, _thumb_pos_ )
         ( Bool( _bar_\invert ) * ( _bar_\area\end - ( _thumb_pos_ ) ) +
           Bool( Not _bar_\invert ) * ( _bar_\area\pos + ( _thumb_pos_ ) ))
      EndMacro
      
      ;-
      Procedure bar_tab_AddItem( *this._s_WIDGET, Item.i, Text.s, Image.i = -1, sublevel.i = 0 )
         Protected result
         
         If Item = - 1 Or
            Item > *this\count\items - 1
            LastElement( *this\__tabs( ))
            AddElement( *this\__tabs( ))
            Item = ListIndex( *this\__tabs( ))
         Else
            If SelectElement( *this\__tabs( ), Item )
               If *this\FocusedTabIndex( ) >= Item
                  *this\FocusedTabIndex( ) + 1
               EndIf
               
               InsertElement( *this\__tabs( ))
               
               PushListPosition( *this\__tabs( ))
               While NextElement( *this\__tabs( ))
                  *this\__tabs( )\index = ListIndex( *this\__tabs( ))
               Wend
               PopListPosition( *this\__tabs( ))
               
               ; перемещаем детей на один индекс вперед
               ; (начиная с выбранного индекса)
               If is_integral_( *this )
                  PushListPosition( __widgets( ))
                  If StartEnumerate( *this\parent )
                     If widget( )\parent = *this\parent And
                        widget( )\AddedTabIndex( ) >= Item
                        widget( )\AddedTabIndex( ) + 1
                     EndIf
                     StopEnumerate( )
                  EndIf
                  PopListPosition( __widgets( ))
               EndIf
            EndIf
         EndIf
         
         ;\\ TabBar last opened item
         *this\OpenedTabIndex( ) = Item
         *this\TabChange( )      = #True
         *this\count\items + 1
         
         ;\\
         *this\bar\_s.allocate( TABS, ( ))
         *this\__tabs( )\color       = _get_colors_( )
         *this\__tabs( )\height      = *this\height - 1
         *this\__tabs( )\text\string = Text.s
         *this\__tabs( )\index       = item
         
         ;\\ set default selected tab
         If item = 0
            If *this\FocusedTab( )
               *this\FocusedTab( )\focus = #False
            EndIf
            
            *this\FocusedTab( )       = *this\__tabs( )
            *this\FocusedTab( )\focus = - 1 ; scroll to active tab
            *this\FocusedTabIndex( ) = 0
         EndIf
         
         set_image_( *this, *this\__tabs( )\Image, Image )
         PostRepaint( *this\root )
         
         ProcedureReturn Item
      EndProcedure
      
      Procedure.i bar_tab_SetState( *this._s_WIDGET, item.l )
         Protected result.b
         
         ; prevent selection of a non-existent tab
         If item < 0
            item = - 1
         EndIf
         If item > *this\count\items - 1
            item = *this\count\items - 1
         EndIf
         
         If *this\FocusedTabIndex( ) <> item
            *this\FocusedTabIndex( ) = item
            
            *this\TabChange( ) = #True
            
            If *this\FocusedTab( )
               *this\FocusedTab( )\focus = 0
               *this\FocusedTab( )       = #Null
            EndIf
            
            If item >= 0
               ;PushListPosition( *this\__tabs( ) )
               SelectElement( *this\__tabs( ), item )
               
               *this\FocusedTab( )       = *this\__tabs( )
               *this\FocusedTab( )\focus = - 1 ; scroll to active tab
               
               ;PopListPosition( *this\__tabs( ) )
            EndIf
            
            If is_integral_( *this )
               If *this\parent\haschildren
                  Childrens( *this\parent, 1 )
               EndIf
               *this = *this\parent
            EndIf
            
            DoEvents( *this, #__event_Change, item, *this\FocusedTab( ) )
            result = #True
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i bar_tab_RemoveItem( *this._s_WIDGET, Item.l )
         If SelectElement( *this\__tabs( ), item )
            *this\TabChange( ) = #True
            
            If *this\FocusedTabIndex( ) = *this\__tabs( )\index
               *this\FocusedTabIndex( ) = item - 1
            EndIf
            
            DeleteElement( *this\__tabs( ), 1 )
            
            ; If Not *this\anchors
            ;         If *this\parent\TabBox( ) = *this
            ;           DoEvents( *this\parent, Item, #__event_CloseItem )
            ;         Else
            ;           DoEvents( *this, Item, #__event_CloseItem )
            ;         EndIf
            ; Endif
            
            *this\count\items - 1
         EndIf
      EndProcedure
      
      Procedure bar_tab_ClearItems( *this._s_WIDGET ) ; Ok
         If *this\count\items <> 0
            
            *this\TabChange( ) = #True
            ClearList( *this\__tabs( ))
            
            ; If Not *this\anchors
            ;         If *this\parent\TabBox( ) = *this
            ;           DoEvents( *this\parent, #PB_All, #__event_CloseItem )
            ;         Else
            ;           DoEvents( *this, #PB_All, #__event_CloseItem )
            ;         EndIf
            ; EndIf
            
            *this\count\items = 0
         EndIf
      EndProcedure
      
      Procedure.s bar_tab_GetItemText( *this._s_WIDGET, Item.l, Column.l = 0 )
         Protected result.s
         
         If is_item_( *this, Item ) And
            SelectElement( *this\__tabs( ), Item )
            result = *this\__tabs( )\text\string
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Macro bar_tab_item_draw_( _vertical_, _address_, _x_, _y_, _fore_color_, _back_color_, _frame_color_, _text_color_, _round_)
         ;Draw back
         drawing_mode_alpha_( #PB_2DDrawing_Gradient )
         draw_gradient_box_( _vertical_, _x_ + _address_\x, _y_ + _address_\y, _address_\width, _address_\height, _fore_color_, _back_color_, _round_, _address_\color\_alpha )
         ; Draw frame
         drawing_mode_alpha_( #PB_2DDrawing_Outlined )
         draw_roundbox_( _x_ + _address_\x, _y_ + _address_\y, _address_\width, _address_\height, _round_, _round_, _frame_color_ & $FFFFFF | _address_\color\_alpha << 24 )
         ; Draw items image
         If _address_\image\id
            drawing_mode_alpha_( #PB_2DDrawing_Transparent )
            DrawAlphaImage( _address_\image\id, _x_ + _address_\image\x, _y_ + _address_\image\y, _address_\color\_alpha )
            ; draw_background_image_(_address_, _x_, _y_ )
         EndIf
         ; Draw items text
         If _address_\text\string
            drawing_mode_( #PB_2DDrawing_Transparent )
            DrawText( _x_ + _address_\text\x, _y_ + _address_\text\y, _address_\text\string, _text_color_ & $FFFFFF | _address_\color\_alpha << 24 )
         EndIf
      EndMacro
      
      Macro bar_item_draw_( _this_, _item_, x, y, _round_, _mode_ = )
         ;_draw_font_item_( _this_, _item_, 0 )
         
         bar_tab_item_draw_( _this_\bar\vertical, _item_, x, y,
                             _item_\color\fore#_mode_,
                             _item_\color\back#_mode_,
                             _item_\color\frame#_mode_,
                             _item_\color\front#_mode_, _round_ )
      EndMacro
      
      Procedure.b bar_tab_draw( *this._s_WIDGET )
         With *this
            Protected Color
            Protected ActivColorPlus = $FF101010
            Protected HoverColorPlus = $FF101010
            Protected forecolor
            Protected backcolor
            Protected textcolor = $ff000000
            Protected framecolor = $FF808080;&$FFFFFF | *this\__tabs( )\color\_alpha<<24
            Protected Item_Color_Background
            Protected widget_backcolor1 = $FFD0D0D0
            Protected widget_backcolor = $FFD0D0D0;$FFEEEEEE ; $FFE6E5E5;
            
            Protected *activeTAB._s_TABS = *this\FocusedTab( )
            Protected focused_tab_index = *this\FocusedTabIndex( )
            
            Protected typ = 0
            Protected pos = 1
            Protected *bar._s_BAR = *this\bar
            Protected._s_BUTTONS *BB1, *BB2, *SB
            *SB  = *bar\button
            *BB1 = *bar\button[1]
            *BB2 = *bar\button[2]
            
            If *this\parent And *this\parent\type = #__type_Panel
               pos = 2
            EndIf
            
            pos + Bool(typ) * 2
            
            Protected layout = pos * 2
            Protected text_pos = 6
            
            If Not *this\hide And *this\color\_alpha
               If *this\color\back <> - 1
                  ; Draw scroll bar background
                  drawing_mode_alpha_( #PB_2DDrawing_Default )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back & $FFFFFF | *this\color\_alpha << 24 )
               EndIf
               
               ; - widget::bar_tab_update_( )
               If *this\TabChange( )
                  *this\image\x = ( *this\height - 16 - pos - 1 ) / 2
                  ;Debug " --- widget::Tab_Update( ) - " + *this\image\x
                  
                  If *bar\vertical
                     *this\text\y = text_pos
                  Else
                     *this\text\x = text_pos
                  EndIf
                  
                  *bar\max = 0
                  ; *this\text\width = *this\width
                  
                  ForEach *this\__tabs( )
                     ; if not visible then skip
                     If *this\__tabs( )\hide
                        Continue
                     EndIf
                     
                     ;
                     draw_font_item_( *this, *this\__tabs( ), *this\__tabs( )\change )
                     
                     ; init items position
                     If *bar\vertical
                        *this\__tabs( )\y = *bar\max + pos
                        
                        If focused_tab_index = *this\__tabs( )\index
                           *this\__tabs( )\x     = 0
                           *this\__tabs( )\width = *SB\width + 1
                        Else
                           *this\__tabs( )\x     = 0
                           *this\__tabs( )\width = *SB\width - 1
                        EndIf
                        
                        *this\text\x = ( *this\__tabs( )\width - *this\__tabs( )\text\width ) / 2
                        
                        *this\__tabs( )\text\y = *this\text\y + *this\__tabs( )\y
                        *this\__tabs( )\text\x = *this\text\x + *this\__tabs( )\x
                        *this\__tabs( )\height = *this\text\y * 2 + *this\__tabs( )\text\height
                        
                        *bar\max + *this\__tabs( )\height + Bool( *this\__tabs( )\index <> *this\count\items - 1 ) - Bool(typ) * 2 + Bool( *this\__tabs( )\index = *this\count\items - 1 ) * layout
                        ;
                        If typ And focused_tab_index = *this\__tabs( )\index
                           *this\__tabs( )\height + 4
                           *this\__tabs( )\y - 2
                        EndIf
                     Else
                        *this\__tabs( )\x = *bar\max + pos
                        
                        If focused_tab_index = *this\__tabs( )\index
                           *this\__tabs( )\y      = pos;pos - Bool( pos>0 )*2
                           *this\__tabs( )\height = *SB\height - *this\__tabs( )\y + 1
                        Else
                           *this\__tabs( )\y      = pos;pos
                           *this\__tabs( )\height = *SB\height - *this\__tabs( )\y - 1
                        EndIf
                        
                        *this\text\y = ( *this\__tabs( )\height - *this\__tabs( )\text\height ) / 2
                        ;
                        *this\__tabs( )\image\y = *this\__tabs( )\y + ( *this\__tabs( )\height - *this\__tabs( )\image\height ) / 2
                        *this\__tabs( )\text\y  = *this\__tabs( )\y + *this\text\y
                        
                        ;
                        *this\__tabs( )\image\x = *this\__tabs( )\x + Bool( *this\__tabs( )\image\width ) * *this\image\x ;+ Bool( *this\__tabs( )\text\width ) * ( *this\text\x )
                        *this\__tabs( )\text\x  = *this\__tabs( )\image\x + *this\__tabs( )\image\width + *this\text\x
                        *this\__tabs( )\width   = Bool( *this\__tabs( )\text\width ) * ( *this\text\x * 2 ) + *this\__tabs( )\text\width +
                                                  Bool( *this\__tabs( )\image\width ) * ( *this\image\x * 2 ) + *this\__tabs( )\image\width - ( Bool( *this\__tabs( )\image\width And *this\__tabs( )\text\width ) * ( *this\text\x ))
                        
                        *bar\max + *this\__tabs( )\width + Bool( *this\__tabs( )\index <> *this\count\items - 1 ) - Bool(typ) * 2 + Bool( *this\__tabs( )\index = *this\count\items - 1 ) * layout
                        ;
                        If typ And focused_tab_index = *this\__tabs( )\index
                           *this\__tabs( )\width + 4
                           *this\__tabs( )\x - 2
                        EndIf
                     EndIf
                     
                  Next
                  
                  bar_Update( *this, 1 )
                  
                  *this\TabChange( ) = #False
               EndIf
               
               ;
               ; drawin
               ;
               If *bar\vertical
                  *BB2\x = *this\frame_x( ) + ( *this\frame_width( ) + pos - *BB2\size ) / 2
                  *BB1\x = *this\frame_x( ) + ( *this\frame_width( ) + pos - *BB1\size ) / 2
               Else
                  *BB2\y = *this\frame_y( ) + ( *this\frame_height( ) + pos - *BB2\size ) / 2
                  *BB1\y = *this\frame_y( ) + ( *this\frame_height( ) + pos - *BB1\size ) / 2
               EndIf
               
               
               Protected State_3, Color_frame
               Protected x = *SB\x
               Protected y = *SB\y
               
               
               
               ;           drawing_mode_alpha_( #PB_2DDrawing_Default )
               ;                 color = *this\parent\color\frame[0]
               ;                draw_box_( *this\parent\frame_x( ), *this\parent\frame_y( ), *this\parent\frame_width( ), *this\parent\fs-1, color);*this\color\frame )
               
               ; draw all visible items
               ForEach *this\__tabs( )
                  draw_font_item_( *this, *this\__tabs( ), 0 )
                  
                  ; real visible items
                  If *bar\vertical
                     *this\__tabs( )\visible = Bool( Not *this\__tabs( )\hide And
                                                     (( y + *this\__tabs( )\y + *this\__tabs( )\height ) > *this\inner_y( ) And
                                                      ( y + *this\__tabs( )\y ) < ( *this\inner_y( ) + *this\inner_height( ) ) ))
                  Else
                     *this\__tabs( )\visible = Bool( Not *this\__tabs( )\hide And
                                                     (( x + *this\__tabs( )\x + *this\__tabs( )\width ) > *this\inner_x( ) And
                                                      ( x + *this\__tabs( )\x ) < ( *this\inner_x( ) + *this\inner_width( ) ) ))
                  EndIf
                  
                  ;no &~ entered &~ focused
                  If *this\__tabs( )\visible And
                     *this\__tabs( )\enter = #False And
                     *this\__tabs( )\press = #False
                     
                     ;                ( *this\__tabs( )\enter = #False Or
                     ;                  *this\__tabs( )\press = #True ) And
                     ;
                     bar_item_draw_( *this, *this\__tabs( ), x, y, *SB\round, [0] )
                  EndIf
               Next
               
               ; draw mouse-enter visible item
               If *this\EnteredTab( ) And
                  *this\EnteredTab( )\visible And
                  Not *this\EnteredTab( )\focus
                  
                  draw_font_item_( *this, *this\EnteredTab( ), 0 )
                  bar_item_draw_( *this, *this\EnteredTab( ), x, y, *SB\round, [*this\EnteredTab( )\color\state] )
               EndIf
               
               ; draw key-focus visible item
               If *activeTAB And
                  *activeTAB\visible
                  
                  draw_font_item_( *this, *activeTAB, 0 )
                  bar_item_draw_( *this, *activeTAB, x, y, *SB\round, [2] )
               EndIf
               
               
               color = $FF909090
               drawing_mode_alpha_( #PB_2DDrawing_Outlined )
               
               ; draw lines
               If *activeTAB
                  If *bar\vertical
                     color = *activeTAB\color\frame[2]
                     ; frame on the selected item
                     If *activeTAB\visible
                        Line( x + *activeTAB\x, y + *activeTAB\y, 1, *activeTAB\height, color )
                        Line( x + *activeTAB\x, y + *activeTAB\y, *activeTAB\width, 1, color )
                        Line( x + *activeTAB\x, y + *activeTAB\y + *activeTAB\height - 1, *activeTAB\width, 1, color )
                     EndIf
                     
                     color = *this\color\frame[0]
                     ; vertical tab right line
                     If *activeTAB
                        Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\screen_y( ), 1, ( y + *activeTAB\y ) - *this\frame_x( ), color ) ;*this\__tabs( )\color\fore[2] )
                        Line( *this\frame_x( ) + *this\frame_width( ) - 1, y + *activeTAB\y + *activeTAB\height, 1, *this\frame_y( ) + *this\frame_height( ) - ( y + *activeTAB\y + *activeTAB\height ), color ) ; *this\__tabs( )\color\fore[2] )
                     Else
                        Line( *this\screen_x( ) + *this\screen_width( ) - 1, *this\screen_y( ), 1, *this\screen_height( ), color )
                     EndIf
                     
                     If is_integral_( *this )
                        color = *this\parent\color\back[0]
                        ; selected tab inner frame
                        Line( x + *activeTAB\x + 1, y + *activeTAB\y + 1, 1, *activeTAB\height - 2, color )
                        Line( x + *activeTAB\x + 1, y + *activeTAB\y + 1, *SB\width, 1, color )
                        Line( x + *activeTAB\x + 1, y + *activeTAB\y + *activeTAB\height - 2, *SB\width, 1, color )
                        
                        Protected size1 = 5
                        ;
                        ;Arrow( *this\screen_x( ) + selected_tab_pos + ( *activeTAB\width - size1 )/2, *this\frame_y( )+*this\frame_height( ) - 5, 11, $ff000000, 1, 1)
                        
                        Arrow( x + *activeTAB\x + ( *activeTAB\width - size1 ),
                               y + *activeTAB\y + ( *activeTAB\height - size1 ) / 2, size1, 0, color, -1 )
                        
                        
                        
                        color = *this\parent\color\frame[0]
                        Line( *this\parent\inner_x( ) - 1, *this\parent\inner_y( ) - 1, *this\parent\inner_width( ) + 2, 1, color);*this\color\frame )
                        Line( *this\parent\inner_x( ) - 1, *this\parent\inner_y( ) + *this\parent\inner_height( ), *this\parent\inner_width( ) + 2, 1, color);*this\color\frame )
                        Line( *this\parent\inner_x( ) + *this\parent\inner_width( ), *this\parent\inner_y( ) - 1, 1, *this\parent\inner_height( ) + 2, color);*this\color\frame )
                     EndIf
                  Else
                     ; frame on the selected item
                     If *activeTAB\visible
                        color = *activeTAB\color\frame[2]
                        Line( x + *activeTAB\x , y + *activeTAB\y, *activeTAB\width, 1, color )
                        Line( x + *activeTAB\x , y + *activeTAB\y, 1, *activeTAB\height - *activeTAB\y, color )
                        Line( x + *activeTAB\x + *activeTAB\width - 1, y + *activeTAB\y, 1, *activeTAB\height - *activeTAB\y, color )
                        ;Line( x + *activeTAB\x , y + *activeTAB\y + *activeTAB\height - 1, *activeTAB\width, 1, color )
                        ;color = $ffff00ff
                        ;Line( x + *activeTAB\x , y + *activeTAB\y+*activeTAB\height-1, *activeTAB\width, 1, color )
                        ;Line( x + *activeTAB\x , y + *activeTAB\y+*activeTAB\height, *activeTAB\width, 1, color )
                        ;Line( x + *activeTAB\x , y + *activeTAB\y+*activeTAB\height+1, *activeTAB\width, 1, color )
                     EndIf
                     
                     color = *this\color\frame[0]
                     color = *this\parent\color\frame[2]
                     
                     ; horizontal tab bottom line
                     If *activeTAB
                        Line( *this\screen_x( ), *this\frame_y( ) + *this\frame_height( ) - 1, ( x + *activeTAB\x ) - *this\frame_x( ), 1, color ) ;*this\__tabs( )\color\fore[2] )
                        Line( x + *activeTAB\x + *activeTAB\width, *this\frame_y( ) + *this\frame_height( ) - 1, *this\frame_x( ) + *this\frame_width( ) - ( x + *activeTAB\x + *activeTAB\width ), 1, color ) ; *this\__tabs( )\color\fore[2] )
                     Else
                        Line( *this\screen_x( ), *this\frame_y( ) + *this\frame_height( ) - 1, *this\screen_width( ), 1, color )
                     EndIf
                     
                     If is_integral_( *this )
                        color = *this\parent\color\back[0] ;*this\parent\color\front[2]
                                                           ; selected tab inner frame
                        Line( x + *activeTAB\x + 1, y + *activeTAB\y + 1, *activeTAB\width - 2, 1, color )
                        Line( x + *activeTAB\x + 1, y + *activeTAB\y + 1, 1, *activeTAB\height - 1, color )
                        Line( x + *activeTAB\x + *activeTAB\width - 2, y + *activeTAB\y + 1, 1, *activeTAB\height - 1, color )
                        ;Line( x + *activeTAB\x +1, y + *activeTAB\y + *activeTAB\height-1, *activeTAB\width-2, 1, color )
                        
                        ;;drawing_mode_alpha_( #PB_2DDrawing_Default )
                        color = *this\parent\color\frame[0]
                        ;Box( *this\parent\frame_x( ), *this\parent\frame_y( ), *this\parent\frame_width( ), *this\parent\fs+*this\parent\fs[2], color);*this\color\frame )
                        
                        ; ;                draw_box_( *this\parent\frame_x( ), *this\parent\inner_y( ) - *this\parent\fs, *this\parent\fs + pos, *this\parent\fs, color);*this\color\frame )
                        ; ;                draw_box_( *this\parent\frame_x( ) + *this\parent\frame_width( ) - (*this\parent\fs + pos), *this\parent\inner_y( ) - *this\parent\fs, *this\parent\fs + pos, *this\parent\fs, color);*this\color\frame )
                        ;                draw_box_( *this\parent\frame_x( ), *this\parent\inner_y( ) - *this\parent\fs[2] - 1, *this\parent\fs-1, *this\parent\fs[2], color);*this\color\frame )
                        ;                draw_box_( *this\parent\inner_x( ) + *this\parent\inner_width( )+1, *this\parent\inner_y( ) - *this\parent\fs[2] - 1, *this\parent\fs-1, *this\parent\fs[2], color);*this\color\frame )
                        ;
                        ;                draw_box_( *this\parent\frame_x( ), *this\parent\inner_y( ) - 1, *this\parent\fs, *this\parent\inner_height( ) + 2, color);*this\color\frame )
                        ;                draw_box_( *this\parent\inner_x( ) + *this\parent\inner_width( ), *this\parent\inner_y( ) - 1, *this\parent\fs, *this\parent\inner_height( ) + 2, color);*this\color\frame )
                        ;                draw_box_( *this\parent\frame_x( ), *this\parent\inner_y( ) + *this\parent\inner_height( ), *this\parent\frame_width( ), *this\parent\fs, color);*this\color\frame )
                        
                        Line( *this\parent\inner_x( ) - 1, *this\parent\inner_y( ) - 1, 1, *this\parent\inner_height( ) + 2, color);*this\color\frame )
                        Line( *this\parent\inner_x( ) + *this\parent\inner_width( ), *this\parent\inner_y( ) - 1, 1, *this\parent\inner_height( ) + 2, color);*this\color\frame )
                        Line( *this\parent\inner_x( ) - 1, *this\parent\inner_y( ) + *this\parent\inner_height( ), *this\parent\inner_width( ) + 2, 1, color);*this\color\frame )
                        
                     EndIf
                  EndIf
               EndIf
               
               ; Navigation
               Protected fabe_pos, fabe_out, button_size = 20, round = 0, Size = 60
               backcolor = $ffffffff;\parent\parent\color\back[\parent\parent\color\state]
               If Not backcolor
                  backcolor = *this\parent\color\back[\parent\color\state]
               EndIf
               If Not backcolor
                  backcolor = *BB2\color\back[\color\state]
               EndIf
               
               
               drawing_mode_alpha_( #PB_2DDrawing_Gradient )
               ResetGradientColors( )
               GradientColor( 0.0, backcolor & $FFFFFF )
               GradientColor( 0.5, backcolor & $FFFFFF | $A0 << 24 )
               GradientColor( 1.0, backcolor & $FFFFFF | 245 << 24 )
               
               fabe_out = Size - button_size
               ;
               If *bar\vertical
                  ; to top
                  If Not *BB2\hide
                     fabe_pos = *this\y + ( size ) - *this\fs
                     LinearGradient( *this\x + *this\bs, fabe_pos, *this\x + *this\bs, fabe_pos - fabe_out )
                     draw_roundbox_( *this\x + *this\bs, fabe_pos, *this\width - *this\bs - 1, - Size, round, round )
                  EndIf
                  
                  ; to bottom
                  If Not *BB1\hide
                     fabe_pos = *this\y + *this\height - ( size ) + *this\fs * 2
                     LinearGradient( *this\x + *this\bs, fabe_pos, *this\x + *this\bs, fabe_pos + fabe_out )
                     draw_roundbox_( *this\x + *this\bs, fabe_pos, *this\width - *this\bs - 1 , Size, round, round )
                  EndIf
               Else
                  ; to left
                  If Not *BB2\hide
                     fabe_pos = *this\x + ( size ) - *this\fs
                     LinearGradient( fabe_pos, *this\y + *this\bs, fabe_pos - fabe_out, *this\y + *this\bs )
                     draw_roundbox_( fabe_pos, *this\y + *this\bs, - Size, *this\height - *this\bs - 1, round, round )
                  EndIf
                  
                  ; to right
                  If Not *BB1\hide
                     fabe_pos = *this\x + *this\width - ( size ) + *this\fs * 2
                     LinearGradient( fabe_pos, *this\y + *this\bs, fabe_pos + fabe_out, *this\y + *this\bs )
                     draw_roundbox_( fabe_pos, *this\y + *this\bs, Size, *this\height - *this\bs - 1 , round, round )
                  EndIf
               EndIf
               
               ResetGradientColors( )
               
               
               
               ; draw navigator
               ; Draw buttons back
               If Not *BB2\hide
                  ;             Color = $FF202020
                  ;             ; Color = $FF101010
                  ;             Item_Color_Background = TabBarGadget_ColorMinus(widget_backcolor1, Color)
                  ;             ;Item_Color_Background = TabBarGadget_ColorPlus(widget_backcolor1, Color)
                  ;             forecolor = TabBarGadget_ColorPlus(Item_Color_Background, Color)
                  ;             ;backcolor = TabBarGadget_ColorMinus(Item_Color_Background, Color)
                  ;
                  ;             If *BB1\color\state = 3
                  ;               Color = $FF303030
                  ;              framecolor = TabBarGadget_ColorMinus(*BB1\color\back[*BB1\color\state], Color)
                  ;              *BB1\color\frame[*BB1\color\state] = framecolor
                  ;              *BB1\color\front[*BB1\color\state] = framecolor
                  ; ;
                  ;             ElseIf *BB1\color\state = 1
                  ; ;                Color = $FF303030
                  ; ;              framecolor = TabBarGadget_ColorMinus(*BB1\color\back[*BB1\color\state], Color)
                  ; ;              framecolor = TabBarGadget_ColorMinus(framecolor, Color)
                  ; ;              *BB1\color\frame[*BB1\color\state] = framecolor
                  ; ;              *BB1\color\front[*BB1\color\state] = framecolor
                  ;
                  ;                *BB1\color\frame[*BB1\color\state] = *BB1\color\front[*BB1\color\state];backcolor
                  ;               *BB1\color\back[*BB1\color\state] = backcolor
                  ;             *BB1\arrow\size = 6
                  ;
                  ;             ElseIf *BB1\color\state = 0
                  ;               *BB1\color\frame[*BB1\color\state] = backcolor
                  ;               *BB1\color\back[*BB1\color\state] = backcolor
                  ;               *BB1\arrow\size = 4
                  ;             EndIf
                  
                  ; Draw buttons
                  If *BB2\color\fore <> - 1
                     drawing_mode_alpha_( #PB_2DDrawing_Gradient )
                     draw_gradient_( *bar\vertical, *BB2, *BB2\color\fore[*BB2\color\state], *BB2\color\back[*BB2\color\state] )
                  Else
                     drawing_mode_alpha_( #PB_2DDrawing_Default )
                     draw_roundbox_( *BB2\x, *BB2\y, *BB2\width, *BB2\height, *BB2\round, *BB2\round, *BB2\color\frame[*BB2\color\state] & $FFFFFF | *BB2\color\_alpha << 24 )
                  EndIf
               EndIf
               If Not *BB1\hide
                  ; Draw buttons
                  If *BB1\color\fore <> - 1
                     drawing_mode_alpha_( #PB_2DDrawing_Gradient )
                     draw_gradient_( *bar\vertical, *BB1, *BB1\color\fore[*BB1\color\state], *BB1\color\back[*BB1\color\state] )
                  Else
                     drawing_mode_alpha_( #PB_2DDrawing_Default )
                     draw_roundbox_( *BB1\x, *BB1\y, *BB1\width, *BB1\height, *BB1\round, *BB1\round, *BB1\color\frame[*BB1\color\state] & $FFFFFF | *BB1\color\_alpha << 24 )
                  EndIf
               EndIf
               
               drawing_mode_alpha_( #PB_2DDrawing_Outlined )
               
               ; Draw buttons frame
               If Not *BB1\hide
                  draw_roundbox_( *BB1\x, *BB1\y, *BB1\width, *BB1\height, *BB1\round, *BB1\round, *BB1\color\frame[*BB1\color\state] & $FFFFFF | *BB1\color\_alpha << 24 )
                  
                  ; Draw arrows
                  If Not *BB1\hide And *BB1\arrow\size
                     draw_arrows_( *BB1, Bool( *bar\vertical ) + 2 )
                  EndIf
               EndIf
               If Not *BB2\hide
                  draw_roundbox_( *BB2\x, *BB2\y, *BB2\width, *BB2\height, *BB2\round, *BB2\round, *BB2\color\frame[*BB2\color\state] & $FFFFFF | *BB2\color\_alpha << 24 )
                  
                  ; Draw arrows
                  If *BB2\arrow\size
                     draw_arrows_( *BB2, Bool( *bar\vertical ))
                  EndIf
               EndIf
               
               
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure.b bar_scroll_draw( *this._s_WIDGET )
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         With *this
            If test_scrollbars_resize
               ; Debug "  Draw scrolbar " + *this\class +" "+ *this\x +" "+ *this\y +" "+ *this\width +" "+ *this\height
            EndIf
            
            ;         DrawImage( ImageID( UpImage ), *BB1\x, *BB1\y )
            ;         DrawImage( ImageID( DownImage ), *BB2\x, *BB2\y )
            ;         ProcedureReturn
            
            If *this\color\_alpha
               ; Draw scroll bar background
               If *this\color\back <> - 1
                  drawing_mode_alpha_( #PB_2DDrawing_Default )
                  If *this\child
                     If *bar\vertical
                        draw_box_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\parent\container_height( ), *this\color\back )
                     Else
                        draw_box_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ) - *this\round / 2, *this\inner_height( ), *this\color\back )
                     EndIf
                  Else
                     draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back )
                  EndIf
               EndIf
               
               ;
               ; background buttons draw
               If Not *BB1\hide
                  If *BB1\color\fore <> - 1
                     drawing_mode_alpha_( #PB_2DDrawing_Gradient )
                     draw_gradient_(*bar\vertical, *BB1, *BB1\color\fore[*BB1\color\state], *BB1\color\back[*BB1\color\state] )
                  Else
                     drawing_mode_alpha_( #PB_2DDrawing_Default )
                     draw_box(*BB1, color\back)
                  EndIf
               EndIf
               If Not *BB2\hide
                  If *BB2\color\fore <> - 1
                     drawing_mode_alpha_( #PB_2DDrawing_Gradient )
                     draw_gradient_(*bar\vertical, *BB2, *BB2\color\fore[*BB2\color\state], *BB2\color\back[*BB2\color\state] )
                  Else
                     drawing_mode_alpha_( #PB_2DDrawing_Default )
                     draw_box(*BB2, color\back)
                  EndIf
               EndIf
               
               drawing_mode_alpha_( #PB_2DDrawing_Outlined )
               
               If *this\type = #__type_ScrollBar
                  If *bar\vertical
                     If (*bar\page\len + Bool(*this\round ) * (*this\width / 4 )) = *this\frame_height( )
                        Line(*this\frame_x( ), *this\frame_y( ), 1, *bar\page\len + 1, *this\color\front & $FFFFFF | *this\color\_alpha << 24 ) ; $FF000000 ) ;
                     Else
                        Line(*this\frame_x( ), *this\frame_y( ) + *BB1\round, 1, *this\height - *BB1\round - *BB2\round, *this\color\front & $FFFFFF | *this\color\_alpha << 24 ) ; $FF000000 ) ;
                     EndIf
                  Else
                     If (*bar\page\len + Bool(*this\round ) * (*this\height / 4 )) = *this\frame_width( )
                        Line(*this\frame_x( ), *this\frame_y( ), *bar\page\len + 1, 1, *this\color\front & $FFFFFF | *this\color\_alpha << 24 ) ; $FF000000 ) ;
                     Else
                        Line(*this\frame_x( ) + *BB1\round, *this\frame_y( ), *this\frame_width( ) - *BB1\round - *BB2\round, 1, *this\color\front & $FFFFFF | *this\color\_alpha << 24 ) ; $FF000000 ) ;
                     EndIf
                  EndIf
               EndIf
               
               ; frame buttons draw
               If Not *BB1\hide
                  If *BB1\arrow\size
                     draw_arrows_( *BB1, Bool(*bar\vertical ))
                  EndIf
                  draw_box(*BB1, color\frame)
               EndIf
               If Not *BB2\hide
                  If *BB2\arrow\size
                     draw_arrows_( *BB2, Bool(*bar\vertical ) + 2 )
                  EndIf
                  draw_box(*BB2, color\frame)
               EndIf
               
               
               If *bar\thumb\len And *this\type <> #__type_ProgressBar
                  ; Draw thumb
                  drawing_mode_alpha_( #PB_2DDrawing_Gradient )
                  draw_gradient_(*bar\vertical, *SB, *SB\color\fore[*SB\color\state], *SB\color\back[*SB\color\state])
                  
                  If *SB\arrow\type ;*this\type = #__type_ScrollBar
                     If *SB\arrow\size
                        drawing_mode_alpha_( #PB_2DDrawing_Default )
                        ;                 Arrow(*SB\x + (*SB\width -*SB\arrow\size )/2, *SB\y + (*SB\height -*SB\arrow\size )/2,
                        ;                       *SB\arrow\size, *SB\arrow\direction, *SB\color\front[*SB\color\state]&$FFFFFF |*SB\color\_alpha<<24, *SB\arrow\type )
                        
                        draw_arrows_( *SB, *SB\arrow\direction )
                     EndIf
                  Else
                     ; Draw thumb lines
                     drawing_mode_alpha_( #PB_2DDrawing_Default )
                     If *bar\vertical
                        Line(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 - 3, *SB\arrow\size, 1, *SB\color\front[*SB\color\state] & $FFFFFF | *this\color\_alpha << 24 )
                        Line(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2, *SB\arrow\size, 1, *SB\color\front[*SB\color\state] & $FFFFFF | *this\color\_alpha << 24 )
                        Line(*SB\x + (*SB\width - *SB\arrow\size ) / 2, *SB\y + *SB\height / 2 + 3, *SB\arrow\size, 1, *SB\color\front[*SB\color\state] & $FFFFFF | *this\color\_alpha << 24 )
                     Else
                        Line(*SB\x + *SB\width / 2 - 3, *SB\y + (*SB\height - *SB\arrow\size ) / 2, 1, *SB\arrow\size, *SB\color\front[*SB\color\state] & $FFFFFF | *this\color\_alpha << 24 )
                        Line(*SB\x + *SB\width / 2, *SB\y + (*SB\height - *SB\arrow\size ) / 2, 1, *SB\arrow\size, *SB\color\front[*SB\color\state] & $FFFFFF | *this\color\_alpha << 24 )
                        Line(*SB\x + *SB\width / 2 + 3, *SB\y + (*SB\height - *SB\arrow\size ) / 2, 1, *SB\arrow\size, *SB\color\front[*SB\color\state] & $FFFFFF | *this\color\_alpha << 24 )
                     EndIf
                  EndIf
                  
                  ; Draw thumb frame
                  drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                  draw_box(*SB, color\frame)
               EndIf
               
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure.b bar_progress_draw( *this._s_WIDGET )
         With *this
            Protected i, a, _position_, _frame_size_ = 1, _gradient_ = 1
            Protected *bar._s_BAR = *this\bar
            Protected _vertical_ = *bar\vertical
            Protected _reverse_ = *bar\invert
            Protected _round_ = *this\round
            Protected alpha = 230
            Protected _frame_color_ = $FF000000 ; *this\color\frame
            Protected _fore_color1_
            Protected _back_color1_
            Protected _fore_color2_
            Protected _back_color2_
            
            Protected state1 = Bool(Not *bar\invert) * #__s_2
            Protected state2 = Bool(*bar\invert) * #__s_2
            
            alpha         = 230
            _fore_color1_ = *this\color\fore[state1] & $FFFFFF | alpha << 24 ; $f0E9BA81 ;
            _back_color1_ = *this\color\back[state1] & $FFFFFF | alpha << 24 ; $f0E89C3D ;
            
            alpha - 15
            _fore_color2_ = *this\color\fore[state2] & $FFFFFF | alpha << 24 ; $e0F8F8F8 ;
            _back_color2_ = *this\color\back[state2] & $FFFFFF | alpha << 24 ; $e0E2E2E2 ;
            
            If _vertical_
               
               ;           If _reverse_
               ;             _position_ = *bar\thumb\pos
               ;           Else
               _position_ = *this\frame_height( ) - *bar\thumb\pos
               ;           EndIf
            Else
               ;           If _reverse_
               ;             _position_ = *this\frame_width( ) - *bar\thumb\pos
               ;           Else
               _position_ = *bar\thumb\pos
               ;           EndIf
               
            EndIf
            
            If _position_ < 0
               _position_ = 0
            EndIf
            
            ; Debug "_position_ "+_position_ +" "+ *bar\page\pos
            
            ; https://www.purebasic.fr/english/viewtopic.php?f=13&t=75757&p=557936#p557936 ; thank you infratec
            ; FrontColor(_frame_color_) ; не работает
            drawing_mode_alpha_(#PB_2DDrawing_Outlined)
            draw_roundbox_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _frame_size_, *this\frame_width( ) - _frame_size_ * 2, *this\frame_height( ) - _frame_size_ * 2, _round_, _round_, _frame_color_)
            ;   draw_roundbox_(*this\frame_x( ) + _frame_size_+1, *this\frame_y( ) + _frame_size_+1, *this\frame_width( ) - _frame_size_*2-2, *this\frame_height( ) - _frame_size_*2-2, _round_,_round_)
            ;   ; ;   draw_roundbox_(*this\frame_x( ) + _frame_size_+2, *this\frame_y( ) + _frame_size_+2, *this\frame_width( ) - _frame_size_*2-4, *this\frame_height( ) - _frame_size_*2-4, _round_,_round_)
            ;   ;
            ;   ;   For i = 0 To 1
            ;   ;     draw_roundbox_(*this\frame_x( ) + (_frame_size_+i), *this\frame_y( ) + (_frame_size_+i), *this\frame_width( ) - (_frame_size_+i)*2, *this\frame_height( ) - (_frame_size_+i)*2, _round_,_round_)
            ;   ;   Next
            
            If _gradient_
               drawing_mode_alpha_( #PB_2DDrawing_Gradient )
               If _vertical_
                  LinearGradient(*this\frame_x( ), *this\frame_y( ), (*this\frame_x( ) + *this\frame_width( )), *this\frame_y( ))
               Else
                  LinearGradient(*this\frame_x( ), *this\frame_y( ), *this\frame_x( ), (*this\frame_y( ) + *this\frame_height( )))
               EndIf
            Else
               drawing_mode_alpha_( #PB_2DDrawing_Default )
            EndIf
            
            
            BackColor(_fore_color1_)
            FrontColor(_back_color1_)
            
            If Not _round_
               If _vertical_
                  draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + (_position_), *this\frame_width( ) - _frame_size_ * 2, (*this\frame_height( ) - _frame_size_ - (_position_)))
               Else
                  draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _frame_size_, (_position_) - _frame_size_, *this\frame_height( ) - _frame_size_ * 2)
               EndIf
            Else
               
               If _vertical_
                  If (*this\frame_height( ) - _round_ - (_position_)) > _round_
                     If *this\frame_height( ) > _round_ * 2
                        ; рисуем прямоуголную часть
                        If _round_ > (_position_)
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + (_position_) + (_round_ - (_position_)), *this\frame_width( ) - _frame_size_ * 2, (*this\frame_height( ) - _round_ - (_position_)) - (_round_ - (_position_)))
                        Else
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + (_position_), *this\frame_width( ) - _frame_size_ * 2, (*this\frame_height( ) - _round_ - (_position_)))
                        EndIf
                     EndIf
                     
                     For a = (*this\frame_height( ) - _round_) To (*this\frame_height( ) - _frame_size_)
                        For i = _frame_size_ To (*this\frame_width( ) - _frame_size_)
                           If Point(*this\frame_x( ) + i, *this\frame_y( ) + a) & $FFFFFF = _frame_color_ & $FFFFFF
                              Line(*this\frame_x( ) + i, *this\frame_y( ) + a, *this\frame_width( ) - i * 2, 1)
                              Break
                           EndIf
                        Next i
                     Next a
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > (_position_)
                        For a = _frame_size_ + (_position_) To _round_
                           For i = _frame_size_ To (*this\frame_width( ) - _frame_size_)
                              If Point(*this\frame_x( ) + i, *this\frame_y( ) + a) & $FFFFFF = _frame_color_ & $FFFFFF
                                 Line(*this\frame_x( ) + i, *this\frame_y( ) + a, *this\frame_width( ) - i * 2, 1)
                                 Break
                              EndIf
                           Next i
                        Next a
                     EndIf
                     
                  Else
                     For a = (_position_) - _frame_size_ To (*this\frame_height( ) - _frame_size_)
                        For i = _frame_size_ To (*this\frame_width( ) - _frame_size_)
                           If Point(*this\frame_x( ) + i, *this\frame_y( ) + a) & $FFFFFF = _frame_color_ & $FFFFFF
                              Line(*this\frame_x( ) + i, *this\frame_y( ) + a, *this\frame_width( ) - i * 2, 1)
                              Break
                           EndIf
                        Next i
                     Next a
                  EndIf
               Else
                  If (_position_) > _round_
                     ; рисуем прямоуголную часть
                     If *this\frame_width( ) > _round_ * 2
                        If (*this\frame_width( ) - (_position_)) > _round_
                           draw_box_(*this\frame_x( ) + _round_, *this\frame_y( ) + _frame_size_, ((_position_) - _round_) , *this\frame_height( ) - _frame_size_ * 2)
                        Else
                           draw_box_(*this\frame_x( ) + _round_, *this\frame_y( ) + _frame_size_, ((_position_) - _round_) + (*this\frame_width( ) - _round_ - (_position_)), *this\frame_height( ) - _frame_size_ * 2)
                        EndIf
                     EndIf
                     
                     For a = _frame_size_ To _round_
                        For i = _frame_size_ To (*this\frame_height( ) - _frame_size_ * 2)
                           If Point(*this\frame_x( ) + a, *this\frame_y( ) + i) & $FFFFFF = _frame_color_ & $FFFFFF
                              Line(*this\frame_x( ) + a, *this\frame_y( ) + i, 1, *this\frame_height( ) - i * 2)
                              Break
                           EndIf
                        Next i
                     Next a
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > (*this\frame_width( ) - (_position_))
                        For a = (*this\frame_width( ) - _frame_size_ - _round_) To (_position_) - _frame_size_
                           For i = _frame_size_ To (*this\frame_height( ) - _frame_size_ * 2)
                              If Point(*this\frame_x( ) + a, *this\frame_y( ) + i) & $FFFFFF = _frame_color_ & $FFFFFF
                                 Line(*this\frame_x( ) + a, *this\frame_y( ) + i, 1, *this\frame_height( ) - i * 2)
                                 Break
                              EndIf
                           Next i
                        Next a
                     EndIf
                     
                  Else
                     For a = _frame_size_ To (_position_) + _frame_size_ - 1
                        For i = _frame_size_ To (*this\frame_height( ) - _frame_size_ * 2)
                           If Point(*this\frame_x( ) + a, *this\frame_y( ) + i) & $FFFFFF = _frame_color_ & $FFFFFF
                              Line(*this\frame_x( ) + a, *this\frame_y( ) + i, 1, *this\frame_height( ) - i * 2)
                              Break
                           EndIf
                        Next i
                     Next a
                  EndIf
               EndIf
               
            EndIf
            
            BackColor(_fore_color2_)
            FrontColor(_back_color2_)
            
            If Not _round_
               If _vertical_
                  draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _frame_size_, *this\frame_width( ) - _frame_size_ * 2, (_position_) - _frame_size_)
               Else
                  draw_box_(*this\frame_x( ) + (_position_), *this\frame_y( ) + _frame_size_, (*this\frame_width( ) - _frame_size_ - (_position_)), *this\frame_height( ) - _frame_size_ * 2)
               EndIf
            Else
               If _vertical_
                  If (_position_) > _round_
                     If *this\frame_height( ) > _round_ * 2
                        ; рисуем прямоуголную часть
                        If _round_ > (*this\frame_height( ) - (_position_))
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _round_, *this\frame_width( ) - _frame_size_ * 2, ((_position_) - _round_) + (*this\frame_height( ) - _round_ - (_position_)))
                        Else
                           draw_box_(*this\frame_x( ) + _frame_size_, *this\frame_y( ) + _round_, *this\frame_width( ) - _frame_size_ * 2, ((_position_) - _round_))
                        EndIf
                     EndIf
                     
                     For a = _frame_size_ To _round_
                        For i = _frame_size_ To (*this\frame_width( ) - _frame_size_ * 2)
                           If Point(*this\frame_x( ) + i, *this\frame_y( ) + a) & $FFFFFF = _frame_color_ & $FFFFFF
                              Line(*this\frame_x( ) + i, *this\frame_y( ) + a, *this\frame_width( ) - i * 2, 1)
                              Break
                           EndIf
                        Next i
                     Next a
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > (*this\frame_height( ) - (_position_))
                        For a = (*this\frame_height( ) - _frame_size_ - _round_) To (_position_) - _frame_size_
                           For i = _frame_size_ To (*this\frame_width( ) - _frame_size_ * 2)
                              If Point(*this\frame_x( ) + i, *this\frame_y( ) + a) & $FFFFFF = _frame_color_ & $FFFFFF
                                 Line(*this\frame_x( ) + i, *this\frame_y( ) + a, *this\frame_width( ) - i * 2, 1)
                                 Break
                              EndIf
                           Next i
                        Next a
                     EndIf
                     
                  Else
                     For a = _frame_size_ To (_position_) + _frame_size_ - 1
                        For i = _frame_size_ To (*this\frame_width( ) - _frame_size_ * 2)
                           If Point(*this\frame_x( ) + i, *this\frame_y( ) + a) & $FFFFFF = _frame_color_ & $FFFFFF
                              Line(*this\frame_x( ) + i, *this\frame_y( ) + a, *this\frame_width( ) - i * 2, 1)
                              Break
                           EndIf
                        Next i
                     Next a
                  EndIf
               Else
                  If (*this\frame_width( ) - _round_ - (_position_)) > _round_
                     If *this\frame_width( ) > _round_ * 2
                        ; рисуем прямоуголную часть
                        If _round_ > (_position_)
                           draw_box_(*this\frame_x( ) + (_position_) + (_round_ - (_position_)), *this\frame_y( ) + _frame_size_, (*this\frame_width( ) - _round_ - (_position_)) - (_round_ - (_position_)), *this\frame_height( ) - _frame_size_ * 2)
                        Else
                           draw_box_(*this\frame_x( ) + (_position_), *this\frame_y( ) + _frame_size_, (*this\frame_width( ) - _round_ - (_position_)), *this\frame_height( ) - _frame_size_ * 2)
                        EndIf
                     EndIf
                     
                     For a = (*this\frame_width( ) - _round_) To (*this\frame_width( ) - _frame_size_)
                        For i = _frame_size_ To (*this\frame_height( ) - _frame_size_ * 2)
                           If Point(*this\frame_x( ) + a, *this\frame_y( ) + i) & $FFFFFF = _frame_color_ & $FFFFFF
                              Line(*this\frame_x( ) + a, *this\frame_y( ) + i, 1, *this\frame_height( ) - i * 2)
                              Break
                           EndIf
                        Next i
                     Next a
                     
                     ; если позиция ползунка больше начало второго округленыя
                     If _round_ > (_position_)
                        For a = _frame_size_ + (_position_) To _round_
                           For i = _frame_size_ To (*this\frame_height( ) - _frame_size_ * 2)
                              If Point(*this\frame_x( ) + a, *this\frame_y( ) + i) & $FFFFFF = _frame_color_ & $FFFFFF
                                 Line(*this\frame_x( ) + a, *this\frame_y( ) + i, 1, *this\frame_height( ) - i * 2)
                                 Break
                              EndIf
                           Next i
                        Next a
                     EndIf
                     
                  Else
                     For a = (_position_) - _frame_size_ To (*this\frame_width( ) - _frame_size_)
                        For i = _frame_size_ To (*this\frame_height( ) - _frame_size_ * 2)
                           If Point(*this\frame_x( ) + a, *this\frame_y( ) + i) & $FFFFFF = _frame_color_ & $FFFFFF
                              Line(*this\frame_x( ) + a, *this\frame_y( ) + i, 1, *this\frame_height( ) - i * 2)
                              Break
                           EndIf
                        Next i
                     Next a
                  EndIf
               EndIf
            EndIf
            
            ; Draw string
            If *this\text And *this\text\string And ( *this\height > *this\text\height )
               drawing_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawRotatedText( *this\text\x, *this\text\y, *this\text\string, *this\text\rotate, $ff000000)
            EndIf
         EndWith
      EndProcedure
      
      Procedure.i bar_spin_draw( *this._s_WIDGET )
         Protected state = *this\color\state
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         drawing_mode_( #PB_2DDrawing_Default )
         ;          ; draw split-string back
         ;          ;          draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\color\back )
         ;          draw_box_( *this\frame_x( ) + *this\fs[1], *this\frame_y( ) + *this\fs[2], *this\frame_width( ) - *this\fs[1] - *this\fs[3], *this\frame_height( ) - *this\fs[2] - *this\fs[4], *this\color\back[0] )
         ;
         ;          ; draw split-bar back
         ;          If *this\fs[1] ; left
         ;             draw_box_( *this\frame_x( ), *this\frame_y( ), *this\fs[1] + 1, *this\frame_height( ), *this\color\back[0] )
         ;          EndIf
         ;          If *this\fs[2] ; top
         ;             draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + 1, *this\color\back[0] )
         ;          EndIf
         ;          If *this\fs[3] ; right
         ;             draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs[3] - 1, *this\frame_y( ), *this\fs[3] + 1, *this\frame_height( ), *this\color\back[0] )
         ;          EndIf
         ;          If *this\fs[4] ; bottom
         ;             draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs[4] - 1, *this\frame_width( ), *this\fs[4] + 1, *this\color\back[0] )
         ;          EndIf
         
         
         ;\\ draw spin-buttons back
         drawing_mode_alpha_( #PB_2DDrawing_Gradient )
         draw_gradient_(*bar\vertical, *BB1, *BB1\color\fore[*BB1\color\state], *BB1\color\back[*BB1\color\state] )
         draw_gradient_(*bar\vertical, *BB2, *BB2\color\fore[*BB2\color\state], *BB2\color\back[*BB2\color\state] )
         
         ;\\
         drawing_mode_( #PB_2DDrawing_Outlined )
         If *this\flag & #__spin_Plus
            ; -/+
            draw_plus_( *BB1, Bool( *bar\invert ) )
            draw_plus_( *BB2, Bool( Not *bar\invert ) )
         Else
            ; arrows on the buttons
            If *BB2\arrow\size
               draw_arrows_( *BB2, Bool(*bar\vertical ) )
            EndIf
            If *BB1\arrow\size
               draw_arrows_( *BB1, Bool(*bar\vertical ) + 2)
            EndIf
         EndIf
         
         ;\\ draw spin-bar frame
         If *this\fs[1]
            draw_box_( *this\frame_x( ), *this\frame_y( ), *this\fs[1] + 1, *this\frame_height( ), *this\color\frame[state] )
         EndIf
         If *this\fs[2]
            draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + 1, *this\color\frame[state] )
         EndIf
         If *this\fs[3]
            draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs[3] - 1, *this\frame_y( ), *this\fs[3] + 1, *this\frame_height( ), *this\color\frame[state] )
         EndIf
         If *this\fs[4]
            draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs[4] - 1, *this\frame_width( ), *this\fs[4] + 1, *this\color\frame[state] )
         EndIf
         
         ;\\ draw spin-buttons frame
         If EnteredButton( ) <> *BB1
            draw_box_( *BB1\x, *BB1\y, *BB1\width, *BB1\height, *BB1\color\frame[*BB1\color\state] )
         EndIf
         If EnteredButton( ) <> *BB2
            draw_box_( *BB2\x, *BB2\y, *BB2\width, *BB2\height, *BB2\color\frame[*BB2\color\state] )
         EndIf
         If EnteredButton( )
            draw_box_( EnteredButton( )\x, EnteredButton( )\y, EnteredButton( )\width, EnteredButton( )\height, EnteredButton( )\color\frame[EnteredButton( )\color\state] )
         EndIf
         
         ;\\ draw split-string frame
         draw_box_( *this\frame_x( ) + *this\fs[1], *this\frame_y( ) + *this\fs[2], *this\frame_width( ) - *this\fs[1] - *this\fs[3], *this\frame_height( ) - *this\fs[2] - *this\fs[4], *this\color\frame[state] )
      EndProcedure
      
      Procedure.b bar_track_draw( *this._s_WIDGET )
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         bar_scroll_draw( *this )
         ;bar_progress_draw( *this )
         
         With *this
            If *this\type = #__type_TrackBar
               Protected i, x, y
               drawing_mode_( #PB_2DDrawing_XOr )
               
               If *bar\vertical
                  x = *SB\x + Bool( *bar\invert ) * ( *SB\width - 3 + 4 ) - 2
                  y = *this\y + *bar\area\pos + *SB\size / 2
                  
                  If *this\flag & #PB_TrackBar_Ticks
                     For i = 0 To *bar\page\end
                        Line( x, y + bar_thumb_pos_( *bar, i ), 6 - Bool(i > *bar\min And i <> 0 And i < *bar\max) * 3, 1, *SB\color\frame )
                     Next
                  EndIf
                  
                  Line( x - 3, y, 3, 1, *SB\color\frame )
                  Line( x - 3, y + *bar\area\len - *bar\thumb\len, 3, 1, *SB\color\frame )
                  
               Else
                  x = *this\x + *bar\area\pos + *SB\size / 2
                  y = *SB\y + Bool( Not *bar\invert ) * ( *SB\height - 3 + 4 ) - 2
                  
                  If *this\flag & #PB_TrackBar_Ticks
                     For i = *bar\min To *bar\max
                        Line( x + bar_thumb_pos_( *bar, i ), y, 1, 6 - Bool(i > *bar\min And i <> 0 And i < *bar\max) * 3, *SB\color\frame )
                     Next
                  EndIf
                  
                  Line( x, y - 3, 1, 3, *SB\color\frame )
                  Line( x + *bar\area\len - *bar\thumb\len, y - 3, 1, 3, *SB\color\frame )
               EndIf
            EndIf
         EndWith
         
      EndProcedure
      
      Procedure.b bar_splitter_draw( *this._s_WIDGET )
         Protected circle_x, circle_y
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *SB1, *SB2, *SB
         *SB  = *bar\button
         *SB1 = *bar\button[1]
         *SB2 = *bar\button[2]
         
         drawing_mode_alpha_( #PB_2DDrawing_Default )
         
         ; draw the splitter background
         draw_box_( *SB\x, *SB\y, *SB\width, *SB\height, *this\color\back[*SB\color\state] & $ffffff | 210 << 24 )
         
         ; draw the first\second background
         If Not *SB1\hide : draw_box_( *SB1\x, *SB1\y, *SB1\width, *SB1\height, *this\color\frame[*SB1\color\state] ) : EndIf
         If Not *SB2\hide : draw_box_( *SB2\x, *SB2\y, *SB2\width, *SB2\height, *this\color\frame[*SB2\color\state] ) : EndIf
         
         drawing_mode_( #PB_2DDrawing_Outlined )
         
         ; draw the frame
         If Not *SB1\hide : draw_box_( *SB1\x, *SB1\y, *SB1\width, *SB1\height, *this\color\frame[*SB1\color\state] ) : EndIf
         If Not *SB2\hide : draw_box_( *SB2\x, *SB2\y, *SB2\width, *SB2\height, *this\color\frame[*SB2\color\state] ) : EndIf
         
         ;
         If *bar\thumb\len
            If *bar\vertical
               circle_y = ( *SB\y + *SB\height / 2 )
               circle_x = *this\frame_x( ) + ( *this\frame_width( ) - *SB\round ) / 2 + Bool( *this\width % 2 )
            Else
               circle_x = ( *SB\x + *SB\width / 2 ) ; - *this\x
               circle_y = *this\frame_y( ) + ( *this\frame_height( ) - *SB\round ) / 2 + Bool( *this\height % 2 )
            EndIf
            
            If *bar\vertical ; horisontal line
               If *SB\width > 35
                  Circle( circle_x - ( *SB\round * 2 + 2 ) * 2 - 2, circle_y, *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x + ( *SB\round * 2 + 2 ) * 2 + 2, circle_y, *SB\round, *SB\color\frame[#__s_2] )
               EndIf
               If *SB\width > 20
                  Circle( circle_x - ( *SB\round * 2 + 2 ), circle_y, *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x + ( *SB\round * 2 + 2 ), circle_y, *SB\round, *SB\color\frame[#__s_2] )
               EndIf
            Else
               If *SB\height > 35
                  Circle( circle_x, circle_y - ( *SB\round * 2 + 2 ) * 2 - 2, *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x, circle_y + ( *SB\round * 2 + 2 ) * 2 + 2, *SB\round, *SB\color\frame[#__s_2] )
               EndIf
               If *SB\height > 20
                  Circle( circle_x, circle_y - ( *SB\round * 2 + 2 ), *SB\round, *SB\color\frame[#__s_2] )
                  Circle( circle_x, circle_y + ( *SB\round * 2 + 2 ), *SB\round, *SB\color\frame[#__s_2] )
               EndIf
            EndIf
            
            Circle( circle_x, circle_y, *SB\round, *SB\color\frame[#__s_2] )
         EndIf
      EndProcedure
      
      Procedure.b bar_draw( *this._s_WIDGET )
         Protected *bar._s_BAR = *this\bar
         
         With *this
            If *this\text\string And ( *this\type = #__type_Spin Or
                                       *this\type = #__type_ProgressBar )
               
               draw_font_( *this )
               
               If *this\TextChange( ) Or is_resize_( *this )
                  
                  Protected _x_ = *this\inner_x( )
                  Protected _y_ = *this\inner_y( )
                  Protected _width_ = *this\inner_width( )
                  Protected _height_ = *this\inner_height( )
                  
                  If *this\type = #PB_GadgetType_ProgressBar
                     *this\text\rotate = ( Bool( *bar\vertical And Not *bar\invert ) * 90 ) +
                                         ( Bool( *bar\vertical And *bar\invert ) * 270 )
                  EndIf
                  
                  If *this\text\rotate = 0
                     *this\text\y = _y_ + ( _height_ - *this\text\height ) / 2
                     
                     If *this\text\align\right
                        *this\text\x = _x_ + ( _width_ - *this\text\width - *this\text\padding\x )
                     ElseIf Not *this\text\align\left
                        *this\text\x = _x_ + ( _width_ - *this\text\width ) / 2
                     Else
                        *this\text\x = _x_ + *this\text\padding\x
                     EndIf
                     
                  ElseIf *this\text\rotate = 180
                     *this\text\y = _y_ + ( _height_ - *this\y )
                     
                     If *this\text\align\right
                        *this\text\x = _x_ + *this\text\padding\x + *this\text\width
                     ElseIf Not *this\text\align\left
                        *this\text\x = _x_ + ( _width_ + *this\text\width ) / 2
                     Else
                        *this\text\x = _x_ + _width_ - *this\text\padding\x
                     EndIf
                     
                  ElseIf *this\text\rotate = 90
                     *this\text\x = _x_ + ( _width_ - *this\text\height ) / 2
                     
                     If *this\text\align\right
                        *this\text\y = _y_ + *this\text\padding\y + *this\text\width
                     ElseIf Not *this\text\align\left
                        *this\text\y = _y_ + ( _height_ + *this\text\width ) / 2
                     Else
                        *this\text\y = _y_ + _height_ - *this\text\padding\y
                     EndIf
                     
                  ElseIf *this\text\rotate = 270
                     *this\text\x = _x_ + ( _width_ - 4 )
                     
                     If *this\text\align\right
                        *this\text\y = _y_ + ( _height_ - *this\text\width - *this\text\padding\y )
                     ElseIf Not *this\text\align\left
                        *this\text\y = _y_ + ( _height_ - *this\text\width ) / 2
                     Else
                        *this\text\y = _y_ + *this\text\padding\y
                     EndIf
                  EndIf
                  
               EndIf
            EndIf
            
            Select *this\type
               Case #__type_Spin : bar_spin_draw( *this )
               Case #__type_TabBar : bar_tab_draw( *this )
               Case #__type_ToolBar : bar_tab_draw( *this )
               Case #__type_TrackBar : bar_track_draw( *this )
               Case #__type_ScrollBar : bar_scroll_draw( *this )
               Case #__type_ProgressBar : bar_progress_draw( *this )
               Case #__type_Splitter : bar_splitter_draw( *this )
            EndSelect
            
            ;drawing_mode_( #PB_2DDrawing_Outlined ) :draw_box_( *this\inner_x( ),\inner_y( ),\inner_width( ),\inner_height( ), $FF00FF00 )
            
            If *this\TextChange( ) <> 0
               *this\TextChange( ) = 0
            EndIf
            
         EndWith
      EndProcedure
      
      ;-
      Macro bar_area_create_( _parent_, _scroll_step_, _area_width_, _area_height_, _width_, _height_, _mode_ = #True )
         If Not _parent_\scroll\bars
            _parent_\scroll\bars = 1
            _parent_\scroll\v    = Create( _parent_, _parent_\class + "-" + _parent_\index + "-vertical", #__type_ScrollBar, 0, 0, #__scroll_buttonsize, _height_, #Null$, #__flag_child | #__bar_vertical, 0, _area_height_, _height_, #__scroll_buttonsize, 7, _scroll_step_ )
            _parent_\scroll\h    = Create( _parent_, _parent_\class + "-" + _parent_\index + "-horizontal", #__type_ScrollBar, 0, 0, _width_, #__scroll_buttonsize, #Null$, #__flag_child, 0, _area_width_, _width_, Bool( _mode_ ) * #__scroll_buttonsize, 7, _scroll_step_ )
         EndIf
      EndMacro
      
      Macro bar_area_draw_( _this_ )
         If _this_\scroll And ( _this_\scroll\v Or _this_\scroll\h )
            ;clip_output_( _this_, [#__c_draw] )
            
            If _this_\scroll\v And Not _this_\scroll\v\hide And _this_\scroll\v\width And
               ( _this_\scroll\v\draw_width( ) > 0 And _this_\scroll\v\draw_height( ) > 0 )
               bar_scroll_draw( _this_\scroll\v )
            EndIf
            If _this_\scroll\h And Not _this_\scroll\h\hide And _this_\scroll\h\height And
               ( _this_\scroll\h\draw_width( ) > 0 And _this_\scroll\h\draw_height( ) > 0 )
               bar_scroll_draw( _this_\scroll\h )
            EndIf
            
            ;\\
            If Not _this_\haschildren
               drawing_mode_alpha_( #PB_2DDrawing_Outlined )
               
               ;\\ Scroll area coordinate
               draw_box_( _this_\inner_x( ) + _this_\scroll_x( ) + _this_\text\padding\x, _this_\inner_y( ) + _this_\scroll_y( ) + _this_\text\padding\y, _this_\scroll_width( ) - _this_\text\padding\x * 2, _this_\scroll_height( ) - _this_\text\padding\y * 2, $FFFF0000 )
               draw_box_( _this_\inner_x( ) + _this_\scroll_x( ), _this_\inner_y( ) + _this_\scroll_y( ), _this_\scroll_width( ), _this_\scroll_height( ), $FF0000FF )
               
               If _this_\scroll\v And _this_\scroll\h
                  draw_box_( _this_\scroll\h\frame_x( ) + _this_\scroll_x( ), _this_\scroll\v\frame_y( ) + _this_\scroll_y( ), _this_\scroll_width( ), _this_\scroll_height( ), $FF0000FF )
                  
                  ; Debug "" +  _this_\scroll_x( )  + " " +  _this_\scroll_y( )  + " " +  _this_\scroll_width( )  + " " +  _this_\scroll_height( )
                  ;draw_box_( _this_\scroll\h\frame_x( ) - _this_\scroll\h\bar\page\pos, _this_\scroll\v\frame_y( ) - _this_\scroll\v\bar\page\pos, _this_\scroll\h\bar\max, _this_\scroll\v\bar\max, $FF0000FF )
                  
                  ;\\ page coordinate
                  draw_box_( _this_\scroll\h\frame_x( ), _this_\scroll\v\frame_y( ), _this_\scroll\h\bar\page\len, _this_\scroll\v\bar\page\len, $FF00FF00 )
               EndIf
            EndIf
         EndIf
      EndMacro
      
      Procedure bar_area_resize( *this._s_WIDGET, x.l, y.l, width.l, height.l )
         Protected v1, h1, x1 = #PB_Ignore, y1 = #PB_Ignore, iwidth, iheight, w, h
         ;Protected v1, h1, x1 = *this\container_x( ), y1 = *this\container_y( ), width1 = *this\container_width( ), height1 = *this\container_height( ), iwidth, iheight, w, h
         
         With *this\scroll
            If Not ( *this\scroll And ( \v Or \h ))
               ProcedureReturn 0
            EndIf
            
            If ( *this\width = 0 And *this\height = 0)
               \v\hide = #True
               \h\hide = #True
               ProcedureReturn 0
            EndIf
            
            If x = #PB_Ignore
               x = \h\container_x( )
            EndIf
            If y = #PB_Ignore
               y = \v\container_y( )
            EndIf
            If width = #PB_Ignore
               width = \v\frame_x( ) - \h\frame_x( ) + \v\frame_width( )
            EndIf
            If height = #PB_Ignore
               height = \h\frame_y( ) - \v\frame_y( ) + \h\frame_height( )
            EndIf
            
            w = Bool( *this\scroll_width( ) > width )
            h = Bool( *this\scroll_height( ) > height )
            
            \v\bar\page\len = height - ( Bool( w Or \h\bar\max > \h\bar\page\len ) * \h\height )
            \h\bar\page\len = width - ( Bool( h Or \v\bar\max > \v\bar\page\len ) * \v\width )
            
            iheight = height - ( Bool( w Or \h\bar\max > \h\bar\page\len ) * \h\height )
            If \v\bar\page\len = iheight
               If \v\bar\thumb\len = \v\bar\thumb\end
                  bar_Update( \v )
               EndIf
               bar_Update( \h )
            Else
               \v\bar\AreaChange( ) = \v\bar\page\len - iheight
               \v\bar\page\len      = iheight
               
               If Not \v\bar\max
                  If \v\bar\min > iheight
                     \v\bar\max = \v\bar\min + 1
                  Else
                     \v\bar\max = iheight
                  EndIf
               EndIf
            EndIf
            
            iwidth = width - ( Bool( h Or \v\bar\max > \v\bar\page\len ) * \v\width )
            If \h\bar\page\len = iwidth
               bar_Update( \v )
               If \h\bar\thumb\len = \h\bar\thumb\end
                  bar_Update( \h )
               EndIf
            Else
               \h\bar\AreaChange( ) = \h\bar\page\len - iwidth
               \h\bar\page\len      = iwidth
               
               If Not \h\bar\max
                  If \h\bar\min > iwidth
                     \h\bar\max = \h\bar\min + 1
                  Else
                     \h\bar\max = iwidth
                  EndIf
               EndIf
            EndIf
            
            width + x
            height + y
            
            If \v\frame_x( ) <> width - \v\width
               v1 = 1
               x1 = width - \v\width
            EndIf
            
            If \h\frame_y( ) <> height - \h\height
               h1 = 1
               y1 = height - \h\height
            EndIf
            
            If \v\bar\max > \v\bar\page\len
               v1     = 1
               height = ( \v\bar\page\len + Bool( \h\bar\max > \h\bar\page\len And \v\round And \h\round ) * ( \h\height / 4 ) )
               If \v\hide <> #False
                  \v\hide = #False
                  If \h\hide
                     width = \h\bar\page\len
                  EndIf
               EndIf
            Else
               If \v\hide <> #True
                  \v\hide = #True
                  ;// reset page pos then hide scrollbar
                  If \v\bar\page\pos > \v\bar\min
                     If bar_Change( \v, \v\bar\min )
                        bar_Update( \v, 0 )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            If \h\bar\max > \h\bar\page\len
               h1    = 1
               width = ( \h\bar\page\len + Bool( \v\bar\max > \v\bar\page\len And \v\round And \h\round ) * ( \v\width / 4 ))
               If \h\hide <> #False
                  \h\hide = #False
                  If \v\hide
                     height = \v\bar\page\len
                  EndIf
               EndIf
            Else
               If \h\hide <> #True
                  \h\hide = #True
                  ;// reset page pos then hide scrollbar
                  If \h\bar\page\pos > \h\bar\min
                     If bar_Change( \h, \h\bar\min )
                        bar_Update( \h, 0 )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            If test_scrollbars_resize
               Debug "  --- area_resize " + *this\class + " " + *this\inner_width( ) + " " + *this\inner_height( ) + " " + \v\bar\page\len + " " + \h\bar\page\len
               Debug "  {"
            EndIf
            
            If v1 And (\v\frame_x( ) <> *this\inner_x( ) + x1 Or \v\frame_y( ) <> *this\inner_y( ) + y Or \v\frame_height( ) <> height)
               Resize( \v, x1 , y, #PB_Ignore, height )
            EndIf
            If h1 And (\h\frame_x( ) <> *this\inner_x( ) + x Or \h\frame_y( ) <> *this\inner_y( ) + y1 Or \h\frame_width( ) <> width)
               Resize( \h, x, y1, width, #PB_Ignore )
            EndIf
            
            If \v\bar\thumb\len = \v\bar\thumb\end
               \v\hide = 1
            Else
               \v\hide = 0
            EndIf
            
            If \h\bar\thumb\len = \h\bar\thumb\end
               \h\hide = 1
            Else
               \h\hide = 0
            EndIf
            
            If test_scrollbars_resize
               Debug "  }"
            EndIf
            
            ;\\ update scrollbars parent inner coordinate
            If *this\scroll_inner_width( ) <> \h\bar\page\len
               *this\scroll_inner_width( ) = \h\bar\page\len
            EndIf
            If *this\scroll_inner_height( ) <> \v\bar\page\len
               *this\scroll_inner_height( ) = \v\bar\page\len
            EndIf
            
            If \v\bar\AreaChange( ) Or
               \h\bar\AreaChange( )
               
               ; Debug ""+\v\bar\max +" "+ \v\bar\page\len
               ProcedureReturn #True
            EndIf
         EndWith
      EndProcedure
      
      Procedure.b bar_area_update( *this._s_WIDGET )
         Protected result.b
         
         ;\\ change vertical scrollbar max
         If *this\scroll\v And *this\scroll\v\bar\max <> *this\scroll_height( ) And
            bar_SetAttribute( *this\scroll\v, #PB_ScrollBar_Maximum, *this\scroll_height( ) )
            result = 1
         EndIf
         
         ;\\ change horizontal scrollbar max
         If *this\scroll\h And *this\scroll\h\bar\max <> *this\scroll_width( ) And
            bar_SetAttribute( *this\scroll\h, #PB_ScrollBar_Maximum, *this\scroll_width( ) )
            result = 1
         EndIf
         
         If result
            bar_area_resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure bar_mdi_update( *this._s_WIDGET, x.l, y.l, width.l, height.l ) ; Ok
         *this\scroll_x( )      = x
         *this\scroll_y( )      = y
         *this\scroll_width( )  = width
         *this\scroll_height( ) = height
         
         ;\\
         PushListPosition( __widgets( ))
         If StartEnumerate( *this )
            If *this = widget( )\parent
               If *this\scroll_x( ) > widget( )\container_x( )
                  *this\scroll_x( ) = widget( )\container_x( )
               EndIf
               If *this\scroll_y( ) > widget( )\container_y( )
                  *this\scroll_y( ) = widget( )\container_y( )
               EndIf
            EndIf
            StopEnumerate( )
         EndIf
         
         ;\\
         If StartEnumerate( *this )
            If *this = widget( )\parent
               If *this\scroll_width( ) < widget( )\container_x( ) + widget( )\frame_width( ) - *this\scroll_x( )
                  *this\scroll_width( ) = widget( )\container_x( ) + widget( )\frame_width( ) - *this\scroll_x( )
               EndIf
               If *this\scroll_height( ) < widget( )\container_y( ) + widget( )\frame_height( ) - *this\scroll_y( )
                  *this\scroll_height( ) = widget( )\container_y( ) + widget( )\frame_height( ) - *this\scroll_y( )
               EndIf
            EndIf
            StopEnumerate( )
         EndIf
         PopListPosition( __widgets( ))
      EndProcedure
      
      Procedure bar_mdi_resize( *this._s_WIDGET, x.l, y.l, width.l, height.l )
         Static v_max, h_max
         Protected sx, sy, round, result
         Protected scroll_x, scroll_y, scroll_width, scroll_height
         
         With *this\scroll
            If Not ( *this\scroll And ( \v Or \h ))
               ProcedureReturn 0
            EndIf
            
            ;\\
            scroll_x      = *this\scroll_x( )
            scroll_y      = *this\scroll_y( )
            scroll_width  = *this\scroll_width( )
            scroll_height = *this\scroll_height( )
            
            ;\\ top set state
            If scroll_y < y
               \h\bar\page\len = width - \v\width
            Else
               If \h\bar\page\len <> width - Bool( scroll_height > height ) * \v\width
                  \h\bar\page\len = width - Bool( scroll_height > height ) * \v\width
               EndIf
               
               sy = ( scroll_y - y )
               scroll_height + sy
               scroll_y = y
            EndIf
            
            ;\\ left set state
            If scroll_x < x
               \v\bar\page\len = height - \h\height
            Else
               If \v\bar\page\len <> height - Bool( scroll_width > width ) * \h\height
                  \v\bar\page\len = height - Bool( scroll_width > width ) * \h\height
               EndIf
               
               sx = ( scroll_x - x )
               scroll_width + sx
               scroll_x = x
            EndIf
            
            ;\\
            If scroll_width > \h\bar\page\len - ( scroll_x - x )
               If scroll_width - sx <= width And scroll_height = \v\bar\page\len - ( scroll_y - y )
                  ;Debug "w - " + Str( scroll_height - sx )
                  
                  ; if on the h - scroll
                  If \v\bar\max > height - \h\height
                     \v\bar\page\len = height - \h\height
                     \h\bar\page\len = width - \v\width
                     scroll_height   = \v\bar\max
                     
                     If scroll_y <= y
                        \v\bar\page\pos = - ( scroll_y - y )
                     EndIf
                     ;  Debug "w - " + \v\bar\max  + " " +  \v\height  + " " +  \v\bar\page\len
                  Else
                     scroll_height = \v\bar\page\len - ( scroll_x - x ) - \h\height
                  EndIf
               EndIf
               
               \v\bar\page\len = height - \h\height
               If scroll_x <= x
                  \h\bar\page\pos = - ( scroll_x - x )
                  h_max           = 0
               EndIf
            Else
               \h\bar\max   = scroll_width
               scroll_width = \h\bar\page\len - ( scroll_x - x )
            EndIf
            
            ;\\
            If scroll_height > \v\bar\page\len - ( scroll_y - y )
               If scroll_height - sy <= Height And scroll_width = \h\bar\page\len - ( scroll_x - x )
                  ;Debug " h - " + Str( scroll_height - sy )
                  
                  ; if on the v - scroll
                  If \h\bar\max > width - \v\width
                     \h\bar\page\len = width - \v\width
                     \v\bar\page\len = height - \h\height
                     scroll_width    = \h\bar\max
                     
                     If scroll_x <= x
                        \h\bar\page\pos = - ( scroll_x - x )
                     EndIf
                     ;  Debug "h - " + \h\bar\max  + " " +  \h\width  + " " +  \h\bar\page\len
                  Else
                     scroll_width = \h\bar\page\len - ( scroll_x - x ) - \v\width
                  EndIf
               EndIf
               
               \h\bar\page\len = width - \v\width
               If scroll_y <= y
                  \v\bar\page\pos = - ( scroll_y - y )
                  v_max           = 0
               EndIf
            Else
               \v\bar\max    = scroll_height
               scroll_height = \v\bar\page\len - ( scroll_y - y )
            EndIf
            
            ;\\
            If \h\round And
               \v\round And
               \h\bar\page\len < width And
               \v\bar\page\len < height
               round = ( \h\height / 4 )
            EndIf
            
            ;Debug ""+*this\scroll_width( ) +" "+ scroll_width
            
            ;\\
            If scroll_height >= \v\bar\page\len
               If \v\bar\Max <> scroll_height
                  \v\bar\Max = scroll_height
                  If scroll_y <= y
                     \v\bar\page\pos = - ( scroll_y - y )
                  EndIf
               EndIf
               
               If \v\height <> \v\bar\page\len + round
                  Resize( \v, #PB_Ignore, #PB_Ignore, #PB_Ignore, \v\bar\page\len + round )
                  *this\scroll\v\hide = Bool( *this\scroll\v\bar\max <= *this\scroll\v\bar\page\len )
                  result              = 1
               EndIf
            EndIf
            
            ;\\
            If scroll_width >= \h\bar\page\len
               If \h\bar\Max <> scroll_width
                  \h\bar\Max = scroll_width
                  If scroll_x <= x
                     \h\bar\page\pos = - ( scroll_x - x )
                  EndIf
               EndIf
               
               If \h\width <> \h\bar\page\len + round
                  Resize( \h, #PB_Ignore, #PB_Ignore, \h\bar\page\len + round, #PB_Ignore )
                  *this\scroll\h\hide = Bool( *this\scroll\h\bar\max <= *this\scroll\h\bar\page\len )
                  result              = 1
               EndIf
            EndIf
            
            ;\\
            If test_scrollbars_resize
               Debug "  --- mdi_resize " + *this\class + " " + *this\inner_width( ) + " " + *this\inner_height( )
            EndIf
            
            ;\\
            If v_max <> \v\bar\Max
               v_max = \v\bar\Max
               bar_Update( \v )
               result = 1
            EndIf
            
            ;\\
            If h_max <> \h\bar\Max
               h_max = \h\bar\Max
               bar_Update( \h )
               result = 1
            EndIf
            
            ; Debug ""+\h\bar\thumb\len +" "+ \h\bar\page\len +" "+ \h\bar\area\len +" "+ \h\bar\thumb\end +" "+ \h\bar\page\end +" "+ \h\bar\area\end
            
            ;\\
            *this\scroll_x( )      = scroll_x
            *this\scroll_y( )      = scroll_y
            *this\scroll_width( )  = scroll_width
            *this\scroll_height( ) = scroll_height
            
            ;\\ update scrollbars parent inner coordinate
            If *this\scroll_inner_width( ) <> \h\bar\page\len
               *this\scroll_inner_width( ) = \h\bar\page\len
            EndIf
            If *this\scroll_inner_height( ) <> \v\bar\page\len
               *this\scroll_inner_height( ) = \v\bar\page\len
            EndIf
            
            ;\\
            If result
            EndIf
            ProcedureReturn result
         EndWith
      EndProcedure
      
      ;-
      Procedure.b bar_Update( *this._s_WIDGET, mode.b = 1 )
         Protected fixed.l, ScrollPos.f, ThumbPos.i, width, height
         
         If Not *this\bar
            ProcedureReturn 0
         EndIf
         
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         width  = *this\frame_width( )
         height = *this\frame_height( )
         
         ;\\
         If mode > 0
            ;\\ get area size
            If *bar\vertical
               *bar\area\len = height
            Else
               *bar\area\len = width
            EndIf
            
            If *this\type = #__type_Spin
               ; set real spin-buttons height
               If Not *this\flag & #__spin_Plus
                  *BB1\size = height / 2 + Bool( height % 2 )
                  *BB2\size = *BB1\size + Bool( Not height % 2 )
               EndIf
               
               ;*bar\area\pos = ( *BB1\size + *bar\min[1] )
               *bar\thumb\end = *bar\area\len - ( *BB1\size + *BB2\size )
               
               *bar\page\end = *bar\max
               *bar\area\end = *bar\max - *bar\thumb\Len
               *bar\percent  = ( *bar\area\end - *bar\area\pos ) / ( *bar\page\end - *bar\min )
               
            Else
               If *this\type = #__type_ScrollBar
                  ; default button size
                  If *bar\max
                     If *BB1\size = - 1 And *BB2\size = - 1
                        If *bar\vertical And width > 7 And width < 21
                           *BB1\size = width - 1
                           *BB2\size = width - 1
                           
                        ElseIf Not *bar\vertical And height > 7 And height < 21
                           *BB1\size = height - 1
                           *BB2\size = height - 1
                           
                        Else
                           *BB1\size = *SB\size
                           *BB2\size = *SB\size
                        EndIf
                     EndIf
                     
                     ;           If *SB\size
                     ;             If *bar\vertical
                     ;               If *this\width = 0
                     ;                 *this\width = *SB\size
                     ;               EndIf
                     ;             Else
                     ;               If *this\height = 0
                     ;                 *this\height = *SB\size
                     ;               EndIf
                     ;             EndIf
                     ;           EndIf
                  EndIf
               EndIf
               
               ; Debug ""+*bar\area\len +" "+ *bar\thumb\end
               If *bar\area\len ; TODO - ?
                  *bar\area\pos  = ( *BB1\size + *bar\min[1] )
                  *bar\thumb\end = *bar\area\len - ( *BB1\size + *BB2\size )
                  
                  If ( *this\type = #__type_TabBar Or *this\type = #__type_ToolBar )
                     If *bar\max
                        *bar\thumb\len = *bar\thumb\end - ( *bar\max - *bar\area\len )
                        *bar\page\end  = *bar\max - ( *bar\thumb\end - *bar\thumb\len )
                        ;   *bar\page\end  = *bar\max - ( *bar\area\len - *bar\thumb\len )
                     EndIf
                  Else
                     If *bar\page\len
                        ; get thumb size
                        *bar\thumb\len = Round(( *bar\thumb\end / ( *bar\max - *bar\min )) * *bar\page\len, #PB_Round_Nearest )
                        If *bar\thumb\len > *bar\thumb\end
                           *bar\thumb\len = *bar\thumb\end
                        EndIf
                        
                        If *bar\thumb\len < *SB\size
                           If *bar\thumb\end > *SB\size + *bar\thumb\len
                              *bar\thumb\len = *SB\size
                              ; 									ElseIf *SB\size > 7
                              ; 										Debug "get thumb size - ????? " + *this\class + " " + *this\width + " " + *this\height + " " + *this\parent\width + " " + *this\parent\height
                              ; 										; *SB\size = 0
                              ; 										*bar\thumb\len = 0
                           EndIf
                        EndIf
                        
                        ; for the scroll-bar
                        If *bar\max > *bar\page\len
                           *bar\page\end = *bar\max - *bar\page\len
                        Else
                           *bar\page\end = *bar\page\len - *bar\max
                        EndIf
                        
                        If *bar\thumb\len = *bar\thumb\end
                           *bar\page\end = *bar\min
                        EndIf
                     Else
                        ; get page end
                        If *bar\max
                           *bar\thumb\len = *SB\size
                           If *bar\thumb\len > *bar\area\len
                              *bar\thumb\len = *bar\area\len
                           EndIf
                           ; *bar\thumb\len = Round(( *bar\thumb\end / ( *bar\max - *bar\min )), #PB_Round_Nearest )
                           *bar\page\end = *bar\max
                        Else
                           ; get thumb size
                           *bar\thumb\len = *SB\size
                           If *bar\thumb\len > *bar\area\len
                              *bar\thumb\len = *bar\area\len
                           EndIf
                           
                           ; one set end
                           If Not *bar\page\end And *bar\area\len
                              *bar\page\end = *bar\area\len - *bar\thumb\len
                              
                              If Not *bar\page\pos
                                 *bar\page\pos = *bar\page\end / 2
                              EndIf
                              
                              ; if splitter fixed
                              ; set splitter pos to center
                              If *bar\fixed
                                 If *bar\fixed = #PB_Splitter_FirstMinimumSize
                                    *bar\fixed[*bar\fixed] = *bar\page\pos
                                 Else
                                    *bar\fixed[*bar\fixed] = *bar\page\end - *bar\page\pos
                                 EndIf
                              EndIf
                           Else
                              If *bar\PageChange( ) Or *bar\fixed = 1
                                 *bar\page\end = *bar\area\len - *bar\thumb\len
                              EndIf
                           EndIf
                        EndIf
                        
                     EndIf
                  EndIf
                  
                  ; Debug ""+*bar\vertical +" "+ *bar\thumb\len +" "+ *SB\size
                  
                  If *bar\page\end
                     *bar\percent = ( *bar\thumb\end - *bar\thumb\len ) / ( *bar\page\end - *bar\min )
                  Else
                     *bar\percent = ( *bar\thumb\end - *bar\thumb\len ) / *bar\min
                  EndIf
                  
                  *bar\area\end = *bar\area\len - *bar\thumb\len - ( *BB2\size + *bar\min[2] )
                  
                  If *bar\area\end < *bar\area\pos
                     *bar\area\end = *bar\area\pos
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If mode < 2
            ;\\ get thumb pos
            If *bar\fixed And Not *bar\PageChange( )
               If *bar\fixed = #PB_Splitter_FirstMinimumSize
                  ThumbPos = *bar\fixed[*bar\fixed]
                  
                  If ThumbPos > *bar\area\end
                     If *bar\min[1] < *bar\area\end
                        ThumbPos = *bar\area\end
                     Else
                        If *bar\min[1] > ( *bar\area\end + *bar\min[2] )
                           ThumbPos = ( *bar\area\end + *bar\min[2] )
                        Else
                           ThumbPos = *bar\min[1]
                        EndIf
                     EndIf
                  EndIf
                  
               Else
                  ;ThumbPos = ( *bar\area\end + *bar\min[2] ) - *bar\fixed[*bar\fixed] ;[2]
                  ThumbPos = *bar\area\end - *bar\fixed[*bar\fixed]                    ;[1]
                  
                  If ThumbPos < *bar\min[1]
                     If *bar\min[1] > ( *bar\area\end + *bar\min[2] )
                        ThumbPos = ( *bar\area\end + *bar\min[2] )
                     Else
                        ThumbPos = *bar\min[1]
                     EndIf
                  EndIf
               EndIf
               
               If *bar\thumb\pos <> ThumbPos
                  *bar\ThumbChange( ) = *bar\thumb\pos - ThumbPos
                  *bar\thumb\pos      = ThumbPos
               EndIf
               
            Else
               If *this\type = #__type_TabBar Or
                  *this\type = #__type_ToolBar
                  
                  If *bar\page\pos < *bar\min
                     ; If *bar\max > *bar\page\len
                     *bar\page\pos = *bar\min
                     ; EndIf
                  EndIf
                  
                  ;\\ scroll to active tab
                  If *this\TabChange( )
                     If *this\FocusedTab( ) And *this\FocusedTab( )\enter = #False
                        If *this\FocusedTab( )\focus =- 1
                           *this\FocusedTab( )\focus = 1
                           ;Debug " tab max - " + *bar\max + " " + " " + *bar\page\pos + " " + *bar\page\end
                           
                           ThumbPos = *bar\max - *this\FocusedTab( )\x
                           ;ThumbPos - *bar\thumb\end                                    ; to left
                           ;ThumbPos - *this\FocusedTab( )\width                         ; to right
                           ThumbPos - ( *bar\thumb\end + *this\FocusedTab( )\width ) / 2 ; to center
                           
                           ScrollPos     = bar_page_pos_( *bar, ThumbPos )
                           ScrollPos     = bar_invert_page_pos_( *bar, ScrollPos )
                           *bar\page\pos = ScrollPos
                        EndIf
                     EndIf
                  EndIf
                  
               Else
                  ; fixed mac-OS splitterGadget
                  If *bar\page\pos < *bar\min
                     If *bar\max > *bar\page\len
                        If *bar\page\end
                           *bar\page\pos = *bar\page\end + *bar\page\pos
                        Else
                           Debug "error page\end - " + *bar\page\end
                        EndIf
                     EndIf
                  EndIf
                  
                  ; for the scrollarea children's
                  If *bar\page\end And *bar\page\pos > *bar\page\end
                     ; Debug " bar end change - " + *bar\page\pos +" "+ *bar\page\end
                     *bar\PageChange( ) = *bar\page\pos - *bar\page\end
                     *bar\page\pos      = *bar\page\end
                  EndIf
               EndIf
               
               If Not *bar\ThumbChange( )
                  ThumbPos = bar_thumb_pos_( *bar, *bar\page\pos )
                  ThumbPos = bar_invert_thumb_pos_( *bar, ThumbPos )
                  
                  If ThumbPos < *bar\area\pos : ThumbPos = *bar\area\pos : EndIf
                  If ThumbPos > *bar\area\end : ThumbPos = *bar\area\end : EndIf
                  
                  If *bar\thumb\pos <> ThumbPos
                     *bar\ThumbChange( ) = *bar\thumb\pos - ThumbPos
                     ; Debug ""+*bar\ThumbChange( ) +" "+ ThumbPos
                     *bar\thumb\pos = ThumbPos
                  EndIf
               EndIf
               
            EndIf
            
            ;\\ get fixed size
            If *bar\fixed And *bar\PageChange( )
               If *bar\fixed = #PB_Splitter_FirstMinimumSize
                  *bar\fixed[*bar\fixed] = *bar\thumb\pos
               Else
                  ; Debug "splitter - "+Str( *bar\area\len - *bar\thumb\len ) +" "+ Str( *bar\area\end + *bar\min[2] ) +" "+ *bar\area\end
                  ; *bar\fixed[*bar\fixed] = ( *bar\area\len - *bar\thumb\len ) - *bar\thumb\pos ;[2]
                  ; *bar\fixed[*bar\fixed] = ( *bar\area\end + *bar\min[2] ) - *bar\thumb\pos    ;[2]
                  *bar\fixed[*bar\fixed] = *bar\area\end - *bar\thumb\pos                        ;[1]
               EndIf
            EndIf
            
            ;
            ;\\ disable/enable
            ;
            ;\\ buttons(left&top)-tab(right&bottom)
            If bar_in_start_( *bar )
               If *BB1\disable = #False
                  *BB1\disable = #True
                  
                  ;\\
                  If *this\type = #__type_ScrollBar Or
                     *this\type = #__type_spin Or
                     *this\type = #__type_TabBar Or
                     *this\type = #__type_ToolBar
                     
                     *BB1\color\state = #__s_3
                  EndIf
                  
                  ;\\
                  If *this\type = #__type_TabBar Or
                     *this\type = #__type_ToolBar
                     *BB1\hide = 1
                  EndIf
                  
                  ;\\
                  If *this\type = #__type_splitter
                     *this\cursor = *this\cursor[3]
                  EndIf
               EndIf
            Else
               If *BB1\disable = #True
                  *BB1\disable = #False
                  
                  ;\\
                  If *this\type = #__type_ScrollBar Or
                     *this\type = #__type_spin Or
                     *this\type = #__type_TabBar Or
                     *this\type = #__type_ToolBar
                     
                     *BB1\color\state = #__s_0
                  EndIf
                  
                  ;\\
                  If *this\type = #__type_TabBar Or
                     *this\type = #__type_ToolBar
                     *BB1\hide = 0
                  EndIf
                  
                  ;\\
                  If *this\type = #__type_splitter
                     *this\cursor = *this\cursor[1]
                  EndIf
               EndIf
            EndIf
            
            ;\\ buttons(right&bottom)-tab(left&top)
            If bar_in_stop_( *bar )
               If *BB2\disable = #False
                  *BB2\disable = #True
                  
                  ;\\
                  If *this\type = #__type_ScrollBar Or
                     *this\type = #__type_spin Or
                     *this\type = #__type_TabBar Or
                     *this\type = #__type_ToolBar
                     
                     *BB2\color\state = #__s_3
                  EndIf
                  
                  ;\\
                  If *this\type = #__type_TabBar Or
                     *this\type = #__type_ToolBar
                     *BB2\hide = 1
                  EndIf
                  
                  ;\\
                  If *this\type = #__type_splitter
                     *this\cursor = *this\cursor[2]
                  EndIf
               EndIf
            Else
               If *BB2\disable = #True
                  *BB2\disable = #False
                  ;\\
                  If *this\type = #__type_ScrollBar Or
                     *this\type = #__type_spin Or
                     *this\type = #__type_TabBar Or
                     *this\type = #__type_ToolBar
                     
                     *BB2\color\state = #__s_0
                  EndIf
                  
                  ;\\
                  If *this\type = #__type_TabBar Or
                     *this\type = #__type_ToolBar
                     *BB2\hide = 0
                  EndIf
                  
                  ;\\
                  If *this\type = #__type_splitter
                     *this\cursor = *this\cursor[1]
                  EndIf
               EndIf
            EndIf
            
            ;\\ button-thumb
            If *this\type = #__type_ScrollBar
               If *bar\thumb\len
                  If *BB1\color\state = #__s_3 And
                     *BB2\color\state = #__s_3
                     
                     If *SB\disable = #False
                        *SB\disable = #True
                        
                        *SB\color\state = #__s_3
                     EndIf
                  Else
                     If *SB\disable = #True
                        *SB\disable = #False
                        
                        *SB\color\state = #__s_0
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               If *this\child
                  *this\hide = Bool(*bar\max <= *bar\page\len)
               EndIf
            EndIf
            
            ;
            ;\\ resize buttons coordinate
            ;
            ;\\
            If *this\type = #__type_TabBar Or
               *this\type = #__type_ToolBar
               
               ; inner coordinate
               If *bar\vertical
                  *this\inner_x( )      = *this\frame_x( )
                  *this\inner_width( )  = *this\frame_width( ) - 1
                  *this\inner_y( )      = *this\frame_y( ) + Bool( *BB2\hide = #False ) * ( *BB2\size + *this\fs )
                  *this\inner_height( ) = *this\frame_y( ) + *this\frame_height( ) - *this\inner_y( ) - Bool( *BB1\hide = #False ) * ( *BB1\size + *this\fs )
               Else
                  *this\inner_y( )      = *this\frame_y( )
                  *this\inner_height( ) = *this\frame_height( ) - 1
                  *this\inner_x( )      = *this\frame_x( ) + Bool( *BB2\hide = #False ) * ( *BB2\size + *this\fs )
                  *this\inner_width( )  = *this\frame_x( ) + *this\frame_width( ) - *this\inner_x( ) - Bool( *BB1\hide = #False ) * ( *BB1\size + *this\fs )
               EndIf
               
               If *BB2\size And Not *BB2\hide
                  If *bar\vertical
                     ; Top button coordinate on vertical scroll bar
                     ;  *BB2\x = *this\frame_x( ) + ( *this\frame_width( ) - *BB2\size )/2
                     *BB2\y = *this\inner_y( ) - *BB2\size
                  Else
                     ; Left button coordinate on horizontal scroll bar
                     *BB2\x = *this\inner_x( ) - *BB2\size
                     ;  *BB2\y = *this\frame_y( ) + ( *this\frame_height( ) - *BB2\size )/2
                  EndIf
                  If *BB2\width <> *BB2\size
                     *BB2\width = *BB2\size
                  EndIf
                  If *BB2\height <> *BB2\size
                     *BB2\height = *BB2\size
                  EndIf
               EndIf
               
               If *BB1\size And Not *BB1\hide
                  If *bar\vertical
                     ; Botom button coordinate on vertical scroll bar
                     ;  *BB1\x = *this\frame_x( ) + ( *this\frame_width( ) - *BB1\size )/2
                     *BB1\y = *this\inner_y( ) + *this\inner_height( )
                  Else
                     ; Right button coordinate on horizontal scroll bar
                     *BB1\x = *this\inner_x( ) + *this\inner_width( )
                     ;  *BB1\y = *this\frame_y( ) + ( *this\frame_height( ) - *BB1\size )/2
                  EndIf
                  If *BB1\width <> *BB1\size
                     *BB1\width = *BB1\size
                  EndIf
                  If *BB1\height <> *BB1\size
                     *BB1\height = *BB1\size
                  EndIf
               EndIf
               
               ;If *bar\thumb\len
               If *bar\vertical
                  *SB\x      = *this\inner_x( )
                  *SB\width  = *this\inner_width( )
                  *SB\height = *bar\max
                  *SB\y      = *this\frame_y( ) + ( *bar\thumb\pos - *bar\area\end )
               Else
                  *SB\y      = *this\inner_y( )
                  *SB\height = *this\inner_height( )
                  *SB\width  = *bar\max
                  *SB\x      = *this\frame_x( ) + ( *bar\thumb\pos - *bar\area\end )
               EndIf
               ;EndIf
            EndIf
            
            ;\\
            If *this\type = #__type_ScrollBar
               If *bar\thumb\len
                  If *bar\vertical
                     *SB\x      = *this\frame_x( ) + 1 ; white line size
                     *SB\width  = *this\frame_width( ) - 1 ; white line size
                     *SB\y      = *this\inner_y( ) + *bar\thumb\pos
                     *SB\height = *bar\thumb\len
                  Else
                     *SB\y      = *this\frame_y( ) + 1 ; white line size
                     *SB\height = *this\frame_height( ) - 1 ; white line size
                     *SB\x      = *this\inner_x( ) + *bar\thumb\pos
                     *SB\width  = *bar\thumb\len
                  EndIf
               EndIf
               
               If *BB1\size
                  If *bar\vertical
                     ; Top button coordinate on vertical scroll bar
                     *BB1\x      = *SB\x
                     *BB1\width  = *SB\width
                     *BB1\y      = *this\frame_y( )
                     *BB1\height = *BB1\size
                  Else
                     ; Left button coordinate on horizontal scroll bar
                     *BB1\y      = *SB\y
                     *BB1\height = *SB\height
                     *BB1\x      = *this\frame_x( )
                     *BB1\width  = *BB1\size
                  EndIf
               EndIf
               
               If *BB2\size
                  If *bar\vertical
                     ; Botom button coordinate on vertical scroll bar
                     *BB2\x      = *SB\x
                     *BB2\width  = *SB\width
                     *BB2\height = *BB2\size
                     *BB2\y      = *this\frame_y( ) + *this\frame_height( ) - *BB2\height
                  Else
                     ; Right button coordinate on horizontal scroll bar
                     *BB2\y      = *SB\y
                     *BB2\height = *SB\height
                     *BB2\width  = *BB2\size
                     *BB2\x      = *this\frame_x( ) + *this\frame_width( ) - *BB2\width
                  EndIf
               EndIf
               
               ; Thumb coordinate on scroll bar
               If Not *bar\thumb\len
                  ; auto resize buttons
                  If *bar\vertical
                     *BB2\height = *this\frame_height( ) / 2
                     *BB2\y      = *this\frame_y( ) + *BB2\height + Bool( *this\frame_height( ) % 2 )
                     
                     *BB1\y      = *this\y
                     *BB1\height = *this\height / 2 - Bool( Not *this\frame_height( ) % 2 )
                     
                  Else
                     *BB2\width = *this\frame_width( ) / 2
                     *BB2\x     = *this\frame_x( ) + *BB2\width + Bool( *this\frame_width( ) % 2 )
                     
                     *BB1\x     = *this\frame_x( )
                     *BB1\width = *this\frame_width( ) / 2 - Bool( Not *this\frame_width( ) % 2 )
                  EndIf
                  
                  If *bar\vertical
                     *SB\width  = 0
                     *SB\height = 0
                  Else
                     *SB\height = 0
                     *SB\width  = 0
                  EndIf
               EndIf
            EndIf
            
            ;\\ Ok
            If *this\type = #__type_Spin
               *SB\x      = *this\inner_x( )
               *SB\y      = *this\inner_y( )
               *SB\width  = *this\inner_width( )
               *SB\height = *this\inner_height( )
               
               If Not *this\flag & #__spin_Plus
                  Protected draw_tipe = 1
                  If *BB2\size
                     *BB2\x      = ( *this\frame_x( ) + *this\frame_width( ) ) - *SB\size + draw_tipe * 2
                     *BB2\y      = *this\frame_y( ) + draw_tipe * 2
                     *BB2\width  = *SB\size - draw_tipe * 4
                     *BB2\height = *BB2\size - draw_tipe * 3
                  EndIf
                  If *BB1\size
                     *BB1\x      = *BB2\x
                     *BB1\y      = ( *this\frame_y( ) + *this\frame_height( ) ) - *BB1\size + draw_tipe
                     *BB1\height = *BB1\size - draw_tipe * 3
                     *BB1\width  = *BB2\width
                  EndIf
               Else
                  ; spin buttons numeric plus -/+
                  If *bar\vertical
                     If *BB1\size
                        *BB1\x      = *this\frame_x( )
                        *BB1\y      = ( *this\frame_y( ) + *this\frame_height( ) ) - *BB1\size
                        *BB1\width  = *this\frame_width( )
                        *BB1\height = *BB1\size
                     EndIf
                     If *BB2\size
                        *BB2\x      = *this\frame_x( )
                        *BB2\y      = *this\frame_y( )
                        *BB2\width  = *this\frame_width( )
                        *BB2\height = *BB2\size
                     EndIf
                  Else
                     If *BB1\size
                        *BB1\x      = *this\frame_x( )
                        *BB1\y      = *this\frame_y( )
                        *BB1\width  = *BB1\size
                        *BB1\height = *this\frame_height( )
                     EndIf
                     If *BB2\size
                        *BB2\x      = ( *this\frame_x( ) + *this\frame_width( ) ) - *BB2\size
                        *BB2\y      = *this\frame_y( )
                        *BB2\width  = *BB2\size
                        *BB2\height = *this\frame_height( )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ Ok
            If *this\type = #__type_Splitter
               ;
               If *bar\vertical
                  *BB1\width  = *this\frame_width( )
                  *BB1\height = *bar\thumb\pos
                  
                  *BB1\x = *this\frame_x( )
                  *BB2\x = *this\frame_x( )
                  
                  ;             If Not (( #PB_Compiler_OS = #PB_OS_MacOS ) And *this\split_1_is( ) And Not *this\parent )
                  *BB1\y = *this\frame_y( )
                  *BB2\y = ( *bar\thumb\pos + *bar\thumb\len ) + *this\frame_y( )
                  ;             Else
                  ;               *BB1\y      = *this\frame_height( ) - *BB1\height
                  ;             EndIf
                  
                  *BB2\height = *this\frame_height( ) - ( *BB1\height + *bar\thumb\len )
                  *BB2\width  = *this\frame_width( )
                  
                  ; seperatior pos&size
                  If *bar\thumb\len
                     *SB\x      = *this\frame_x( )
                     *SB\width  = *this\frame_width( )
                     *SB\y      = *this\inner_y( ) + *bar\thumb\pos
                     *SB\height = *bar\thumb\len
                  EndIf
                  
               Else
                  *BB1\width  = *bar\thumb\pos
                  *BB1\height = *this\frame_height( )
                  
                  *BB1\y = *this\frame_y( )
                  *BB2\y = *this\frame_y( )
                  *BB1\x = *this\frame_x( )
                  *BB2\x = ( *bar\thumb\pos + *bar\thumb\len ) + *this\frame_x( )
                  
                  *BB2\width  = *this\frame_width( ) - ( *BB1\width + *bar\thumb\len )
                  *BB2\height = *this\frame_height( )
                  
                  ; seperatior pos&size
                  If *bar\thumb\len
                     *SB\y      = *this\frame_y( )
                     *SB\height = *this\frame_height( )
                     *SB\x      = *this\inner_x( ) + *bar\thumb\pos
                     *SB\width  = *bar\thumb\len
                  EndIf
               EndIf
               
               ; Splitter first-child auto resize
               If *this\split_1_is( )
                  ;             If is_root_container_( *this )
                  PB(ResizeGadget)( *this\split_1( ), *BB1\x, *BB1\y, *BB1\width, *BB1\height )
                  ;             Else
                  ;               PB(ResizeGadget)( *this\split_1( ),
                  ;                                 *BB1\x + GadgetX( *this\root\canvas\gadget ),
                  ;                                 *BB1\y + GadgetY( *this\root\canvas\gadget ),
                  ;                                 *BB1\width, *BB1\height )
                  ;             EndIf
                  
               Else
                  If *this\split_1( ) And *this\split_1( ) <> *this
                     If *this\split_1( )\x <> *BB1\x Or
                        *this\split_1( )\y <> *BB1\y Or
                        *this\split_1( )\width <> *BB1\width Or
                        *this\split_1( )\height <> *BB1\height
                        ; Debug "splitter_1_resize " + *this\split_1( )
                        
                        If *this\split_1( )\type = #__type_window
                           Resize( *this\split_1( ),
                                   *BB1\x - *this\frame_x( ),
                                   *BB1\y - *this\frame_y( ),
                                   *BB1\width - *this\split_1( )\fs * 2,
                                   *BB1\height - *this\split_1( )\fs * 2 - *this\split_1( )\fs[2])
                        Else
                           Resize( *this\split_1( ),
                                   *BB1\x - *this\frame_x( ),
                                   *BB1\y - *this\frame_y( ),
                                   *BB1\width, *BB1\height )
                        EndIf
                        
                     EndIf
                  EndIf
               EndIf
               
               ; Splitter second-child auto resize
               If *this\split_2_is( )
                  ;             If is_root_container_( *this )
                  PB(ResizeGadget)( *this\split_2( ), *BB2\x, *BB2\y, *BB2\width, *BB2\height )
                  ;             Else
                  ;               PB(ResizeGadget)( *this\split_2( ),
                  ;                                 *BB2\x + GadgetX( *this\root\canvas\gadget ),
                  ;                                 *BB2\y + GadgetY( *this\root\canvas\gadget ),
                  ;                                 *BB2\width, *BB2\height )
                  ;             EndIf
                  
               Else
                  If *this\split_2( ) And *this\split_2( ) <> *this
                     If *this\split_2( )\x <> *BB2\x Or
                        *this\split_2( )\y <> *BB2\y Or
                        *this\split_2( )\width <> *BB2\width Or
                        *this\split_2( )\height <> *BB2\height
                        ; Debug "splitter_2_resize " + *this\split_2( )
                        
                        If *this\split_2( )\type = #__type_window
                           Resize( *this\split_2( ),
                                   *BB2\x - *this\frame_x( ),
                                   *BB2\y - *this\frame_y( ),
                                   *BB2\width - *this\split_1( )\fs * 2,
                                   *BB2\height - *this\split_1( )\fs * 2 - *this\split_1( )\fs[2] )
                        Else
                           Resize( *this\split_2( ),
                                   *BB2\x - *this\frame_x( ),
                                   *BB2\y - *this\frame_y( ),
                                   *BB2\width, *BB2\height )
                        EndIf
                        
                     EndIf
                  EndIf
               EndIf
               
            EndIf
            
            ;\\
            If *this\type = #__type_TrackBar
               If *bar\direction > 0
                  If *bar\thumb\pos = *bar\area\end Or *this\flag & #PB_TrackBar_Ticks
                     *SB\arrow\direction = Bool( Not *bar\vertical ) + Bool( *bar\vertical = *bar\invert ) * 2
                  Else
                     *SB\arrow\direction = Bool( *bar\vertical ) + Bool( Not *bar\invert ) * 2
                  EndIf
               Else
                  If *bar\thumb\pos = *bar\area\pos Or *this\flag & #PB_TrackBar_Ticks
                     *SB\arrow\direction = Bool( Not *bar\vertical ) + Bool( *bar\vertical = *bar\invert ) * 2
                  Else
                     *SB\arrow\direction = Bool( *bar\vertical ) + Bool( *bar\invert ) * 2
                  EndIf
               EndIf
               
               
               ; track bar draw coordinate
               If *bar\vertical
                  If *bar\thumb\len
                     *SB\y      = *this\frame_y( ) + *bar\thumb\pos
                     *SB\height = *bar\thumb\len
                  EndIf
                  
                  *BB1\width = 4
                  *BB2\width = 4
                  *SB\width  = *SB\size + ( Bool( *SB\size < 10 ) * *SB\size )
                  
                  *BB1\y      = *this\frame_y( )
                  *BB1\height = *bar\thumb\pos
                  
                  *BB2\y      = *BB1\y + *BB1\height + *bar\thumb\len
                  *BB2\height = *this\frame_height( ) - *bar\thumb\pos - *bar\thumb\len
                  
                  If *bar\invert
                     *BB1\x = *this\frame_x( ) + 6
                     *BB2\x = *this\frame_x( ) + 6
                     *SB\x  = *BB1\x - *SB\width / 4 - 1 - Bool( *SB\size > 10 )
                  Else
                     *BB1\x = *this\frame_x( ) + *this\frame_width( ) - *BB1\width - 6
                     *BB2\x = *this\frame_x( ) + *this\frame_width( ) - *BB2\width - 6
                     *SB\x  = *BB1\x - *SB\width / 2 + Bool( *SB\size > 10 )
                  EndIf
               Else
                  If *bar\thumb\len
                     *SB\x     = *this\frame_x( ) + *bar\thumb\pos
                     *SB\width = *bar\thumb\len
                  EndIf
                  
                  *BB1\height = 4
                  *BB2\height = 4
                  *SB\height  = *SB\size + ( Bool( *SB\size < 10 ) * *SB\size )
                  
                  *BB1\x     = *this\frame_x( )
                  *BB1\width = *bar\thumb\pos
                  
                  *BB2\x     = *BB1\x + *BB1\width + *bar\thumb\len
                  *BB2\width = *this\frame_width( ) - *bar\thumb\pos - *bar\thumb\len
                  
                  If *bar\invert
                     *BB1\y = *this\frame_y( ) + *this\frame_height( ) - *BB1\height - 6
                     *BB2\y = *this\frame_y( ) + *this\frame_height( ) - *BB2\height - 6
                     *SB\y  = *BB1\y - *SB\height / 2 + Bool( *SB\size > 10 )
                  Else
                     *BB1\y = *this\frame_y( ) + 6
                     *BB2\y = *this\frame_y( ) + 6
                     *SB\y  = *BB1\y - *SB\height / 4 - 1 - Bool( *SB\size > 10 )
                  EndIf
               EndIf
            EndIf
            
            
            ;\\
            If *bar\PageChange( ) <> 0
               ;\\
               If *this\type = #__type_ScrollBar
                  ;- widget::bar_update_parent_area_( )
                  If *this\parent And *this\parent\scroll
                     If *bar\vertical
                        If *this\parent\scroll\v = *this
                           *this\parent\WidgetChange( ) = - 1
                           *this\parent\scroll_y( )     = - *bar\page\pos
                           
                           ;                   ; row pos update
                           ;                   If *this\parent\row
                           ;                     If *this\parent\text\editable
                           ;                       Text_Update( *this\parent )
                           ;                     Else
                           ;                       update_visible_items_( *this\parent )
                           ;                     EndIf
                           ;
                           ;                     *this\parent\WidgetChange( ) = 0
                           ;                   EndIf
                           
                           ;\\ Area children's x&y auto move
                           If *this\parent\container > 0
                              If *this\parent\root
                                 PushListPosition( __widgets( ))
                                 If StartEnumerate( *this\parent )
                                    If *this\parent = widget( )\parent And
                                       *this\parent\scroll\v <> widget( ) And
                                       *this\parent\scroll\h <> widget( ) And Not widget( )\align
                                       
                                       If widget( )\child
                                          Resize( widget( ), #PB_Ignore, ( widget( )\container_y( ) + *bar\PageChange( ) ), #PB_Ignore, #PB_Ignore )
                                       Else
                                          Resize( widget( ), #PB_Ignore, ( widget( )\container_y( ) + *bar\PageChange( ) ) - *this\parent\scroll_y( ), #PB_Ignore, #PB_Ignore )
                                       EndIf
                                    EndIf
                                    
                                    StopEnumerate( )
                                 EndIf
                                 PopListPosition( __widgets( ))
                              EndIf
                           EndIf
                        EndIf
                     Else
                        If *this\parent\scroll\h = *this
                           *this\parent\WidgetChange( ) = - 2
                           *this\parent\scroll_x( )     = - *bar\page\pos
                           
                           ;\\ Area children's x&y auto move
                           If *this\parent\container > 0
                              If *this\parent\root
                                 PushListPosition( __widgets( ))
                                 If StartEnumerate( *this\parent )
                                    If *this\parent = widget( )\parent And
                                       *this\parent\scroll\v <> widget( ) And
                                       *this\parent\scroll\h <> widget( ) And Not widget( )\align
                                       
                                       If widget( )\child
                                          Resize( widget( ), ( widget( )\container_x( ) + *bar\PageChange( ) ), #PB_Ignore, #PB_Ignore, #PB_Ignore )
                                       Else
                                          Resize( widget( ), ( widget( )\container_x( ) + *bar\PageChange( ) ) - *this\parent\scroll_x( ), #PB_Ignore, #PB_Ignore, #PB_Ignore )
                                       EndIf
                                    EndIf
                                    
                                    StopEnumerate( )
                                 EndIf
                                 PopListPosition( __widgets( ))
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               If *this\type = #__type_ProgressBar
                  *this\text\string = "%" + Str( *bar\page\pos )
               EndIf
               
               ;\\
               If *this\type = #__type_Spin
                  If *this\StringBox( )
                     Debug " update spin-change " + *bar\PageChange( ) + " " + Str( *bar\thumb\pos - *bar\area\pos )
                     Protected i
                     For i = 0 To 3
                        If *this\scroll\increment = ValF( StrF( *this\scroll\increment, i ) )
                           SetText( *this\StringBox( ), StrF( *bar\page\pos, i ) )
                           ;SetText( *this\StringBox( ), StrF( ( *bar\thumb\pos - *bar\area\pos ), i ) )
                           Break
                        EndIf
                     Next
                  EndIf
               EndIf
               
               *bar\PageChange( ) = 0
            EndIf
            
            ;
            If *bar\ThumbChange( ) <> 0
               *bar\ThumbChange( ) = 0
               *this\root\repaint  = #True
            EndIf
            
         EndIf
         
         ProcedureReturn is_resize_( *this )
      EndProcedure
      
      Procedure.b bar_Change( *this._s_WIDGET, ScrollPos.l )
         Protected *bar._s_BAR = *this\bar
         
         If *bar\area\len
            If Not *bar\max
               *bar\page\end = *bar\area\len - *bar\thumb\len
            EndIf
            
            ;????
            If *bar\thumb\len = *bar\thumb\end And *bar\thumb\end
               ScrollPos = *bar\min
            EndIf
            
            If ScrollPos > *bar\page\end - *bar\min[2]
               ScrollPos = *bar\page\end - *bar\min[2]
            EndIf
         EndIf
         
         If Not *bar\button\disable ; *bar\thumb\len <> *bar\thumb\end   ; TODO - good in editor scrollbars and other test
                                    ; If ScrollPos < *bar\min : ScrollPos = *bar\min : EndIf
            If ScrollPos < *bar\min
               If *bar\max > *bar\page\len
                  ScrollPos = *bar\min
               Else
                  ; ScrollPos = *bar\page\end + ScrollPos
                  ; Debug "" + #PB_Compiler_Procedure + " - " + " child - " + *this\child + " " + *this\class + " " + *bar\page\end + " " + ScrollPos
               EndIf
            EndIf
            If ScrollPos > *bar\page\end
               If *bar\page\end
                  ScrollPos = *bar\page\end
               Else
                  If *bar\area\end ; TODO - ? example-splitter(3)
                     ScrollPos = bar_page_pos_( *bar, *bar\area\end ) - ScrollPos
                  EndIf
               EndIf
            EndIf
            
            If *bar\page\pos <> ScrollPos
               If *bar\page\pos > ScrollPos
                  *bar\direction =  - 1
               Else
                  *bar\direction = 1
               EndIf
               
               *bar\PageChange( ) = *bar\page\pos - ScrollPos
               *bar\page\pos      = ScrollPos
               
               ; Debug ""+ScrollPos +" "+ *bar\page\end +" "+ *bar\thumb\len +" "+ *bar\thumb\end +" "+ *bar\page\pos +" "+ Str(*bar\page\end-*bar\min[2])
               
               ; example-scroll(area) fixed
               If *this\child
                  If *this\type = #__type_ScrollBar
                     DoEvents( *this\parent, #__event_ScrollChange, *this, *bar\PageChange( ) )
                  EndIf
               Else
                  DoEvents( *this, #__event_Change, EnteredButton( ), *bar\PageChange( ) )
               EndIf
               
               ProcedureReturn #True
            EndIf
         EndIf
      EndProcedure
      
      Procedure.b bar_SetState( *this._s_WIDGET, state.l )
         If bar_Change( *this, state )
            ProcedureReturn bar_Update( *this )
         EndIf
      EndProcedure
      
      Procedure.b bar_SetThumbPos( *this._s_WIDGET, ThumbPos.i )
         Protected *bar._s_BAR = *this\bar
         Protected ScrollPos.f
         
         If ThumbPos < *bar\area\pos : ThumbPos = *bar\area\pos : EndIf
         If ThumbPos > *bar\area\end : ThumbPos = *bar\area\end : EndIf
         
         
         ;          ;       If *bar\thumb\end <> ThumbPos : *bar\thumb\end = ThumbPos
         ;          If *bar\thumb\pos <> ThumbPos
         ;             ; Debug ""+ThumbPos +" "+ *bar\thumb\pos
         ;             ProcedureReturn Bar_SetState( *this, bar_invert_page_pos_( *bar, bar_page_pos_( *bar, ThumbPos ) ) )
         ;          EndIf
         ;
         
         If *bar\thumb\pos <> ThumbPos
            ScrollPos = bar_page_pos_( *bar, ThumbPos )
            ScrollPos = bar_invert_page_pos_( *bar, ScrollPos )
            
            ;         *bar\page\pos = ScrollPos
            ;         ;
            ;         If *this\scroll\increment > 1
            ;           ScrollPos - Mod( ScrollPos, *this\scroll\increment )
            ;         EndIf
            
            ; thumb move tick steps
            If ( *this\type = #__type_trackbar And *this\flag & #PB_TrackBar_Ticks )
               ProcedureReturn bar_SetState( *this, ScrollPos )
            Else
               If *bar\ThumbChange( ) <> *bar\thumb\pos - ThumbPos
                  *bar\ThumbChange( ) = *bar\thumb\pos - ThumbPos
                  *bar\thumb\pos      = ThumbPos
                  bar_Change( *this, ScrollPos )
                  ProcedureReturn bar_Update( *this, 0 )
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      Procedure.l bar_SetAttribute( *this._s_WIDGET, Attribute.l, *value )
         Protected result.l
         Protected value = *value
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         *SB  = *bar\button
         *BB1 = *bar\button[1]
         *BB2 = *bar\button[2]
         
         With *this
            ;\\
            If Attribute = #__bar_invert
               If *bar\invert <> Bool( value )
                  *bar\invert = Bool( value )
                  result      = 1
               EndIf
            EndIf
            
            ;\\
            If Attribute = #__bar_ScrollStep
               If *this\scroll\increment <> value
                  *this\scroll\increment = value
                  result                 = 1
               EndIf
            EndIf
            
            ;\\
            If *this\type = #__type_Splitter
               Select Attribute
                  Case #PB_Splitter_FirstMinimumSize
                     *bar\min[1] = *value
                     ;*BB1\size = *value
                     result = Bool( *bar\max )
                     
                  Case #PB_Splitter_SecondMinimumSize
                     *bar\min[2] = *value
                     ;*BB2\size = *value
                     result = Bool( *bar\max )
                     
                  Case #PB_Splitter_FirstGadget
                     *this\split_1( )    = *value
                     *this\split_1_is( ) = Bool( PB(IsGadget)( *value ))
                     result              = - 1
                     
                  Case #PB_Splitter_SecondGadget
                     *this\split_2( )    = *value
                     *this\split_2_is( ) = Bool( PB(IsGadget)( *value ))
                     result              = - 1
                     
               EndSelect
            EndIf
            
            ;\\
            If *this\type <> #__type_Splitter
               Select Attribute
                  Case #__bar_minimum
                     If *bar\min <> *value ;And Not *value < 0
                        *bar\AreaChange( ) = *bar\min - value
                        If *bar\page\pos < *value
                           *bar\page\pos = *value
                        EndIf
                        *bar\min = *value
                        ; Debug  " min " + *bar\min + " max " + *bar\max
                        result = #True
                     EndIf
                     
                  Case #__bar_maximum
                     If *bar\max <> *value And Not ( *value < 0 And Not #__bar_minus)
                        *bar\AreaChange( ) = *bar\max - value
                        
                        If *bar\min > *value And Not #__bar_minus
                           *bar\max = *bar\min + 1
                        Else
                           *bar\max = *value
                        EndIf
                        ;
                        If Not *bar\max And Not #__bar_minus
                           *bar\page\pos = *bar\max
                        EndIf
                        ; Debug  "   min " + *bar\min + " max " + *bar\max
                        
                        ;\\
                        If *bar And *this\child And *this\parent
                           If *bar\vertical
                              *this\parent\scroll_height( ) = *bar\max
                           Else
                              *this\parent\scroll_width( ) = *bar\max
                           EndIf
                        EndIf
                        
                        ;\bar\PageChange( ) = #True
                        result = #True
                     EndIf
                     
                  Case #__bar_pagelength
                     If *bar\page\len <> *value And Not ( *value < 0 And Not #__bar_minus )
                        *bar\AreaChange( ) = *bar\page\len - value
                        *bar\page\len      = *value
                        
                        If Not *bar\max And Not #__bar_minus
                           If *bar\min > *value
                              *bar\max = *bar\min + 1
                           Else
                              *bar\max = *value
                           EndIf
                        EndIf
                        
                        result = #True
                     EndIf
                     
                  Case #__bar_buttonsize
                     If *SB\size <> *value
                        *SB\size = *value
                        
                        If *this\type = #__type_spin
                           If *this\flag & #__spin_plus
                              ; set real spin-buttons width
                              *BB1\size = *value
                              *BB2\size = *value
                              
                              If *bar\vertical
                                 *this\fs[2] = *BB2\size - 1
                                 *this\fs[4] = *BB1\size - 1
                              Else
                                 *this\fs[1] = *BB1\size - 1
                                 *this\fs[3] = *BB2\size - 1
                              EndIf
                           Else
                              If *bar\vertical
                                 If *bar\invert
                                    *this\fs[1] = *value - 1
                                 Else
                                    *this\fs[3] = *value - 1
                                 EndIf
                              Else
                                 If *bar\invert
                                    *this\fs[2] = *value - 1
                                 Else
                                    *this\fs[4] = *value - 1
                                 EndIf
                              EndIf
                           EndIf
                           
                           
                        Else
                           ; to reset the button size to default
                           If *this\type = #__type_ScrollBar Or
                              *this\type = #__type_TabBar Or
                              *this\type = #__type_ToolBar
                              
                              If *value
                                 *BB1\size = - 1
                                 *BB2\size = - 1
                                 *BB1\hide = 0
                                 *BB2\hide = 0
                              Else
                                 *BB1\size = 0
                                 *BB2\size = 0
                                 *BB1\hide = 1
                                 *BB2\hide = 1
                              EndIf
                           EndIf
                           
                           ; if it is a composite element of the parent
                           If *this\child > 0 And *this\parent And *value
                              *value + 1
                              If *bar\vertical
                                 Resize(*this, *this\parent\container_width( ) - *value, #PB_Ignore, *value, #PB_Ignore)
                              Else
                                 Resize(*this, #PB_Ignore, *this\parent\container_width( ) - *value, #PB_Ignore, *value)
                              EndIf
                           EndIf
                           
                           bar_Update( *this )
                           PostRepaint( *this\root )
                           ProcedureReturn #True
                        EndIf
                     EndIf
                     
               EndSelect
            EndIf
            
            
            
            If result ; And *this\width And *this\height ; есть проблемы с imagegadget и scrollareagadget
                      ;\bar\PageChange( ) = #True
                      ;Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               
               ;If *this\root ;And *this\root\canvas\postevent = #False
               If ( *bar\vertical And *this\height ) Or ( *bar\vertical = 0 And *this\width )
                  ; Debug "bar_SetAttribute - "+*this\height +" "+ *this\width +" "+ *bar\vertical
                  bar_Update( *this ) ; ??????????????
               EndIf
               ;EndIf
               
               ; after update and resize bar
               If *this\type = #__type_ScrollBar And
                  Attribute = #__bar_buttonsize
                  *BB1\size = - 1
                  *BB2\size = - 1
               EndIf
               
               If *this\type = #__type_Splitter
                  If result = - 1
                     SetParent(*value, *this)
                  EndIf
               EndIf
            EndIf
         EndWith
         
         ProcedureReturn result
      EndProcedure
      
      Procedure bar_Events( *this._s_WIDGET, eventtype.l, *button._s_buttons, *data )
         Protected Repaint
         Protected *bar._s_BAR = *this\bar
         Protected._s_BUTTONS *BB1, *BB2, *SB
         If *bar
            *SB  = *bar\button
            *BB1 = *bar\button[1]
            *BB2 = *bar\button[2]
         EndIf
         
         ;\\
         If eventtype = #__event_Down
            If mouse( )\buttons & #PB_Canvas_LeftButton
               
               ;\\
               If EnteredButton( ) And
                  EnteredButton( )\disable = #False And
                  EnteredButton( )\color\state <> #__s_3 And ; change the color state of non-disabled buttons
                  EnteredButton( )\press = #False
                  
                  PressedButton( )       = EnteredButton( )
                  PressedButton( )\press = #True
                  
                  If Not ( *this\type = #__type_TrackBar Or
                           ( *this\type = #__type_Splitter And PressedButton( ) <> *SB ))
                     PressedButton( )\color\state = #__s_2
                  EndIf
                  PressedButton( )\color\back[PressedButton( )\color\state] = $FF2C70F5
                  
                  ;
                  If ( *BB2\press And *bar\invert ) Or
                     ( *BB1\press And Not *bar\invert )
                     
                     If *this\type = #__type_spin
                        bar_SetState( *this, *bar\page\pos - *this\scroll\increment )
                     Else
                        bar_SetThumbPos( *this, *bar\thumb\pos - *this\scroll\increment)
                     EndIf
                  ElseIf ( *BB1\press And *bar\invert ) Or
                         ( *BB2\press And Not *bar\invert )
                     
                     If *this\type = #__type_spin
                        bar_SetState( *this, *bar\page\pos + *this\scroll\increment )
                     Else
                        bar_SetThumbPos( *this, *bar\thumb\pos + *this\scroll\increment)
                     EndIf
                  EndIf
                  
                  If *this\root\repaint
                     SetWindowTitle( EventWindow( ), Str( *bar\page\pos ) + " " + Str( *bar\thumb\pos - *bar\area\pos ))
                  EndIf
                  
               EndIf
               
               ;\\
               If *this\tab
                  *this\PressedTab( ) = *this\EnteredTab( )
                  
                  ;                                              ;
                  If Not ( EnteredButton( ) And EnteredButton( )\press And EnteredButton( ) <> *SB )
                     If *this\PressedTab( ) And
                        *this\PressedTab( )\press = #False
                        *this\PressedTab( )\press = #True
                        
                        *this\PressedTab( )\color\state = #__s_2
                        *this\root\repaint              = #True
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_Up
            If mouse( )\buttons & #PB_Canvas_LeftButton
               ;\\
               If PressedButton( ) And
                  PressedButton( )\press = #True
                  PressedButton( )\press = #False
                  
                  If PressedButton( )\disable = #False And
                     PressedButton( )\color\state <> #__s_3
                     
                     ; change color state
                     If PressedButton( )\color\state = #__s_2 And
                        Not ( *this\type = #__type_TrackBar Or
                              ( *this\type = #__type_Splitter And PressedButton( ) <> *SB ))
                        
                        If PressedButton( )\enter
                           PressedButton( )\color\state = #__s_1
                        Else
                           PressedButton( )\color\state = #__s_0
                        EndIf
                     EndIf
                     
                     *this\root\repaint = #True
                  EndIf
               EndIf
               
               ;\\
               If *this\PressedTab( )
                  If *this\PressedTab( )\press = #True
                     *this\PressedTab( )\press = #False
                     
                     If *this\PressedTab( )\enter
                        *this\PressedTab( )\color\state = #__s_1
                     Else
                        *this\PressedTab( )\color\state = #__s_0
                     EndIf
                     
                     ; select new tab item if non-drag the item
                     If Not *this\dragstart And
                        Not *this\PressedTab( )\focus
                        
                        If bar_tab_SetState( *this, *this\PressedTab( )\index )
                           *this\root\repaint = #True
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_MouseMove
            If *this\press And *SB\press
               If *bar\vertical
                  bar_SetThumbPos( *this, ( mouse( )\y - mouse( )\delta\y ))
               Else
                  bar_SetThumbPos( *this, ( mouse( )\x - mouse( )\delta\x ))
               EndIf
               
               ;If Repaint
               SetWindowTitle( EventWindow( ), Str( *bar\page\pos ) + " " + Str( *bar\thumb\pos - *bar\area\pos ))
               ;EndIf
            EndIf
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      ;}
      
      
      ;-
      ;-  EDITOR
      Macro edit_row_edit_text_x_( _this_, _mode_ )
         ( row_x_( _this_, _this_\__rows( ) ) + _this_\__rows( )\text\edit#_mode_\x )
      EndMacro
      
      Macro edit_row_edit_text_y_( _this_, _mode_ ) ; пока не используется
         ( row_y_( _this_, _this_\__rows( ) ) + _this_\__rows( )\text\edit#_mode_\y )
      EndMacro
      
      Macro edit_row_select_( _this_, _address_, _index_ )
         _address_\focus = 0
         ;_address_\enter = 0
         _address_\color\state = 0
         
         _address_ = SelectElement( _this_\__rows( ), _index_ )
         
         If _address_
            _address_\color\state = 1
            ;_address_\enter = 1
            _address_\focus = #True
         EndIf
      EndMacro
      
      Macro edit_text_scroll_x_( _this_ )
         If *this\scroll\h And Not *this\scroll\h\hide And _this_\text\caret\x
            If bar_scroll_pos_( *this\scroll\h, (_this_\text\caret\x - _this_\text\padding\x) - _this_\inner_x( ), ( _this_\text\padding\x * 2 + _this_\MarginLine( )\width )) ; ok
               *this\WidgetChange( ) = - 1
            EndIf
         EndIf
      EndMacro
      
      Macro edit_text_scroll_y_( _this_ )
         If *this\scroll\v And Not *this\scroll\v\hide
            If bar_scroll_pos_( *this\scroll\v, (_this_\text\caret\y - _this_\text\padding\y) - _this_\inner_y( ), ( _this_\text\padding\y * 2 + _this_\text\caret\height )) ; ok
               *this\WidgetChange( ) = - 1
            EndIf
         EndIf
      EndMacro
      
      Macro edit_caret_0( ): text\caret\pos[0]: EndMacro
      Macro edit_caret_1( ): text\caret\pos[1]: EndMacro
      Macro edit_caret_2( ): text\caret\pos[2]: EndMacro
      
      ;\\ Macro edit_row_caret_1_( _this_ ): _this_\text\caret\pos[3]: EndMacro
      
      Procedure.l edit_caret_( *this._s_WIDGET )
         ; Get caret position
         Protected i.l, mouse_x.l, caret_x.l, caret.l = - 1
         Protected Distance.f, MinDistance.f = Infinity( )
         
         If *this\EnteredLine( )
            ;\\
            ReDrawing( *this, *this\EnteredLine( ) )
            
            mouse_x = mouse( )\x - row_x_( *this, *this\EnteredLine( ) ) - *this\EnteredLine( )\text\x - *this\scroll_x( ) - Bool( #PB_Compiler_OS = #PB_OS_MacOS ) ; надо узнать, думаю это связано с DrawRotateText( )
            
            For i = 0 To *this\EnteredLine( )\text\len
               caret_x = TextWidth( Left( *this\EnteredLine( )\text\string, i ))
               
               Distance = ( mouse_x - caret_x ) * ( mouse_x - caret_x )
               
               If MinDistance > Distance
                  MinDistance = Distance
                  ; *this\text\caret\x = *this\text\padding\x + caret_x
                  caret = i
               Else
                  Break
               EndIf
            Next
         EndIf
         
         ProcedureReturn caret
      EndProcedure
      
      Procedure edit_sel_row_text_( *this._s_WIDGET, *rowLine._s_ROWS, mode.l = #__sel_to_line )
         Protected CaretLeftPos, CaretRightPos, CaretLastLen = 0
         Debug "edit_sel_row_text - " + *rowLine\index + " " + mode
         
         ;\\
         ReDrawing( *this, *rowLine )
         
         *this\root\repaint = #True
         ;\\ *rowLine\color\state = #__s_2
         *rowLine\focus = #True
         
         If mode = #__sel_to_remove
            
            CaretLeftPos         = 0
            CaretRightPos        = 0
            *rowLine\color\state = #__s_0
            *rowLine\focus       = #False
            
         ElseIf mode = #__sel_to_set
            
            CaretLeftPos  = 0
            CaretRightPos = *rowLine\text\len
            CaretLastLen  = *this\mode\fullselection
            
         ElseIf mode = #__sel_to_first
            
            CaretLeftPos = 0
            If *rowLine = *this\PressedLine( )
               CaretRightPos = *this\edit_caret_2( ) - *rowLine\text\pos
            Else
               CaretRightPos = *rowLine\text\len
               CaretLastLen  = *this\mode\fullselection
            EndIf
            ;\\ *this\edit_caret_1( ) = *rowLine\text\pos
            
         ElseIf mode = #__sel_to_last
            
            If *rowLine = *this\PressedLine( )
               CaretLeftPos = *this\edit_caret_2( ) - *rowLine\text\pos
            Else
               CaretLeftPos = 0
            EndIf
            CaretRightPos = *rowLine\text\len
            
            If *rowLine\index <> *this\count\items - 1
               CaretLastLen = *this\mode\fullselection
            EndIf
            ;\\ *this\edit_caret_1( ) = *rowLine\text\pos + *rowLine\text\len
            
         ElseIf mode = #__sel_to_line
            
            If *this\edit_caret_1( ) >= *this\edit_caret_2( )
               If *rowLine\text\pos <= *this\edit_caret_2( )
                  CaretLeftPos = *this\edit_caret_2( ) - *rowLine\text\pos
               EndIf
               CaretRightPos = *this\edit_caret_1( ) - *rowLine\text\pos
            Else
               CaretLeftPos = *this\edit_caret_1( ) - *rowLine\text\pos
               If *this\edit_caret_2( ) > ( *rowLine\text\pos + *rowLine\text\len )
                  If *rowLine <> *this\PressedLine( )
                     CaretLastLen = *this\mode\fullselection
                  EndIf
                  CaretRightPos = *rowLine\text\len
               Else
                  CaretRightPos = *this\edit_caret_2( ) - *rowLine\text\pos
               EndIf
            EndIf
            
         EndIf
         
         ; Debug "caret change " + CaretLeftPos +" "+ CaretRightPos
         
         *rowLine\text\edit[1]\pos = 0
         *rowLine\text\edit[2]\pos = CaretLeftPos  ; - *rowLine\text\pos
         *rowLine\text\edit[3]\pos = CaretRightPos ; - *rowLine\text\pos
         
         *rowLine\text\edit[1]\len = *rowLine\text\edit[2]\pos
         *rowLine\text\edit[2]\len = *rowLine\text\edit[3]\pos - *rowLine\text\edit[2]\pos
         *rowLine\text\edit[3]\len = *rowLine\text\len - *rowLine\text\edit[3]\pos
         
         ; item left text
         If *rowLine\text\edit[1]\len > 0
            *rowLine\text\edit[1]\string = Left( *rowLine\text\string, *rowLine\text\edit[1]\len )
            *rowLine\text\edit[1]\width  = TextWidth( *rowLine\text\edit[1]\string )
            *rowLine\text\edit[1]\y      = *rowLine\text\y
            *rowLine\text\edit[1]\height = *rowLine\text\height
         Else
            *rowLine\text\edit[1]\string = ""
            *rowLine\text\edit[1]\width  = 0
         EndIf
         ; item right text
         If *rowLine\text\edit[3]\len > 0
            *rowLine\text\edit[3]\y      = *rowLine\text\y
            *rowLine\text\edit[3]\height = *rowLine\text\height
            If *rowLine\text\edit[3]\len = *rowLine\text\len
               *rowLine\text\edit[3]\string = *rowLine\text\string
               *rowLine\text\edit[3]\width  = *rowLine\text\width
            Else
               *rowLine\text\edit[3]\string = Right( *rowLine\text\string, *rowLine\text\edit[3]\len )
               *rowLine\text\edit[3]\width  = TextWidth( *rowLine\text\edit[3]\string )
            EndIf
         Else
            *rowLine\text\edit[3]\string = ""
            *rowLine\text\edit[3]\width  = 0
         EndIf
         ; item edit text
         If *rowLine\text\edit[2]\len > 0
            If *rowLine\text\edit[2]\len = *rowLine\text\len
               *rowLine\text\edit[2]\string = *rowLine\text\string
               *rowLine\text\edit[2]\width  = *rowLine\text\width
            Else
               *rowLine\text\edit[2]\string = Mid( *rowLine\text\string, 1 + *rowLine\text\edit[2]\pos, *rowLine\text\edit[2]\len )
               *rowLine\text\edit[2]\width  = *rowLine\text\width - ( *rowLine\text\edit[1]\width + *rowLine\text\edit[3]\width )
            EndIf
            *rowLine\text\edit[2]\y      = *rowLine\text\y
            *rowLine\text\edit[2]\height = *rowLine\text\height
         Else
            *rowLine\text\edit[2]\string = ""
            *rowLine\text\edit[2]\width  = 0
         EndIf
         
         ;
         If CaretLastLen
            *rowLine\text\edit[2]\width + CaretLastLen
         EndIf
         
         ; Чтобы знать что строки выделени
         If *rowLine\text\edit[2]\width
            *this\text\edit[2]\width = *rowLine\text\edit[2]\width
         EndIf
         
         ; set text position
         *rowLine\text\edit[1]\x = *rowLine\text\x
         *rowLine\text\edit[2]\x = *rowLine\text\x + *rowLine\text\edit[1]\width
         *rowLine\text\edit[3]\x = *rowLine\text\x + *rowLine\text\edit[1]\width + *rowLine\text\edit[2]\width
         
         ProcedureReturn #True
      EndProcedure
      
      Procedure edit_sel_text_( *this._s_WIDGET, *line._s_ROWS )
         ; edit sel all items
         If *line = #PB_All
            *line                 = *this\FocusedLine( )
            *this\PressedLine( )  = #Null
            *this\edit_caret_0( ) = 0
            *this\edit_caret_1( ) = 0
            *this\edit_caret_2( ) = 0
            PushListPosition( *this\__rows( ) )
            ForEach *this\__rows( )
               edit_sel_row_text_( *this, *this\__rows( ), #__sel_to_last )
            Next
            ;*this\PressedLine( ) = *this\__rows( )
            PopListPosition( *this\__rows( ) )
            *this\edit_caret_1( ) = 0
            *this\edit_caret_2( ) = *this\text\len
            *this\PressedLine( )  = *this\FocusedLine( )
         EndIf
         
         If *this\edit_caret_1( ) > *this\edit_caret_2( )
            *this\text\edit[2]\pos = *this\edit_caret_2( )
            *this\text\edit[3]\pos = *this\edit_caret_1( )
            *this\text\caret\x     = *line\x + *line\text\edit[3]\x - 1
         Else
            *this\text\edit[2]\pos = *this\edit_caret_1( )
            *this\text\edit[3]\pos = *this\edit_caret_2( )
            *this\text\caret\x     = *line\x + *line\text\edit[2]\x - 1
         EndIf
         
         *this\text\caret\height = *line\text\height
         *this\text\caret\y      = *line\y
         
         ;       ;*this\text\caret\x = 13
         ;       ;Debug ""+*this\text\padding\x +" "+ *this\text\caret\x +" "+ *this\edit_caret_1( ) +" "+ *line\text\edit[1]\string
         ;       ;Debug TextWidth("W")
         
         ;
         *this\text\edit[1]\len = *this\text\edit[2]\pos
         *this\text\edit[3]\len = ( *this\text\len - *this\text\edit[3]\pos )
         
         If *this\text\edit[2]\len <> ( *this\text\edit[3]\pos - *this\text\edit[2]\pos )
            *this\text\edit[2]\len = ( *this\text\edit[3]\pos - *this\text\edit[2]\pos )
         EndIf
         ;;Debug ""+*this\edit_caret_1( ) +" "+ *this\text\edit[3]\pos;*this\text\edit[2]\len;*this\text\edit[2]\string
         
         ; left text
         If *this\text\edit[1]\len > 0
            *this\text\edit[1]\string = Left( *this\text\string.s, *this\text\edit[1]\len )
         Else
            *this\text\edit[1]\string = ""
         EndIf
         ; right text
         If *this\text\edit[3]\len > 0
            *this\text\edit[3]\string = Right( *this\text\string.s, *this\text\edit[3]\len )
         Else
            *this\text\edit[3]\string = ""
         EndIf
         ; edit text
         If *this\text\edit[2]\len > 0
            *this\text\edit[2]\string = Mid( *this\text\string.s, 1 + *this\text\edit[2]\pos, *this\text\edit[2]\len )
         Else
            *this\text\edit[2]\string = ""
         EndIf
         
         ProcedureReturn 1
      EndProcedure
      
      Macro edit_sel_reset_( _this_ )
         If _this_\text\edit[2]\width <> 0
            ; вызывать если только строки выделени
            If _this_\text\multiLine
               PushListPosition( _this_\__rows( ) )
               ForEach _this_\__rows( )
                  If _this_\__rows( )\text\edit[2]\width <> 0
                     ; Debug " remove - " +" "+ _this_\__rows( )\text\string
                     edit_sel_row_text_( _this_, _this_\__rows( ), #__sel_to_remove )
                  EndIf
               Next
               PopListPosition( _this_\__rows( ) )
            EndIf
         EndIf
      EndMacro
      
      Macro edit_sel_is_line_pos_( _this_ )
         Bool( _this_\__rows( )\text\edit[2]\width And
               mouse( )\x > _this_\__rows( )\text\edit[2]\x - _this_\scroll_x( ) And
               mouse( )\y > _this_\__rows( )\text\y - _this_\scroll_y( ) And
               mouse( )\y < ( _this_\__rows( )\text\y + _this_\__rows( )\text\height ) - _this_\scroll_y( ) And
               mouse( )\x < ( _this_\__rows( )\text\edit[2]\x + _this_\__rows( )\text\edit[2]\width ) - _this_\scroll_x( ) )
      EndMacro
      
      Macro edit_sel_end_( _char_ )
         Bool(( _char_ >= ' ' And _char_ <= '/' ) Or               ; ! " # $ % & ' ( ) * + , - .
              ( _char_ >= ':' And _char_ <= '@' ) Or               ;   ; < = > ?
              ( _char_ >= '[' And _char_ <= '^' ) Or               ; \ ] ^ _ `
              ( _char_ >= '{' And _char_ <= '~' ) Or _char_ = '`') ; | }
         
      EndMacro
      
      Procedure.i edit_sel_start_word( *this._s_WIDGET, caret, *rowLine._s_ROWS )
         Protected result.i, i.i, char.i
         
         ; | <<<<<< left edge of the word
         char = Asc( Mid( *rowLine\text\string, caret + 1, 1 ))
         If edit_sel_end_( char )
            result = *rowLine\text\pos + caret
         Else
            result = *rowLine\text\pos
            For i = caret To 1 Step - 1
               char = Asc( Mid( *rowLine\text\string, i, 1 ))
               If edit_sel_end_( char )
                  result = *rowLine\text\pos + i
                  Break
               EndIf
            Next
         EndIf
         ;Debug result - *rowLine\text\pos
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i edit_sel_stop_word( *this._s_WIDGET, caret, *rowLine._s_ROWS )
         Protected result.i, i.i, char.i
         
         ; >>>>>> | right edge of the word
         char = Asc( Mid( *rowLine\text\string, caret, 1 ))
         If edit_sel_end_( char )
            result.i = *rowLine\text\pos + caret
         Else
            result.i = *rowLine\text\pos + *rowLine\text\len
            For i = caret + 1 To *rowLine\text\len
               char = Asc( Mid( *rowLine\text\string, i, 1 ))
               If edit_sel_end_( char )
                  result = *rowLine\text\pos + ( i - 1 )
                  Break
               EndIf
            Next
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure edit_row_align( *this._s_WIDGET )
         ; Debug ""+*this\text\align\left +" "+ *this\text\align\top +" "+ *this\text\align\right +" "+ *this\text\align\bottom
         ; set align position
         ForEach *this\__rows( )
            If *this\text\vertical
            Else ; horizontal
               If *this\text\rotate = 180
                  *this\__rows( )\y - ( *this\inner_height( ) - *this\scroll_height( ) )
               EndIf
               
               ; changed
               set_align_y_( *this\text, *this\__rows( )\text, - 1, *this\text\rotate )
               set_align_x_( *this\text, *this\__rows( )\text, *this\scroll_width( ), *this\text\rotate )
               
               ;           If *this\type = #__type_String
               ;             Debug *this\__rows( )\text\string
               ;           EndIf
            EndIf
         Next
      EndProcedure
      
      ;-
      Procedure edit_make_text_position( *this._s_WIDGET )
         edit_row_align( *this )
         
         ;
         bar_area_update( *this )
         
         ; make horizontal scroll x
         make_scrollarea_x( *this, *this\text )
         
         ; make vertical scroll y
         make_scrollarea_y( *this, *this\text )
         
         If *this\scroll\v And
            bar_SetState( *this\scroll\v, - *this\scroll_y( ) )
         EndIf
         
         If *this\scroll\h And
            bar_SetState( *this\scroll\h, - *this\scroll_x( ) )
         EndIf
      EndProcedure
      
      Procedure.s edit_make_insert_text( *this._s_WIDGET, Text.s )
         Protected String.s, i.i, Len.i
         
         With *this
            If *this\text\numeric And Text.s <> #LF$
               Static Dot, Minus
               Protected Chr.s, Input.i, left.s, count.i
               
               Len = Len( Text.s )
               For i = 1 To Len
                  Chr   = Mid( Text.s, i, 1 )
                  Input = Asc( Chr )
                  
                  Select Input
                     Case '0' To '9', '.', '-'
                     Case 'Ю', 'ю', 'Б', 'б', 44, 47, 60, 62, 63 : Input = '.' : Chr = Chr( Input )
                        
                     Default
                        Input = 0
                  EndSelect
                  
                  If Input
                     If *this\type = #__type_IPAddress
                        left.s = Left( *this\text\string, *this\edit_caret_1( ) )
                        Select CountString( left.s, "." )
                           Case 0 : left.s = StringField( left.s, 1, "." )
                           Case 1 : left.s = StringField( left.s, 2, "." )
                           Case 2 : left.s = StringField( left.s, 3, "." )
                           Case 3 : left.s = StringField( left.s, 4, "." )
                        EndSelect
                        count = Len( left.s + Trim( StringField( Mid( *this\text\string, *this\edit_caret_1( ) + 1 ), 1, "." ), #LF$ ))
                        If count < 3 And ( Val( left.s ) > 25 Or Val( left.s + Chr.s ) > 255 )
                           Continue
                           ;               ElseIf Mid( *this\text\string, *this\edit_caret_1( ) + 1, 1 ) = "."
                           ;                 *this\edit_caret_1( ) + 1 : *this\edit_caret_2( ) = *this\edit_caret_1( )
                        EndIf
                     EndIf
                     
                     If Not Dot And Input = '.' And Mid( *this\text\string, *this\edit_caret_1( ) + 1, 1 ) <> "."
                        Dot = 1
                     ElseIf Input <> '.' And count < 3
                        Dot = 0
                     Else
                        Continue
                     EndIf
                     
                     If Not Minus And Input = '-' And Mid( *this\text\string, *this\edit_caret_1( ) + 1, 1 ) <> "-"
                        Minus = 1
                     ElseIf Input <> '-'
                        Minus = 0
                     Else
                        Continue
                     EndIf
                     
                     String.s + Chr
                  EndIf
               Next
               
            ElseIf *this\text\pass
               Len = Len( Text.s )
               ;For i = 1 To Len : String.s + "●" : Next
               For i = 1 To Len : String.s + "•" : Next
               
            Else
               Select #True
                  Case *this\text\lower : String.s = LCase( Text.s )
                  Case *this\text\upper : String.s = UCase( Text.s )
                  Default
                     String.s = Text.s
               EndSelect
            EndIf
         EndWith
         
         ProcedureReturn String.s
      EndProcedure
      
      Procedure.b edit_insert_text( *this._s_WIDGET, Chr.s )
         Protected result.b, String.s, Count.i, *rowLine._s_ROWS
         
         Chr.s = edit_make_insert_text( *this, Chr.s)
         
         If Chr.s
            *rowLine = *this\FocusedLine( )
            ;\\
            ReDrawing( *this, *rowLine )
            
            If *rowLine
               Count = CountString( Chr.s, #LF$)
               
               If *this\edit_caret_1( ) > *this\edit_caret_2( )
                  *this\edit_caret_1( ) = *this\edit_caret_2( )
               Else
                  *this\edit_caret_2( ) = *this\edit_caret_1( )
               EndIf
               
               *this\edit_caret_1( ) + Len( Chr.s )
               *this\edit_caret_2( ) = *this\edit_caret_1( )
               
               If count Or *rowLine\index <> *this\PressedLineIndex( )
                  *this\TextChange( ) = - 1
               EndIf
               
               If *rowLine\text\edit[2]\width <> 0
                  *rowLine\text\edit[2]\len      = 0
                  *rowLine\text\edit[2]\string.s = ""
               Else
                  *rowLine\text\edit[1]\len + Len( Chr.s )
                  *rowLine\text\edit[1]\string.s + Chr.s
                  
                  *rowLine\text\len      = *rowLine\text\edit[1]\len + *rowLine\text\edit[3]\len
                  *rowLine\text\string.s = *rowLine\text\edit[1]\string.s + *rowLine\text\edit[3]\string.s
                  *rowLine\text\width    = TextWidth( *rowLine\text\string )
               EndIf
               
               *this\text\edit[1]\len + Len( Chr.s )
               *this\text\edit[1]\string.s + Chr.s
               
               *this\text\len      = *this\text\edit[1]\len + *this\text\edit[3]\len
               *this\text\string.s = *this\text\edit[1]\string + *this\text\edit[3]\string
               
               ;
               If *rowLine\index > *this\PressedLineIndex( )
                  *this\EnteredLineIndex( ) = *this\PressedLineIndex( ) + Count
               Else
                  *this\EnteredLineIndex( ) = *rowLine\index + Count
               EndIf
               *this\PressedLineIndex( ) = *this\EnteredLineIndex( )
               
               ;
               If Not *this\TextChange( )
                  If *this\scroll_width( ) < *rowLine\text\width
                     *this\scroll_width( ) = *rowLine\text\width
                     
                     bar_area_update( *this )
                  EndIf
               EndIf
               
               result             = 1
               *this\root\repaint = 1
            EndIf
         Else
            *this\notify = 1
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Macro edit_change_text_( _address_, _char_len_ = 0, _position_ = )
         _address_\text\edit#_position_\len + _char_len_
         _address_\text\len      = _address_\text\edit[1]\len + _address_\text\edit[3]\len
         _address_\text\string.s = Left( _address_\text\string.s, _address_\text\edit[1]\len ) + Right( _address_\text\string.s, _address_\text\edit[3]\len )
      EndMacro
      
      Macro edit_change_caret_( _this_, _index_ )
         If _this_\PressedLineIndex( ) <> _index_
            _this_\TextChange( ) = - 1
         EndIf
         
         If _this_\edit_caret_1( ) > _this_\edit_caret_2( )
            _this_\edit_caret_1( ) = _this_\edit_caret_2( )
         Else
            _this_\edit_caret_2( ) = _this_\edit_caret_1( )
         EndIf
         
         If _this_\PressedLineIndex( ) > _index_
            _this_\PressedLineIndex( ) = _index_
            _this_\EnteredLineIndex( ) = _index_
         Else
            _this_\EnteredLineIndex( ) = _this_\PressedLineIndex( )
         EndIf
      EndMacro
      
      Procedure edit_key_page_up_down_( *this._s_WIDGET, wheel, row_select )
         Protected repaint, select_index, page_height
         Protected first_index = 0, last_index = *this\count\items - 1
         
         If wheel = - 1 ; page-up
            If row_select
               If row_select > 0
                  select_index = *this\VisibleFirstRow( )\index
               Else
                  select_index = first_index
               EndIf
               If *this\FocusedLine( )\index <> select_index
                  edit_row_select_( *this, *this\FocusedLine( ), select_index )
                  
                  If select_index = first_index
                     *this\edit_caret_1( ) = 0
                  Else
                     ;\\ *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\edit_caret_0( )
                     *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\edit_caret_1( )
                  EndIf
                  
                  page_height = *this\inner_height( )
                  repaint     = 1
               EndIf
            Else
               If *this\edit_caret_1( ) <> *this\FocusedLine( )\text\pos
                  *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos
                  repaint               = 1
               EndIf
            EndIf
            
         ElseIf wheel = 1 ; page-down
            If row_select
               If row_select > 0
                  select_index = *this\VisibleLastRow( )\index
               Else
                  select_index = last_index
               EndIf
               If *this\FocusedLine( )\index <> select_index
                  edit_row_select_( *this, *this\FocusedLine( ), select_index )
                  
                  If select_index = last_index
                     *this\edit_caret_1( ) = *this\text\len
                  Else
                     ;\\ *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\edit_caret_0( )
                     *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\edit_caret_1( )
                  EndIf
                  
                  page_height = *this\inner_height( )
                  repaint     = 1
               EndIf
            Else
               If *this\edit_caret_1( ) <> *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                  *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                  repaint               = 1
               EndIf
            EndIf
         EndIf
         
         If repaint
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            *this\EnteredLineIndex( ) = *this\FocusedLine( )\index
            *this\PressedLineIndex( ) = *this\EnteredLineIndex( )
            
            If wheel = - 1
               row_scroll_y_( *this, *this\FocusedLine( ), - page_height )
            ElseIf wheel = 1
               row_scroll_y_( *this, *this\FocusedLine( ), + page_height )
            EndIf
         EndIf
         
         ProcedureReturn repaint
      EndProcedure
      
      Procedure edit_key_home_( *this._s_WIDGET )
         Protected result
         
         If Keyboard( )\key[1] & #PB_Canvas_Control
            If *this\edit_caret_1( ) <> 0
               *this\edit_caret_1( )     = 0
               *this\EnteredLineIndex( ) = 0
               
               Debug "key ctrl home"
               result = 1
            EndIf
         Else
            If *this\edit_caret_1( ) <> *this\FocusedLine( )\text\pos
               *this\edit_caret_1( )     = *this\FocusedLine( )\text\pos
               *this\EnteredLineIndex( ) = *this\FocusedLine( )\index
               
               Debug "key home"
               result = 1
            EndIf
         EndIf
         
         If result
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            *this\PressedLineIndex( ) = *this\EnteredLineIndex( )
            ;\\ *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\FocusedLine( )\text\pos
            *this\FocusedLine( )\edit_caret_1( ) = *this\edit_caret_1( ) - *this\FocusedLine( )\text\pos
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure edit_key_end_( *this._s_WIDGET )
         Protected result
         
         If Keyboard( )\key[1] & #PB_Canvas_Control
            If *this\edit_caret_1( ) <> *this\text\len
               *this\edit_caret_1( )     = *this\text\len
               *this\EnteredLineIndex( ) = *this\count\items - 1
               
               Debug "key ctrl end"
               result = 1
            EndIf
         Else
            If *this\edit_caret_1( ) <> *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
               *this\edit_caret_1( )     = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
               *this\EnteredLineIndex( ) = *this\FocusedLine( )\index
               
               Debug "key end"
               result = 1
            EndIf
         EndIf
         
         If result
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            *this\PressedLineIndex( ) = *this\EnteredLineIndex( )
            ;\\ *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\FocusedLine( )\text\pos
            *this\FocusedLine( )\edit_caret_1( ) = *this\edit_caret_1( ) - *this\FocusedLine( )\text\pos
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure edit_key_backup_( *this._s_WIDGET )
         Protected Repaint, remove_chr_len, *rowLine._s_ROWS = *this\FocusedLine( )
         
         If *this\text\edit[2]\len
            edit_change_caret_( *this, *rowLine\index )
            
            Debug "" + #PB_Compiler_Procedure + " " + 1111111111
            remove_chr_len = 0
            edit_change_text_( *rowLine, - remove_chr_len, [1] )
            edit_change_text_( *this, - remove_chr_len, [1] )
            Repaint = - 1
            
         ElseIf *this\edit_caret_1( ) > *rowLine\text\pos
            Debug "" + #PB_Compiler_Procedure + " " + 2222222222 + " " + *this\text\len
            *this\edit_caret_1( ) - 1
            *this\edit_caret_2( )     = *this\edit_caret_1( )
            *this\EnteredLineIndex( ) = *rowLine\index
            
            remove_chr_len = 1
            edit_change_text_( *rowLine, - remove_chr_len, [1] )
            edit_change_text_( *this, - remove_chr_len, [1] )
            Repaint = - 1
            
         Else
            Debug "" + #PB_Compiler_Procedure + " " + 3333333333 + " " + *this\text\len
            If *rowLine\index > 0
               remove_chr_len = Len( #LF$ )
               *this\edit_caret_1( ) - remove_chr_len
               *this\edit_caret_2( ) = *this\edit_caret_1( )
               
               *this\EnteredLineIndex( ) = *rowLine\index - 1
               *this\PressedLineIndex( ) = *this\EnteredLineIndex( )
               *this\TextChange( )       = - 1
               
               edit_change_text_( *rowLine, - remove_chr_len, [1] )
               edit_change_text_( *this, - remove_chr_len, [1] )
               Repaint = - 1
               
            Else
               *this\notify = 2
            EndIf
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      
      Procedure edit_key_delete_( *this._s_WIDGET )
         Protected Repaint, remove_chr_len, *rowLine._s_ROWS = *this\FocusedLine( )
         
         If *this\text\edit[2]\len
            edit_change_caret_( *this, *rowLine\index )
            
            remove_chr_len = 1
            Repaint        = - 1
            
         ElseIf *this\edit_caret_1( ) < *this\text\len ; ok
            If *this\edit_caret_1( ) = *rowLine\text\pos + *rowLine\text\len
               remove_chr_len      = Len( #LF$ )
               *this\TextChange( ) = - 1
            Else
               remove_chr_len = 1
            EndIf
            
            ;Debug ""+*this\edit_caret_1( ) +" "+ *this\text\len
            ; change caret
            *this\EnteredLineIndex( ) = *rowLine\index
            *this\PressedLineIndex( ) = *rowLine\index
            
            Repaint = - 1
         EndIf
         
         If Repaint
            edit_change_text_( *rowLine, - remove_chr_len, [3] )
            edit_change_text_( *this, - remove_chr_len, [3] )
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      
      Procedure edit_key_return_( *this._s_WIDGET )
         Protected *rowLine._s_ROWS
         
         If *this\text\multiline
            *rowLine._s_ROWS = *this\FocusedLine( )
            
            If *this\PressedLineIndex( ) >= *rowLine\index
               If *this\edit_caret_1( ) > *this\edit_caret_2( )
                  *this\edit_caret_1( ) = *this\edit_caret_2( )
               EndIf
               *this\edit_caret_1( ) + Len( #LF$ )
               *this\edit_caret_2( )     = *this\edit_caret_1( )
               *this\EnteredLineIndex( ) = *rowLine\index + 1
            Else
               *this\edit_caret_2( ) + Len( #LF$ )
               *this\edit_caret_1( )     = *this\edit_caret_2( )
               *this\EnteredLineIndex( ) = *this\PressedLineIndex( ) + 1
            EndIf
            *this\PressedLineIndex( ) = *this\EnteredLineIndex( )
            
            ; Debug ""+*this\edit_caret_1( ) +" "+ *this\edit_caret_2( ) +" "+ *this\EnteredLineIndex( ) +" "+ *this\PressedLineIndex( )
            
            *this\text\string.s = *this\text\edit[1]\string + #LF$ + *this\text\edit[3]\string
            *this\TextChange( ) = - 1
            
            ;
            ;         _AddItem( *this, *this\PressedLineIndex( ), *rowLine\text\edit[3]\string )
            ;
            ;         *this\text\string.s = *this\text\edit[1]\string + #LF$ + *rowLine\text\edit[3]\string + #LF$ + Right( *this\text\string.s, *this\text\len - (*rowLine\text\pos + *rowLine\text\len + 1))
            ;         *rowLine\text\edit[3]\len = Len( #LF$ )
            ;         *rowLine\text\edit[3]\string = #LF$
            ;         *rowLine\text\len = *rowLine\text\edit[1]\len + *rowLine\text\edit[3]\len
            ;         *rowLine\text\string.s = *rowLine\text\edit[1]\string + *rowLine\text\edit[3]\string
            ;          *this\TextChange( ) = 0
            ;          *this\WidgetChange( ) = 0
            ;
            ; ;                 ForEach *this\__rows( )
            ; ;                   Debug *this\__rows( )\text\string
            ; ;                 Next
            
            ProcedureReturn - 1
         Else
            *this\notify = 3
         EndIf
      EndProcedure
      
      
      ;-
      Procedure edit_SetItem( *this._s_WIDGET, position, *text.Character, string_len )
         Protected *rowLine._s_ROWS
         Protected add_index = - 1, add_y, add_pos, add_height
         
         If position < 0 Or position > ListSize( *this\__rows( )) - 1
            LastElement( *this\__rows( ))
            *rowLine = AddElement( *this\__rows( ))
            
            ;If position < 0
            position = ListIndex( *this\__rows( ))
            ;EndIf
            
         Else
            
            *rowLine   = SelectElement( *this\__rows( ), position )
            add_index  = *this\__rows( )\index
            add_y      = *this\__rows( )\y + Bool( #PB_Compiler_OS = #PB_OS_Windows )
            add_pos    = *this\__rows( )\text\pos
            add_height = *this\__rows( )\height + *this\mode\gridlines
            *rowLine   = InsertElement( *this\__rows( ))
            
            PushListPosition( *this\__rows( ))
            While NextElement( *this\__rows( ))
               *this\__rows( )\index = ListIndex( *this\__rows( ) )
               *this\__rows( )\y + add_height
               *this\__rows( )\text\pos + string_len + Len( #LF$ )
            Wend
            PopListPosition(*this\__rows( ))
            
         EndIf
         
         ;\\
         ReDrawing( *this, *this\__rows( ) )
         
         *this\__rows( )\index       = position
         *this\__rows( )\text\len    = string_len
         *this\__rows( )\text\string = PeekS ( *text, string_len )
         
         draw_font_item_( *this, *this\__rows( ), *this\__rows( )\TextChange( ) )
         
         *this\__rows( )\height = *this\__rows( )\text\height ; + 10
         *this\__rows( )\width  = *this\inner_width( )
         ;*this\__rows( )\color  = _get_colors_( )
         ;*this\__rows( )\color\back = $FFF9F9F9
         
         ; make line position
         If *this\text\vertical
         Else ; horizontal
            If *this\scroll_width( ) < *this\__rows( )\text\width + *this\text\padding\x * 2
               *this\scroll_width( ) = *this\__rows( )\text\width + *this\text\padding\x * 2
            EndIf
            
            If *this\text\rotate = 0
               If add_index >= 0
                  *this\__rows( )\text\pos = add_pos
                  *this\__rows( )\y        = add_y - *this\text\padding\y
               Else
                  *this\__rows( )\text\pos = *this\text\len
                  *this\__rows( )\y        = *this\scroll_height( ) - *this\text\padding\y
               EndIf
            ElseIf *this\text\rotate = 180
               *this\__rows( )\y = ( *this\inner_height( ) - *this\scroll_height( ) - *this\__rows( )\text\height ) + *this\text\padding\y
            EndIf
            
            *this\scroll_height( ) + *this\__rows( )\height + *this\mode\gridlines
         EndIf
         
         *this\count\items + 1
         *this\text\len + string_len + Len( #LF$ )
         
         set_align_y_( *this\text, *this\__rows( )\text, - 1, *this\text\rotate )
         set_align_x_( *this\text, *this\__rows( )\text, *this\scroll_width( ), *this\text\rotate )
      EndProcedure
      
      Procedure edit_AddItem( *this._s_WIDGET, position, *text.Character, string_len )
         edit_SetItem(*this, position, *text, string_len)
         
         If *this\__rows( )\text\pos = 0
            *this\text\string = InsertString( *this\text\string, *this\__rows( )\text\string, 1 )
         Else
            *this\text\string = InsertString( *this\text\string, #LF$ + *this\__rows( )\text\string, 1 + *this\__rows( )\text\pos )
         EndIf
         ;*this\text\string = InsertString( *this\text\string, *this\__rows( )\text\string + #LF$, 1 + *this\__rows( )\text\pos )
         
         ;       If *this\type = #__type_Editor
         ;         ; Debug "e - "+*this\__rows( )\text\pos +" "+ *this\__rows( )\text\string +" "+ *this\__rows( )\y +" "+ *this\__rows( )\width +" "+ *this\__rows( )\height
         ;         ;  Debug "e - "+*this\__rows( )\text\pos +" "+ *this\__rows( )\text\string +" "+ *this\__rows( )\text\y +" "+ *this\__rows( )\text\width +" "+ *this\__rows( )\text\height
         ;       EndIf
         ;
         ;
         *this\WidgetChange( )  = 0
         *this\TextChange( )    = 1
         *this\text\edit\string = *this\text\string
      EndProcedure
      
      Procedure edit_ClearItems( *this._s_WIDGET )
         *this\WidgetChange( )  = - 1
         *this\count\items      = - 1
         *this\TextChange( )    = - 1
         *this\text\string      = ""
         *this\text\edit\string = ""
         
         If *this\text\editable
            *this\edit_caret_1( )     = 0
            *this\edit_caret_2( )     = 0
            *this\PressedLineIndex( ) = 0
            *this\EnteredLineIndex( ) = 0
         EndIf
         
         PostRepaint( *this\root ) ;?
         ProcedureReturn 1
      EndProcedure
      
      Procedure edit_RemoveItem( *this._s_WIDGET, item )
         *this\count\items - 1
         
         If *this\count\items = - 1
            edit_ClearItems( *this )
         Else
            *this\TextChange( ) = - 1
            *this\text\string   = RemoveString( *this\text\string, StringField( *this\text\string, item + 1, #LF$ ) + #LF$ )
            
            If ListSize( *this\__rows( ) )
               If SelectElement( *this\__rows( ), item )
                  DeleteElement( *this\__rows( ), 1 )
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn 1
      EndProcedure
      
      Procedure edit_SetText( *this._s_WIDGET, text.s )
         ; If Text.s = "" : Text.s = #LF$ : EndIf
         Text.s = ReplaceString( Text.s, #LFCR$, #LF$ )
         Text.s = ReplaceString( Text.s, #CRLF$, #LF$ )
         Text.s = ReplaceString( Text.s, #CR$, #LF$ )
         
         If *this\text\multiline = 0
            Text.s = edit_make_insert_text( *this, Text.s )
            Text.s = RemoveString( Text.s, #LF$ )
         EndIf
         
         ;       If *this\text\rotate = 180
         ;         *this\scroll\v\bar\invert = 1
         ;       EndIf
         
         Protected string.s = text.s + #LF$
         Protected *str.Character = @string
         Protected *end.Character = @string
         
         
         *this\scroll_width( )  = *this\text\padding\x * 2
         *this\scroll_height( ) = *this\text\padding\y * 2
         
         Protected enter_index = - 1: If *this\EnteredLine( ): enter_index = *this\EnteredLine( )\index: *this\EnteredLine( ) = #Null: EndIf
         Protected focus_index = - 1: If *this\FocusedLine( ): focus_index = *this\FocusedLine( )\index: *this\FocusedLine( ) = #Null: EndIf
         Protected press_index = - 1: If *this\PressedLine( ): press_index = *this\PressedLine( )\index: *this\PressedLine( ) = #Null: EndIf
         
         If *this\count\items
            *this\count\items = 0
            ClearList( *this\__rows( ))
         Else
            Protected count = 1
         EndIf
         
         ; ; ;       *this\text\len = Len( string )
         ; ; ;       *this\text\string = string
         ; ; ;       *this\count\items = CountString( String, #LF$ )
         ; ; ;       *this\TextChange( ) = 1
         ; ; ;       *this\WidgetChange( ) = 1
         
         *this\text\len    = 0
         *this\text\string = string
         
         While *end\c
            If *end\c = #LF
               edit_SetItem( *this, - 1, *str, (*end - *str) >> #PB_Compiler_Unicode )
               
               If enter_index = *this\__rows( )\index: *this\EnteredLine( ) = *this\__rows( ): EndIf
               If focus_index = *this\__rows( )\index: *this\EnteredLine( ) = *this\__rows( ): EndIf
               If press_index = *this\__rows( )\index: *this\EnteredLine( ) = *this\__rows( ): EndIf
               
               *str = *end + #__sOC
            EndIf
            *end + #__sOC
         Wend
         
         *this\text\len - Len( #LF$ )
         *this\text\string = Left( *this\text\string, *this\text\len )
         
         *this\WidgetChange( ) = 1
         *this\TextChange( )   = 1
         
         If count
            *this\text\edit\string = *this\text\string
         EndIf
         
         ;Debug ""+*this\scroll_height( ) +" "+ *this\scroll_width( )
         
         ProcedureReturn 1
      EndProcedure
      
      Procedure edit_SetItemState( *this._s_WIDGET, Item.l, State.i )
         If *this\FocusedLineIndex( ) <> Item
            *this\FocusedLineIndex( ) = Item
            
            SelectElement( *this\__rows( ), Item )
            
            If *this\FocusedLine( ) <> *this\__rows( )
               If *this\FocusedLine( )
                  If *this\FocusedLine( )\focus <> #False
                     *this\FocusedLine( )\focus = #False
                  EndIf
                  
                  ;*this\FocusedLine( )\color\state = #__s_0
               EndIf
               
               *this\FocusedLine( ) = *this\__rows( )
               
               If *this\FocusedLine( )\focus = #False
                  *this\FocusedLine( )\focus = #True
               EndIf
               
               ;
               *this\FocusedLine( )\color\state = #__s_2
            EndIf
            
            ;
            If state < 0 Or
               state > *this\FocusedLine( )\text\len
               state = *this\FocusedLine( )\text\len
            EndIf
            
            *this\edit_caret_0( ) = State
            *this\edit_caret_1( ) = State + *this\FocusedLine( )\text\pos
            *this\edit_caret_2( ) = State + *this\FocusedLine( )\text\pos
            
            ;
            edit_sel_row_text_( *this, *this\FocusedLine( ) )
            edit_sel_text_( *this, *this\FocusedLine( ) )
            row_scroll_y_( *this, *this\FocusedLine( ) )
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      Procedure edit_SetState( *this._s_WIDGET, State.i )
         If state < 0 Or
            state > *this\text\len
            state = *this\text\len
         EndIf
         
         If *this\edit_caret_1( ) <> State
            PushListPosition( *this\__rows( ) )
            ForEach *this\__rows( )
               If *this\__rows( )\text\pos <= state And
                  *this\__rows( )\text\pos + *this\__rows( )\text\len >= state
                  
                  If *this\FocusedLine( ) <> *this\__rows( )
                     If *this\FocusedLine( )
                        If *this\FocusedLine( )\focus <> #False
                           *this\FocusedLine( )\focus = #False
                        EndIf
                        
                        *this\FocusedLine( )\color\state = #__s_0
                     EndIf
                     
                     *this\FocusedLine( )      = *this\__rows( )
                     *this\FocusedLineIndex( ) = *this\__rows( )\index
                     
                     If *this\FocusedLine( )\focus = #False
                        *this\FocusedLine( )\focus = #True
                     EndIf
                     
                     *this\FocusedLine( )\color\state = #__s_2
                  EndIf
                  Break
               EndIf
            Next
            PopListPosition( *this\__rows( ) )
            
            ;
            *this\edit_caret_1( ) = State
            *this\edit_caret_2( ) = State
            *this\edit_caret_0( ) = State - *this\FocusedLine( )\text\pos
            
            ;
            edit_sel_row_text_( *this, *this\FocusedLine( ) )
            edit_sel_text_( *this, *this\FocusedLine( ) )
            row_scroll_y_( *this, *this\FocusedLine( ) )
            ProcedureReturn #True
         EndIf
      EndProcedure
      
      
      ;-
      Procedure edit_Update_SetText( *this._s_WIDGET, text.s )
         *this\text\edit\string = *this\text\string
         
         *this\scroll_width( )  = *this\text\padding\x * 2
         *this\scroll_height( ) = *this\text\padding\y * 2
         
         Protected string.s = text.s + #LF$
         Protected *str.Character = @string
         Protected *end.Character = @string
         
         Protected enter_index = - 1: If *this\EnteredLine( ): enter_index = *this\EnteredLine( )\index: *this\EnteredLine( ) = #Null: EndIf
         Protected focus_index = - 1: If *this\FocusedLine( ): focus_index = *this\FocusedLine( )\index: *this\FocusedLine( ) = #Null: EndIf
         Protected press_index = - 1: If *this\PressedLine( ): press_index = *this\PressedLine( )\index: *this\PressedLine( ) = #Null: EndIf
         
         *this\text\len = 0
         If *this\count\items
            *this\count\items = 0
            ClearList( *this\__rows( ))
         EndIf
         
         While *End\c
            If *end\c = #LF
               edit_SetItem( *this, - 1, *str, (*end - *str) >> #PB_Compiler_Unicode )
               
               If enter_index = *this\__rows( )\index: *this\EnteredLine( ) = *this\__rows( ): EndIf
               If focus_index = *this\__rows( )\index: *this\EnteredLine( ) = *this\__rows( ): EndIf
               If press_index = *this\__rows( )\index: *this\EnteredLine( ) = *this\__rows( ): EndIf
               
               *str = *end + #__sOC
            EndIf
            *end + #__sOC
         Wend
         
         *this\text\len - Len( #LF$ )
         *this\TextChange( )   = 0
         *this\WidgetChange( ) = 0
         
         ProcedureReturn 1
      EndProcedure
      
      Procedure Text_Update( *this._s_WIDGET )
         With *this
            
            If *this\text\string.s
               ;If #debug_update_text
               ;  Debug ""+#PB_Compiler_Procedure +" - "+  *this\index
               ; EndIf
               
               Protected *str.Character
               Protected *end.Character
               Protected TxtHeight = *this\text\height
               Protected String.s, String1.s, CountString
               Protected IT, len.l, Position.l, width
               Protected ColorFont = *this\color\front[\color\state]
               
               ; *this\max
               If *this\text\vertical
                  If *this\scroll_height( ) > *this\inner_height( )
                     *this\TextChange( ) = #__text_update
                  EndIf
                  Width = *this\inner_height( ) - *this\text\padding\x * 2
                  
               Else
                  If *this\scroll_width( ) > *this\inner_width( )
                     *this\TextChange( ) = #__text_update
                  EndIf
                  
                  width = *this\inner_width( ) - *this\text\padding\x * 2
               EndIf
               
               If *this\text\multiLine
                  ; make multiline text
                  Protected text$ = *this\text\string.s + #LF$
                  
                  ;     text$ = ReplaceString( text$, #LFCR$, #LF$ )
                  ;     text$ = ReplaceString( text$, #CRLF$, #LF$ )
                  ;     text$ = ReplaceString( text$, #CR$, #LF$ )
                  
                  If *this\text\multiLine > 0
                     String = text$
                  Else
                     ; <http://www.purebasic.fr/english/viewtopic.php?f = 12&t = 53800>
                     Protected.i i, start, found, length
                     Protected$ line$, DelimList$ = " " + Chr( 9 ), nl$ = #LF$
                     
                     *str.Character = @text$
                     *end.Character = @text$
                     
                     ; make word wrap
                     While *end\c
                        If *end\c = #LF
                           start  = ( *end - *str ) >> #PB_Compiler_Unicode
                           line$  = PeekS ( *str, start )
                           length = start
                           
                           ; Get text len
                           While length > 1
                              If width > TextWidth( RTrim( Left( line$, length ) ))
                                 Break
                              Else
                                 length - 1
                              EndIf
                           Wend
                           
                           While start > length
                              For found = length To 1 Step - 1
                                 If FindString( " ", Mid( line$, found, 1 ))
                                    start = found
                                    Break
                                 EndIf
                              Next
                              
                              If Not found
                                 start = length
                              EndIf
                              
                              String + Left( line$, start ) + nl$
                              line$ = LTrim( Mid( line$, start + 1 ))
                              start = Len( line$ )
                              
                              ;If length <> start
                              length = start
                              
                              ; Get text len
                              While length > 1
                                 If width > TextWidth( RTrim( Left( line$, length ) ))
                                    Break
                                 Else
                                    length - 1
                                 EndIf
                              Wend
                              ;EndIf
                           Wend
                           
                           String + line$ + nl$
                           *str = *end + #__sOC
                        EndIf
                        
                        *end + #__sOC
                     Wend
                     
                     ;String + #LF$
                  EndIf
                  
                  CountString = CountString( String, #LF$ )
               Else
                  String.s    = RemoveString( *this\text\string, #LF$ ) + #LF$
                  CountString = 1
               EndIf
               
               If *this\count\items <> CountString
                  If *this\count\items > CountString
                     *this\TextChange( ) = 1
                  Else
                     *this\TextChange( ) = #__text_update
                  EndIf
                  
                  *this\count\items = CountString
               EndIf
               
               If *this\TextChange( )
                  *str.Character = @String
                  *end.Character = @String
                  
                  *this\text\pos = 0
                  *this\text\len = Len( *this\text\string )
                  
                  ;\\
                  ClearList( *this\__rows( ))
                  *this\scroll_width( )  = *this\text\padding\x * 2
                  *this\scroll_height( ) = *this\text\padding\y * 2
                  
                  ;
                  While *end\c
                     If *end\c = #LF
                        AddElement( *this\__rows( ))
                        *this\__rows( )\text\len    = ( *end - *str ) >> #PB_Compiler_Unicode
                        *this\__rows( )\text\string = PeekS ( *str, *this\__rows( )\text\len )
                        ;;*this\__rows( )\text\width = TextWidth( *this\__rows( )\text\string )
                        
                        ; drawing item font
                        draw_font_item_( *this, *this\__rows( ), *this\__rows( )\TextChange( ) )
                        
                        ;; editor
                        *this\__rows( )\index = ListIndex( *this\__rows( ))
                        
                        *this\__rows( )\height = *this\__rows( )\text\height
                        *this\__rows( )\width  = *this\inner_width( )
                        *this\__rows( )\color  = _get_colors_( )
                        
                        
                        
                        If *this\EnteredLineIndex( ) = *this\__rows( )\index Or
                           *this\FocusedLineIndex( ) = *this\__rows( )\index
                           *this\__rows( )\TextChange( ) = 1
                        EndIf
                        
                        ; make line position
                        If *this\text\vertical
                           If *this\scroll_height( ) < *this\__rows( )\text\height + *this\text\padding\y * 2 + *this\mode\fullselection
                              *this\scroll_height( ) = *this\__rows( )\text\height + *this\text\padding\y * 2 + *this\mode\fullselection
                           EndIf
                           
                           If *this\text\rotate = 90
                              *this\__rows( )\x = *this\scroll_width( ) - *this\text\padding\x
                           ElseIf *this\text\rotate = 270
                              *this\__rows( )\x = ( *this\inner_width( ) - *this\scroll_width( ) - *this\__rows( )\text\width ) + *this\text\padding\x
                           EndIf
                           
                           *this\scroll_width( ) + TxtHeight + Bool( *this\__rows( )\index <> *this\count\items - 1 ) * *this\mode\gridlines
                        Else ; horizontal
                           If *this\scroll_width( ) < *this\__rows( )\text\width + *this\text\padding\x * 2 + *this\mode\fullselection
                              *this\scroll_width( ) = *this\__rows( )\text\width + *this\text\padding\x * 2 + *this\mode\fullselection
                           EndIf
                           
                           If *this\text\rotate = 0
                              *this\__rows( )\y = *this\scroll_height( ) - *this\text\padding\y
                           ElseIf *this\text\rotate = 180
                              *this\__rows( )\y = ( *this\inner_height( ) - *this\scroll_height( ) - *this\__rows( )\text\height ) + *this\text\padding\y
                           EndIf
                           
                           *this\scroll_height( ) + TxtHeight + Bool( *this\__rows( )\index <> *this\count\items - 1 ) * *this\mode\gridlines
                        EndIf
                        
                        *str = *end + #__sOC
                     EndIf
                     
                     *end + #__sOC
                  Wend
                  
                  
                  ;
                  ForEach *this\__rows( )
                     *this\__rows( )\text\pos = *this\text\pos
                     *this\text\pos + *this\__rows( )\text\len + 1 ; Len( #LF$ )
                     
                     If *this\text\vertical
                        If *this\text\rotate = 270
                           *this\__rows( )\x - ( *this\inner_width( ) - *this\scroll_width( ) )
                        EndIf
                        
                        ; changed
                        If *this\text\rotate = 0
                           *this\__rows( )\text\x = 0
                        ElseIf *this\text\rotate = 270
                           *this\__rows( )\text\x = Bool( #PB_Compiler_OS = #PB_OS_MacOS ) * 2 + Bool( #PB_Compiler_OS = #PB_OS_Linux ) + *this\__rows( )\text\width
                        Else
                           *this\__rows( )\text\x = - Bool( #PB_Compiler_OS = #PB_OS_MacOS )
                        EndIf
                        
                        set_align_y_( *this\text, *this\__rows( )\text, *this\scroll_height( ), *this\text\rotate )
                     Else ; horizontal
                        If *this\text\rotate = 180
                           *this\__rows( )\y - ( *this\inner_height( ) - *this\scroll_height( ) )
                        EndIf
                        
                        ; changed
                        If *this\text\rotate = 90
                           *this\__rows( )\text\y = 0
                        ElseIf *this\text\rotate = 180
                           *this\__rows( )\text\y = Bool( #PB_Compiler_OS = #PB_OS_MacOS ) * 2 + Bool( #PB_Compiler_OS = #PB_OS_Linux ) + *this\__rows( )\text\height
                        Else
                           *this\__rows( )\text\y = - Bool( #PB_Compiler_OS = #PB_OS_MacOS )
                        EndIf
                        
                        set_align_x_( *this\text, *this\__rows( )\text, *this\scroll_width( ), *this\text\rotate )
                     EndIf
                     
                     
                     If *this\__rows( )\TextChange( ) <> 0
                        ; edit_sel_update_( *this )
                        
                        *this\__rows( )\TextChange( ) = 0
                     EndIf
                  Next
               EndIf
            EndIf
            
            ;\\
            bar_area_update( *this )
            
            ; make horizontal scroll x
            make_scrollarea_x( *this, *this\text )
            
            ; make vertical scroll y
            make_scrollarea_y( *this, *this\text )
            
            ;           ; This is for the caret and scroll
            ;           ; when entering the key - ( enter & backspace )
            ;           If *this\scroll\v
            ;             edit_text_*this\scroll_y( )
            ;           EndIf
            ;           If *this\scroll\h
            ;             edit_text_*this\scroll_x( )
            ;           EndIf
            
            
            ; vertical bar one before displaying
            If *this\scroll\v And Not *this\scroll\v\bar\ThumbChange( ) ;And Not *this\show
               If *this\scroll\v\bar\max > *this\scroll\v\bar\page\len
                  If *this\text\align\bottom
                     If Bar_Change( *this\scroll\v, *this\scroll\v\bar\page\end )
                        Bar_Update( *this\scroll\v )
                        ;                   Bar_Resize( *this\scroll\v\bar )
                     EndIf
                     
                  ElseIf Not *this\text\align\top
                     If Bar_Change( *this\scroll\v, *this\scroll\v\bar\page\end / 2 )
                        Bar_Update( *this\scroll\v )
                        ;                   Bar_Resize( *this\scroll\v\bar )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ; horizontal bar one before displaying
            If *this\scroll\h And Not *this\scroll\h\bar\ThumbChange( ) ;And Not *this\show
               If *this\scroll\h\bar\max > *this\scroll\h\bar\page\len
                  If *this\text\align\right
                     If Bar_Change( *this\scroll\h, *this\scroll\h\bar\page\end )
                        Bar_Update( *this\scroll\h )
                        ;                   Bar_Resize( *this\scroll\h\bar )
                     EndIf
                     
                  ElseIf Not *this\text\align\left
                     If Bar_Change( *this\scroll\h, *this\scroll\h\bar\page\end / 2 )
                        Bar_Update( *this\scroll\h )
                        ;                   Bar_Resize( *this\scroll\h\bar )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            
         EndWith
      EndProcedure
      
      Procedure Editor_Draw( *this._s_WIDGET )
         Protected String.s, StringWidth, ix, iy, iwidth, iheight
         Protected IT, Text_Y, Text_x, x, Y, Width, Drawing
         
         If Not *this\hide
            
            With *this
               ; Make output multi line text
               If *this\TextChange( ) Or is_resize_( *this )
                  Text_Update( *this )
                  
                  ;             If *this\EnteredLineIndex( ) >= 0
                  ;               Debug " key - update draw lines"
                  ;             Else
                  ;               Debug " edit update draw lines"
                  ;             EndIf
               EndIf
               
               ;;;;;;;;;;;;;;;;;;;;
               If *this\create = 1
                  *this\create = - 1
                  edit_make_text_position( *this )
                  ;             *this\scroll\v\hide = 0
                  ;             *this\scroll\h\hide = 0
                  ; Debug *this\class +" "+ *this\class
               EndIf
               ;
               ; then change text update cursor pos
               If *this\text\editable
                  If *this\EnteredLineIndex( ) >= 0
                     If Not ( *this\FocusedLine( ) And *this\FocusedLine( )\index = *this\EnteredLineIndex( ) )
                        *this\FocusedLine( ) = SelectElement( *this\__rows( ), *this\EnteredLineIndex( ) )
                     EndIf
                     Debug "----- " + *this\text\string
                     Debug "    key - change caret pos " + ListSize( *this\__rows( ) ) + " " + *this\FocusedLine( )\index + " " + *this\PressedLineIndex( )
                     
                     ;
                     edit_sel_row_text_( *this, *this\FocusedLine( ) )
                     edit_sel_text_( *this, *this\FocusedLine( ) )
                     
                     ;
                     ; edit_make_text_position( *this )
                     ;               ;bar_area_update( *this )
                     ;               make_scrollarea_x( *this, *this\text )
                     ;               If *this\scroll\h And
                     ;                  bar_SetState( *this\scroll\h, -*this\scroll_x( ) )
                     ;               EndIf
                     
                     If *this\scroll\v And Not *this\scroll\v\hide
                        If *this\FocusedLine( )\y + *this\scroll_y( ) < 0 Or
                           *this\FocusedLine( )\y + *this\FocusedLine( )\height + *this\scroll_y( ) > *this\inner_height( )
                           
                           If *this\FocusedLine( )\y + *this\scroll_y( ) < 0
                              Debug "       key - scroll ^"
                           ElseIf *this\FocusedLine( )\y + *this\FocusedLine( )\height + *this\scroll_y( ) > *this\inner_height( )
                              Debug "       key - scroll v"
                           EndIf
                           
                           ;row_scroll_y_( *this, *this\FocusedLine( ) )
                           bar_scroll_pos_( *this\scroll\v, *this\text\caret\y, *this\text\caret\height ) ; ok
                        EndIf
                     EndIf
                     
                     If *this\scroll\h And Not *this\scroll\h\hide
                        If *this\text\caret\x + *this\scroll_x( ) < 0 Or
                           *this\text\caret\x + *this\text\caret\width + *this\scroll_x( ) > *this\inner_width( )
                           
                           If *this\text\caret\x + *this\scroll_x( ) < 0
                              Debug "       key - scroll <"
                           ElseIf *this\text\caret\x + *this\text\caret\width + *this\scroll_x( ) > *this\inner_width( )
                              Debug "       key - scroll >"
                           EndIf
                           
                           ; bar_scroll_pos_( *this\scroll\h, (*this\text\caret\x - *this\text\padding\x), ( *this\text\padding\x * 2 + *this\MarginLine( )\width )) ; ok
                           bar_scroll_pos_( *this\scroll\h, *this\text\caret\x, *this\text\caret\width ) ; ok
                        EndIf
                     EndIf
                     
                     
                     *this\EnteredLineIndex( ) = - 1
                  EndIf
               EndIf
               
               ; Draw back color
               ;         If *this\color\fore[\color\state]
               ;           drawing_mode_( #PB_2DDrawing_Gradient )
               ;           draw_gradient_( *this\text\vertical, *this,\color\fore[\color\state],\color\back[\color\state], [#__c_frame] )
               ;         Else
               drawing_mode_alpha_( #PB_2DDrawing_Default )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back[0] )
               ;         EndIf
               
               ; Draw margin back color
               If *this\MarginLine( )\width > 0
                  If ( *this\TextChange( ) Or *this\resize )
                     *this\MarginLine( )\x      = *this\inner_x( )
                     *this\MarginLine( )\y      = *this\inner_y( )
                     *this\MarginLine( )\height = *this\inner_height( )
                  EndIf
                  
                  ; Draw margin
                  drawing_mode_alpha_( #PB_2DDrawing_Default ); | #PB_2DDrawing_AlphaBlend )
                  draw_box_( *this\MarginLine( )\x, *this\MarginLine( )\y, *this\MarginLine( )\width, *this\MarginLine( )\height, *this\MarginLine( )\color\back )
               EndIf
               
               ; widget inner coordinate
               ix      = *this\inner_x( ) + *this\MarginLine( )\width
               iY      = *this\inner_y( )
               iwidth  = *this\inner_width( )
               iheight = *this\inner_height( )
               
               
               Protected result, scroll_x, scroll_y, scroll_x_, scroll_y_
               Protected visible_items_y.l = 0, visible_items_height
               
               If *this\scroll\v
                  scroll_y_ = *this\scroll\v\bar\page\pos
               EndIf
               
               If *this\scroll\h
                  scroll_x_ = *this\scroll\h\bar\page\pos
               EndIf
               scroll_x = *this\scroll_x( )
               scroll_y = *this\scroll_y( )
               
               ; Debug ""+ scroll_x +" "+ scroll_x_ +" "+ scroll_y +" "+ scroll_y_
               
               
               If Not visible_items_y
                  visible_items_y = 0;*this\inner_y( ) ; *this\draw_y( ) ;
               EndIf
               If Not visible_items_height
                  If *this\draw_height( ) > *this\inner_height( )
                     visible_items_height = *this\inner_height( ) ;
                  Else
                     visible_items_height = *this\draw_height( )
                  EndIf
               EndIf
               
               
               ; Draw Lines text
               If *this\count\items
                  *this\VisibleFirstRow( ) = 0
                  *this\VisibleLastRow( )  = 0
                  
                  ;\\
                  clip_output_( *this, [#__c_draw2] )
                  PushListPosition( *this\__rows( ))
                  ForEach *this\__rows( )
                     ; Is visible lines - -  -
                     *this\__rows( )\visible = Bool( Not *this\__rows( )\hide And
                                                     (( *this\__rows( )\y - scroll_y_ ) < visible_items_y + visible_items_height ) And
                                                     ( *this\__rows( )\y + *this\__rows( )\height - scroll_y_ ) > visible_items_y )
                     
                     
                     ; Draw selections
                     If *this\__rows( )\visible
                        If Not *this\VisibleFirstRow( )
                           *this\VisibleFirstRow( ) = *this\__rows( )
                        EndIf
                        *this\VisibleLastRow( ) = *this\__rows( )
                        
                        
                        
                        
                        
                        
                        
                        Y      = row_y_( *this, *this\__rows( ) ) + scroll_y
                        Text_x = row_x_( *this, *this\__rows( ) ) + *this\__rows( )\text\x + scroll_x
                        Text_Y = row_y_( *this, *this\__rows( ) ) + *this\__rows( )\text\y + scroll_y
                        
                        Protected sel_text_x1 = edit_row_edit_text_x_( *this, [1] ) + scroll_x
                        Protected sel_text_x2 = edit_row_edit_text_x_( *this, [2] ) + scroll_x
                        Protected sel_text_x3 = edit_row_edit_text_x_( *this, [3] ) + scroll_x
                        
                        Protected sel_x = *this\inner_x( ) + *this\text\x
                        Protected sel_width = *this\inner_width( ) - *this\text\y * 2
                        
                        Protected text_sel_state_2 = 0;2 + Bool( *this\focus = #False )
                        Protected text_sel_width = *this\__rows( )\text\edit[2]\width + Bool( *this\focus = #False ) * *this\text\caret\width
                        
                        ;                 ;                 If *this\PressedLine( ) = *this\__rows( );Keyboard( )\key And *this\__rows( )\color\state
                        ;                 ;                   Debug "state - "+*this\__rows( )\index +" "+ *this\__rows( )\color\state
                        ;                 ;                 EndIf
                        ;                 ;
                        ;                 ;                 If *this\text\caret\y+1 + scroll_y = y
                        ;                 ;                   ;Debug " state "+ *this\__rows( )\index +" "+ *this\__rows( )\color\state; text_enter_state = 1
                        ;                 ;                   text_enter_state = 1
                        ;                 ;                 EndIf
                        ;                 If *this\__rows( )\color\state = 2
                        ;                   ; Debug *this\__rows( )\index
                        ;
                        ;                 EndIf
                        
                        If *this\text\editable
                           ; Draw lines
                           ; Если для итема установили задный
                           ; фон отличный от заднего фона едитора
                           If *this\__rows( )\color\back
                              ;                     drawing_mode_alpha_( #PB_2DDrawing_Default )
                              ;                     draw_roundbox_( sel_x,Y,sel_width ,*this\__rows( )\height, *this\__rows( )\round,*this\__rows( )\round, *this\__rows( )\color\back[0] )
                              
                              If *this\color\back And
                                 *this\color\back <> *this\__rows( )\color\back
                                 ; Draw margin back color
                                 If *this\MarginLine( )\width > 0
                                    ; то рисуем вертикальную линию на границе поля нумерации и начало итема
                                    drawing_mode_alpha_( #PB_2DDrawing_Default )
                                    draw_box_( *this\MarginLine( )\x, *this\__rows( )\y, *this\MarginLine( )\width, *this\__rows( )\height, *this\MarginLine( )\color\back )
                                    Line( *this\inner_x( ) + *this\MarginLine( )\width, *this\__rows( )\y, 1, *this\__rows( )\height, *this\color\back ) ; $FF000000 );
                                 EndIf
                              EndIf
                           EndIf
                           
                           ;                   If *this\__rows( )\press
                           ;                     *this\__rows( )\color\state = 0
                           ;                   ElseIf *this\__rows( )\enter ;And *this\press
                           ;                     *this\__rows( )\color\state = 1
                           ;                   Else
                           ;                     *this\__rows( )\color\state = 0
                           ;                   EndIf
                           
                           Protected text_enter_state = Bool( *this\__rows( )\color\state Or *this\__rows( ) = *this\PressedLine( ))
                           ;Bool( *this\__rows( ) = *this\EnteredLine( ) ); *this\__rows( )\color\state ; Bool( *this\__rows( )\color\state = 1 Or *this\__rows( ) = *this\PressedLine( ))
                           
                           ; text_enter_state = Bool(*this\__rows( ) = *this\FocusedLine( )) ; *this\__rows( )\color\state ; Bool( *this\__rows( )\color\state ) ; Bool( *this\__rows( )\index = *this\EnteredLine( )\index ) + Bool( *this\__rows( )\index = *this\EnteredLine( )\index And *this\focus = #False )*2
                           ; Draw entered selection
                           If text_enter_state = 1
                              If *this\__rows( )\color\back[text_enter_state] <> - 1              ; no draw transparent
                                 drawing_mode_alpha_( #PB_2DDrawing_Default )
                                 draw_roundbox_( sel_x, Y, sel_width , *this\__rows( )\height, *this\__rows( )\round, *this\__rows( )\round, *this\__rows( )\color\back[text_enter_state] )
                              EndIf
                              
                              If *this\__rows( )\color\frame[text_enter_state] <> - 1 ; no draw transparent
                                 drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                                 draw_roundbox_( sel_x, Y, sel_width , *this\__rows( )\height, *this\__rows( )\round, *this\__rows( )\round, *this\__rows( )\color\frame[text_enter_state] )
                              EndIf
                           EndIf
                        EndIf
                        
                        ;Debug *this\__rows( )\color\state
                        Protected text_sel_state = *this\color\state
                        Protected text_no_sel_state = 0
                        
                        
                        ; Draw text
                        ; Draw string
                        If *this\text\editable And
                           *this\__rows( )\text\edit[2]\width And
                           *this\__rows( )\color\front[2] <> *this\color\front
                           
                           CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                              If *this\__rows( )\text\string.s
                                 drawing_mode_alpha_( #PB_2DDrawing_Transparent )
                                 DrawRotatedText( Text_x, Text_Y, *this\__rows( )\text\string.s, *this\text\rotate, *this\__rows( )\color\front[text_no_sel_state] )
                              EndIf
                              
                              If *this\__rows( )\text\edit[2]\width
                                 drawing_mode_alpha_( #PB_2DDrawing_Default )
                                 draw_box_( sel_text_x2, Y, text_sel_width, *this\__rows( )\height, *this\__rows( )\color\back[text_sel_state] )
                              EndIf
                              
                              drawing_mode_alpha_( #PB_2DDrawing_Transparent )
                              
                              ; to right select
                              If ( ( *this\EnteredLine( ) And *this\PressedLine( ) And *this\EnteredLine( )\index > *this\PressedLine( )\Index ) Or
                                   ( *this\EnteredLine( ) = *this\PressedLine( ) And *this\edit_caret_1( ) > *this\edit_caret_2( ) ))
                                 
                                 If *this\__rows( )\text\edit[2]\string.s
                                    DrawRotatedText( sel_text_x2, Text_Y, *this\__rows( )\text\edit[2]\string.s, *this\text\rotate, *this\__rows( )\color\front[text_sel_state] )
                                 EndIf
                                 
                                 ; to left select
                              Else
                                 If *this\__rows( )\text\edit[2]\string.s
                                    DrawRotatedText( Text_x, Text_Y, *this\__rows( )\text\edit[1]\string.s + *this\__rows( )\text\edit[2]\string.s, *this\text\rotate, *this\__rows( )\color\front[text_sel_state] )
                                 EndIf
                                 
                                 If *this\__rows( )\text\edit[1]\string.s
                                    DrawRotatedText( Text_x, Text_Y, *this\__rows( )\text\edit[1]\string.s, *this\text\rotate, *this\__rows( )\color\front[text_no_sel_state] )
                                 EndIf
                              EndIf
                              
                           CompilerElse
                              If *this\__rows( )\text\edit[2]\width
                                 drawing_mode_alpha_( #PB_2DDrawing_Default )
                                 draw_box_( sel_text_x2, Y, text_sel_width, *this\__rows( )\height, *this\__rows( )\color\back[text_sel_state] )
                              EndIf
                              
                              drawing_mode_alpha_( #PB_2DDrawing_Transparent )
                              
                              If *this\__rows( )\text\edit[1]\string.s
                                 DrawRotatedText( sel_text_x1, Text_Y, *this\__rows( )\text\edit[1]\string.s, *this\text\rotate, *this\__rows( )\color\front[text_no_sel_state] )
                              EndIf
                              If *this\__rows( )\text\edit[2]\string.s
                                 DrawRotatedText( sel_text_x2, Text_Y, *this\__rows( )\text\edit[2]\string.s, *this\text\rotate, *this\__rows( )\color\front[text_sel_state] )
                              EndIf
                              If *this\__rows( )\text\edit[3]\string.s
                                 DrawRotatedText( sel_text_x3, Text_Y, *this\__rows( )\text\edit[3]\string.s, *this\text\rotate, *this\__rows( )\color\front[text_no_sel_state] )
                              EndIf
                           CompilerEndIf
                           
                        Else
                           If *this\__rows( )\text\edit[2]\width
                              drawing_mode_alpha_( #PB_2DDrawing_Default )
                              draw_box_( sel_text_x2, Y, text_sel_width, *this\__rows( )\height, $FFFBD9B7 );*this\__rows( )\color\back[2] )
                           EndIf
                           
                           If *this\color\state = 2
                              drawing_mode_( #PB_2DDrawing_Transparent )
                              DrawRotatedText( Text_x, Text_Y, *this\__rows( )\text\string.s, *this\text\rotate, *this\__rows( )\color\front[text_sel_state_2] )
                           Else
                              drawing_mode_( #PB_2DDrawing_Transparent )
                              DrawRotatedText( Text_x, Text_Y, *this\__rows( )\text\string.s, *this\text\rotate, *this\__rows( )\color\front[*this\__rows( )\color\state] )
                           EndIf
                        EndIf
                        
                        ; Draw margin text
                        If *this\MarginLine( )\width > 0
                           drawing_mode_( #PB_2DDrawing_Transparent )
                           DrawRotatedText( *this\__rows( )\margin\x + Bool( *this\text\vertical ) * scroll_x,
                                            *this\__rows( )\margin\y + Bool( Not *this\text\vertical ) * scroll_y,
                                            *this\__rows( )\margin\string, *this\text\rotate, *this\MarginLine( )\color\front )
                        EndIf
                        
                        ; Horizontal line
                        If *this\mode\GridLines And
                           *this\__rows( )\color\line And
                           *this\__rows( )\color\line <> *this\__rows( )\color\back
                           drawing_mode_alpha_( #PB_2DDrawing_Default )
                           draw_box_( row_x_( *this, *this\__rows( ) ), y + *this\__rows( )\height, *this\__rows( )\width, *this\mode\GridLines, $fff0f0f0 )
                        EndIf
                     EndIf
                  Next
                  PopListPosition( *this\__rows( )) ;
                  clip_output_( *this, [#__c_draw] )
               EndIf
               
               ; Draw caret
               If *this\text\editable And *this\focus
                  drawing_mode_( #PB_2DDrawing_XOr )
                  draw_box_( *this\inner_x( ) + *this\text\caret\x + scroll_x, *this\inner_y( ) + *this\text\caret\y + scroll_y, *this\text\caret\width, *this\text\caret\height, $FFFFFFFF )
               EndIf
               
               ; Draw frames
               If *this\notify
                  drawing_mode_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, $FF0000FF )
                  If *this\round : draw_roundbox_( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), *this\frame_height( ) + 2, *this\round, *this\round, $FF0000FF ) : EndIf  ; Сглаживание краев ) ))
               ElseIf *this\bs
                  drawing_mode_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame[\color\state] )
                  If *this\round : draw_roundbox_( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), *this\frame_height( ) + 2, *this\round, *this\round, *this\color\front[\color\state] ) : EndIf  ; Сглаживание краев ) ))
               EndIf
               
               If *this\TextChange( ) : *this\TextChange( ) = 0 : EndIf
               If *this\WidgetChange( ) : *this\WidgetChange( ) = 0 : EndIf
            EndWith
         EndIf
         
      EndProcedure
      
      Procedure Editor_Events_Key( *this._s_WIDGET, eventtype.l, mouse_x.l, mouse_y.l )
         Static _caret_last_pos_, DoubleClick.i
         Protected i.i, caret.i
         
         Protected Repaint.i, Item.i, String.s
         Protected _line_, _step_ = 1, _caret_min_ = 0, _caret_max_ = *this\__rows( )\text\len, _line_first_ = 0, _line_last_ = *this\count\items - 1
         Protected page_height = *this\inner_height( )
         
         With *this
            Select EventType
               Case #__event_Input ;- Input ( key )
                  If Not Keyboard( )\key[1] & #PB_Canvas_Control
                     If Not *this\notify And Keyboard( )\input
                        
                        edit_insert_text( *this, Chr( Keyboard( )\input ))
                        
                     EndIf
                  EndIf
                  
               Case #__event_KeyUp
                  ; Чтобы перерисовать
                  ; рамку вокруг едитора
                  ; reset all errors
                  If *this\notify
                     *this\notify = 0
                     ProcedureReturn - 1
                  EndIf
                  
                  
               Case #__event_KeyDown
                  Select Keyboard( )\key
                     Case #PB_Shortcut_Home
                        Repaint = edit_key_home_( *this )
                        
                     Case #PB_Shortcut_End
                        Repaint = edit_key_end_( *this )
                        
                     Case #PB_Shortcut_PageUp : Debug "key PageUp"
                        Repaint = edit_key_page_up_down_( *this, - 1, 1 )
                        
                     Case #PB_Shortcut_PageDown : Debug "key PageDown"
                        Repaint = edit_key_page_up_down_( *this, 1, 1 )
                        
                     Case #PB_Shortcut_Up       ; Ok
                        If *this\FocusedLine( ) And *this\edit_caret_1( ) > 0
                           If keyboard( )\key[1] & #PB_Canvas_Shift
                              If *this\FocusedLine( ) = *this\PressedLine( )
                                 ;Debug " le top remove - Pressed  " +" "+ *this\FocusedLine( )\text\string
                                 edit_sel_row_text_( *this, *this\FocusedLine( ), #__sel_to_first )
                                 edit_sel_text_( *this, *this\FocusedLine( ))
                              ElseIf *this\FocusedLine( )\index > *this\PressedLine( )\index
                                 ;Debug "  le top remove - " +" "+ *this\FocusedLine( )\text\string
                                 edit_sel_row_text_( *this, *this\FocusedLine( ), #__sel_to_remove )
                                 edit_sel_text_( *this, SelectElement(*this\__rows( ), *this\FocusedLine( )\index - 1))
                              Else
                                 ;Debug " ^le bottom  set - " +" "+ *this\FocusedLine( )\text\string
                                 edit_sel_row_text_( *this, *this\FocusedLine( ), #__sel_to_set )
                                 edit_sel_text_( *this, *this\FocusedLine( ))
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Alt
                              *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos
                              *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\FocusedLine( )\text\pos
                           Else
                              If *this\FocusedLine( )\index > 0
                                 *this\FocusedLine( )\color\state = #__s_0
                                 *this\FocusedLine( )             = SelectElement( *this\__rows( ), *this\FocusedLine( )\index - 1 )
                                 *this\FocusedLine( )\color\state = #__s_1
                                 
                                 If *this\edit_caret_0( ) > *this\FocusedLine( )\text\len
                                    *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                                 Else
                                    *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\edit_caret_0( )
                                 EndIf
                              Else
                                 *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                              edit_sel_reset_( *this )
                              
                              If *this\PressedLine( ) <> *this\FocusedLine( )
                                 If *this\PressedLine( ) And
                                    *this\PressedLine( )\press
                                    *this\PressedLine( )\press = #False
                                 EndIf
                                 *this\PressedLine( )       = *this\FocusedLine( )
                                 *this\PressedLine( )\press = #True
                              EndIf
                              
                              *this\edit_caret_2( ) = *this\edit_caret_1( )
                           EndIf
                           
                           edit_sel_row_text_( *this, *this\FocusedLine( ) )
                           edit_sel_text_( *this, *this\FocusedLine( ) )
                        EndIf
                        
                     Case #PB_Shortcut_Down     ; Ok
                        If *this\FocusedLine( ) And *this\edit_caret_1( ) < *this\text\len
                           If keyboard( )\key[1] & #PB_Canvas_Shift
                              If *this\FocusedLine( ) = *this\PressedLine( )
                                 ;Debug " le bottom  set - Pressed  " +" "+ *this\FocusedLine( )\text\string
                                 edit_sel_row_text_( *this, *this\FocusedLine( ), #__sel_to_last )
                                 edit_sel_text_( *this, *this\FocusedLine( ))
                              ElseIf *this\FocusedLine( )\index < *this\PressedLine( )\index
                                 ;Debug "  ^le top remove - " +" "+ *this\FocusedLine( )\text\string
                                 edit_sel_row_text_( *this, *this\FocusedLine( ), #__sel_to_remove )
                                 edit_sel_text_( *this, SelectElement(*this\__rows( ), *this\FocusedLine( )\index + 1))
                              Else
                                 ;Debug " le bottom  set - " +" "+ *this\FocusedLine( )\text\string
                                 edit_sel_row_text_( *this, *this\FocusedLine( ), #__sel_to_set )
                                 edit_sel_text_( *this, *this\FocusedLine( ))
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Alt
                              *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                              *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\FocusedLine( )\text\pos
                           Else
                              If *this\FocusedLine( )\index < ( *this\count\items - 1 )
                                 *this\FocusedLine( )\color\state = #__s_0
                                 *this\FocusedLine( )             = SelectElement( *this\__rows( ), *this\FocusedLine( )\index + 1 )
                                 *this\FocusedLine( )\color\state = #__s_1
                                 
                                 If *this\edit_caret_0( ) > *this\FocusedLine( )\text\len
                                    *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                                 Else
                                    *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\edit_caret_0( )
                                 EndIf
                              Else
                                 *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                              edit_sel_reset_( *this )
                              
                              If *this\PressedLine( ) <> *this\FocusedLine( )
                                 If *this\PressedLine( ) And
                                    *this\PressedLine( )\press
                                    *this\PressedLine( )\press = #False
                                 EndIf
                                 *this\PressedLine( )       = *this\FocusedLine( )
                                 *this\PressedLine( )\press = #True
                              EndIf
                              
                              *this\edit_caret_2( ) = *this\edit_caret_1( )
                           EndIf
                           
                           edit_sel_row_text_( *this, *this\FocusedLine( ) )
                           edit_sel_text_( *this, *this\FocusedLine( ) )
                        EndIf
                        
                     Case #PB_Shortcut_Left     ; Ok
                        If *this\FocusedLine( ) And *this\edit_caret_1( ) > 0
                           If *this\edit_caret_1( ) > *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                              *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                           EndIf
                           
                           If *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos
                              If *this\FocusedLine( )\index > 0
                                 *this\FocusedLine( )\color\state = #__s_0
                                 *this\FocusedLine( )             = SelectElement( *this\__rows( ), *this\FocusedLine( )\index - 1 )
                                 *this\FocusedLine( )\color\state = #__s_1
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Alt
                              *this\edit_caret_1( ) = edit_sel_start_word( *this, *this\edit_caret_0( ) - 1, *this\FocusedLine( ) )
                           Else
                              *this\edit_caret_1( ) - 1
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                              edit_sel_reset_( *this )
                              
                              *this\edit_caret_2( ) = *this\edit_caret_1( )
                           EndIf
                           
                           *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\FocusedLine( )\text\pos
                           
                           edit_sel_row_text_( *this, *this\FocusedLine( ) )
                           edit_sel_text_( *this, *this\FocusedLine( ) )
                        EndIf
                        
                     Case #PB_Shortcut_Right    ; Ok
                        If *this\FocusedLine( ) And *this\edit_caret_1( ) < *this\text\len
                           If *this\edit_caret_1( ) > *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                              *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                           EndIf
                           
                           If *this\edit_caret_1( ) = *this\FocusedLine( )\text\pos + *this\FocusedLine( )\text\len
                              If *this\FocusedLine( )\index < *this\count\items - 1
                                 
                                 If keyboard( )\key[1] & #PB_Canvas_Shift
                                    If *this\FocusedLine( ) = *this\PressedLine( )
                                       ;Debug " le bottom  set - Pressed  " +" "+ *this\FocusedLine( )\text\string
                                       edit_sel_row_text_( *this, *this\FocusedLine( ), #__sel_to_last )
                                       edit_sel_text_( *this, *this\FocusedLine( ))
                                    ElseIf *this\FocusedLine( )\index < *this\PressedLine( )\index
                                       ;Debug "  ^le top remove - " +" "+ *this\FocusedLine( )\text\string
                                       edit_sel_row_text_( *this, *this\FocusedLine( ), #__sel_to_remove )
                                       edit_sel_text_( *this, SelectElement(*this\__rows( ), *this\FocusedLine( )\index + 1))
                                    Else
                                       ;Debug " le bottom  set - " +" "+ *this\FocusedLine( )\text\string
                                       edit_sel_row_text_( *this, *this\FocusedLine( ), #__sel_to_set )
                                       edit_sel_text_( *this, *this\FocusedLine( ))
                                    EndIf
                                 EndIf
                                 
                                 *this\FocusedLine( )\color\state = #__s_0
                                 *this\FocusedLine( )             = SelectElement( *this\__rows( ), *this\FocusedLine( )\index + 1 )
                                 *this\FocusedLine( )\color\state = #__s_1
                              EndIf
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Alt
                              *this\edit_caret_1( ) = edit_sel_stop_word( *this, *this\edit_caret_0( ) + 1, *this\FocusedLine( ) )
                           Else
                              *this\edit_caret_1( ) + 1
                           EndIf
                           
                           If keyboard( )\key[1] & #PB_Canvas_Shift = #False
                              edit_sel_reset_( *this )
                              
                              *this\edit_caret_2( ) = *this\edit_caret_1( )
                           EndIf
                           
                           *this\edit_caret_0( ) = *this\edit_caret_1( ) - *this\FocusedLine( )\text\pos
                           
                           edit_sel_row_text_( *this, *this\FocusedLine( ) )
                           edit_sel_text_( *this, *this\FocusedLine( ) )
                        EndIf
                        
                     Case #PB_Shortcut_Back
                        If Not *this\notify
                           Repaint = edit_key_backup_( *this )
                        EndIf
                        
                     Case #PB_Shortcut_Delete
                        If Not *this\notify
                           Repaint = edit_key_delete_( *this )
                        EndIf
                        
                     Case #PB_Shortcut_Return
                        If Not *this\notify
                           Repaint = edit_key_return_( *this )
                        EndIf
                        
                        
                     Case #PB_Shortcut_A        ; Ok
                        If Keyboard( )\key[1] & #PB_Canvas_Control
                           If *this\text\edit[2]\len <> *this\text\len
                              
                              ; select first and last items
                              *this\PressedLineIndex( ) = *this\count\items - 1
                              *this\FocusedLine( )      = SelectElement( *this\__rows( ), 0 )
                              
                              edit_sel_text_( *this, #PB_All )
                              
                              Repaint = 1
                           EndIf
                        EndIf
                        
                     Case #PB_Shortcut_C, #PB_Shortcut_X
                        If Keyboard( )\key[1] & #PB_Canvas_Control
                           If *this\text\edit[2]\len
                              SetClipboardText( *this\text\edit[2]\string )
                              
                              If Keyboard( )\key = #PB_Shortcut_X
                                 edit_ClearItems( *this )
                              EndIf
                           EndIf
                        EndIf
                        
                     Case #PB_Shortcut_V
                        ; edit_key_v_
                        If Keyboard( )\key[1] & #PB_Canvas_Control
                           If *this\text\editable
                              Protected Text.s = GetClipboardText( )
                              
                              If Not *this\text\multiLine
                                 Text = ReplaceString( Text, #LFCR$, #LF$ )
                                 Text = ReplaceString( Text, #CRLF$, #LF$ )
                                 Text = ReplaceString( Text, #CR$, #LF$ )
                                 Text = RemoveString( Text, #LF$ )
                              EndIf
                              
                              edit_insert_text( *this, Text )
                           EndIf
                        EndIf
                        
                  EndSelect
                  
                  Select Keyboard( )\key
                     Case #PB_Shortcut_Home,
                          #PB_Shortcut_End,
                          #PB_Shortcut_PageUp,
                          #PB_Shortcut_PageDown,
                          #PB_Shortcut_Up,
                          #PB_Shortcut_Down,
                          #PB_Shortcut_Left,
                          #PB_Shortcut_Right,
                          #PB_Shortcut_Delete,
                          #PB_Shortcut_Return ;, #PB_Shortcut_back
                        
                        If Not Repaint
                           *this\notify = - 1
                           ProcedureReturn - 1
                        EndIf
                        
                     Case #PB_Shortcut_A,
                          #PB_Shortcut_C,
                          #PB_Shortcut_X,
                          #PB_Shortcut_V
                        
                  EndSelect
                  
            EndSelect
         EndWith
         
         ProcedureReturn Repaint
      EndProcedure
      
      Procedure Editor_Events( *this._s_WIDGET, eventtype.l, *item._s_ROWS, item = - 1 )
         Static DoubleClick.i = -1
         Protected Repaint.i, Caret.i, _line_.l, String.s
         Protected *currentRow._s_ROWS, mouse_x.l = mouse( )\x, mouse_y.l = mouse( )\y
         Static click_time
         
         
         With *this
            
            If *this\row
               ; edit key events
               If eventtype = #__event_Input Or
                  eventtype = #__event_KeyDown Or
                  eventtype = #__event_KeyUp
                  
                  Repaint | Editor_Events_Key( *this, eventtype, mouse( )\x, mouse( )\y )
               EndIf
            EndIf
            
         EndWith
         
         ;          If *this\TextChange( )
         ;             *this\WidgetChange( ) = 1
         ;          EndIf
         
         If Repaint
            PushListPosition( *this\__rows( ) )
            If *this\TextChange( )
               DoEvents( *this, #__event_Change);, 0, 0 )
            EndIf
            PopListPosition( *this\__rows( ) )
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      ;-
      Declare tt_close( *this._s_tt )
      
      Procedure tt_tree_Draw( *this._s_tt, *color._s_color = 0 )
         With *this
            If *this And PB(IsGadget)( *this\gadget ) And StartDrawing( CanvasOutput( *this\gadget ))
               If Not *color
                  *color = *this\color
               EndIf
               
               ;_draw_font_( *this )
               If *this\text\fontID
                  DrawingFont( *this\text\fontID )
               EndIf
               
               drawing_mode_alpha_( #PB_2DDrawing_Default )
               draw_box_( 0, 1, *this\width, *this\height - 2, *color\back[*color\state] )
               drawing_mode_( #PB_2DDrawing_Transparent )
               DrawText( *this\text\x, *this\text\y, *this\text\string, *color\front[*color\state] )
               drawing_mode_( #PB_2DDrawing_Outlined )
               Line( 0, 0, *this\width, 1, *color\frame[*color\state] )
               Line( 0, *this\height - 1, *this\width, 1, *color\frame[*color\state] )
               Line( *this\width - 1, 0, 1, *this\height, *color\frame[*color\state] )
               StopDrawing( )
            EndIf
         EndWith
      EndProcedure
      
      Procedure tt_tree_callBack( )
         ;     ;SetActiveWindow( EventWidget( )\canvas\window )
         ;     ;SetActiveGadget( EventWidget( )\\canvas\gadget )
         ;
         ;     If FocusedRow( EventWidget( ) )
         ;       FocusedRow( EventWidget( ) )\color\state = 0
         ;     EndIf
         ;
         ;     FocusedRow( EventWidget( ) ) = EventWidget( )*this\__rows( )
         ;     EventWidget( )*this\__rows( )\color\state = 2
         ;     EventWidget( )\color\state = 2
         ;
         ;     ;Tree_reDraw( EventWidget( ))
         
         tt_close( GetWindowData( EventWindow( ) ))
      EndProcedure
      
      Procedure tt_creare( *this._s_WIDGET, x, y )
         With *this
            If *this
               EventWidget( ) = *this
               *this\ToolTipRow( ).allocate( TT )
               *this\ToolTipRow( )\visible = 1
               *this\ToolTipRow( )\x       = x + *this\__rows( )\x + *this\__rows( )\width - 1
               *this\ToolTipRow( )\y       = y + *this\__rows( )\y - *this\scroll\v\bar\page\pos
               
               *this\ToolTipRow( )\width = *this\__rows( )\text\width - *this\inner_width( ) + ( *this\__rows( )\text\x - *this\__rows( )\x ) + 5 ; - ( *this\scroll_width( ) - *this\__rows( )\width )  ; - 32 + 5
               
               If *this\ToolTipRow( )\width < 6
                  *this\ToolTipRow( )\width = 0
               EndIf
               
               ;Debug *this\ToolTipRow( )\width ;Str( *this\__rows( )\text\x - *this\__rows( )\x )
               
               *this\ToolTipRow( )\height = *this\__rows( )\height
               Protected flag
               CompilerIf #PB_Compiler_OS = #PB_OS_Linux
                  flag = #PB_Window_Tool
               CompilerEndIf
               
               *this\ToolTipRow( )\window = OpenWindow( #PB_Any, *this\ToolTipRow( )\x, *this\ToolTipRow( )\y, *this\ToolTipRow( )\width, *this\ToolTipRow( )\height, "",
                                                        #PB_Window_BorderLess | #PB_Window_NoActivate | flag, WindowID( *this\root\canvas\window ))
               
               *this\ToolTipRow( )\gadget      = CanvasGadget( #PB_Any, 0, 0, *this\ToolTipRow( )\width, *this\ToolTipRow( )\height )
               *this\ToolTipRow( )\color       = *this\__rows( )\color
               *this\ToolTipRow( )\text        = *this\__rows( )\text
               *this\ToolTipRow( )\text\fontID = *this\__rows( )\text\fontID
               *this\ToolTipRow( )\text\x      = - ( *this\inner_width( ) - ( *this\__rows( )\text\x - *this\__rows( )\x )) + 1
               *this\ToolTipRow( )\text\y      = ( *this\__rows( )\text\y - *this\__rows( )\y ) + *this\scroll\v\bar\page\pos
               
               BindEvent( #PB_Event_ActivateWindow, @tt_tree_callBack( ), *this\ToolTipRow( )\window )
               SetWindowData( *this\ToolTipRow( )\window, *this\ToolTipRow( ) )
               tt_tree_Draw( *this\ToolTipRow( ) )
            EndIf
         EndWith
      EndProcedure
      
      Procedure tt_close( *tt._s_tt )
         If IsWindow( *tt\window )
            *tt\visible = 0
            ; UnbindEvent( #PB_Event_ActivateWindow, @tt_tree_callBack( ), *tt\window )
            CloseWindow( *tt\window )
            ; ClearStructure( *this, _s_tt ) ;??????
         EndIf
      EndProcedure
      
      ;-
      ;-  TREE
      Procedure.l update_items_( *this._s_WIDGET, _change_ = 1 )
         Protected state.b, x.l, y.l
         
         With *this
            If Not *this\hide
               ;\\ update coordinate
               If _change_ > 0
                  ; Debug "   " + #PB_Compiler_Procedure + "( )"
                  
                  ;\\
                  ReDrawing( *this, *this\EnteredLine( ) )
                  
                  
                  ;\\ if the item list has changed
                  *this\scroll_width( ) = 0
                  If ListSize( *this\columns( ) )
                     *this\scroll_height( ) = *this\columns( )\height
                  Else
                     *this\scroll_height( ) = 0
                  EndIf
                  
                  ; reset item z - order
                  Protected buttonpos = 6
                  Protected buttonsize = 9
                  Protected boxpos = 4
                  Protected boxsize = 11
                  Protected bs = Bool( *this\fs )
                  
                  ;\\
                  PushListPosition( *this\__rows( ))
                  ForEach *this\__rows( )
                     *this\__rows( )\index = ListIndex( *this\__rows( ))
                     
                     If *this\__rows( )\hide
                        *this\__rows( )\visible = 0
                     Else
                        ;\\ drawing item font
                        draw_font_item_( *this, *this\__rows( ), *this\__rows( )\TextChange( ) )
                        
                        ;\\ draw items height
                        CompilerIf #PB_Compiler_OS = #PB_OS_Linux
                           CompilerIf Subsystem("qt")
                              *this\__rows( )\height = *this\__rows( )\text\height - 1
                           CompilerElse
                              *this\__rows( )\height = *this\__rows( )\text\height + 3
                           CompilerEndIf
                        CompilerElseIf #PB_Compiler_OS = #PB_OS_MacOS
                           *this\__rows( )\height = *this\__rows( )\text\height + 4
                        CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
                           If *this\type = #__type_ListView
                              *this\__rows( )\height = *this\__rows( )\text\height
                           Else
                              *this\__rows( )\height = *this\__rows( )\text\height + 2
                           EndIf
                        CompilerEndIf
                        
                        *this\__rows( )\y = *this\scroll_height( )
                        
                        If *this\row\column = 0
                           ;\\ check box size
                           If ( *this\mode\check = #__m_checkselect Or
                                *this\mode\check = #__m_optionselect )
                              *this\__rows( )\CheckedBox( )\width  = boxsize
                              *this\__rows( )\CheckedBox( )\height = boxsize
                           EndIf
                           
                           ;\\ collapse box size
                           If ( *this\mode\Lines Or *this\mode\Buttons ) And
                              Not ( *this\__rows( )\sublevel And *this\mode\check = #__m_optionselect )
                              *this\__rows( )\ButtonBox( )\width  = buttonsize
                              *this\__rows( )\ButtonBox( )\height = buttonsize
                           EndIf
                           
                           ;\\ sublevel position
                           *this\row\sublevelpos = *this\__rows( )\sublevel * *this\row\sublevelsize + Bool( *this\mode\check ) * (boxpos + boxsize) + Bool( *this\mode\Lines Or *this\mode\Buttons ) * ( buttonpos + buttonsize )
                           
                           ;\\ check & option box position
                           If ( *this\mode\check = #__m_checkselect Or
                                *this\mode\check = #__m_optionselect )
                              
                              If *this\__rows( )\ParentRow( ) And *this\mode\check = #__m_optionselect
                                 *this\__rows( )\CheckedBox( )\x = *this\row\sublevelpos - *this\__rows( )\CheckedBox( )\width
                              Else
                                 *this\__rows( )\CheckedBox( )\x = boxpos
                              EndIf
                              *this\__rows( )\CheckedBox( )\y = ( *this\__rows( )\height ) - ( *this\__rows( )\height + *this\__rows( )\CheckedBox( )\height ) / 2
                           EndIf
                           
                           ;\\ expanded & collapsed box position
                           If ( *this\mode\Lines Or *this\mode\Buttons ) And Not ( *this\__rows( )\sublevel And *this\mode\check = #__m_optionselect )
                              
                              If *this\mode\check = #__m_optionselect
                                 *this\__rows( )\ButtonBox( )\x = *this\row\sublevelpos - 10
                              Else
                                 *this\__rows( )\ButtonBox( )\x = *this\row\sublevelpos - (( buttonpos + buttonsize ) - 4)
                              EndIf
                              
                              *this\__rows( )\ButtonBox( )\y = ( *this\__rows( )\height ) - ( *this\__rows( )\height + *this\__rows( )\ButtonBox( )\height ) / 2
                           EndIf
                           
                           ;\\ image position
                           If *this\__rows( )\image\id
                              *this\__rows( )\image\x = *this\row\sublevelpos + *this\image\padding\x + 2
                              *this\__rows( )\image\y = ( *this\__rows( )\height - *this\__rows( )\image\height ) / 2
                              
                              If *this\type = #__type_ListIcon
                                 *this\row\sublevelpos = *this\__rows( )\image\x
                              EndIf
                           Else
                              If *this\type = #__type_ListIcon
                                 ;*this\row\sublevelpos = *this\__rows( )\x
                              EndIf
                           EndIf
                           
                        EndIf
                        
                        If *this\row\column = 0
                           *this\__rows( )\x = *this\columns( )\x
                        Else
                           *this\__rows( )\x = *this\columns( )\x + *this\row\sublevelpos + *this\MarginLine( )\width
                        EndIf
                        
                        ;\\ text position
                        If *this\__rows( )\text\string
                           If *this\row\column > 0
                              *this\__rows( )\text\x = *this\text\padding\x
                           Else
                              *this\__rows( )\text\x = *this\row\sublevelpos + *this\MarginLine( )\width + *this\text\padding\x
                           EndIf
                           *this\__rows( )\text\y = ( *this\__rows( )\height - *this\__rows( )\text\height ) / 2
                        EndIf
                        
                        ;\\ vertical scroll max value
                        *this\scroll_height( ) + *this\__rows( )\height + Bool( *this\__rows( )\index <> *this\count\items - 1 ) * *this\mode\GridLines
                        
                        ;\\ horizontal scroll max value
                        If *this\type = #__type_ListIcon
                           If *this\scroll_width( ) < ( *this\row\sublevelpos + *this\text\padding\x + *this\MarginLine( )\width + *this\columns( )\x + *this\columns( )\width )
                              *this\scroll_width( ) = ( *this\row\sublevelpos + *this\text\padding\x + *this\MarginLine( )\width + *this\columns( )\x + *this\columns( )\width )
                           EndIf
                        Else
                           If *this\scroll_width( ) < ( *this\__rows( )\x + *this\__rows( )\text\x + *this\__rows( )\text\width + *this\mode\fullSelection + *this\text\padding\x * 2 ) ; - *this\inner_x( )
                              *this\scroll_width( ) = ( *this\__rows( )\x + *this\__rows( )\text\x + *this\__rows( )\text\width + *this\mode\fullSelection + *this\text\padding\x * 2 ) ; - *this\inner_x( )
                           EndIf
                        EndIf
                     EndIf
                  Next
                  PopListPosition( *this\__rows( ))
                  
                  ;\\
                  If *this\mode\gridlines
                     ; *this\scroll_height( ) - *this\mode\gridlines
                  EndIf
               EndIf
            EndIf
         EndWith
         
      EndProcedure
      
      Procedure.l update_visible_items_( *this._s_WIDGET, visible_items_height.l = 0 )
         Protected result, scroll_y = *this\scroll\v\bar\page\pos
         Protected visible_items_y.l = 0
         
         PushListPosition( *this\__rows( ))
         
         If Not visible_items_y
            visible_items_y = 0;*this\inner_y( ) ; *this\draw_y( ) ;
         EndIf
         If Not visible_items_height
            If *this\draw_height( ) > *this\inner_height( )
               visible_items_height = *this\inner_height( ) ;
            Else
               visible_items_height = *this\draw_height( )
            EndIf
         EndIf
         
         
         ForEach *this\__rows( )
            *this\__rows( )\visible = Bool( Not *this\__rows( )\hide And
                                            (( *this\__rows( )\y - scroll_y ) < visible_items_y + visible_items_height ) And
                                            ( *this\__rows( )\y + *this\__rows( )\height - scroll_y ) > visible_items_y )
            
            ;;Debug ""+*this\class +" "+ visible_items_height  +" "+ *this\__rows( )\height
            
            If *this\__rows( )\index % 2 = 0
               If *this\__rows( )\color\back = 0
                  ; Debug *this\color\back;*this\__rows( )\index
                  *this\__rows( )\color\back = $FFF3F3F3;*this\__rows( )\color\back[1] ; *this\color\back & $FFFFFF | *this\color\_alpha << 24
               EndIf
            EndIf
            
            
            ;\\ add new draw list
            If *this\__rows( )\visible And
               AddElement( *this\VisibleRows( ))
               *this\VisibleRows( ) = *this\__rows( )
               
               ;\\
               If *this\row\column = 0
                  If ListSize( *This\Columns( ) ) = 1
                     *this\columns( )\width = *this\inner_width( ) - *this\columns( )\x
                     *this\__rows( )\width  = *this\columns( )\width
                  Else
                     *this\__rows( )\width = *this\columns( )\width + *this\row\sublevelpos + *this\MarginLine( )\width
                  EndIf
               Else
                  ;\\
                  If *this\__rows( )\width <> *this\columns( )\width
                     *this\__rows( )\width = *this\columns( )\width
                  EndIf
               EndIf
               
               ;\\
               If Not *this\VisibleFirstRow( )
                  *this\VisibleFirstRow( ) = *this\__rows( )
                  ; Debug ""+*this\VisibleFirstRow( )\x+" "+*this\VisibleFirstRow( )\y
               EndIf
               *this\VisibleLastRow( ) = *this\__rows( )
               
               ; Debug ""+*this\VisibleLastRow( )\index +" "+ *this\VisibleLastRow( )\y
               result = 1
            EndIf
         Next
         
         PopListPosition( *this\__rows( ))
         ProcedureReturn result
      EndProcedure
      
      Procedure.l draw_items_( *this._s_WIDGET, List *rows._s_ROWS( ), _scroll_x_, _scroll_y_ )
         Protected state.b, x.l, y.l, xs.l, ys.l, _box_x_.l, _box_y_.l, minus.l = 7
         Protected bs = Bool( *this\fs )
         
         ;\\
         PushListPosition( *rows( ))
         ForEach *rows( )
            If *rows( )\visible
               ;\\ init real drawing font
               draw_font_item_( *this, *rows( ), 0 )
               
               ;\\
               state = *rows( )\color\state
               X     = row_x_( *this, *rows( ) )
               Y     = row_y_( *this, *rows( ) )
               Xs    = x - _scroll_x_
               Ys    = y - _scroll_y_
               
               ;\\ Draw selector back
               If *rows( )\color\back[state]
                  drawing_mode_alpha_( #PB_2DDrawing_Default )
                  If *this\flag & #__Flag_FullSelection
                     draw_roundbox_( *this\inner_x( ), ys, *this\scroll_width( ), *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\back[state] )
                  Else
                     draw_roundbox_( x, ys, *rows( )\width, *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\back[state] )
                  EndIf
               EndIf
               
               ;\\ Draw items image
               If *rows( )\image\id
                  drawing_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawAlphaImage( *rows( )\image\id, xs + *rows( )\image\x, ys + *rows( )\image\y, *rows( )\color\_alpha )
                  ; draw_background_image_(*rows( ), xs, ys )
               EndIf
               
               ;\\ Draw items text
               If *rows( )\text\string.s
                  drawing_mode_( #PB_2DDrawing_Transparent )
                  DrawRotatedText( xs + *rows( )\text\x, ys + *rows( )\text\y, *rows( )\text\string.s, *this\text\rotate, *rows( )\color\front[state] )
               EndIf
               
               ;\\ Draw selector frame
               If *rows( )\color\frame[state]
                  drawing_mode_( #PB_2DDrawing_Outlined )
                  If *this\flag & #__Flag_FullSelection
                     draw_roundbox_( *this\inner_x( ), ys, *this\scroll_width( ), *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\frame[state] )
                  Else
                     draw_roundbox_( x, ys, *rows( )\width, *rows( )\height, *rows( )\round, *rows( )\round, *rows( )\color\frame[state] )
                  EndIf
               EndIf
               
               ;\\ Horizontal line
               If *this\mode\GridLines And
                  ;*rows( )\color\line And
                  *rows( )\color\line <> *rows( )\color\back
                  drawing_mode_alpha_( #PB_2DDrawing_Default )
                  draw_box_( x, ys + *rows( )\height, *rows( )\width, *this\mode\GridLines, $fff0f0f0 )
               EndIf
            EndIf
         Next
         
         
         ;           drawing_mode_alpha_( #PB_2DDrawing_Default ); | #PB_2DDrawing_AlphaBlend )
         ;          draw_box_( *this\inner_x( ), *this\inner_y( ), *this\row\sublevelsize, *this\inner_height( ), *this\__rows( )\ParentRow( )\color\back )
         
         If *this\row\column = 0
            ;         SelectElement( *this\columns( ), 0 )
            ;         *rows( ) = *this\__rows( )
            Protected *buttonBox._s_buttons
            
            ; Draw plots
            If *this\mode\Lines
               drawing_mode_alpha_( #PB_2DDrawing_Default )
               ; drawing_mode_( #PB_2DDrawing_CustomFilter ) : CustomFilterCallback( @Draw_Plot( ))
               
               ForEach *rows( )
                  If *rows( )\visible And Not *rows( )\hide
                     *buttonBox = *rows( )\last\ButtonBox( )
                     Xs         = row_x_( *this, *rows( ) ) - _scroll_x_
                     Ys         = row_y_( *this, *rows( ) ) - _scroll_y_
                     ; Debug " 9999 "+*rows( )\text\string
                     
                     ; for the tree vertical line
                     If *rows( )\last And Not *rows( )\last\hide And *rows( )\last\sublevel
                        Line((xs + *buttonBox\x + *buttonBox\width / 2), (ys + *rows( )\height), 1, (*rows( )\last\y - *rows( )\y) - *rows( )\last\height / 2, *rows( )\color\line )
                     EndIf
                     If *rows( )\ParentRow( ) And Not *rows( )\ParentRow( )\visible And *rows( )\ParentRow( )\last = *rows( ) And *rows( )\sublevel
                        Line((xs + *rows( )\ButtonBox( )\x + *rows( )\ButtonBox( )\width / 2), (*rows( )\ParentRow( )\y + *rows( )\ParentRow( )\height) - _scroll_y_, 1, (*rows( )\y - *rows( )\ParentRow( )\y) - *rows( )\height / 2, *rows( )\ParentRow( )\color\line )
                     EndIf
                     
                     ; for the tree horizontal line
                     If Not (*this\mode\Buttons And *rows( )\childrens)
                        Line((xs + *rows( )\ButtonBox( )\x + *rows( )\ButtonBox( )\width / 2), (ys + *rows( )\height / 2), 7, 1, *rows( )\color\line )
                     Else
                        If Bool( Not *rows( )\ButtonBox( )\state)
                           ;  LineXY((xs + *buttonBox\x+2), (ys + 9), (x + *buttonBox\x + *buttonBox\width / 2-1), ys + *rows( )\height-1, *rows( )\color\line )
                           LineXY((xs + *buttonBox\x - 1), (ys + 10), (xs + *buttonBox\x + *buttonBox\width / 2 - 1), ys + *rows( )\height - 1, *rows( )\color\line )
                           ;  LineXY((xs + *buttonBox\x-2), (ys + 12), (x + *buttonBox\x + *buttonBox\width / 2-1), ys + *rows( )\height-1, *rows( )\color\line )
                        EndIf
                     EndIf
                  EndIf
               Next
               
               ; for the tree item first vertical line
               If *this\FirstRow( ) And *this\LastRow( )
                  Line((*this\inner_x( ) + *this\FirstRow( )\ButtonBox( )\x + *this\FirstRow( )\ButtonBox( )\width / 2) - _scroll_x_ + 4, (row_y_( *this, *this\FirstRow( ) ) + *this\FirstRow( )\height / 2) - _scroll_y_, 1, (*this\LastRow( )\y - *this\FirstRow( )\y), *this\FirstRow( )\color\line )
               EndIf
            EndIf
            
            ;\\ Draw buttons
            If *this\mode\Buttons Or
               ( *this\mode\check = #__m_checkselect Or *this\mode\check = #__m_optionselect )
               
               ;\\ Draw boxs ( check&option )
               ForEach *rows( )
                  If *rows( )\visible And *this\mode\check
                     X = row_x_( *this, *rows( ) ) - _scroll_x_
                     Y = row_y_( *this, *rows( ) ) - _scroll_y_
                     
                     If *rows( )\ParentRow( ) And *this\mode\check = #__m_optionselect
                        ; option box
                        draw_button_( 1, x + *rows( )\CheckedBox( )\x, y + *rows( )\CheckedBox( )\y, *rows( )\CheckedBox( )\width, *rows( )\CheckedBox( )\height, *rows( )\CheckedBox( )\state , 4 )
                     Else
                        ; check box
                        draw_button_( 3, x + *rows( )\CheckedBox( )\x, y + *rows( )\CheckedBox( )\y, *rows( )\CheckedBox( )\width, *rows( )\CheckedBox( )\height, *rows( )\CheckedBox( )\state , 2 )
                     EndIf
                  EndIf
               Next
               
               ;\\ Draw buttons ( expanded&collapsed )
               ForEach *rows( )
                  If *rows( )\visible And Not *rows( )\hide
                     
                     X = row_x_( *this, *rows( ) ) + *rows( )\ButtonBox( )\x - _scroll_x_
                     Y = row_y_( *this, *rows( ) ) + *rows( )\ButtonBox( )\y - _scroll_y_
                     
                     If *this\mode\Buttons And *rows( )\childrens And
                        Not ( *rows( )\sublevel And *this\mode\check = #__m_optionselect )
                        
                        ;               If #PB_Compiler_OS = #PB_OS_Windows Or
                        ;                  (*rows( )\ParentRow( ) And *rows( )\ParentRow( )\last And *rows( )\ParentRow( )\sublevel = *rows( )\ParentRow( )\last\sublevel)
                        ;
                        ;                 draw_button_( 0, x, y, *rows( )\ButtonBox( )\width, *rows( )\ButtonBox( )\height, 0,2)
                        ;                 draw_box( *rows( )\ButtonBox( ), color\frame )
                        ;
                        ;                 Line(x + 2, y + *rows( )\ButtonBox( )\height/2, *rows( )\ButtonBox( )\width - 4, 1, $ff000000)
                        ;                 If *rows( )\ButtonBox( )\state
                        ;                   Line(x + *rows( )\ButtonBox( )\width/2, y + 2, 1, *rows( )\ButtonBox( )\height - 4, $ff000000)
                        ;                 EndIf
                        ;
                        ;               Else
                        
                        
                        If (x - 7 >= 0 And x + 7 <= *this\root\width) And ; в мак ос эти строки не нужны так как plot( ) может рисовать за пределамы границы
                           (y - 7 >= 0 And y + 7 <= *this\root\height)
                           
                           If *rows( )\color\state
                              DrawArrow2(x, y, 3 - Bool(*rows( )\ButtonBox( )\state))
                           Else
                              DrawArrow2(x, y, 3 - Bool(*rows( )\ButtonBox( )\state), $ff000000)
                           EndIf
                        EndIf
                        
                        ;               EndIf
                        
                     EndIf
                  EndIf
               Next
            EndIf
         Else
            ;Debug 777777
         EndIf
         ;
         PopListPosition( *rows( )) ;
         
      EndProcedure
      
      Procedure.l Tree_Draw( *this._s_WIDGET )
         Protected state.b, x.l, y.l, scroll_x, scroll_y
         
         If Not *this\hide
            If *this\WidgetChange( ) = - 2 : *this\WidgetChange( ) = 1 : EndIf
            If *this\WidgetChange( ) = - 1 : *this\WidgetChange( ) = 1 : EndIf
            
            ;;Debug " "+*this\WidgetChange( )
            update_items_( *this, *this\WidgetChange( ) )
            ;;Debug "   "+*this\WidgetChange( )
            
            
            ;\\
            If *this\WidgetChange( ) > 0 Or is_resize_( *this )
               ; Debug "   " + #PB_Compiler_Procedure + "( )"+*this\width +" "+*this\height+" "+*this\scroll_width( )+" "+*this\scroll_height( )
               bar_area_update( *this )
               *this\WidgetChange( ) = - 2
            EndIf
            
            ;\\ SetState( scroll-to-see )
            If *this\FocusedRow( ) And *this\scroll\state = - 1
               
               row_scroll_y_( *this, *this\FocusedRow( ) )
               
               *this\scroll\v\WidgetChange( ) = 0
               *this\scroll\state             = #True
            EndIf
            
            ;\\
            If *this\WidgetChange( ) < 0
               ; reset draw list
               ClearList( *this\VisibleRows( ))
               *this\VisibleFirstRow( ) = 0
               *this\VisibleLastRow( )  = 0
               
               update_visible_items_( *this )
            EndIf
            
            ;\\
            If Not Drawing( )
               ;If *this\FocusedRow( )
               ReDrawing( *this, *this\__rows( ) )
               ;EndIf
            EndIf
            
            ;\\ Draw background
            If *this\color\_alpha
               drawing_mode_alpha_( #PB_2DDrawing_Default )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back )
            EndIf
            
            ;\\ Draw background image
            If *this\image\id
               drawing_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *this\image\id, *this\image\x, *this\image\y, *this\color\_alpha )
               ; draw_background_image_(*this, 0, 0 )
            EndIf
            
            ;\\
            clip_output_( *this, [#__c_draw2] )
            draw_items_( *this, *this\VisibleRows( ), *this\scroll\h\bar\page\pos, *this\scroll\v\bar\page\pos )
            clip_output_( *this, [#__c_draw] )
            
            ;\\ draw frames
            If *this\bs
               drawing_mode_( #PB_2DDrawing_Outlined )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame[*this\color\state] )
               If *this\round : draw_roundbox_( *this\frame_x( ), *this\frame_y( ) - 1, *this\frame_width( ), *this\frame_height( ) + 2, *this\round, *this\round, *this\color\front[*this\color\state] ) : EndIf  ; Сглаживание краев ) ))
            EndIf
            
         EndIf
         
      EndProcedure
      
      Procedure.i Tree_AddItem( *this._s_WIDGET, position.l, Text.s, Image.i = -1, sublevel.i = 0 )
         Protected *rows._s_ROWS, last, *last_row._s_ROWS, *parent_row._s_ROWS
         ; sublevel + 1
         
         ;With *this
         If *this
            ;         If IsImage(Image) Or *this\mode\check
            ;               If *this\row\sublevelcolumn = 0
            ;                 *this\row\sublevelcolumn = 1
            ;                 Debug 88888
            ;                 AddColumn( *this, 0, "N", 50 )
            ;                ; *this\row\column = 1
            ;               EndIf
            ;             EndIf
            
            
            ;{ Генерируем идентификатор
            If position < 0 Or position > ListSize( *this\__rows( )) - 1
               LastElement( *this\__rows( ))
               *rows = AddElement( *this\__rows( ))
               
               If position < 0
                  position = ListIndex( *this\__rows( ))
               EndIf
            Else
               *rows = SelectElement( *this\__rows( ), position )
               
               ; for the tree( )
               If sublevel > *this\__rows( )\sublevel
                  PushListPosition( *this\__rows( ))
                  If PreviousElement( *this\__rows( ))
                     *this\LastAddRow( ) = *this\__rows( )
                     ;;NextElement( *this\__rows( ))
                  Else
                     last     = *this\LastAddRow( )
                     sublevel = *this\__rows( )\sublevel
                  EndIf
                  PopListPosition( *this\__rows( ))
               Else
                  last     = *this\LastAddRow( )
                  sublevel = *this\__rows( )\sublevel
               EndIf
               
               *rows = InsertElement( *this\__rows( ))
            EndIf
            ;}
            
            If *rows
               *rows\index = position ; ListIndex( *this\__rows( ) )
               
               If sublevel > position
                  sublevel = position
               EndIf
               
               If *this\LastAddRow( )
                  If sublevel > *this\LastAddRow( )\sublevel
                     sublevel    = *this\LastAddRow( )\sublevel + 1
                     *parent_row = *this\LastAddRow( )
                     
                  ElseIf *this\LastAddRow( )\ParentRow( )
                     If sublevel > *this\LastAddRow( )\ParentRow( )\sublevel
                        *parent_row = *this\LastAddRow( )\ParentRow( )
                        
                     ElseIf sublevel < *this\LastAddRow( )\sublevel
                        If *this\LastAddRow( )\ParentRow( )\ParentRow( )
                           *parent_row = *this\LastAddRow( )\ParentRow( )\ParentRow( )
                           
                           While *parent_row
                              If sublevel >= *parent_row\sublevel
                                 If sublevel = *parent_row\sublevel
                                    *parent_row = *parent_row\ParentRow( )
                                 EndIf
                                 Break
                              Else
                                 *parent_row = *parent_row\ParentRow( )
                              EndIf
                           Wend
                        EndIf
                        
                        ; for the editor( )
                        If *this\LastAddRow( )\ParentRow( )
                           If *this\LastAddRow( )\ParentRow( )\sublevel = sublevel
                              ;                     *rows\before = *this\LastAddRow( )\ParentRow( )
                              ;                     *this\LastAddRow( )\ParentRow( )\after = *rows
                              
                              If *this\type = #__type_Editor
                                 *parent_row         = *this\LastAddRow( )\ParentRow( )
                                 *parent_row\last    = *rows
                                 *this\LastAddRow( ) = *parent_row
                                 last                = *parent_row
                              EndIf
                              
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               If *parent_row
                  *parent_row\childrens + 1
                  *rows\ParentRow( ) = *parent_row
               EndIf
               
               If sublevel
                  *rows\sublevel = sublevel
               EndIf
               
               If last
                  ; *this\LastAddRow( ) = last
               Else
                  *this\LastAddRow( ) = *rows
               EndIf
               
               ; for the tree( )
               If *this\LastAddRow( )\ParentRow( ) And
                  *this\LastAddRow( )\ParentRow( )\sublevel < sublevel
                  *this\LastAddRow( )\ParentRow( )\last = *this\LastAddRow( )
               EndIf
               
               If *this\LastAddRow( )\sublevel = 0
                  *this\LastRow( ) = *this\LastAddRow( )
               EndIf
               
               If position = 0
                  *this\FirstRow( ) = *rows
               EndIf
               
               If *this\mode\collapsed And *rows\ParentRow( ) And
                  *rows\sublevel > *rows\ParentRow( )\sublevel
                  *rows\ParentRow( )\ButtonBox( )\state = 1
                  *rows\hide                            = 1
               EndIf
               
               ; properties
               If *this\flag & #__tree_property
                  If *parent_row And Not *parent_row\sublevel And Not *parent_row\text\fontID
                     *parent_row\color\back     = $FFF9F9F9
                     *parent_row\color\back[1]  = *parent_row\color\back
                     *parent_row\color\back[2]  = *parent_row\color\back
                     *parent_row\color\frame    = *parent_row\color\back
                     *parent_row\color\frame[1] = *parent_row\color\back
                     *parent_row\color\frame[2] = *parent_row\color\back
                     *parent_row\color\front[1] = *parent_row\color\front
                     *parent_row\color\front[2] = *parent_row\color\front
                     *parent_row\text\fontID    = FontID( LoadFont( #PB_Any, "Helvetica", 14, #PB_Font_Bold | #PB_Font_Italic ))
                  EndIf
               EndIf
               
               ; add lines
               *rows\color       = *this\color ; _get_colors_( )
               *rows\color\state = 0
               *rows\color\back  = 0
               *rows\color\frame = 0
               
               *rows\color\fore[0] = 0
               *rows\color\fore[1] = 0
               *rows\color\fore[2] = 0
               *rows\color\fore[3] = 0
               
               If Text
                  *rows\TextChange( ) = 1
                  *rows\text\string   = StringField( Text.s, *this\row\column + 1, #LF$);Chr(9) )
                                                                                        ;*rows\text\edit\string = StringField( Text.s, 2, #LF$ )
               EndIf
               
               ;\\
               If *this\row\column = 0
                  *this\count\items + 1
                  *this\WidgetChange( ) = 1
                  set_image_( *this, *rows\Image, Image )
                  
                  If *this\FocusedRow( )
                     *this\FocusedRow( )\focus       = 0
                     *this\FocusedRow( )\color\state = #__s_0
                     
                     *this\FocusedRow( )             = *rows
                     *this\FocusedRow( )\focus       = 1
                     *this\FocusedRow( )\color\state = #__s_2 + Bool( *this\focus = #False )
                  EndIf
                  
                  If *this\scroll\state = #True
                     *this\scroll\state = - 1
                  EndIf
                  
                  PostRepaint( *this\root )
               EndIf
            EndIf
         EndIf
         ;EndWith
         
         ProcedureReturn *this\count\items - 1
      EndProcedure
      
      ;-
      Macro set_state_list_( _address_, _state_ )
         If _state_ > 0
            If *this\mode\clickSelect
               If _address_\enter = #False
                  _address_\enter = #True
               EndIf
            Else
               If _address_\press = #False
                  _address_\press = #True
               EndIf
            EndIf
            
            If _address_\press = #True
               _address_\color\state = #__s_2
            ElseIf _address_\enter
               _address_\color\state = #__s_1
            EndIf
            
         ElseIf _address_
            If Not *this\mode\clickSelect
               If _address_\press = #True
                  _address_\press = #False
               EndIf
            EndIf
            
            If _address_\enter
               _address_\enter = #False
            EndIf
            
            If _address_\press = #False
               _address_\color\state = #__s_0
            EndIf
         EndIf
      EndMacro
      
      Macro _multi_select_items_( _this_, _current_row_ )
         PushListPosition( *this\__rows( ))
         ForEach *this\__rows( )
            If *this\__rows( )\visible
               If Bool(( *this\PressedRow( )\index >= *this\__rows( )\index And _current_row_\index <= *this\__rows( )\index ) Or ; верх
                       ( *this\PressedRow( )\index <= *this\__rows( )\index And _current_row_\index >= *this\__rows( )\index ))   ; вниз
                  
                  If *this\__rows( )\color\state <> #__s_2
                     *this\__rows( )\color\state = #__s_2
                     *this\root\repaint          = #True
                  EndIf
                  
               Else
                  
                  If Not *this\__rows( )\press
                     If *this\__rows( )\color\state <> #__s_0
                        *this\__rows( )\color\state = #__s_0
                        *this\root\repaint          = #True
                     EndIf
                  EndIf
                  
               EndIf
            EndIf
         Next
         PopListPosition( *this\__rows( ))
      EndMacro
      
      
      Procedure.l Tree_KeyEvents( *this._s_WIDGET, eventtype.l, mouse_x.l = -1, mouse_y.l = -1 )
         Protected result, from = - 1
         Static cursor_change, Down, *rows_selected._s_ROWS
         
         With *this
            Select eventtype
               Case #__event_KeyDown
                  
                  Select Keyboard( )\key
                     Case #PB_Shortcut_PageUp
                        If bar_SetState( *this\scroll\v, 0 )
                           *this\WidgetChange( ) = 1
                           result                = 1
                        EndIf
                        
                     Case #PB_Shortcut_PageDown
                        If bar_SetState( *this\scroll\v, *this\scroll\v\bar\page\end )
                           *this\WidgetChange( ) = 1
                           result                = 1
                        EndIf
                        
                     Case #PB_Shortcut_Up,
                          #PB_Shortcut_Home
                        If *this\FocusedRow( )
                           If ( Keyboard( )\key[1] & #PB_Canvas_Alt ) And
                              ( Keyboard( )\key[1] & #PB_Canvas_Control )
                              If bar_SetState( *this\scroll\v, *this\scroll\v\bar\page\pos - 18 )
                                 *this\WidgetChange( ) = 1
                                 result                = 1
                              EndIf
                              
                           ElseIf *this\FocusedRow( )\index > 0
                              ; select modifiers key
                              If ( Keyboard( )\key = #PB_Shortcut_Home Or
                                   ( Keyboard( )\key[1] & #PB_Canvas_Alt ))
                                 SelectElement( *this\__rows( ), 0 )
                              Else
                                 _select_prev_item_( *this\__rows( ), *this\FocusedRow( )\index )
                              EndIf
                              
                              If *this\FocusedRow( ) <> *this\__rows( )
                                 *this\FocusedRow( )\color\state = 0
                                 *this\FocusedRow( )             = *this\__rows( )
                                 *this\__rows( )\color\state     = 2
                                 *rows_selected                  = *this\__rows( )
                                 
                                 If *this\__rows( )\y + *this\scroll_y( ) <= 0
                                    If row_scroll_y_( *this, *this\FocusedRow( ) )
                                       *this\WidgetChange( ) = - 1
                                    EndIf
                                 EndIf
                                 
                                 DoEvents( *this, #__event_Change, *this\__rows( )\index, *this\__rows( ) )
                                 result = 1
                              EndIf
                              
                              
                           EndIf
                        EndIf
                        
                     Case #PB_Shortcut_Down,
                          #PB_Shortcut_End
                        If *this\FocusedRow( )
                           If ( Keyboard( )\key[1] & #PB_Canvas_Alt ) And
                              ( Keyboard( )\key[1] & #PB_Canvas_Control )
                              
                              If bar_SetState( *this\scroll\v, *this\scroll\v\bar\page\pos + 18 )
                                 *this\WidgetChange( ) = 1
                                 result                = 1
                              EndIf
                              
                           ElseIf *this\FocusedRow( )\index < ( *this\count\items - 1 )
                              ; select modifiers key
                              If ( Keyboard( )\key = #PB_Shortcut_End Or
                                   ( Keyboard( )\key[1] & #PB_Canvas_Alt ))
                                 SelectElement( *this\__rows( ), ( *this\count\items - 1 ))
                              Else
                                 _select_next_item_( *this\__rows( ), *this\FocusedRow( )\index )
                              EndIf
                              
                              If *this\FocusedRow( ) <> *this\__rows( )
                                 *this\FocusedRow( )\color\state = 0
                                 *this\FocusedRow( )             = *this\__rows( )
                                 *this\__rows( )\color\state     = 2
                                 *rows_selected                  = *this\__rows( )
                                 
                                 If *this\__rows( )\y >= *this\inner_height( )
                                    If row_scroll_y_( *this, *this\FocusedRow( ) )
                                       *this\WidgetChange( ) = - 1
                                    EndIf
                                 EndIf
                                 
                                 DoEvents( *this, #__event_Change, *this\__rows( )\index, *this\__rows( ) )
                                 result = 1
                              EndIf
                              
                              
                           EndIf
                        EndIf
                        
                     Case #PB_Shortcut_Left
                        If ( Keyboard( )\key[1] & #PB_Canvas_Alt ) And
                           ( Keyboard( )\key[1] & #PB_Canvas_Control )
                           
                           If bar_SetState( *this\scroll\h, *this\scroll\h\bar\page\pos - ( *this\scroll\h\bar\page\end / 10 ))
                              *this\WidgetChange( ) = 1
                           EndIf
                           result = 1
                        EndIf
                        
                     Case #PB_Shortcut_Right
                        If ( Keyboard( )\key[1] & #PB_Canvas_Alt ) And
                           ( Keyboard( )\key[1] & #PB_Canvas_Control )
                           
                           If bar_SetState( *this\scroll\h, *this\scroll\h\bar\page\pos + ( *this\scroll\h\bar\page\end / 10 ))
                              *this\WidgetChange( ) = 1
                           EndIf
                           result = 1
                        EndIf
                        
                  EndSelect
                  
                  ;EndIf
                  
            EndSelect
         EndWith
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l ListView_KeyEvents( *this._s_WIDGET, eventtype.l, *item._s_ROWS, item = - 1 )
         Protected Repaint, mouse_x.l = mouse( )\x, mouse_y.l = mouse( )\y
         
         If eventtype = #__event_KeyDown
            Protected *current._s_ROWS
            Protected result, from = - 1
            Static cursor_change, Down
            
            If *this\focus
               
               If *this\mode\clickSelect
                  *current = *this\EnteredRow( )
               Else
                  *current = *this\FocusedRow( )
               EndIf
               
               Select Keyboard( )\key
                  Case #PB_Shortcut_Space
                     If *this\mode\clickSelect
                        If *current\press = #True
                           *current\press       = #False
                           *current\color\state = #__s_1
                        Else
                           *current\press       = #True
                           *current\color\state = #__s_2
                           *this\FocusedRow( )  = *current
                        EndIf
                        
                        DoEvents( *this, #__event_Change, *current\index, *current )
                        Repaint = 1
                     EndIf
                     
                  Case #PB_Shortcut_PageUp
                     ; TODO scroll to first visible
                     If bar_SetState( *this\scroll\v, 0 )
                        *this\WidgetChange( ) = 1
                        Repaint               = 1
                     EndIf
                     
                  Case #PB_Shortcut_PageDown
                     ; TODO scroll to last visible
                     If bar_SetState( *this\scroll\v, *this\scroll\v\bar\page\end )
                        *this\WidgetChange( ) = 1
                        Repaint               = 1
                     EndIf
                     
                  Case #PB_Shortcut_Up,
                       #PB_Shortcut_Home
                     
                     If *current
                        If ( Keyboard( )\key[1] & #PB_Canvas_Alt ) And
                           ( Keyboard( )\key[1] & #PB_Canvas_Control )
                           
                           ; scroll to top
                           If bar_SetState( *this\scroll\v, *this\scroll\v\bar\page\pos - 18 )
                              *this\WidgetChange( ) = 1
                              Repaint               = 1
                           EndIf
                           
                        ElseIf *current\index > 0
                           ; select modifiers key item
                           If ( Keyboard( )\key = #PB_Shortcut_Home Or
                                ( Keyboard( )\key[1] & #PB_Canvas_Alt ))
                              SelectElement( *this\__rows( ), 0 )
                           Else
                              _select_prev_item_( *this\__rows( ), *current\index )
                           EndIf
                           
                           If *current <> *this\__rows( )
                              If *current
                                 set_state_list_( *current, #False )
                              EndIf
                              set_state_list_( *this\__rows( ), #True )
                              
                              If Not *this\mode\clickSelect
                                 *this\FocusedRow( ) = *this\__rows( )
                              EndIf
                              
                              If Not Keyboard( )\key[1] & #PB_Canvas_Shift
                                 *this\EnteredRow( ) = *this\FocusedRow( )
                              EndIf
                              
                              If *this\mode\multiSelect
                                 _multi_select_items_( *this, *this\FocusedRow( ) )
                              EndIf
                              
                              *current = *this\__rows( )
                              If row_scroll_y_( *this, *current )
                                 *this\WidgetChange( ) = - 1
                              EndIf
                              
                              DoEvents( *this, #__event_Change, *current\index, *current )
                              Repaint = 1
                           EndIf
                           
                        EndIf
                     EndIf
                     
                  Case #PB_Shortcut_Down,
                       #PB_Shortcut_End
                     
                     If *current
                        If ( Keyboard( )\key[1] & #PB_Canvas_Alt ) And
                           ( Keyboard( )\key[1] & #PB_Canvas_Control )
                           
                           If bar_SetState( *this\scroll\v, *this\scroll\v\bar\page\pos + 18 )
                              *this\WidgetChange( ) = 1
                              Repaint               = 1
                           EndIf
                           
                        ElseIf *current\index < ( *this\count\items - 1 )
                           ; select modifiers key item
                           If ( Keyboard( )\key = #PB_Shortcut_End Or
                                ( Keyboard( )\key[1] & #PB_Canvas_Alt ))
                              SelectElement( *this\__rows( ), ( *this\count\items - 1 ))
                           Else
                              _select_next_item_( *this\__rows( ), *current\index )
                           EndIf
                           
                           If *current <> *this\__rows( )
                              If *current
                                 set_state_list_( *current, #False )
                              EndIf
                              set_state_list_( *this\__rows( ), #True )
                              
                              If Not *this\mode\clickSelect
                                 *this\FocusedRow( ) = *this\__rows( )
                              EndIf
                              
                              If Not Keyboard( )\key[1] & #PB_Canvas_Shift
                                 *this\EnteredRow( ) = *this\FocusedRow( )
                              EndIf
                              
                              If *this\mode\multiSelect
                                 _multi_select_items_( *this, *this\FocusedRow( ) )
                              EndIf
                              
                              *current = *this\__rows( )
                              If row_scroll_y_( *this, *current )
                                 *this\WidgetChange( ) = - 1
                              EndIf
                              
                              DoEvents( *this, #__event_Change, *current\index, *current )
                              Repaint = 1
                           EndIf
                           
                           
                        EndIf
                     EndIf
                     
                  Case #PB_Shortcut_Left
                     If ( Keyboard( )\key[1] & #PB_Canvas_Alt ) And
                        ( Keyboard( )\key[1] & #PB_Canvas_Control )
                        
                        If bar_SetState( *this\scroll\h, *this\scroll\h\bar\page\pos - ( *this\scroll\h\bar\page\end / 10 ))
                           *this\WidgetChange( ) = 1
                        EndIf
                        Repaint = 1
                     EndIf
                     
                  Case #PB_Shortcut_Right
                     If ( Keyboard( )\key[1] & #PB_Canvas_Alt ) And
                        ( Keyboard( )\key[1] & #PB_Canvas_Control )
                        
                        If bar_SetState( *this\scroll\h, *this\scroll\h\bar\page\pos + ( *this\scroll\h\bar\page\end / 10 ))
                           *this\WidgetChange( ) = 1
                        EndIf
                        Repaint = 1
                     EndIf
                     
               EndSelect
               
               If *this\mode\clickSelect
                  *this\EnteredRow( ) = *current
               Else
                  *this\FocusedRow( ) = *current
               EndIf
               
            EndIf
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      
      Procedure.l Tree_events( *this._s_WIDGET, eventtype.l, mouse_x.l, mouse_y.l )
         Protected Repaint
         
         ;
         If eventtype = #__event_Down
            If mouse( )\buttons & #PB_Canvas_LeftButton
               If *this\EnteredRow( ) And
                  *this\EnteredRow( )\enter
                  
                  ; collapsed/expanded button
                  If *this\EnteredRow( )\ButtonBox( )\enter
                     If *this\EnteredRow( )\ButtonBox( )\state
                        SetItemState( *this, *this\EnteredRow( )\index, #PB_Tree_Expanded )
                     Else
                        SetItemState( *this, *this\EnteredRow( )\index, #PB_Tree_Collapsed )
                     EndIf
                     
                     Send( *this, #__event_Down, *this\EnteredRow( )\index, *this\EnteredRow( ) )
                  EndIf
                  
                  ; change box ( option&check )
                  If *this\EnteredRow( )\CheckedBox( )\enter
                     ; change box option
                     If *this\mode\check = #__m_optionselect
                        If *this\EnteredRow( )\ParentRow( ) And *this\EnteredRow( )\OptionGroupRow
                           If *this\EnteredRow( )\OptionGroupRow\ParentRow( ) And
                              *this\EnteredRow( )\OptionGroupRow\CheckedBox( )\state
                              *this\EnteredRow( )\OptionGroupRow\CheckedBox( )\state = #PB_Checkbox_Unchecked
                           EndIf
                           
                           If *this\EnteredRow( )\OptionGroupRow\OptionGroupRow <> *this\EnteredRow( )
                              If *this\EnteredRow( )\OptionGroupRow\OptionGroupRow
                                 *this\EnteredRow( )\OptionGroupRow\OptionGroupRow\CheckedBox( )\state = #PB_Checkbox_Unchecked
                              EndIf
                              *this\EnteredRow( )\OptionGroupRow\OptionGroupRow = *this\EnteredRow( )
                           EndIf
                        EndIf
                     EndIf
                     
                     ; tree checkbox change check
                     set_check_state_( *this\EnteredRow( )\CheckedBox( ), *this\mode\threestate )
                     
                     ;                         ;\\
                     ;                         If *this\EnteredRow( )\color\state = #__s_2
                     ;                            DoEvents( *this, #__event_Change, *this\EnteredRow( )\index, *this\EnteredRow( ) )
                     ;                         EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         If eventtype = #__event_Up
            If mouse( )\buttons & #PB_Canvas_LeftButton
               If *this\EnteredRow( ) And
                  *this\EnteredRow( )\enter
                  
                  If *this\EnteredRow( )\color\state = #__s_0
                     *this\EnteredRow( )\color\state = #__s_1
                     
                     ; Post event item status change
                     If *this\anchors
                        *this\root\repaint = #True
                     Else
                        ;DoEvents( *this, #__event_StatusChange, *this\EnteredRow( )\index, *this\EnteredRow( ) )
                     EndIf
                  Else
                     If *this\EnteredRow( )\ButtonBox( )\enter
                        Send( *this, #__event_Up, *this\EnteredRow( )\index, *this\EnteredRow( ) )
                        ;                      Else
                        ;                         Send( *this, #__event_LeftClick, *this\EnteredRow( )\index, *this\EnteredRow( ) )
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_Left2Click Or
            eventtype = #__event_RightClick Or
            eventtype = #__event_Right2Click
            
            If *this\EnteredRow( ) And
               *this\EnteredRow( )\enter
               Post( *this, eventtype, *this\EnteredRow( )\index )
            EndIf
         EndIf
         
         ;\\ key events
         If eventtype = #__event_Input Or
            eventtype = #__event_KeyDown Or
            eventtype = #__event_KeyUp
            
            If *this\type = #__type_listview
               Repaint | ListView_KeyEvents( *this, eventtype, *this\FocusedRow( ), *this\FocusedRow( )\index )
            Else
               Repaint | Tree_KeyEvents( *this, eventtype, mouse_x, mouse_y )
            EndIf
         EndIf
         
         ProcedureReturn Repaint
      EndProcedure
      
      ;-
      Procedure ChangeParent( *this._s_WIDGET, *parent._s_WIDGET )
         ;\\
         *parent\haschildren + 1
         
         ;\\
         If *parent\root
            If Not is_root_( *parent )
               *parent\root\haschildren + 1
            EndIf
            *this\root = *parent\root
         Else
            *this\root = *parent
         EndIf
         
         ;\\
         If is_window_( *parent )
            *this\window = *parent
         Else
            If *parent\window
               *this\window = *parent\window
            Else
               *this\window = *parent
            EndIf
         EndIf
         
         *this\level  = *parent\level + 1
         *this\parent = *parent
         
         ;\\ is integrall scroll bars
         If *this\scroll
            If *this\scroll\v
               *this\scroll\v\root   = *this\root
               *this\scroll\v\window = *this\window
            EndIf
            If *this\scroll\h
               *this\scroll\h\root   = *this\root
               *this\scroll\h\window = *this\window
            EndIf
         EndIf
         
         ;\\ is integrall tab bar
         If *this\TabBox( )
            *this\TabBox( )\root   = *this\root
            *this\TabBox( )\window = *this\window
         EndIf
         
         ;\\ is integrall string bar
         If *this\StringBox( )
            *this\StringBox( )\root   = *this\root
            *this\StringBox( )\window = *this\window
         EndIf
         
         ;\\
         If *parent\bounds\children
            MoveBounds( *this )
         EndIf
      EndProcedure
      
      Procedure CreatePopup( *display._s_WIDGET = 0, flags.q = 0 )
         Protected Window
         Protected WindowID
         Protected ParentID
         Protected *root
         
         ;\\
         If *display
            ParentID = WindowID( *display\root\canvas\window )
         EndIf
         
         ;\\
         *root    = Open( #PB_Any, 0, 0, 1, 1, "", flags | #PB_Window_Invisible, ParentID )
         Window   = GetWindow( *root )
         WindowID = WindowID( Window )
         
         ;\\
         CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
            If CocoaMessage(0, WindowID, "hasShadow") = 0
               CocoaMessage(0, WindowID, "setHasShadow:", 1)
            EndIf
            
            ;\\
         CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
            If GetClassLongPtr_( WindowID, #GCL_STYLE ) & #CS_DROPSHADOW = 0
               SetClassLongPtr_( WindowID, #GCL_STYLE, #CS_DROPSHADOW )
            EndIf
            
         CompilerElse
            
         CompilerEndIf
         
         ;\\ Important is #PB_Window_Invisible and
         ;\\ HideWindow( )... Without them, there is no shadow....
         HideWindow( Window, #False, #PB_Window_NoActivate)
         ProcedureReturn *root
      EndProcedure
      
      Procedure.i DisplayPopup( *this._s_WIDGET, *display._s_WIDGET, x.l = #PB_Ignore, y.l = #PB_Ignore )
         Protected width
         Protected height
         Protected mode = 0
         
         ;\\
         If *this
            ;\\ hide current popup widget
            Hide( *this, *this\hide ! 1 )
            
            ;\\
            If *display
               If x = #PB_Ignore
                  x = GadgetX( *display\root\canvas\gadget, #PB_Gadget_ScreenCoordinate ) + *display\x + 1
               EndIf
               If y = #PB_Ignore
                  y = GadgetY( *display\root\canvas\gadget, #PB_Gadget_ScreenCoordinate ) + *display\y + *display\height
               EndIf
               
               ;\\ ComboBox
               If *display\combobox
                  If *this\hide
                     *display\combobox\arrow\direction = 2
                  Else
                     *display\combobox\arrow\direction = 3
                  EndIf
               EndIf
            EndIf
            
            ;\\ hide previews popup widget
            If Popup( )
               If Popup( )\widget
                  If Popup( )\widget <> *this
                     ChangeParent( Popup( )\widget, Popup( )\parent )
                     Hide( Popup( )\widget, #True )
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If *this\hide
               If Popup( )
                  Debug "display - hide"
                  Popup( )\widget = #Null
                  If PressedWidget( ) = *this
                     PressedWidget( ) = *display
                  EndIf
                  HideWindow( Popup( )\canvas\window, #True, #PB_Window_NoActivate )
               EndIf
            Else
               ;\\
               If Popup( )
                  If Popup( )\widget
                     Debug "display - resize"
                  Else
                     Debug "display - show"; +" "+ Popup( )\width +" "+ Popup( )\height
                     HideWindow( Popup( )\canvas\window, #False, #PB_Window_NoActivate )
                  EndIf
               Else
                  Debug "display - create "
                  Popup( ) = CreatePopup( *display, #PB_Window_NoActivate | #PB_Window_NoGadgets | #PB_Window_BorderLess )
               EndIf
               
               ;\\
               If *this\row
                  Debug "" + *this\root\class + " " + *display\root\class
                  If *this\root = *display\root
                     Debug "display - update"
                     update_items_( *this )
                     bar_area_update( *this )
                     *this\autosize = 0
                     Resize( *this, #PB_Ignore, #PB_Ignore, *this\root\width, *this\root\height )
                     *this\autosize = 1
                  EndIf
                  
                  ;\\
                  If *this\scroll And
                     *this\scroll\v And
                     Not *this\scroll\v\hide
                     width = *this\scroll\v\width
                  EndIf
                  width + *this\scroll_width( )
                  
                  ;\\
                  ForEach *this\__rows( )
                     height + *this\__rows( )\height
                     
                     If mode
                        If *this\__rows( )\focus
                           y = GadgetY( *display\root\canvas\gadget, #PB_Gadget_ScreenCoordinate ) + ( Mouse( )\y - row_y_( *this, *this\__rows( ) ) - *this\__rows( )\height / 2 )
                        EndIf
                     EndIf
                     
                     If ( ListIndex(*this\__rows( )) + 1 ) >= 10
                        Break
                     EndIf
                  Next
               Else
                  height = *this\inner_height( )
               EndIf
               
               ;\\
               width + *this\fs * 2
               height + *this\fs * 2
               
               ;\\
               If width < *display\width - 2
                  width = *display\width - 2
               EndIf
               
               ;\\
               If mode
                  x = GadgetX( *display\root\canvas\gadget, #PB_Gadget_ScreenCoordinate ) + Mouse( )\x - width / 2
               EndIf
               
               ;\\
               ; StickyWindow( window, #True )
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  ; var windowLevel: UIWindow.Level { get set } ; stay on top
                  CocoaMessage(0, WindowID(Popup( )\canvas\window), "setLevel:", 3)
                  ; Debug CocoaMessage(0, WindowID(Popup( )\canvas\window), "level")
               CompilerEndIf
               
               ;\\
               Popup( )\widget = *this
               Popup( )\parent = *display
               ChangeParent( *this, Popup( ) )
               PostRepaint( Popup( ) )
               
               ;\\
               If *display\round
                  x + *display\round
                  width - *display\round * 2
               EndIf
               
               ;\\
               If Popup( )\width = width And
                  Popup( )\height = height
                  ; Debug ""+ WindowWidth( Popup( )\canvas\window ) +" "+  WindowHeight( Popup( )\canvas\window ) +" "+Popup( )\width +" "+ Popup( )\height
                  Resize( Popup( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore)
               EndIf
               
               ;           ;\\
               ;           CompilerIf #PB_Compiler_OS = #PB_OS_Windows
               ;             ResizeWindow( Popup( )\canvas\window, x, y, width-6, height-29 )
               ;           CompilerElse
               ResizeWindow( Popup( )\canvas\window, x, y, width, height )
               ;           CompilerEndIf
               ProcedureReturn #True
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Procedure.i ToPBEventType( event.i )
         If event = #__event_Enter
            ProcedureReturn #PB_EventType_MouseEnter
         EndIf
         If event = #__event_Leave
            ProcedureReturn #PB_EventType_MouseLeave
         EndIf
         If event = #__event_MouseMove
            ProcedureReturn #PB_EventType_MouseMove
         EndIf
         If event = #__event_Focus
            ProcedureReturn #PB_EventType_Focus
         EndIf
         If event = #__event_LostFocus
            ProcedureReturn #PB_EventType_LostFocus
         EndIf
         
         If event = #__event_Resize
            ProcedureReturn #PB_EventType_Resize
         EndIf
         If event = #__event_Change
            ProcedureReturn #PB_EventType_Change
         EndIf
         If event = #__event_StatusChange
            ProcedureReturn #PB_EventType_StatusChange
         EndIf
         If event = #__event_Down
            ProcedureReturn #PB_EventType_Down
         EndIf
         If event = #__event_Up
            ProcedureReturn #PB_EventType_Up
         EndIf
         
         If event = #__event_DragStart
            ProcedureReturn #PB_EventType_DragStart
         EndIf
         If event = #__event_Input
            ProcedureReturn #PB_EventType_Input
         EndIf
         If event = #__event_KeyDown
            ProcedureReturn #PB_EventType_KeyDown
         EndIf
         If event = #__event_KeyUp
            ProcedureReturn #PB_EventType_KeyUp
         EndIf
         
         If event = #__event_LeftButtonDown
            ProcedureReturn #PB_EventType_LeftButtonDown
         EndIf
         If event = #__event_LeftButtonUp
            ProcedureReturn #PB_EventType_LeftButtonUp
         EndIf
         If event = #__event_LeftClick
            ProcedureReturn #PB_EventType_LeftClick
         EndIf
         If event = #__event_Left2Click
            ProcedureReturn #PB_EventType_LeftDoubleClick
         EndIf
         
         If event = #__event_RightButtonDown
            ProcedureReturn #PB_EventType_RightButtonDown
         EndIf
         If event = #__event_RightButtonUp
            ProcedureReturn #PB_EventType_RightButtonUp
         EndIf
         If event = #__event_RightClick
            ProcedureReturn #PB_EventType_RightClick
         EndIf
         If event = #__event_Right2Click
            ProcedureReturn #PB_EventType_RightDoubleClick
         EndIf
         
         ;       If event = #__event_PopupWindow
         ;          ProcedureReturn #PB_EventType_PopupWindow
         ;       EndIf
         ;       If event = #__event_PopupMenu
         ;          ProcedureReturn #PB_EventType_PopupMenu
         ;       EndIf
      EndProcedure
      
      Procedure.q FromPBFlag( Type, PBFlag.q )
         Protected flags.q = PBFlag
         
         Select Type
            Case #__type_window
               If PBFlag & #PB_Window_BorderLess = #PB_Window_BorderLess
                  flags & ~ #PB_Window_BorderLess
                  flags | #__flag_BorderLess
               EndIf
               ;
            Case #__type_MDI
               If PBFlag & #PB_MDI_AutoSize = #PB_MDI_AutoSize
                  flags & ~ #PB_MDI_AutoSize
                  flags | #__flag_AutoSize
               EndIf
               If PBFlag & #PB_MDI_BorderLess = #PB_MDI_BorderLess
                  flags & ~ #PB_MDI_BorderLess
                  flags | #__flag_BorderLess
               EndIf
               ;
            Case #__type_CheckBox
               If PBFlag & #PB_CheckBox_Right = #PB_CheckBox_Right
                  flags & ~ #PB_CheckBox_Right
                  flags | #__text_right
               EndIf
               If PBFlag & #PB_CheckBox_Center = #PB_CheckBox_Center
                  flags & ~ #PB_CheckBox_Center
                  flags | #__text_center
               EndIf
               ;
            Case #__type_Text
               If PBFlag & #PB_Text_Center = #PB_Text_Center
                  flags & ~ #PB_Text_Center
                  flags | #__text_center
                  ;flags & ~ #__text_left
               EndIf
               If PBFlag & #PB_Text_Right = #PB_Text_Right
                  flags & ~ #PB_Text_Right
                  flags | #__text_right
               EndIf
               ;
            Case #__type_Button ; ok
               If PBFlag & #PB_Button_MultiLine = #PB_Button_MultiLine
                  flags & ~ #PB_Button_MultiLine
                  flags | #__text_wordwrap
               EndIf
               If PBFlag & #PB_Button_Left = #PB_Button_Left
                  flags & ~ #PB_Button_Left
                  flags | #__text_left
               EndIf
               If PBFlag & #PB_Button_Right = #PB_Button_Right
                  flags & ~ #PB_Button_Right
                  flags | #__text_right
               EndIf
               ;
            Case #__type_String ; ok
               If PBFlag & #PB_String_Password = #PB_String_Password
                  flags & ~ #PB_String_Password
                  flags | #__text_password
               EndIf
               If PBFlag & #PB_String_LowerCase = #PB_String_LowerCase
                  flags & ~ #PB_String_LowerCase
                  flags | #__text_lowercase
               EndIf
               If PBFlag & #PB_String_UpperCase = #PB_String_UpperCase
                  flags & ~ #PB_String_UpperCase
                  flags | #__text_uppercase
               EndIf
               If PBFlag & #PB_String_BorderLess = #PB_String_BorderLess
                  flags & ~ #PB_String_BorderLess
                  flags | #__flag_BorderLess
               EndIf
               If PBFlag & #PB_String_Numeric = #PB_String_Numeric
                  flags & ~ #PB_String_Numeric
                  flags | #__text_numeric
               EndIf
               If PBFlag & #PB_String_ReadOnly = #PB_String_ReadOnly
                  flags & ~ #PB_String_ReadOnly
                  flags | #__text_readonly
               EndIf
               ;
            Case #__type_Editor
               If PBFlag & #PB_Editor_ReadOnly = #PB_Editor_ReadOnly
                  flags & ~ #PB_Editor_ReadOnly
                  flags | #__text_readonly
               EndIf
               If PBFlag & #PB_Editor_WordWrap = #PB_Editor_WordWrap
                  flags & ~ #PB_Editor_WordWrap
                  flags | #__text_wordwrap
               EndIf
               ;
            Case #__type_Tree
               If PBFlag & #PB_Tree_AlwaysShowSelection = #PB_Tree_AlwaysShowSelection
                  flags & ~ #PB_Tree_AlwaysShowSelection
               EndIf
               If PBFlag & #PB_Tree_CheckBoxes = #PB_Tree_CheckBoxes
                  flags & ~ #PB_Tree_CheckBoxes
                  flags | #__tree_checkboxes
               EndIf
               If PBFlag & #PB_Tree_ThreeState = #PB_Tree_ThreeState
                  flags & ~ #PB_Tree_ThreeState
                  flags | #__tree_threestate
               EndIf
               If PBFlag & #PB_Tree_NoButtons = #PB_Tree_NoButtons
                  flags & ~ #PB_Tree_NoButtons
                  flags | #__tree_nobuttons
               EndIf
               If PBFlag & #PB_Tree_NoLines = #PB_Tree_NoLines
                  flags & ~ #PB_Tree_NoLines
                  flags | #__tree_nolines
               EndIf
               ;   
            Case #__type_ListView ; Ok
               If PBFlag & #PB_ListView_ClickSelect = #PB_ListView_ClickSelect
                  flags & ~ #PB_ListView_ClickSelect
                  flags | #__flag_clickselect
               EndIf
               If PBFlag & #PB_ListView_MultiSelect = #PB_ListView_MultiSelect
                  flags & ~ #PB_ListView_MultiSelect
                  flags | #__flag_multiselect
               EndIf
               ;  
            Case #__type_listicon
               If PBFlag & #PB_ListIcon_AlwaysShowSelection = #PB_ListIcon_AlwaysShowSelection
                  flags & ~ #PB_ListIcon_AlwaysShowSelection
               EndIf
               If PBFlag & #PB_ListIcon_CheckBoxes = #PB_ListIcon_CheckBoxes
                  flags & ~ #PB_ListIcon_CheckBoxes
                  flags | #__tree_checkboxes
               EndIf
               If PBFlag & #PB_ListIcon_ThreeState = #PB_ListIcon_ThreeState
                  flags & ~ #PB_ListIcon_ThreeState
                  flags | #__tree_threestate
               EndIf
               
         EndSelect
         
         ProcedureReturn flags
      EndProcedure
      
      Procedure.q ToPBFlag( Type, Flag.q )
         Protected flags.q = Flag
         
         Select Type
            Case #__type_Button
               If Flag & #__text_wordwrap = #__text_wordwrap
                  flags & ~ #__text_wordwrap
                  flag | #PB_Button_MultiLine
               EndIf
               If Flag & #__text_left = #__text_left
                  flags & ~ #__text_left
                  flags | #PB_Button_Left
               EndIf
               If Flag & #__text_right = #__text_right
                  flags & ~ #__text_right
                  flags | #PB_Button_Right
               EndIf
         EndSelect
         
         ProcedureReturn flags
      EndProcedure
      
      Procedure.q Flag( *this._s_WIDGET, flag.q = #Null, state.b = #PB_Default )
         Protected result.q
         ;
         Protected string_bar = Bool( *this\type = #__type_Text Or
                                      *this\type = #__type_Editor Or
                                      *this\type = #__type_String Or
                                      *this\type = #__type_Button Or
                                      *this\type = #__type_Option Or
                                      *this\type = #__type_Spin Or
                                      *this\type = #__type_Hyperlink Or
                                      *this\type = #__type_ComboBox Or
                                      *this\type = #__type_CheckBox )
         ;
         Protected list_bar = Bool( *this\type = #__type_Tree Or
                                    *this\type = #__type_ListIcon Or
                                    *this\type = #__type_ListView Or
                                    *this\type = #__type_Property )
         
         ;
         state = Bool( state )
         ;
         ;\\ get widget flags
         If Not flag
            ;result = *this\flag
            result = ToPBFlag( *this\type, *this\flag )
         Else
            ;\\ replace pb flag
            flag = FromPBFlag( *this\type, flag )
            
            ;\\ is flag on the widget
            If state = #PB_Default
               result = Bool( *this\flag & flag = flag )
            Else
               *this\WidgetChange( ) = 1
               
               ;\\ set & remove flags
               If state
                  *this\flag | flag
               Else
                  *this\flag & ~ flag
               EndIf
               
               ;\\ text align
               If string_bar
                  *this\TextChange( ) = #__text_update
                  ; 
                  If flag & #__text_invert
                     *this\text\invert = state
                  EndIf
                  If flag & #__text_vertical
                     *this\text\vertical = state
                  EndIf
                  If flag & #__text_wordwrap
                     *this\text\multiline = - state
                  EndIf
                  If flag & #__text_multiline
                     *this\text\multiline = state
                  EndIf
                  ;
                  If flag & #__text_left
                     *this\text\align\left = state
                     ;
                     If Not *this\text\align\left 
                        If *this\flag & #__text_right
                           *this\text\align\right = #True
                        EndIf
                     EndIf
                  EndIf
                  If flag & #__text_top
                     *this\text\align\top = state
                     ;
                     If Not *this\text\align\top 
                        If *this\flag & #__text_bottom
                           *this\text\align\bottom = #True
                        EndIf
                     EndIf
                  EndIf
                  If flag & #__text_right
                     *this\text\align\right = state
                     ;
                     If Not *this\text\align\right 
                        If *this\flag & #__text_left
                           *this\text\align\left = #True
                        EndIf
                     EndIf
                  EndIf
                  If flag & #__text_bottom
                     *this\text\align\bottom = state
                     ;
                     If Not *this\text\align\bottom 
                        If *this\flag & #__text_top
                           *this\text\align\top = #True
                        EndIf
                     EndIf
                  EndIf
                  If flag & #__text_center
                     *this\text\align\left   = #False
                     *this\text\align\top    = #False
                     *this\text\align\right  = #False
                     *this\text\align\bottom = #False
                  EndIf
                  ;
                  ;\\
                  If *this\type = #__type_Button
                     If flag & #PB_Button_Toggle
                        If state
                           *this\state       = #True
                           *this\color\state = #__s_2
                        Else
                           *this\state       = #False
                           *this\color\state = #__s_0
                        EndIf
                     EndIf
                     
                     ;\\ ???
                     If *this\text\align\top = #True And
                        *this\text\align\bottom = #True
                        ;
                        *this\text\align\top    = #False
                        *this\text\align\bottom = #False
                     EndIf
                     If *this\text\align\left = #True And
                        *this\text\align\right = #True
                        ;
                        *this\text\align\left  = #False
                        *this\text\align\right = #False
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               If list_bar
                  If flag & #__flag_clickselect = #__flag_clickselect
                     *this\mode\clickSelect = 1
                  EndIf
                  If flag & #__flag_multiselect = #__flag_multiselect
                     *this\mode\multiSelect = 1
                  EndIf
                  
                  If flag & #__tree_nolines
                     *this\mode\Lines = Bool( state )
                  EndIf
                  If flag & #__tree_nobuttons
                     *this\mode\Buttons = state
                     
                     If *this\count\items
                        If *this\flag & #__tree_OptionBoxes
                           PushListPosition( *this\__rows( ))
                           ForEach *this\__rows( )
                              If *this\__rows( )\ParentRow( ) And
                                 *this\__rows( )\ParentRow( )\childrens
                                 *this\__rows( )\sublevel = state
                              EndIf
                           Next
                           PopListPosition( *this\__rows( ))
                        EndIf
                     EndIf
                  EndIf
                  
                  If flag & #__tree_checkboxes = #__tree_checkboxes
                     If *this\flag & #__tree_OptionBoxes
                        *this\mode\check = Bool( state ) * #__m_optionselect
                     Else
                        *this\mode\check = Bool( state )
                     EndIf
                  EndIf
                  
                  If flag & #__tree_threestate
                     *this\mode\threestate = Bool( *this\flag & #__tree_checkboxes )
                  EndIf
                  
                  If flag & #__tree_OptionBoxes
                     If state
                        *this\mode\check = #__m_optionselect
                     Else
                        *this\mode\check = Bool( *this\flag & #__tree_checkboxes )
                     EndIf
                     
                     ; set option group
                     If *this\count\items
                        PushListPosition( *this\__rows( ))
                        ForEach *this\__rows( )
                           If *this\__rows( )\ParentRow( )
                              *this\__rows( )\CheckedBox( )\state = #PB_Checkbox_Unchecked
                              *this\__rows( )\OptionGroupRow      = Bool( state ) * GetItem( *this\__rows( ), 0 )
                           EndIf
                        Next
                        PopListPosition( *this\__rows( ))
                     EndIf
                  EndIf
                  If flag & #__flag_gridLines
                     *this\mode\gridlines = state * 10
                  EndIf
                  If flag & #__tree_collapse
                     *this\mode\collapsed = state
                     
                     If *this\count\items
                        PushListPosition( *this\__rows( ))
                        ForEach *this\__rows( )
                           If *this\__rows( )\ParentRow( )
                              *this\__rows( )\ParentRow( )\ButtonBox( )\state = state
                              *this\__rows( )\hide                            = state
                           EndIf
                        Next
                        PopListPosition( *this\__rows( ))
                     EndIf
                     
                     If *this\root
                        ReDraw( *this\root )
                     EndIf
                  EndIf
                  
                  
                  If ( *this\mode\Lines Or *this\mode\Buttons Or *this\mode\check ) And Not ( *this\flag & #__tree_property Or *this\flag & #__tree_OptionBoxes )
                     *this\row\sublevelsize = 6;18
                  Else
                     *this\row\sublevelsize = 0
                  EndIf
                  
                  If *this\count\items
                     *this\WidgetChange( ) = 1
                  EndIf
               EndIf
               
               ;           If flag & #__text_bottom
               ;             *this\ImageChange( )              = #__text_update
               ;             *this\image\align\top    = 0
               ;             *this\image\align\bottom = state
               ;           EndIf
               
               
               ; ;           If flag & #__text_right
               ; ;             *this\image\align\left  = 0
               ; ;             *this\ImageChange( )             = #__text_update
               ; ;             *this\image\align\right = state
               ; ;           EndIf
               
               
               
               ;\\
               If *this\TextChange( )
                  text_rotate_( *this\text )
               EndIf
               
               
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.b Update( *this._s_WIDGET )
         Protected result.b, _scroll_pos_.f
         
         ; update draw coordinate
         If *this\type = #__type_Panel
            result = bar_Update( *this\TabBox( ) )
         EndIf
         
         If *this\type = #__type_Window
            ; чтобы закруглять только у окна с титлебаром
            If *this\fs[2]
               If *this\round
                  *this\caption\round = *this\round
                  *this\round         = 0
               EndIf
            EndIf
            
            ; caption title bar
            If Not *this\caption\hide
               *this\caption\x     = *this\frame_x( )
               *this\caption\y     = *this\frame_y( )
               *this\caption\width = *this\frame_width( ) ; - *this\fs*2
               
               *this\caption\height = *this\barHeight + *this\fs - 1
               If *this\caption\height > *this\frame_height( ) - *this\fs ;*2
                  *this\caption\height = *this\frame_height( ) - *this\fs ;*2
               EndIf
               
               ;
               *this\caption\inner_x( )      = *this\caption\x + *this\fs
               *this\caption\inner_y( )      = *this\caption\y + *this\fs
               *this\caption_inner_width( )  = *this\caption\width - *this\fs * 2
               *this\caption\inner_height( ) = *this\caption\height - *this\fs * 2
               
               ; caption close button
               If Not *this\CloseButton( )\hide
                  *this\CloseButton( )\x = ( *this\caption\inner_x( ) + *this\caption_inner_width( ) ) - ( *this\CloseButton( )\width + *this\caption\_padding )
                  *this\CloseButton( )\y = *this\caption\y + ( *this\caption\height - *this\CloseButton( )\height ) / 2
               EndIf
               
               ; caption maximize button
               If Not *this\MaximizeButton( )\hide
                  If *this\CloseButton( )\hide
                     *this\MaximizeButton( )\x = ( *this\caption\inner_x( ) + *this\caption_inner_width( ) ) - ( *this\MaximizeButton( )\width + *this\caption\_padding )
                  Else
                     *this\MaximizeButton( )\x = *this\CloseButton( )\x - ( *this\MaximizeButton( )\width + *this\caption\_padding )
                  EndIf
                  *this\MaximizeButton( )\y = *this\caption\y + ( *this\caption\height - *this\MaximizeButton( )\height ) / 2
               EndIf
               
               ; caption minimize button
               If Not *this\MinimizeButton( )\hide
                  If *this\MaximizeButton( )\hide
                     *this\MinimizeButton( )\x = *this\CloseButton( )\x - ( *this\MinimizeButton( )\width + *this\caption\_padding )
                  Else
                     *this\MinimizeButton( )\x = *this\MaximizeButton( )\x - ( *this\MinimizeButton( )\width + *this\caption\_padding )
                  EndIf
                  *this\MinimizeButton( )\y = *this\caption\y + ( *this\caption\height - *this\MinimizeButton( )\height ) / 2
               EndIf
               
               ; caption help button
               If Not *this\HelpButton( )\hide
                  If Not *this\MinimizeButton( )\hide
                     *this\HelpButton( )\x = *this\MinimizeButton( )\x - ( *this\HelpButton( )\width + *this\caption\_padding )
                  ElseIf Not *this\MaximizeButton( )\hide
                     *this\HelpButton( )\x = *this\MaximizeButton( )\x - ( *this\HelpButton( )\width + *this\caption\_padding )
                  Else
                     *this\HelpButton( )\x = *this\CloseButton( )\x - ( *this\HelpButton( )\width + *this\caption\_padding )
                  EndIf
                  *this\HelpButton( )\y = *this\CloseButton( )\y
               EndIf
               
               ; title bar width
               If Not *this\HelpButton( )\hide
                  *this\caption_inner_width( ) = *this\HelpButton( )\x - *this\caption\inner_x( ) - *this\caption\_padding
               ElseIf Not *this\MinimizeButton( )\hide
                  *this\caption_inner_width( ) = *this\MinimizeButton( )\x - *this\caption\inner_x( ) - *this\caption\_padding
               ElseIf Not *this\MaximizeButton( )\hide
                  *this\caption_inner_width( ) = *this\MaximizeButton( )\x - *this\caption\inner_x( ) - *this\caption\_padding
               ElseIf Not *this\CloseButton( )\hide
                  *this\caption_inner_width( ) = *this\CloseButton( )\x - *this\caption\inner_x( ) - *this\caption\_padding
               EndIf
               
               
            EndIf
         EndIf
         
         If *this\type = #__type_ScrollBar Or
            ( *this\type = #__type_TabBar Or *this\type = #__type_ToolBar ) Or
            *this\type = #__type_ProgressBar Or
            *this\type = #__type_TrackBar Or
            *this\type = #__type_Splitter Or
            *this\type = #__type_Spin
            
            result = bar_Update( *this )
         Else
            result = is_resize_( *this )
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.i TypeFromClass( class.s )
         Protected result.i
         
         Select Trim( LCase( class.s ))
            Case "popupmenu" : result = #__type_popupmenu
               ;case "property"       : result = #__type_property
            Case "window" : result = #__type_window
               
            Case "button" : result = #__type_Button
            Case "buttonimage" : result = #__type_ButtonImage
            Case "calendar" : result = #__type_Calendar
            Case "canvas" : result = #PB_GadgetType_Canvas
            Case "checkbox" : result = #__type_CheckBox
            Case "combobox" : result = #__type_ComboBox
            Case "container" : result = #__type_Container
            Case "date" : result = #__type_Date
            Case "editor" : result = #__type_Editor
            Case "explorercombo" : result = #__type_ExplorerCombo
            Case "explorerlist" : result = #__type_ExplorerList
            Case "explorertree" : result = #__type_ExplorerTree
            Case "frame" : result = #__type_Frame
            Case "hyperlink" : result = #__type_HyperLink
            Case "image" : result = #__type_Image
            Case "ipaddress" : result = #__type_IPAddress
            Case "listicon" : result = #__type_ListIcon
            Case "listview" : result = #__type_ListView
            Case "mdi" : result = #__type_MDI
            Case "opengl" : result = #__type_OpenGL
            Case "option" : result = #__type_Option
            Case "panel" : result = #__type_Panel
            Case "progress" : result = #__type_ProgressBar
            Case "scintilla" : result = #__type_Scintilla
            Case "scrollarea" : result = #__type_ScrollArea
            Case "scroll" : result = #__type_ScrollBar
            Case "shortcut" : result = #__type_Shortcut
            Case "spin" : result = #__type_Spin
            Case "splitter" : result = #__type_Splitter
            Case "string" : result = #__type_String
            Case "text" : result = #__type_Text
            Case "track" : result = #__type_TrackBar
            Case "tree" : result = #__type_Tree
            Case "unknown" : result = #__type_Unknown
            Case "web" : result = #__type_Web
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.s ClassFromType( type.i )
         Protected result.s
         
         Select type
            Case #__type_root : result.s = "root"
            Case #__type_statusbar : result.s = "status"
            Case #__type_popupmenu : result.s = "popupmenu"
            Case #__type_menu : result.s = "menu"
            Case #__type_ToolBar : result.s = "tool"
               
            Case #__type_window : result.s = "window"
            Case #__type_Unknown : result.s = "create"
            Case #__type_Button : result.s = "button"
            Case #__type_String : result.s = "string"
            Case #__type_Text : result.s = "text"
            Case #__type_CheckBox : result.s = "checkbox"
            Case #__type_Option : result.s = "option"
            Case #__type_ListView : result.s = "listview"
            Case #__type_Frame : result.s = "frame"
            Case #__type_ComboBox : result.s = "combobox"
            Case #__type_Image : result.s = "image"
            Case #__type_HyperLink : result.s = "hyperlink"
            Case #__type_Container : result.s = "container"
            Case #__type_ListIcon : result.s = "listicon"
            Case #__type_IPAddress : result.s = "ipaddress"
            Case #__type_ProgressBar : result.s = "progress"
            Case #__type_ScrollBar : result.s = "scroll"
            Case #__type_ScrollArea : result.s = "scrollarea"
            Case #__type_TrackBar : result.s = "track"
            Case #__type_Web : result.s = "web"
            Case #__type_ButtonImage : result.s = "buttonimage"
            Case #__type_Calendar : result.s = "calendar"
            Case #__type_Date : result.s = "date"
            Case #__type_Editor : result.s = "editor"
            Case #__type_ExplorerList : result.s = "explorerlist"
            Case #__type_ExplorerTree : result.s = "explorertree"
            Case #__type_ExplorerCombo : result.s = "explorercombo"
            Case #__type_Spin : result.s = "spin"
            Case #__type_Tree : result.s = "tree"
            Case #__type_Panel : result.s = "panel"
            Case #__type_Splitter : result.s = "splitter"
            Case #__type_MDI : result.s = "mdi"
            Case #__type_Scintilla : result.s = "scintilla"
            Case #__type_Shortcut : result.s = "shortcut"
            Case #PB_GadgetType_Canvas : result.s = "canvas"
               
               ;     case #__type_imagebutton    : result.s = "imagebutton"
         EndSelect
         
         ProcedureReturn result.s
      EndProcedure
      
      Procedure.s ClassFromEvent( event.i )
         Protected result.s
         
         Select event
            Case #__event_free : result.s = "#__event_Free"
            Case #__event_drop : result.s = "#__event_Drop"
            Case #__event_create : result.s = "#__event_Create"
            Case #__event_Draw : result.s = "#__event_Draw"
               ;Case #__event_SizeItem : result.s = "#__event_SizeItem"
               
            Case #__event_repaint : result.s = "#__event_Repaint"
            Case #__event_resizeend : result.s = "#__event_ResizeEnd"
            Case #__event_scrollchange : result.s = "#__event_ScrollChange"
               
            Case #__event_close : result.s = "#__event_CloseWindow"
            Case #__event_maximize : result.s = "#__event_MaximizeWindow"
            Case #__event_minimize : result.s = "#__event_MinimizeWindow"
            Case #__event_restore : result.s = "#__event_RestoreWindow"
               
            Case #__event_MouseEnter : result.s = "#__event_MouseEnter"       ; The mouse cursor entered the gadget
            Case #__event_MouseLeave : result.s = "#__event_MouseLeave"       ; The mouse cursor left the gadget
            Case #__event_MouseMove : result.s = "#__event_MouseMove"         ; The mouse cursor moved
            Case #__event_MouseWheel : result.s = "#__event_MouseWheel"       ; The mouse wheel was moved
            Case #__event_LeftButtonDown : result.s = "#__event_LeftButtonDown"   ; The left mouse button was pressed
            Case #__event_LeftButtonUp : result.s = "#__event_LeftButtonUp"       ; The left mouse button was released
            Case #__event_LeftClick : result.s = "#__event_LeftClick"             ; A click With the left mouse button
            Case #__event_Left2Click : result.s = "#__event_LeftDoubleClick"      ; A double-click With the left mouse button
            Case #__event_RightButtonDown : result.s = "#__event_RightButtonDown" ; The right mouse button was pressed
            Case #__event_RightButtonUp : result.s = "#__event_RightButtonUp"     ; The right mouse button was released
            Case #__event_RightClick : result.s = "#__event_RightClick"           ; A click With the right mouse button
            Case #__event_Right2Click : result.s = "#__event_RightDoubleClick"    ; A double-click With the right mouse button
                                                                                  ;Case #__event_MiddleButtonDown : result.s = "#__event_MiddleButtonDown" ; The middle mouse button was pressed
                                                                                  ;Case #__event_MiddleButtonUp : result.s = "#__event_MiddleButtonUp"     ; The middle mouse button was released
            Case #__event_Focus : result.s = "#__event_Focus"                     ; The gadget gained keyboard focus
            Case #__event_LostFocus : result.s = "#__event_LostFocus"             ; The gadget lost keyboard focus
            Case #__event_KeyDown : result.s = "#__event_KeyDown"                 ; A key was pressed
            Case #__event_KeyUp : result.s = "#__event_KeyUp"                     ; A key was released
            Case #__event_Input : result.s = "#__event_Input"                     ; Text input was generated
            Case #__event_Resize : result.s = "#__event_Resize"                   ; The gadget has been resized
            Case #__event_StatusChange : result.s = "#__event_StatusChange"
               ;Case #__event_TitleChange : result.s = "#__event_TitleChange"
            Case #__event_Change : result.s = "#__event_Change"
            Case #__event_DragStart : result.s = "#__event_DragStart"
            Case #__event_ReturnKey : result.s = "#__event_returnKey"
               ;Case #__event_CloseItem : result.s = "#__event_CloseItem"
               
            Case #__event_Down : result.s = "#__event_Down"
            Case #__event_Up : result.s = "#__event_Up"
               
            Case #__event_mousewheelX : result.s = "#__event_MouseWheelX"
            Case #__event_mousewheelY : result.s = "#__event_MouseWheelY"
         EndSelect
         
         ProcedureReturn result.s
      EndProcedure
      
      ;-
      Procedure.i AddColumn( *this._s_WIDGET, position.l, text.s, width.l, image.i = -1 )
         Protected *columns._s_COLUMN
         
         ;\\ Генерируем идентификатор
         If position < 0 Or
            position > ListSize( *this\Columns( )) - 1
            LastElement( *this\Columns( ))
            *columns = AddElement( *this\Columns( ))
            
            If position < 0
               position = ListIndex( *this\Columns( ))
            EndIf
         Else
            ;\\
            *columns = SelectElement( *this\Columns( ), position )
            
            ;\\
            
            ;\\
            *columns = InsertElement( *this\Columns( ))
         EndIf
         
         ;\\
         *this\Columns( )\y     = 0
         *this\Columns( )\width = width
         
         ;\\
         If position = 0 And ListSize( *this\columns( ) ) > 1
            *this\scroll_width( ) = *this\Columns( )\x
            Debug text
            PushListPosition( *this\columns( ) )
            ForEach *this\columns( )
               *this\Columns( )\x = *this\scroll_width( ): *this\scroll_width( ) + *this\Columns( )\width
            Next
            PopListPosition( *this\columns( ) )
         Else
            *this\Columns( )\x = *this\text\padding\x + *this\scroll_width( )
         EndIf
         
         *this\scroll_width( ) + width
         
         ;\\
         ;*this\fs[2] = 24
         If *this\type = #__type_listicon
            *this\Columns( )\height = 24
         EndIf
         ;\\
         *this\Columns( )\index         = Position
         *this\Columns( )\text\string.s = Text.s
         *this\Columns( )\TextChange( ) = 1
      EndProcedure
      
      Procedure AddItem( *this._s_WIDGET, Item.l, Text.s, Image.i = - 1, flag.q = 0 )
         Protected result
         
         If *this\type = #__type_ListIcon
            ForEach *This\Columns( )
               *this\row\column = *this\columns( )\index
               Tree_AddItem( *this, Item, Text, Image, flag )
            Next
         EndIf
         
         If *this\type = #__type_MDI
            *this\count\items + 1 ;?
            
            flag | #__window_systemmenu | #__window_sizegadget | #__window_maximizegadget | #__window_minimizegadget
            result = Window( #PB_Ignore, #PB_Ignore, 280, 180, Text, flag | #__flag_child, *this )
            
            If IsImage( Image )
               If flag & #__flag_BorderLess = #__flag_BorderLess
                  SetBackgroundImage( result, Image )
               Else
                  SetImage( result, Image )
               EndIf
            EndIf
            
            ProcedureReturn result
         EndIf
         
         If *this\type = #__type_Editor
            ProcedureReturn edit_AddItem( *this, item, @text, Len(Text) )
         EndIf
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_property
            ProcedureReturn Tree_AddItem( *this, Item, Text, Image, flag )
         EndIf
         
         If *this\type = #__type_ListView
            ProcedureReturn Tree_AddItem( *this, Item, Text, Image, flag )
         EndIf
         
         If *this\type = #__type_combobox
            If *this\popup
               ProcedureReturn Tree_AddItem( *this\popup, Item, Text, Image, flag )
            Else
               ProcedureReturn Tree_AddItem( *this, Item, Text, Image, flag )
            EndIf
         EndIf
         
         If ( *this\type = #__type_TabBar Or *this\type = #__type_ToolBar )
            ProcedureReturn bar_tab_AddItem( *this, Item, Text, Image, flag )
         EndIf
         
         If *this\type = #__type_Panel
            ProcedureReturn bar_tab_AddItem( *this\TabBox( ), Item, Text, Image, flag )
         EndIf
         
         ProcedureReturn Item
      EndProcedure
      
      Procedure RemoveItem( *this._s_WIDGET, Item.l )
         Protected result
         
         If *this\type = #__type_Editor
            edit_RemoveItem( *this, Item )
            
            result = #True
         EndIf
         
         ;- widget::tree_remove_item( )
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #False
            EndIf
            
            ;         ;\\ тормозить удаление итемов
            ;         ; поэтому изменения сделал в setState
            ;         PushListPosition( *this\__rows( ))
            ;         While NextElement( *this\__rows( ))
            ;           *this\__rows( )\index - 1
            ;         Wend
            ;         PopListPosition( *this\__rows( ))
            
            ;\\
            Protected sublevel = *this\__rows( )\sublevel
            Protected *parent_row._s_ROWS = *this\__rows( )\ParentRow( )
            
            ; if is last parent item then change to the prev element of his level
            If *parent_row And *parent_row\last = *this\__rows( )
               PushListPosition( *this\__rows( ))
               While PreviousElement( *this\__rows( ))
                  If *parent_row = *this\__rows( )\ParentRow( )
                     *parent_row\last = *this\__rows( )
                     Break
                  EndIf
               Wend
               PopListPosition( *this\__rows( ))
               
               ; if the remove last parent children's
               If *parent_row\last = *this\__rows( )
                  *parent_row\childrens = #False
                  *parent_row\last      = #Null
               Else
                  *parent_row\childrens = #True
               EndIf
            EndIf
            
            ; before deleting a parent, we delete its children's
            If *this\__rows( )\childrens
               PushListPosition( *this\__rows( ))
               While NextElement( *this\__rows( ))
                  If *this\__rows( )\sublevel > sublevel
                     DeleteElement( *this\__rows( ))
                     *this\count\items - 1
                  Else
                     Break
                  EndIf
               Wend
               PopListPosition( *this\__rows( ))
            EndIf
            
            ; if the item to be removed is selected,
            ; then we set the next item of its level as selected
            If *this\FocusedRow( ) = *this\__rows( )
               If *this\FocusedRow( )\press
                  *this\FocusedRow( )\press = 0
               EndIf
               *this\FocusedRow( )\focus = 0 ;???
               
               ; if he is a parent then we find the next item of his level
               PushListPosition( *this\__rows( ))
               While NextElement( *this\__rows( ))
                  If *this\__rows( )\sublevel = *this\FocusedRow( )\sublevel
                     Break
                  EndIf
               Wend
               
               ; if we remove the last selected then
               If *this\FocusedRow( ) = *this\__rows( )
                  *this\FocusedRow( ) = PreviousElement( *this\__rows( ))
               Else
                  *this\FocusedRow( ) = *this\__rows( )
               EndIf
               
               PopListPosition( *this\__rows( ))
               
               If *this\FocusedRow( )
                  If *this\FocusedRow( )\ParentRow( ) And
                     *this\FocusedRow( )\ParentRow( )\ButtonBox( )\state
                     *this\FocusedRow( ) = *this\FocusedRow( )\ParentRow( )
                  EndIf
                  
                  *this\FocusedRow( )\press       = #True
                  *this\FocusedRow( )\focus       = 1
                  *this\FocusedRow( )\color\state = #__s_2 + Bool( *this\focus = #False )
               EndIf
            EndIf
            
            *this\WidgetChange( ) = 1
            *this\count\items - 1
            DeleteElement( *this\__rows( ))
            PostRepaint( *this\root )
            result = #True
         EndIf
         
         If *this\type = #__type_Panel
            result = bar_tab_removeItem( *this\TabBox( ), Item )
            
         ElseIf ( *this\type = #__type_TabBar Or *this\type = #__type_ToolBar )
            result = bar_tab_removeItem( *this, Item )
            
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l ClearItems( *this._s_WIDGET )
         Protected result
         
         ; - widget::editor_clear_items( )
         If *this\type = #__type_Editor
            edit_ClearItems( *this )
            ProcedureReturn #True
         EndIf
         
         ; - widget::tree_clear_items( )
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If *this\count\items <> 0
               ;; Post( *this, #__event_Change, #PB_All ) ;
               
               *this\WidgetChange( ) = 1
               *this\count\items     = 0
               
               If *this\FocusedRow( )
                  *this\FocusedRow( )\color\state = 0
                  ClearStructure(*this\FocusedRow( ), _s_ROWS)
                  *this\FocusedRow( ) = 0
               EndIf
               
               ClearList( *this\__rows( ))
               PostRepaint( *this\root )
            EndIf
         EndIf
         
         ; - Panel_ClearItems( )
         If *this\type = #__type_Panel
            result = bar_tab_clearItems( *this\TabBox( ) )
            
         ElseIf ( *this\type = #__type_TabBar Or *this\type = #__type_ToolBar )
            result = bar_tab_clearItems( *this )
            
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l CountItems( *this._s_WIDGET )
         ProcedureReturn *this\count\items
      EndProcedure
      
      ;-
      Procedure GetBar( *this._s_WIDGET, type.b, index.b = 0 )
         If type = #__type_scrollbar
            If *this\scroll
               If index = 1
                  ProcedureReturn *this\scroll\v
               EndIf
               If index = 2
                  ProcedureReturn *this\scroll\h
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i GetItem( *this._s_WIDGET, parent_sublevel.l = - 1 ) ;???
         Protected result
         Protected *rows._s_ROWS
         Protected *widget._s_WIDGET
         
         If *this
            If parent_sublevel = - 1
               *widget = *this
               result  = *widget\AddedTabIndex( )
               
            Else
               *rows = *this
               
               While *rows And *rows <> *rows\ParentRow( )
                  
                  If parent_sublevel = *rows\ParentRow( )\sublevel
                     result = *rows
                     Break
                  EndIf
                  
                  *rows = *rows\ParentRow( )
               Wend
               
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetCursor( *this._s_WIDGET = #Null )
         If *this > 0
            ProcedureReturn *this\cursor
         Else
            ProcedureReturn mouse( )\cursor
         EndIf
      EndProcedure
      
      Procedure.i GetAddress( *this._s_WIDGET )
         ProcedureReturn *this\address
      EndProcedure
      
      Procedure.l GetLevel( *this._s_WIDGET )
         ProcedureReturn *this\level ; - 1
      EndProcedure
      
      Procedure.s GetClass( *this._s_WIDGET )
         ProcedureReturn *this\class
      EndProcedure
      
      Procedure.l GetDeltaX( *this._s_WIDGET )
         ProcedureReturn ( mouse( )\delta\x + *this\container_x( ) )
      EndProcedure
      
      Procedure.l GetDeltaY( *this._s_WIDGET )
         ProcedureReturn ( mouse( )\delta\y + *this\container_y( ) )
      EndProcedure
      
      Procedure.i GetFont( *this._s_WIDGET )
         ProcedureReturn *this\text\fontID
      EndProcedure
      
      Procedure.i GetData( *this._s_WIDGET )
         ProcedureReturn *this\data
      EndProcedure
      
      Procedure GetFirst( *this._s_WIDGET, tabindex.l )
         Protected *result._s_WIDGET
         
         If *this\haschildren
            PushListPosition( __widgets( ) )
            ChangeCurrentElement( __widgets( ), *this\address )
            While NextElement( __widgets( ) )
               If __widgets( ) = *this\LastWidget( ) Or
                  __widgets( )\AddedTabIndex( ) = tabindex
                  *result = __widgets( )
                  Break
               EndIf
            Wend
            PopListPosition( __widgets( ) )
         Else
            *result = *this
         EndIf
         
         ; Debug "   "+*result\class
         
         ProcedureReturn *result
      EndProcedure
      
      Procedure GetLast( *this._s_WIDGET, tabindex.l )
         Protected result, *after._s_WIDGET, *parent._s_WIDGET
         
         If *this\LastWidget( )
            If *this\haschildren
               If tabindex = - 1
                  
                  Protected *root._s_ROOT
                  If *this\root
                     *root = *this\root
                  Else
                     *root = *this
                  EndIf
                  
                  ;\\
                  LastElement( __widgets( ) )
                  result = __widgets( )\LastWidget( )
                  
                  ; get after widget
                  If *this\AfterWidget( )
                     *after = *this\AfterWidget( )
                  Else
                     *parent = *this
                     Repeat
                        *parent = *parent\parent
                        If Not *parent
                           ProcedureReturn 0
                        EndIf
                        If *parent\AfterWidget( )
                           *after = *parent\AfterWidget( )
                           Break
                        EndIf
                     Until is_root_( *parent )
                  EndIf
                  
                  If *after
                     PushListPosition( __widgets( ) )
                     ChangeCurrentElement( __widgets( ), *after\address )
                     While PreviousElement( __widgets( ) )
                        If __widgets( )\AddedTabIndex( ) = tabindex ;Or __widgets( ) = *this
                           Break
                        EndIf
                     Wend
                     result = __widgets( )\LastWidget( )
                     PopListPosition( __widgets( ) )
                  EndIf
               Else
                  PushListPosition( __widgets( ) )
                  ;Debug ""+tabindex +" "+ *this\LastWidget( )\BeforeWidget( ) +" "+ *this\LastWidget( )\AfterWidget( )
                  If tabindex = 0
                     If is_root_(*this)
                        result = *this\LastWidget( )
                     Else
                        result = *this 
                     EndIf
                  Else
                     result = *this\LastWidget( )
                  EndIf
                  If tabindex >= 0 And 
                     StartEnumerate( *this )
                     ;
                     If widget( )\AddedTabIndex( ) = tabindex
                        result = widget( ) 
                     EndIf
                     StopEnumerate( )
                  EndIf
                  PopListPosition( __widgets( ) )
                  
                  ;             If *this\LastWidget( )\AddedTabIndex( ) = tabindex
                  ;                result = *this\LastWidget( )
                  ;             Else
                  ;                If tabindex = 0
                  ;                   result = *this;\parent\FirstWidget( )
                  ;                Else
                  ;                   Debug tabindex;*this\LastWidget( )\text\string
                  ; result = *this\LastWidget( )
                  ;                EndIf
                  ;             EndIf
                  *this = result
                  If *this\LastWidget( )
                     result = *this\LastWidget( )
                  EndIf
                  
               EndIf
            Else
               result = *this\LastWidget( )
            EndIf
            
            ProcedureReturn result
         EndIf
      EndProcedure
      
      Procedure _GetLast( *this._s_WIDGET, tabindex.l )
         Protected result, *after._s_WIDGET, *parent._s_WIDGET
         
         If *this\LastWidget( )
            If *this\haschildren
               Protected *root._s_ROOT
               If *this\root
                  *root = *this\root
               Else
                  *root = *this
               EndIf
               
               ;\\
               LastElement( __widgets( ) )
               result = __widgets( )\LastWidget( )
               
               ; get after widget
               If *this\AfterWidget( )
                  *after = *this\AfterWidget( )
               Else
                  *parent = *this
                  Repeat
                     *parent = *parent\parent
                     If Not *parent
                        ProcedureReturn 0
                     EndIf
                     If *parent\AfterWidget( )
                        *after = *parent\AfterWidget( )
                        Break
                     EndIf
                  Until is_root_( *parent )
               EndIf
               
               If *after
                  PushListPosition( __widgets( ) )
                  ChangeCurrentElement( __widgets( ), *after\address )
                  While PreviousElement( __widgets( ) )
                     If __widgets( )\AddedTabIndex( ) = tabindex ;Or __widgets( ) = *this
                        Break
                     EndIf
                  Wend
                  result = __widgets( )\LastWidget( )
                  PopListPosition( __widgets( ) )
               EndIf
               
               
               ;                If Not *this\root
               ;                   ProcedureReturn *this\LastWidget( )
               ;                EndIf
               ;
               ;                ;\\
               ;                LastElement( this___widgets( ) )
               ;                result = this___widgets( )\LastWidget( )
               ;
               ;                ; get after widget
               ;                If *this\AfterWidget( )
               ;                   *after = *this\AfterWidget( )
               ;                Else
               ;                   *parent = *this
               ;                   Repeat
               ;                      *parent = *parent\parent
               ;                      If Not *parent
               ;                         ProcedureReturn 0
               ;                      EndIf
               ;                      If *parent\AfterWidget( )
               ;                         *after = *parent\AfterWidget( )
               ;                         Break
               ;                      EndIf
               ;                   Until is_root_( *parent )
               ;                EndIf
               ;
               ;                If *after
               ;                   PushListPosition( this___widgets( ) )
               ;                   ChangeCurrentElement( this___widgets( ), *after\address )
               ;                   While PreviousElement( this___widgets( ) )
               ;                      If this___widgets( )\AddedTabIndex( ) = tabindex ;Or this___widgets( ) = *this
               ;                         Break
               ;                      EndIf
               ;                   Wend
               ;                   result = this___widgets( )\LastWidget( )
               ;                   PopListPosition( this___widgets( ) )
               ;                EndIf
               ;
            Else
               result = *this\LastWidget( )
            EndIf
            
            ProcedureReturn result
         EndIf
      EndProcedure
      
      Procedure.i GetPosition( *this._s_WIDGET, position.l )
         Protected result
         
         Select position
            Case #PB_List_First
               result = GetFirst( *this\parent, *this\AddedTabIndex( ) )
            Case #PB_List_Before
               result = *this\BeforeWidget( )
            Case #PB_List_After
               result = *this\AfterWidget( )
            Case #PB_List_Last
               result = GetLast( *this\parent, *this\AddedTabIndex( ) )
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetAttribute( *this._s_WIDGET, Attribute.l )
         Protected result.i
         
         If *this\type = #__type_Tree
            If Attribute = #PB_Tree_Collapsed
               result = *this\mode\collapsed
            EndIf
         EndIf
         
         If *this\type = #__type_Splitter
            Select Attribute
               Case #PB_Splitter_FirstGadget : result = *this\split_1( )
               Case #PB_Splitter_SecondGadget : result = *this\split_2( )
               Case #PB_Splitter_FirstMinimumSize : result = *this\bar\button[1]\size
               Case #PB_Splitter_SecondMinimumSize : result = *this\bar\button[2]\size
            EndSelect
         EndIf
         
         ; is_scrollbars_( *this )
         If *this\type = #__type_ScrollArea Or
            *this\type = #__type_MDI
            Select Attribute
               Case #PB_ScrollArea_X : result = *this\scroll\h\bar\page\pos
               Case #PB_ScrollArea_Y : result = *this\scroll\v\bar\page\pos
               Case #PB_ScrollArea_InnerWidth : result = *this\scroll\h\bar\max
               Case #PB_ScrollArea_InnerHeight : result = *this\scroll\v\bar\max
               Case #PB_ScrollArea_ScrollStep : result = *this\scroll\increment
            EndSelect
         EndIf
         
         If *this\type = #__type_Spin Or
            *this\type = #__type_TabBar Or
            *this\type = #__type_ToolBar Or
            *this\type = #__type_TrackBar Or
            *this\type = #__type_ScrollBar Or
            *this\type = #__type_ProgressBar ; Or *this\type = #__type_Splitter
            
            Select Attribute
               Case #__bar_minimum : result = *this\bar\min          ; 1
               Case #__bar_maximum : result = *this\bar\max          ; 2
               Case #__bar_pagelength : result = *this\bar\page\len  ; 3
               Case #__bar_scrollstep : result = *this\scroll\increment ; 5
                  
               Case #__bar_buttonsize : result = *this\bar\button[1]\size
               Case #__bar_direction : result = *this\bar\direction
               Case #__bar_invert : result = *this\bar\invert
            EndSelect
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.f GetState( *this._s_WIDGET )
         ;\\ custom object
         If *this\type = 0
            ProcedureReturn *this\state
         EndIf
         
         ;\\ ComboBox
         If *this\popup
            *this = *this\popup
         EndIf
         
         ;\\
         If *this\type = #__type_Window
            If *this\resize & #__resize_minimize
               ProcedureReturn #PB_Window_Minimize
            EndIf
            If *this\resize & #__resize_maximize
               ProcedureReturn #PB_Window_Maximize
            EndIf
            ProcedureReturn #PB_Window_Normal
         EndIf
         
         ;\\
         If *this\type = #__type_Editor
            ProcedureReturn *this\FocusedLineIndex( )
         EndIf
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            ProcedureReturn *this\FocusedRowIndex( )
         EndIf
         
         If *this\type = #__type_Button Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_Option Or
            *this\type = #__type_CheckBox
            
            ProcedureReturn *this\state
         EndIf
         
         If *this\type = #__type_Panel
            If *this\TabBox( )
               ProcedureReturn *this\TabBox( )\FocusedTabIndex( )
            EndIf
         EndIf
         
         If *this\type = #__type_TabBar Or
            *this\type = #__type_ToolBar
            
            ProcedureReturn *this\FocusedTabIndex( )
         Else
            If *this\bar
               ProcedureReturn *this\bar\page\pos
            EndIf
         EndIf
      EndProcedure
      
      Procedure.s GetText( *this._s_WIDGET );, column.l = 0 )
         If *this\type = #__type_Tree
            If *this\FocusedRow( )
               ProcedureReturn *this\FocusedRow( )\text\string
            EndIf
         EndIf
         
         If *this\type = #__type_Window
            ProcedureReturn *this\Title( )\string
         EndIf
         
         If *this\text\pass
            ProcedureReturn *this\text\edit\string
         Else
            ProcedureReturn *this\text\string
         EndIf
      EndProcedure
      
      Procedure.l GetColor( *this._s_WIDGET, ColorType.l )
         Protected Color.l
         
         With *This
            Select ColorType
               Case #__color_line : Color = *this\color\line
               Case #__color_back : Color = *this\color\back
               Case #__color_front : Color = *this\color\front
               Case #__color_frame : Color = *this\color\frame
            EndSelect
         EndWith
         
         ProcedureReturn Color
      EndProcedure
      
      Procedure.a GetFrame( *this._s_WIDGET, mode.b = 0 )
         ProcedureReturn *this\fs[mode]
      EndProcedure
      
      Procedure.i GetParent( *this._s_WIDGET )
         ProcedureReturn *this\parent
      EndProcedure
      
      Procedure.i GetGadget( *this._s_WIDGET = #Null ) ; Returns canvas gadget
         Protected.i result
         If is_widget_( *this )
            result = *this\root\canvas\gadget
         Else
            If Root( )
               result = Root( )\canvas\gadget
            EndIf
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetWindow( *this._s_WIDGET = #Null ) ; Returns window
         Protected.i result
         If is_widget_( *this )
            If is_root_( *this )
               result = *this\root\canvas\window
            Else
               result = *this\window
            EndIf
         Else
            If Root( )
               result = Root( )\canvas\window
            EndIf
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetRoot( *this._s_WIDGET ) ; Returns root widget
         ProcedureReturn *this\root
      EndProcedure
      
      Procedure.l GetCount( *this._s_WIDGET, mode.b = #False )
         If mode
            ProcedureReturn *this\count\type
         Else
            ProcedureReturn *this\count\index
         EndIf
      EndProcedure
      
      ;-
      Procedure.i ChangeCursor( *this._s_WIDGET, *cursor )
         Protected result.i = *this\cursor
         
         If *this\cursor <> *cursor
            ; Debug "changeCURSOR ( "+ *cursor +" ) "
            *this\cursor = *cursor
         EndIf
         
         ;\\
         If mouse( )\drag
            If *this\dragstart
               If *this\enter > 0
                  If mouse( )\drag\state <> #PB_Drag_Leave
                     ; Debug "changeDRAG-CURSOR ( "+ *this\cursor +" ) " + mouse( )\drag\cursor
                     mouse( )\drag\cursor = *this\cursor
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetCursor( *this._s_WIDGET, *cursor )
         If *this > 0
            If *this\cursor[1] <> *cursor
               ; Debug "setCURSOR( " + *cursor +" )"
               
               ChangeCursor( *this, *cursor )
               *this\cursor[1] = *cursor
               ProcedureReturn 1
            EndIf
         Else
            If mouse( )\cursor <> *cursor
               mouse( )\cursor = *cursor
               ProcedureReturn 1
            EndIf
         EndIf
      EndProcedure
      
      Procedure.l SetColor( *this._s_WIDGET, ColorType.l, Color.l, Column.l = 0 )
         *this\color\alpha.allocate( COLOR )
         Protected result.l, alpha.a = Alpha( Color )
         
         If Not alpha
            Color = Color & $FFFFFF | 255 << 24
         EndIf
         
         set_color_( result, *this\color, ColorType, Color, alpha, [Column] )
         
         If *this\scroll
            If ColorType = #__color_back
               If *this\scroll\v
                  *this\scroll\v\color\back[Column] = color
               EndIf
               If *this\scroll\h
                  *this\scroll\h\color\back[Column] = color
               EndIf
            EndIf
         EndIf
         
         If result
            PostRepaint( *this\root )
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure SetBackgroundColor( *this._s_WIDGET, color.l )
         ProcedureReturn SetColor( *this, #__color_back, color )
      EndProcedure
      
      Procedure SetClass( *this._s_WIDGET, class.s )
         If *this\class <> class
            *this\class = class
            ProcedureReturn *this
         EndIf
      EndProcedure
      
      Procedure.b SetState( *this._s_WIDGET, state.f )
         Protected result
         
         ;\\ custom object
         If *this\type = 0
            *this\state = state
            ProcedureReturn 1
         EndIf
         
         ;\\
         If *this\type = #__type_ComboBox
            If *this\popup
               If is_no_select_item_( *this\popup\__rows( ), State )
                  ProcedureReturn #False
               EndIf
               
               If *this\popup\FocusedRow( ) <> *this\popup\__rows( )
                  
                  If *this\popup\FocusedRow( )
                     If *this\popup\FocusedRow( )\focus
                        *this\popup\FocusedRow( )\focus = #False
                     EndIf
                     
                     *this\popup\FocusedRow( )\color\state = #__s_0
                  EndIf
                  
                  *this\popup\FocusedRow( )             = *this\popup\__rows( )
                  *this\popup\FocusedRow( )\focus       = #True
                  *this\popup\FocusedRow( )\color\state = #__s_2
                  Debug "SETSTATE - combo " + GetState( *this\popup )
                  ;*this\text\string = *this\popup\FocusedRow( )\text\string
                  
                  SetText( *this, *this\popup\FocusedRow( )\text\string )
                  ;SetText( *this, GetItemText( *this\popup, GetState( *this\popup ) ) )
               EndIf
            EndIf
         EndIf
         
         ;\\
         If *this\type = #__type_Button Or
            *this\type = #__type_ButtonImage
            
            If *this\flag & #PB_Button_Toggle
               If *this\state <> state
                  *this\state = state
                  If state
                     *this\color\state = #__s_2
                  Else
                     If *this\enter
                        *this\color\state = #__s_1
                     Else
                        *this\color\state = #__s_0
                     EndIf
                  EndIf
                  
                  DoEvents( *this, #__event_Change )
                  PostRepaint( *this\root )
                  ProcedureReturn #True
               EndIf
            EndIf
         EndIf
         
         ;\\ Ok
         If *this\type = #__type_Option Or
            *this\type = #__type_CheckBox
            
            If *this\state <> state
               If *this\GroupBox( )
                  If *this\GroupBox( )\GroupBox( ) <> *this
                     If *this\GroupBox( )\GroupBox( )
                        *this\GroupBox( )\GroupBox( )\state = 0
                     EndIf
                     *this\GroupBox( )\GroupBox( ) = *this
                  EndIf
               EndIf
               *this\state = state
               If Not Send( *this, #__event_Change )
                  PostEventRepaint( *this\root )
               EndIf
               ProcedureReturn #True
            EndIf
         EndIf
         
         ;\\ - widget::IPaddress_SetState( )
         If *this\type = #__type_IPAddress
            If *this\FocusedLineIndex( ) <> State
               *this\FocusedLineIndex( ) = State
               SetText( *this, Str( IPAddressField( State, 0 )) + "." +
                               Str( IPAddressField( State, 1 )) + "." +
                               Str( IPAddressField( State, 2 )) + "." +
                               Str( IPAddressField( State, 3 ) ))
            EndIf
         EndIf
         
         ;\\ - widget::Window_SetState( )
         If *this\type = #__type_Window
            ; restore state
            If state = #PB_Window_Normal
               If Not Send( *this, #__event_restore )
                  *this\resize | #__resize_restore
                  If *this\resize & #__resize_minimize
                     *this\resize & ~ #__resize_minimize
                     ;                   *this\CloseButton( )\hide    = 0
                     ;                   *this\MinimizeButton( )\hide = 0
                  EndIf
                  If *this\resize & #__resize_maximize
                     *this\resize & ~ #__resize_maximize
                     ;                   *this\MaximizeButton( )\hide = 0
                  EndIf
                  
                  Resize( *this,
                          *this\x[#__c_restore],
                          *this\y[#__c_restore],
                          *this\width[#__c_restore],
                          *this\height[#__c_restore] )
                  
                  ;                If is_root_( *this )
                  ;                   PostEvent( #PB_Event_RestoreWindow, *this\root\canvas\window, *this )
                  ;                EndIf
                  
                  result = #True
               EndIf
            EndIf
            
            ; maximize state
            If state = #PB_Window_Maximize
               If Not Send( *this, #__event_maximize )
                  *this\resize | #__resize_maximize
                  If *this\resize & #__resize_minimize
                     *this\resize & ~ #__resize_minimize
                  Else
                     *this\x[#__c_restore]      = *this\container_x( )
                     *this\y[#__c_restore]      = *this\container_y( )
                     *this\width[#__c_restore]  = *this\container_width( )
                     *this\height[#__c_restore] = *this\container_height( )
                  EndIf
                  
                  ;                If *this\MinimizeButton( )\hide = 0
                  ;                   *this\MaximizeButton( )\hide = 1
                  ;                EndIf
                  
                  Resize( *this, *this\bs - *this\fs, *this\bs - *this\fs,
                          *this\parent\container_width( ) - *this\bs * 2,
                          *this\parent\container_height( ) - *this\bs * 2 - *this\fs[2] )
                  
                  ;                If is_root_( *this )
                  ;                   PostEvent( #PB_Event_MaximizeWindow, *this\root\canvas\window, *this )
                  ;                EndIf
                  
                  result = #True
               EndIf
            EndIf
            
            ; minimize state
            If state = #PB_Window_Minimize
               If Not Send( *this, #__event_Minimize )
                  *this\resize | #__resize_minimize
                  If *this\resize & #__resize_maximize
                     *this\resize & ~ #__resize_maximize
                  Else
                     *this\x[#__c_restore]      = *this\container_x( )
                     *this\y[#__c_restore]      = *this\container_y( )
                     *this\width[#__c_restore]  = *this\container_width( )
                     *this\height[#__c_restore] = *this\container_height( )
                  EndIf
                  
                  ;                *this\CloseButton( )\hide = 1
                  ;                If *this\MaximizeButton( )\hide = 0
                  ;                   *this\MinimizeButton( )\hide = 1
                  ;                EndIf
                  
                  Resize( *this,
                          *this\x[#__c_restore],
                          *this\parent\container_height( ) - *this\bs * 2 - *this\fs[2] + (*this\bs - *this\fs),
                          *this\width[#__c_restore],
                          *this\bs * 2 - *this\fs[2] )
                  
                  ;                If is_root_( *this )
                  ;                   PostEvent( #PB_Event_MinimizeWindow, *this\root\canvas\window, *this )
                  ;                EndIf
                  
                  result = #True
               EndIf
            EndIf
         EndIf
         
         ;\\ - widget::Editor_SetState( )
         If *this\type = #__type_Editor
            edit_SetState( *this, state )
         EndIf
         
         ;\\ - widget::tree_setState
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            ; Debug *this\mode\check
            
            If *this\count\items
               ;\\ min\max state
               If State < 0
                  State = - 1
               EndIf
               If State > *this\count\items - 1
                  State = *this\count\items - 1
               EndIf
               
               
               ;\\
               If *this\FocusedRowIndex( ) <> state
                  ; Debug ""+*this\class +" "+ *this\FocusedRowIndex( ) +" "+ state
                  *this\FocusedRowIndex( ) = state
                  
                  ;\\ scroll to visible
                  *this\scroll\state = - 1
                  
                  If state = - 1
                     ;\\ reset all selected items
                     If *this\FocusedRow( )
                        *this\FocusedRow( )\focus       = 0
                        *this\FocusedRow( )\color\state = #__s_0
                        *this\FocusedRow( )             = #Null
                     EndIf
                  Else
                     If is_no_select_item_( *this\__rows( ), State )
                        ProcedureReturn #False
                     EndIf
                     
                     ;\\ example file "D&D-items"
                     If *this\drop
                        If *this\PressedRow( )
                           *this\__rows( )\index = State
                           
                           Debug " ---------- *this\PressedRow( )\children's " + *this\PressedRow( )\childrens
                           
                           ;\\
                           PushListPosition( *this\__rows( ))
                           If *this\__rows( )\index > *this\PressedRow( )\index
                              ;\\ drag up and drop down
                              While PreviousElement( *this\__rows( ))
                                 If *this\__rows( )\index > *this\PressedRow( )\index
                                    *this\__rows( )\index - 1 - *this\PressedRow( )\childrens
                                 EndIf
                              Wend
                           ElseIf *this\__rows( )\index < *this\PressedRow( )\index
                              ;\\ drag down and drop up
                              While NextElement( *this\__rows( ))
                                 If *this\__rows( )\index < *this\PressedRow( )\index
                                    *this\__rows( )\index + 1 + *this\PressedRow( )\childrens
                                 EndIf
                              Wend
                           EndIf
                           PopListPosition( *this\__rows( ))
                           
                           ;\\
                           PushListPosition( *this\__rows( ))
                           While NextElement( *this\__rows( ))
                              If *this\__rows( )\sublevel = *this\PressedRow( )\sublevel
                                 Break
                              ElseIf *this\__rows( )\sublevel > *this\PressedRow( )\sublevel : State + 1
                                 *this\__rows( )\index = State
                              EndIf
                           Wend
                           PopListPosition( *this\__rows( ))
                        EndIf
                     EndIf
                     
                     ;\\
                     If *this\FocusedRow( ) <> *this\__rows( )
                        If *this\FocusedRow( )
                           *this\FocusedRow( )\focus       = 0
                           *this\FocusedRow( )\color\state = #__s_0
                        EndIf
                        
                        *this\FocusedRow( ) = *this\__rows( )
                        
                        ; click select mode
                        If *this\mode\clickSelect
                           If *this\FocusedRow( )\focus
                              *this\FocusedRow( )\focus       = 0
                              *this\FocusedRow( )\color\state = #__s_0
                           Else
                              *this\FocusedRow( )\focus       = 1
                              *this\FocusedRow( )\color\state = #__s_3
                           EndIf
                           
                           DoEvents( *this, #__event_Change, *this\FocusedRow( )\index, *this\FocusedRow( ) )
                        Else
                           *this\FocusedRow( )\focus       = 1
                           *this\FocusedRow( )\color\state = #__s_2 + Bool( *this\focus = #False )
                           If *this\anchors
                              *this\root\repaint = #True
                           Else
                              ;DoEvents( *this, #__event_StatusChange, *this\FocusedRow( )\index, *this\FocusedRow( ) )
                           EndIf
                        EndIf
                        
                        PostRepaint( *this\root )
                        ProcedureReturn #True
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         Select *this\type
            Case #__type_Panel
               result = bar_tab_SetState( *this\TabBox( ), state )
               
            Case #__type_TabBar, #__type_ToolBar
               result = bar_tab_SetState( *this, state )
               
            Case #__type_Spin ,
                 #__type_TrackBar,
                 #__type_ScrollBar,
                 #__type_ProgressBar,
                 #__type_Splitter
               
               result = bar_SetState( *this, state )
         EndSelect
         
         If result
            PostRepaint( *this\root )
         EndIf
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetAttribute( *this._s_WIDGET, Attribute.l, *value )
         Protected result.i
         Protected value = *value
         
         If *this\type = #__type_Spin Or
            ( *this\type = #__type_TabBar Or *this\type = #__type_ToolBar ) Or
            *this\type = #__type_TrackBar Or
            *this\type = #__type_ScrollBar Or
            *this\type = #__type_ProgressBar Or
            *this\type = #__type_Splitter
            result = bar_SetAttribute( *this, Attribute, *value )
         EndIf
         
         If *this\type = #__type_Button Or
            *this\type = #__type_ButtonImage
            
            Select Attribute
               Case #PB_Button_Image
                  set_image_( *this, *this\image, *value )
                  set_image_( *this, *this\image[#__image_released], *value )
                  
               Case #PB_Button_PressedImage
                  set_image_( *this, *this\image[#__image_pressed], *value )
                  
            EndSelect
         EndIf
         
         ;  is_scrollbars_( *this )
         If *this\type = #__type_ScrollArea Or
            *this\type = #__type_MDI
            
            Select Attribute
               Case #PB_ScrollArea_X
                  If bar_SetState( *this\scroll\h, *value )
                     ; *this\scroll_x( ) = *this\scroll\h\bar\page\pos
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_Y
                  If bar_SetState( *this\scroll\v, *value )
                     ; *this\scroll_y( ) = *this\scroll\v\bar\page\pos
                     result = 1
                  EndIf
                  
               Case #PB_ScrollArea_InnerWidth
                  If bar_SetAttribute( *this\scroll\h, #__bar_maximum, *value )
                     *this\scroll_width( ) = *this\scroll\h\bar\max
                     result                = 1
                  EndIf
                  
               Case #PB_ScrollArea_InnerHeight
                  If bar_SetAttribute( *this\scroll\v, #__bar_maximum, *value )
                     *this\scroll_height( ) = *this\scroll\v\bar\max
                     result                 = 1
                  EndIf
                  
               Case #PB_ScrollArea_ScrollStep
                  If *this\scroll
                     If *this\scroll\v
                        *this\scroll\v\scroll\increment = value
                     EndIf
                     If *this\scroll\h
                        *this\scroll\h\scroll\increment = value
                     EndIf
                  EndIf
                  
            EndSelect
         EndIf
         
         If *this\type = #PB_GadgetType_Image
            Select Attribute
               Case #__DisplayMode
                  Select Value
                     Case 0 ; Default
                            ;                 *this\image\Align\Vertical = 0
                            ;                 *this\image\Align\Horizontal = 0
                        
                     Case 1 ; Center
                            ;                 *this\image\Align\Vertical = 1
                            ;                 *this\image\Align\Horizontal = 1
                        
                     Case 3 ; Mosaic
                     Case 2 ; Stretch
                        
                     Case 5 ; Proportionally
                  EndSelect
            EndSelect
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetText( *this._s_WIDGET, Text.s )
         Protected result.i, Len.i, String.s, i.i
         
         If *this\type = #__type_Window
            *this\Title( )\string = Text
         EndIf
         
         If *this\type = #__type_Tree
            If *this\FocusedRow( )
               *this\FocusedRow( )\text\string = Text
            EndIf
         EndIf
         
         If *this\type = #__type_ComboBox
            If *this\StringBox( )
               ProcedureReturn edit_SetText( *this\StringBox( ), Text )
            Else
               ; ProcedureReturn edit_SetText( *this, Text )
               If *This\text\string.s <> Text.s
                  *This\text\string.s = Text.s
                  *This\TextChange( ) = #True
                  result              = #True
                  PostRepaint( *this\root )
               EndIf
            EndIf
         EndIf
         
         If *this\type = #__type_Editor Or
            *this\type = #__type_String Or
            *this\type = #__type_text Or
            *this\type = #__type_hyperlink Or
            *this\type = #__type_Button
            
            ProcedureReturn edit_SetText( *this, Text )
            
            
         Else
            ;         If *this\text\multiline = 0
            ;           Text = RemoveString( Text, #LF$ )
            ;         EndIf
            
            Text = ReplaceString( Text, #LFCR$, #LF$ )
            Text = ReplaceString( Text, #CRLF$, #LF$ )
            Text = ReplaceString( Text, #CR$, #LF$ )
            ;Text + #LF$
            
            If *This\text\string.s <> Text.s
               *This\text\string.s = Text.s
               *This\TextChange( ) = #True
               result              = #True
               PostRepaint( *This\root )
            EndIf
         EndIf
         
         *this\WidgetChange( ) = 1
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetFont( *this._s_WIDGET, FontID.i )
         Protected result
         
         If *this\text\fontID <> FontID
            *this\text\fontID = FontID
            
            If *this\type = #__type_Editor
               *this\TextChange( ) = 1
               
            EndIf
            
            ReDraw( *this\root )
            
            result = #True
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure SetImage( *this._s_WIDGET, *image );, mode.a = 0 )
         set_image_( *this, *this\Image, *image )
      EndProcedure
      
      Procedure SetBackgroundImage( *this._s_WIDGET, *image )
         set_image_( *this, *this\Image[#__image_background], *image )
      EndProcedure
      
      Procedure SetData( *this._s_WIDGET, *data )
         *this\data = *data
      EndProcedure
      
      Procedure SetForeground( *this._s_WIDGET )
         While is_window_( *this )
            ; SetPosition( *this, #PB_List_Last )
            *this = *this\window
         Wend
         
         If PopupWindow( )
            ; SetPosition( PopupWindow( ), #PB_List_Last )
         EndIf
      EndProcedure
      
      Procedure.i SetDeactive( *this._s_WIDGET )
         Protected *active._s_WIDGET
         
         If *this
            If ActiveWindow( )
               If Not IsChild( *this, ActiveWindow( ) )
                  If ActiveWindow( )\focus = #True
                     ActiveWindow( )\focus = #False
                     DoFocus( ActiveWindow( ), #__event_LostFocus )
                  EndIf
               EndIf
               
               ;\\ when we deactivate the window
               ;\\ we will deactivate his last active gadget
               If ActiveGadget( ) And
                  ActiveGadget( )\focus = #True
                  ActiveGadget( )\focus = #False
                  DoFocus( ActiveGadget( ), #__event_LostFocus )
                  
                  ;\\ is integral scroll bars
                  If ActiveGadget( )\scroll
                     If ActiveGadget( )\scroll\v And
                        Not ActiveGadget( )\scroll\v\hide And
                        ActiveGadget( )\scroll\v\type
                        
                        If ActiveGadget( )\scroll\v\focus = #True
                           ActiveGadget( )\scroll\v\focus = #False
                           DoFocus( ActiveGadget( )\scroll\v, #__event_LostFocus )
                        EndIf
                     EndIf
                     If ActiveGadget( )\scroll\h And
                        Not ActiveGadget( )\scroll\h\hide And
                        ActiveGadget( )\scroll\h\type
                        
                        If ActiveGadget( )\scroll\h\focus = #True
                           ActiveGadget( )\scroll\h\focus = #False
                           DoFocus( ActiveGadget( )\scroll\h, #__event_LostFocus )
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ is integral tab bar
                  If ActiveGadget( )\TabBox( ) And
                     Not ActiveGadget( )\TabBox( )\hide And
                     ActiveGadget( )\TabBox( )\type
                     
                     If ActiveGadget( )\TabBox( )\focus = #True
                        ActiveGadget( )\TabBox( )\focus = #False
                        DoFocus( ActiveGadget( )\TabBox( ), #__event_LostFocus )
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               If ActiveGadget( )
                  *active = ActiveGadget( )
               ElseIf ActiveWindow( )
                  *active = ActiveWindow( )
               EndIf
               
               ;\\ set deactive all parents
               If *active And
                  *active\address And
                  Not is_root_( *active )
                  
                  If Not IsChild( *this, *active )
                     PushListPosition( __widgets( ) )
                     ChangeCurrentElement( __widgets( ), *active\address )
                     While PreviousElement( __widgets( ))
                        widget( ) = __widgets( )
                        
                        If widget( ) = *this\window
                           Break
                        EndIf
                        If widget( ) = *this
                           Break
                        EndIf
                        If IsChild( *active, widget( ))
                           ;If Not IsChild( *this, widget( ) )
                           If widget( )\focus = #True
                              widget( )\focus = #False
                              DoFocus( widget( ), #__event_LostFocus )
                           EndIf
                           ;EndIf
                        EndIf
                     Wend
                     PopListPosition( __widgets( ) )
                  EndIf
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i SetActive( *this._s_WIDGET )
         Protected result.i, *active._s_WIDGET
         
         If *this And Not *this\disable
            ;\\
            If a_transformer( *this )
               If *this\anchors
                  If GetActiveGadget( ) <> *this\root\canvas\gadget
                     SetActiveGadget( *this\root\canvas\gadget )
                  EndIf
                  ; ProcedureReturn a_set( *this )
               Else
                  ProcedureReturn 0
               EndIf
            EndIf
            
            ;\\
            If Popup( ) And *this = Popup( )\widget
               ; Debug " Popup( setActive ) "
               ; *this = *this\popup
               ProcedureReturn 0
            EndIf
            
            ;\\ если нужно отключить событие интегрированного гаджета
            If Not is_window_( *this )
               If is_integral_( *this )
                  *this = *this\parent
                  
                  ;\\ если он тоже встроеный
                  If *this\child
                     *this = *this\parent
                  EndIf
               EndIf
            EndIf
            
            ;\\ deactivate
            If GetActive( )
               If GetActive( ) <> *this
                  SetDeactive( *this )
               EndIf
            EndIf
            
            ;\\
            GetActive( ) = *this
            
            ;\\
            If *this\focus = #False
               *this\focus = #True
               
               ;\\ set active all parents
               If *this\address
                  If Not is_root_( *this )
                     PushListPosition( __widgets( ) )
                     ChangeCurrentElement( __widgets( ), *this\address )
                     While PreviousElement( __widgets( ) )
                        widget( ) = __widgets( )
                        
                        If is_window_( widget( ) )
                           If IsChild( *this, widget( ) )
                              If widget( )\focus = #False
                                 widget( )\focus = #True
                                 DoFocus( widget( ), #__event_Focus )
                              EndIf
                           EndIf
                        EndIf
                     Wend
                     PopListPosition( __widgets( ) )
                  EndIf
               EndIf
               
               ;\\ get active window
               If is_window_( *this ) Or
                  is_root_( *this )
                  ActiveWindow( ) = *this
               Else
                  If *this\child
                     ActiveWindow( ) = *this\parent\window
                     ActiveGadget( ) = *this\parent
                  Else
                     ActiveWindow( ) = *this\window
                     ActiveGadget( ) = *this
                  EndIf
               EndIf
               
               ;\\ when we activate the gadget
               ;\\ first we activate its parent window
               If *this <> ActiveWindow( )
                  If ActiveWindow( ) And ; Not is_root_( ActiveWindow( ) ) And
                     ActiveWindow( )\focus = #False
                     ActiveWindow( )\focus = #True
                     DoFocus( ActiveWindow( ), #__event_Focus )
                  EndIf
               EndIf
               
               ;\\
               DoFocus( *this, #__event_Focus )
               
               If ActiveWindow( )
                  ; when we activate the window
                  ; we will activate his last gadget that lost focus
                  If ActiveGadget( ) And
                     ActiveGadget( )\focus = #False
                     ActiveGadget( )\focus = #True
                     DoFocus( ActiveGadget( ), #__event_Focus )
                  EndIf
                  
                  ; set window foreground position
                  SetForeground( ActiveWindow( ))
               EndIf
            EndIf
            
         Else
            If ActiveWindow( )
               SetDeactive( *this )
               ActiveWindow( ) = 0
            EndIf
         EndIf
         
         ProcedureReturn #True
      EndProcedure
      
      Procedure SetPosition( *this._s_WIDGET, position.l, *widget._s_WIDGET = #Null ) ; Ok
         If *widget = #Null
            Select Position
               Case #PB_List_First : *widget = *this\parent\FirstWidget( )
               Case #PB_List_Before : *widget = *this\BeforeWidget( )
               Case #PB_List_After : *widget = *this\AfterWidget( )
               Case #PB_List_Last : *widget = *this\parent\LastWidget( )
            EndSelect
         EndIf
         
         If Not *widget
            ProcedureReturn #False
         EndIf
         
         If *this <> *widget And
            *this\AddedTabIndex( ) = *widget\AddedTabIndex( )
            
            If Position = #PB_List_First Or
               Position = #PB_List_Before
               
               PushListPosition( __widgets( ))
               ChangeCurrentElement( __widgets( ), *this\address )
               MoveElement( __widgets( ), #PB_List_Before, *widget\address )
               
               If *this\haschildren
                  While PreviousElement( __widgets( ))
                     If IsChild( __widgets( ), *this )
                        MoveElement( __widgets( ), #PB_List_After, *widget\address )
                     EndIf
                  Wend
                  
                  While NextElement( __widgets( ))
                     If IsChild( __widgets( ), *this )
                        MoveElement( __widgets( ), #PB_List_Before, *widget\address )
                     EndIf
                  Wend
               EndIf
               PopListPosition( __widgets( ))
            EndIf
            
            If Position = #PB_List_Last Or
               Position = #PB_List_After
               
               Protected *last._s_WIDGET = GetLast( *widget, *widget\AddedTabIndex( ))
               
               PushListPosition( __widgets( ))
               ChangeCurrentElement( __widgets( ), *this\address )
               MoveElement( __widgets( ), #PB_List_After, *last\address )
               
               If *this\haschildren
                  While NextElement( __widgets( ))
                     If IsChild( __widgets( ), *this )
                        MoveElement( __widgets( ), #PB_List_Before, *last\address )
                     EndIf
                  Wend
                  
                  While PreviousElement( __widgets( ))
                     If IsChild( __widgets( ), *this )
                        MoveElement( __widgets( ), #PB_List_After, *this\address )
                     EndIf
                  Wend
               EndIf
               PopListPosition( __widgets( ))
            EndIf
            
            ;
            If *this\BeforeWidget( )
               *this\BeforeWidget( )\AfterWidget( ) = *this\AfterWidget( )
            EndIf
            If *this\AfterWidget( )
               *this\AfterWidget( )\BeforeWidget( ) = *this\BeforeWidget( )
            EndIf
            If *this\parent\FirstWidget( ) = *this
               *this\parent\FirstWidget( ) = *this\AfterWidget( )
            EndIf
            If *this\parent\LastWidget( ) = *this
               *this\parent\LastWidget( ) = *this\BeforeWidget( )
            EndIf
            
            ;
            If Position = #PB_List_First Or
               Position = #PB_List_Before
               
               *this\AfterWidget( )    = *widget
               *this\BeforeWidget( )   = *widget\BeforeWidget( )
               *widget\BeforeWidget( ) = *this
               
               If *this\BeforeWidget( )
                  *this\BeforeWidget( )\AfterWidget( ) = *this
               Else
                  If *this\parent\FirstWidget( )
                     *this\parent\FirstWidget( )\BeforeWidget( ) = *this
                  EndIf
                  *this\parent\FirstWidget( ) = *this
               EndIf
            EndIf
            
            If Position = #PB_List_Last Or
               Position = #PB_List_After
               
               *this\BeforeWidget( )  = *widget
               *this\AfterWidget( )   = *widget\AfterWidget( )
               *widget\AfterWidget( ) = *this
               
               If *this\AfterWidget( )
                  *this\AfterWidget( )\BeforeWidget( ) = *this
               Else
                  If *this\parent\LastWidget( )
                     *this\parent\LastWidget( )\AfterWidget( ) = *this
                  EndIf
                  *this\parent\LastWidget( ) = *this
               EndIf
            EndIf
            
            ProcedureReturn #True
         EndIf
         
      EndProcedure
      
      Procedure GetPositionLast( *this._s_WIDGET, tabindex.l )
         Protected *last._s_WIDGET = *this\LastWidget( )
         If *this\haschildren
            PushListPosition( __widgets( ) )
            ChangeCurrentElement( __widgets( ), *this\address )
            While NextElement( __widgets( ) )
               If Not IsChild( __widgets( ), *this )
                  Break
               EndIf
               *last = __widgets( )
            Wend
            PopListPosition( __widgets( ) )
          EndIf
         ProcedureReturn *last
      EndProcedure
      
      Procedure GetPositionAfter( *this._s_WIDGET, tabindex.l )
         Protected *after._s_WIDGET = *this\LastWidget( ) 
         Protected *last._s_WIDGET = *this\LastWidget( ) 
         ;
         If *this\haschildren
            If *this\TabBox( ) 
               If tabindex >= *last\AddedTabIndex( )
                  *after = *last
               Else
                  *after = *this
                  ;
                  If *last
                     PushListPosition( __widgets( ) )
                     ChangeCurrentElement( __widgets( ), *last\address )
                     While PreviousElement( __widgets( ) )
                        If __widgets( )\AddedTabIndex( ) = TabIndex
                           If __widgets( )\parent = *this 
                              *after = __widgets( )
                              Break
                           EndIf
                        EndIf
                     Wend
                     PopListPosition( __widgets( ) )
                  EndIf
               EndIf
            EndIf
         EndIf
         ;
         If is_root_( *after )
            *after = *after\LastWidget( )
         EndIf
         ProcedureReturn *after
      EndProcedure
      
      Procedure SetParent( *this._s_WIDGET, *parent._s_WIDGET, tabindex.l = #PB_Default )
         Protected parent, ReParent.b, x, y
         Protected *after._s_WIDGET, *last._s_WIDGET, *lastParent._s_WIDGET
         Protected NewList *D._s_WIDGET( ), NewList *C._s_WIDGET( )
         
         ;\\
         If *this = *parent
            ProcedureReturn 0
         EndIf
         
         If *parent
            If *parent\container = 0 And *parent\child
               Debug "SetParent("
               *parent = *parent\parent
            EndIf
            ;
            If *this\parent = *parent And
               *this\AddedTabIndex( ) = tabindex
               ProcedureReturn #False
            EndIf
            ;
            If tabindex >= 0
               *this\AddedTabIndex( ) = tabindex
            Else
               If *parent\TabBox( )
                  *this\AddedTabIndex( ) = *parent\TabBox( )\OpenedTabIndex( )
               Else
                  *this\AddedTabIndex( ) = 0
               EndIf
            EndIf
            ;
            ;\\ get the last widget to add it after it
            If *parent\LastWidget( )
               *after = GetPositionAfter( *parent, *this\AddedTabIndex( ) )
               If tabindex = 2
                  Debug ""+*parent\class +" "+ *this\AddedTabIndex( ) +" "+ tabindex +" after-"+ *after\class
               EndIf
               
               ;
               If *after\parent <> *parent And  *after\LastWidget( )\AddedTabIndex( ) > *this\AddedTabIndex( )
                   *last = *after
               Else
                  *last = GetPositionLast( *after, *this\AddedTabIndex( ) )
               EndIf
               
;                If tabindex = 2
;                   Debug ""+*this\text\string +" last-"+ *last\class +" after-"+ *after\class
;                EndIf
            EndIf
            ;             ;
            If *this\AddedTabIndex( ) > 0
               If *parent\type = #__type_Splitter
                  If *this\AddedTabIndex( ) % 2
                     *parent\split_1( )    = *this
                     *parent\split_1_is( ) = Bool( PB(IsGadget)( *this ))
                     Update( *parent )
                     If *parent\split_1_is( )
                        ProcedureReturn 0
                     EndIf
                  Else
                     *parent\split_2( )    = *this
                     *parent\split_2_is( ) = Bool( PB(IsGadget)( *this ))
                     Update( *parent )
                     If *parent\split_2_is( )
                        ProcedureReturn 0
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            ; set hide state
            *this\hide = *parent\hide
            If *parent\TabBox( )
               ; hide all children's except the selected tab
               *this\hide = Bool(*parent\TabBox( )\FocusedTabIndex( ) <> *this\AddedTabIndex( ))
            EndIf
            ;
            ;\\
            If *this And
               *this\parent
               ;
               If *this\address
                  *lastParent = *this\parent
                  *lastParent\haschildren - 1
                  
                  ChangeCurrentElement( __widgets( ), *this\address )
                  AddElement( *D( ) ) : *D( ) = __widgets( )
                  ;Debug ""+*parent\TabBox( )\FocusedTabIndex( ) +" "+ *this\AddedTabIndex( ) 
                  
                  If *this\haschildren
                     PushListPosition( __widgets( ) )
                     While NextElement( __widgets( ) )
                        If Not IsChild( __widgets( ), *this )
                           Break
                        EndIf
                        
                        AddElement( *D( ) )
                        *D( ) = __widgets( )
                        
                        ; ChangeParent
                        If *parent\window
                           *D( )\window = *parent\window
                        Else
                           *D( )\window = *parent
                        EndIf
                        If *parent\root
                           *D( )\root = *parent\root
                        Else
                           *D( )\root = *parent
                        EndIf
                        ;; Debug " children's - "+ *D( )\data +" - "+ *this\data
                        
                        ;\\ integrall children's
                        If *D( )\scroll
                           If *D( )\scroll\v
                              *D( )\scroll\v\root   = *D( )\root
                              *D( )\scroll\v\window = *D( )\window
                           EndIf
                           If *D( )\scroll\h
                              *D( )\scroll\h\root   = *D( )\root
                              *D( )\scroll\h\window = *D( )\window
                           EndIf
                        EndIf
                        
                        *D( )\hide = HideState( *D( ) )
                        ;Debug *D( )\hidden
                        
                     Wend
                     PopListPosition( __widgets( ) )
                  EndIf
                  
                  ;\\ move with a parent and his children's
                  If *last
                     PushListPosition( __widgets( ) )
                     LastElement( *D( ) )
                     Repeat
                        ChangeCurrentElement( __widgets( ), *D( )\address )
                        MoveElement( __widgets( ), #PB_List_After, *last\address )
                     Until PreviousElement( *D( ) ) = #False
                     PopListPosition( __widgets( ) )
                  EndIf
                  
                  ;
                  ReParent = #True
               EndIf
               ;
            Else
               ;
               If *last
                  ChangeCurrentElement( __widgets( ) , *last\address )
               Else
                  LastElement( __widgets( ) )
               EndIf
               ;
               AddElement( __widgets( ) )
               __widgets( )  = *this
               *this\index   = ListIndex( __widgets( ) )
               *this\address = @__widgets( )
            EndIf
            ;
            ;\\
            ;
            If *this\parent 
               If *this\parent\FirstWidget( ) = *this
                  *this\parent\FirstWidget( ) = *this\AfterWidget( )
               EndIf
               ;
               If *this\parent\LastWidget( ) = *this
                  *this\parent\LastWidget( ) = *this\BeforeWidget( )
               EndIf
            Else
               *this\LastWidget( ) = *this 
               ;
               If *parent\TabBox( )
                  If *this\AddedTabIndex( ) = *parent\TabBox( )\count\items - 1
                     *parent\LastWidget( ) = *this
                  EndIf
               Else
                  *parent\LastWidget( ) = *this
               EndIf
            EndIf
            ;
            If *this\BeforeWidget( )
               *this\BeforeWidget( )\AfterWidget( ) = *this\AfterWidget( )
            EndIf
            ;
            If *this\AfterWidget( )
               *this\AfterWidget( )\BeforeWidget( ) = *this\BeforeWidget( )
            EndIf
            ;
            If *after
               If *after\parent = *parent
                  If *after\AfterWidget( )
                     *after\AfterWidget( )\BeforeWidget( ) = *this
                  EndIf
                  *this\AfterWidget( ) = *after\AfterWidget( )
                  ;
                  *this\BeforeWidget( ) = *after
                  *after\AfterWidget( ) = *this
               Else
                  If *parent\FirstWidget( )
                     *this\AfterWidget( ) = *parent\FirstWidget( )
                     *this\AfterWidget( )\BeforeWidget( ) = *this
                  EndIf
                  ;
                  *this\BeforeWidget( ) = #Null
                  *parent\FirstWidget( ) = *this
               EndIf
            EndIf
            ;
            If *parent\FirstWidget( ) = #Null
               *parent\FirstWidget( ) = *this
            EndIf
            ;
            ;\\
            ChangeParent( *this, *parent )
            ;
            ;\\ TODO
            If *this\window
               Static NewMap typeCount.l( )
               typeCount( Hex( *this\window + *this\type ) ) + 1
               *this\count\index = typeCount( ) - 1
               
               If *parent\anchors
                  typeCount( Str( *parent + *this\type ) ) + 1
                  *this\count\type = typeCount( ) - 1
               EndIf
            EndIf
            ;
            ;\\ a_new( )
            If *this\type = #__type_MDI And 
               *this\flag & #__mdi_editable = #__mdi_editable 
               a_init( *this )
            Else
               If Not *this\anchors
                  *this\anchors.allocate( ANCHORS )
                  *this\anchors\size = #__a_anchors_size
                  *this\anchors\pos = *this\anchors\size / 2
                  ;
                  If a_transform( ) And a_main( ) And IsChild( *this, a_main( ))
                     *this\anchors\mode = #__a_full
                  EndIf
               EndIf
            EndIf
            ;
            ;\\
            If ReParent
               ;
               If a_index( ) = #__a_moved And *this\dragstart ; = #PB_Drag_Resize
                  *this\resize | #__resize_x | #__resize_y
                  
                  x = *this\frame_x( ) - *parent\inner_x( )
                  y = *this\frame_y( ) - *parent\inner_y( )
                  
                  If *this\anchors > 0
                     x + ( x % mouse( )\steps )
                     x = ( x / mouse( )\steps ) * mouse( )\steps
                     
                     y + ( y % mouse( )\steps )
                     y = ( y / mouse( )\steps ) * mouse( )\steps
                  EndIf
                  
                  *this\container_x( ) = x
                  *this\container_y( ) = y
               Else
                  ;\\ resize
                  x = *this\container_x( )
                  y = *this\container_y( )
                  
                  ;\\ for the scrollarea container childrens
                  ;\\ if new parent - scrollarea container
                  If *parent\scroll And
                     *parent\scroll\v And *parent\scroll\h
                     x - *parent\scroll\h\bar\page\pos
                     y - *parent\scroll\v\bar\page\pos
                  EndIf
                  
                  ;\\ if last parent - scrollarea container
                  If *LastParent\scroll And
                     *LastParent\scroll\v And *LastParent\scroll\h
                     x + *LastParent\scroll\h\bar\page\pos
                     y + *LastParent\scroll\v\bar\page\pos
                  EndIf
                  
                  Resize( *this, x - *parent\scroll_x( ), y - *parent\scroll_y( ), #PB_Ignore, #PB_Ignore )
               EndIf
               
               ;\\
               PostRepaint( *parent\root )
               PostRepaint( *lastParent\root )
            EndIf
         EndIf
         
         widget( ) = *this
         ProcedureReturn *this
      EndProcedure
      
      Procedure ___SetParent( *this._s_WIDGET, *parent._s_WIDGET, tabindex.l = #PB_Default )
         Protected parent, ReParent.b, x, y
         Protected *after._s_WIDGET, *last._s_WIDGET, *lastParent._s_WIDGET
         Protected NewList *D._s_WIDGET( ), NewList *C._s_WIDGET( )
         
         ;\\
         If *this = *parent
            ProcedureReturn 0
         EndIf
         
         If *parent
            If *parent\container = 0 And *parent\child
               Debug "SetParent("
               *parent = *parent\parent
            EndIf
            ;
            If *this\parent = *parent And
               *this\AddedTabIndex( ) = tabindex
               ProcedureReturn #False
            EndIf
            ;
            If tabindex >= 0
               *this\AddedTabIndex( ) = tabindex
            Else
               If *parent\TabBox( )
                  *this\AddedTabIndex( ) = *parent\TabBox( )\OpenedTabIndex( )
               Else
                  *this\AddedTabIndex( ) = 0
               EndIf
            EndIf
            ;
            ;\\ get the last widget to add it after it
            If *parent\LastWidget( )
               ;
               *after = *parent\LastWidget( )
               If *after = *this
                  ProcedureReturn 0
               EndIf
               *last = *after\LastWidget( )
               ; Debug ""+*this\text\string +" last-"+ *last\class +" after-"+ *after\class
               
               If *after\haschildren
                  ;Debug "777 "+*this\text\string +" last-"+ *last\class +" after-"+ *after\class
                  PushListPosition( __widgets( ) )
                  ChangeCurrentElement( __widgets( ), *after\address )
                  While NextElement( __widgets( ) )
                     If Not IsChild( __widgets( ), *after )
                        Break
                     EndIf
                     If IsChild( __widgets( ), *this )
                        Break
                     EndIf
                     ;
                     *last = __widgets( )
                  Wend
                  PopListPosition( __widgets( ) )
               
                 ; Childrens( *after, *this, @*last )
               EndIf
               ;
               If *this\AddedTabIndex( ) >= 0 
                  PushListPosition( __widgets( ) )
                  ChangeCurrentElement( __widgets( ), *last\address )
                  If __widgets( )\AddedTabIndex( ) <> *this\AddedTabIndex( ) 
                     ;
                     If *after\AddedTabIndex( ) > *this\AddedTabIndex( ) 
                        *after = *parent
                        *last = *parent
                     EndIf
                     ;
                     While PreviousElement( __widgets( ) )
                        If __widgets( )\AddedTabIndex( ) = *this\AddedTabIndex( ) 
                           If __widgets( )\parent = *parent 
                              *after = __widgets( )
                              *last = *after\LastWidget( )
                              ;
                              If *after\haschildren
                                 ;Debug "999 "+*this\text\string +" last-"+ *last\class +" after-"+ *after\class
                                 PushListPosition( __widgets( ) )
                                 ChangeCurrentElement( __widgets( ), *after\address )
                                 While NextElement( __widgets( ) )
                                    If Not IsChild( __widgets( ), *after )
                                       Break
                                    EndIf
                                    If IsChild( __widgets( ), *this )
                                       Break
                                    EndIf
                                    ;
                                    *last = __widgets( )
                                 Wend
                                 PopListPosition( __widgets( ) )
                                 
                                 ; Childrens( *after, *this, @*last )
                              EndIf
                              ;
                              Break
                           EndIf
                        EndIf
                     Wend
                  EndIf
                  PopListPosition( __widgets( ) )
               EndIf
               ;
               ; Debug ""+*this\text\string +" last-"+ *last\class +" after-"+ *after\class
            EndIf
            ;             ;
            If *this\AddedTabIndex( ) > 0
               If *parent\type = #__type_Splitter
                  If *this\AddedTabIndex( ) % 2
                     *parent\split_1( )    = *this
                     *parent\split_1_is( ) = Bool( PB(IsGadget)( *this ))
                     Update( *parent )
                     If *parent\split_1_is( )
                        ProcedureReturn 0
                     EndIf
                  Else
                     *parent\split_2( )    = *this
                     *parent\split_2_is( ) = Bool( PB(IsGadget)( *this ))
                     Update( *parent )
                     If *parent\split_2_is( )
                        ProcedureReturn 0
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            ; set hide state
            *this\hide = *parent\hide
            If *parent\TabBox( )
               ; hide all children's except the selected tab
               *this\hide = Bool(*parent\TabBox( )\FocusedTabIndex( ) <> *this\AddedTabIndex( ))
            EndIf
            ;
            ;\\
            If *this And
               *this\parent
               ;
               If *this\address
                  *lastParent = *this\parent
                  *lastParent\haschildren - 1
                  
                  ChangeCurrentElement( __widgets( ), *this\address )
                  AddElement( *D( ) ) : *D( ) = __widgets( )
                  ;Debug ""+*parent\TabBox( )\FocusedTabIndex( ) +" "+ *this\AddedTabIndex( ) 
                  
                  If *this\haschildren
                     PushListPosition( __widgets( ) )
                     While NextElement( __widgets( ) )
                        If Not IsChild( __widgets( ), *this )
                           Break
                        EndIf
                        
                        AddElement( *D( ) )
                        *D( ) = __widgets( )
                        
                        ; ChangeParent
                        If *parent\window
                           *D( )\window = *parent\window
                        Else
                           *D( )\window = *parent
                        EndIf
                        If *parent\root
                           *D( )\root = *parent\root
                        Else
                           *D( )\root = *parent
                        EndIf
                        ;; Debug " children's - "+ *D( )\data +" - "+ *this\data
                        
                        ;\\ integrall children's
                        If *D( )\scroll
                           If *D( )\scroll\v
                              *D( )\scroll\v\root   = *D( )\root
                              *D( )\scroll\v\window = *D( )\window
                           EndIf
                           If *D( )\scroll\h
                              *D( )\scroll\h\root   = *D( )\root
                              *D( )\scroll\h\window = *D( )\window
                           EndIf
                        EndIf
                        
                        *D( )\hide = HideState( *D( ) )
                        ;Debug *D( )\hidden
                        
                     Wend
                     PopListPosition( __widgets( ) )
                  EndIf
                  
                  ;\\ move with a parent and his children's
                  If *last
                     PushListPosition( __widgets( ) )
                     LastElement( *D( ) )
                     Repeat
                        ChangeCurrentElement( __widgets( ), *D( )\address )
                        MoveElement( __widgets( ), #PB_List_After, *last\address )
                     Until PreviousElement( *D( ) ) = #False
                     PopListPosition( __widgets( ) )
                  EndIf
                  
                  ;
                  ReParent = #True
               EndIf
               ;
            Else
               ;
               If *last
                  ChangeCurrentElement( __widgets( ) , *last\address )
               Else
                  LastElement( __widgets( ) )
               EndIf
               ;
               AddElement( __widgets( ) )
               __widgets( )  = *this
               *this\index   = ListIndex( __widgets( ) )
               *this\address = @__widgets( )
            EndIf
            ;
            ;\\
            ;
            If *this\parent 
               If *this\parent\FirstWidget( ) = *this
                  *this\parent\FirstWidget( ) = *this\AfterWidget( )
               EndIf
               ;
               If *this\parent\LastWidget( ) = *this
                  *this\parent\LastWidget( ) = *this\BeforeWidget( )
               EndIf
            Else
               *this\LastWidget( ) = *this 
               ;
               If *parent\TabBox( )
                  If *this\AddedTabIndex( ) = *parent\TabBox( )\count\items - 1
                     *parent\LastWidget( ) = *this
                  EndIf
               Else
                  *parent\LastWidget( ) = *this
               EndIf
            EndIf
            ;
            If *this\BeforeWidget( )
               *this\BeforeWidget( )\AfterWidget( ) = *this\AfterWidget( )
            EndIf
            ;
            If *this\AfterWidget( )
               *this\AfterWidget( )\BeforeWidget( ) = *this\BeforeWidget( )
            EndIf
            ;
            If *after
               If *after\parent = *parent
                  If *after\AfterWidget( )
                     *after\AfterWidget( )\BeforeWidget( ) = *this
                  EndIf
                  *this\AfterWidget( ) = *after\AfterWidget( )
                  ;
                  *this\BeforeWidget( ) = *after
                  *after\AfterWidget( ) = *this
               Else
                  If *parent\FirstWidget( )
                     *this\AfterWidget( ) = *parent\FirstWidget( )
                     *this\AfterWidget( )\BeforeWidget( ) = *this
                  EndIf
                  ;
                  *this\BeforeWidget( ) = #Null
                  *parent\FirstWidget( ) = *this
               EndIf
            EndIf
            ;
            If *parent\FirstWidget( ) = #Null
               *parent\FirstWidget( ) = *this
            EndIf
            ;
            ;\\
            ChangeParent( *this, *parent )
            ;
            ;\\ TODO
            If *this\window
               Static NewMap typeCount.l( )
               typeCount( Hex( *this\window + *this\type ) ) + 1
               *this\count\index = typeCount( ) - 1
               
               If *parent\anchors
                  typeCount( Str( *parent + *this\type ) ) + 1
                  *this\count\type = typeCount( ) - 1
               EndIf
            EndIf
            ;
            ;\\ a_new( )
            If *this\type = #__type_MDI And 
               *this\flag & #__mdi_editable = #__mdi_editable 
               a_init( *this )
            Else
               If Not *this\anchors
                  *this\anchors.allocate( ANCHORS )
                  *this\anchors\size = #__a_anchors_size
                  *this\anchors\pos = *this\anchors\size / 2
                  ;
                  If a_transform( ) And a_main( ) And IsChild( *this, a_main( ))
                     *this\anchors\mode = #__a_full
                  EndIf
               EndIf
            EndIf
            ;
            ;\\
            If ReParent
               ;
               If a_index( ) = #__a_moved And *this\dragstart ; = #PB_Drag_Resize
                  *this\resize | #__resize_x | #__resize_y
                  
                  x = *this\frame_x( ) - *parent\inner_x( )
                  y = *this\frame_y( ) - *parent\inner_y( )
                  
                  If *this\anchors > 0
                     x + ( x % mouse( )\steps )
                     x = ( x / mouse( )\steps ) * mouse( )\steps
                     
                     y + ( y % mouse( )\steps )
                     y = ( y / mouse( )\steps ) * mouse( )\steps
                  EndIf
                  
                  *this\container_x( ) = x
                  *this\container_y( ) = y
               Else
                  ;\\ resize
                  x = *this\container_x( )
                  y = *this\container_y( )
                  
                  ;\\ for the scrollarea container childrens
                  ;\\ if new parent - scrollarea container
                  If *parent\scroll And
                     *parent\scroll\v And *parent\scroll\h
                     x - *parent\scroll\h\bar\page\pos
                     y - *parent\scroll\v\bar\page\pos
                  EndIf
                  
                  ;\\ if last parent - scrollarea container
                  If *LastParent\scroll And
                     *LastParent\scroll\v And *LastParent\scroll\h
                     x + *LastParent\scroll\h\bar\page\pos
                     y + *LastParent\scroll\v\bar\page\pos
                  EndIf
                  
                  Resize( *this, x - *parent\scroll_x( ), y - *parent\scroll_y( ), #PB_Ignore, #PB_Ignore )
               EndIf
               
               ;\\
               PostRepaint( *parent\root )
               PostRepaint( *lastParent\root )
            EndIf
         EndIf
         
         widget( ) = *this
         ProcedureReturn *this
      EndProcedure
      
      Procedure _SetParent( *this._s_WIDGET, *parent._s_WIDGET, tabindex.l = #PB_Default )
         Protected parent, ReParent.b, x, y
         Protected *after._s_WIDGET, *last._s_WIDGET, *lastParent._s_WIDGET
         Protected NewList *D._s_WIDGET( ), NewList *C._s_WIDGET( )
         
         ;\\
         If *this = *parent
            ProcedureReturn 0
         EndIf
         
         If *parent
            If *parent\container = 0 And *parent\child
               Debug "SetParent("
               *parent = *parent\parent
            EndIf
            ;
            If *this\parent = *parent And
               *this\AddedTabIndex( ) = tabindex
               ProcedureReturn #False
            EndIf
            ;
            ;\\
            If tabindex < 0
               If *parent\TabBox( )
                  tabindex = *parent\TabBox( )\OpenedTabIndex( )
               EndIf
            EndIf
            ;
            ;\\ get the last widget to add it after it
            If *parent\LastWidget( )
               *last = *parent\LastWidget( )
               *after = *last
               ;
               If *last
                  If tabindex >= 0 
                     ;
                     PushListPosition( __widgets( ) )
                     ChangeCurrentElement( __widgets( ), *last\address )
                     If __widgets( )\AddedTabIndex( ) <> tabindex 
                        ;Debug 67866778 
                        ;If *parent\TabBox( )
                        *after = *parent
                        ; *last = *after
                        ;
                        While PreviousElement( __widgets( ) )
                           If __widgets( )\parent = *parent 
                              If __widgets( )\AddedTabIndex( ) = tabindex 
                                 *last = __widgets( )
                                 *after = *last
                                 Break
                              EndIf
                           EndIf
                        Wend
                     EndIf
                     PopListPosition( __widgets( ) )
                     ;
                  Else
                     ;                   ;
                     If *last\haschildren
                        If *last\AfterWidget( )
                           Debug "has after"
                           ; *after = *last\AfterWidget( )
                        Else
                           If *last = *this\parent
                              Debug "has *last = *this\parent"
                              *after = *this\BeforeWidget( )
                           Else
                              ;
                              PushListPosition( __widgets( ) )
                              If LastElement( __widgets( ) )
                                 *last = __widgets( )
                              EndIf
                              PopListPosition( __widgets( ) ) 
                              ;
                           EndIf
                        EndIf
                     EndIf
                     
                  EndIf
                  ;
                  ;                   Debug " added after "+ *last\class +" "+ *after\class
               EndIf
               ;                
            EndIf
            ;             ;
            If tabindex > 0
               If *parent\type = #__type_Splitter
                  If tabindex % 2
                     *parent\split_1( )    = *this
                     *parent\split_1_is( ) = Bool( PB(IsGadget)( *this ))
                     Update( *parent )
                     If *parent\split_1_is( )
                        ProcedureReturn 0
                     EndIf
                  Else
                     *parent\split_2( )    = *this
                     *parent\split_2_is( ) = Bool( PB(IsGadget)( *this ))
                     Update( *parent )
                     If *parent\split_2_is( )
                        ProcedureReturn 0
                     EndIf
                  EndIf
               EndIf
            EndIf
            ;
            If tabindex < 0
               *this\AddedTabIndex( ) = 0
            Else
               *this\AddedTabIndex( ) = tabindex
            EndIf
            ;
            ; set hide state
            If *parent\hide
               *this\hide = #True
            ElseIf *parent\TabBox( )
               ; hide all children's except the selected tab
               *this\hide = Bool(*parent\TabBox( )\FocusedTabIndex( ) <> tabindex)
            EndIf
            ;
            ;\\
            If *this And
               *this\parent
               ;
               If *this\address
                  *lastParent = *this\parent
                  *lastParent\haschildren - 1
                  
                  ChangeCurrentElement( __widgets( ), *this\address )
                  AddElement( *D( ) ) : *D( ) = __widgets( )
                  
                  If *this\haschildren
                     PushListPosition( __widgets( ) )
                     While NextElement( __widgets( ) )
                        If Not IsChild( __widgets( ), *this )
                           Break
                        EndIf
                        
                        AddElement( *D( ) )
                        *D( ) = __widgets( )
                        
                        ; ChangeParent
                        If *parent\window
                           *D( )\window = *parent\window
                        Else
                           *D( )\window = *parent
                        EndIf
                        If *parent\root
                           *D( )\root = *parent\root
                        Else
                           *D( )\root = *parent
                        EndIf
                        ;; Debug " children's - "+ *D( )\data +" - "+ *this\data
                        
                        ;\\ integrall children's
                        If *D( )\scroll
                           If *D( )\scroll\v
                              *D( )\scroll\v\root   = *D( )\root
                              *D( )\scroll\v\window = *D( )\window
                           EndIf
                           If *D( )\scroll\h
                              *D( )\scroll\h\root   = *D( )\root
                              *D( )\scroll\h\window = *D( )\window
                           EndIf
                        EndIf
                     Wend
                     PopListPosition( __widgets( ) )
                  EndIf
                  
                  ;\\ move with a parent and his children's
                  If *after
                     ; move inside the list
                     LastElement( *D( ) )
                     Repeat
                        ChangeCurrentElement( __widgets( ), *D( )\address )
                        MoveElement( __widgets( ), #PB_List_After, *after\address )
                        
                        *D( )\hide = HideState( *D( ) )
                        
                     Until PreviousElement( *D( ) ) = #False
                  EndIf
                  ;
                  ReParent = #True
               EndIf
               ;
            Else
               ;
               If *last
                  ChangeCurrentElement( __widgets( ) , *last\address )
               Else
                  LastElement( __widgets( ) )
               EndIf
               ;
               AddElement( __widgets( ) )
               __widgets( )  = *this
               *this\index   = ListIndex( __widgets( ) )
               *this\address = @__widgets( )
            EndIf
            
            ;\\
            If Not *parent\FirstWidget( ) ;? *parent\LastWidget( ) = *parent  ;\\ 1-test
               *parent\FirstWidget( ) = *this
               *parent\LastWidget( )  = *this
               *this\BeforeWidget( )  = #Null
               *this\AfterWidget( )   = #Null
            Else
               ; if the parent had the last item
               ; then we make it "previous" instead of "present"
               ; and "present" becomes "subsequent" instead of "previous"
               If *this\parent
                  ;
                  If *this\AfterWidget( )
                     If *this\BeforeWidget( ) = *this
                        *this\AfterWidget( )\BeforeWidget( ) = #Null
                     Else
                        *this\AfterWidget( )\BeforeWidget( ) = *this\BeforeWidget( )
                     EndIf
                  EndIf
                  ;
                  If *this\BeforeWidget( )
                     If *this\AfterWidget( ) = *this
                        *this\BeforeWidget( )\AfterWidget( ) = #Null
                     Else
                        *this\BeforeWidget( )\AfterWidget( ) = *this\AfterWidget( )
                     EndIf
                  EndIf
                  ;
                  If *this\parent\FirstWidget( ) = *this
                     If *this\AfterWidget( )
                        *this\parent\FirstWidget( ) = *this\AfterWidget( )
                     Else
                        *this\parent\FirstWidget( ) = *this\parent ; if last type
                     EndIf
                  EndIf
                  ;
                  If *this\parent\LastWidget( ) = *this
                     If *this\BeforeWidget( )
                        *this\parent\LastWidget( ) = *this\BeforeWidget( )
                     Else
                        *this\parent\LastWidget( ) = *this\parent ; if last type
                     EndIf
                  EndIf
                  ;
               Else
                  
                  *this\LastWidget( ) = *this ; if last type ;?
                  
               EndIf
               
               ;
               If *Last 
                  ; Debug "-->>>---   "+*this\class +"   "+ *Last\class +"   "+ *after\class
                  
                  If *this\AddedTabIndex( ) = *Last\AddedTabIndex( ) ; *after\AddedTabIndex( )
                     If *this\BeforeWidget( )
                        If *this\BeforeWidget( ) = *Last ; *after
                           If *this\BeforeWidget( ) = *parent
                              *parent\FirstWidget( ) = *this
                              *parent\LastWidget( ) = *this
                              *this\BeforeWidget( ) = #Null
                           EndIf
                        Else
                           *this\BeforeWidget( ) = *Last
                        EndIf
                     Else
                        ;                         If *last <> *after
                        *this\BeforeWidget( ) = *after
                        ;                         Else
                        ;                            *this\BeforeWidget( ) = *last
                        ;                         EndIf
                     EndIf
                  EndIf
                  
                  If *this\AfterWidget( )
                     If *this\AfterWidget( )
                        *this\AfterWidget( ) = #Null
                     EndIf
                  Else
                     *this\AfterWidget( ) = *Last\AfterWidget( ) ; *after\AfterWidget( )
                  EndIf
                  
               EndIf
               
               ;
               If *this\BeforeWidget( )
                  *this\BeforeWidget( )\AfterWidget( ) = *this
               EndIf
               ;
               *parent\LastWidget( ) = *this
            EndIf
            
            ;\\
            ChangeParent( *this, *parent )
            ;
            ;\\ TODO
            If *this\window
               Static NewMap typeCount.l( )
               typeCount( Hex( *this\window + *this\type ) ) + 1
               *this\count\index = typeCount( ) - 1
               
               If *parent\anchors
                  typeCount( Str( *parent + *this\type ) ) + 1
                  *this\count\type = typeCount( ) - 1
               EndIf
            EndIf
            ;
            ;\\ a_new( )
            If *this\type = #__type_MDI And 
               *this\flag & #__mdi_editable = #__mdi_editable 
               a_init( *this )
            Else
               If Not *this\anchors
                  *this\anchors.allocate( ANCHORS )
                  *this\anchors\size = #__a_anchors_size
                  *this\anchors\pos = *this\anchors\size / 2
                  ;
                  If a_transform( ) And a_main( ) And IsChild( *this, a_main( ))
                     *this\anchors\mode = #__a_full
                  EndIf
               EndIf
            EndIf
            ;
            ;\\
            If ReParent
               ;
               If a_index( ) = #__a_moved And *this\dragstart ; = #PB_Drag_Resize
                  *this\resize | #__resize_x | #__resize_y
                  
                  x = *this\frame_x( ) - *parent\inner_x( )
                  y = *this\frame_y( ) - *parent\inner_y( )
                  
                  If *this\anchors > 0
                     x + ( x % mouse( )\steps )
                     x = ( x / mouse( )\steps ) * mouse( )\steps
                     
                     y + ( y % mouse( )\steps )
                     y = ( y / mouse( )\steps ) * mouse( )\steps
                  EndIf
                  
                  *this\container_x( ) = x
                  *this\container_y( ) = y
               Else
                  ;\\ resize
                  x = *this\container_x( )
                  y = *this\container_y( )
                  
                  ;\\ for the scrollarea container childrens
                  ;\\ if new parent - scrollarea container
                  If *parent\scroll And
                     *parent\scroll\v And *parent\scroll\h
                     x - *parent\scroll\h\bar\page\pos
                     y - *parent\scroll\v\bar\page\pos
                  EndIf
                  
                  ;\\ if last parent - scrollarea container
                  If *LastParent\scroll And
                     *LastParent\scroll\v And *LastParent\scroll\h
                     x + *LastParent\scroll\h\bar\page\pos
                     y + *LastParent\scroll\v\bar\page\pos
                  EndIf
                  
                  Resize( *this, x - *parent\scroll_x( ), y - *parent\scroll_y( ), #PB_Ignore, #PB_Ignore )
               EndIf
               
               ;\\
               PostRepaint( *parent\root )
               PostRepaint( *lastParent\root )
            EndIf
         EndIf
         
         widget( ) = *this
         ProcedureReturn *this
      EndProcedure
      
      Procedure.i SetAttachment( *this._s_WIDGET, *parent._s_WIDGET, mode.a )
         If *parent
            *this\bounds\attach.allocate(BOUNDAttach)
            
            If *this\bounds\attach
               *this\bounds\attach\mode = mode
               
               ; get attach-element first-parent
               *this\bounds\attach\parent = *parent
               While *this\bounds\attach\parent\bounds\attach
                  *this\bounds\attach\parent = *this\bounds\attach\parent\parent
               Wend
               If *this\bounds\attach\parent\parent
                  *this\bounds\attach\parent = *this\bounds\attach\parent\parent
               Else
                  *this\bounds\attach\parent = *parent
               EndIf
               
               ; AddWidget( *this, *parent )
               SetParent( *this, *parent, #PB_Default )
               ProcedureReturn *this\bounds\attach
            EndIf
         EndIf
      EndProcedure
      
      Procedure SetAlignment( *this._s_WIDGET, mode.q, left.q = 0, top.q = 0, right.q = 0, bottom.q = 0 )
         Protected flag.q
         ;\\
         If Not (( mode & #__align_full = #__align_full ) Or ( mode & #__align_auto = #__align_auto ))
            If mode = 0 And left = 0 And top = 0 And right = 0 And bottom = 0
               left = #__align_auto
               top  = #__align_auto
               mode | #__align_auto
            EndIf
            If mode & #__align_right
               If mode & #__align_center = 0 And mode & #__align_bottom = 0
                  top = 1
                  mode | #__align_auto
               EndIf
               right = #__align_auto
            EndIf
            If mode & #__align_bottom
               If mode & #__align_center = 0 And mode & #__align_right = 0
                  left = 1
                  mode | #__align_auto
               EndIf
               bottom = #__align_auto
            EndIf
            If mode & #__align_left
               If mode & #__align_center = 0
                  top = 1
                  mode | #__align_auto
               EndIf
               left = #__align_auto
            EndIf
            If mode & #__align_top
               If mode & #__align_center = 0
                  left = 1
                  mode | #__align_auto
               EndIf
               top = #__align_auto
            EndIf
            If right = #__align_auto And bottom = #__align_auto
               right  = 1
               bottom = 1
               mode | #__align_auto
            EndIf
         EndIf
         
         ;\\
         If mode & #__align_auto = #__align_auto
            If left = 0 And top = 0 And right = 0 And bottom = 0
               If mode & #__align_left : left = #__align_auto
               ElseIf mode & #__align_top : top = #__align_auto
               ElseIf mode & #__align_right : right = #__align_auto
               ElseIf mode & #__align_bottom : bottom = #__align_auto
               Else
                  left   = #__align_auto
                  top    = #__align_auto
                  right  = #__align_auto
                  bottom = #__align_auto
               EndIf
            Else
               If left > 0 : left = #True : EndIf
               If top > 0 : top = #True : EndIf
               If right > 0 : right = #True : EndIf
               If bottom > 0 : bottom = #True : EndIf
               
               If left > 0 And top = 0 And right = 0 And bottom = 0 : left = #__align_auto : EndIf
               If top > 0 And left = 0 And right = 0 And bottom = 0 : top = #__align_auto : EndIf
               If right > 0 And top = 0 And left = 0 And bottom = 0 : right = #__align_auto : EndIf
               If bottom > 0 And top = 0 And right = 0 And left = 0 : bottom = #__align_auto : EndIf
            EndIf
         EndIf
         
         ;\\
         If mode & #__align_full = #__align_full
            If left = 0 And top = 0 And right = 0 And bottom = 0
               If mode & #__align_left : left = #__align_full
               ElseIf mode & #__align_top : top = #__align_full
               ElseIf mode & #__align_right : right = #__align_full
               ElseIf mode & #__align_bottom : bottom = #__align_full
               Else
                  left   = #__align_full
                  top    = #__align_full
                  right  = #__align_full
                  bottom = #__align_full
               EndIf
            Else
               ;                If left > 0 : left = #__align_full : EndIf
               ;                If top > 0 : top = #__align_full : EndIf
               ;                If right > 0 : right = #__align_full : EndIf
               ;                If bottom > 0 : bottom = #__align_full : EndIf
               If left > 0 : left = #True : EndIf
               If top > 0 : top = #True : EndIf
               If right > 0 : right = #True : EndIf
               If bottom > 0 : bottom = #True : EndIf
               
               If left > 0 And top = 0 And right = 0 And bottom = 0 : left = #__align_full : EndIf
               If top > 0 And left = 0 And right = 0 And bottom = 0 : top = #__align_full : EndIf
               If right > 0 And top = 0 And left = 0 And bottom = 0 : right = #__align_full : EndIf
               If bottom > 0 And top = 0 And right = 0 And left = 0 : bottom = #__align_full : EndIf
            EndIf
         EndIf
         
         ;\\
         If left = #__align_full
            left   = #__align_auto
            top    = #True
            bottom = #True
            flag | #__align_full
         EndIf
         If right = #__align_full
            right  = #__align_auto
            top    = #True
            bottom = #True
            flag | #__align_full
         EndIf
         If top = #__align_full
            top   = #__align_auto
            left  = #True
            right = #True
            flag | #__align_full
         EndIf
         If bottom = #__align_full
            bottom = #__align_auto
            left   = #True
            right  = #True
            flag | #__align_full
         EndIf
         If mode And
            left > 0 And top > 0 And right > 0 And bottom > 0
            flag | #__align_full
         EndIf
         
         ;\\
         If mode & #__align_proportional
            If left = 0 And right = 0
               left  = #__align_proportional
               right = #__align_proportional
            EndIf
            If top = 0 And bottom = 0
               top    = #__align_proportional
               bottom = #__align_proportional
            EndIf
            
            If left And left <> #__align_proportional
               If right = 0
                  left = 0
               EndIf
               right = #__align_proportional
            EndIf
            If top And top <> #__align_proportional
               If bottom = 0
                  top = 0
               EndIf
               bottom = #__align_proportional
            EndIf
            If right And right <> #__align_proportional
               If left = 0
                  right = 0
               EndIf
               left = #__align_proportional
            EndIf
            If bottom And bottom <> #__align_proportional
               If top = 0
                  bottom = 0
               EndIf
               top = #__align_proportional
            EndIf
            
            If mode & #__align_right
               left = #__align_proportional
            EndIf
            
            If mode & #__align_left
               right = #__align_proportional
            EndIf
            
            If mode & #__align_top
               bottom = #__align_proportional
            EndIf
            
            If mode & #__align_bottom
               top = #__align_proportional
            EndIf
            
            mode = 0
         EndIf
         
         ;\\
         If *this\parent
            If Not *this\parent\align
               *this\parent\align.allocate( ALIGN )
            EndIf
            If Not *this\align
               *this\align.allocate( ALIGN )
            EndIf
            
            ;\\
            If *this\align
               ;\\ horizontal
               If left Or ( Not right And flag & #__align_full = #__align_full )
                  If left = #__align_proportional ;Or ( left And mode & #__align_proportional = #__align_proportional )
                     *this\align\left = - 1
                  Else
                     *this\align\left = 1
                  EndIf
               Else
                  *this\align\left = 0
               EndIf
               If right Or ( Not left And flag & #__align_full = #__align_full )
                  If right = #__align_proportional ;Or ( right And mode & #__align_proportional = #__align_proportional )
                     *this\align\right = - 1
                  Else
                     *this\align\right = 1
                  EndIf
               Else
                  *this\align\right = 0
               EndIf
               
               ;\\ vertical
               If top Or ( Not bottom And flag & #__align_full = #__align_full )
                  If top = #__align_proportional ;Or ( top And mode & #__align_proportional = #__align_proportional )
                     *this\align\top = - 1
                  Else
                     *this\align\top = 1
                  EndIf
               Else
                  *this\align\top = 0
               EndIf
               If bottom Or ( Not top And flag & #__align_full = #__align_full )
                  If bottom = #__align_proportional ;Or ( bottom And mode & #__align_proportional = #__align_proportional )
                     *this\align\bottom = - 1
                  Else
                     *this\align\bottom = 1
                  EndIf
               Else
                  *this\align\bottom = 0
               EndIf
               
               ;\\ ?-надо тестировать
               If Not *this\parent\align\width
                  *this\parent\align\x     = *this\parent\container_x( )
                  *this\parent\align\width = *this\parent\frame_width( )
                  If *this\parent\type = #__type_window
                     *this\parent\align\x + *this\parent\fs
                     *this\parent\align\width - *this\parent\fs * 2 - ( *this\parent\fs[1] + *this\parent\fs[3] )
                  EndIf
               EndIf
               If Not *this\parent\align\height
                  *this\parent\align\y      = *this\parent\container_y( )
                  *this\parent\align\height = *this\parent\frame_height( )
                  If *this\parent\type = #__type_window
                     *this\parent\align\y + *this\parent\fs
                     *this\parent\align\height - *this\parent\fs * 2 - ( *this\parent\fs[2] + *this\parent\fs[4] )
                  EndIf
               EndIf
               
               ;\\
               If mode
                  ;\\ full horizontal
                  If *this\align\right And *this\align\left
                     *this\align\x     = 0
                     *this\align\width = *this\parent\align\width
                     If *this\type = #__type_window
                        *this\align\width - *this\fs * 2
                     EndIf
                  Else
                     *this\align\width = *this\frame_width( )
                     If Not *this\align\right And *this\align\left
                        ; left
                        *this\align\x = 0
                     ElseIf Not *this\align\right And Not *this\align\left
                        ; center
                        *this\align\x = ( *this\parent\align\width - *this\frame_width( ) ) / 2
                     ElseIf *this\align\right And Not *this\align\left
                        ; right
                        *this\align\x = *this\parent\align\width - *this\frame_width( )
                        If *this\type = #__type_window
                           *this\align\x - *this\fs * 2
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ full vertical
                  If *this\align\bottom And *this\align\top
                     *this\align\y      = 0
                     *this\align\height = *this\parent\align\height
                     If *this\type = #__type_window
                        *this\align\height - *this\fs * 2
                     EndIf
                  Else
                     *this\align\height = *this\frame_height( )
                     If Not *this\align\bottom And *this\align\top
                        ; top
                        *this\align\y = 0
                     ElseIf Not *this\align\bottom And Not *this\align\top
                        ; center
                        *this\align\y = ( *this\parent\align\height - *this\frame_height( ) ) / 2
                     ElseIf *this\align\bottom And Not *this\align\top
                        ; bottom
                        *this\align\y = *this\parent\align\height - *this\frame_height( )
                        If *this\type = #__type_window
                           *this\align\y - *this\fs * 2
                        EndIf
                     EndIf
                  EndIf
                  
                  ;
                  ;\\ auto stick change
                  If *this\parent\align
                     If left = #__align_auto And
                        *this\parent\align\autodock\x
                        left = - *this\parent\align\autodock\x
                     EndIf
                     If right = #__align_auto And
                        *this\parent\align\autodock\width
                        right = - *this\parent\align\autodock\width
                     EndIf
                     If left < 0 Or right < 0
                        If left And right
                           *this\align\x - left
                           *this\align\width - *this\align\x + right
                        Else
                           *this\align\x - left + right
                        EndIf
                     EndIf
                     
                     If top = #__align_auto And
                        *this\parent\align\autodock\y
                        top = - *this\parent\align\autodock\y
                     EndIf
                     If bottom = #__align_auto And
                        *this\parent\align\autodock\height
                        bottom = - *this\parent\align\autodock\height
                     EndIf
                     If top < 0 Or bottom < 0
                        If top And bottom
                           *this\align\y - top
                           *this\align\height - *this\align\y + bottom
                        Else
                           *this\align\y - top + bottom
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ auto stick position
                  If Not *this\align\right And *this\align\left
                     *this\parent\align\autodock\x = *this\align\x + *this\align\width
                     If *this\type = #__type_window
                        *this\parent\align\autodock\x + *this\fs * 2
                     EndIf
                  EndIf
                  If Not *this\align\bottom And *this\align\top
                     *this\parent\align\autodock\y = *this\align\y + *this\align\height
                     If *this\type = #__type_window
                        *this\parent\align\autodock\y + *this\fs * 2
                     EndIf
                  EndIf
                  If Not *this\align\left And *this\align\right
                     *this\parent\align\autodock\width = *this\parent\inner_width( ) - *this\align\x
                  EndIf
                  If Not *this\align\top And *this\align\bottom
                     *this\parent\align\autodock\height = *this\parent\inner_height( ) - *this\align\y
                  EndIf
                  
                  ;\\ auto stick update
                  If flag & #__align_full = #__align_full
                     If ( *this\parent\align\autodock\x Or
                          *this\parent\align\autodock\y Or
                          *this\parent\align\autodock\width Or
                          *this\parent\align\autodock\height )
                        
                        ; loop enumerate widgets
                        PushListPosition( __widgets( ))
                        If StartEnumerate( *this\parent )
                           If widget( )\align
                              If widget( )\align\top And widget( )\align\bottom
                                 widget( )\align\y      = widget( )\parent\align\autodock\y
                                 widget( )\align\height = widget( )\parent\inner_height( ) - ( widget( )\parent\align\autodock\y + widget( )\parent\align\autodock\height )
                                 
                                 If widget( )\align\left And widget( )\align\right
                                    widget( )\align\x     = widget( )\parent\align\autodock\x
                                    widget( )\align\width = widget( )\parent\inner_width( ) - ( widget( )\parent\align\autodock\x + widget( )\parent\align\autodock\width )
                                    
                                    If widget( )\type = #__type_window
                                       widget( )\align\width - widget( )\fs * 2
                                    EndIf
                                 EndIf
                                 
                                 If widget( )\type = #__type_window
                                    widget( )\align\height - widget( )\fs * 2
                                 EndIf
                              EndIf
                           EndIf
                           StopEnumerate( )
                        EndIf
                        PopListPosition( __widgets( ))
                     EndIf
                  EndIf
               EndIf
               
               ;\\
               If Not mode
                  *this\align\x = *this\container_x( )
                  *this\align\y = *this\container_y( )
                  ;\\
                  If *this\type = #__type_window
                     *this\align\width  = *this\inner_width( )
                     *this\align\height = *this\inner_height( )
                  Else
                     *this\align\width  = *this\frame_width( )
                     *this\align\height = *this\frame_height( )
                  EndIf
               EndIf
               
               ; update parent children's coordinate
               Resize( *this\parent, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               PostRepaint( *this\root )
            EndIf
         EndIf
      EndProcedure
      
      Procedure SetFrame( *this._s_WIDGET, size.a, mode.b = 0 )
         Protected result
         If *this\fs <> size
            result   = *this\fs
            *this\bs = size
            *this\fs = size
            
            If *this\anchors
               a_size( *this, *this\anchors\id, *this\anchors\size )
            EndIf
            
            If mode = - 1 ; auto pos
               Resize( *this, *this\container_x( ) - size, *this\container_y( ) - size, *this\frame_width( ) + size * 2, *this\frame_height( ) + size * 2 )
            ElseIf mode = - 2 ; auto pos
                              ;Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               Resize( *this, *this\container_x( ) - (size - result), *this\container_y( ) - (size - result), #PB_Ignore, #PB_Ignore )
            Else
               Resize( *this, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Procedure MoveBounds( *this._s_WIDGET, MinimumX.l = #PB_Ignore, MinimumY.l = #PB_Ignore, MaximumX.l = #PB_Ignore, MaximumY.l = #PB_Ignore )
         ; If the value is set to #PB_Ignore, the current value is not changed.
         ; If the value is set to #PB_Default, the value is reset to the system default (as it was before this command was invoked).
         Protected.l x = #PB_Ignore, y = #PB_Ignore, width = #PB_Ignore, height = #PB_Ignore
         
         *this\bounds\move.allocate(BOUNDMove)
         
         *this\bounds\move\min\x = MinimumX
         *this\bounds\move\max\x = MaximumX
         
         *this\bounds\move\min\y = MinimumY
         *this\bounds\move\max\y = MaximumY
         
         If *this\bounds\move\min\x = #PB_Ignore
            *this\bounds\move\min\x = 0;*this\parent\bs
         EndIf
         If *this\bounds\move\min\y = #PB_Ignore
            *this\bounds\move\min\y = 0;*this\parent\bs
         EndIf
         If *this\bounds\move\max\x = #PB_Ignore
            If *this\parent\scroll_width( ) ; *this\parent\scroll\h
               *this\bounds\move\max\x = *this\parent\scroll_width( ) ; *this\parent\scroll\h\bar\max
            Else
               *this\bounds\move\max\x = *this\parent\inner_width( )
            EndIf
         EndIf
         If *this\bounds\move\max\y = #PB_Ignore
            If *this\parent\scroll_height( ) ; *this\parent\scroll\v
               *this\bounds\move\max\y = *this\parent\scroll_height( ) ; *this\parent\scroll\v\bar\max
            Else
               *this\bounds\move\max\y = *this\parent\inner_height( )
            EndIf
         EndIf
         
         
         
         If Not *this\bounds\size
            MinimumX = *this\bounds\move\min\x
            MinimumY = *this\bounds\move\min\y
            MaximumX = *this\bounds\move\max\x
            MaximumY = *this\bounds\move\max\y
            If MinimumX <> #PB_Ignore And
               MaximumX <> #PB_Ignore
               MaximumX - MinimumX
            EndIf
            If MinimumY <> #PB_Ignore And
               MaximumY <> #PB_Ignore
               MaximumY - MinimumY
            EndIf
            
            ProcedureReturn SizeBounds( *this, #PB_Ignore, #PB_Ignore, MaximumX, MaximumY )
         Else
            ;\\
            If *this\bounds\move\min\x <> #PB_Ignore And
               *this\bounds\move\min\x > *this\frame_x( )
               x = *this\bounds\move\min\x
               If *this\frame_width( ) > *this\bounds\move\max\x - *this\bounds\move\min\x
                  width = *this\bounds\move\max\x - *this\bounds\move\min\x
               EndIf
            ElseIf *this\bounds\move\max\x <> #PB_Ignore And
                   *this\frame_width( ) > ( *this\bounds\move\max\x - *this\frame_x( ) )
               width = *this\bounds\move\max\x - *this\frame_x( )
            EndIf
            If *this\bounds\move\min\y <> #PB_Ignore And
               *this\bounds\move\min\y > *this\frame_y( )
               y = *this\bounds\move\min\y
               If *this\frame_height( ) > *this\bounds\move\max\y - *this\bounds\move\min\y
                  height = *this\bounds\move\max\y - *this\bounds\move\min\y
               EndIf
            ElseIf *this\bounds\move\max\y <> #PB_Ignore And
                   *this\frame_height( ) > ( *this\bounds\move\max\y - *this\frame_y( ) )
               height = *this\bounds\move\max\y - *this\frame_y( )
            EndIf
            
            ProcedureReturn Resize( *this, x, y, width, height )
         EndIf
         
      EndProcedure
      
      Procedure SizeBounds( *this._s_WIDGET, MinimumWidth.l = #PB_Ignore, MinimumHeight.l = #PB_Ignore, MaximumWidth.l = #PB_Ignore, MaximumHeight.l = #PB_Ignore )
         ; If the value is set to #PB_Ignore, the current value is not changed.
         ; If the value is set to #PB_Default, the value is reset to the system default (as it was before this command was invoked).
         Protected.l x = #PB_Ignore, y = #PB_Ignore, width = #PB_Ignore, height = #PB_Ignore
         
         *this\bounds\size.allocate(BOUNDSize)
         
         If MinimumWidth <> #PB_Ignore
            *this\bounds\size\min\width = MinimumWidth
         Else
            *this\bounds\size\min\width = *this\fs * 2 + *this\fs[1] + *this\fs[3]
         EndIf
         If MinimumHeight <> #PB_Ignore
            *this\bounds\size\min\height = MinimumHeight
         Else
            *this\bounds\size\min\height = *this\fs * 2 + *this\fs[2] + *this\fs[4]
         EndIf
         
         If MaximumWidth <> #PB_Ignore
            *this\bounds\size\max\width = MaximumWidth
         Else
            If *this\parent\scroll\h
               *this\bounds\size\max\width = *this\parent\scroll\h\bar\max
            Else
               *this\bounds\size\max\width = *this\parent\inner_width( )
            EndIf
         EndIf
         If MaximumHeight <> #PB_Ignore
            *this\bounds\size\max\height = MaximumHeight
         Else
            If *this\parent\scroll\v
               *this\bounds\size\max\height = *this\parent\scroll\v\bar\max
            Else
               *this\bounds\size\max\height = *this\parent\inner_height( )
            EndIf
         EndIf
         
         If *this\frame_width( ) < *this\bounds\size\min\width
            width = *this\bounds\size\min\width
         ElseIf *this\frame_height( ) < *this\bounds\size\min\height
            height = *this\bounds\size\min\height
         EndIf
         If *this\frame_width( ) > *this\bounds\size\max\width
            width = *this\bounds\size\max\width
         ElseIf *this\frame_height( ) > *this\bounds\size\max\height
            height = *this\bounds\size\max\height
         EndIf
         
         ProcedureReturn Resize( *this, x, y, width, height )
      EndProcedure
      
      Procedure ChildrenBounds( *this._s_WIDGET )
         *this\bounds\children = 1
      EndProcedure
      
      ;-
      Procedure.i GetItemData( *this._s_WIDGET, item.l )
         Protected result.i
         
         With *This
            Select *this\type
               Case #__type_Tree,
                    #__type_ListIcon,
                    #__type_ListView
                  
                  ;             PushListPosition( *this\__rows( ))
                  ;             ForEach *this\__rows( )
                  ;               If *this\__rows( )\index = Item
                  ;                 result = *this\__rows( )\data
                  ;                 ; Debug *this\__rows( )\text\string
                  ;                 Break
                  ;               EndIf
                  ;             Next
                  ;             PopListPosition( *this\__rows( ))
                  ;
                  If is_no_select_item_( *this\__rows( ), item )
                     ProcedureReturn #False
                  EndIf
                  
                  result = *this\__rows( )\data
            EndSelect
         EndWith
         
         ;     If result
         ;       Protected *w.widget_S = result
         ;
         ;       Debug "GetItemData " + Item  + " " +  result  + " " +   *w\class
         ;     EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.s GetItemText( *this._s_WIDGET, Item.l, Column.l = 0 )
         Protected result.s
         
         If *this\type = #__type_Panel
            ProcedureReturn bar_tab_GetItemText( *this\TabBox( ), Item, Column )
         EndIf
         
         If ( *this\type = #__type_TabBar Or *this\type = #__type_ToolBar )
            ProcedureReturn bar_tab_GetItemText( *this, Item, Column )
         EndIf
         
         If *this\count\items ; row count
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn ""
            EndIf
            
            If *this\type = #__type_property And Column
               result = *this\__rows( )\text\edit\string
            Else
               result = *this\__rows( )\text\string
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetItemImage( *this._s_WIDGET, Item.l )
         Protected result
         
         If *this\type = #__type_Editor Or
            *this\type = #__type_property Or
            *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #PB_Default
            EndIf
            
            result = *this\__rows( )\image\img
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetItemFont( *this._s_WIDGET, Item.l )
         Protected result
         
         If *this\type = #__type_Editor Or
            *this\type = #__type_property Or
            *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #False
            EndIf
            
            result = *this\__rows( )\text\fontID
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l GetItemState( *this._s_WIDGET, Item.l )
         Protected result
         
         ;
         If *this\type = #__type_Editor
            If item = - 1
               ProcedureReturn *this\edit_caret_2( )
            Else
               ProcedureReturn *this\edit_caret_1( )
            EndIf
            
         ElseIf *this\type = #__type_Tree Or *this\type = #__type_ListIcon
            
            If is_item_( *this, item ) And SelectElement( *this\__rows( ), Item )
               If *this\__rows( )\color\state
                  result | #PB_Tree_Selected
               EndIf
               
               If *this\__rows( )\CheckedBox( )\state
                  If *this\mode\threestate And
                     *this\__rows( )\CheckedBox( )\state = #PB_Checkbox_Inbetween
                     result | #PB_Tree_Inbetween
                  Else
                     result | #PB_Tree_Checked
                  EndIf
               EndIf
               
               If *this\__rows( )\childrens And
                  *this\__rows( )\ButtonBox( )\state = 0
                  result | #PB_Tree_Expanded
               Else
                  result | #PB_Tree_Collapsed
               EndIf
            EndIf
            
         Else
            ProcedureReturn *this\bar\page\pos
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.l GetItemColor( *this._s_WIDGET, Item.l, ColorType.l, Column.l = 0 )
         Protected result, *color._s_color
         
         Select *this\type
            Case #__type_Editor, #__type_Tree, #__type_ListIcon
               
               If is_item_( *this, item ) And
                  SelectElement( *this\__rows( ), Item )
                  *color = *this\__rows( )\color
               EndIf
            Default
               *color = *this\bar\button[Item]\color
         EndSelect
         
         Select ColorType
            Case #__color_line : result = *color\line[Column]
            Case #__color_back : result = *color\back[Column]
            Case #__color_front : result = *color\front[Column]
            Case #__color_frame : result = *color\frame[Column]
         EndSelect
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i GetItemAttribute( *this._s_WIDGET, Item.l, Attribute.l, Column.l = 0 )
         Protected result
         
         If *this\type = #__type_Tree Or *this\type = #__type_ListIcon
            
            If is_no_select_item_( *this\__rows( ), Item )
               ProcedureReturn #False
            EndIf
            
            If *this\type = #__type_Tree
               If Attribute = #PB_Tree_SubLevel
                  result = *this\__rows( )\sublevel
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure.i SetItemData( *This._s_WIDGET, item.l, *data )
         If *this\count\items
            If is_no_select_item_( *this\__rows( ), item )
               ProcedureReturn #False
            EndIf
            
            *this\__rows( )\data = *Data
         EndIf
      EndProcedure
      
      Procedure.l SetItemText( *this._s_WIDGET, Item.l, Text.s, Column.l = 0 )
         Protected result
         
         If ( *this\type = #__type_TabBar Or *this\type = #__type_ToolBar )
            If is_no_select_item_( *this\__tabs( ), item )
               ProcedureReturn #False
            EndIf
            
            *this\TabChange( )          = #True
            *this\__tabs( )\text\string = Text.s
            result                      = #True
         EndIf
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_property
            
            ;Item = *this\row\i( Hex( Item ))
            
            If is_no_select_item_( *this\__rows( ), item )
               ProcedureReturn #False
            EndIf
            
            Protected row_count = CountString( Text.s, #LF$ )
            
            If Not row_count
               *this\__rows( )\text\string = Text.s
            Else
               *this\__rows( )\text\string      = StringField( Text.s, 1, #LF$ )
               *this\__rows( )\text\edit\string = StringField( Text.s, 2, #LF$ )
            EndIf
            
            *this\__rows( )\TextChange( ) = 1
            *this\WidgetChange( )         = 1
            result                        = #True
            
         ElseIf *this\type = #__type_Panel
            result = SetItemText( *this\TabBox( ), Item, Text, Column )
            
         ElseIf ( *this\type = #__type_TabBar Or *this\type = #__type_ToolBar )
            If is_item_( *this, Item ) And
               SelectElement( *this\__tabs( ), Item ) And
               *this\__tabs( )\text\string <> Text
               *this\__tabs( )\text\string   = Text
               *this\__tabs( )\TextChange( ) = 1
               *this\WidgetChange( )         = 1
               result                        = #True
            EndIf
            
         EndIf
         
         PostRepaint( *this\root )
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemImage( *this._s_WIDGET, Item.l, Image.i )
         Protected result
         
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ListView
            
            If is_item_( *this, item ) And
               SelectElement( *this\__rows( ), item )
               If *this\__rows( )\image\img <> Image
                  set_image_( *this, *this\__rows( )\Image, Image )
                  *this\WidgetChange( ) = 1
               EndIf
            EndIf
         EndIf
         
         PostRepaint( *this\root )
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemFont( *this._s_WIDGET, Item.l, Font.i )
         Protected result
         Protected *TabBox._s_WIDGET
         Protected FontID.i = FontID( Font )
         
         If *this\type = #__type_Panel
            *TabBox = *this\TabBox( )
            
         ElseIf *this\type = #__type_TabBar
            *TabBox = *this
         EndIf
         
         If *TabBox
            If is_item_( *TabBox, item ) And
               SelectElement( *TabBox\__tabs( ), Item ) And
               *TabBox\__tabs( )\text\fontID <> FontID
               *TabBox\__tabs( )\text\fontID = FontID
               ;       *this\__rows( )\TextChange( ) = 1
               ;       *this\WidgetChange( ) = 1
               result = #True
            EndIf
         Else
            If *this\row
               If is_item_( *this, item ) And
                  SelectElement( *this\__rows( ), Item ) And
                  *this\__rows( )\text\fontID <> FontID
                  *this\__rows( )\text\fontID = FontID
                  ;       *this\__rows( )\TextChange( ) = 1
                  ;       *this\WidgetChange( ) = 1
                  result = #True
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.b SetItemState( *this._s_WIDGET, Item.l, State.b )
         Protected result
         
         If *this\type = #__type_TabBar Or
            *this\type = #__type_ToolBar
            
            If is_no_select_item_( *this\__tabs( ), Item )
               ProcedureReturn #False
            EndIf
            
            If State & #PB_Tree_Selected = #PB_Tree_Selected
               If bar_tab_SetState( *this, Item )
                  result = #True
               EndIf
            EndIf
         EndIf
         
         If *this\type = #__type_Editor
            result = edit_SetItemState( *this, Item, state )
            
         ElseIf *this\type = #__type_Tree Or
                *this\type = #__type_ListIcon
            
            If *this\count\items
               If is_no_select_item_( *this\__rows( ), Item )
                  ProcedureReturn #False
               EndIf
               
               Protected *this_current_row._s_ROWS = *this\__rows( )
               
               If State & #PB_Tree_Selected = #PB_Tree_Selected
                  If *this\FocusedRow( ) <> *this\__rows( )
                     *this\FocusedRow( )             = *this\__rows( )
                     *this\FocusedRow( )\focus       = - 1
                     *this\FocusedRow( )\color\state = #__s_2 + Bool( *this\focus = #False )
                  EndIf
               EndIf
               
               If State & #PB_Tree_Inbetween = #PB_Tree_Inbetween
                  *this\__rows( )\CheckedBox( )\state = #PB_Checkbox_Inbetween
               ElseIf State & #PB_Tree_Checked = #PB_Tree_Checked
                  *this\__rows( )\CheckedBox( )\state = #PB_Checkbox_Checked
               Else
                  *this\__rows( )\CheckedBox( )\state = #PB_Checkbox_Unchecked
               EndIf
               
               If *this\__rows( )\childrens
                  If State & #PB_Tree_Expanded = #PB_Tree_Expanded Or
                     State & #PB_Tree_Collapsed = #PB_Tree_Collapsed
                     
                     *this\WidgetChange( )              = #True
                     *this\__rows( )\ButtonBox( )\state = Bool( State & #PB_Tree_Collapsed )
                     
                     PushListPosition( *this\__rows( ))
                     While NextElement( *this\__rows( ))
                        If *this\__rows( )\ParentRow( )
                           *this\__rows( )\hide = Bool( *this\__rows( )\ParentRow( )\ButtonBox( )\state | *this\__rows( )\ParentRow( )\hide )
                        EndIf
                        
                        If *this\__rows( )\sublevel = *this_current_row\sublevel
                           Break
                        EndIf
                     Wend
                     PopListPosition( *this\__rows( ))
                  EndIf
               EndIf
               
               result = *this_current_row\ButtonBox( )\state
            EndIf
            
         EndIf
         
         PostRepaint( *this\root )
         ProcedureReturn result
      EndProcedure
      
      Procedure.l SetItemColor( *this._s_WIDGET, Item.l, ColorType.l, Color.l, Column.l = 0 )
         Protected result, alpha.a
         
         ;
         If *this\row And ListSize( *this\__rows( ) ) ;*this\type = #__type_Tree Or *this\type = #__type_Editor
            If Item = #PB_All
               PushListPosition( *this\__rows( ))
               ForEach *this\__rows( )
                  set_color_( result, *this\__rows( )\color, ColorType, Color, alpha, [Column] )
               Next
               PopListPosition( *this\__rows( ))
               
            Else
               If is_item_( *this, item ) And SelectElement( *this\__rows( ), Item )
                  set_color_( result, *this\__rows( )\color, ColorType, Color, alpha, [Column] )
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i SetItemAttribute( *this._s_WIDGET, Item.l, Attribute.l, *value, Column.l = 0 )
         Protected result
         
         If *this\type = #__type_Window
            
         ElseIf *this\type = #__type_Tree Or *this\type = #__type_ListIcon
            
            Select Attribute
               Case #__tree_OptionBoxes
                  *this\mode\check = Bool( *value )
                  
               Case #PB_Tree_Collapsed
                  *this\mode\collapsed = Bool( Not *value )
                  
               Case #PB_Tree_SubLevel
                  If is_no_select_item_( *this\__rows( ), Item )
                     ProcedureReturn #False
                  EndIf
                  
                  *this\__rows( )\sublevel = *value
                  
            EndSelect
            
         ElseIf *this\type = #__type_Editor
            
         ElseIf *this\type = #__type_Panel
            
         Else
         EndIf
         
         
         ProcedureReturn result
      EndProcedure
      
      
      ;-
      ;-  CREATEs
      Procedure.i Create( *parent._s_WIDGET, class.s, type.l, x.l, y.l, width.l, height.l, Text.s = #Null$, flag.q = #Null, *param_1 = #Null, *param_2 = #Null, *param_3 = #Null, size.l = 0, round.l = 0, ScrollStep.f = 1.0 )
         Protected *root._s_root = *parent\root ; Root( )
         Protected color, image                 ;, *this.allocate( Widget )
         
         Protected *this._s_WIDGET
         If Flag & #__flag_autosize = #__flag_autosize And
            Not ListSize( __widgets( ) )
            x              = 0
            y              = 0
            width          = *root\width
            height         = *root\height
            *root\autosize = #True
            *this          = *root
         Else
            *this.allocate( Widget )
         EndIf
         
         ;\\ replace pb flag
         flag = FromPBFlag( type, flag )
         
         ;\\
         *this\create = #True
         *this\color  = _get_colors_( )
         *this\type   = type
         *this\class  = class
         *this\round  = round
         *this\child  = Bool( Flag & #__flag_child = #__flag_child )
         
         ;\\
         *this\frame_x( )      = #PB_Ignore
         *this\frame_y( )      = #PB_Ignore
         *this\frame_width( )  = #PB_Ignore
         *this\frame_height( ) = #PB_Ignore
         
         ;\\ set activate state
         If *this\type = #__type_String
            *this\color\state = #__s_2
         EndIf
         
         ;\\ Flags
         *this\flag = Flag
         If *this\type = #__type_Button Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_HyperLink
            *this\flag | #__text_center
            
         ElseIf *this\type = #__type_ComboBox Or
                *this\type = #__type_Spin Or
                *this\type = #__type_String Or
                *this\type = #__type_Option Or
                *this\type = #__type_CheckBox
            
            If Not flag & #__text_center
               *this\flag | #__text_center | #__text_left
            EndIf
            
            If *this\type = #__type_CheckBox And Flag & #PB_CheckBox_Right
               *this\flag & ~ #__text_left
               *this\flag | #__text_right
            EndIf
         EndIf
         
         ;\\ Border & Frame size
         If *this\type = #__type_TabBar Or
            *this\type = #__type_ToolBar
            
            If *this\child
               *this\fs = *parent\fs
            Else
               *this\fs = #__scroll_border
            EndIf
         EndIf
         If *this\type = #__type_ScrollArea Or
            *this\type = #__type_MDI Or
            *this\type = #__type_String Or
            *this\type = #__type_Editor Or
            *this\type = #__type_Tree Or
            *this\type = #__type_ListView Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ExplorerList Or
            *this\type = #__type_Property
            ;
            If Not *this\Flag & #__flag_borderLess
               *this\fs = #__scroll_border
            EndIf
         Else
            If *this\type = #__type_Container Or
               *this\type = #__type_ComboBox Or
               *this\type = #__type_Spin Or
               *this\type = #__type_Button Or
               *this\type = #__type_ButtonImage Or
               *this\type = #__type_Panel Or
               *this\type = #__type_Frame
               
               ;
               If *this\Flag & #__flag_borderLess
               Else
                  *this\fs = 1
                  ;             If *this\flag = #__flag_Single
                  ;             ElseIf *this\flag = #__flag_Double
                  ;             ElseIf *this\flag = #__flag_Flat
                  ;             ElseIf *this\flag = #__flag_Raised
                  ;             Else
                  ;             EndIf
               EndIf
            EndIf
         EndIf
         If *this\type = #__type_Text
            *this\fs = Bool( Flag & #PB_Text_Border = #PB_Text_Border )
            If *this\flag & #__text_left
               *this\flag & ~ #__text_center
            EndIf
            *this\flag | #__text_wordwrap
         EndIf
         *this\bs = *this\fs
         
         ;\\
         If *parent
            ;\\
            If flag & #__flag_autosize = #__flag_autosize
               If *parent\type <> #__type_Splitter
                  *this\autosize = 1
                  ; set transparent parent
                  *parent\color\back      = - 1
                  *parent\color\_alpha    = 0
                  *parent\color\_alpha[1] = 0
               EndIf
            EndIf
            
            ;\\
            If *this\child
               *this\parent = *parent
               *this\root   = *parent\root
               *this\window = *parent\window
               
               *this\index   = *parent\index
               *this\address = *parent\address
               ; Debug  "Create(child) "+ *this\type
            Else
               ; AddWidget( *this, *parent )
               *this\text\string = Text
               SetParent( *this, *parent, #PB_Default )
            EndIf
         EndIf
         
         ;\\ - Create Texts
         If *this\type = #__type_Text Or
            *this\type = #__type_Editor Or
            *this\type = #__type_String Or
            *this\type = #__type_Button Or
            *this\type = #__type_Option Or
            *this\type = #__type_CheckBox Or
            *this\type = #__type_HyperLink
            
            *this\row.allocate( ROW )
            *this\FocusedLineIndex( ) = - 1
            *this\EnteredLineIndex( ) = - 1
            
            
            ;\\ - Create Button
            If *this\type = #__type_Button
               *this\text\padding\x = 4
               *this\text\padding\y = 4
            EndIf
            
            ;\\ - Create String
            If *this\type = #__type_String
               *this\text\caret\x   = 3
               *this\text\padding\x = 3
            EndIf
            
            ;\\ - Create Text
            If *this\type = #__type_Text
               *this\color\fore  = - 1
               *this\color\back  = _get_colors_( )\fore
               *this\color\front = _get_colors_( )\front
               If *this\fs
                  *this\color\frame = _get_colors_( )\frame
               EndIf
               
               *this\text\padding\x = 2
            EndIf
            
            ;\\ - Create Editor
            If *this\type = #__type_Editor
               *this\mode\fullselection = constants::_check_( *this\flag, #__flag_fullselection, #False ) * 7
               *this\mode\gridlines     = constants::_check_( *this\flag, #__flag_gridlines ) * 10
               
               *this\MarginLine( )\hide        = constants::_check_( *this\flag, #__text_numeric, #False )
               *this\MarginLine( )\color\front = $C8000000 ; *this\color\back[0]
               *this\MarginLine( )\color\back  = $C8F0F0F0 ; *this\color\back[0]
               
               *this\text\padding\x = 3
               *this\text\padding\y = 3
            EndIf
            
            If *this\type = #__type_Option
               ;\\
               If *this\BeforeWidget( )
                  If *this\BeforeWidget( )\type = #__type_Option
                     *this\GroupBox( ) = *this\BeforeWidget( )\GroupBox( )
                  Else
                     *this\GroupBox( ) = *this\BeforeWidget( )
                  EndIf
               Else
                  *this\GroupBox( ) = *parent
               EndIf
               
               ;       *this\color\back =- 1; _get_colors_( ); - 1
               ;       *this\color\fore =- 1
               
               *this\color\fore  = - 1
               *this\color\back  = _get_colors_( )\fore
               *this\color\front = _get_colors_( )\front
               
               *this\StatusBox( ).allocate( BUTTONS )
               *this\StatusBox( )\color      = _get_colors_( )
               *this\StatusBox( )\color\back = $ffffffff
               
               *this\StatusBox( )\round  = 7
               *this\StatusBox( )\width  = 15
               *this\StatusBox( )\height = *this\StatusBox( )\width
               
               *this\text\padding\x = *this\StatusBox( )\width + 8
               
               ; temp
               If flag
                  SetState( *this, 1 )
               EndIf
            EndIf
            
            If *this\type = #__type_CheckBox
               *this\mode\threestate = constants::_check_( Flag, #PB_CheckBox_ThreeState )
               
               *this\color\fore  = - 1
               *this\color\back  = _get_colors_( )\fore
               *this\color\front = _get_colors_( )\front
               
               *this\StatusBox( ).allocate( BUTTONS )
               *this\StatusBox( )\color      = _get_colors_( )
               *this\StatusBox( )\color\back = $ffffffff
               
               *this\StatusBox( )\round  = 2
               *this\StatusBox( )\height = 15
               *this\StatusBox( )\width  = *this\StatusBox( )\height
               
               *this\text\padding\x = *this\StatusBox( )\width + 8
            EndIf
            
            If *this\type = #__type_HyperLink
               Color = *param_1
               
               *this\mode\Lines = constants::_check_( Flag, #PB_HyperLink_Underline )
               
               *this\color\fore[#__s_0]  = - 1
               *this\color\back[#__s_0]  = _get_colors_( )\fore
               *this\color\front[#__s_0] = _get_colors_( )\front
               
               If Not Alpha( Color )
                  Color = Color & $FFFFFF | 255 << 24
               EndIf
               *this\color\front[#__s_1] = Color
            EndIf
            
         EndIf
         
         ;\\ - Create Lists
         If *this\type = #__type_Tree Or
            *this\type = #__type_ListView Or
            *this\type = #__type_ListIcon Or
            *this\type = #__type_ExplorerList Or
            *this\type = #__type_Property
            
            ;*this\fs[1] = 50
            ;*this\fs[2] = 50
            ;*this\fs[3] = 50
            ;*this\fs[4] = 50
            *this\color\fore    = 0
            *this\color\back[0] = $FFFFFFFF
            
            *this\row.allocate( ROW )
            ;
            *this\FocusedRowIndex( )  = - 1
            *this\FocusedLineIndex( ) = - 1
            
            If type = #__type_Property
               If *this\bar
                  *this\bar\page\pos = 60
               EndIf
            EndIf
            
            *this\color\_alpha        = 255
            *this\color\fore[#__s_0]  = - 1
            *this\color\back[#__s_0]  = $ffffffff ; _get_colors_( )\fore
            *this\color\front[#__s_0] = _get_colors_( )\front
            *this\color\frame[#__s_0] = _get_colors_( )\frame
            
            ;Row( *this )\index = - 1
            *this\WidgetChange( ) = 1
            
            ;*this\round = round
            
            *this\TextChange( ) = 1
            *this\text\height   = 18
            
            *this\image\padding\x = 2
            *this\text\padding\x  = 4
            
            If flag & #__tree_nolines
               flag & ~ #__tree_nolines
            Else
               flag | #__tree_nolines
            EndIf
            
            If flag & #__tree_NoButtons
               flag & ~ #__tree_NoButtons
            Else
               flag | #__tree_NoButtons
            EndIf
            
            If flag
               Flag( *this, flag, #True )
            EndIf
         EndIf
         
         ;\\ - Create Containers
         If *this\type = #__type_Container Or
            *this\type = #__type_ScrollArea Or
            *this\type = #__type_Panel Or
            *this\type = #__type_MDI Or
            *this\type = #__type_Frame
            
            If *this\type = #__type_Frame
               *this\container = - 1
            Else
               *this\container = 3
            EndIf
            *this\color\back = $FFF9F9F9
            
            ;\\
            If *this\type = #__type_Frame
               *this\color\back = $96D8D8D8
               
               If Text
                  *this\fs[2] = 8
               EndIf
               
               set_text_flag_( *this, text, flag, 12, - *this\fs[2] - 1 )
            EndIf
            
            ;\\
            If *this\type = #__type_Panel
               If Flag & #__bar_vertical = #False
                  *this\fs[2] = #__panel_height
               Else
                  *this\fs[1] = #__panel_width
               EndIf
               
               *this\TabBox( ) = Create( *this, *this\class + "_TabBar", #__type_TabBar, 0, 0, 0, 0, #Null$, Flag | #__flag_child, 0, 0, 0, 0, 0, 30 )
            EndIf
            
            ;\\ Open gadget list
            If *this\container > 0 And
               *this\flag & #__flag_nogadgets = #False
               OpenList( *this )
            EndIf
         EndIf
         
         ;\\ - Create ComboBox
         If *this\type = #__type_ComboBox
            *this\combobox.allocate( BUTTONS )
            *this\combobox\color           = _get_colors_( )
            *this\combobox\arrow\type      = #__arrow_type
            *this\combobox\arrow\size      = #__arrow_size
            *this\combobox\arrow\direction = 2
            
            ;\\
            If *this\flag & #PB_ComboBox_Editable
               *this\StringBox( ) = Create( *this, *this\class + "_string", #__type_String,
                                            0, 0, 0, 0, #Null$, #__flag_child | #__flag_borderless )
               ;*this\StringBox( )\autosize = 1
               *this\fs[3] = 17
            EndIf
            
            ;\\
            *this\popup = Create( *this, *this\class + "_ListView", #__type_ListView,
                                  0, 0, 0, 0, #Null$, #__flag_child | #__flag_nobuttons | #__flag_nolines ) ;| #__flag_borderless
            *this\popup\fs = 2
            ;             *this\popup\hidden = 1
            ;             *this\popup\hide = 1
            Hide( *this\popup, #True )
            ;Debug ""+*this\StringBox( )\parent\class +" "+ *this\popup\parent\class
         EndIf
         
         ;\\ - Create Bars
         If *this\type = #__type_ScrollBar Or
            *this\type = #__type_ProgressBar Or
            *this\type = #__type_TrackBar Or
            *this\type = #__type_TabBar Or
            *this\type = #__type_ToolBar Or
            *this\type = #__type_Spin Or
            *this\type = #__type_Splitter
            
            *this\bar.allocate( BAR )
            *this\bar\button.allocate( BUTTONS )
            *this\bar\button.allocate( BUTTONS, [1] )
            *this\bar\button.allocate( BUTTONS, [2] )
            
            *this\bar\PageChange( ) = 1
            *this\scroll\increment  = ScrollStep
            Protected._s_BUTTONS *BB1, *BB2, *SB
            *SB  = *this\bar\button
            *BB1 = *this\bar\button[1]
            *BB2 = *this\bar\button[2]
            
            ; - Create Scroll
            If *this\type = #__type_ScrollBar
               *this\color\back  = $FFF9F9F9 ; - 1
               *this\color\front = $FFFFFFFF
               
               *this\bar\invert   = Bool( Flag & #__bar_invert = #__bar_invert )
               *this\bar\vertical = Bool( Flag & #__bar_vertical = #__bar_vertical Or
                                          Flag & #PB_ScrollBar_Vertical = #PB_ScrollBar_Vertical )
               
               If *this\bar\vertical
                  *this\class = class + "-v"
               Else
                  *this\class = class + "-h"
               EndIf
               
               *BB1\color = _get_colors_( )
               *BB2\color = _get_colors_( )
               *SB\color  = _get_colors_( )
               
               ;
               If Not Flag & #__flag_nobuttons = #__flag_nobuttons
                  *BB1\size = - 1
                  *BB2\size = - 1
               EndIf
               *SB\size = size
               
               *BB1\round = *this\round
               *BB2\round = *this\round
               *SB\round  = *this\round
               
               *BB1\arrow\type = #__arrow_type ; -1 0 1
               *BB2\arrow\type = #__arrow_type ; -1 0 1
               
               *BB1\arrow\size = #__arrow_size
               *BB2\arrow\size = #__arrow_size
               *SB\arrow\size  = 3
            EndIf
            
            ; - Create Spin
            If *this\type = #__type_Spin
               *this\color\back   = - 1
               *this\color\_alpha = 255
               *this\color\back   = $FFFFFFFF
               
               *BB1\color = _get_colors_( )
               *BB2\color = _get_colors_( )
               
               ;
               *this\bar\invert = Bool( Flag & #__bar_invert = #__bar_invert )
               
               If *this\flag & #__spin_Plus
                  If ( Flag & #PB_Splitter_Vertical = #PB_Splitter_Vertical Or Flag & #__bar_vertical = #__bar_vertical )
                     *this\bar\vertical = #True
                  EndIf
                  *this\flag = flag | #__text_center
               Else
                  If Not ( Flag & #PB_Splitter_Vertical = #PB_Splitter_Vertical Or Flag & #__bar_vertical = #__bar_vertical )
                     *this\bar\vertical = #True
                     ;*this\bar\invert   = #True
                  EndIf
                  
                  *BB1\arrow\size = #__arrow_size
                  *BB2\arrow\size = #__arrow_size
                  
                  *BB1\arrow\type = #__arrow_type ; -1 0 1
                  *BB2\arrow\type = #__arrow_type ; -1 0 1
               EndIf
               
               ;\\
               *this\StringBox( ) = Create( *this,
                                            *this\class + "_string",
                                            #__type_String, 0, 0, 0, 0, #Null$,
                                            #__flag_child | #__text_numeric | #__flag_borderless | *this\flag )
               
               
            EndIf
            
            ; - Create Track
            If *this\type = #__type_TrackBar
               *this\color\back = - 1
               *BB1\color       = _get_colors_( )
               *BB2\color       = _get_colors_( )
               *SB\color        = _get_colors_( )
               
               *this\bar\vertical = Bool( Flag & #__bar_vertical = #__bar_vertical Or
                                          Flag & #PB_TrackBar_Vertical = #PB_TrackBar_Vertical )
               
               If *this\bar\vertical
                  *this\bar\invert = Bool( Flag & #__bar_invert = 0 )
               Else
                  *this\bar\invert = Bool( Flag & #__bar_invert = #__bar_invert )
               EndIf
               
               ;             If flag & #PB_Trackbar_Ticks = #PB_Trackbar_Ticks
               ;               *this\flag | #PB_Trackbar_Ticks
               ;             EndIf
               
               *SB\arrow\size = #__arrow_size
               *SB\arrow\type = #__arrow_type
               
               *BB1\round = 2
               *BB2\round = 2
               *SB\round  = *this\round
               
               If *this\round < 7
                  *SB\size = 9
               Else
                  *SB\size = 15
               EndIf
               
               ; button draw color
               *SB\focus       = 1
               *SB\color\state = #__s_2
               
               If Not *this\flag & #PB_TrackBar_Ticks
                  If *this\bar\invert
                     *BB2\focus       = 1
                     *BB2\color\state = #__s_2
                  Else
                     *BB1\focus       = 1
                     *BB1\color\state = #__s_2
                  EndIf
               EndIf
            EndIf
            
            ; - Create Tab
            If *this\type = #__type_TabBar Or
               *this\type = #__type_ToolBar
               
               ;;*this\TextChange( ) = 1
               *this\color\back = - 1
               *BB1\color       = _get_colors_( )
               *BB2\color       = _get_colors_( )
               ;*SB\color = _get_colors_( )
               
               *this\bar\invert   = Bool( Flag & #__bar_invert = #__bar_invert )
               *this\bar\vertical = Bool( Flag & #__bar_vertical = #__bar_vertical )
               
               If Not Flag & #__bar_buttonsize = #__bar_buttonsize
                  *SB\size  = size
                  *BB1\size = 15
                  *BB2\size = 15
               EndIf
               
               *BB1\round = 7
               *BB2\round = 7
               *SB\round  = *this\round
               
               *BB1\arrow\type = -1 ; -1 0 1
               *BB2\arrow\type = -1 ; -1 0 1
               
               *BB1\arrow\size = #__arrow_size
               *BB2\arrow\size = #__arrow_size
               ;*SB\arrow\size = 3
            EndIf
            
            ; - Create Progress
            If *this\type = #__type_ProgressBar
               *this\bar\vertical = Bool( Flag & #__bar_vertical = #__bar_vertical Or
                                          Flag & #PB_ProgressBar_Vertical = #PB_ProgressBar_Vertical )
               
               *this\bar\invert = Bool( Flag & #__bar_invert = #__bar_invert )
               ;           If *this\bar\vertical
               ;             *this\bar\invert = Bool( Flag & #__bar_invert = 0 )
               ;           Else
               ;             *this\bar\invert = Bool( Flag & #__bar_invert = #__bar_invert )
               ;           EndIf
               
               *this\color         = _get_colors_( )
               *this\TextChange( ) = #True
               
               ;           *BB1\round = *this\round
               ;           *BB2\round = *this\round
               ; ;           *BB1\color = *this\color
               ; ;           *BB2\color = *this\color
               ; ;           ;*SB\color = *this\color
            EndIf
            
            ; - Create Splitter
            If *this\type = #__type_Splitter
               *this\container  = - 1
               *this\color\back = - 1
               
               *this\bar\invert   = Bool( Flag & #__bar_invert = #__bar_invert )
               *this\bar\vertical = Bool( Flag & #__bar_vertical = #False And Flag & #PB_Splitter_Vertical = #False )
               
               If Flag & #PB_Splitter_FirstFixed = #PB_Splitter_FirstFixed
                  *this\bar\fixed = #PB_Splitter_FirstMinimumSize
               ElseIf Flag & #PB_Splitter_SecondFixed = #PB_Splitter_SecondFixed
                  *this\bar\fixed = #PB_Splitter_SecondMinimumSize
               EndIf
               
               ;\\
               If *param_1 >= 0
                  *this\split_1( ) = *param_1
               EndIf
               If *param_2 >= 0
                  *this\split_2( ) = *param_2
               EndIf
               
               *this\split_1_is( ) = Bool( PB(IsGadget)( *param_1 ))
               *this\split_2_is( ) = Bool( PB(IsGadget)( *param_2 ))
               
               *this\bar\button[1]\hide = Bool( *this\split_1_is( ) Or *this\split_1( ) )
               *this\bar\button[2]\hide = Bool( *this\split_2_is( ) Or *this\split_2( ) )
               *SB\size                 = #__splitter_buttonsize
               *SB\round                = 2
               
               ;\\
               ; If *this\type = #__type_Splitter
               If *this\split_1_is( )
                  Debug "bar_is_first_gadget_ " + *this\split_1_is( )
                  parent::set( *this\split_1( ), *this\root\canvas\GadgetID )
               ElseIf *this\split_1( )
                  SetParent( *this\split_1( ), *this )
               EndIf
               
               If *this\split_2_is( )
                  Debug "bar_is_second_gadget_ " + *this\split_2_is( )
                  parent::set( *this\split_2( ), *this\root\canvas\GadgetID )
               ElseIf *this\split_2( )
                  SetParent( *this\split_2( ), *this )
               EndIf
               ; EndIf
               
            EndIf
            
         EndIf
         
         ;\\
         Post( *this, #__event_create )
         
         ;\\ Set Attribute
         If *this\type = #__type_ScrollBar Or
            *this\type = #__type_ProgressBar Or
            *this\type = #__type_TrackBar Or
            *this\type = #__type_TabBar Or
            *this\type = #__type_ToolBar Or
            *this\type = #__type_Spin
            
            If *this\type = #__type_Spin
               bar_SetAttribute( *this, #__bar_buttonsize, Size )
            EndIf
            
            If *param_1
               SetAttribute( *this, #__bar_minimum, *param_1 )
            EndIf
            If *param_2
               SetAttribute( *this, #__bar_maximum, *param_2 )
            EndIf
            If *param_3
               SetAttribute( *this, #__bar_pageLength, *param_3 )
            EndIf
         EndIf
         
         ;\\ Set image
         If *this\type = #__type_Image Or
            *this\type = #__type_ButtonImage Or
            *this\type = #__type_Button
            
            Image = *param_1
            set_image_( *this, *this\Image, Image )
            set_image_( *this, *this\image[#__image_released], Image )
            
            *this\image\align\left   = constants::_check_( *this\flag, #__image_left )
            *this\image\align\right  = constants::_check_( *this\flag, #__image_right )
            *this\image\align\top    = constants::_check_( *this\flag, #__image_top )
            *this\image\align\bottom = constants::_check_( *this\flag, #__image_bottom )
            
            If Not *this\image\align\top And
               Not *this\image\align\left And
               Not *this\image\align\right And
               Not *this\image\align\bottom And
               Not constants::_check_( *this\flag, #__image_center )
               
               If Not *this\image\align\right
                  *this\flag | #__image_left
                  *this\image\align\left = #True
               EndIf
               If Not *this\image\align\bottom
                  *this\flag | #__image_top
                  *this\image\align\top = #True
               EndIf
            EndIf
         EndIf
         
         ;\\ Create cursor
         If Not *this\cursor
            If *this\type = #__type_Editor Or
               *this\type = #__type_String
               *this\cursor[1] = cursor::#__cursor_IBeam
            EndIf
            If *this\type = #__type_HyperLink
               *this\cursor[1] = cursor::#__cursor_Hand
               *this\cursor[2] = cursor::#__cursor_IBeam
            EndIf
            If *this\type = #__type_Splitter
               If *this\bar\vertical
                  *this\cursor[1] = cursor::#__cursor_SplitUpDown
                  *this\cursor[2] = cursor::#__cursor_SplitUp
                  *this\cursor[3] = cursor::#__cursor_SplitDown
               Else
                  *this\cursor[1] = cursor::#__cursor_SplitLeftRight
                  *this\cursor[2] = cursor::#__cursor_SplitLeft
                  *this\cursor[3] = cursor::#__cursor_SplitRight
               EndIf
            EndIf
            If *this\cursor[1]
               *this\cursor = *this\cursor[1]
            EndIf
         EndIf
         
         ;\\
         If *this\row
            ;  If *this\type = #__type_ListIcon
            AddColumn( *this, 0, Text, *param_1 )
            ; EndIf
         EndIf
         
         ;\\ Resize
         If *this\child
            If *this\type = #__type_ScrollBar
               If *this\parent
                  If *this\bar\vertical
                     *this\parent\scroll\v = *this
                     If *this\parent\type <> #__type_string
                        Resize( *this, *this\parent\container_width( ) - width, y, width, *this\parent\container_height( ) - width + Bool(*this\Round) * (width / 4) )
                     EndIf
                  Else
                     *this\parent\scroll\h = *this
                     If *this\parent\type <> #__type_string
                        Resize( *this, x, *this\parent\container_height( ) - height, *this\parent\container_width( ) - height + Bool(*this\Round) * (height / 4), height )
                     EndIf
                  EndIf
               EndIf
            EndIf
         Else
            Resize( *this, x, y, width, height )
         EndIf
         
         ;\\ Scroll bars
         If flag & #__flag_noscrollbars = #False
            If *this\type = #__type_String
               
               bar_area_create_( *this, 1, 0, 0, *this\inner_width( ), *this\inner_height( ), 0)
               
               *this\scroll\v\hide  = 1
               *this\scroll\h\hide  = 1
               *this\scroll\v\width = 0
               ;                *this\scroll\v\bar\button[0]\size = 1
               ;                *this\scroll\v\bar\button[1]\size = 1
               ;                *this\scroll\v\bar\button[2]\size = 1
               ;                *this\scroll\h\bar\button[0]\size = 1
               ;                *this\scroll\h\bar\button[1]\size = 1
               ;                *this\scroll\h\bar\button[2]\size = 1
               *this\scroll\h\height = 0
               
            ElseIf *this\type = #__type_Editor Or
                   *this\type = #__type_Tree Or
                   *this\type = #__type_ListView Or
                   *this\type = #__type_ListIcon Or
                   *this\type = #__type_ExplorerList Or
                   *this\type = #__type_Property
               
               bar_area_create_( *this, 1, 0, 0, *this\inner_width( ), *this\inner_height( ), Bool(( *this\mode\Buttons = 0 And *this\mode\Lines = 0 ) = 0 ))
            ElseIf *this\type = #__type_MDI Or
                   *this\type = #__type_ScrollArea
               
               bar_area_create_( *this, 1, *param_1, *param_2, *this\inner_width( ), *this\inner_height( ) )
            ElseIf *this\type = #__type_Image
               bar_area_create_( *this, 1, *this\image\width, *this\image\height, *this\inner_width( ), *this\inner_height( ) )
            EndIf
         EndIf
         
         ;\\
         If *this\row
            set_text_flag_( *this, text, *this\flag )
         EndIf
         
         widget( ) = *this
         ProcedureReturn *this
      EndProcedure
      
      Procedure.i Tab( x.l, y.l, width.l, height.l, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_TabBar, x, y, width, height, #Null$, flag, 0, 0, 0, 40, round, 40 )
      EndProcedure
      
      Procedure.i Spin( x.l, y.l, width.l, height.l, Min.l, Max.l, flag.q = 0, round.l = 0, Increment.f = 1.0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Spin, x, y, width, height, #Null$, flag, min, max, 0, #__spin_barsize, round, Increment )
      EndProcedure
      
      Procedure.i Scroll( x.l, y.l, width.l, height.l, Min.l, Max.l, PageLength.l, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ScrollBar, x, y, width, height, #Null$, flag, min, max, pagelength, #__scroll_buttonsize, round, 1 )
      EndProcedure
      
      Procedure.i Track( x.l, y.l, width.l, height.l, Min.l, Max.l, flag.q = 0, round.l = 7 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_TrackBar, x, y, width, height, #Null$, flag, min, max, 0, 0, round, 1 )
      EndProcedure
      
      Procedure.i Progress( x.l, y.l, width.l, height.l, Min.l, Max.l, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ProgressBar, x, y, width, height, #Null$, flag, min, max, 0, 0, round, 1 )
      EndProcedure
      
      Procedure.i Splitter( x.l, y.l, width.l, height.l, First.i, Second.i, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Splitter, x, y, width, height, #Null$, flag, First, Second, 0, 0, 0, 1 )
      EndProcedure
      
      
      ;-
      Procedure.i Tree( x.l, y.l, width.l, height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Tree, x, y, width, height, "", Flag )
      EndProcedure
      
      Procedure.i ListView( x.l, y.l, width.l, height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ListView, x, y, width, height, "", Flag | #__tree_nobuttons | #__tree_nolines )
      EndProcedure
      
      Procedure.i ListIcon( x.l, y.l, width.l, height.l, ColumnTitle.s, ColumnWidth.i, flag.q = 0 )
         ;  ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_tree, x, y, width, height, "", Flag ); #__type_ListIcon
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ListIcon, x, y, width, height, ColumnTitle, Flag, ColumnWidth ); #__type_ListIcon
      EndProcedure
      
      Procedure.i ExplorerList( x.l, y.l, width.l, height.l, Directory.s, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ExplorerList, x, y, width, height, "", Flag | #__tree_nobuttons | #__tree_nolines )
      EndProcedure
      
      Procedure.i Tree_properties( x.l, y.l, width.l, height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Property, x, y, width, height, "", Flag )
      EndProcedure
      
      
      ;-
      Procedure.i Editor( x.l, Y.l, width.l, height.l, flag.q = 0, round.i = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Editor, x, y, width, height, "", flag, 0, 0, 0, 0, round, 0 )
      EndProcedure
      
      Procedure.i String( x.l, y.l, width.l, height.l, Text.s, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_String, x, y, width, height, Text, flag, 0, 0, 0, 0, round, 0 )
      EndProcedure
      
      Procedure.i Text( x.l, y.l, width.l, height.l, Text.s, flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Text, x, y, width, height, Text, flag, 0, 0, 0, 0, round, 0 )
      EndProcedure
      
      Procedure.i Button( x.l, y.l, width.l, height.l, Text.s, flag.q = 0, Image.i = -1, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Button, x, y, width, height, Text, flag, Image, 0, 0, 0, round )
      EndProcedure
      
      Procedure.i Option( x.l, y.l, width.l, height.l, Text.s, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Option, x, y, width, height, Text, flag, 0, 0, 0, 0, 0, 0 )
      EndProcedure
      
      Procedure.i Checkbox( x.l, y.l, width.l, height.l, Text.s, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_CheckBox, x, y, width, height, Text, flag, 0, 0, 0, 0, 0, 0 )
      EndProcedure
      
      Procedure.i HyperLink( x.l, y.l, width.l, height.l, Text.s, Color.i, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_HyperLink, x, y, width, height, Text, flag, Color, 0, 0, 0, 0, 0 )
      EndProcedure
      
      Procedure.i ButtonImage( x.l, y.l, width.l, height.l, Image.i = -1 , flag.q = 0, round.l = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ButtonImage, x, y, width, height, "", flag, Image, 0, 0, 0, round )
      EndProcedure
      
      Procedure.i ComboBox( x.l, y.l, width.l, height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ComboBox, x, y, width, height, "", flag, 0, 0, 0, 0, 0, 0 )
      EndProcedure
      
      ;-
      Procedure.i MDI( x.l, y.l, width.l, height.l, flag.q = 0 ) ; , Menu.i, SubMenu.l, FirstMenuItem.l )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_MDI, x, y, width, height, #Null$, flag | #__flag_nogadgets, 0, 0, 0, #__scroll_buttonsize, 0, 1 )
      EndProcedure
      
      Procedure.i Panel( x.l, y.l, width.l, height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Panel, x, y, width, height, #Null$, flag | #__flag_noscrollbars, 0, 0, 0, #__scroll_buttonsize, 0, 0 )
      EndProcedure
      
      Procedure.i Container( x.l, y.l, width.l, height.l, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Container, x, y, width, height, #Null$, flag | #__flag_noscrollbars, 0, 0, 0, #__scroll_buttonsize, 0, 0 )
      EndProcedure
      
      Procedure.i ScrollArea( x.l, y.l, width.l, height.l, ScrollAreaWidth.l, ScrollAreaHeight.l, ScrollStep.l = 1, flag.q = 0 )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_ScrollArea, x, y, width, height, #Null$, flag, ScrollAreaWidth, ScrollAreaHeight, 0, #__scroll_buttonsize, 0, ScrollStep )
      EndProcedure
      
      Procedure.i Frame( x.l, y.l, width.l, height.l, Text.s, flag.q = #__flag_nogadgets )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Frame, x, y, width, height, Text, flag, 0, 0, 0, 0, 7 )
      EndProcedure
      
      Procedure.i Image( x.l, y.l, width.l, height.l, image.i, flag.q = 0 ) ; , Menu.i, SubMenu.l, FirstMenuItem.l )
         ProcedureReturn Create( Opened( ), #PB_Compiler_Procedure, #__type_Image, x, y, width, height, #Null$, flag, image, 0, 0, #__scroll_buttonsize, 0, 1 )
      EndProcedure
      
      ;-
      Procedure ToolBar( *parent._s_WIDGET, flag.q = #PB_ToolBar_Small )
         ProcedureReturn ListView( 0, 0, *parent\inner_width( ), 20, flag )
      EndProcedure
      
      Procedure ToolTip( *this._s_WIDGET, Text.s, item = - 1 )
         *this\tt\text\string = Text
      EndProcedure
      
      ;-
      ;-  DRAWINGs
      Procedure Window_Draw( *this._s_WIDGET )
         Protected caption_height = *this\caption\height - *this\fs
         Protected mouse_interact_state = 0
         
         With *this
            ; чтобы закруглять только у окна с титлебаром
            Protected gradient = 1
            Protected r = 9
            
            drawing_mode_alpha_( #PB_2DDrawing_Default )
            
            If *this\fs And *this\round And Not *this\fs[2]
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\caption\color\back[\color\state] )
            EndIf
            
            ; Draw back
            If *this\color\back[mouse_interact_state * *this\color\state]
               If *this\fs > *this\round / 3 And *this\round
                  draw_box_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\color\back[mouse_interact_state * *this\color\state] )
               Else
                  If *this\round
                     draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\fore[mouse_interact_state * *this\color\state] )
                  Else
                     draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\fore[mouse_interact_state * *this\color\state] )
                  EndIf
               EndIf
            EndIf
            
            If gradient And Not *this\round
               drawing_mode_alpha_( #PB_2DDrawing_Gradient )
               BackColor( *this\color\fore[\color\state] & $FFFFFF | 255 << 24 )
               FrontColor( *this\color\frame[\color\state] & $FFFFFF | 255 << 24 )
            EndIf
            
            If *this\fs[2] And Not *this\round
               Protected ch = *this\fs[2]
               If Not *this\round
                  ch = *this\fs[2] - 1             ; (*this\fs+*this\fs[2])/2
               EndIf
               
               ; top
               If gradient
                  LinearGradient( *this\frame_x( ) + *this\fs, *this\frame_y( ), *this\frame_x( ) + *this\fs, *this\frame_y( ) + (*this\fs[2] + *this\fs) * 2)
               EndIf
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + *this\fs, r, r, *this\color\frame[\color\state] )
               
               If *this\fs[2]
                  drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs[2] + *this\fs, r, r, *this\color\frame[\color\state] )
               EndIf
               
               If gradient
                  drawing_mode_alpha_( #PB_2DDrawing_Gradient )
                  BackColor( *this\color\fore[\color\state] & $FFFFFF | 255 << 24 )
                  FrontColor( *this\color\frame[\color\state] & $FFFFFF | 255 << 24 )
                  LinearGradient( *this\frame_x( ) + *this\fs, *this\frame_y( ), *this\frame_x( ) + *this\fs, *this\frame_y( ) + (*this\fs[2] + *this\fs) * 2)
               EndIf
               draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\fs[2] - r, *this\frame_width( ), r + *this\fs, *this\color\frame[\color\state] )
            EndIf
            
            ; Draw frame
            If *this\fs > 0
               If Not gradient
                  drawing_mode_alpha_( #PB_2DDrawing_Default )
               EndIf
               If Not *this\round
                  If *this\fs = 1
                     gradient = 0
                  EndIf
                  
                  If Not *this\fs[2]; top
                     If gradient
                        LinearGradient( *this\frame_x( ), *this\frame_y( ) + *this\fs * 2, *this\frame_x( ), *this\frame_y( ) - *this\fs )
                     EndIf
                     draw_box_( *this\frame_x( ) + *this\fs, *this\frame_y( ), *this\frame_width( ) - *this\fs * 2, *this\fs, *this\color\frame[\color\state] )
                     ; left&top
                     If gradient
                        BoxedGradient(*this\frame_x( ), *this\frame_y( ), *this\fs * 2, *this\fs * 2)
                     EndIf
                     draw_box_( *this\frame_x( ), *this\frame_y( ), *this\fs, *this\fs, *this\color\frame[\color\state] )
                     
                     ; right&top
                     If gradient
                        BoxedGradient(*this\frame_x( ) + *this\frame_width( ) - *this\fs * 2, *this\frame_y( ), *this\fs * 2, *this\fs * 2)
                     EndIf
                     draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs, *this\frame_y( ), *this\fs, *this\fs, *this\color\frame[\color\state] )
                  EndIf
                  
                  ; left
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\fs * 2, *this\frame_y( ) + *this\fs + ch, *this\frame_x( ) - *this\fs, *this\frame_y( ) + *this\fs + ch )
                  EndIf
                  draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\fs + ch, *this\fs, *this\frame_height( ) - *this\fs * 2 - ch, *this\color\frame[\color\state] )
                  ; right
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\frame_width( ) - *this\fs * 2, *this\frame_y( ) + *this\fs + ch, *this\frame_x( ) + *this\frame_width( ) + *this\fs, *this\frame_y( ) + *this\fs + ch )
                  EndIf
                  draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs, *this\frame_y( ) + *this\fs + ch, *this\fs, *this\frame_height( ) - *this\fs * 2 - ch, *this\color\frame[\color\state] )
                  ; bottom
                  If gradient
                     LinearGradient( *this\frame_x( ) + *this\fs, *this\frame_y( ) + *this\frame_height( ) - *this\fs * 2, *this\frame_x( ) + *this\fs, *this\frame_y( ) + *this\frame_height( ) + *this\fs )
                  EndIf
                  draw_box_( *this\frame_x( ) + *this\fs, *this\frame_y( ) + *this\frame_height( ) - *this\fs, *this\frame_width( ) - *this\fs * 2, *this\fs, *this\color\frame[\color\state] )
                  
                  ; left&bottom
                  If gradient
                     BoxedGradient(*this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs * 2, *this\fs * 2, *this\fs * 2)
                  EndIf
                  draw_box_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs, *this\fs, *this\fs, *this\color\frame[\color\state] )
                  
                  ; right&bottom
                  If gradient
                     BoxedGradient(*this\frame_x( ) + *this\frame_width( ) - *this\fs * 2, *this\frame_y( ) + *this\frame_height( ) - *this\fs * 2, *this\fs * 2, *this\fs * 2)
                  EndIf
                  draw_box_( *this\frame_x( ) + *this\frame_width( ) - *this\fs, *this\frame_y( ) + *this\frame_height( ) - *this\fs, *this\fs, *this\fs, *this\color\frame[\color\state] )
                  
               EndIf
            EndIf
            
            If *this\fs[2] Or (*this\fs > *this\round / 3 And *this\round) Or Not *this\round
               If *this\fs
                  drawing_mode_alpha_( #PB_2DDrawing_Default )
                  ; inner top
                  Line( *this\frame_x( ) + *this\fs + *this\fs[1], *this\frame_y( ) + *this\fs + *this\fs[2] - 1, *this\frame_width( ) - *this\fs[1] - *this\fs[3] - *this\fs * 2, 1, *this\color\frame[\color\state] )
                  ; inner left
                  Line( *this\frame_x( ) + *this\fs + *this\fs[1] - 1, *this\frame_y( ) + *this\fs + *this\fs[2] - 1, 1, *this\frame_height( ) - *this\fs[2] - *this\fs[4] - *this\fs * 2 + 1, *this\color\frame[\color\state] )
                  ; inner right
                  Line( *this\frame_x( ) + *this\frame_width( ) - *this\fs[3] - *this\fs, *this\frame_y( ) + *this\fs + *this\fs[2] - 1, 1, *this\frame_height( ) - *this\fs[2] - *this\fs[4] - *this\fs * 2 + 1, *this\color\frame[\color\state] )
                  ; inner bottom
                  Line( *this\frame_x( ) + *this\fs + *this\fs[1], *this\frame_y( ) + *this\frame_height( ) - *this\fs[4] - *this\fs, *this\frame_width( ) - *this\fs[1] - *this\fs[3] - *this\fs * 2, 1, *this\color\frame[\color\state] )
               EndIf
            Else
               If *this\round
                  drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\caption\color\back[\color\state] )
               EndIf
            EndIf
            
            If Not *this\round
               If *this\fs
                  If Not *this\fs[2]
                     ; frame top
                     Line( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), 1, *this\color\frame[\color\state] )
                  EndIf
                  ; frame bottom
                  Line( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - 1, *this\frame_width( ), 1, *this\color\frame[\color\state] )
                  ; frame left
                  Line( *this\frame_x( ), *this\frame_y( ) + *this\fs[2] - r, 1, *this\frame_height( ) - *this\fs[2] + r, *this\color\frame[\color\state] )
                  ; frame right
                  Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ) + *this\fs[2] - r, 1, *this\frame_height( ) - *this\fs[2] + r, *this\color\frame[\color\state] )
               ElseIf *this\fs[2]
                  ; frame left
                  Line( *this\frame_x( ), *this\frame_y( ) + *this\fs[2] - r, 1, r + *this\fs, *this\color\frame[\color\state] )
                  ; frame right
                  Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ) + *this\fs[2] - r, 1, r + *this\fs, *this\color\frame[\color\state] )
               EndIf
            EndIf
            
            ; then caption
            If *this\fs[2]
               ;                   ; Draw caption back
               ;                   If *this\caption\color\back
               ;                     drawing_mode_alpha_( #PB_2DDrawing_Gradient )
               ;                     draw_gradient_( 0, *this\caption, *this\caption\color\fore[\color\state], *this\caption\color\back[\color\state] )
               ;                   EndIf
               ;
               ;                   ; Draw caption frame
               ;                   If *this\fs
               ;                     drawing_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                     draw_roundbox_( *this\caption\x, *this\caption\y, *this\caption\width, *this\fs + *this\fs[2], *this\caption\round, *this\caption\round, *this\color\frame[\color\state] )
               ;
               ;                     ; erase the bottom edge of the frame
               ;                     drawing_mode_alpha_( #PB_2DDrawing_Gradient )
               ;                     BackColor( *this\caption\color\fore[\color\state] )
               ;                     FrontColor( *this\caption\color\back[\color\state] )
               ;
               ;                     ;Protected i
               ;                     For i = 0 To *this\caption\round
               ;                       Line( *this\inner_x( ) - *this\fs + 1, *this\frame_y( ) + (*this\fs + *this\fs[2] - *this\caption\round) + i - 2, *this\frame_width( ) - 2, 1, *this\caption\color\back[\color\state] )
               ;                     Next
               ;
               ;                     ; two edges of the frame
               ;                     drawing_mode_alpha_( #PB_2DDrawing_Outlined )
               ;                     Line( *this\frame_x( ), *this\frame_y( ) + *this\caption\round / 2 + 2, 1, caption_height - *this\caption\round / 2, *this\color\frame[\color\state] )
               ;                     Line( *this\frame_x( ) + *this\frame_width( ) - 1, *this\frame_y( ) + *this\caption\round / 2 + 2, 1, caption_height - *this\caption\round / 2, *this\color\frame[\color\state] )
               ;                   EndIf
               
               ; buttins background
               drawing_mode_alpha_( #PB_2DDrawing_Default )
               draw_box_button_( *this\CloseButton( ), color\back )
               draw_box_button_( *this\MaximizeButton( ), color\back )
               draw_box_button_( *this\MinimizeButton( ), color\back )
               draw_box_button_( *this\HelpButton( ), color\back )
               
               ; buttons image
               drawing_mode_alpha_( #PB_2DDrawing_Outlined )
               draw_close_button_( *this\CloseButton( ), 6 )
               draw_maximize_button_( *this\MaximizeButton( ), 4 )
               draw_minimize_button_( *this\MinimizeButton( ), 4 )
               draw_help_button_( *this\HelpButton( ), 4 )
               
               ; Draw image
               If *this\image\id
                  drawing_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawAlphaImage( *this\image\id,
                                  *this\frame_x( ) + *this\bs + *this\scroll_x( ) + *this\image\x,
                                  *this\frame_y( ) + *this\bs + *this\scroll_y( ) + *this\image\y - 2, *this\color\_alpha )
                  ; draw_background_image_(*this, *this\frame_x( ) + *this\bs, *this\frame_y( ) + *this\bs )
               EndIf
               
               If *this\Title( )\string
                  If *this\inner_height( )
                     ClipPut( *this, *this\caption\inner_x( ), *this\caption\inner_y( ), *this\caption_inner_width( ), *this\caption\inner_height( ) )
                  EndIf
                  
                  ; Draw string
                  If is_resize_( *this )
                     If *this\image\id
                        *this\Title( )\x = *this\caption\inner_x( ) + *this\Title( )\padding\x + *this\image\width + 10;\image\padding\x
                     Else
                        *this\Title( )\x = *this\caption\inner_x( ) + *this\Title( )\padding\x
                     EndIf
                     *this\Title( )\y = *this\caption\inner_y( ) + ( *this\caption\inner_height( ) - TextHeight( "A" )) / 2
                  EndIf
                  
                  drawing_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawText( *this\Title( )\x, *this\Title( )\y, *this\Title( )\string, *this\color\front[\color\state] & $FFFFFF | *this\color\_alpha << 24 )
                  
                  ;             drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                  ;             draw_roundbox_( *this\caption\inner_x( ), *this\caption\inner_y( ), *this\caption_inner_width( ), *this\caption\inner_height( ), *this\round, *this\round, $FF000000 )
                  If *this\inner_height( )
                     clip_output_( *this, [#__c_draw] )
                  EndIf
               EndIf
            EndIf
            
            ; background image draw
            If *this\image[#__image_background]\id
               draw_background_image_( *this, *this\inner_x( ), *this\inner_y( ), [#__image_background] )
            EndIf
            
            ;clip_output_( *this, [#__c_draw] )
            
            ; UnclipOutput( )
            ; drawing_mode_alpha_( #PB_2DDrawing_Outlined )
            ; draw_roundbox_( *this\frame_x( ),\frame_y( ),\frame_width( ),\frame_height( ), round,round,$ff000000 )
            ; draw_roundbox_( *this\inner_x( ),\inner_y( ),\inner_width( ),\inner_height( ), round,round,$ff000000 )
            
         EndWith
      EndProcedure
      
      Procedure ListIcon_Draw( *this._s_WIDGET )
         Protected state.b, x.l, y.l, scroll_x, scroll_y
         
         If Not *this\hide
            If *this\WidgetChange( ) = - 2 : *this\WidgetChange( ) = 1 : EndIf
            If *this\WidgetChange( ) = - 1 : *this\WidgetChange( ) = 1 : EndIf
            
            ;\\
            ForEach *this\columns( )
               *this\row\column = *this\columns( )\index
               update_items_( *this, *this\WidgetChange( ) )
            Next
            
            ;\\
            If *this\WidgetChange( ) > 0
               bar_area_update( *this )
               *this\WidgetChange( ) = - 2
            EndIf
            
            ;\\ SetState( scroll-to-see )
            If *this\FocusedRow( ) And *this\scroll\state = - 1
               row_scroll_y_( *this, *this\FocusedRow( ) )
               
               *this\scroll\v\WidgetChange( ) = 0
               *this\scroll\state             = #True
            EndIf
            
            ;\\
            If *this\WidgetChange( ) < 0
               ;\\ reset draw list
               ClearList( *this\VisibleRows( ))
               *this\VisibleFirstRow( ) = 0
               *this\VisibleLastRow( )  = 0
               
               ForEach *this\columns( )
                  *this\row\column = *this\columns( )\index
                  update_visible_items_( *this )
               Next
            EndIf
            
            ;\\ Draw background
            If *this\color\_alpha
               drawing_mode_alpha_( #PB_2DDrawing_Default )
               draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back);[*this\color\state] )
            EndIf
            
            ;\\ Draw background image
            If *this\image\id
               drawing_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *this\image\id, *this\image\x, *this\image\y, *this\color\_alpha )
               ; draw_background_image_(*this, 0,0)
            EndIf
            
            ;\\
            ForEach *this\columns( )
               *this\row\column             = *this\columns( )\index
               x                            = *this\frame_x( ) + *this\fs + *this\columns( )\x + *this\scroll_x( ) + *this\row\sublevelpos + *this\MarginLine( )\width
               y                            = *this\frame_y( ) + *this\fs + *this\columns( )\y
               *this\columns( )\text\height = *this\text\height
               *this\columns( )\text\y      = ( *this\columns( )\height - *this\columns( )\text\height ) / 2
               *this\columns( )\text\x      = *this\text\padding\x
               
               ;\\ Draw selector back
               If *this\color\back
                  drawing_mode_alpha_( #PB_2DDrawing_Default )
                  If *this\columns( )\index = 0
                     draw_roundbox_( *this\frame_x( ) + *this\fs + *this\columns( )\x + *this\scroll_x( ), y, *this\columns( )\width + *this\row\sublevelpos + *this\MarginLine( )\width, *this\columns( )\height, *this\round, *this\round, *this\color\frame )
                  Else
                     draw_roundbox_( x, y, *this\columns( )\width, *this\columns( )\height, *this\round, *this\round, *this\color\frame )
                  EndIf
               EndIf
               
               ;\\ Draw items image
               If *this\columns( )\image\id
                  drawing_mode_alpha_( #PB_2DDrawing_Transparent )
                  DrawAlphaImage( *this\columns( )\image\id, x + *this\columns( )\image\x, y + *this\columns( )\image\y, *this\color\_alpha )
                  ; draw_background_image_(*this\columns( ), x, y)
               EndIf
               
               ;\\ Draw items text
               If *this\columns( )\text\string.s
                  drawing_mode_( #PB_2DDrawing_Transparent )
                  DrawRotatedText( x + *this\columns( )\text\x, y + *this\columns( )\text\y, *this\columns( )\text\string.s, *this\text\rotate, *this\color\front )
               EndIf
               
               ;\\
               draw_items_( *this, *this\VisibleRows( ), *this\scroll\h\bar\page\pos, *this\scroll\v\bar\page\pos )
               
            Next
            
            ;\\ horizontal lines
            drawing_mode_alpha_( #PB_2DDrawing_Default )
            x = *this\frame_x( ) + *this\fs + *this\scroll_x( ) + *this\row\sublevelpos + *this\MarginLine( )\width
            ForEach *this\columns( )
               If *this\columns( )\index = 0
                  ; draw_box_( x + *this\columns( )\x, *this\frame_y( ), 1, *this\columns( )\height + *this\fs, $ff000000 )
                  draw_box_( x + *this\columns( )\x, *this\frame_y( ), 1, *this\frame_height( ), $ff000000 )
               EndIf
               draw_box_( x + *this\columns( )\x + *this\columns( )\width - 1, *this\frame_y( ), 1, *this\frame_height( ), $ff000000 )
            Next
         EndIf
         
      EndProcedure
      
      Procedure Button_Draw( *this._s_WIDGET )
         Protected x, y
         
         With *this
            Protected state
            If *this\type = #__type_Button Or
               *this\type = #__type_ButtonImage
               state = *this\color\state
               If *this\state
                  state = #__s_2
               EndIf
            EndIf
            
            ; update text
            If *this\WidgetChange( ) Or is_resize_( *this )
               Text_Update( *this )
            EndIf
            
            ;\\
            If *this\ImageChange( )
               *this\image\padding\x = *this\text\padding\x
               *this\image\padding\y = *this\text\padding\y
               
               ; make horizontal scroll max
               If *this\scroll_width( ) < *this\image\width + *this\image\padding\x * 2
                  *this\scroll_width( ) = *this\image\width + *this\image\padding\x * 2
               EndIf
               
               ; make vertical scroll max
               If *this\scroll_height( ) < *this\image\height + *this\image\padding\y * 2
                  *this\scroll_height( ) = *this\image\height + *this\image\padding\y * 2
               EndIf
               
               ; make horizontal scroll x
               make_scrollarea_x( *this, *this\image )
               
               ; make vertical scroll y
               make_scrollarea_y( *this, *this\image )
               
               
               set_align_x_( *this\image, *this\image, *this\scroll_width( ), 0 )
               set_align_y_( *this\image, *this\image, *this\scroll_height( ), 270 )
            EndIf
            
            ;\\
            If *this\type = #__type_Option Or
               *this\type = #__type_CheckBox
               
               ; update widget ( option&checkbox ) position
               If *this\WidgetChange( )
                  *this\StatusBox( )\y = *this\inner_y( ) + ( *this\inner_height( ) - *this\StatusBox( )\height ) / 2
                  
                  If *this\text\align\right
                     *this\StatusBox( )\x = *this\inner_x( ) + ( *this\inner_width( ) - *this\StatusBox( )\height - 3 )
                  ElseIf Not *this\text\align\left
                     *this\StatusBox( )\x = *this\inner_x( ) + ( *this\inner_width( ) - *this\StatusBox( )\width ) / 2
                     
                     If Not *this\text\align\top
                        If *this\text\rotate = 0
                           *this\StatusBox( )\y = *this\inner_y( ) + *this\scroll_y( ) - *this\StatusBox( )\height
                        Else
                           *this\StatusBox( )\y = *this\inner_y( ) + *this\scroll_y( ) + *this\scroll_height( )
                        EndIf
                     EndIf
                  Else
                     *this\StatusBox( )\x = *this\inner_x( ) + 3
                  EndIf
               EndIf
            EndIf
            
            
            ;\\ origin position
            x = *this\inner_x( ) + *this\scroll_x( )
            y = *this\inner_y( ) + *this\scroll_y( )
            
            ;\\ draw background
            If *this\image[#__image_background]\id
               ; background image draw
               draw_background_image_( *this, x, y, [#__image_background] )
            Else
               If *this\color\back <> - 1
                  If *this\color\fore <> - 1
                     drawing_mode_alpha_( #PB_2DDrawing_Gradient )
                     draw_gradient_( *this\text\vertical, *this, *this\color\fore[state], *this\color\back[state], [#__c_frame] )
                  Else
                     drawing_mode_alpha_( #PB_2DDrawing_Default )
                     draw_box( *this, color\back, [#__c_frame])
                  EndIf
               EndIf
            EndIf
            
            ;\\ draw text items
            If *this\text\string.s
               drawing_mode_alpha_( #PB_2DDrawing_Transparent )
               ForEach *this\__rows( )
                  DrawRotatedText( x + *this\__rows( )\x + *this\__rows( )\text\x, y + *this\__rows( )\y + *this\__rows( )\text\y,
                                   *this\__rows( )\text\String.s, *this\text\rotate, *this\color\front[state] ) ; *this\__rows( )\color\font )
                  
                  If *this\mode\Lines
                     Protected i, count = Bool( func::GetFontSize( *this\__rows( )\text\fontID ) > 13 )
                     For i = 0 To count
                        Line( x + *this\__rows( )\x + *this\__rows( )\text\x, y + *this\__rows( )\y + *this\__rows( )\text\y + *this\__rows( )\text\height - count + i - 1, *this\__rows( )\text\width, 1, *this\color\front[state] )
                     Next
                  EndIf
               Next
            EndIf
            
            ;\\ draw box
            Protected _box_type_, _box_x_, _box_y_
            If #__type_Option = *this\type
               _box_type_ = 1
            EndIf
            If #__type_CheckBox = *this\type
               _box_type_ = 3
            EndIf
            If _box_type_
               draw_button_( _box_type_, *this\StatusBox( )\x, *this\StatusBox( )\y, *this\StatusBox( )\width, *this\StatusBox( )\height, *this\state , *this\StatusBox( )\round );, *this\color )
            EndIf
            
            ;\\ draw image
            If *this\image\id
               drawing_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawAlphaImage( *this\image\id, x + *this\image\x, y + *this\image\y, *this\color\_alpha )
               ; draw_background_image_(*this, x,y)
            EndIf
            
            ;\\ Draw frames
            If *this\fs
               drawing_mode_( #PB_2DDrawing_Outlined )
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ),
                               *this\round, *this\round, *this\color\frame[state] & $FFFFFF | *this\color\_alpha << 24 )
            EndIf
            
            ;\\ draw frame defaul focus widget
            If *this\type = #__type_Button
               If *this\flag & #PB_Button_Default
                  drawing_mode_( #PB_2DDrawing_Outlined )
                  draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ),
                                  *this\round, *this\round, *this\color\frame[1] & $FFFFFF | *this\color\_alpha << 24 )
                  If *this\round
                     draw_roundbox_( *this\inner_x( ) - 1, *this\inner_y( ), *this\inner_width( ) + 2, *this\inner_height( ),
                                     *this\round, *this\round, *this\color\frame[1] & $FFFFFF | *this\color\_alpha << 24 )
                  EndIf
                  draw_roundbox_( *this\x, *this\y, *this\width, *this\height,
                                  *this\round, *this\round, *this\color\frame[1] & $FFFFFF | *this\color\_alpha << 24 )
               EndIf
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure Combobox_Draw( *this._s_WIDGET )
         Protected state
         Protected arrow_right
         
         state = *this\color\state
         If state = #__s_3
            state = 0
         EndIf
         
         *this\text\x = 5
         *this\text\y = ( *this\combobox\height - *this\text\height ) / 2
         
         ;
         If *this\StringBox( )
            drawing_mode_alpha_( #PB_2DDrawing_Gradient )
            draw_gradient_( 0, *this\combobox, *this\color\fore[*this\color\state], *this\color\back[state] )
            ; Editor_Draw( *this\StringBox( ) )
         Else
            drawing_mode_alpha_( #PB_2DDrawing_Gradient )
            draw_gradient_( *this\text\vertical, *this, *this\color\fore[*this\color\state], *this\color\back[state], [#__c_frame] )
            If *this\text\string
               drawing_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawText( *this\frame_x( ) + *this\text\x,
                         *this\frame_y( ) + *this\text\y,
                         *this\text\string, *this\color\front[state] & $FFFFFF | *this\color\_alpha << 24 )
            EndIf
         EndIf
         
         ;
         drawing_mode_alpha_( #PB_2DDrawing_Default )
         If *this\StringBox( )
            draw_arrows_( *this\combobox, *this\combobox\arrow\direction )
         Else
            Arrow( *this\combobox\x + ( *this\combobox\width - *this\combobox\arrow\size * 2 - 4 ),
                   *this\combobox\y + ( *this\combobox\height - *this\combobox\arrow\size ) / 2, *this\combobox\arrow\size, *this\combobox\arrow\direction,
                   *this\combobox\color\front[state] & $FFFFFF | *this\combobox\color\_alpha << 24, *this\combobox\arrow\type )
         EndIf
         
         ; frame draw
         If *this\fs
            drawing_mode_( #PB_2DDrawing_Outlined )
            draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\frame[state] )
         EndIf
         
         ;draw_box_( *this\combobox\x, *this\combobox\y, *this\combobox\width, *this\combobox\height, $ff000000 )
         
      EndProcedure
      
      Procedure Container_Draw( *this._s_WIDGET )
         Protected i
         
         With *this
            If *this\fs
               If *this\type <> #__type_panel And *this\type <> #__type_Frame
                  drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                  For i = 0 To *this\fs - 1
                     draw_roundbox_( *this\frame_x( ) + i, *this\frame_y( ) + i, *this\frame_width( ) - i * 2, *this\frame_height( ) - i * 2, *this\round, *this\round, *this\color\frame[*this\color\state] )
                     If *this\round
                        draw_roundbox_( *this\frame_x( ) + i, *this\frame_y( ) + i + 1, *this\frame_width( ) - i * 2, *this\frame_height( ) - i * 2 - 2, *this\round, *this\round, *this\color\frame[*this\color\state] )
                     EndIf
                  Next
               EndIf
            EndIf
            
            ;\\ backcolor
            drawing_mode_alpha_( #PB_2DDrawing_Default )
            If *this\fs
               draw_roundbox_( *this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back);[*this\color\state] )
            Else
               draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), *this\round, *this\round, *this\color\back);[*this\color\state] )
            EndIf
            
            ;\\
            If *this\image\id Or
               *this\image[#__image_background]\id
               
               If *this\ImageChange( ) <> 0
                  set_align_x_( *this\image, *this\image, *this\inner_width( ), 0 )
                  set_align_y_( *this\image, *this\image, *this\inner_height( ), 270 )
                  *this\ImageChange( ) = 0
               EndIf
               
               drawing_mode_alpha_( #PB_2DDrawing_Default )
               
               ;\\ background image draw
               If *this\image[#__image_background]\id
                  draw_background_image_( *this, *this\inner_x( ), *this\inner_y( ), [#__image_background] )
               EndIf
               
               ;\\ scroll image draw
               If *this\image\id
                  DrawAlphaImage( *this\image\id,
                                  *this\inner_x( ) + *this\scroll_x( ) + *this\image\x,
                                  *this\inner_y( ) + *this\scroll_y( ) + *this\image\y, *this\color\_alpha )
                  ; draw_background_image_(*this, *this\inner_x( ), *this\inner_y( ) )
               EndIf
            EndIf
            
            ;\\
            If *this\text\string
               drawing_mode_alpha_( #PB_2DDrawing_Transparent )
               DrawText( *this\inner_x( ) + *this\scroll_x( ) + *this\text\x,
                         *this\inner_y( ) + *this\scroll_y( ) + *this\text\y,
                         *this\text\string, *this\color\front[\color\state] & $FFFFFF | *this\color\_alpha << 24 )
            EndIf
            
            
            ;             If *this\type = #__type_panel
            ;                If *this\fs > 1
            ;                   draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\fs - 1, *this\round, *this\round, *this\color\frame[*this\color\state] )
            ;                   draw_roundbox_( *this\frame_x( ), *this\frame_y( ), *this\fs - 1, *this\frame_height( ), *this\round, *this\round, *this\color\frame[*this\color\state] )
            ;                   draw_roundbox_( *this\frame_x( ) + *this\frame_width( ) - *this\fs + 1, *this\frame_y( ), *this\fs - 1, *this\frame_height( ), *this\round, *this\round, *this\color\frame[*this\color\state] )
            ;                   draw_roundbox_( *this\frame_x( ), *this\frame_y( ) + *this\frame_height( ) - *this\fs + 1, *this\frame_width( ), *this\fs - 1, *this\round, *this\round, *this\color\frame[*this\color\state] )
            ;                EndIf
            ;             EndIf
            
         EndWith
      EndProcedure
      
      Procedure.b Draw( *this._s_WIDGET )
         Protected arrow_right
         
         With *this
            ;\\ draw belowe drawing
            If Not *this\hide
               ;\\ init drawing font
               draw_font_( *this )
               
               If *this\resize & #__reclip
                  *this\resize & ~ #__reclip
                  Reclip( *this )
               EndIf
               
               ;\\
               If *this\draw_width( ) > 0 And
                  *this\draw_height( ) > 0
                  
                  ;\\
                  If *this\disable = 1
                     *this\disable = - 1
                     
                     If *this\haschildren
                        Childrens( *this, 2 )
                     EndIf
                  EndIf
                  
                  ;\\ limit drawing boundaries
                  ;If Not *this\root\autosize ;?????
                  clip_output_( *this, [#__c_draw] )
                  ;EndIf
                  
                  ;\\ draw widgets
                  Select *this\type
                     Case #__type_Window : Window_Draw( *this )
                        
                     Case #__type_ComboBox : Combobox_Draw( *this )
                        
                     Case #__type_MDI : Container_Draw( *this )
                     Case #__type_Container : Container_Draw( *this )
                     Case #__type_ScrollArea : Container_Draw( *this )
                     Case #__type_Image : Container_Draw( *this )
                     Case #__type_Panel : Container_Draw( *this )
                        
                        
                     Case #__type_String : Editor_Draw( *this )
                     Case #__type_Editor : Editor_Draw( *this )
                        
                     Case #__type_Tree : Tree_Draw( *this )
                     Case #__type_Property : Tree_Draw( *this )
                     Case #__type_ListView : Tree_Draw( *this )
                     Case #__type_ListIcon : ListIcon_Draw( *this )
                        
                     Case #__type_Text : Button_Draw( *this )
                     Case #__type_Button : Button_Draw( *this )
                     Case #__type_ButtonImage : Button_Draw( *this )
                     Case #__type_Option : Button_Draw( *this )
                     Case #__type_CheckBox : Button_Draw( *this )
                     Case #__type_HyperLink : Button_Draw( *this )
                        
                        ; Draw frames
                     Case #__type_Frame
                        If *this\fs
                           
                           drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                           If *this\flag = #PB_Frame_Single
                              draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                              
                              draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ) + 1, *this\inner_height( ) + 1, *this\round, *this\round, $FFF5F5F5 )
                           ElseIf *this\flag = #PB_Frame_Double
                              draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                              
                              draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ) + 1, *this\inner_height( ) + 1, *this\round, *this\round, $FFF5F5F5 )
                              
                              draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, $FFAFAFAF )
                           ElseIf *this\flag = #PB_Frame_Flat
                              draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, $FFAAAAAA )
                           Else
                              draw_roundbox_(*this\inner_x( ) - 1, *this\inner_y( ) - 1, *this\inner_width( ) + 2, *this\inner_height( ) + 2, *this\round, *this\round, *this\color\frame )
                           EndIf
                           
                           drawing_mode_alpha_( #PB_2DDrawing_Default )
                           draw_roundbox_(*this\inner_x( ), *this\inner_y( ), *this\inner_width( ), *this\inner_height( ), *this\round, *this\round, *this\color\back )
                           
                        EndIf
                        
                        If *this\text\string
                           ;
                           drawing_mode_alpha_( #PB_2DDrawing_Default )
                           draw_roundbox_(*this\inner_x( ) + *this\scroll_x( ) + *this\text\x - 6,
                                          *this\inner_y( ) + *this\scroll_y( ) + *this\text\y + 1, *this\text\width + 12, *this\text\height, *this\round, *this\round, $BEEFEFEF )
                           
                           ;
                           drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                           draw_roundbox_(*this\inner_x( ) + *this\scroll_x( ) + *this\text\x - 6,
                                          *this\inner_y( ) + *this\scroll_y( ) + *this\text\y + 1, *this\text\width + 12, *this\text\height, *this\round, *this\round, *this\color\frame )
                           
                           ;
                           drawing_mode_alpha_( #PB_2DDrawing_Transparent )
                           DrawText( *this\inner_x( ) + *this\scroll_x( ) + *this\text\x,
                                     *this\inner_y( ) + *this\scroll_y( ) + *this\text\y,
                                     *this\text\string, *this\color\front & $FFFFFF | *this\color\_alpha << 24 )
                        EndIf
                        
                     Case #__type_Spin ,
                          #__type_TabBar, #__type_ToolBar,
                          #__type_TrackBar,
                          #__type_ScrollBar,
                          #__type_ProgressBar,
                          #__type_Splitter
                        
                        bar_draw( *this )
                  EndSelect
                  
                  ;\\
                  If *this\TabBox( ) And
                     *this\TabBox( )\count\items
                     bar_tab_draw( *this\TabBox( ) )
                     ; clip_output_( *this, [#__c_draw] )
                  EndIf
                  
                  ;\\
                  If *this\StringBox( )
                     Draw( *this\StringBox( ) )
                     clip_output_( *this, [#__c_draw] )
                  EndIf
                  
                  ;\\ draw area scrollbars
                  If *this\scroll And ( *this\scroll\v Or *this\scroll\h )
                     bar_area_draw_( *this )
                     ; clip_output_( *this, [#__c_draw] )
                  EndIf
                  
                  ;\\ draw disable state
                  If *this\disable
                     drawing_mode_alpha_( #PB_2DDrawing_Default )
                     draw_box_( *this\frame_x( ), *this\frame_y( ), *this\frame_width( ), *this\frame_height( ), $AAE4E4E4 )
                  EndIf
                  
                  ;\\
                  Send( *this, #__event_Draw )
               EndIf
               
               ;\\ test
               If *this\type
                  If *this\data And *this\container
                     drawing_mode_( #PB_2DDrawing_Transparent )
                     DrawText( *this\x + 10, *this\y + 10, Str( *this\data ), 0)
                  EndIf
               EndIf
               
               ;\\
               If *this\enter
                  ;\\ draw entered anchors
                  If *this\anchors And
                     *this\anchors\mode And
                     Not *this\haschildren
                     a_draw( *this )
                  EndIf
                  
                  ;\\ draw drag & drop
                  If mouse( )\drag And
                     Not *this\disable
                     
                     DropDraw( *this )
                  EndIf
               EndIf
               ;
               
               If test_clip And *this\parent
                  drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                  ;   draw_box_( *this\parent\draw_x( ), *this\parent\draw_y( ), *this\parent\draw_width( ), *this\parent\draw_height( ), $ff000000 )
                  draw_box_( *this\draw_x( ), *this\draw_y( ), *this\draw_width( ), *this\draw_height( ), $ff000000 )
               EndIf
            EndIf
            
            
            If test_scrollbars_draw And Not is_root_(*this)
               Debug "    Draw - " + *this\class
            EndIf
            
            
            ;\\
            ;             If Not *this\dragstart
            ;                If *this\resize <> 0
            ;                   *this\resize = 0
            ;                EndIf
            ;             EndIf
            
            ;\\ reset values
            If *this\WidgetChange( ) <> 0
               If Not *this\hide
                  *this\WidgetChange( ) = 0
               EndIf
            EndIf
            If *this\TextChange( ) <> 0
               *this\TextChange( ) = 0
            EndIf
            If *this\ImageChange( ) <> 0
               *this\ImageChange( ) = 0
            EndIf
            
            If *this\resize & #__resize_x
               *this\resize & ~ #__resize_x
            EndIf
            
            If *this\resize & #__resize_y
               *this\resize & ~ #__resize_y
            EndIf
            
            If *this\resize & #__resize_width
               *this\resize & ~ #__resize_width
            EndIf
            
            If *this\resize & #__resize_height
               *this\resize & ~ #__resize_height
            EndIf
            
         EndWith
      EndProcedure
      
      Procedure ReDraw( *root._s_ROOT )
         
         ;\\
         DrawingStart( *root\canvas\gadget )
         If Drawing( )
            If Not ( a_transform( ) And a_transform( )\grab )
               ;\\
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  ; good transparent canvas
                  FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ))
                  ;             CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
                  ;               FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), GetSysColor_(#COLOR_BTNFACE) )
               CompilerElse
                  ;               Protected *style.GtkStyle, *color.GdkColor
                  ;               *style = gtk_widget_get_style_(WindowID(*root\canvas\window))
                  ;               *color = *style\bg[0]                       ; 0=#GtkStateNormal
                  ;               FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), RGB(*color\red >> 8, *color\green >> 8, *color\blue >> 8) )
                  FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), $f0 )
               CompilerEndIf
               ; FillMemory( DrawingBuffer( ), DrawingBufferPitch( ) * OutputHeight( ), GetWindowColor(*root\canvas\window))
               
               ;\\
               Draw( *root )
               
               ;\\
               If Not ( *root\autosize And
                        *root\haschildren = 0 )
                  ;\\
                  PushListPosition( __widgets( ))
                  ForEach __widgets( )
                     If __widgets( )\root = *root
                        ;\\ begin draw all widgets except pressed-move-widget
                        If Not ( __widgets( )\dragstart And
                                 __widgets( )\resize )
                           
                           Draw( __widgets( ))
                           
                           ;\\ draw current focus frame
                           If GetActive( ) And
                              GetActive( )\focus And
                              GetActive( )\hide = 0 And
                              GetActive( ) = __widgets( )
                              
                              If GetActive( )\root = *root
                                 ; If Not GetActive( )\autosize
                                 If Not ( GetActive( )\anchors And
                                          GetActive( )\anchors\mode )
                                    UnclipOutput( )
                                    ; ;                                     ClipOutput( GetActive( )\parent\inner_x( ),
                                    ; ;                                                 GetActive( )\parent\inner_y( ),
                                    ; ;                                                 GetActive( )\parent\inner_width( ),
                                    ; ;                                                 GetActive( )\parent\inner_height( ) )
                                    ;
                                    ; ;                                     clip_output_( GetActive( )\parent, [#__c_draw] )
                                    
                                    drawing_mode_(#PB_2DDrawing_Outlined)
                                    If Not GetActive( )\fs
                                       draw_roundbox_( GetActive( )\x - 2, GetActive( )\y - 2, GetActive( )\width + 4, GetActive( )\height + 4, GetActive( )\round, GetActive( )\round, $ffff0000 )
                                    EndIf
                                    draw_roundbox_( GetActive( )\x - 1, GetActive( )\y - 1, GetActive( )\width + 2, GetActive( )\height + 2, GetActive( )\round, GetActive( )\round, $ffff0000 )
                                    If GetActive( )\fs
                                       draw_roundbox_( GetActive( )\x, GetActive( )\y, GetActive( )\width, GetActive( )\height, GetActive( )\round, GetActive( )\round, $ffff0000 )
                                    EndIf
                                 EndIf
                                 ; EndIf
                              EndIf
                           EndIf
                           
                        EndIf
                        
                        ;                            ;\\ draw current pressed-move-widget
                        ;                            If PressedWidget( ) And
                        ;                               PressedWidget( )\resize And
                        ;                               PressedWidget( )\dragstart And
                        ;                               PressedWidget( )\parent = __widgets( )\parent
                        ;
                        ;                               If PressedWidget( )\parent\LastWidget( ) = __widgets( )
                        ;                                  Draw( PressedWidget( ) )
                        ;                               EndIf
                        ;                            EndIf
                        
                        ;\\ draw current pressed-move-widget
                        If __widgets( ) = __widgets( )\parent\LastWidget( ) And
                           __widgets( )\parent <> __widgets( )\parent\LastWidget( )
                           Protected *widget._s_widget = __widgets( )\parent
                           
                           ;\\
                           If Not *widget\hide
                              If *widget\anchors And
                                 *widget\anchors\mode
                                 If *widget\enter
                                    clip_output_( *widget, [#__c_draw] )
                                    a_draw( *widget )
                                 EndIf
                              EndIf
                              
                              ;\\ UnclipOutput( )
                              If *widget\scroll\v And *widget\scroll\h
                                 clip_output_( *widget, [#__c_draw] )
                                 drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                                 
                                 ;\\ Scroll area coordinate
                                 draw_box_( *widget\inner_x( ) + *widget\scroll_x( ), *widget\inner_y( ) + *widget\scroll_y( ), *widget\scroll_width( ), *widget\scroll_height( ), $FF0000FF )
                                 
                                 ;\\
                                 draw_box_( *widget\scroll\h\frame_x( ) + *widget\scroll_x( ), *widget\scroll\v\frame_y( ) + *widget\scroll_y( ), *widget\scroll_width( ), *widget\scroll_height( ), $FF0000FF )
                                 
                                 ;\\ page coordinate
                                 draw_box_( *widget\scroll\h\frame_x( ), *widget\scroll\v\frame_y( ), *widget\scroll\h\bar\page\len, *widget\scroll\v\bar\page\len, $FF00FF00 )
                              EndIf
                           EndIf
                        EndIf
                        
                     EndIf
                  Next
                  
                  ;\\ draw clip out transform widgets frame
                  UnclipOutput( )
                  drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                  ForEach __widgets( )
                     If Not __widgets( )\parent\hide And __widgets( )\root = *root And
                        Not ( Not __widgets( )\hide And __widgets( )\draw_width( ) > 0 And __widgets( )\draw_height( ) > 0 )
                        
                        If is_child_( __widgets( ), __widgets( )\parent )
                           draw_roundbox_( __widgets( )\inner_x( ), __widgets( )\inner_y( ), __widgets( )\inner_width( ), __widgets( )\inner_height( ), __widgets( )\round, __widgets( )\round, $ff00ffff )
                        EndIf
                     EndIf
                  Next
                  
                  PopListPosition( __widgets( ))
               EndIf
            EndIf
            
            ;\\ draw current pressed-move-widget
            If PressedWidget( ) And
               PressedWidget( )\resize And
               PressedWidget( )\dragstart
               If PressedWidget( )\root = *root
                  If PressedWidget( )\parent
                     clip_output_( PressedWidget( )\parent, [#__c_draw] )
                  EndIf
                  Draw( PressedWidget( ) )
               EndIf
            EndIf
            
            ;             ;\\ draw current focus frame
            ;             If GetActive( ) And
            ;                GetActive( )\focus
            ;                If GetActive( )\root = *root
            ;                   ; If Not GetActive( )\autosize
            ;                   If Not ( GetActive( )\anchors And
            ;                            GetActive( )\anchors\mode )
            ;                      UnclipOutput( )
            ;                      drawing_mode_(#PB_2DDrawing_Outlined)
            ;                      draw_roundbox_( GetActive( )\x - 1, GetActive( )\y - 1, GetActive( )\width + 2, GetActive( )\height + 2, GetActive( )\round, GetActive( )\round, $ffff0000 )
            ;                      draw_roundbox_( GetActive( )\x, GetActive( )\y, GetActive( )\width, GetActive( )\height, GetActive( )\round, GetActive( )\round, $ffff0000 )
            ;                   EndIf
            ;                   ; EndIf
            ;                EndIf
            ;             EndIf
            
            ;\\ draw anchors (movable & sizable)
            If a_transform( ) 
               ;\\
               If a_focused( ) And
                  a_focused( )\anchors And
                  a_focused( )\hide = 0 And
                  a_focused( )\anchors And
                  a_focused( )\anchors\mode And
                  a_focused( )\root = *root
                  
                  ; draw key-focused-widget anchors
                  If a_main( ) 
                     clip_output_( a_main( ), [#__c_draw2] )
                  EndIf
                  ;
                  a_draw( a_focused( ) )
               EndIf
               
               ;\\
               If a_main( ) And
                  a_main( )\root = *root
                  ;
                  If a_transform( )\grab
                     ;\\ draw grab background
                     drawing_mode_alpha_( #PB_2DDrawing_Default )
                     DrawImage( ImageID( a_transform( )\grab ), 0, 0 )
                     ;
                     If Not a_transform( )\type
                        CustomFilterCallback( @Draw_Datted( ))
                     EndIf
                     Protected selector_backcolor = a_transform( )\selectorbackcolor & $FFFFFF | 100 << 24,
                               selector_framecolor = a_transform( )\selectorframecolor, selector_frontcolor = selector_framecolor
                     ;
                     ;\\ draw mouse selected widget anchors
                     If selector_backcolor
                        draw_box_( a_selector( )\x, a_selector( )\y, a_selector( )\width, a_selector( )\height, selector_backcolor )
                     EndIf
                     ;
                     If a_transform( )\type
                        DrawText( a_selector( )\x + 3, a_selector( )\y + 1, Str( a_selector( )\width ) + "x" + Str( a_selector( )\height ), selector_frontcolor, selector_backcolor )
                        ;
                        If selector_framecolor
                           drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                           draw_box_( a_selector( )\x, a_selector( )\y, a_selector( )\width, a_selector( )\height, selector_framecolor )
                        EndIf
                     Else
                        drawing_mode_alpha_( #PB_2DDrawing_CustomFilter | #PB_2DDrawing_Outlined )
                        draw_box_( a_selector( )\x, a_selector( )\y, a_selector( )\width, a_selector( )\height, selector_framecolor )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ draw current-popup-widget
            If Popup( ) = *root
               If Popup( )\widget
                  ;Debug "popup - draw " + *root\class
                  
                  Draw( Popup( )\widget )
               EndIf
            EndIf
            
            ;\\ temp
            If test_buttons_draw
               If EnteredButton( ) And
                  EnteredWidget( ) And
                  EnteredWidget( )\bar And
                  EnteredWidget( )\root = *root And
                  EnteredWidget( )\enter And
                  ( EnteredWidget( )\bar\button = EnteredButton( ) Or
                    EnteredWidget( )\bar\button[1] = EnteredButton( ) Or
                    EnteredWidget( )\bar\button[2] = EnteredButton( ) )
                  
                  UnclipOutput( )
                  ;Debug ""+EnteredButton( ) +" "+ EnteredButton( )\x +" "+ EnteredButton( )\y +" "+ EnteredButton( )\width +" "+ EnteredButton( )\height
                  drawing_mode_alpha_( #PB_2DDrawing_Outlined )
                  If EnteredButton( )\disable
                     draw_box_( EnteredButton( )\x, EnteredButton( )\y, EnteredButton( )\width, EnteredButton( )\height, $ff0000ff )
                  Else
                     draw_box_( EnteredButton( )\x, EnteredButton( )\y, EnteredButton( )\width, EnteredButton( )\height, $ffff0000 )
                  EndIf
               EndIf
            EndIf
            
            ;\\
            DrawingStop( )
         EndIf
         
         ProcedureReturn *root
      EndProcedure
      
      ;-
      Procedure.i Send( *this._s_ROOT, eventtype.l, *button = #PB_All, *data = #Null )
         Protected result, function, __widget = #Null, __type = #PB_All, __item = #PB_All, __data = #Null
         
         If *this > 0
            If __gui\repost >= 0
               If __gui\repost = 0
                  Post( *this, eventtype, *button, *data )
                  
               Else
                  If *this And *this\child
                     If Popup( ) And Popup( )\widget
                        *this = Popup( )\parent
                     EndIf
                  EndIf
                  
                  ;\\
                  __widget = WidgetEvent( )\widget
                  __type   = WidgetEvent( )\type
                  __item   = WidgetEvent( )\item
                  __data   = WidgetEvent( )\data
                  
                  ;\\
                  WidgetEvent( )\widget = *this
                  WidgetEvent( )\type   = eventtype
                  WidgetEvent( )\item   = *button
                  WidgetEvent( )\data   = *data
                  
                  
                  ; Debug "send - "+*this\class +" "+ ClassFromEvent(eventtype) +" "+ *button +" "+ *data
                  
                  ;\\ scrollbar
                  If *this\type = #__type_scrollBar
                     ; *this\bar\PageChange( ) = *data
                  EndIf
                  ;
                  ;\\
                  If Not is_root_( *this )
                     ;\\ first call (current-widget) bind event function
                     If ListSize( *this\events( ) )
                        ForEach *this\events( )
                           If ( *this\events( )\type = #PB_All Or *this\events( )\type = eventtype ) And
                              ( *this\events( )\item = #PB_All Or *this\events( )\item = *button )
                              
                              function = *this\events( )\function( )
                              If function
                                 result = function
                              EndIf
                              Break
                           EndIf
                        Next
                     EndIf
                     
                     ;\\ second call (current-widget-window) bind event function
                     If function <> #PB_Ignore
                        If *this\window And
                           ListSize( *this\window\events( ) ) And
                           Not is_window_( *this ) And Not is_root_(*this\window )
                           
                           ForEach *this\window\events( )
                              If ( *this\window\events( )\type = #PB_All Or *this\window\events( )\type = eventtype ) And
                                 ( *this\window\events( )\item = #PB_All Or *this\window\events( )\item = *button )
                                 
                                 function = *this\window\events( )\function( )
                                 If Not result
                                    If function
                                       result = function
                                    EndIf
                                 EndIf
                                 Break
                              EndIf
                           Next
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ theard call (current-widget-root) bind event function
                  If function <> #PB_Ignore
                     If *this\root And
                        ListSize( *this\root\events( ) )
                        ForEach *this\root\events( )
                           If ( *this\root\events( )\type = #PB_All Or *this\root\events( )\type = eventtype ) And
                              ( *this\root\events( )\item = #PB_All Or *this\root\events( )\item = *button )
                              
                              function = *this\root\events( )\function( )
                              If Not result
                                 If function
                                    result = function
                                 EndIf
                              EndIf
                              Break
                           EndIf
                        Next
                     EndIf
                  EndIf
                  
                  ;\\
                  If eventtype = #__event_Close
                     If result <> #PB_Ignore
                        Select result
                           Case - 1
                              If is_root_( *this ) Or
                                 is_window_( *this )
                                 Close( #PB_All )
                              EndIf
                              
                           Case 1
                              If *button >= 0
                                 If Not IsWindow( *button )
                                    Close( Root( ) )
                                 EndIf
                              EndIf
                              
                           Case 0
                              If *button >= 0 And
                                 *button = *data
                                 Close( #PB_All )
                              Else
                                 Close( *this )
                              EndIf
                              
                        EndSelect
                     EndIf
                  EndIf
                  
                  ;\\ scrollbar
                  If *this\type = #__type_scrollBar
                     If *this\bar\PageChange( ) <> 0
                        *this\bar\PageChange( ) = 0
                     EndIf
                  EndIf
                  
                  ;\\ если это оставить то после вызова функции напр setState( ) получается EventWidget( ) будеть равно #Null
                  WidgetEvent( )\widget = __widget
                  WidgetEvent( )\type   = __type
                  WidgetEvent( )\item   = __item
                  WidgetEvent( )\data   = __data
               EndIf
            EndIf
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      Procedure.i Post( *this._s_WIDGET, eventtype.l, *button = #PB_All, *data = #Null )
         If *this > 0
            If *this And *this\child
               If Popup( ) And Popup( )\widget
                  *this = Popup( )\parent
               EndIf
            EndIf
            
            ; Debug "post - "+*this\class +" "+ ClassFromEvent(eventtype)
            If __gui\repost = 1
               __gui\repost =  - 1
            EndIf
            
            If AddElement( __events( ) )
               __events( )        = AllocateStructure( _s_EVENTDATA )
               __events( )\widget = *this
               __events( )\type   = eventtype
               __events( )\item   = *button
               __events( )\data   = *data
               ProcedureReturn __events( )
            EndIf
         EndIf
      EndProcedure
      
      Procedure.i Bind( *this._s_WIDGET, *callback, eventtype.l = #PB_All, item.l = #PB_All )
         ;
         If *this = #PB_All
            PushMapPosition(__roots( ))
            ForEach __roots( )
               Bind( __roots( ), *callback, eventtype, item )
            Next
            PopMapPosition(__roots( ))
            ProcedureReturn #PB_All
         EndIf
         
         ;
         If *this > 0
            *this\event = 1
            ; is bind event callback
            ForEach *this\events( )
               If *this\events( )\function = *callback And
                  *this\events( )\type = eventtype And
                  *this\events( )\item = item
                  ProcedureReturn *this\events( )
               EndIf
            Next
            
            ;
            LastElement( *this\events( ))
            If AddElement( *this\events( ))
               *this\events( )          = AllocateStructure( _s_EVENT )
               *this\events( )\function = *callback
               *this\events( )\type     = eventtype
               *this\events( )\item     = item
               ProcedureReturn 1
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure.i Unbind( *this._s_WIDGET, *callback, eventtype.l = #PB_All, item.l = #PB_All )
         
         If *this = #PB_All
            PushMapPosition(__roots( ))
            ForEach __roots( )
               UnBind( __roots( ), *callback, eventtype, item )
            Next
            PopMapPosition(__roots( ))
            ProcedureReturn #PB_All
         EndIf
         
         If *this > 0
            If ListSize( *this\events( ) )
               ForEach *this\events( )
                  If *this\events( )\function = *callback And
                     *this\events( )\type = eventtype And
                     *this\events( )\item = item
                     DeleteElement( *this\events( ) )
                     Break
                  EndIf
               Next
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Procedure GetAtPoint( *root._s_ROOT, mouse_x, mouse_y )
         Protected i, a_index, Repaint, *this._s_WIDGET, *e._s_WIDGET
         
         ;\\ get at point address
         If Popup( ) = *root
            If Popup( )\widget
               *this = Popup( )\widget
            EndIf
         Else
            If *root\haschildren
               ; If ListSize( __widgets( ))
               LastElement( __widgets( ))
               Repeat
                  If __widgets( )\address And
                     __widgets( )\hide = 0 And
                     __widgets( )\root = *root And 
                     is_atpoint_( __widgets( ), mouse_x, mouse_y, [#__c_frame] ) And
                     is_atpoint_( __widgets( ), mouse_x, mouse_y, [#__c_draw] )
                     ;
                     ;\\ get alpha
                     If __widgets( )\anchors = 0 And
                        ( __widgets( )\image[#__image_background]\id And
                          __widgets( )\image[#__image_background]\depth > 31 And
                          is_atpoint_( __widgets( ), mouse_x, mouse_y, [#__c_inner] ) And
                          StartDrawing( ImageOutput( __widgets( )\image[#__image_background]\img )))
                        
                        drawing_mode_( #PB_2DDrawing_AlphaChannel )
                        If Not Alpha( Point( ( mouse( )\x - __widgets( )\inner_x( ) ) - 1,
                                             ( mouse( )\y - __widgets( )\inner_y( ) ) - 1 ) )
                           StopDrawing( )
                           Continue
                        Else
                           StopDrawing( )
                        EndIf
                     EndIf
                     
                     ;\\ если переместили виджет то его исключаем
                     If __widgets( )\dragstart And
                        __widgets( )\resize
                        Continue
                     EndIf
                     
                     *this = __widgets( )
                     Break
                  EndIf
               Until PreviousElement( __widgets( )) = #False
               ;EndIf
            EndIf
         EndIf
         
         ;\\ root no enumWidget
         If Not *this
            If is_atpoint_( *root, mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *root, mouse_x, mouse_y, [#__c_draw] )
               *this = *root
            EndIf
         EndIf
         
         ;\\ is integral
         If *this
            ;\\ is integral scroll bar's
            If *this\scroll
               If *this\scroll\v And Not *this\scroll\v\hide And
                  is_atpoint_( *this\scroll\v, mouse_x, mouse_y, [#__c_frame] ) And
                  is_atpoint_( *this\scroll\v, mouse_x, mouse_y, [#__c_draw] )
                  *this = *this\scroll\v
               EndIf
               If *this\scroll\h And Not *this\scroll\h\hide And
                  is_atpoint_( *this\scroll\h, mouse_x, mouse_y, [#__c_frame] ) And
                  is_atpoint_( *this\scroll\h, mouse_x, mouse_y, [#__c_draw] )
                  *this = *this\scroll\h
               EndIf
            EndIf
            
            ;\\ is integral tab bar
            If *this\TabBox( ) And Not *this\TabBox( )\hide And
               is_atpoint_( *this\TabBox( ), mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *this\TabBox( ), mouse_x, mouse_y, [#__c_draw] )
               *this = *this\TabBox( )
            EndIf
            
            ;\\ is integral string bar
            If *this\StringBox( ) And Not *this\StringBox( )\hide And
               is_atpoint_( *this\StringBox( ), mouse_x, mouse_y, [#__c_frame] ) And
               is_atpoint_( *this\StringBox( ), mouse_x, mouse_y, [#__c_draw] )
               *this = *this\StringBox( )
            EndIf
         EndIf
         
         ;\\ entered anchor index
         If Not mouse( )\press
            If a_entered( ) And 
               a_entered( )\anchors And
               a_entered( )\root = *root
               ;
               If a_enter( a_entered( ), - 3 )
                  If ( *this And a_entered( )\index < *this\index ) And 
                     Not ( a_transform( ) And a_focused( ) = a_entered( ) )
                     ;
                     a_index( ) = 0
                     a_show( *this )
                  Else
                     *this = a_entered( ) 
                  EndIf
               EndIf
            EndIf
            ;
            If Not a_index( )
               If *this And
                  *this <> a_entered( )
                  ;
                  If *this\child And 
                     *this\parent And 
                     *this\parent\enter > 0
                     ;
                     DoEvents( *this\parent, #__event_MouseLeave )
                  EndIf
                  ;
                  If a_show( *this )
                     ; Debug "SHOW "+a_index( ) +" "+ a_entered( )\class +" "+ a_entered( )\enter 
                  EndIf
               EndIf
            EndIf  
         EndIf
         
         ;\\
         If a_index( )
            If a_entered( ) And 
               a_entered( )\anchors\id[a_index( )] And
               a_entered( )\anchors\id[a_index( )]\state
               ;
               If mouse( )\press And Not a_entered( )\dragstart
                  ;
                  If *this          <> a_entered( ) 
                     *this           = a_entered( )
                     LeavedWidget( ) = *this
                  EndIf
               EndIf
            EndIf
            
            ;\\
            ; If Not mouse( )\press
            If EnteredButton( )
               If Leaved( EnteredButton( ) )
                  *this\root\repaint = #True
               EndIf
               EnteredButton( ) = #Null
            EndIf
            ; EndIf
         EndIf
         
         ;\\ reset
         If LeavedWidget( ) And
            LeavedWidget( ) <> *this
            ; Debug " leave "+LeavedWidget( )\class
            
            ;             ;\\
            ;             If LeavedWidget( )\tab
            ;                If LeavedWidget( )\EnteredTab( ) And
            ;                   Leaved( LeavedWidget( )\EnteredTab( ) )
            ;                   LeavedWidget( )\EnteredTab( ) = 0
            ;                   LeavedWidget( )\root\repaint  = 1
            ;                EndIf
            ;             EndIf
            
            If EnteredButton( )
               If Leaved( EnteredButton( ) )
                  LeavedWidget( )\root\repaint = #True
               EndIf
               EnteredButton( ) = #Null
            EndIf
            
         EndIf
         
         If *this
            If Not a_index( )
               ;             If *this\row
               ;                If *this\type = #__type_Editor Or
               ;                   *this\type = #__type_string
               ;
               ;                   DoEvent_Lines( *this, #__event_MouseMove, mouse_x, mouse_y )
               ;                Else
               ;                   DoEvent_Items( *this, #__event_MouseMove, mouse_x, mouse_y )
               ;                EndIf
               ;             EndIf
               
               If Not mouse( )\press
                  ;\\
                  DoEvent_Button( *this, #__event_MouseMove, mouse_x, mouse_y )
                  
                  ;                   ;\\
                  ;                   If *this\tab
                  ;                      DoEvent_Tab( *this, #__event_MouseMove, mouse_x, mouse_y )
                  ;                   EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ do events entered & leaved
         If LeavedWidget( ) <> *this
            EnteredWidget( ) = *this
            
            ;\\ если оставлять событие вход/выход нажатого виджета
            If LeavedWidget( ) And LeavedWidget( )\enter > 0 And
               Not ( LeavedWidget( )\dragstart And LeavedWidget( )\resize ) ;And
                                                                            ;                Not ( *this And *this\child And *this\parent = LeavedWidget( ) And 
                                                                            ;                      is_atpoint_( LeavedWidget( ), mouse_x, mouse_y, [#__c_frame] ) And
                                                                            ;                      is_atpoint_( LeavedWidget( ), mouse_x, mouse_y, [#__c_draw] ))
                                                                            ;
               If mouse( )\drag And
                  is_scrollbars_( LeavedWidget( ) )
                  LeavedWidget( )\parent\enter = 0
               EndIf
               ;
               LeavedWidget( )\enter = 0
               DoEvents( LeavedWidget( ), #__event_MouseLeave )
               ;
               If LeavedWidget( )\child And
                  LeavedWidget( )\parent And 
                  LeavedWidget( )\parent\frame_enter( ) And
                  Not Bool( is_atpoint_( LeavedWidget( )\parent, mouse_x, mouse_y, [#__c_frame] ) And
                            is_atpoint_( LeavedWidget( )\parent, mouse_x, mouse_y, [#__c_draw] )) 
                  ;
                  LeavedWidget( )\parent\enter = 0
               EndIf
               ;
               If Not is_interact_row_( LeavedWidget( ) )
                  If Not a_transformer( LeavedWidget( ) )
                     If Not IsChild( *this, LeavedWidget( ) )
                        If Not is_root_( LeavedWidget( ) )
                           If LeavedWidget( )\address
                              ChangeCurrentElement( __widgets( ), LeavedWidget( )\address )
                              Repeat
                                 If __widgets( )\haschildren And __widgets( )\enter <> 0
                                    If is_atpoint_( __widgets( ), mouse_x, mouse_y, [#__c_draw] )
                                       If Not ( *this And *this\index > __widgets( )\index )
                                          Break
                                       EndIf
                                    EndIf
                                    ;
                                    If Not is_interact_row_( __widgets( ) ) And
                                       IsChild( LeavedWidget( ), __widgets( )) And
                                       Not IsChild( *this, __widgets( ))
                                       ;
                                       __widgets( )\enter = 0
                                       ;
                                       If Not __widgets( )\anchors
                                          DoEvents( __widgets( ), #__event_StatusChange, -1, - 1 )
                                       EndIf
                                    EndIf
                                 EndIf
                              Until Not PreviousElement( __widgets( ))
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If *this And Not a_index( ) And 
               *this\enter = 0
               *this\enter = 1
               ;
               DoEvents( *this, #__event_MouseEnter )
               ;
               If mouse( )\drag And
                  is_scrollbars_( *this )
                  *this\parent\enter = 1
               EndIf
               ;
               If Not is_interact_row_( *this )
                  If Not a_transformer( *this )
                     If Not *this\bounds\attach
                        If *this\address
                           ForEach __widgets( )
                              If __widgets( ) = *this
                                 Break
                              EndIf
                              ;
                              If __widgets( )\haschildren And __widgets( )\enter = 0
                                 If Not is_interact_row_( __widgets( ) )
                                    If IsChild( *this, __widgets( ))
                                       ;
                                       __widgets( )\frame_enter( )
                                       ;
                                       If Not __widgets( )\anchors
                                          DoEvents( __widgets( ), #__event_StatusChange, -1, 1 )
                                       EndIf
                                    EndIf
                                 EndIf
                              EndIf
                           Next
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            LeavedWidget( ) = *this
         EndIf
         
         ;\\
         If Not mouse( )\press
            If Not a_index( )
               If a_entered( ) And *this = a_entered( ) And 
                  a_entered( )\frame_enter( )
                  ;
                  If ( is_atpoint_( a_entered( ), mouse( )\x, mouse( )\y, [#__c_frame] ) And
                       is_atpoint_( a_entered( ), mouse( )\x, mouse( )\y, [#__c_draw] ))
                     ;
                     a_entered( )\enter = 1
                     DoEvents( a_entered( ), #__event_MouseEnter )
                  Else
                     ;
                     a_entered( )\enter = 0
                     do_cursor_( a_entered( ), a_entered( )\cursor, - 4 )
                  EndIf   
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure DoEvent_RowTimerEvents( )
         ; Debug "  timer"
         Protected result
         Protected scroll_x, scroll_y
         Protected *this._s_WIDGET = PressedWidget( )
         
         If *this
            If *this\root <> Root( )
               mouse( )\x = CanvasMouseX( *this\root\canvas\gadget )
               mouse( )\y = CanvasMouseY( *this\root\canvas\gadget )
            EndIf
            
            If Not is_inside_( *this\y[#__c_inner], *this\height[#__c_inner], mouse( )\y ) And *this\scroll\v
               If mouse( )\y < mouse( )\delta\y
                  If Not bar_in_start_( *this\scroll\v\bar )
                     scroll_y = mouse( )\y - ( *this\inner_y( ) )
                     bar_SetState( *this\scroll\v, *this\scroll\v\bar\page\pos + scroll_y )
                     Text_Update( *this )
                     ReDraw( *this\root )
                     Debug "scroll v top " + scroll_y + " " + *this\VisibleFirstRow( )\index
                     
                  Else
                     ; Debug "scroll v stop top"
                  EndIf
               ElseIf mouse( )\y > mouse( )\delta\y
                  If Not bar_in_stop_( *this\scroll\v\bar )
                     scroll_y = 400;mouse( )\y - ( *this\inner_y( ) + *this\inner_height( ) )
                                   ;bar_SetState( *this\scroll\v, *this\scroll\v\bar\page\pos + scroll_y )
                                   ;Text_Update( *this )
                                   ;ReDraw(   *this\root )
                     Debug "scroll v bottom " + scroll_y + " " + *this\VisibleLastRow( )\index
                     
                     ;               If *this\FocusedRow( ) <> *this\VisibleLastRow( )
                     ;                 ;                 If *this\EnteredRow( )
                     ;                 ;                   *this\EnteredRow( )\enter = 0
                     ;                 ;                   *this\EnteredRow( )\color\state = 0
                     ;                 ;                 EndIf
                     ;                 ;                 *this\EnteredRow( ) = *this\VisibleLastRow( )
                     ;                 ;                 *this\EnteredRow( )\enter = 1
                     ;                 ;                 *this\EnteredRow( )\color\state = 1
                     ;
                     ;                 If *this\FocusedRow( )
                     ;                   ; Debug "scroll v bottom "+ scroll_y +" "+ *this\VisibleLastRow( )\index +" "+ *this\FocusedRow( )\index
                     ;                   *this\FocusedRow( )\focus = 0
                     ;                   *this\FocusedRow( )\color\state = 0
                     ;                 EndIf
                     ;
                     ;                 ; edit_sel__( *this, *this\VisibleLastRow( ), *this\PressedLine( ), *this\FocusedRow( ), 0, *this\FocusedRow( )\text\len )
                     ;                 *this\FocusedRow( ) = *this\VisibleLastRow( )
                     ;                 ;*this\FocusedRow( ) = SelectElement( *this\__rows( ), *this\VisibleLastRow( )\index )
                     ;                 *this\FocusedRow( )\focus = 1
                     ;                 *this\FocusedRow( )\color\state = 1
                     ;                 *this\FocusedRow( )\root\repaint = 1
                     ;
                     ;                 Debug *this\FocusedRow( )\index
                     ;                 edit_set_sel_( *this, *this\FocusedRow( ), *this\PressedLine( ) )
                     ;
                     ;                 *this\root\repaint = 1
                     ;               EndIf
                     
                     ;                 result = 1
                  Else
                     ; Debug "scroll v stop bottom"
                  EndIf
               EndIf
            EndIf
            
            If Not is_inside_( *this\inner_x( ), *this\inner_width( ), mouse( )\x ) And *this\scroll\h
               If mouse( )\x < mouse( )\delta\x
                  If Not bar_in_start_( *this\scroll\h\bar )
                     scroll_x = mouse( )\x - ( *this\inner_x( ) )
                     Debug "scroll h top " + scroll_x
                     bar_SetState( *this\scroll\h, *this\scroll\h\bar\page\pos + scroll_x )
                     result = 1
                  Else
                     ; Debug "scroll h stop top"
                  EndIf
               ElseIf mouse( )\x > mouse( )\delta\x
                  If Not bar_in_stop_( *this\scroll\h\bar )
                     scroll_x = mouse( )\x - ( *this\inner_x( ) + *this\inner_height( ) )
                     Debug "scroll h bottom " + scroll_x
                     bar_SetState( *this\scroll\h, *this\scroll\h\bar\page\pos + scroll_x )
                     result = 1
                  Else
                     ; Debug "scroll h stop bottom"
                  EndIf
               EndIf
            EndIf
            
            If result = 1
               ;Debug 888
               ;           ReDraw(   *this\root )
               ; If Not *this\anchors
               ;   DoEvents( *this, #__event_StatusChange )
               ; EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure DoEvent_Lines( *this._s_WIDGET, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
         Protected repaint, *item._s_ROWS
         mouse_x - *this\inner_x( )
         mouse_y - *this\inner_y( ) - *this\scroll_y( )
         
         ;
         If *this\row
            ;         If PressedWidget( ) And PressedWidget( )\press And (mouse( )\drag And mouse( )\drag\private) Or Not ( PressedWidget( )\row  )
            ;           ;Debug "disable items redraw"
            ;           ProcedureReturn 0
            ;         EndIf
            
            ;
            If eventtype = #__event_Focus
               PushListPosition( *this\__rows( ) )
               ForEach *this\__rows( )
                  If *this\__rows( )\focus
                     If *this\__rows( )\color\state = #__s_3
                        *this\__rows( )\color\state = #__s_2
                        
                        *this\root\repaint = #True
                     EndIf
                  EndIf
               Next
               PopListPosition( *this\__rows( ) )
            EndIf
            
            ;
            If eventtype = #__event_LostFocus
               PushListPosition( *this\__rows( ) )
               ForEach *this\__rows( )
                  If *this\__rows( )\focus
                     If *this\__rows( )\color\state = #__s_2
                        *this\__rows( )\color\state = #__s_3
                        
                        *this\root\repaint = #True
                     EndIf
                  EndIf
               Next
               PopListPosition( *this\__rows( ) )
            EndIf
            
            ;
            If eventtype = #__event_Down
               If mouse( )\buttons & #PB_Canvas_LeftButton
                  If *this\EnteredLine( )
                     *this\PressedLine( ) = *this\EnteredLine( )
                     
                     If *this\PressedLine( )\press = #False
                        *this\PressedLine( )\press = #True
                     EndIf
                     
                     If *this\FocusedLine( ) <> *this\EnteredLine( )
                        PushListPosition( *this\__rows( ) )
                        ForEach *this\__rows( )
                           If *this\__rows( )\focus <> #False
                              *this\__rows( )\focus = #False
                           EndIf
                           
                           If *this\__rows( )\color\state <> #__s_0
                              *this\__rows( )\color\state = #__s_0
                           EndIf
                        Next
                        PopListPosition( *this\__rows( ) )
                        
                        *this\FocusedLine( )      = *this\EnteredLine( )
                        *this\FocusedLineIndex( ) = *this\FocusedLine( )\index
                        
                        If *this\FocusedLine( )\focus = #False
                           *this\FocusedLine( )\focus = #True
                        EndIf
                        *this\FocusedLine( )\color\state = #__s_2
                     EndIf
                     
                     
                     If mouse( )\click = 1
                        *this\edit_caret_0( ) = edit_caret_( *this )
                        ;Debug *this\edit_caret_0( )
                        
                        If *this\edit_caret_1( ) <> *this\edit_caret_0( ) + *this\EnteredLine( )\text\pos
                           *this\edit_caret_1( ) = *this\edit_caret_0( ) + *this\EnteredLine( )\text\pos
                           *this\edit_caret_2( ) = *this\edit_caret_1( )
                           
                           *this\PressedLineIndex( )            = *this\EnteredLine( )\index ;????
                           *this\EnteredLine( )\edit_caret_1( ) = *this\edit_caret_1( ) - *this\EnteredLine( )\text\pos
                           
                           ;
                           edit_sel_reset_( *this )
                           
                           edit_sel_row_text_( *this, *this\EnteredLine( ) )
                           edit_sel_text_( *this, *this\EnteredLine( ) )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;
            If eventtype = #__event_Left2Click
               ;Debug "edit - Left2Click"
               *this\edit_caret_1( ) = edit_sel_stop_word( *this, *this\edit_caret_0( ), *this\EnteredLine( ) )
               *this\edit_caret_2( ) = edit_sel_start_word( *this, *this\edit_caret_0( ) + 1, *this\EnteredLine( ) )
               
               edit_sel_row_text_( *this, *this\EnteredLine( ) )
               edit_sel_text_( *this, *this\EnteredLine( ) )
            EndIf
            
            ;
            If eventtype = #__event_Left3Click
               ;Debug "edit - Left3Click"
               *this\edit_caret_2( ) = *this\EnteredLine( )\text\pos
               *this\edit_caret_1( ) = *this\EnteredLine( )\text\pos + *this\EnteredLine( )\text\len
               
               edit_sel_row_text_( *this, *this\EnteredLine( ) )
               edit_sel_text_( *this, *this\EnteredLine( ) )
            EndIf
            
            ;
            If eventtype = #__event_Up
               If Mouse( )\buttons & #PB_Canvas_LeftButton
                  If *this\PressedLine( )
                     If *this\PressedLine( )\press = #True
                        *this\PressedLine( )\press = #False
                        
                        If *this\PressedLine( )\focus = #False
                           If *this\PressedLine( )\enter
                              *this\PressedLine( )\color\state = #__s_1
                           Else
                              *this\PressedLine( )\color\state = #__s_0
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ; get at point items
            If ListSize( *this\VisibleRows( ) )
               If Not ( *this\EnteredLine( ) And
                        *this\EnteredLine( )\visible And
                        *this\EnteredLine( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\EnteredLine( ), mouse_x, mouse_y )) Or
                          ( *this\dragstart And is_inside_( *this\EnteredLine( )\y, *this\EnteredLine( )\height, mouse_y )) ))
                  
                  ; search entered item
                  LastElement( *this\VisibleRows( ))
                  Repeat
                     If *this\VisibleRows( )\visible And
                        *this\VisibleRows( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\VisibleRows( ), mouse_x, mouse_y )) Or
                          ( *this\dragstart And is_inside_( *this\VisibleRows( )\y, *this\VisibleRows( )\height, mouse_y )) )
                        *item = *this\VisibleRows( )
                        Break
                     EndIf
                  Until PreviousElement( *this\VisibleRows( )) = #False
               Else
                  *item = *this\EnteredLine( )
               EndIf
            ElseIf ListSize( *this\__rows( ) )
               If Not ( *this\EnteredLine( ) And
                        *this\EnteredLine( )\visible And
                        *this\EnteredLine( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\EnteredLine( ), mouse_x, mouse_y )) Or
                          ( *this\dragstart And is_inside_( *this\EnteredLine( )\y, *this\EnteredLine( )\height, mouse_y )) ))
                  
                  ; search entered item
                  LastElement( *this\__rows( ))
                  Repeat
                     If *this\__rows( )\visible And
                        *this\__rows( )\hide = 0 And
                        ( ( *this\enter And is_atpoint_( *this\__rows( ), mouse_x, mouse_y )) Or
                          ( *this\dragstart And is_inside_( *this\__rows( )\y, *this\__rows( )\height, mouse_y )) )
                        *item = *this\__rows( )
                        Break
                     EndIf
                  Until PreviousElement( *this\__rows( )) = #False
               Else
                  *item = *this\EnteredLine( )
               EndIf
            EndIf
            
            ;
            If *this\dragstart
               If *item = #Null
                  If mouse( )\y < mouse( )\delta\y + *this\inner_y( ) And mouse( )\y <= *this\inner_y( )
                     If *this\VisibleFirstRow( ) And Not bar_in_start_( *this\scroll\v\bar )
                        ChangeCurrentElement( *this\__rows( ), *this\VisibleFirstRow( ))
                        *item = PreviousElement( *this\__rows( ) )
                        
                        If *item
                           row_scroll_y_( *this, *item )
                        EndIf
                     Else
                        ; *item = *this\VisibleFirstRow( )
                     EndIf
                  ElseIf mouse( )\y > mouse( )\delta\y + *this\inner_y( ) And mouse( )\y > *this\inner_y( ) + *this\inner_height( )
                     If *this\VisibleLastRow( ) And Not bar_in_stop_( *this\scroll\v\bar )
                        ChangeCurrentElement( *this\__rows( ), *this\VisibleLastRow( ))
                        *item = NextElement( *this\__rows( ) )
                        
                        If *item
                           row_scroll_y_( *this, *item )
                        EndIf
                     Else
                        ; *item = *this\VisibleLastRow( )
                     EndIf
                  EndIf
               EndIf
            Else
               If eventtype = #__event_MouseMove
                  If *this\enter = #False
                     *item = #Null
                  EndIf
               EndIf
            EndIf
            
            ; change enter/leave state
            If *this\EnteredLine( ) <> *item ;And *item
               
               ; leave state
               If *this\EnteredLine( )
                  If *this\EnteredLine( )\enter
                     *this\EnteredLine( )\enter = #False
                     
                     If *this\EnteredLine( )\color\state = #__s_1
                        *this\EnteredLine( )\color\state = #__s_0
                     EndIf
                     
                     If *this\dragstart = #PB_Drag_Update
                        ;Debug "le - "
                        
                        If mouse_y > ( *this\EnteredLine( )\y + *this\EnteredLine( )\height / 2 )
                           If *this\EnteredLine( ) = *this\PressedLine( )
                              ;Debug " le bottom  set - Pressed  " +" "+ *this\EnteredLine( )\text\string
                              edit_sel_row_text_( *this, *this\EnteredLine( ), #__sel_to_last )
                              edit_sel_text_( *this, *this\EnteredLine( ))
                           ElseIf *this\EnteredLine( )\index < *this\PressedLine( )\index
                              ;Debug "  ^le top remove - " +" "+ *this\EnteredLine( )\text\string
                              edit_sel_row_text_( *this, *this\EnteredLine( ), #__sel_to_remove )
                              edit_sel_text_( *this, SelectElement(*this\__rows( ), *this\EnteredLine( )\index + 1))
                           Else
                              ;Debug " le bottom  set - " +" "+ *this\EnteredLine( )\text\string
                              edit_sel_row_text_( *this, *this\EnteredLine( ), #__sel_to_set )
                              edit_sel_text_( *this, *this\EnteredLine( ))
                           EndIf
                        Else
                           If *this\EnteredLine( ) = *this\PressedLine( )
                              ;Debug " le top remove - Pressed  " +" "+ *this\EnteredLine( )\text\string
                              edit_sel_row_text_( *this, *this\EnteredLine( ), #__sel_to_first )
                              edit_sel_text_( *this, *this\EnteredLine( ))
                           ElseIf *this\EnteredLine( )\index > *this\PressedLine( )\index
                              ;Debug "  le top remove - " +" "+ *this\EnteredLine( )\text\string
                              edit_sel_row_text_( *this, *this\EnteredLine( ), #__sel_to_remove )
                              edit_sel_text_( *this, SelectElement(*this\__rows( ), *this\EnteredLine( )\index - 1))
                           Else
                              ;Debug " ^le bottom  set - " +" "+ *this\EnteredLine( )\text\string
                              edit_sel_row_text_( *this, *this\EnteredLine( ), #__sel_to_set )
                              edit_sel_text_( *this, *this\EnteredLine( ))
                           EndIf
                        EndIf
                        
                     EndIf
                     
                  EndIf
               EndIf
               
               ; Debug "lines "+*item+" "+*this\EnteredLine( )
               *this\EnteredLine( ) = *item
               
               If *this\EnteredLine( )
                  ; enter state
                  If *this\enter
                     If *this\EnteredLine( )\enter = #False
                        *this\EnteredLine( )\enter = #True
                        
                        If *this\EnteredLine( )\color\state = #__s_0
                           *this\EnteredLine( )\color\state = #__s_1
                        EndIf
                        
                        If *this\dragstart = #PB_Drag_Update
                           ; Debug "en - "
                           
                           *this\FocusedLine( )  = *this\EnteredLine( )
                           *this\edit_caret_0( ) = edit_caret_( *this )
                           *this\edit_caret_1( ) = *this\edit_caret_0( ) + *this\EnteredLine( )\text\pos
                           
                           ; это на тот случай если резко выделили строки
                           ; чтобы не пропустить некоторые из них
                           If *this\text\multiLine And *this\PressedLine( )
                              PushListPosition( *this\__rows( ) )
                              ForEach *this\__rows( )
                                 If Bool(( *this\FocusedLine( )\index >= *this\__rows( )\index And
                                           *this\PressedLine( )\index <= *this\__rows( )\index ) Or ; верх
                                         ( *this\FocusedLine( )\index <= *this\__rows( )\index And
                                           *this\PressedLine( )\index >= *this\__rows( )\index )) ; вниз
                                    
                                    ;
                                    If *this\__rows( )\index <> *this\PressedLine( )\index And
                                       *this\__rows( )\index <> *this\FocusedLine( )\index
                                       
                                       If *this\__rows( )\text\edit[2]\width <> *this\__rows( )\text\width + *this\mode\fullselection
                                          Debug "set - " + " " + *this\__rows( )\text\string
                                          edit_sel_row_text_( *this, *this\__rows( ), #__sel_to_set )
                                       EndIf
                                    EndIf
                                 Else
                                    ;
                                    If *this\__rows( )\text\edit[2]\width <> 0
                                       Debug " remove - " + " " + *this\__rows( )\text\string
                                       edit_sel_row_text_( *this, *this\__rows( ), #__sel_to_remove )
                                    EndIf
                                 EndIf
                              Next
                              PopListPosition( *this\__rows( ) )
                           EndIf
                           
                           ;\\ *this\EnteredLineIndex( ) = *this\EnteredLine( )\index
                           edit_sel_row_text_( *this, *this\EnteredLine( ) )
                           edit_sel_text_( *this, *this\EnteredLine( ) )
                           
                        Else
                           *this\root\repaint = #True
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
            Else
               If *this\dragstart = #PB_Drag_Update
                  If *this\PressedLine( ) And *this\FocusedLine( ) And *this\EnteredLine( )
                     
                     *this\edit_caret_0( ) = edit_caret_( *this )
                     If *this\edit_caret_1( ) <> *this\edit_caret_0( ) + *this\EnteredLine( )\text\pos
                        *this\edit_caret_1( ) = *this\edit_caret_0( ) + *this\EnteredLine( )\text\pos
                        edit_sel_row_text_( *this, *this\EnteredLine( ) )
                        edit_sel_text_( *this, *this\EnteredLine( ) )
                     EndIf
                  EndIf
               EndIf
            EndIf
            
         EndIf
         
      EndProcedure
      
      Procedure DoEvent_Items( *this._s_WIDGET, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
         Protected repaint, *item._s_ROWS
         mouse_x - *this\inner_x( ) ; - *this\scroll_x( )
         mouse_y - *this\inner_y( ) - *this\scroll_y( )
         
         ;
         If *this\row
            ;\\ search at point entered items
            If Not Mouse( )\drag Or *this\drop
               If *this\inner_enter( )
                  If ListSize( *this\VisibleRows( ) )
                     If *this\EnteredRow( ) And
                        *this\EnteredRow( )\visible And
                        Not *this\EnteredRow( )\hide And
                        is_atpoint_( *this\EnteredRow( ), mouse_x, mouse_y )
                        *item = *this\EnteredRow( )
                     Else
                        LastElement( *this\VisibleRows( ))
                        Repeat
                           If *this\VisibleRows( )\visible And
                              Not *this\VisibleRows( )\hide And
                              is_atpoint_( *this\VisibleRows( ), mouse_x, mouse_y )
                              *item = *this\VisibleRows( )
                              Break
                           EndIf
                        Until PreviousElement( *this\VisibleRows( )) = #False
                     EndIf
                     
                  ElseIf ListSize( *this\__rows( ) )
                     If *this\EnteredRow( ) And
                        *this\EnteredRow( )\visible And
                        Not *this\EnteredRow( )\hide And
                        is_atpoint_( *this\EnteredRow( ), mouse_x, mouse_y )
                        *item = *this\EnteredRow( )
                     Else
                        LastElement( *this\__rows( ))
                        Repeat
                           If *this\__rows( )\visible And
                              Not *this\__rows( )\hide And
                              is_atpoint_( *this\__rows( ), mouse_x, mouse_y )
                              *item = *this\__rows( )
                              Break
                           EndIf
                        Until PreviousElement( *this\__rows( )) = #False
                     EndIf
                  EndIf
                  
               Else
                  
                  If *this\dragstart
                     If eventtype = #__event_MouseMove
                        If is_inside_( *this\x, *this\width, mouse( )\x )
                           If mouse( )\y <= mouse( )\delta\y + *this\inner_y( ) And mouse( )\y <= *this\inner_y( )
                              If *this\VisibleFirstRow( ) And Not bar_in_start_( *this\scroll\v\bar )
                                 ChangeCurrentElement( *this\__rows( ), *this\VisibleFirstRow( ))
                                 *item = PreviousElement( *this\__rows( ) )
                                 
                                 If *item
                                    row_scroll_y_( *this, *item )
                                 EndIf
                              Else
                                 *item = *this\VisibleFirstRow( )
                              EndIf
                           ElseIf mouse( )\y >= mouse( )\delta\y + *this\inner_y( ) And
                                  mouse( )\y >= *this\inner_y( ) + *this\inner_height( )
                              If *this\VisibleLastRow( ) And Not bar_in_stop_( *this\scroll\v\bar )
                                 ChangeCurrentElement( *this\__rows( ), *this\VisibleLastRow( ))
                                 *item = NextElement( *this\__rows( ) )
                                 
                                 If *item
                                    row_scroll_y_( *this, *item )
                                 EndIf
                              Else
                                 *item = *this\VisibleLastRow( )
                              EndIf
                           EndIf
                        EndIf
                        If *item = 0
                           ProcedureReturn 0
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ change enter/leave state  And *this\press = 0
            If *this\EnteredRow( ) <> *item; ;And Not ( ( *this\press And Not Mouse( )\drag ) And Not *item );And Not *this\mode\multiSelect )
                                           ; If *this\PressedRow( )
                                           ; Debug *this\PressedRow( )\index
                                           ; EndIf
                                           ;\\ leave state
               If *this\EnteredRow( )
                  If *this\EnteredRow( )\enter
                     *this\EnteredRow( )\enter = 0
                     
                     If ( *this\press And Not Mouse( )\drag ) And
                        Not *this\mode\multiSelect And
                        Not *this\mode\clickSelect
                        
                        If *this\EnteredRow( )\color\state = #__s_2
                           *this\EnteredRow( )\color\state = #__s_0
                        EndIf
                     Else
                        If *this\EnteredRow( )\color\state = #__s_1
                           *this\EnteredRow( )\color\state = #__s_0
                        EndIf
                        
                        If *this\EnteredRow( )\focus
                           If *this\EnteredRow( )\color\state <> #__s_2
                              *this\EnteredRow( )\color\state = #__s_3
                              *this\root\repaint              = #True
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
               
               ; Debug "items - "+*item+" "+*this\EnteredRow( )
               *this\LeavedRow( )  = *this\EnteredRow( )
               *this\EnteredRow( ) = *item
               
               ;\\
               If *this\mode\multiSelect
                  If Mouse( )\press And *this\PressedRow( ) And *this\EnteredRow( )
                     _multi_select_items_( *this, *this\EnteredRow( ) )
                  EndIf
               EndIf
               
               ;\\ enter state
               If *this\EnteredRow( )
                  If *this\EnteredRow( )\enter = 0
                     *this\EnteredRow( )\enter = 1
                     
                     If ( *this\press And Not Mouse( )\drag ) And ( *this\mode\clickSelect = 0 Or
                                                                    ( *this\mode\clickSelect And *this\mode\multiSelect ))
                        If *this\EnteredRow( )\color\state = #__s_0
                           *this\EnteredRow( )\color\state = #__s_2
                        EndIf
                     Else
                        If *this\EnteredRow( )\color\state = #__s_0
                           *this\EnteredRow( )\color\state = #__s_1
                        EndIf
                        
                        If *this\EnteredRow( )\focus
                           If *this\EnteredRow( )\color\state <> #__s_2
                              *this\EnteredRow( )\color\state = #__s_1
                           EndIf
                        EndIf
                     EndIf
                     
                     ;\\ update non-focus status
                     If Not ( *this\LeavedRow( ) = #Null And *this\EnteredRow( ) = *this\FocusedRow( ) And
                              Not ( *this\press And Not *this\mode\clickSelect And Not *this\mode\multiSelect ) )
                        ; Debug " items status change enter"
                        
                        If *this\anchors
                           *this\root\repaint = #True
                        Else
                           DoEvents(*this, #__event_StatusChange, *this\EnteredRow( )\index, *this\EnteredRow( ))
                        EndIf
                     Else
                        *this\root\repaint = #True
                     EndIf
                  EndIf
                  
                  ;\\
               ElseIf *this\press = 0 And Not ( *this\LeavedRow( ) = *this\FocusedRow( ) And Not ( *this\press And Not *this\mode\clickSelect And Not *this\mode\multiSelect ) )
                  ; Debug " items status change leave"
                  
                  If *this\anchors
                     *this\root\repaint = #True
                  Else
                     If *this\FocusedRow( )
                        DoEvents(*this, #__event_StatusChange, *this\FocusedRow( )\index, *this\FocusedRow( ))
                     ElseIf *this\LeavedRow( )
                        DoEvents(*this, #__event_StatusChange, *this\LeavedRow( )\index, *this\LeavedRow( ))
                     EndIf
                  EndIf
               EndIf
               
            EndIf
            
            ;\\ drag & drop state
            If Mouse( )\drag
               If *this\drop
                  If *this\EnteredRow( ) And
                     *this\EnteredRow( )\enter
                     
                     If ( mouse_y - *this\EnteredRow( )\y ) > *this\EnteredRow( )\height / 2
                        If *this\EnteredRow( )\enter <> 1
                           *this\EnteredRow( )\enter = 1
                           ; mouse( )\enter =- 1
                           ; Debug "-1 (+1)"
                           *this\root\repaint = 1
                        EndIf
                     Else
                        If *this\EnteredRow( )\enter <> - 1
                           *this\EnteredRow( )\enter = - 1
                           ; Debug "+1 (-1)"
                           ; mouse( )\enter = 1
                           *this\root\repaint = 1
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If mouse( )\drag
               If PressedWidget( ) And PressedWidget( )\row
                  If PressedWidget( )\PressedRow( )
                     PressedWidget( )\FocusedRowIndex( ) = PressedWidget( )\PressedRow( )\index
                     
                     If PressedWidget( )\FocusedRow( )
                        PressedWidget( )\FocusedRow( )\focus       = 0
                        PressedWidget( )\FocusedRow( )\color\state = #__s_0
                     EndIf
                     
                     PressedWidget( )\FocusedRow( )       = PressedWidget( )\PressedRow( )
                     PressedWidget( )\PressedRow( )\press = 0
                     PressedWidget( )\PressedRow( )       = 0
                     
                     If PressedWidget( )\FocusedRow( )
                        PressedWidget( )\FocusedRow( )\focus       = 1
                        PressedWidget( )\FocusedRow( )\color\state = #__s_2
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_MouseEnter
               If *this\FocusedRow( ) And ;*this\press = 0 And
                  Not ( *this\EnteredRow( ) And *this\FocusedRow( ) <> *this\EnteredRow( ) )
                  ; If Not *this\anchors
                  ;	  DoEvents(*this, #__event_StatusChange, *this\FocusedRow( )\index, *this\FocusedRow( ))
                  ; EndIf
               EndIf
            EndIf
            
            ;\\ ok
            If eventtype = #__event_Focus
               If *this\EnteredRow( )
                  *this\FocusedRowIndex( ) = *this\EnteredRow( )\index
               EndIf
               
               ;\\
               If *this\mode\multiSelect Or *this\mode\clickSelect
                  PushListPosition( *this\__rows( ) )
                  ForEach *this\__rows( )
                     If *this\__rows( ) <> *this\FocusedRow( )
                        If *this\__rows( )\color\state = #__s_3
                           *this\__rows( )\color\state = #__s_2
                           *this\root\repaint          = 1
                        EndIf
                     EndIf
                  Next
                  PopListPosition( *this\__rows( ) )
               EndIf
               
               ;\\
               If *this\FocusedRow( )
                  If *this\FocusedRow( )\focus And
                     *this\FocusedRow( )\color\state = #__s_3
                     *this\FocusedRow( )\color\state = #__s_2
                     *this\root\repaint              = 1
                     
                     ;\\
                     If *this\FocusedRow( )\focus = - 1
                        *this\FocusedRow( )\focus = 1
                     Else
                        If *this\anchors
                           *this\root\repaint = #True
                        Else
                           ; DoEvents(*this, #__event_StatusChange, *this\FocusedRow( )\index, *this\FocusedRow( ))
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\ ok
            If eventtype = #__event_LostFocus
               If *this\mode\multiSelect Or *this\mode\clickSelect
                  PushListPosition( *this\__rows( ) )
                  ForEach *this\__rows( )
                     If *this\__rows( ) <> *this\FocusedRow( )
                        If *this\__rows( )\color\state = #__s_2
                           *this\__rows( )\color\state = #__s_3
                           *this\root\repaint          = 1
                        EndIf
                     EndIf
                  Next
                  PopListPosition( *this\__rows( ) )
               EndIf
               
               ;\\
               If *this\FocusedRow( )
                  ; Debug ""+*this\x+" "+*this\y ;????????????????????
                  If *this\FocusedRow( )\focus
                     *this\FocusedRow( )\color\state = #__s_3
                     *this\root\repaint              = 1
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_Down
               If mouse( )\buttons & #PB_Canvas_LeftButton
                  If *this\EnteredRow( ) And Not EnteredButton( )
                     *this\FocusedRowIndex( ) = *this\EnteredRow( )\index
                     
                     ;\\
                     If *this\mode\multiSelect And Not *this\mode\clickSelect
                        PushListPosition( *this\__rows( ) )
                        ForEach *this\__rows( )
                           If *this\__rows( )\color\state <> #__s_0
                              *this\__rows( )\color\state = #__s_0
                              
                              If *this\__rows( )\focus
                                 Debug " multiselect " + *this\__rows( )\focus + " " + *this\__rows( )\text\string
                              EndIf
                              
                              If Not *this\__rows( )\enter
                                 If *this\__rows( )\focus <> 0
                                    *this\__rows( )\focus = 0
                                 EndIf
                              EndIf
                           EndIf
                        Next
                        PopListPosition( *this\__rows( ) )
                     EndIf
                     
                     *this\PressedRow( ) = *this\EnteredRow( )
                     
                     ;\\
                     If *this\mode\clickSelect
                        *this\PressedRow( )\press ! 1
                        If *this\PressedRow( )\press
                           *this\PressedRow( )\color\state = #__s_2
                        Else
                           *this\PressedRow( )\color\state = #__s_1
                        EndIf
                        
                        ; If Not *this\anchors
                        ;    DoEvents(*this, #__event_StatusChange, *this\PressedRow( )\index, *this\PressedRow( ))
                        ; EndIf
                     Else
                        *this\PressedRow( )\press       = 1
                        *this\PressedRow( )\color\state = #__s_2
                        
                        If *this\PressedRow( ) <> *this\FocusedRow( )
                           If *this\FocusedRow( ) And
                              *this\FocusedRow( )\color\state = #__s_2
                              *this\FocusedRow( )\color\state = #__s_3
                              If *this\anchors
                                 *this\root\repaint = #True
                              Else
                                 ;DoEvents(*this, #__event_StatusChange, *this\FocusedRow( )\index, *this\FocusedRow( ))
                              EndIf
                           EndIf
                           
                           If *this\anchors
                              *this\root\repaint = #True
                           Else
                              ;DoEvents(*this, #__event_StatusChange, *this\PressedRow( )\index, *this\PressedRow( ))
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_DragStart ; Ok
                                              ;               If *this\PressedRow( )
                                              ;                 If *this\FocusedRow( )
                                              ;                   If *this\FocusedRow( )\focus = 1
                                              ; ;                     *this\FocusedRow( )\focus = 0
                                              ; ;
                                              ; ;                     *this\FocusedRow( )\color\state = #__s_0
                                              ; ;
                                              ; ;                      Debug "change5"
                                              ; ;                     DoEvents(*this, #__event_StatusChange, *this\FocusedRow( )\index, *this\FocusedRow( ))
                                              ; ;                     ;*this\root\repaint = #True
                                              ;                   EndIf
                                              ;                 EndIf
                                              ;
                                              ;                 *this\FocusedRow( ) = *this\PressedRow( )
                                              ;               EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_Drop ; Ok
               If *this\EnteredRow( )
                  *this\FocusedRowIndex( ) = *this\EnteredRow( )\index
               EndIf
               
               ;           If *this\FocusedRow( )
               ;             ;             Debug "drop p - "+*this\PressedRow( ) +" "+ *this\PressedRow( )\text\string +" "+ *this\PressedRow( )\press +" "+ *this\PressedRow( )\enter +" "+ *this\PressedRow( )\focus
               ;             ;             ;Debug "drop e - "+*this\EnteredRow( ) +" "+ *this\EnteredRow( )\text\string +" "+ *this\EnteredRow( )\press +" "+ *this\EnteredRow( )\enter +" "+ *this\EnteredRow( )\focus
               ;             ;             Debug "drop f - "+*this\FocusedRow( ) +" "+ *this\FocusedRow( )\text\string +" "+ *this\FocusedRow( )\press +" "+ *this\FocusedRow( )\enter +" "+ *this\FocusedRow( )\focus
               ;
               ;             If *this\PressedRow( ) And
               ;                *this\FocusedRow( )\index > *this\PressedRow( )\index
               ;               *this\FocusedRow( )\enter = 0
               ;             EndIf
               ;             *this\FocusedRow( )\focus = 0
               ;             *this\FocusedRow( )\press = 0
               ;             *this\FocusedRow( )\color\state = #__s_0
               ;           EndIf
            EndIf
            
            ;\\
            If eventtype = #__event_Up
               If Mouse( )\buttons & #PB_Canvas_LeftButton
                  ;             If *item
                  ;               Debug "up * - " + *item + " " + *item\text\string + " " + *item\press + " " + *item\enter + " " + *item\focus
                  ;             EndIf
                  ;
                  ;             If *this\EnteredRow( )
                  ;               Debug "up e - " + *this\EnteredRow( ) + " " + *this\EnteredRow( )\text\string + " " + *this\EnteredRow( )\press + " " + *this\EnteredRow( )\enter + " " + *this\EnteredRow( )\focus
                  ;             EndIf
                  ;
                  ;             ;\\
                  ;             If *this\PressedRow( )
                  ;               Debug "up p - " + *this\PressedRow( ) + " " + *this\PressedRow( )\text\string + " " + *this\PressedRow( )\press + " " + *this\PressedRow( )\enter + " " + *this\PressedRow( )\focus
                  ;             EndIf
                  ;
                  ;             ;\\
                  ;             If *this\FocusedRow( )
                  ;               Debug "up f - " + *this\FocusedRow( ) + " " + *this\FocusedRow( )\text\string + " " + *this\FocusedRow( )\press + " " + *this\FocusedRow( )\enter + " " + *this\FocusedRow( )\focus
                  ;             EndIf
                  
                  
                  If *this\PressedRow( )
                     If *this\mode\clickSelect
                        If *this\mode\multiSelect
                           PushListPosition( *this\__rows( ) )
                           ForEach *this\__rows( )
                              If *this\__rows( )\color\state = #__s_2
                                 If *this\__rows( )\press <> 1
                                    *this\__rows( )\press = 1
                                 EndIf
                              EndIf
                           Next
                           PopListPosition( *this\__rows( ) )
                        Else
                           If *this\dragstart
                              If *this\PressedRow( ) <> *this\EnteredRow( )
                                 If *this\EnteredRow( )
                                    *this\PressedRow( )\press       = 0
                                    *this\PressedRow( )\color\state = #__s_0
                                    
                                    *this\EnteredRow( )\press       = 1
                                    *this\EnteredRow( )\color\state = #__s_2
                                    
                                    ;Debug "change1"
                                    DoEvents(*this, #__event_Change, *this\EnteredRow( )\index, *this\EnteredRow( ))
                                 Else
                                    If *this\PressedRow( )\press
                                       *this\PressedRow( )\color\state = #__s_0
                                    Else
                                       *this\PressedRow( )\color\state = #__s_2
                                    EndIf
                                    *this\PressedRow( )\press ! 1
                                    
                                 EndIf
                              EndIf
                           Else
                              ;Debug "change2" ; click-select flag
                              DoEvents(*this, #__event_Change, *this\PressedRow( )\index, *this\PressedRow( ))
                           EndIf
                        EndIf
                     Else
                        If *this\EnteredRow( ) And
                           *this\EnteredRow( )\enter
                           
                           If Not *this\mode\multiSelect
                              If *this\FocusedRow( ) And
                                 *this\FocusedRow( ) <> *this\EnteredRow( )
                                 *this\FocusedRow( )\enter       = 0
                                 *this\FocusedRow( )\focus       = 0
                                 *this\FocusedRow( )\color\state = #__s_0
                              EndIf
                           EndIf
                           
                           *this\FocusedRow( ) = *this\EnteredRow( )
                        EndIf
                        
                        If Not *this\mode\multiSelect
                           If *this\PressedRow( ) <> *this\EnteredRow( )
                              If Not *this\PressedRow( )\focus
                                 *this\PressedRow( )\enter       = 0
                                 *this\PressedRow( )\color\state = #__s_0
                              EndIf
                           EndIf
                        EndIf
                        
                        *this\PressedRow( )\press = 0
                        *this\PressedRow( )       = #Null
                        
                        If *this\FocusedRow( )
                           *this\FocusedRowIndex( )        = *this\FocusedRow( )\index
                           *this\FocusedRow( )\color\state = #__s_2
                           
                           If *this\FocusedRow( )\press
                              *this\FocusedRow( )\press = 0
                           Else
                              If Not *this\mode\multiSelect
                                 If *this\anchors
                                    *this\root\repaint = #True
                                 Else
                                    ;DoEvents(*this, #__event_StatusChange, *this\FocusedRow( )\index, *this\FocusedRow( ))
                                 EndIf
                              EndIf
                           EndIf
                           
                           If *this\FocusedRow( )\focus = 0
                              *this\FocusedRow( )\focus = 1
                              
                              ; Debug "change3"
                              DoEvents(*this, #__event_Change, *this\FocusedRow( )\index, *this\FocusedRow( ))
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
               EndIf
            EndIf
         EndIf
      EndProcedure
      
      Procedure DoEvent_Button( *this._s_WIDGET, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
         Protected._s_BUTTONS *EnteredButton, *BB1, *BB2, *BB0
         
         ;          ;\\
         ;          If eventtype = #__event_Up
         ;             If EnteredWidget( ) And
         ;                EnteredWidget( )\bar
         ;                *this = EnteredWidget( )
         ;             EndIf
         ;          EndIf
         
         ;\\
         If *this\type = #__type_window
            *BB0 = *this\CloseButton( )
            *BB1 = *this\MaximizeButton( )
            *BB2 = *this\MinimizeButton( )
         Else
            If *this\row
               If *this\EnteredRow( )
                  *BB1 = *this\EnteredRow( )\CheckedBox( )
                  If *this\EnteredRow( )\childrens
                     *BB2 = *this\EnteredRow( )\ButtonBox( )
                  EndIf
                  mouse_x = mouse( )\x - *this\inner_x( ) - *this\EnteredRow( )\x - *this\scroll_x( )
                  mouse_y = mouse( )\y - *this\inner_y( ) - *this\EnteredRow( )\y - *this\scroll_y( )
               EndIf
            EndIf
            
            If *this\bar
               *BB0 = *this\bar\button
               If *this\type <> #__type_splitter
                  *BB1 = *this\bar\button[1]
                  *BB2 = *this\bar\button[2]
               EndIf
            EndIf
         EndIf
         
         ;\\ get at-point-button address
         If *BB1 And *BB1\hide = 0 And
            is_atpoint_( *BB1, mouse_x, mouse_y )
            
            If *this\type <> #__type_Spin
               *BB1\noFocus = 1
            EndIf
            *EnteredButton = *BB1
         ElseIf *BB2 And *BB2\hide = 0 And
                is_atpoint_( *BB2, mouse_x, mouse_y )
            
            If *this\type <> #__type_Spin
               *BB2\noFocus = 2
            EndIf
            *EnteredButton = *BB2
         ElseIf *BB0 And *BB0\hide = 0 And
                is_atpoint_( *BB0, mouse_x, mouse_y )
            
            If *this\type <> #__type_Splitter ;And *this\type <> #__type_tabbar
               *BB0\noFocus = 3
            EndIf
            
            *EnteredButton = *BB0
         EndIf
         
         ;\\ do buttons events entered & leaved
         If EnteredButton( ) <> *EnteredButton
            If EnteredButton( ) And
               Leaved( EnteredButton( ) )
               *this\root\repaint = #True
            EndIf
            
            EnteredButton( ) = *EnteredButton
            
            If EnteredButton( ) And
               Entered( EnteredButton( ) )
               *this\root\repaint = #True
            EndIf
         EndIf
         
         ;\\
         If Not EnteredButton( )
            If *this\caption
               *this\caption\interact = is_atpoint_( *this\caption, mouse( )\x, mouse( )\y, [2] )
            EndIf
         EndIf
      EndProcedure
      
      Procedure DoEvent_Tab( *this._s_WIDGET, eventtype.l, mouse_x.l = - 1, mouse_y.l = - 1 )
         Protected repaint, *tabRow._s_ROWS
         
         If *this\bar
            mouse_x - *this\bar\button\x
            mouse_y - *this\bar\button\y
            ; Debug "seach "+*this\class +" "+ *this\EnteredTab( )
            
            ;\\ get at point items if enter inner coordinate                           ;
            If *this\inner_enter( )
               If ListSize( *this\__tabs( ) )
                  If *this\EnteredTab( ) And
                     *this\EnteredTab( )\visible And
                     *this\EnteredTab( )\hide = 0 And
                     is_atpoint_( *this\EnteredTab( ), mouse_x, mouse_y )
                     
                     *tabRow = *this\EnteredTab( )
                  Else
                     ; search entered item
                     LastElement( *this\__tabs( ))
                     Repeat
                        If *this\__tabs( )\visible And
                           *this\__tabs( )\hide = 0 And
                           is_atpoint_( *this\__tabs( ), mouse_x, mouse_y )
                           *tabRow = *this\__tabs( )
                           Break
                        EndIf
                     Until Not PreviousElement( *this\__tabs( ))
                  EndIf
               EndIf
            EndIf
            
            ; change enter/leave state
            If *this\EnteredTab( ) <> *tabRow And Not *this\dragstart
               ;\\ leaved tabs
               If *this\EnteredTab( ) And
                  Leaved( *this\EnteredTab( ) )
                  *this\root\repaint = #True
               EndIf
               
               *this\EnteredTab( ) = *tabRow
               
               ;\\ entered tabs
               If *this\enter
                  If *this\EnteredTab( ) And
                     Entered( *this\EnteredTab( ) )
                     *this\root\repaint = #True
                  EndIf
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure DoEvents( *this._s_WIDGET, eventtype.l, *button = #PB_All, *data = #Null )
         ; Debug "DoEvents( "+*this +" "+ eventtype
         ;       If eventtype = #__event_Down Or
         ;          eventtype = #__event_Up ;Or eventtype = #__event_mouseenter Or eventtype = #__event_mouseleave
         ;
         ;         If *this\TabBox( )
         ;           Debug "TabBox( ) "+*this\TabBox( )\draw_x( ) +" "+ *this\TabBox( )\draw_y( ) +" "+ *this\TabBox( )\draw_width( ) +" "+ *this\TabBox( )\draw_height( )
         ;         Else
         ;           Debug ""+*this\draw_x( ) +" "+ *this\draw_y( ) +" "+ *this\draw_width( ) +" "+ *this\draw_height( )
         ;         EndIf
         ;       EndIf
         
         
         ;                            ;\\
         ;                            If eventtype = #__event_MouseEnter
         ;                               Debug "e "+*this\class
         ;                            EndIf
         ;
         ;                            ;\\
         ;                            If eventtype = #__event_MouseLeave
         ;                               Debug "l "+*this\class
         ;                            EndIf
         ;                 ;\\
         ;                  If eventtype = #__event_LeftDown
         ;                     Debug " d "+*this\class
         ;                  EndIf
         ;
         ;                  ;\\
         ;                  If eventtype = #__event_LeftUp
         ;                    Debug " u "+*this\class
         ;                  EndIf
         ;
         ;
         ;           ;\\
         ;          If eventtype = #__event_Focus
         ;             Debug " f "+*this\class
         ;          EndIf
         ;
         ;          ;\\
         ;          If eventtype = #__event_LostFocus
         ;             Debug " l-f "+*this\class
         ;          EndIf
         ;
         
         
         If Not *this
            ProcedureReturn 0
         EndIf
         
         ;\\ activate send event
         If *this\root And
            *this\root\event
            If Not *this\event
               *this\event = - 1
            EndIf
         EndIf
         If *this\window And
            *this\window\event
            If Not *this\event
               *this\event = - 1
            EndIf
         EndIf
         
         ;\\ entered position state
         If *this\enter > 0
            If is_innerside_( *this, mouse( )\x, mouse( )\y )
               If *this\enter = 1
                  *this\inner_enter( )
                  *this\root\repaint = 1
               EndIf
            ElseIf *this\inner_enter( )
               *this\enter        = 1
               *this\root\repaint = 1
            EndIf
         EndIf
         
         ;\\ widget::_events_Anchors( )
         If *this\anchors Or ( is_integral_( *this ) And *this\parent\anchors ) ; a_transformer( *this )
            If a_events( *this, eventtype, *button, *data)
               *this\root\repaint = #True
            EndIf
         EndIf
         
         ;\\
         If Not *this\disable
            ;\\ repaint state
            Select eventtype
               Case #__event_StatusChange
                  If *this\row
                     ; Debug "status-change " + *button
                     ;               Protected *row._s_ROWS = *Data
                     ;               If *row And *row\color\state = #__s_2
                     ;                 ;Debug *button
                     ;                 *row\color\back[*row\color\state] = $FF2C70F5 ; TEMP
                     ;               EndIf
                     *this\root\repaint = #True
                  EndIf
                  
               Case #__event_Focus
                  If Not *this\anchors
                     If Not *this\disable
                        *this\color\state  = #__s_2
                        *this\root\repaint = #True
                     EndIf
                  EndIf
                  
               Case #__event_LostFocus
                  If Not *this\anchors
                     If *this\color\state = #__s_2
                        *this\color\state  = #__s_3
                        *this\root\repaint = #True
                     EndIf
                     If *this <> GetActive( )
                        *this\root\repaint = #True
                     EndIf
                  EndIf
                  
               Case #__event_MouseMove
                  ;                   If *this\bar
                  ;                      If *this\dragstart
                  ;                         *this\root\repaint = #True
                  ;                      EndIf
                  ;                   EndIf
                  
                  
               Case #__event_MouseEnter,
                    #__event_MouseLeave,
                    #__event_RightButtonDown,
                    #__event_RightButtonUp,
                    #__event_RightClick,
                    #__event_Right2Click,
                    #__event_Right3Click,
                    #__event_Down,
                    #__event_Up,
                    #__event_LeftButtonDown,
                    #__event_LeftButtonUp,
                    #__event_LeftClick,
                    #__event_Left2Click,
                    #__event_Left3Click,
                    #__event_KeyDown,
                    #__event_KeyUp,
                    #__event_ScrollChange,
                    #__event_Drop,
                    #__event_DragStart
                  ;                #__event_Create,
                  ;                #__event_Resize,
                  
                  
                  *this\root\repaint = #True
            EndSelect
            
            ;\\ items events
            If Not a_index( )
               If *this\row
                  If *this\type = #__type_Editor Or
                     *this\type = #__type_string
                     
                     DoEvent_Lines( *this, eventtype, mouse( )\x, mouse( )\y )
                  Else
                     DoEvent_Items( *this, eventtype, mouse( )\x, mouse( )\y )
                  EndIf
               EndIf
               
               If Not mouse( )\press
                  ;                   ;\\
                  ;                   DoEvent_Button( *this, eventtype, mouse( )\x, mouse( )\y )
                  
                  ;\\
                  If *this\tab
                     DoEvent_Tab( *this, eventtype, mouse( )\x, mouse( )\y )
                  EndIf
               EndIf
            EndIf
            
            ;\\ widgets events
            Select *this\type
               Case #__type_Window
                  If Not *this\anchors
                     If eventtype = #__event_MouseMove
                        If *this\caption\interact And *this\press And Not *this\anchors
                           Resize( *this, ( mouse( )\x - mouse( )\delta\x ), ( mouse( )\y - mouse( )\delta\y ), #PB_Ignore, #PB_Ignore )
                        EndIf
                     EndIf
                     
                     If eventtype = #__event_Left2Click
                        If *this\caption\interact
                           If Not *this\resize & #__resize_maximize
                              ProcedureReturn SetState( *this, #PB_Window_Maximize )
                           Else
                              ProcedureReturn SetState( *this, #PB_Window_Normal )
                           EndIf
                        EndIf
                     EndIf
                     
                     If eventtype = #__event_LeftClick
                        Select EnteredButton( )
                              ; close button
                           Case *this\CloseButton( )
                              If is_root_( *this )
                                 PostEvent( #PB_Event_CloseWindow, *this\root\canvas\window, *this )
                              Else
                                 Post( *this, #__event_close )
                              EndIf
                              
                              ; maximize button
                           Case *this\MaximizeButton( )
                              If Not *this\resize & #__resize_maximize
                                 ProcedureReturn SetState( *this, #PB_Window_Maximize )
                              Else
                                 ProcedureReturn SetState( *this, #PB_Window_Normal )
                              EndIf
                              
                              ; minimize button
                           Case *this\MinimizeButton( )
                              If Not *this\resize & #__resize_minimize
                                 ProcedureReturn SetState( *this, #PB_Window_Minimize )
                              Else
                                 ProcedureReturn SetState( *this, #PB_Window_Normal )
                              EndIf
                        EndSelect
                     EndIf
                  EndIf
                  
                  ;\\
               Case #__type_combobox
                  If eventtype = #__event_Down
                     If mouse( )\buttons & #PB_Canvas_LeftButton
                        If *this\popup
                           DisplayPopup( *this\popup, *this )
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
               Case #__type_Button, #__type_ButtonImage
                  If *this\state = #False
                     Select eventtype
                        Case #__event_MouseEnter
                           If *this\enter > 0
                              If *this\press
                                 *this\color\state = #__s_2
                              Else
                                 *this\color\state = #__s_1
                              EndIf
                           EndIf
                           
                        Case #__event_MouseLeave
                           ; If Not *this\press
                           *this\color\state = #__s_0
                           ; EndIf
                           
                        Case #__event_Down
                           If *this\enter > 0
                              If mouse( )\buttons & #PB_Canvas_LeftButton
                                 *this\color\state = #__s_2
                              EndIf
                              ; If *this\type = #__type_ButtonImage
                              If *this\image[#__image_pressed]\id
                                 *this\image = *this\image[#__image_pressed]
                              EndIf
                              ; EndIf
                           EndIf
                           
                        Case #__event_Up
                           If mouse( )\buttons & #PB_Canvas_LeftButton
                              If *this\enter > 0
                                 *this\color\state = #__s_1
                              Else
                                 *this\color\state = #__s_0
                              EndIf
                           EndIf
                           ; If *this\type = #__type_ButtonImage
                           If *this\image[#__image_released]\id
                              *this\image = *this\image[#__image_released]
                           EndIf
                           ; EndIf
                           
                     EndSelect
                  EndIf
                  ;
                  If eventtype = #__event_Up
                     If *this\enter > 0
                        If mouse( )\buttons & #PB_Canvas_LeftButton
                           If *this\flag & #PB_Button_Toggle
                              If SetState( *this, Bool( *this\state ! 1 ))
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
               Case #__type_Option
                  If eventtype = #__event_LeftClick
                     If SetState( *this, #True )
                        
                     EndIf
                  EndIf
                  
                  ;\\
               Case #__type_checkBox
                  If eventtype = #__event_LeftClick
                     If SetState( *this, Bool( *this\state ! 1 ) )
                        
                     EndIf
                  EndIf
                  
               Case #__type_HyperLink
                  If eventtype = #__event_Down
                     ;If *this\cursor[2]
                     *this\cursor = *this\cursor[2]
                     ;EndIf
                  EndIf
                  If eventtype = #__event_Up
                     If *this\cursor <> *this\cursor[1]
                        *this\cursor = *this\cursor[1]
                     EndIf
                  EndIf
                  If eventtype = #__event_MouseMove Or
                     eventtype = #__event_MouseEnter Or
                     eventtype = #__event_MouseLeave
                     
                     If *this\inner_enter( )
                        If *this\color\state <> #__s_1
                           *this\color\state = #__s_1
                        EndIf
                        *this\root\repaint = 1
                     Else
                        If *this\color\state <> #__s_0
                           *this\color\state = #__s_0
                        EndIf
                     EndIf
                  EndIf
                  
               Case #__type_Tree, #__type_ListView, #__type_ListIcon
                  Tree_events( *this, eventtype, mouse( )\x, mouse( )\y )
                  
               Case #__type_Editor, #__type_String
                  Editor_events( *this, eventtype, mouse( )\x, mouse( )\y )
                  
               Case #__type_TabBar,
                    #__type_TrackBar,
                    #__type_ScrollBar,
                    #__type_Splitter,
                    #__type_Spin,
                    #__type_ToolBar,
                    #__type_ProgressBar
                  
                  If Bar_Events( *this, eventtype, *button, *data )
                     *this\root\repaint = #True
                  EndIf
            EndSelect
            
            ;\\
            If Popup( )
               If Popup( )\widget
                  If Popup( )\widget = *this
                     If eventtype = #__event_up
                        ;\\ ComboBox( )
                        If Popup( )\parent
                           SetText( Popup( )\parent, GetItemText( *this, GetState( *this ) ) )
                           
                           If IsWindow( GetWindow( *this\root ) )
                              DisplayPopup( *this, Popup( )\parent )
                              SetActiveWindow( GetWindow( GetRoot( Popup( )\parent ) ) )
                           EndIf
                        EndIf
                     EndIf
                  Else
                     ;\\ hide popup widget
                     If eventtype = #__event_Down
                        If Not ( *this\popup And
                                 *this\popup = Popup( )\widget )
                           
                           ;\\
                           If Not is_integral_( *this )
                              DisplayPopup( Popup( )\widget, *this )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ before post-widget-events drop
         If eventtype = #__event_Drop
            If mouse( )\drag\actions & #PB_Drag_Drop
               mouse( )\drag\x = a_selector( )\x - *this\inner_x( ) - *this\scroll_x( )
               mouse( )\drag\y = a_selector( )\y - *this\inner_y( ) - *this\scroll_y( )
               
               mouse( )\drag\width  = a_selector( )\width
               mouse( )\drag\height = a_selector( )\height
            Else
               mouse( )\drag\x = mouse( )\x - *this\inner_x( ) - *this\scroll_x( )
               mouse( )\drag\y = mouse( )\y - *this\inner_y( ) - *this\scroll_y( )
               
               mouse( )\drag\width  = #PB_Ignore
               mouse( )\drag\height = #PB_Ignore
            EndIf
            
            ;\\
            If *this\row And
               *this\EnteredRow( ) And
               *this\EnteredRow( )\enter
               
               If *this\EnteredRow( )\enter < 0
                  *button = *this\EnteredRow( )\index
                  *data   = mouse( )\x | mouse( )\y << 16
               Else
                  *button = *this\EnteredRow( )\index + 1
                  *data   = mouse( )\x | mouse( )\y << 16
               EndIf
            EndIf
         EndIf
         
         ;\\ mouse wheel horizontal
         If eventtype = #__event_MouseWheelX
            ; Debug "wheelX " + *data
            If *this\scroll And *this\scroll\h And
               bar_SetState( *this\scroll\h, *this\scroll\h\bar\page\pos - mouse( )\wheel\x )
               *this\root\repaint = #True
            EndIf
         EndIf
         
         ;\\ mouse wheel verticl
         If eventtype = #__event_MouseWheelY
            ; Debug "wheelY " + *data
            If *this\scroll And *this\scroll\v And
               bar_SetState( *this\scroll\v, *this\scroll\v\bar\page\pos - mouse( )\wheel\y )
               *this\root\repaint = #True
            EndIf
         EndIf
         
         ;\\
         If eventtype = #__event_cursor
            Protected cursor, result
            
            DrawingStop( )
            
            result = Send( *this, eventtype, #PB_All, *data )
            If result > 0
               cursor = result
            Else
               cursor = mouse( )\cursor
            EndIf
            
            ;Debug " DO CURSOR "+*this\class +" "+ cursor +" TYPE "+ *data
            
            ;Debug ""+*this\class +" event( CURSOR ) - "+ cursor
            Cursor::Set( *this\root\canvas\gadget, cursor ) 
         Else
            If *this\row
               If *this\dragstart
                  If *this\FocusedRow( )
                     *button = *this\FocusedRow( )\index
                     *data   = *this\FocusedRow( )
                  EndIf
               Else
                  If *this\EnteredRow( )
                     *button = *this\EnteredRow( )\index
                     *data   = *this\EnteredRow( )
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ send-widget-events
         If *this\root And
            *this\disable = 0
            
            If *this\event
               If eventtype = #__event_cursor
                  
               Else
                  If eventtype = #__event_Create
                  ElseIf eventtype = #__event_Focus
                  ElseIf eventtype = #__event_LostFocus
                     ;                   ElseIf eventtype = #__event_Change
                     ;                      Post( *this, eventtype, *button, *data )
                  Else
                     Send( *this, eventtype, *button, *data )
                  EndIf
                  ;                EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ enabled mouse behavior
         If eventtype = #__event_Down
            If a_index( ) ;And a_index( ) <> #__a_moved
               mouse( )\interact = #True
            EndIf
            
            If *this\type = #__type_Splitter
               If EnteredButton( ) And
                  EnteredButton( )\enter
                  ; mouse( )\interact = #True
               EndIf
            EndIf
         EndIf
         
         ;\\ after post-widget-events then drop if create new widget
         If eventtype = #__event_Drop
            If *this <> __widgets( )
               If __widgets( )\resize & #__reclip
                  __widgets( )\resize & ~ #__reclip
                  Reclip( __widgets( ) )
               EndIf
            EndIf
         EndIf
         
         ;\\ after post&send drag-start-event
         If mouse( )\drag
            If eventtype = #__event_DragStart
               If mouse( )\drag\actions & #PB_Drag_Drop
                  mouse( )\interact = #True
               EndIf
               
               ;\\
               If Not mouse( )\drag\cursor
                  mouse( )\drag\cursor    = cursor::#__cursor_Drop
                  PressedWidget( )\cursor = cursor::#__cursor_Drag
               EndIf
            EndIf
            
            ;\\ drag & drop state
            If eventtype = #__event_MouseEnter Or
               eventtype = #__event_MouseLeave Or
               ( eventtype = #__event_MouseMove And *this\enter > 0 )
               
               If *this\drop
                  If *this\inner_enter( )
                     ;                      Debug ""+*this\drop\format +" = "+ mouse( )\drag\format +" "+
                     ;                            *this\drop\actions +" = "+ mouse( )\drag\actions +" "+
                     ;                            *this\drop\private +" = "+ mouse( )\drag\private
                     
                     If *this\drop\format = mouse( )\drag\format And
                        *this\drop\actions & mouse( )\drag\actions And
                        ( *this\drop\private = mouse( )\drag\private Or
                          *this\drop\private & mouse( )\drag\private )
                        
                        If mouse( )\drag\state <> #PB_Drag_Enter
                           mouse( )\drag\state = #PB_Drag_Enter
                           ; Debug "#PB_Drag_Enter"
                           
                           If PressedWidget( )\cursor <> mouse( )\drag\cursor
                              ChangeCursor( PressedWidget( ), mouse( )\drag\cursor )
                           EndIf
                        EndIf
                     EndIf
                  Else
                     If mouse( )\drag\state = #PB_Drag_Enter
                        mouse( )\drag\state = #PB_Drag_Leave
                        ; Debug "#PB_Drag_Leave"
                        
                        If PressedWidget( )\cursor = cursor::#__cursor_Drop
                           ChangeCursor( PressedWidget( ), cursor::#__cursor_Drag )
                        EndIf
                     EndIf
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\ cursor update
         Select eventtype
            Case #__event_MouseEnter,
                 #__event_MouseMove, 
                 #__event_MouseLeave, 
                 #__event_Down,
                 #__event_Up
               
               If Not a_index( )
                  If PressedWidget( ) And PressedWidget( )\press
                     do_cursor_( PressedWidget( ), PressedWidget( )\cursor, 2 )
                  Else
                     If *this\inner_enter( )
                        do_cursor_( *this, *this\cursor, 1 )
                     Else
                        If EnteredWidget( ) And
                           EnteredWidget( )\inner_enter( )
                           ;
                           If PressedWidget( ) And
                              PressedWidget( )\root <> EnteredWidget( )\root
                              do_cursor_( PressedWidget( )\root, PressedWidget( )\root\cursor, 8 )
                           EndIf
                           ;
                           do_cursor_( EnteredWidget( ), EnteredWidget( )\cursor, 3 )
                        Else
                           ; если внутри виджета покинули область где надо менять курсор
                           If EnteredWidget( )
                              If EnteredWidget( )\enter > 0
                                 If LeavedWidget( )
                                    do_cursor_( LeavedWidget( ), cursor::#__cursor_Default, 5 )
                                 EndIf
                              Else
                                 ; from button to splitter
                                 If Not *this\enter
                                    If EnteredWidget( )\frame_enter( ) ; ???
                                       do_cursor_( EnteredWidget( ), EnteredWidget( )\cursor, 4 )
                                    EndIf
                                 EndIf
                              EndIf
                           Else
                              do_cursor_( *this, cursor::#__cursor_Default, 7 )
                           EndIf
                        EndIf
                     EndIf
                  EndIf
               EndIf
         EndSelect
         
         ;\\ post repaint canvas
         If Not *this\disable
            If *this\root\repaint = 1
               ; Debug ""+*this\class+" "+*this\color\state +" "+ ClassFromEvent(eventtype)
               PostEventRepaint( *this\root )
               *this\root\repaint = 0
            EndIf
         EndIf
      EndProcedure
      
      ;-
      Procedure CanvasEvents( )
         Debug "CanvasEvents - " + EventGadget( )
         ;          If  Event( ) = #PB_Event_Repaint
         ;             If EventData( )
         ;                EventHandler( #PB_Event_Repaint, EventGadget( ), EventType( ), EventData( ) )
         ;             EndIf
         ;          Else
         EventHandler( #PB_Event_Gadget, EventGadget( ), EventType( ), EventData( ) )
         ;             EventHandler( Event( ), EventGadget( ), EventType( ), EventData( ) )
         ;          EndIf
      EndProcedure
      
      Procedure EventHandler( event = - 1, eventgadget = - 1, eventtype = - 1, eventdata = 0 )
         Protected Repaint, mouse_x , mouse_y
         
         ;\\
         If event = #PB_Event_Repaint
            If eventdata
               If ChangeCurrentCanvas( eventdata )
                  If Root( )\canvas\repaint = 1
                     
                     If __gui\repost <> 1
                        Repost( )
                     EndIf
                     
                     ; Debug "   REPAINT " + Root( )\class
                     ReDraw( Root( ) )
                     Root( )\canvas\repaint = 0
                  EndIf
               EndIf
            EndIf
         EndIf
         
         ;\\
         If event = #PB_Event_DeactivateWindow
            If ActiveWindow( )
               ForEach __roots( )
                  If __roots( )\canvas\window = EventWindow( )
                     If ActiveWindow( ) = __roots( )
                        Root( ) = __roots( )
                        ; Debug "Deactivate - "+Root( )\class
                        SetDeactive( Root( ) )
                        ActiveWindow( ) = 0
                        Break
                     EndIf
                  EndIf
               Next
            EndIf
         EndIf
         
         ;\\
         If event = #PB_Event_ActivateWindow
            If __gui\repost = 1
               If Not EnteredWidget( )
                  ForEach __roots( )
                     If __roots( )\canvas\window = EventWindow( )
                        Root( ) = __roots( )
                        ; Debug "Activate - "+Root( )\class
                        SetActive( Root( ) )
                        Break
                     EndIf
                  Next
               EndIf
            EndIf
         EndIf
         
         ;\\
         If event = #PB_Event_Gadget
            ;\\
            If EventType = #PB_EventType_Resize ;: PB(ResizeGadget)( eventgadget, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore )
               
               ; PushMapPosition( __roots( ) )
               If ChangeCurrentCanvas( GadgetID( eventgadget ) )
                  ;                   If Root( )\type = #__type_window
                  ;                      Debug 777
                  ;                      Resize( Root( ), 0, 0, PB(GadgetWidth)( eventgadget ) - Root( )\fs * 2, PB(GadgetHeight)( eventgadget ) - Root( )\fs * 2 - Root( )\fs[2] )
                  ;                   Else
                  Resize( Root( ), 0, 0, PB(GadgetWidth)( eventgadget ), PB(GadgetHeight)( eventgadget ) )
                  ;                   EndIf
               EndIf
               ; PopMapPosition( __roots( ) )
            EndIf
            
            ;\\
            If eventtype = #PB_EventType_MouseEnter
               If Not mouse( )\interact
                  If IsGadget( eventgadget ) And
                     GadgetType( eventgadget ) = #PB_GadgetType_Canvas
                     ChangeCurrentCanvas( GadgetID( eventgadget ) )
                  EndIf
               EndIf
            EndIf
            
            ;\\
            If eventtype = #PB_EventType_MouseLeave
               If PressedWidget( ) And
                  Root( ) <> PressedWidget( )\root
                  eventgadget = PressedWidget( )\root\canvas\gadget
                  ChangeCurrentCanvas( GadgetID( eventgadget ) )
               EndIf
            EndIf
            
            ;\\
            If eventtype = #PB_EventType_KeyDown Or
               eventtype = #PB_EventType_Input Or
               eventtype = #PB_EventType_KeyUp
               
               ;\\
               If GetActive( )
                  Keyboard( )\key[1] = GetGadgetAttribute( GetActive( )\root\canvas\gadget, #PB_Canvas_Modifiers )
                  
                  CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                     If Keyboard( )\key[1] & #PB_Canvas_Command
                        Keyboard( )\key[1] & ~ #PB_Canvas_Command
                        Keyboard( )\key[1] | #PB_Canvas_Control
                     EndIf
                  CompilerEndIf
                  
                  ;\\
                  If eventtype = #PB_EventType_Input
                     Keyboard( )\input = GetGadgetAttribute( GetActive( )\root\canvas\gadget, #PB_Canvas_Input )
                  Else
                     Keyboard( )\Key = GetGadgetAttribute( GetActive( )\root\canvas\gadget, #PB_Canvas_Key )
                  EndIf
                  
                  ;\\ keyboard events
                  If eventtype = #PB_EventType_KeyDown
                     DoEvents( GetActive( ), #__event_keydown )
                  EndIf
                  If eventtype = #PB_EventType_Input
                     DoEvents( GetActive( ), #__event_input )
                  EndIf
                  If eventtype = #PB_EventType_KeyUp
                     DoEvents( GetActive( ), #__event_keyup )
                  EndIf
                  
                  ;\\ change keyboard focus-widget
                  If eventtype = #PB_EventType_KeyDown
                     ; If Not GetActive( )\anchors
                     
                     ;\\ tab focus
                     Select Keyboard( )\Key
                        Case #PB_Shortcut_Tab
                           If GetActive( )\container > 0 And
                              GetActive( )\FirstWidget( )
                              SetActive( GetActive( )\FirstWidget( ) )
                           Else
                              If GetActive( )\AfterWidget( )
                                 SetActive( GetActive( )\AfterWidget( ) )
                              Else
                                 If GetActive( )\parent
                                    If GetActive( )\parent\AfterWidget( )
                                       SetActive( GetActive( )\parent\AfterWidget( ) )
                                    Else
                                       
                                       ;                                     If GetActive( )\anchors
                                       ;                                        If a_main( )\FirstWidget( )
                                       ;                                           SetActive( a_main( )\FirstWidget( ) )
                                       ;                                        EndIf
                                       ;                                     Else
                                       ;                                        If GetActive( )\root\FirstWidget( )
                                       ;                                           SetActive( GetActive( )\root\FirstWidget( ) )
                                       ;                                        EndIf
                                       ;                                     EndIf
                                       
                                       ;                                     If GetActive( )\parent
                                       ;                                        If GetActive( )\parent\FirstWidget( )
                                       ;                                           Debug "777 "+GetActive( )\parent\FirstWidget( )\class
                                       ;                                           SetActive( GetActive( )\parent\FirstWidget( ) )
                                       ;                                        EndIf
                                       ;                                     Else
                                       
                                       Protected *main._s_WIDGET = GetMainParent( GetActive( ) )
                                       If *main ;And *main\FirstWidget( )
                                          If *main\AfterWidget( )
                                             Debug "after " + *main\AfterWidget( )\class
                                             SetActive( *main\AfterWidget( ) )
                                          Else
                                             SetActive( *main )
                                          EndIf
                                       Else
                                          If GetActive( )\root\FirstWidget( )
                                             SetActive( GetActive( )\root\FirstWidget( ) )
                                          EndIf
                                       EndIf
                                       ;                                     EndIf
                                    EndIf
                                 EndIf
                              EndIf
                           EndIf
                           
                     EndSelect
                     ; EndIf
                  EndIf
                  
                  ;\\
                  If eventtype = #PB_EventType_KeyUp
                     Keyboard( )\key[1] = 0
                     Keyboard( )\Key    = 0
                  EndIf
               EndIf
            EndIf
            
            ; Debug ""+ Root( )\class +" "+ eventgadget +" "+ Bool( Root( )\canvas\gadget = eventgadget )
            
            ;\\
            If Root( ) And
               Root( )\canvas\gadget = eventgadget
               ;\\
               Select eventtype
                  Case #PB_EventType_MouseEnter,
                       #PB_EventType_MouseLeave,
                       #PB_EventType_MouseMove
                     
                     mouse_x = CanvasMouseX( Root( )\canvas\gadget )
                     mouse_y = CanvasMouseY( Root( )\canvas\gadget )
                     
                     ;\\
                     If eventtype = #PB_EventType_MouseEnter
                        mouse( )\change = 1 << 0
                        mouse( )\x      = mouse_x
                        mouse( )\y      = mouse_y
                     EndIf
                     If eventtype = #PB_EventType_MouseLeave
                        mouse( )\change = - 1
                        mouse( )\x      = - 1
                        mouse( )\y      = - 1
                     EndIf
                     If eventtype = #PB_EventType_MouseMove
                        ;\\
                        If mouse( )\x <> mouse_x
                           If mouse( )\x < mouse_x
                              mouse( )\change | 1 << 3
                           Else
                              mouse( )\change | 1 << 1
                           EndIf
                           mouse( )\x = mouse_x
                        EndIf
                        If mouse( )\y <> mouse_y
                           If mouse( )\y < mouse_y
                              mouse( )\change | 1 << 4
                           Else
                              mouse( )\change | 1 << 2
                           EndIf
                           mouse( )\y = mouse_y
                        EndIf
                        
                        ;\\ mouse-drag-start send drag event
                        If PressedWidget( ) And
                           PressedWidget( )\press And
                           PressedWidget( )\inner_enter( ) And
                           PressedWidget( )\dragstart = #PB_Drag_None
                           
                           If mouse( )\change
                              PressedWidget( )\dragstart = #PB_Drag_Update
                              
                              PressedWidget( )\resize = 0 ; temp
                              
                              ;                         If mouse( )\press
                              ;                            If PressedWidget( )
                              ;                               If PressedWidget( )\split_1( )
                              ;                                  Hide( PressedWidget( )\split_1( ), 1 )
                              ;                               EndIf
                              ;                               If PressedWidget( )\split_2( )
                              ;                                  Hide( PressedWidget( )\split_2( ), 1 )
                              ;                               EndIf
                              ;                            EndIf
                              ;                         EndIf
                              ; Debug PressedWidget( )\dragstart
                              
                              DoEvents( PressedWidget( ), #__event_DragStart )
                           EndIf
                        EndIf
                     EndIf
                     
                  Case #PB_EventType_LeftButtonDown,
                       #PB_EventType_RightButtonDown,
                       #PB_EventType_MiddleButtonDown
                     
                     ;                   ;\\
                     ;                   If EnteredWidget( )
                     ;                      If StartDrawing( Output( EnteredWidget( )\root ))
                     ;                         Draw( EnteredWidget( ) )
                     ;                         EnteredWidget( )\drawimg = GrabDrawingImage( #PB_Any, EnteredWidget( )\frame_x( ), EnteredWidget( )\frame_y( ), EnteredWidget( )\frame_width( ), EnteredWidget( )\frame_height( ) )
                     ;                         StopDrawing( )
                     ;                      EndIf
                     ;                   EndIf
                     
                     ;\\
                     mouse( )\press  = 1
                     mouse( )\change = 1 << 5
                     If eventtype = #PB_EventType_LeftButtonDown : mouse( )\buttons | #PB_Canvas_LeftButton : EndIf
                     If eventtype = #PB_EventType_RightButtonDown : mouse( )\buttons | #PB_Canvas_RightButton : EndIf
                     If eventtype = #PB_EventType_MiddleButtonDown : mouse( )\buttons | #PB_Canvas_MiddleButton : EndIf
                     
                  Case #PB_EventType_LeftButtonUp,
                       #PB_EventType_RightButtonUp,
                       #PB_EventType_MiddleButtonUp
                     
                     If mouse( )\interact = 1
                        mouse( )\interact = - 1
                     EndIf
                     
                     ;\\
                     If mouse( )\press
                        mouse( )\press = 0
                        
                        ;\\
                        If PressedWidget( )
                           If PressedWidget( )\haschildren
                              PushListPosition( __widgets( ) )
                              StartEnumerate( PressedWidget( ) )
                              If widget( )\resize & #__resize_change
                                 ; Debug "stop-resize "+widget( )\class
                                 widget( )\resize & ~ #__resize_change
                                 Send( widget( ), #__event_ResizeEnd )
                              EndIf
                              StopEnumerate( )
                              PopListPosition( __widgets( ) )
                           EndIf
                           If PressedWidget( )\resize & #__resize_change
                              ; Debug "stop-resize "+PressedWidget( )\class
                              PressedWidget( )\resize & ~ #__resize_change
                              Send( PressedWidget( ), #__event_ResizeEnd )
                           EndIf
                        EndIf
                        
                        
                        ;                      If PressedWidget( )
                        ;                         If PressedWidget( )\split_1( )
                        ;                            If PressedWidget( )\split_1( )\hide
                        ;                               Hide( PressedWidget( )\split_1( ), 0 )
                        ;                               Resize( PressedWidget( )\split_1( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore)
                        ;                            EndIf
                        ;                         EndIf
                        ;                         If PressedWidget( )\split_2( )
                        ;                            If PressedWidget( )\split_2( )\hide
                        ;                               Hide( PressedWidget( )\split_2( ), 0 )
                        ;                               Resize( PressedWidget( )\split_2( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore)
                        ;                            EndIf
                        ;                         EndIf
                        ;
                        ;                         If PressedWidget( )\drawimg
                        ;                            FreeImage( PressedWidget( )\drawimg )
                        ;                            PressedWidget( )\drawimg = #Null
                        ;                         EndIf
                        ;                      EndIf
                     EndIf
                     
                     ;\\
                     mouse( )\change = 1 << 6
                     mouse( )\x      = CanvasMouseX( Root( )\canvas\gadget )
                     mouse( )\y      = CanvasMouseY( Root( )\canvas\gadget )
               EndSelect
               
               ;\\ get enter&leave widget address
               If mouse( )\change
                  If mouse( )\interact <> 1
                     ;\\ enter&leave mouse events
                     GetAtPoint( Root( ), mouse( )\x, mouse( )\y )
                  EndIf
               EndIf
            EndIf
            
            ;\\ do all events
            If eventtype = #PB_EventType_Focus
               If GetActive( ) And
                  GetActive( )\root\canvas\gadget = eventgadget
                  
                  If Not EnteredWidget( ) Or
                     ( EnteredWidget( ) And
                       ( GetActive( ) = EnteredWidget( ) Or
                         GetActive( ) = EnteredWidget( )\parent ) )
                     ; Debug "Canvas - Focus " + GetActive( )\root\canvas\gadget + " " + eventgadget
                     
                     If GetActive( )\focus = 0
                        GetActive( )\focus = 1
                        DoFocus( GetActive( ), #__event_Focus )
                     EndIf
                  EndIf
               EndIf
               
            ElseIf eventtype = #PB_EventType_LostFocus
               If GetActive( ) And
                  GetActive( )\root\canvas\gadget = eventgadget
                  ; Debug "canvas - LostFocus " + GetActive( )\root\canvas\gadget + " " + eventgadget
                  
                  If GetActive( )\focus = 1
                     GetActive( )\focus = 0
                     DoFocus( GetActive( ), #__event_LostFocus )
                  EndIf
               EndIf
               
            ElseIf eventtype = #PB_EventType_MouseMove
               If mouse( )\change > 1
                  ;\\ mouse-pressed-widget move event
                  If PressedWidget( ) And
                     PressedWidget( )\dragstart And
                     PressedWidget( ) <> EnteredWidget( )
                     If PressedWidget( )\root <> Root( )
                        mouse( )\x = CanvasMouseX( PressedWidget( )\root\canvas\gadget )
                        mouse( )\y = CanvasMouseY( PressedWidget( )\root\canvas\gadget )
                     EndIf
                     DoEvents( PressedWidget( ), #__event_MouseMove )
                  EndIf
                  
                  ;\\ mouse-entered-widget move event
                  If EnteredWidget( ) And
                     EnteredWidget( )\enter
                     If PressedWidget( ) And
                        PressedWidget( )\root <> Root( )
                        mouse( )\x = CanvasMouseX( Root( )\canvas\gadget )
                        mouse( )\y = CanvasMouseY( Root( )\canvas\gadget )
                     EndIf
                     DoEvents( EnteredWidget( ), #__event_MouseMove )
                  EndIf
               EndIf
               
            ElseIf eventtype = #PB_EventType_LeftButtonDown Or
                   eventtype = #PB_EventType_MiddleButtonDown Or
                   eventtype = #PB_EventType_RightButtonDown
               
               ;\\
               If EnteredWidget( )
                  ; Debug "canvas - press "+eventgadget +" "+ Root( ) +" "+ EnteredWidget( )\class
                  
                  If Not EnteredWidget( )\disable
                     PressedWidget( )       = EnteredWidget( )
                     PressedWidget( )\press = #True
                  EndIf
                  
                  ;\\ set active widget
                  If eventtype = #PB_EventType_LeftButtonDown
                     If Not ( EnteredButton( ) And EnteredButton( )\noFocus )
                        If GetActive( ) <> EnteredWidget( )
                           If EnteredWidget( )\disable
                              ;
                              SetActive( EnteredWidget( )\parent)
                           Else
                              SetActive( EnteredWidget( ))
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\ mouse delta pos
                  If eventtype <> #PB_EventType_MiddleButtonDown
                     mouse( )\delta\x = mouse( )\x
                     mouse( )\delta\y = mouse( )\y
                     ;
                     If Not a_index( )
                        If EnteredWidget( )\bar And EnteredButton( ) > 0
                           mouse( )\delta\x - EnteredWidget( )\bar\thumb\pos
                           mouse( )\delta\y - EnteredWidget( )\bar\thumb\pos
                        Else
                           If Not a_transform( ) 
                              mouse( )\delta\x - EnteredWidget( )\container_x( )
                              mouse( )\delta\y - EnteredWidget( )\container_y( )
                              ;
                              If Not EnteredWidget( )\child
                                 If EnteredWidget( )\parent
                                    mouse( )\delta\x - EnteredWidget( )\parent\scroll_x( )
                                    mouse( )\delta\y - EnteredWidget( )\parent\scroll_y( )
                                 EndIf
                              EndIf
                           EndIf
                        EndIf
                     EndIf
                  EndIf
                  
                  ;\\
                  Static ClickTime.q
                  Protected ElapsedMilliseconds.q = ElapsedMilliseconds( )
                  If DoubleClickTime( ) > ( ElapsedMilliseconds - ClickTime ) + Bool( #PB_Compiler_OS = #PB_OS_Windows ) * 492
                     mouse( )\click + 1
                  Else
                     mouse( )\click = 1
                  EndIf
                  ClickTime = ElapsedMilliseconds
                  DoEvents( EnteredWidget( ), #__event_Down )
                  If mouse( )\click = 1
                     If eventtype = #PB_EventType_LeftButtonDown
                        DoEvents( EnteredWidget( ), #__event_leftdown )
                     EndIf
                     If eventtype = #PB_EventType_MiddleButtonDown
                        DoEvents( EnteredWidget( ), #__event_middledown )
                     EndIf
                     If eventtype = #PB_EventType_RightButtonDown
                        DoEvents( EnteredWidget( ), #__event_rightdown )
                     EndIf
                  EndIf
               EndIf
               
            ElseIf eventtype = #PB_EventType_LeftButtonUp Or
                   eventtype = #PB_EventType_MiddleButtonUp Or
                   eventtype = #PB_EventType_RightButtonUp
               
               ;\\
               If PressedWidget( )
                  ;\\ drag & drop stop
                  If PressedWidget( )\dragstart
                     PressedWidget( )\dragstart = #PB_Drag_Finish
                     
                     
                     ;\\ do drop events
                     If mouse( )\drag
                        If mouse( )\drag\state = #PB_Drag_Enter
                           mouse( )\drag\state = #PB_Drag_Finish
                        EndIf
                        
                        If mouse( )\drag\actions & #PB_Drag_Drop
                           If PressedWidget( )\drop
                              DoEvents( PressedWidget( ), #__event_Drop )
                           EndIf
                        ElseIf mouse( )\drag\state = #PB_Drag_Finish
                           If EnteredWidget( )\drop
                              DoEvents( EnteredWidget( ), #__event_Drop )
                           EndIf
                        EndIf
                        
                        ;\\ reset dragged cursor
                        If PressedWidget( )\cursor <> PressedWidget( )\cursor[1]
                           Debug "free drop CURSOR " + mouse( )\cursor + " " + PressedWidget( )\cursor + " " + PressedWidget( )\cursor[1]
                           ChangeCursor( PressedWidget( ), PressedWidget( )\cursor[1] )
                        EndIf
                        
                        ;\\ reset
                        FreeStructure( mouse( )\drag)
                        mouse( )\drag = #Null
                     EndIf
                     
                     ;\\
                     If PressedWidget( )\resize <> 0
                        PressedWidget( )\resize = 0
                     EndIf
                     
                     ;\\ do enter&leave events
                     If EnteredWidget( ) <> PressedWidget( )
                        PressedWidget( )\dragstart = #PB_Drag_None
                        GetAtPoint( Root( ), mouse( )\x, mouse( )\y )
                        
                        ;If Not a_index( )
                        If LeavedWidget( ) <> PressedWidget( )
                           LeavedWidget( ) = PressedWidget( )
                           GetAtPoint( PressedWidget( )\root, mouse( )\x, mouse( )\y )
                        EndIf
                        PressedWidget( )\dragstart = #PB_Drag_Finish
                        ;EndIf
                     EndIf
                  EndIf
                  
                  ;\\ do up&click events
                  If PressedWidget( )\press
                     PressedWidget( )\press = #False
                     
                     ;\\
                     DoEvents( PressedWidget( ), #__event_Up )
                     
                     If mouse( )\click
                        ;\\ do up events
                        If mouse( )\click = 1
                           If eventtype = #PB_EventType_LeftButtonUp
                              DoEvents( PressedWidget( ), #__event_leftup )
                           EndIf
                           If eventtype = #PB_EventType_MiddleButtonUp
                              DoEvents( PressedWidget( ), #__event_middleup )
                           EndIf
                           If eventtype = #PB_EventType_RightButtonUp
                              DoEvents( PressedWidget( ), #__event_rightup )
                           EndIf
                        EndIf
                        
                        ;\\ reset state
                        If PressedWidget( )\dragstart
                           PressedWidget( )\dragstart = #PB_Drag_None
                        Else
                           ;\\ do 1click events
                           If PressedWidget( ) = EnteredWidget( )
                              If eventtype = #PB_EventType_LeftButtonUp
                                 DoEvents( PressedWidget( ), #__event_LeftClick )
                              EndIf
                              If eventtype = #PB_EventType_RightButtonUp
                                 DoEvents( PressedWidget( ), #__event_RightClick )
                              EndIf
                           EndIf
                        EndIf
                        
                        ;\\ do 2click events
                        If mouse( )\click = 2
                           If eventtype = #PB_EventType_LeftButtonUp
                              DoEvents( PressedWidget( ), #__event_Left2Click )
                           EndIf
                           If eventtype = #PB_EventType_RightButtonUp
                              DoEvents( PressedWidget( ), #__event_Right2Click )
                           EndIf
                           
                           ;\\ do 3click events
                        ElseIf mouse( )\click = 3
                           If eventtype = #PB_EventType_LeftButtonUp
                              DoEvents( PressedWidget( ), #__event_Left3Click )
                           EndIf
                           If eventtype = #PB_EventType_RightButtonUp
                              DoEvents( PressedWidget( ), #__event_Right3Click )
                           EndIf
                           
                        EndIf
                     EndIf
                  EndIf
                  
                  ;           ;\\
                  If mouse( )\interact
                     ;             If eventgadget <> EnteredGadget( )
                     ;               eventgadget = EnteredGadget( )
                     ;               If IsGadget( eventgadget ) And
                     ;                  GadgetType( eventgadget ) = #PB_GadgetType_Canvas
                     ;                 ChangeCurrentCanvas( GadgetID( eventgadget ) )
                     ;                 ; Debug "canvas - enter "+eventgadget +" "+ Root( )
                     ;               EndIf
                     ;             EndIf
                     ;
                     ;             Debug "canvas - up " + eventgadget + " " + Root( )
                     ;             mouse( )\x = CanvasMouseX( Root( )\canvas\gadget )
                     ;             mouse( )\y = CanvasMouseY( Root( )\canvas\gadget )
                     ;             GetAtPoint( Root( ), mouse( )\x, mouse( )\y )
                     mouse( )\interact = #False
                  EndIf
               EndIf
               
               ;\\ reset mouse buttons
               If mouse( )\buttons
                  mouse( )\buttons = 0
                  ;                If eventtype = #PB_EventType_LeftButtonUp
                  ;                   mouse( )\buttons & ~ #PB_Canvas_LeftButton
                  ;                ElseIf eventtype = #PB_EventType_RightButtonUp
                  ;                   mouse( )\buttons & ~ #PB_Canvas_RightButton
                  ;                ElseIf eventtype = #PB_EventType_MiddleButtonUp
                  ;                   mouse( )\buttons & ~ #PB_Canvas_MiddleButton
                  ;                EndIf
                  
                  mouse( )\delta\x = 0
                  mouse( )\delta\y = 0
               EndIf
               
            ElseIf eventtype = #pb_eventtype_MouseWheelX
               If EnteredWidget( )
                  mouse( )\wheel\x = eventdata
                  If is_integral_( EnteredWidget( ) )
                     DoEvents( EnteredWidget( )\parent, #__event_wheelx, -1, eventdata )
                  Else
                     DoEvents( EnteredWidget( ), #__event_wheelx, -1, eventdata )
                  EndIf
               EndIf
               
            ElseIf eventtype = #pb_eventtype_MouseWheelY
               If EnteredWidget( )
                  mouse( )\wheel\y = eventdata
                  If is_integral_( EnteredWidget( ) )
                     DoEvents( EnteredWidget( )\parent, #__event_wheely, -1, eventdata )
                  Else
                     DoEvents( EnteredWidget( ), #__event_wheely, -1, eventdata )
                  EndIf
               EndIf
               
            EndIf
            
            ; reset
            If mouse( )\change <> #False
               mouse( )\change = #False
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure EventResize( )
         Protected canvas = PB(GetWindowData)( PB(EventWindow)( ))
         ; Debug "- resize - os - window -"
         ; PB(ResizeGadget)( canvas, #PB_Ignore, #PB_Ignore, WindowWidth( EventWindow( )) - GadgetX( canvas )*2, WindowHeight( EventWindow( )) - GadgetY( canvas )*2 )
         PB(ResizeGadget)( canvas, #PB_Ignore, #PB_Ignore, PB(WindowWidth)( PB(EventWindow)( )) - PB(GadgetX)( canvas ) * 2, PB(WindowHeight)( PB(EventWindow)( )) - PB(GadgetY)( canvas ) * 2 ) ; bug
         Root( )\repaint = 0
         ReDraw( Root( ) )
      EndProcedure
      
      Procedure EventRepaint( )
         If EventData( )
            EventHandler( #PB_Event_Repaint, EventGadget( ), #PB_Default, EventData( ) )
         EndIf
      EndProcedure
      
      Procedure EventActivate( )
         EventHandler( #PB_Event_ActivateWindow, #PB_Default, #PB_Default, #Null )
      EndProcedure
      
      Procedure EventDeactive( )
         EventHandler( #PB_Event_DeactivateWindow, #PB_Default, #PB_Default, #Null )
      EndProcedure
      
      ;-
      Procedure.i CloseList( )
         Protected *open._s_WIDGET
         ; Debug "close - "+Opened( )\index;text\string
         
         ;\\ 1-test splitter
         If Opened( ) And
            Opened( )\type = #__type_Splitter
            
            Opened( )\split_1( ) = Opened( )\FirstWidget( )
            Opened( )\split_2( ) = Opened( )\LastWidget( )
            
            Update(Opened( ))
         EndIf
         
         If Opened( ) And
            Opened( )\parent
            
            If Opened( )\parent\type = #__type_MDI
               *open = Opened( )\parent\parent
            Else
               If Opened( )\LastRoot( )
                  *open                 = Opened( )\LastRoot( )
                  Opened( )\LastRoot( ) = #Null
               Else
                  If Opened( ) = Opened( )\root
                     *open = Opened( )\root\BeforeRoot( )
                  Else
                     *open = Opened( )\parent
                  EndIf
               EndIf
            EndIf
         Else
            *open = Root( )
         EndIf
         
         If *open = Opened( )
            If *open\root\BeforeRoot( )
               UseGadgetList( WindowID(*open\root\BeforeRoot( )\canvas\window))
               ; Debug ""+*open\root\BeforeRoot( )\canvas\window +" "+Opened( )\root\canvas\window
               *open = *open\root\BeforeRoot( )
            EndIf
         EndIf
         
         If *open And
            Opened( ) <> *open
            Opened( ) = *open
            ; OpenList( *open )
         EndIf
      EndProcedure
      
      Procedure.i OpenList( *this._s_WIDGET, item.l = 0 )
         Protected result.i = Opened( )
         
         If *this = Opened( )
            ProcedureReturn result
         EndIf
         
         If *this
            If *this\parent <> Opened( )
               *this\LastRoot( ) = Opened( )
            EndIf
            
            If *this\root
               If *this\root <> Root( )
                  If Opened( )\root
                     Opened( )\root\AfterRoot( ) = *this\root
                  EndIf
                  *this\root\BeforeRoot( ) = Opened( )\root
                  
                  If is_root_( *this )
                     ChangeCurrentCanvas(*this\root\canvas\GadgetID )
                  EndIf
               EndIf
            EndIf
            
            ;
            If *this\TabBox( )
               *this\TabBox( )\OpenedTabIndex( ) = item
            EndIf
            
            Opened( ) = *this
         EndIf
         
         ProcedureReturn result
      EndProcedure
      
      ;-
      Procedure Open( window, x.l = 0, y.l = 0, width.l = #PB_Ignore, height.l = #PB_Ignore, title$ = #Null$, flag.q = #Null, *parentID = #Null, Canvas = #PB_Any )
         Protected *root._s_ROOT
         Protected w, g, UseGadgetList, result
         
         ; init
         If Not MapSize( __roots( ) )
            events::SetCallback( @EventHandler( ) )
         EndIf
         
         If width = #PB_Ignore And height = #PB_Ignore
            flag | #PB_Canvas_Container
         EndIf
         
         If Not PB(IsWindow)(Window)
            If Window > 5000
               Window = #PB_Any
            EndIf
            
            w = OpenWindow( Window, x, y, width, height, title$, flag, *parentID )
            If Window = - 1 : Window = w : w = WindowID( Window ) : EndIf
            
            ;\\
            If flag & #PB_Window_BorderLess = #PB_Window_BorderLess
               CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
                  If CocoaMessage(0, w, "hasShadow") = 0
                     CocoaMessage(0, w, "setHasShadow:", 1)
                  EndIf
                  
               CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
                  If GetClassLongPtr_( w, #GCL_STYLE ) & #CS_DROPSHADOW = 0
                     SetClassLongPtr_( w, #GCL_STYLE, #CS_DROPSHADOW )
                  EndIf
                  
               CompilerElse
                  
               CompilerEndIf
            EndIf
            
            
            x = 0
            y = 0
            flag | #PB_Canvas_Container
         Else
            w = WindowID( Window )
         EndIf
         
         If x = #PB_Ignore : x = 0 : EndIf
         If y = #PB_Ignore : y = 0 : EndIf
         
         If width = #PB_Ignore
            width = WindowWidth( Window, #PB_Window_InnerCoordinate )
            If x And x <> #PB_Ignore
               width - x * 2
            EndIf
         EndIf
         
         If height = #PB_Ignore
            height = WindowHeight( Window, #PB_Window_InnerCoordinate )
            If y And y <> #PB_Ignore
               height - y * 2
            EndIf
         EndIf
         
         ; get a handle from the previous usage list
         If w
            UseGadgetList = UseGadgetList( w )
         EndIf
         
         ;
         If PB(IsGadget)(Canvas)
            g = GadgetID( Canvas )
         Else
            If flag & #PB_Canvas_Container = #PB_Canvas_Container
               g = CanvasGadget( Canvas, x, y, width, height, #PB_Canvas_Container | #PB_Canvas_Keyboard )
            Else
               g = CanvasGadget( Canvas, x, y, width, height, #PB_Canvas_Keyboard )
            EndIf
            If Canvas = - 1 : Canvas = g : g = GadgetID( Canvas ) : EndIf
         EndIf
         
         ;
         If UseGadgetList And w <> UseGadgetList
            UseGadgetList( UseGadgetList )
         EndIf
         
         ;
         If Not FindMapElement( __roots( ), Str( g ) ) ; ChangeCurrentCanvas(g)
            result     = AddMapElement( __roots( ), Str( g ) )
            __roots( ) = AllocateStructure( _s_root )
            Root( )    = __roots( )
            *root      = __roots( )
            
            ;a_init( *root )
            *root\type      = #__type_Container
            *root\container = 1
            
            *root\class  = "Root"
            *root\window = *root
            ;             If Opened( ) And
            ;                Opened( )\root And
            ;                Opened( )\root\canvas\gadget = Canvas
            ;               *root\root       = Opened( )\root
            ;             Else
            *root\root = *root
            ;             EndIf
            ;*root\parent    = Opened( )
            *root\address = result
            *root\main    = 1
            
            ; Debug "root window "+Opened( )
            *root\color       = _get_colors_( )
            *root\text\fontID = PB_( GetGadgetFont )( #PB_Default )
            
            ;
            *root\canvas\window   = Window
            *root\canvas\gadget   = Canvas
            *root\canvas\GadgetID = g
            
            ;\\
            Post( *root, #__event_create )
            
            ;\\
            If width Or height
               Resize( *root, #PB_Ignore, #PB_Ignore, width, height )
            EndIf
            
            ;\\
            If flag & #PB_Window_NoGadgets = #False
               If Opened( )
                  Opened( )\AfterRoot( ) = *root
               EndIf
               *root\BeforeRoot( ) = Opened( )
               
               Opened( ) = *root
               ; OpenList( *root)
            EndIf
            
            ;\\
            DrawingStart( Canvas )
            draw_font_( *root )
            
            
            ;\\
            If flag & #PB_Window_NoActivate = #False
               SetActive( *root )
            EndIf
            
            ;\\
            BindEvent( #PB_Event_Repaint, @EventRepaint( ), Window )
            BindEvent( #PB_Event_ActivateWindow, @EventActivate( ), Window )
            BindEvent( #PB_Event_DeactivateWindow, @EventDeactive( ), Window )
         EndIf
         
         If g
            SetWindowData( Window, Canvas )
            
            If flag & #PB_Canvas_Container = #PB_Canvas_Container
               ; BindEvent( #PB_Event_MoveWindow, @EventResize( ), Window )
               BindEvent( #PB_Event_SizeWindow, @EventResize( ), Window )
            EndIf
            
            ;\\ z - order
            CompilerIf #PB_Compiler_OS = #PB_OS_Windows
               SetWindowLongPtr_( g, #GWL_STYLE, GetWindowLongPtr_( g, #GWL_STYLE ) | #WS_CLIPSIBLINGS )
               SetWindowPos_( g, #GW_HWNDFIRST, 0, 0, 0, 0, #SWP_NOMOVE | #SWP_NOSIZE )
               
               ; RedrawWindow_(WindowID(a), 0, 0, #RDW_ERASE | #RDW_FRAME | #RDW_INVALIDATE | #RDW_ALLCHILDREN)
               
               RemoveKeyboardShortcut( Window, #PB_Shortcut_Tab )
            CompilerEndIf
            
            ;\\
            CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
               ; CocoaMessage(0, g, "setBoxType:", #NSBoxCustom)
               ; CocoaMessage(0, g, "setBorderType:", #NSLineBorder)
               ; CocoaMessage(0, g, "setBorderType:", #NSGrooveBorder)
               ; CocoaMessage(0, g, "setBorderType:", #NSBezelBorder)
               ; CocoaMessage(0, g, "setBorderType:", #NSNoBorder)
               
               ;;;CocoaMessage(0, w, "makeFirstResponder:", g)
               
               ; CocoaMessage(0, GadgetID(0), "setFillColor:", CocoaMessage(0, 0, "NSColor colorWithPatternImage:", ImageID(0)))
               ; CocoaMessage(0, WindowID(w), "setBackgroundColor:", CocoaMessage(0, 0, "NSColor colorWithPatternImage:", ImageID(0)))
               ; CocoaMessage(0, g,"setFocusRingType:",1)
            CompilerEndIf
         EndIf
         
         widget( ) = *root
         ProcedureReturn *root
      EndProcedure
      
      Procedure.i Window( x.l, y.l, width.l, height.l, Text.s, flag.q = 0, *parent._s_WIDGET = 0 )
         Protected fs = #__window_frame_size
         Protected barHeight = #__window_caption_height
         
         ;Protected *this.allocate( Widget )
         If Opened( )
            Protected *root._s_root = Opened( )\root
         EndIf
         
         With *this
            Static pos_x.l, pos_y.l
            
            Protected *this._s_WIDGET
            If MapSize( __roots( ) )
               If Not ListSize( __widgets( ) ) And
                  Flag & #__flag_autosize = #__flag_autosize
                  
                  x              = 0
                  y              = 0
                  width          = *root\width
                  height         = *root\height
                  *root\autosize = #True
                  *this          = *root
               Else
                  *this.allocate( WIDGET )
               EndIf
               ;\\ open root list
            Else
               *this = Open( #PB_Any, x, y, width + fs * 2, height + fs * 2 + barHeight, Text, flag | #PB_Window_BorderLess, *parent )
               x     = 0
               y     = 0
               ;EndIf
            EndIf
            
            ;\\
            If x = #PB_Ignore
               x = pos_x + mouse( )\steps
            EndIf
            If y = #PB_Ignore
               y = pos_y + mouse( )\steps
            EndIf
            pos_x = x + fs
            pos_y = y + fs + barHeight
            
            ;\\
            If flag & #__flag_child = #__flag_child
               If *parent And *parent\type = #__type_MDI
                  *this\child = - 1
               Else
                  *this\child = 1
               EndIf
            EndIf
            
            If *parent
               If *root = *parent
                  *root\parent = *this
               EndIf
               
            Else
               *parent = *root
            EndIf
            
            ;\\
            *this\type            = #__type_window
            *this\frame_x( )      = #PB_Ignore
            *this\frame_y( )      = #PB_Ignore
            *this\frame_width( )  = #PB_Ignore
            *this\frame_height( ) = #PB_Ignore
            
            
            ;\\ replace pb flag
            flag = FromPBFlag( *this\type, flag )
            
            *this\flag      = flag
            *this\create    = #True
            *this\class     = #PB_Compiler_Procedure
            *this\container = 2
            
            ;
            ;       *this\round = round
            ;
            *this\color      = _get_colors_( )
            *this\color\back = $FFF9F9F9
            
            
            *this\caption\round    = 4
            *this\caption\_padding = *this\caption\round
            *this\caption\color    = _get_colors_( )
            
            ; border frame size
            *this\fs = constants::_check_( *this\flag, #__flag_borderless, #False ) * fs
            
            
            ;
            *this\CloseButton( )\hide    = constants::_check_( *this\flag, #__window_SystemMenu, #False )
            *this\MaximizeButton( )\hide = constants::_check_( *this\flag, #__window_MaximizeGadget, #False )
            *this\MinimizeButton( )\hide = constants::_check_( *this\flag, #__window_MinimizeGadget, #False )
            *this\HelpButton( )\hide     = 1
            
            
            If *this\MaximizeButton( )\hide = 0 Or
               *this\MinimizeButton( )\hide = 0 Or
               *this\CloseButton( )\hide = 0
               *this\caption\hide = 0
            Else
               *this\caption\hide = constants::_check_( *this\flag, #__window_titleBar, #False )
            EndIf
            
            If *this\caption\hide
               *this\barHeight = 0
            Else
               *this\barHeight = constants::_check_( *this\flag, #__flag_borderless, #False ) * barHeight
               *this\round     = 7
               
               *this\Title( )\padding\x = 5
               *this\Title( )\string    = Text
            EndIf
            
            *this\CloseButton( )\color    = colors::*this\red
            *this\MaximizeButton( )\color = colors::*this\blue
            *this\MinimizeButton( )\color = colors::*this\green
            
            *this\CloseButton( )\color\state    = 1
            *this\MaximizeButton( )\color\state = 1
            *this\MinimizeButton( )\color\state = 1
            
            *this\CloseButton( )\round    = 4 + 3
            *this\MaximizeButton( )\round = *this\CloseButton( )\round
            *this\MinimizeButton( )\round = *this\CloseButton( )\round
            *this\HelpButton( )\round     = *this\CloseButton( )\round
            
            *this\CloseButton( )\width  = 14
            *this\CloseButton( )\height = 14
            
            *this\MaximizeButton( )\width  = *this\CloseButton( )\width
            *this\MaximizeButton( )\height = *this\CloseButton( )\height
            
            *this\MinimizeButton( )\width  = *this\CloseButton( )\width
            *this\MinimizeButton( )\height = *this\CloseButton( )\height
            
            *this\HelpButton( )\width  = *this\CloseButton( )\width * 2
            *this\HelpButton( )\height = *this\CloseButton( )\height
            
            
            
            
            ; Background image
            *this\image\img = - 1
            
            ;
            *this\bs = *this\fs
            
            ;\\
            Post( *this, #__event_create )
            
            ;\\
            If *parent
               If *this\flag & #__window_WindowCentered
                  x = *parent\x + ( *parent\width - width - *this\fs * 2 ) / 2
                  y = *parent\y + ( *parent\height - height - *this\fs * 2 - *this\barHeight ) / 2
               EndIf
               
               If *this\child Or *parent\type <> #__type_window
                  SetParent( *this, *parent, #PB_Default )
               Else
                  
                  If Not *parent\autosize And SetAttachment( *this, *parent, 0 )
                     x - *parent\container_x( ) - (*parent\fs + (*parent\fs[1] + *parent\fs[3]))
                     y - *parent\container_y( ) - (*parent\fs + (*parent\fs[2] + *parent\fs[4]))
                  Else
                     ; Debug "888888 "+ *parent +" "+ Root( )+" "+Opened( )
                     SetParent( *this, *parent, #PB_Default )
                  EndIf
               EndIf
            EndIf
            
            ;\\
            Resize( *this, x, y, width, height )
            
            If *this\flag & #__window_NoGadgets = #False
               OpenList( *this )
            EndIf
            
            If *this\flag & #__window_NoActivate = #False
               If Not *this\anchors
                  SetActive( *this )
               EndIf
            EndIf
            
            If *this\flag & #__window_SizeGadget
               If *this\anchors
                  *this\anchors\mode = #__a_full | #__a_zoom | #__a_novisible
               EndIf
            EndIf
         EndWith
         
         widget( ) = *this
         
         ProcedureReturn *this
      EndProcedure
      
      Procedure.i Gadget( Type.l, Gadget.i, x.l, Y.l, width.l, height.l, Text.s = "", *param1 = #Null, *param2 = #Null, *param3 = #Null, flag.q = #Null )
         Protected *this, g, Window = ID::Window( UseGadgetList( 0 ) )
         
         Flag = FromPBFlag( Type, Flag ) | #__flag_autosize
         
         If MapSize( __roots( ) )
            Protected canvas = Root( )\canvas\gadget
         EndIf
         
         Open( Window, x, y, width, height, "", #PB_Canvas_Container, 0, Gadget )
         
         Select Type
            Case #__type_Tree : *this = Tree( 0, 0, width, height, flag )
            Case #__type_Text : *this = Text( 0, 0, width, height, Text, flag )
            Case #__type_Button : *this = Button( 0, 0, width, height, Text, flag )
            Case #__type_Option : *this = Option( 0, 0, width, height, Text, flag )
            Case #__type_CheckBox : *this = Checkbox( 0, 0, width, height, Text, flag )
            Case #__type_HyperLink : *this = HyperLink( 0, 0, width, height, Text, *param1, flag )
            Case #__type_Splitter : *this = Splitter( 0, 0, width, height, *param1, *param2, flag )
         EndSelect
         
         CloseGadgetList( )
         
         If Gadget = - 1
            Gadget = GetGadget( Root( ))
            g      = Gadget
         Else
            g = GadgetID( Gadget )
         EndIf
         
         SetGadgetData( Gadget, *this )
         
         If IsGadget(canvas)
            ; CloseList( )
            ;Debug ""+Gadget+" "+canvas
            ChangeCurrentCanvas( GadgetID(canvas) )
            OpenList( Root( ) )
         EndIf
         
         ProcedureReturn g
      EndProcedure
      
      ;       Procedure   ChangeCurrentRoot( )
      ;          If MapSize( __roots( ) )
      ;             If MapKey( __roots( ) ) = ""
      ;                ResetMap( __roots( ) )
      ;                NextMapElement( __roots( ) )
      ;                Root( ) = __roots( )
      ;             EndIf
      ;             ProcedureReturn 1
      ;          EndIf
      ;       EndProcedure
      
      Procedure Close( *window._s_WIDGET )
         Protected window, canvas
         Protected is_window = IsWindow( *window )
         
         ;\\
         If Not is_window
            If *window = #PB_All
               is_window = #True
            Else
               If is_root_( *window )
                  *window   = *window\root\canvas\window
                  is_window = #True
               EndIf
            EndIf
         EndIf
         
         ;\\
         If is_window
            ForEach __roots( )
               Root( ) = __roots( )
               window  = Root( )\canvas\window
               canvas  = Root( )\canvas\gadget
               
               ;\\
               If #PB_All <> *window
                  If window <> *window
                     Continue
                  EndIf
               EndIf
               
               If *window = #PB_All
                  If Root( )\haschildren
                     LastElement( __widgets( ) )
                     Repeat
                        If is_window_( __widgets( ) )
                           window = #PB_All
                           ; Debug " free --------- " + __widgets( )\class
                           
                           Free( __widgets( ) )
                           
                           If Not Root( )\haschildren
                              Break 2
                           EndIf
                           
                        ElseIf Not PreviousElement( __widgets( ) )
                           Break
                        EndIf
                     ForEver
                     
                     If window = #PB_All
                        Break
                     EndIf
                  EndIf
                  
                  __gui\quit =  - 1
               EndIf
               
               ;\\
               If Free( Root( ) )
                  If PB(IsWindow)( window )
                     If DraggedGadget( ) = canvas
                        DraggedGadget( ) =  - 1
                     EndIf
                     If EnteredGadget( ) = canvas
                        EnteredGadget( ) =  - 1
                     EndIf
                     If PressedGadget( ) = canvas
                        PressedGadget( ) =  - 1
                     EndIf
                     If FocusedGadget( ) = canvas
                        FocusedGadget( ) =  - 1
                     EndIf
                     
                     If __gui\quit =  - 1
                        FreeGadget( canvas )
                        CloseWindow( window )
                        ResetMap( __roots( ) )
                     Else
                        PostEvent( #PB_Event_CloseWindow, window, #PB_Default )
                     EndIf
                  EndIf
               EndIf
            Next
         Else
            If is_widget_( *window )
               Free( *window )
            EndIf
         EndIf
         
         ;\\
         ;ChangeCurrentRoot( )
         
         ProcedureReturn window
      EndProcedure
      
      ;-
      Procedure.i Free( *this._s_WIDGET )
         If *this
            If Not Send( *this, #__event_free )
               ; еще не проверял
               If ListSize( *this\events( ) )
                  ; Debug "free-events " + *this\events( )
                  ClearList( *this\events( ) )
               EndIf
               
               ;\\
               If Not *this\parent
                  *this\parent = *this
               EndIf
               
               If PopupWindow( ) = *this
                  PopupWindow( ) = #Null
               EndIf
               
               ;\\
               If Opened( ) = *this
                  OpenList( *this\parent )
               EndIf
               
               If GetActive( ) = *this
                  If *this <> *this\parent
                     GetActive( ) = *this\parent
                  Else
                     GetActive( ) = #Null
                  EndIf
               EndIf
               
               If *this\parent\FirstWidget( ) = *this
                  *this\parent\FirstWidget( ) = *this\AfterWidget( )
               EndIf
               
               If *this\parent\LastWidget( ) = *this
                  *this\parent\LastWidget( ) = *this\BeforeWidget( )
               EndIf
               
               If *this\parent\TabBox( )
                  If *this\parent\TabBox( ) = *this
                     FreeStructure( *this\parent\TabBox( ) )
                     *this\parent\TabBox( ) = 0
                  EndIf
                  *this\parent\TabBox( ) = #Null
               EndIf
               
               If *this\parent\scroll
                  If *this\parent\scroll\v = *this
                     FreeStructure( *this\parent\scroll\v )
                     *this\parent\scroll\v = 0
                  EndIf
                  If *this\parent\scroll\h = *this
                     FreeStructure( *this\parent\scroll\h )
                     *this\parent\scroll\h = 0
                  EndIf
                  ; *this\parent\scroll = #Null
               EndIf
               
               If *this\parent\type = #__type_Splitter
                  If *this\parent\split_1( ) = *this
                     FreeStructure( *this\parent\split_1( ) )
                     *this\parent\split_1( ) = 0
                  EndIf
                  If *this\parent\split_2( ) = *this
                     FreeStructure( *this\parent\split_2( ) )
                     *this\parent\split_2( ) = 0
                  EndIf
               EndIf
               
               ;
               If *this\parent\haschildren
                  ; With *this\root
                  LastElement(__widgets( ))
                  Repeat
                     If __widgets( ) = *this Or IsChild( __widgets( ), *this )
                        If __widgets( )\root\haschildren > 0
                           __widgets( )\root\haschildren - 1
                           
                           If __widgets( )\parent <> __widgets( )\root
                              __widgets( )\parent\haschildren - 1
                           EndIf
                           
                           If __widgets( )\TabBox( )
                              If __widgets( )\TabBox( ) = __widgets( )
                                 Debug "   free - tab " + __widgets( )\TabBox( )\class
                                 FreeStructure( __widgets( )\TabBox( ) )
                                 __widgets( )\TabBox( ) = 0
                              EndIf
                              __widgets( )\TabBox( ) = #Null
                           EndIf
                           
                           If __widgets( )\scroll
                              If __widgets( )\scroll\v
                                 Debug "   free - scroll-v " + __widgets( )\scroll\v\class
                                 FreeStructure( __widgets( )\scroll\v )
                                 __widgets( )\scroll\v = 0
                              EndIf
                              If __widgets( )\scroll\h
                                 Debug "   free scroll-h - " + __widgets( )\scroll\h\class
                                 FreeStructure( __widgets( )\scroll\h )
                                 __widgets( )\scroll\h = 0
                              EndIf
                              ; __widgets( )\scroll = #Null
                           EndIf
                           
                           If __widgets( )\type = #__type_Splitter
                              If __widgets( )\split_1( )
                                 Debug "   free - splitter - first " + __widgets( )\split_1( )\class
                                 FreeStructure( __widgets( )\split_1( ) )
                                 __widgets( )\split_1( ) = 0
                              EndIf
                              If __widgets( )\split_2( )
                                 Debug "   free - splitter - second " + __widgets( )\split_2( )\class
                                 FreeStructure( __widgets( )\split_2( ) )
                                 __widgets( )\split_2( ) = 0
                              EndIf
                           EndIf
                           
                           If __widgets( )\bounds\attach
                              ;Debug " free - attach " +__widgets( )\bounds\attach\parent\class
                              __widgets( )\bounds\attach\parent = 0
                              FreeStructure( __widgets( )\bounds\attach )
                              __widgets( )\bounds\attach = #Null
                           EndIf
                           
                           If EnteredWidget( ) = __widgets( )
                              EnteredWidget( ) = #Null
                           EndIf
                           If PressedWidget( ) = __widgets( )
                              PressedWidget( ) = #Null
                           EndIf
                           If GetActive( ) = __widgets( )
                              GetActive( ) = #Null
                           EndIf
                           
                           Debug " free - " + __widgets( )\class
                           If __widgets( )\BeforeWidget( )
                              __widgets( )\BeforeWidget( )\AfterWidget( ) = __widgets( )\AfterWidget( )
                           EndIf
                           If __widgets( )\AfterWidget( )
                              __widgets( )\AfterWidget( )\BeforeWidget( ) = __widgets( )\BeforeWidget( )
                           EndIf
                           
                           __widgets( )\parent  = #Null
                           __widgets( )\address = #Null
                           
                           DeleteElement( __widgets( ), 1 )
                        EndIf
                        
                        If *this\root\haschildren = 0
                           Break
                        EndIf
                     ElseIf PreviousElement( __widgets( )) = 0
                        Break
                     EndIf
                  ForEver
                  ; EndWith
               EndIf
               
               ;\\
               If EnteredWidget( ) = *this
                  EnteredWidget( ) = #Null
               EndIf
               If PressedWidget( ) = *this
                  PressedWidget( ) = #Null
               EndIf
               
               ;\\
               If __roots( ) = *this
                  __roots( )\address = #Null
                  DeleteMapElement( __roots( ) )
                  ; DeleteMapElement( __roots( ), MapKey( __roots( ) ) )
                  ; ResetMap( __roots( ) )
                  Debug " FREE - " + *this\class + " " + *this\address
                  
                  If Not MapSize( __roots( ) )
                     __gui\quit = 1
                  EndIf
               EndIf
               
               ProcedureReturn 1
            EndIf
         EndIf
      EndProcedure
      
      Procedure Repost( ) ; root = #PB_All )
         Static *repaint._s_ROOT
         Protected *root._s_ROOT, __widget, __type, __item, __data
         
         ;\\
         If __gui\repost <> 1
            __gui\repost = 1
            
            ;\\ send posted events
            If ListSize( __events( ) )
               ForEach __events( )
                  ;If __events( )\widget\root = root Or root = #PB_All
                  *root    = __events( )\widget\root
                  __widget = __events( )\widget
                  __type   = __events( )\type
                  __item   = __events( )\item
                  __data   = __events( )\data
                  DeleteElement( __events( ) )
                  
                  ;\\
                  If *root <> Root( )
                     If *repaint
                        If ChangeCurrentCanvas( *repaint\canvas\gadgetID )
                           *repaint\canvas\repaint = 0
                           PostEventRepaint( *repaint )
                        EndIf
                     EndIf
                     If ChangeCurrentCanvas( *root\canvas\gadgetID )
                        *repaint = Root( )
                        ; Debug "    change canvas "
                     EndIf
                  EndIf
                  
                  ;\\
                  If #__event_Repaint = __type
                     Debug "#__event_Repaint"
                     
                  ElseIf #__event_Close = __type
                     Debug "Post close...."
                     Send( __widget, __type, __item, __data )
                     Break
                     
                  ElseIf #__event_Focus = __type Or
                         #__event_LostFocus = __type
                     
                     If Not Send( __widget, __type, __item, __data )
                        DoEvents( __widget, __type )
                     EndIf
                     
                  Else
                     Send( __widget, __type, __item, __data )
                  EndIf
                  ;EndIf
               Next
            EndIf
            
            ;\\
            If *repaint
               *repaint\canvas\repaint = 0
               PostEventRepaint( *repaint )
               *repaint = 0
            EndIf
            
            ;\\ call message
            If EnteredWidget( ) And
               EnteredWidget( )\root <> Root( )
               ; Debug " Change Current Canvas "
               ChangeCurrentCanvas( EnteredWidget( )\root\canvas\gadgetID )
            EndIf
            
            Debug "     -     "
         EndIf
      EndProcedure
      
      Procedure WaitClose( *root._s_ROOT = #Null, waitTime.l = 0 )
         Static mainWindow = - 1
         Protected result
         Protected *ew._s_WIDGET
         
         ;\\
         If *root
            mainWindow = *root\canvas\window
         EndIf
         
         ;\\ send posted events
         If __gui\repost <> 1
            Repost( )
         EndIf
         
         ;\\
         If MapSize( __roots( ) )
            ;\\
            ;ChangeCurrentRoot( )
            
            Repeat
               Select WaitWindowEvent( waittime )
                  Case #PB_Event_CloseWindow : __gui\quit =  - 1
                     Protected window = PB(EventWindow)( )
                     Protected canvas = PB(GetWindowData)( window )
                     
                     If ChangeCurrentCanvas( PB(GadgetID)(canvas))
                        Debug "Wait close.... " + Root( )\address + " " + Root( )\canvas\window + " " + window + " - " + EventGadget( ) + " " + EventData( )
                        
                        Send( Root( ), #__event_Close, window, mainWindow )
                        
                     Else
                        FreeGadget( canvas )
                        CloseWindow( window )
                     EndIf
                     
                     ;\\
                     If MapSize( __roots( ) )
                        ; ChangeCurrentRoot( )
                        __gui\quit = 0
                     Else
                        __gui\quit = 1
                     EndIf
                     
                  Case #PB_Event_RestoreWindow
                     Debug "restore.... "
                     Send( Root( ), #__event_Restore )
                     
                  Case #PB_Event_MaximizeWindow
                     Debug "maximize.... "
                     If Send( Root( ), #__event_Maximize )
                        SetWindowState( window, #PB_Window_Normal )
                     EndIf
                     
                  Case #PB_Event_MinimizeWindow
                     Debug "minimize.... "
                     If Send( Root( ), #__event_Minimize )
                        SetWindowState( window, #PB_Window_Normal )
                     EndIf
                     
               EndSelect
               
               If __gui\quit
                  __gui\quit = 0
                  Debug "---------break-QUIT-------- " + IsWindow(Root( )\canvas\window)
                  Break
               EndIf
               If Not MapSize( __roots( ) )
                  Debug "---------break-MAP---------"
                  Break
               EndIf
            ForEver
            
            ;\\
            If Not __gui\quit
               If IsWindow( PB(EventWindow)( ))
                  Debug "  - end cicle - yes event window"
                  PB(CloseWindow)( PB(EventWindow)( ))
               Else
                  Debug "  - end cicle - no event window"
               EndIf
            EndIf
         EndIf
         
      EndProcedure
      
      Procedure WaitQuit( *root._s_ROOT = #Null )
         
         __gui\loop + 1
         
         ;\\ send posted events
         If __gui\repost <> 1
            Repost( )
         EndIf
         
         ;\\
         ;          If *root > 0
         ;             PushMapPosition( __roots( ) )
         ;             ForEach __roots( )
         ;                If __roots( ) <> *root
         ;                   DisableWindow( __roots( )\canvas\window, #True )
         ;                   GetAtPoint( __roots( ), - 1, - 1 )
         ;                EndIf
         ;             Next
         ;             PopMapPosition( __roots( ) )
         ;          EndIf
         
         ;\\ start main loop
         CompilerSelect #PB_Compiler_OS
            CompilerCase #PB_OS_Linux
               gtk_main_( )
               
            CompilerCase #PB_OS_Windows
               Protected msg.MSG
               
               While GetMessage_( @msg, #Null, 0, 0 )
                  TranslateMessage_( msg )
                  DispatchMessage_( msg )
               Wend
               
            CompilerCase #PB_OS_MacOS
               ;                Define sharedApplication = CocoaMessage( 0, 0, "NSApplication sharedApplication" )
               ;                Define currentEvent = CocoaMessage(0,sharedApplication , "currentEvent") ; var currentEvent: NSEvent? { get }
               ;                Debug " WaitQuit - "+currentEvent
               CocoaMessage( 0, CocoaMessage( 0, 0, "NSApplication sharedApplication" ), "run" )
               
         CompilerEndSelect
         
         Debug "  event( QUIT ) ";+*window\class
      EndProcedure
      
      Procedure PostQuit( *root._s_ROOT = #Null )
         Debug "post( QUIT)"
         
         __gui\loop = 0
         
         ;\\
         ;          If *root > 0
         ;             PushMapPosition( __roots( ) )
         ;             ForEach __roots( )
         ;                If __roots( ) <> *root
         ;                   DisableWindow( __roots( )\canvas\window, #False )
         ;                EndIf
         ;             Next
         ;             PopMapPosition( __roots( ) )
         ;          EndIf
         
         ;\\ stop main loop
         CompilerSelect #PB_Compiler_OS
            CompilerCase #PB_OS_Linux
               gtk_main_quit_( )
               
            CompilerCase #PB_OS_Windows
               PostQuitMessage_( 0 )
               
            CompilerCase #PB_OS_MacOS
               CocoaMessage( 0, CocoaMessage( 0, 0, "NSApplication sharedApplication" ), "stop:", 0 )
               
         CompilerEndSelect
      EndProcedure
      
      ;-
      
      Procedure MessageEvents( )
         
         Select WidgetEventType( )
            Case #__event_Repaint
               Debug "repaint - message " + EventWidget( )\class
               
            Case #__event_Focus
               Debug " MessageEvents (FOCUS) "
               
            Case #__event_LeftClick
               Protected *ew._s_WIDGET = EventWidget( )
               
               If #__type_Button = *ew\type
                  Protected *message._s_WIDGET = *ew\window
                  
                  Select GetText( *ew )
                     Case "No" : SetData( *message, #__message_No )     ; no
                     Case "Yes" : SetData( *message, #__message_Yes )   ; yes
                     Case "Cancel" : SetData( *message, #__message_Cancel ) ; cancel
                  EndSelect
                  
                  Unbind( *message, @MessageEvents( ), #__event_LeftClick )
                  
                  PostQuit( *message )
               EndIf
               
               ProcedureReturn #PB_Ignore
         EndSelect
         
      EndProcedure
      
      Procedure Message( Title.s, Text.s, flag.q = #Null )
         If __gui\loop > 3
            ProcedureReturn 0
         EndIf
         __gui\loop   = 1
         __gui\repost = 0
         
         Protected result, x, y, width = 400, height = 120
         Protected img = - 1, f1 = - 1, f2 = 8
         Protected bw = 85, bh = 25, iw = height - bh - f1 - f2 * 4 - 2 - 1
         
         Protected._s_ROOT *parent, *message
         Protected._s_WIDGET *ok, *no, *cancel, *widget = EventWidget( )
         
         ;\\
         If *widget
            *parent = *widget\root
         Else
            *parent = root( )
         EndIf
         
         ;          ;\\ 1)
         ;          x = ( root( )\width - width )/2
         ;          y = ( root( )\height - height )/2 - #__window_caption_height
         ;          *message = Window( x, y, width, height, Title, #PB_Window_TitleBar, *parent)
         ; ;
         ; ; ;          ;\\ 2)
         ; ; ;          ; *message = Window( x, y, width, height, Title, #PB_Window_TitleBar | #PB_Window_WindowCentered, *parent)
         ;
         ;\\ 3)
         Define newflag = #PB_Window_TitleBar | #PB_Window_Invisible | #PB_Window_NoActivate
         If flag & #__message_ScreenCentered
            newflag | #PB_Window_ScreenCentered
         Else
            newflag | #PB_Window_WindowCentered
         EndIf
         
         *message = Open( #PB_Any, x, y, width, height, Title, newflag, WindowID( *parent\canvas\window ))
         SetClass( *message, #PB_Compiler_Procedure )
         
         ;\\
         If Flag & #__message_Info
            img = -1;CatchImage( #PB_Any, ?img_info, ?end_img_info - ?img_info )
            CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'APPL'")
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'caut'")
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'note'")
               ;            img = CocoaMessage(0, Workspace, "iconForFileType:$", @"'stop'")
            CompilerEndIf
            DataSection
               img_info:
               ; size : 1404 bytes
               Data.q $0A1A0A0D474E5089, $524448490D000000, $2800000028000000, $B8FE8C0000000608, $474B62060000006D
               Data.q $A0FF00FF00FF0044, $493105000093A7BD, $5F98CD8558544144, $3B3BBFC71C47144C, $54C0F03D7F7BB707
               Data.q $14DA0D5AD0348C10, $7C1A6360A90B6D6D, $6D03CAADF49898D3, $D1A87D7AD262545F, $B69B5F469AA9349A
               Data.q $680D82AB6C37D269, $A6220B47FA51A890, $DECFEE38E105102A, $053FB87D333B772E, $CCDD3CF850EE114A
               Data.q $0766FDFE767ECCDC, $F476DC569948E258, $5BCA94AD89227ADA, $3C10B9638C15E085, $7A59504C89240017
               Data.q $8055B371E2774802, $2E678FEAA9A17AFC, $06961711C3AC7F58, $EF905DD4CA91A322, $A159B0EAD38F5EA2
               Data.q $4D30000CA9417358, $1A3033484098DD06, $2C671601A343EB08, $EDD3F547A138B820, $DAFB560A82C89ABE
               Data.q $2E1D2C863E5562A8, $3CD50AAB359173CC, $8D8C00262FCE6397, $83FB0DA43FD7D187, $DDAAFF5D74F85C02
               Data.q $B3A477582D666357, $45754E5D9B42C73C, $16732AAEDD894565, $41FBABA3A6B0899B, $3FAB16311F45A424
               Data.q $8FDB82C66F4B707F, $1595D6EF9001DD5F, $69B32B24BD2B2529, $EA0DEEB7E6181FDC, $9D9F369A5BB6326
               Data.q $A94FBDAEC7BBE0B7, $A732EAE5951BF5F4, $5C114204D2DD216D, $6B9C344C651BD9B9, $5F8FDB82CE66FAAA
               Data.q $5F57EDFEF90841DD, $8469F486ECB61D52, $C2634777AE971D35, $2A9E9FF5E072D5DC, $8DE85A9CB3A47758
               Data.q $4DCF559EDB963737, $0D1DD74741182C67, $C9DDD550E5F86C71, $E68DAFB555E65365, $79E522B2BAF36858
               Data.q $B2DAC765C78001C9, $8DAFB573522C2B62, $8F9455C8929B2E4E, $77B1059330B54E5C, $D579F26E672AD4E3
               Data.q $AC8D0E0F2BD2BD5F, $9F9532F8021F1304, $C910838758FEB56E, $816E0DF732515957, $DAAF81036D5F2CA9
               Data.q $C2E305A5E54F66D7, $73EED922E79850D2, $88B9E6F02BB0E0D9, $2241697952FB2AA2, $B51C5D50B8ACB1A3
               Data.q $69322368555B297F, $A654FC089009A54C, $1E34DD1B45EE65EE, $5F9F7579224403B7, $416D440905240B59
               Data.q $244059B47C668BBE, $56F2A644DDF22B00, $1EBC77E473482920, $E3DCB126CD5175A7, $E720A4816B952854
               Data.q $AA1C1F8C97DBB0A8, $3CE0A0A481CA0015, $2829A74C5DCDCD5F, $0F5481799C981CD6, $9356B8BCB2A56E0A
               Data.q $0B4C0AC3821950B0, $6188962AC4914B75, $8326E2692ED8B632, $32112C58C9006044, $ECE858E5B0989D1A
               Data.q $743677B1BE616735, $07BA4027E44A0623, $6C80F60B188E13D1, $829201DC00066B09, $8C96858E8E2EC9A6
               Data.q $805AC633A82068E1, $371FE43AD04336D4, $3E017C48017AE2C5, $292045C9C672091A, $FE17193FA6FF7E78
               Data.q $24BB170DC670F1B1, $228215E7B04759EC, $8381081FD341E657, $105A57F6BD342FFB, $B487FAFAA7631800
               Data.q $02CD8258AB7E1B4C, $7FAFA533BF1272D8, $0B4E95227E4D3348, $C2283FB0F4FD51EA, $448A12D9E3719E9A
               Data.q $A9D39441710FE231, $C02226AFBB60B4BC, $BE71A320F3D6FF0F, $B80C4880C5A02FD4, $EAE80059B3FE70FC
               Data.q $BFD96D3E2109AFBE, $33433E3653923D3E, $6181FDEF7925044E, $40CCA2BCC151695B, $BFB32F995BDBE050
               Data.q $4BD80C6A38598607, $EED1229FCE4E4FFB, $37BADFD58B1931AB, $9AC9DFBE734207A8, $31180DF76E30F1B1
               Data.q $484A73B9DC7FEBCE, $D7A5B83F9D2F4FFB, $F3E8DECDC7776C64, $77EFE7474D218F98, $BEA6C0F5ABB1CE75
               Data.q $E6D34B630E33E5E9, $D1DDEBF686899CB3, $30F1B1C9EBB3E0B1, $707F829A8EE8DF2E, $EB33FE99E7EAA9A1
               Data.q $92547BE745F7507E, $CF3D5948A6BB587F, $BB773989021B3939, $EE4FFEBB1CE0C06F, $17B5C8FDB00082A9
               Data.q $0D85E5765D9A9161, $D2CFBB3D8776A515, $B091079EAE8A2450, $58699FAF38C60FA6, $AAAC44AE240825E7
               Data.q $524EF9BCCF8048DA, $7CE63B71E6C2BC56, $B1F0FBBCC0BA9B3D, $B389F106710FE236, $E0B19105F4D4FFA4
               Data.q $4964FB2AA2BB5124, $96EF9053D965946A, $5542B5438A9C7B97, $AA218C9B953A9172, $F504091819AC204F
               Data.q $19C68C085CE323C7, $0AFC1667EBA1393B, $9132FEBD1DB62678, $0A88495AE54CAD78, $974C713C10AF0B93
               Data.q $C7A92409E9132188, $DA1DCE5A182B5934, $00FF3496B3E99DD4, $C5E52BD0901E71B2, $444E454900000000
               Data.b $AE, $42, $60, $82
               end_img_info:
            EndDataSection
         EndIf
         If Flag & #__message_Error
            img = CatchImage( #PB_Any, ?img_error, ?end_img_error - ?img_error )
            
            DataSection
               img_error:
               ; size : 1642 bytes
               Data.q $0A1A0A0D474E5089, $524448490D000000, $3000000030000000, $F902570000000608, $474B620600000087
               Data.q $A0FF00FF00FF0044, $491F06000093A7BD, $41D9ED8168544144, $CCEFF1C71DC7546C, $F6A06C4218C6ED7A
               Data.q $E448A410E515497A, $2070C40BB121A4E0, $46DC512B241A4E54, $124BD29004AB2039, $5150F4DA060B2630
               Data.q $52894889E9734815, $42B01552AB888955, $0A9535535581A8E4, $A69B1B838C151352, $0F5F9BEDFAF1DAF1
               Data.q $1B16F7DEBB3635DE, $DBF3D5DEB2E7A873, $8599BCFFBCCDEFCF, $8B999BBFFED0B685, $D94DFC3235B5A893
               Data.q $2AD241A8331E9177, $A24A50090AA21D50, $F4E23494382E38DF, $CDC2449B1FD5A692, $67C9F4601567BBF6
               Data.q $EA910FC176C73A56, $FB3E2C820C026811, $90FA231C4D0CFD92, $77E7A6B4722EFB8E, $3975B5B8601AF37D
               Data.q $E795079E6401C8E9, $718909C7B3E02570, $139E92E751637E23, $67B6C9EA403CB783, $16621CEA8257EE71
               Data.q $51DA72431163C9F8, $ED40125BADFBB67D, $B69198EA40D4D1ED, $E1CFD7F08E620A6A, $649A76066FAEE378
               Data.q $1CAF696A00B39BD2, $F8A5BF1E82DFA931, $B68B1E9F7E92E7EC, $10366C83462792C6, $9B483C679D1EDEDF
               Data.q $E5ADFDD3DFC7CA2B, $679B1D481A900EB3, $FD5FC5A1C6FDEE7C, $789EA5087457C832, $DF27E036FC740DB6
               Data.q $2EDEA7739A99E91B, $7D63573D4FD7C039, $091E176ECB121FEF, $3D92C5F7739E6BA1, $E3F8C8438CEC4B05
               Data.q $E338639DC7E0C287, $93E731F8D0BBE631, $A883C20B9CF064CA, $C03059C99BECC32E, $8A2A927678B696E8
               Data.q $6773962BC31DF31F, $5E32A40D35BC1ED7, $61AE34C8F7C47E20, $B482B75C33F7CFE9, $BD6DC8C3B3E18BF3
               Data.q $F3CE00E87774D0D6, $C8C73B8EC3301077, $1EAA53FC3F1397B7, $A3ED685DBED88879, $889BEB3C515EF88C
               Data.q $FBB987C6E2C3DC1F, $4F437B575A305FF5, $D8C99E55CF67C74C, $B432B0912802A16D, $0BD967DF31F98D05
               Data.q $2244C006A9AB295B, $95211F6B425F3AC4, $131BB7DFAF88CCC9, $17F2C3565D100089, $60D9F045FBE631B7
               Data.q $0C030246B6B523F0, $1BA0F14E30F0BF9F, $EF9127DDBFE58A36, $7DED884489AFFE4F, $0078CCC4F5CBAD05
               Data.q $A1A89BAF79FF3EF9, $AF17ABFAEFE27E38, $B54C2C7A40060436, $9FD33FDED83596F9, $D82EC4FA885E59F8
               Data.q $D0F7C463C6548EB0, $7ABDF473BC7CC6DA, $3F0026054BD3D308, $C1803039A9C479F1, $CC32DA5654B6183D
               Data.q $843D34389FD11F87, $875C6CC25F3AC4B5, $EFC7C8EAEF1236D6, $86D6458670FE883D, $6F207AF2E72123C2
               Data.q $EE229FADFBFAF81E, $E35C19F88FCEA52F, $89B8CABF4FF7EA1A, $F8B374EBF5EC6161, $5A3FDFED5BFB10EC
               Data.q $524EA5751007B45D, $7B2B97B0FD822695, $BC3B99AC09EB4E0F, $A8050B7237754E04, $6194D2B63B9F052A
               Data.q $FCB800F3AFA5E83E, $D12A27E1D9A4A295, $FA6EE7C74A0110E2, $3343761C4CC77B89, $A4788CCDAA213002
               Data.q $66EA532260530BFC, $3698EAEF136AB9F0, $377FBE21937FAE6C, $F026FF1923335366, $598BE240181C3102
               Data.q $3270DA691B56A7E1, $666A6EC0EAEF12D6, $08BE902F11299324, $7D1CEF04E7174011, $C4AF2272F4B8079D
               Data.q $9181BE3CC1EC0FC6, $C085D20F121D8CEC, $B0DECF8273F38800, $621F92BD2E59CCE6, $A6A48DE6EC4EC1E5
               Data.q $181F3A4E3C00A70C, $F4D5891F61D388C0, $FF7BBCB9F7DE3E68, $9675385AC3B9B564, $5373410C15F6BBCB
               Data.q $ECEB025E38B489F6, $8C7F569A4B00C0E9, $4B1CE3220F0C5CB8, $4FE0BA3BE3E5365B, $7F45AC8B952B4C1F
               Data.q $2DEA844889EFC9EC, $AA5D23C40BBE782D, $091207B8325CECFD, $630A823C3166F487, $4543837863E1F7F9
               Data.q $19E4E8B5A54439F1, $CBEF0864EAFCBD2E, $4131B94C3B5E0641, $2D1D5E40D37B9078, $4D6E25BF5A1CA4B8
               Data.q $EEB9F085E5489FE6, $FC565ABAD19F3B4E, $A7A63EFBBDAE05E4, $6E687C654A927037, $E61DAF030B4B7AA2
               Data.q $3330F5B7215D7F8E, $DF6577BFDC7F695E, $FAD5F0000A84AF5F, $73E133C7EE175E27, $6A27DF318E73D6A5
               Data.q $EF9E3E769954FD08, $47491E3068863728, $99CE42CECBFF3FEA, $D060C40EE915C4D7, $1E3436B2A80CBC02
               Data.q $1F8B0DAC8B0C0A89, $CEE0189ADA5B5132, $7C316769C9AF2793, $336A9850616065F1, $19C98BB16DA138F5
               Data.q $ED9F556C6E8B7D37, $3A0F0BB71BC70B7E, $03198A7793FCFF1A, $E71DB45BAAEEE677, $EFB1DD41BC6F9DDE
               Data.q $B7736A17C8317D2C, $077E9A22B2A5A1BF, $E37DE9DE572F3CD8, $B9BF6727F58E9E45, $86F6AD189E4B100B
               Data.q $B13618F9EBF4207E, $F1370F06153E967B, $E8769E1B43D0C703, $DA14BFE31CD96208, $607AA16C6FE6341E
               Data.q $630AEDEA7739AB6A, $7C039E94863A4956, $152AAF8DE711D25A, $E681F06F91FCB30F, $65624DA80766477A
               Data.q $DDC7F71DC8CBF889, $35C804BCEC3342D1, $388C1EF7C0FABD81, $AA70FBA106B9CB35, $887D7214F8B2AA07
               Data.q $FB5D3D9D6F3A4E8B, $B6859B67A164B9D9, $FEEC7FED695A16D0, $00006B709A860323, $42AE444E45490000
               Data.b $60, $82
               
               
               end_img_error:
            EndDataSection
         EndIf
         If Flag & #__message_Warning
            img = CatchImage( #PB_Any, ?img_warning, ?end_img_warning - ?img_warning )
            
            DataSection
               img_warning:
               ; size : 1015 bytes
               Data.q $0A1A0A0D474E5089, $524448490D000000, $2800000028000000, $B8FE8C0000000608, $474B62060000006D
               Data.q $A0FF00FF00FF0044, $49AC03000093A7BD, $DD98ED8558544144, $67339F8718551C6B, $6BA934DBB3B3B267
               Data.q $60255624DDDB3493, $785E2A42F0458295, $068C4AF69BDA17E3, $030B4150FDBB362A, $D9AC514B49409622
               Data.q $86FF825726F0546E, $2968A4290537B482, $7B79EF7CD1F26F42, $CCECECDD9B68DDB1, $3DE7337B07E4DE84
               Data.q $CE73DE666FECFBEF, $BE4895C549A28EC0, $D18003BEE526913D, $1BC8E3E7C60FAABF, $9FECC2827EF8A00B
               Data.q $A661997980015464, $5B7351EBFBE505F3, $47813B9850001351, $53C3D570C7AAE19E, $B23A91C71FB3F205
               Data.q $DEADAC5DE7CBF283, $8B8B83D4866AB9E2, $A3501A8AC0BD75C0, $F5C1DD1FC946EE17, $A401C06F62B271D5
               Data.q $FA6A26F924D8AC80, $7E5A30F4E54A0E48, $5560C8F125D550E7, $EF525E4622D61FC1, $09839A235B0F5C4F
               Data.q $6801C1363A672499, $22528E5162499C81, $1C849B7E9D4CA034, $9B0B11E8E79A47A4, $D4275B0ADE94A961
               Data.q $86766961DF69962D, $ACF075B2DD97A5A7, $D5E5ADCCBFD61B82, $E0E70AD6ED2BCBC9, $01C25A643259C2E2
               Data.q $267D976692740A74, $BDB1C9941DB6A94C, $00648F1BCF26FAD8, $B2C7BE9AE0658040, $5EA769DE2F46A039
               Data.q $1126BD12FA3A0EFB, $4936293C09200E18, $A54A016D72DDA26B, $768E93EC9BC50878, $2E521BC80E33910B
               Data.q $141140605A676E1D, $A093744937932ADA, $8281A48D7ED62F67, $15A3F82459547171, $403871C753A9C1DC
               Data.q $06470A2CF737C256, $804094E82C78A9F8, $D268304CD1725D32, $92EA1CB5051ED691, $7565900D8BC67CFC
               Data.q $D18BC6D5D9712E8E, $117CC62E3760194C, $10E54E54A025BC24, $2A40E3FD026F2319, $6858AA64C64A1498
               Data.q $61F477CD41DADA15, $27D00E40F641C4E3, $8096E855B9759636, $67D2AF1465F163F2, $8B1B13EAEAE0D8EC
               Data.q $535855B2BD295223, $321995650B7DF140, $C60B95CDEEFB4C6E, $B8D66D1F4CB2AB43, $D29243E17FBD28B6
               Data.q $084F4AD2B684774F, $4859A46E52C3D2B8, $3D5D0669FAB94043, $435D5C1B6F49A0CF, $B3ACF95CB8C88D26
               Data.q $D9AFD513076370D1, $EC1E3B578FDB0E23, $4DE1A355F6B926C1, $FEC232053D2E5280, $8171BCABDB194E87
               Data.q $9B43A3CCF63AB911, $1D8D8BF4930EEB37, $1B03C18628DF29A2, $2381EFADB70E37E8, $5E94A941C87A1FFF
               Data.q $4653A34D7B30E2C3, $57BCFD90E834E96B, $37AF4AA6517A9634, $506499A04FDF1404, $4BE860F68ADAA152
               Data.q $7B4EB6B20E173A18, $DF46D1F2B907EA58, $CA9492773F250FFD, $BBF30895BD7115D2, $BF527F49C6E93C04
               Data.q $2DC126EA5CA400A4, $73BAB8046E349A0E, $A6B8292C73E17BD5, $BB85E8D406B15816, $05103AFB551D0735
               Data.q $DA95C00E05160EAE, $1B16FD43CE570957, $DA5DBF1B621FD38E, $EA54075063860747, $5917BB61884A7336
               Data.q $FBD40FF52823CC02, $FE37EB4DCBBCBAE0, $9BF9A436D938F722, $8ED1D8C6E3DEF555, $2EE409553D03EE00
               Data.q $4900000000FAB21F
               Data.b $45, $4E, $44, $AE, $42, $60, $82
               end_img_warning:
            EndDataSection
         EndIf
         
         ;\\
         Container( f1, f1, width - f1 * 2, height - bh - f1 - f2 * 2 - 1 )
         Image( f2, f2, iw, iw, img, #PB_Image_Border | #__flag_center )
         Text( f2 + iw + f2, f2, width - iw - f2 * 3, iw, Text, #__text_center | #__text_left )
         CloseList( )
         
         ;\\
         *ok = Button( width - bw - f2, height - bh - f2, bw, bh, "Ok", #PB_Button_Default )
         If Flag & #__message_YesNo Or
            Flag & #__message_YesNoCancel
            SetText( *ok, "Yes" )
            *no = Button( width - ( bw + f2 ) * 2 - f2, height - bh - f2, bw, bh, "No" )
         EndIf
         If Flag & #__message_YesNoCancel
            *cancel = Button( width - ( bw + f2 ) * 3 - f2 * 2, height - bh - f2, bw, bh, "Cancel" )
         EndIf
         
         Bind( *message, @MessageEvents( ), #__event_LeftClick )
         Bind( *message, @MessageEvents( ), #__event_Focus )
         
         ;\\
         Sticky( *message, #True )
         HideWindow( *message\root\canvas\window, 0);, #PB_Window_NoActivate )
         
         ;\\
         ;Disable( *parent, 1 )
         
         ;\\
         WaitQuit( *message )
         
         ;\\
         ;Disable( *parent, 0 )
         
         ;\\
         FreeImage( img )
         Sticky( *message, #False )
         result = GetData( *message )
         
         ;\\ close
         Close( *message )
         Debug "Close - Message " + IsWindow(*message\canvas\window)
         
         ;\\
         ;ChangeCurrentRoot( )
         
         ;\\
         EventWidget( ) = *widget
         
         ProcedureReturn result
      EndProcedure
   EndModule
   ;- <<<
CompilerEndIf


;-
Macro UseLIB( _name_ )
   UseModule _name_
   UseModule constants
   UseModule structures
EndMacro


;-
CompilerIf #PB_Compiler_IsMainFile = 99
   EnableExplicit
   Uselib(widget)
   
   Global object, parent
   Declare CustomEvents( )
   
   ;\\
   Open(0, 0, 0, 600, 600, "Demo bounds", #PB_Window_SystemMenu | #PB_Window_ScreenCentered | #PB_Window_SizeGadget)
   a_init(root( ), 4)
   Define fs = 20
   ;\\
   ; parent = Window(50, 50, 500, 500, "parent", #PB_Window_SystemMenu)
   ; parent = Window(50, 50, 500, 500, "parent", #PB_Window_BorderLess)
   parent = Container(50, 50, 500, 500)
   SetFrame(parent, fs)
   
   ;\\
   ; object = Window(100, 100, 250, 220, "Resize me !", #PB_Window_SystemMenu | #PB_Window_SizeGadget, parent)
   ; object = Window(100, 100, 250, 220, "Resize me !", #PB_Window_BorderLess | #PB_Window_SizeGadget, parent)
   ; object = Container(100, 100, 250, 250)
   object = ScrollArea(100, 100, 250, 250, 350, 350, 1) : SetState( GetBar( object, 1 ), 80 )
   ;  object = ScrollArea(100, 100, 250, 250, 150,150, 1)
   Button( 50, 50, 100, 100, GetClass(object))
   ; Container( 50,50,100,100) : CloseList( )
   ; Window(50,50,100,100, GetClass(object), #PB_Window_BorderLess | #PB_Window_SizeGadget, object) : CloseList( )
   a_set(widget( ), #__a_full, 18)
   CloseList( )
   
   ;\\
   SetFrame(object, fs)
   a_set(object, #__a_full, 8)
   ; ;   SizeBounds(object, 200, 200, 501-fs*2, 501-fs*2)
   ; ;   MoveBounds(object, fs, fs, 501-fs, 501-fs)
   
   ;\\
   Bind( widget( ), @CustomEvents( ), #__event_Draw )
   WaitClose( )
   
   ;\\
   Procedure CustomEvents( )
      Select WidgetEventType( )
         Case #__event_Draw
            
            ; Demo draw on element
            UnclipOutput( )
            DrawingMode(#PB_2DDrawing_Outlined)
            
            If Eventwidget( )\bounds\move
               Box(Eventwidget( )\parent\x[#__c_frame] + Eventwidget( )\bounds\move\min\x,
                   Eventwidget( )\parent\y[#__c_frame] + Eventwidget( )\parent\fs[2] + Eventwidget( )\bounds\move\min\y,
                   Eventwidget( )\bounds\move\max\x - Eventwidget( )\bounds\move\min\x,
                   Eventwidget( )\bounds\move\max\y - Eventwidget( )\bounds\move\min\y, $ff0000ff)
            EndIf
            
            If Eventwidget( )\bounds\size
               ;           Box(Eventwidget( )\bounds\size\min\width,
               ;               Eventwidget( )\bounds\size\min\height,
               ;               Eventwidget( )\bounds\size\max\width-Eventwidget( )\bounds\size\min\width,
               ;               Eventwidget( )\bounds\size\max\height-Eventwidget( )\bounds\size\min\height, $ffff0000)
               
               Box(Eventwidget( )\x[#__c_frame],
                   Eventwidget( )\y[#__c_frame],
                   Eventwidget( )\bounds\size\min\width,
                   Eventwidget( )\bounds\size\min\height, $ff00ff00)
               
               Box(Eventwidget( )\x[#__c_frame],
                   Eventwidget( )\y[#__c_frame],
                   Eventwidget( )\bounds\size\max\width,
                   Eventwidget( )\bounds\size\max\height, $ffff0000)
            EndIf
            
            ; Box(Eventwidget( )\x,Eventwidget( )\y,Eventwidget( )\width,Eventwidget( )\height, draw_color)
            
      EndSelect
      
   EndProcedure
CompilerEndIf

CompilerIf #PB_Compiler_IsMainFile = 99
   EnableExplicit
   Uselib(widget)
   
   Global object, parent
   Declare CustomEvents( )
   
   ;\\
   Open(0, 0, 0, 600, 600, "Demo bounds", #PB_Window_SystemMenu | #PB_Window_ScreenCentered | #PB_Window_SizeGadget)
   a_init(root( ), 4)
   Define fs = 20
   ;\\
   ; parent = Window(50, 50, 500, 500, "parent", #PB_Window_SystemMenu)
   ; parent = Window(50, 50, 500, 500, "parent", #PB_Window_BorderLess)
   parent       = Container(50, 50, 500, 500)
   widget( )\fs = fs : Resize(widget( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore)
   
   ;\\
   ; object = Window(100, 100, 250, 220, "Resize me !", #PB_Window_SystemMenu | #PB_Window_SizeGadget, parent)
   ; object = Window(100, 100, 250, 220, "Resize me !", #PB_Window_BorderLess | #PB_Window_SizeGadget, parent)
   ; object = Container(100, 100, 250, 250) : CloseList( )
   object = ScrollArea(100, 100, 250, 250, 350, 350, 1) : CloseList( )
   ;  object = ScrollArea(100, 100, 250, 250, 150,150, 1) : CloseList( )
   
   ;\\
   widget( )\fs = fs : Resize(widget( ), #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore)
   
   ;\\
   a_set(object, #__a_full, 8)
   ; ;   SizeBounds(object, 200, 200, 501-fs*2, 501-fs*2)
   ; ;   MoveBounds(object, fs, fs, 501-fs, 501-fs)
   
   ;\\
   Bind( widget( ), @CustomEvents( ), #__event_Draw )
   WaitClose( )
   
   ;\\
   Procedure CustomEvents( )
      Select WidgetEventType( )
         Case #__event_Draw
            
            ; Demo draw on element
            UnclipOutput( )
            DrawingMode(#PB_2DDrawing_Outlined)
            
            If Eventwidget( )\bounds\move
               Box(Eventwidget( )\parent\x[#__c_frame] + Eventwidget( )\bounds\move\min\x,
                   Eventwidget( )\parent\y[#__c_frame] + Eventwidget( )\parent\fs[2] + Eventwidget( )\bounds\move\min\y,
                   Eventwidget( )\bounds\move\max\x - Eventwidget( )\bounds\move\min\x,
                   Eventwidget( )\bounds\move\max\y - Eventwidget( )\bounds\move\min\y, $ff0000ff)
            EndIf
            
            If Eventwidget( )\bounds\size
               ;           Box(Eventwidget( )\bounds\size\min\width,
               ;               Eventwidget( )\bounds\size\min\height,
               ;               Eventwidget( )\bounds\size\max\width-Eventwidget( )\bounds\size\min\width,
               ;               Eventwidget( )\bounds\size\max\height-Eventwidget( )\bounds\size\min\height, $ffff0000)
               
               Box(Eventwidget( )\x[#__c_frame],
                   Eventwidget( )\y[#__c_frame],
                   Eventwidget( )\bounds\size\min\width,
                   Eventwidget( )\bounds\size\min\height, $ff00ff00)
               
               Box(Eventwidget( )\x[#__c_frame],
                   Eventwidget( )\y[#__c_frame],
                   Eventwidget( )\bounds\size\max\width,
                   Eventwidget( )\bounds\size\max\height, $ffff0000)
            EndIf
            
            ; Box(Eventwidget( )\x,Eventwidget( )\y,Eventwidget( )\width,Eventwidget( )\height, draw_color)
            
      EndSelect
      
   EndProcedure
CompilerEndIf

CompilerIf #PB_Compiler_IsMainFile = 99
   Uselib(widget)
   
   Global MDI, MDI_splitter, Splitter
   
   If Open(0, 0, 0, 700, 280, "MDI", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
      
      MDI        = MDI(0, 0, 680, 260);, #PB_MDI_AutoSize) ; as they will be sized automatically
      Define *g0 = AddItem(MDI, -1, "form_0")
      ; 		Button(10,10,80,80,"button_0")
      ; 		
      ; 		Define *g1 = AddItem(MDI, -1, "form_1")
      ; 		Button(10,10,80,80,"button_1")
      ; 		
      ; 		Define *g2 = AddItem(MDI, -1, "form_2")
      ; 		Button(10,10,80,80,"button_2")
      Resize(*g0, 190, 190, #PB_Ignore, #PB_Ignore)
      
      Repeat : Until WaitWindowEvent( ) = #PB_Event_CloseWindow
   EndIf
   
CompilerEndIf

CompilerIf #PB_Compiler_IsMainFile
   
   EnableExplicit
   UseLIB(widget)
   
   Enumeration
      #window_0
      #window
   EndEnumeration
   
   
   ;-\\ ANCHORS
   Global view, size_value, pos_value, grid_value, back_color, frame_color, size_text, pos_text, grid_text
   
   Procedure anchor_events( )
      Protected change
      Protected *this._s_widget = EventWidget( )
      
      Select WidgetEventType( )
         Case #__event_Create
            If Not *this\child
               If *this\index > 0 And  *this\index < 5
                  Debug "8476575788484 "+*this\class
                  a_set( *this, #__a_full )
               EndIf 
            EndIf 
            
         Case #__event_LeftClick
            Select *this
               Case frame_color
                  
               Case back_color
                  
            EndSelect
            
         Case #__event_Focus
            change = 1
            
         Case #__event_StatusChange
            If size_value
               SetState(size_value, *this\anchors\size )
            EndIf
            
            If pos_value
               SetState(pos_value, *this\anchors\pos )
            EndIf
            
            If grid_value
               SetState(grid_value, mouse( )\steps )
            EndIf
            
            change = 1
            
         Case #__event_Change
            Select *this
               Case size_value
                  a_set( a_focused( ), #__a_full, GetState(*this), GetState(pos_value))
                  
               Case pos_value
                  a_set( a_focused( ), #__a_full, GetState(size_value), GetState(*this))
                  
               Case grid_value
                  mouse( )\steps = GetState(grid_value)
                  
            EndSelect
            
            change = 1
            
      EndSelect
      
      If change
         If a_focused( )
            SetState(grid_value, mouse( )\steps )
            SetState(size_value, a_focused( )\anchors\size )
            SetState(pos_value, a_focused( )\anchors\pos )
            
            SetText(grid_text, Str(mouse( )\steps) )
            SetText(size_text, Str(a_focused( )\anchors\size) )
            SetText(pos_text, Str(a_focused( )\anchors\pos) )
         EndIf
      EndIf
      
   EndProcedure
   
   OpenWindow(#window_0, 0, 0, 424, 352, "AnchorsGadget", #PB_Window_SystemMenu )
   
   Define i
   Define *w._s_WIDGET, *g._s_WIDGET, editable
   Define *root._s_WIDGET = Open(#window_0, 0, 0, 424, 352): *root\class = "root": SetText(*root, "root")
   
   ;BindWidgetEvent( *root, @BindEvents( ) )
   view = Container(10, 10, 406, 238, #PB_Container_Flat)
   SetColor(view, #PB_Gadget_BackColor, RGB(213, 213, 213))
   a_init( view, 8 )
   
   Define *a0._s_WIDGET = Button( 10, 10, 60, 60, "Button" )
   Define *a1._s_WIDGET = Panel( 5 + 170, 5 + 140, 160, 160, #__flag_nogadgets )
   ;Define *a2._s_WIDGET = Container( 50,45,135,95, #__flag_nogadgets )
   Define *a2._s_WIDGET = ScrollArea( 50, 45, 135, 95, 300, 300, 1, #__flag_nogadgets )
   Define *a3._s_WIDGET = image( 150, 110, 60, 60, -1 )
   
   a_set( *a3, -1, 10)
   
   CloseList( )
   size_value  = Track(56, 262, 240, 26, 0, 30)
   pos_value   = Track(56, 292, 240, 26, 0, 30)
   grid_value  = Track(56, 320, 240, 26, 0, 30)
   back_color  = Button(304, 264, 112, 32, "BackColor")
   frame_color = Button(304, 304, 112, 32, "FrameColor")
   size_text   = Text(8, 256, 40, 24, "0")
   pos_text    = Text(8, 288, 40, 24, "0")
   grid_text   = Text(8, 320, 40, 24, "0")
   
   If a_focused( )
      SetState(grid_value, mouse( )\steps )
      SetState(size_value, a_focused( )\anchors\size )
      SetState(pos_value, a_focused( )\anchors\pos )
      
      SetText(grid_text, Str(mouse( )\steps) )
      SetText(size_text, Str(a_focused( )\anchors\size) )
      SetText(pos_text, Str(a_focused( )\anchors\pos) )
   EndIf
   
   
   Bind( Root( ), @anchor_events( ) )
   
   ;\\Close( )
   
   
   ; Shows using of several panels...
   Procedure BindEvents( )
      Protected *this._s_WIDGET = EventWidget( )
      Protected eventtype = WidgetEventType( )
      
      Select eventtype
            ;       Case #__event_Draw          : Debug "draw"
         Case #__event_MouseWheelX : Debug " - " + *this + " - wheel-x"
         Case #__event_MouseWheelY : Debug " - " + *this + " - wheel-y"
         Case #__event_Input : Debug " - " + *this + " - input"
         Case #__event_KeyDown : Debug " - " + *this + " - key-down"
         Case #__event_KeyUp : Debug " - " + *this + " - key-up"
         Case #__event_Focus : Debug " - " + *this + " - focus"
         Case #__event_LostFocus : Debug " - " + *this + " - lfocus"
         Case #__event_MouseEnter : Debug " - " + *this + " - enter"
         Case #__event_MouseLeave : Debug " - " + *this + " - leave"
         Case #__event_LeftButtonDown : Debug " - " + *this + " - down"
         Case #__event_DragStart : Debug " - " + *this + " - drag"
         Case #__event_Drop : Debug " - " + *this + " - drop"
         Case #__event_LeftButtonUp : Debug " - " + *this + " - up"
         Case #__event_LeftClick : Debug " - " + *this + " - click"
         Case #__event_Left2Click : Debug " - " + *this + " - 2_click"
      EndSelect
   EndProcedure
   
   OpenWindow(#window, 0, 0, 800, 600, "PanelGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
   
   ;\\ Open Root0
   Define *root0._s_WIDGET = Open(#window, 10, 10, 300 - 20, 300 - 20): *root0\class = "root0": SetText(*root0, "root0")
   ;BindWidgetEvent( *root2, @BindEvents( ) )
   
   Global *button_panel = Panel(10, 10, 200 + 60, 200)
   Define Text.s, m.s   = #LF$, a
   AddItem(*button_panel, -1, "1")
   *g = Editor(0, 0, 0, 0, #__flag_gridlines | #__flag_autosize)
   ;*g                 = Editor(10, 10, 200 + 60, 200, #__flag_gridlines);, #__flag_autosize)
   Text.s = "This is a long line." + m.s +
            "Who should show." + m.s +
            m.s +
            m.s +
            m.s +
            "I have to write the text in the box or not." + m.s +
            m.s +
            m.s +
            m.s +
            "The string must be very long." + m.s +
            "Otherwise it will not work."
   
   SetText(*g, Text.s)
   For a = 0 To 2
      AddItem(*g, a, Str(a) + " Line " + Str(a))
   Next
   AddItem(*g, 7 + a, "_")
   For a = 4 To 6
      AddItem(*g, a, Str(a) + " Line " + Str(a))
   Next
   
   ;\\
   AddItem(*button_panel, -1, "2")
   *g = Tree(0, 0, 0, 0, #__flag_gridlines | #__flag_autosize)
   a  = - 1
   AddItem(*g, a, "This is a long line.")
   AddItem(*g, a, "Who should show.")
   AddItem(*g, a, "")
   AddItem(*g, a, "")
   AddItem(*g, a, "")
   AddItem(*g, a, "I have to write the text in the box or not.")
   AddItem(*g, a, "")
   AddItem(*g, a, "")
   AddItem(*g, a, "")
   AddItem(*g, a, "The string must be very long.")
   AddItem(*g, a, "Otherwise it will not work.")
   For a = 0 To 2
      AddItem(*g, a, Str(a) + " Line " + Str(a))
   Next
   AddItem(*g, 7 + a, "_")
   For a = 4 To 6
      AddItem(*g, a, Str(a) + " Line " + Str(a))
   Next
   ;\\
   AddItem(*button_panel, -1, "3")
   *g = ListIcon(0, 0, 0, 0, "Column_1", 90, #__flag_autosize | #__Flag_FullSelection | #__Flag_GridLines | #__Flag_CheckBoxes) ;: *g = GetGadgetData(g)
   For a = 1 To 2
      AddColumn(*g, a, "Column_" + Str(a + 1), 90)
   Next
   For a = 0 To 15
      AddItem(*g, a, Str(a) + "_Column_1" + #LF$ + Str(a) + "_Column_2" + #LF$ + Str(a) + "_Column_3" + #LF$ + Str(a) + "_Column_4", 0)
   Next
   
   SetState(*button_panel, 2)
   CloseList( ) ; close panel lists
   
   *g = String(10, 220, 200, 50, "string gadget text text 1234567890 text text long long very long", #__text_password | #__text_right)
   
   ;\\
   Procedure button_panel_events( )
      Select GetText( EventWidget( ) )
         Case "1"
            SetState(*button_panel, 0)
         Case "2"
            SetState(*button_panel, 1)
      EndSelect
   EndProcedure
   Bind(Button( 220, 220, 25, 50, "1"), @button_panel_events( ), #__event_LeftClick )
   Bind(Button( 220 + 25, 220, 25, 50, "2"), @button_panel_events( ), #__event_LeftClick )
   ;\\Close( )
   
   ;\\
   Define *root1._s_WIDGET = Open(#window, 300, 10, 300 - 20, 300 - 20): *root1\class = "root1": SetText(*root1, "root1")
   ;BindWidgetEvent( *root1, @BindEvents( ) )
   
   ;\\Close( )
   
   Define *root2._s_WIDGET = Open(#window, 10, 300, 300 - 20, 300 - 20): *root2\class = "root2": SetText(*root2, "root2")
   ;BindWidgetEvent( *root2, @BindEvents( ) )
   
   HyperLink( 10, 10, 80, 40, "HyperLink", RGB(105, 245, 44) )
   String( 60, 20, 60, 40, "String" )
   *w = ComboBox( 108, 30, 152, 40, #PB_ComboBox_Editable )
   For i = 1 To 100;0000
      AddItem(*w, i, "text-" + Str(i))
   Next
   SetState( *w, 3 )
   ;\\Close( )
   
   
   Define *root3._s_WIDGET = Open(#window, 300, 300, 300 - 20, 300 - 20): *root3\class = "root3": SetText(*root3, "root3")
   ;BindWidgetEvent( *root3, @BindEvents( ) )
   ;\\Close( )
   
   Define *root4._s_WIDGET = Open(#window, 590, 10, 200, 600 - 20): *root4\class = "root4": SetText(*root4, "root4")
   ;BindWidgetEvent( *root4, @BindEvents( ) )
   ;\\Close( )
   
   
   
   Define count = 2;0000
   #st          = 1
   Global mx    = #st, my = #st
   
   Define time = ElapsedMilliseconds( )
   
   Global *c, *p, *panel._s_WIDGET
   Procedure do_Events( )
      Select WidgetEventType( )
         Case #__event_LeftClick
            
            Select GetText( EventWidget( ) )
               Case "hide_children"
                  hide(*p, 1)
                  ; Disable(*c, 1)
                  
               Case "show_children"
                  hide(*p, 0)
                  
               Case "hide_parent"
                  hide(*c, GetState( EventWidget( ) ))
                  
            EndSelect
            
            ;         ;Case #__event_LeftButtonUp
            ;         ClearDebugOutput( )
            ; PushListPosition( panel_children( ))
            ;         If StartEnumerate(*panel);Root( ))
            ;           If Not hide(widget( )) ;And GetParent(widget( )) = *panel
            ;             Debug " class - " + widget( )\Class ;+" ("+ widget( )\item +" - parent_item)"
            ;           EndIf
            ;           StopEnumerate( )
            ;         EndIf
            ; PopListPosition( panel_children( ))
            
            
      EndSelect
   EndProcedure
   
   OpenList( *root1 )
   *panel = Panel(20, 20, 180 + 40, 180 + 60, editable) : SetText(*panel, "1")
   AddItem( *panel, -1, "item_1" )
   ;Button( 20,20, 80,80, "item_1")
   *g = Editor(0, 0, 0, 0, #__flag_autosize)
   For a = 0 To 2
      AddItem(*g, a, "Line " + Str(a))
   Next
   AddItem(*g, 3 + a, "")
   AddItem(*g, 4 + a, ~"define W_0 = Window( 282, \"Window_0\" )")
   AddItem(*g, 5 + a, "")
   For a = 6 To 8
      AddItem(*g, a, "Line " + Str(a))
   Next
   
   AddItem( *panel, -1, "(hide&show)-test" )
   ; Button( 10,10, 80,80, "item_2")
   Bind(CheckBox( 5, 5, 95, 22, "hide_parent"), @do_Events( ))
   Bind(Option( 5, 30, 95, 22, "hide_children"), @do_Events( ))
   Bind(Option( 5, 55, 95, 22, "show_children", #PB_Button_Toggle ), @do_Events( ))
   ;SetState(widget( ), 1)
   
   *c = Panel(110, 5, 150, 155)
   AddItem(*c, -1, "0")
   *p = Panel(10, 5, 150, 65)
   AddItem(*p, -1, "item-1")
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Button(10, 5, 50, 25, "butt1")
   CloseList( )
   CloseList( )
   AddItem(*p, -1, "item-2")
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Button(10, 5, 50, 25, "butt2")
   CloseList( )
   CloseList( )
   AddItem(*c, -1, "1")
   CloseList( )
   
   Container(10, 75, 150, 55, #PB_Container_Flat)
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Container(10, 5, 150, 55, #PB_Container_Flat)
   Button(10, 5, 50, 45, "butt1")
   CloseList( )
   CloseList( )
   CloseList( )
   CloseList( )
   
   AddItem( *panel, -1, "(enter&leave)-test" )
   
   Procedure events_containers( )
      Protected repaint
      Protected colorback = colors::*this\blue\fore,
                colorframe = colors::*this\blue\frame,
                colorback1 = $ff00ff00,
                colorframe1 = $ff0000ff
      
      Select WidgetEventType( )
         Case #__event_MouseEnter,
              #__event_MouseLeave,
              #__event_MouseMove
            
            If EventWidget( ) <> Root( )
               If EventWidget( )\enter
                  If EventWidget( )\color\frame <> colorframe1
                     repaint                    = 1
                     EventWidget( )\color\frame = colorframe1
                  EndIf
                  
                  If EventWidget( )\inner_enter( )
                     If EventWidget( )\color\back <> colorback1
                        repaint                   = 1
                        EventWidget( )\color\back = colorback1
                     EndIf
                  Else
                     If EventWidget( )\color\back = colorback1
                        repaint                   = 1
                        EventWidget( )\color\back = colorback
                     EndIf
                  EndIf
               Else
                  If EventWidget( )\color\back <> colorback
                     repaint                   = 1
                     EventWidget( )\color\back = colorback
                  EndIf
                  If EventWidget( )\color\frame = colorframe1
                     repaint                    = 1
                     EventWidget( )\color\frame = colorframe
                  EndIf
               EndIf
            EndIf
            
      EndSelect
      
      If repaint
         ; Debug "change state"
      EndIf
   EndProcedure
   
   SetText(ScrollArea(5, 5, 210, 210, 500, 500, 1, editable), "4")
   SetText(Container(70, 10, 70, 180, #__Flag_NoGadgets | editable), "5")
   SetText(Container(40, 20, 180, 180, editable), "6")
   Define seven = Container(20, 20, 180, 180, editable)
   SetText(seven, "      7")
   
   SetText(Container(5, 30, 180, 30, #__Flag_NoGadgets | editable), "     8")
   SetText(Container(5, 45, 180, 30, #__Flag_NoGadgets | editable), "     9")
   SetText(Container(5, 60, 180, 30, #__Flag_NoGadgets | editable), "     10")
   
   CloseList( ) ; 7
   CloseList( ) ; 6
   SetText(Container(10, 45, 70, 180, editable), "11")
   SetText(Container(10, 10, 70, 30, #__Flag_NoGadgets | editable), "12")
   SetText(Container(10, 20, 70, 30, #__Flag_NoGadgets | editable), "13")
   SetText(Container(10, 30, 170, 130, #__Flag_NoGadgets | editable), "14")
   
   SetText(Container(10, 45, 70, 180, editable), "15")
   SetText(Container(10, 5, 70, 180, editable), "16")
   SetText(Container(10, 5, 70, 180, editable), "17")
   SetText(Container(10, 10, 70, 30, #__Flag_NoGadgets | editable), "18")
   CloseList( ) ; 17
   CloseList( ) ; 16
   CloseList( ) ; 15
   CloseList( ) ; 11
   CloseList( ) ; 1
   
   ;\\
   OpenList( seven )
   ;   Define split_1 = Container(0,0,0,0, #__Flag_NoGadgets|editable)
   ;   Define split_2 = Container(0,0,0,0, #__Flag_NoGadgets|editable)
   ;   Define split_3 = Splitter(5, 80, 180, 50,split_1,split_2,editable)
   ;   Define split_4 = Container(0,0,0,0, #__Flag_NoGadgets|editable)
   ;   SetText(Splitter(5, 80, 180, 50,split_3,split_4,#PB_Splitter_Vertical|editable), "10-1")
   SetText(Container( - 5, 80, 180, 50, #__Flag_NoGadgets | editable), "container-7")
   CloseList( ) ; 7
   
   ;\\
   If *panel\root
      ;PushListPosition( *panel\root\children( ))
      If StartEnumerate( *panel, 2 )
         Bind(widget( ), @events_containers( ), #__event_MouseEnter)
         Bind(widget( ), @events_containers( ), #__event_MouseMove)
         Bind(widget( ), @events_containers( ), #__event_MouseLeave)
         StopEnumerate( )
      EndIf
      ;PopListPosition( *panel\root\children( ))
   EndIf
   
   ;\\
   ;OpenList( *panel )
   AddItem( *panel, -1, "item_4" )
   Button( 30, 30, 80, 80, "item_4")
   AddItem( *panel, -1, "item_5" )
   Button( 40, 40, 80, 80, "item_5")
   CloseList( ) ; *panel
   CloseList( ) ; *root1
   
   ; SetState( *panel, 2 )
   
   ;\\\
   OpenList( *root2 )
   SetText(*root2, "*root2" )
   ;   ;Define *p3._s_WIDGET = Container( 80,80, 150,150 )
   ;   Define *p3._s_WIDGET = ScrollArea( 80,80, 150+30,150+30, 300,300 )
   ;   SetText(*p3, "12" )
   ;   SetText(Container( 40,-30, 50,50, #__Flag_NoGadgets ), "13" )
   ;
   ;   Define *p2._s_WIDGET = Container( 40,40, 70,70 ) : SetText(*p2, "4" )
   ;   SetText(Container( 5,5, 70,70 ), "5" )
   ;   SetText(Container( -30,40, 50,50, #__Flag_NoGadgets ), "6")
   ;   CloseList( )
   ;   Define *c1._s_WIDGET = Container( 40,-30, 50,50, #__Flag_NoGadgets ) : SetText(*c1, "3" )
   ;   CloseList( )
   ;
   ;   SetText(Container( 50,130, 50,50, #__Flag_NoGadgets ), "14" )
   ;   SetText(Container( -30,40, 50,50, #__Flag_NoGadgets ), "15" )
   ;   SetText(Container( 130,50, 50,50, #__Flag_NoGadgets ), "16" )
   ;   CloseList( )
   ;   CloseList( )
   Global Button_0, Button_1, Button_2, Button_3, Button_4, Button_5, Splitter_0, Splitter_1, Splitter_2, Splitter_3, Splitter_4, Splitter_5
   ;   Button_0 = Button(0, 0, 0, 0, "Button 0") ; as they will be sized automatically
   ;   Button_1 = Button(0, 0, 0, 0, "Button 1") ; as they will be sized automatically
   ;   Splitter_0 = widget::Splitter(0, 0, 0, 0, Button_0, Button_1, #PB_Splitter_Vertical|#PB_Splitter_FirstFixed)
   
   
   Button_2 = ComboBox( 20, 20, 150, 40)
   For i = 1 To 100;0000
      AddItem(Button_2, i, "text-" + Str(i))
   Next
   SetState( Button_2, 3 )
   
   ;Button_2 = Button(0, 0, 0, 0, "Button 2") ; No need to specify size or coordinates
   Button_3   = Button(0, 0, 0, 0, "Button 3") ; as they will be sized automatically
   Splitter_1 = widget::Splitter(0, 0, 0, 0, Button_2, Button_3, #PB_Splitter_Vertical | #PB_Splitter_SecondFixed)
   widget::SetAttribute(Splitter_1, #PB_Splitter_FirstMinimumSize, 40)
   widget::SetAttribute(Splitter_1, #PB_Splitter_SecondMinimumSize, 40)
   ;Button_4 = Button(0, 0, 0, 0, "Button 4") ; No need to specify size or coordinates
   Button_4   = Progress(0, 0, 0, 0, 0, 100) : SetState(Button_4, 50) ; No need to specify size or coordinates
   Splitter_2 = widget::Splitter(0, 0, 0, 0, Splitter_1, Button_4)
   Button_5   = Button(0, 0, 0, 0, "Button 5") ; as they will be sized automatically
   Splitter_3 = widget::Splitter(0, 0, 0, 0, Button_5, Splitter_2)
   Splitter_4 = widget::Splitter(0, 0, 0, 0, Splitter_0, Splitter_3, #PB_Splitter_Vertical)
   Splitter_5 = widget::Splitter(10, 80, 250, 120, 0, Splitter_4, #PB_Splitter_Vertical)
   SetState(Splitter_5, 50)
   SetState(Splitter_4, 50)
   SetState(Splitter_3, 40)
   SetState(Splitter_1, 50)
   
   Spin(10, 210, 250, 25, 25, 30, #__text_right )
   Spin(10, 240, 250, 25, 5, 30, #__spin_Plus)
   
   ;\\
   OpenList( *root3 )
   Define *tree = Tree( 10, 20, 150, 200, #__tree_checkboxes)
   For i = 1 To 100;0000
      AddItem(*tree, i, "text-" + Str(i))
   Next
   SetState(*tree, 5 - 1)
   Container( 70, 180, 80, 80): CloseList( )
   
   ;\\
   *w = Tree( 100, 30, 100, 260 - 20 + 300, #__flag_borderless | #__flag_multiselect) ; |#__flag_gridlines
   SetColor( *w, #__color_back, $FF07EAF6 )
   For i = 1 To 10;00000
      AddItem(*w, i, "text-" + Str(i))
   Next
   SetState(*w, i - 1 )
   
   ;\\
   *w = Tree( 180, 40, 100, 260 - 20 + 300, #__flag_clickselect )
   For i = 1 To 100;0000
      If (i & 5)
         AddItem(*w, i, "text-" + Str(i), -1, 1 )
      Else
         AddItem(*w, i, "text-" + Str(i))
      EndIf
   Next
   
   Debug "--------  time --------- " + Str(ElapsedMilliseconds( ) - time)
   
   
   ;\\
   Define *window._s_WIDGET
   Define i, y = 5
   OpenList( *root4 )
   For i = 1 To 4
      Window(5, y, 150, 95 + 2, "Window_" + Trim(Str(i)), #PB_Window_SystemMenu | #PB_Window_MaximizeGadget)
      ;Container(5, y, 150, 95 + 2)
      If i = 2
         Disable( widget( ), 1)
      EndIf
      Container(5, 5, 120 + 2, 85 + 2) ;, #PB_Container_Flat)
      If i = 3
         CheckBox(10, 10, 100, 30, "CheckBox_" + Trim(Str(i + 10)))
         SetState( widget( ), 1 )
      ElseIf i = 4
         Option(10, 10, 100, 30, "Option_" + Trim(Str(i + 10)))
      Else
         Button(10, 10, 100, 30, "Button_" + Trim(Str(i + 10)))
      EndIf
      If i = 3
         Disable( widget( ), 1)
      EndIf
      If i = 4 Or i = 3
         Option(10, 45, 100, 30, "Option_" + Trim(Str(i + 20)))
         SetState( widget( ), 1 )
      Else
         Button(10, 45, 100, 30, "Button_" + Trim(Str(i + 20)))
      EndIf
      If i = 3
         Disable( widget( ), 1)
      EndIf
      CloseList( )
      ;CloseList( )
      y + 130
   Next
   
   ;SetActive(*tree)
   
   
   ;    Procedure CallBack( )
   ; ;     Select WidgetEventType( )
   ; ;       Case #__event_Focus
   ; ;         Debug "focus "+EventWidget( )\class
   ; ;
   ; ;       Case #__event_LostFocus
   ; ;         Debug "lostfocus "+EventWidget( )\class
   ; ;
   ; ;       Case #__event_Repaint
   ; ;         Debug "repaint " + EventWidget( )\class
   ; ;         ;ReDraw( EventWidget( ) )
   ; ;         ;ProcedureReturn 1
   ; ;
   ; ;       Default
   ; ;         ; Debug ""+classfromevent(WidgetEventType( )) +" "+ Root( )\class +" "+ EventWidget( )\root\class +" "+ WidgetEventType( )
   ; ;
   ; ;     EndSelect
   ;   EndProcedure
   ;    ;\\
   ;   Bind( #PB_All, @CallBack( ) )
   ;   ; Message( "message", "test", #__message_ScreenCentered )
   ;
   ;\\
   ;WaitQuit( )
   WaitClose( )
   
CompilerEndIf
; IDE Options = PureBasic 5.73 LTS (MacOS X - x64)
; CursorPosition = 2965
; FirstLine = 2592
; Folding = ----------------------------------------------------------P+5-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+2------------------------------------------------------------------------------------------------------------------------------
; EnableXP
; IDE Options = PureBasic 5.73 LTS (Windows - x64)
; Folding = ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------0-v---------------------------------------Pe-9rHn3---v4-----0------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------482-------
; EnableXP